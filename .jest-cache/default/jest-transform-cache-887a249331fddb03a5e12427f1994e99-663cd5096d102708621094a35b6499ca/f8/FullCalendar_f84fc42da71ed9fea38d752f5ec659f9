1c481daad15a856418b86a771c0ee85c
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _createReactClass = _interopRequireDefault(require("create-react-class"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _DateTable = _interopRequireDefault(require("./date/DateTable"));

var _MonthTable = _interopRequireDefault(require("./month/MonthTable"));

var _CalendarMixin = _interopRequireDefault(require("./mixin/CalendarMixin"));

var _CommonMixin = _interopRequireDefault(require("./mixin/CommonMixin"));

var _CalendarHeader = _interopRequireDefault(require("./full-calendar/CalendarHeader"));

var FullCalendar = (0, _createReactClass["default"])({
  displayName: "FullCalendar",
  propTypes: {
    defaultType: _propTypes["default"].string,
    type: _propTypes["default"].string,
    prefixCls: _propTypes["default"].string,
    locale: _propTypes["default"].object,
    onTypeChange: _propTypes["default"].func,
    fullscreen: _propTypes["default"].bool,
    monthCellRender: _propTypes["default"].func,
    dateCellRender: _propTypes["default"].func,
    showTypeSwitch: _propTypes["default"].bool,
    Select: _propTypes["default"].func.isRequired,
    headerComponents: _propTypes["default"].array,
    headerComponent: _propTypes["default"].object,
    // The whole header component
    headerRender: _propTypes["default"].func,
    showHeader: _propTypes["default"].bool,
    disabledDate: _propTypes["default"].func
  },
  mixins: [_CommonMixin["default"], _CalendarMixin["default"]],
  getDefaultProps: function getDefaultProps() {
    return {
      defaultType: 'date',
      fullscreen: false,
      showTypeSwitch: true,
      showHeader: true,
      onTypeChange: function onTypeChange() {}
    };
  },
  getInitialState: function getInitialState() {
    var type;

    if ('type' in this.props) {
      type = this.props.type;
    } else {
      type = this.props.defaultType;
    }

    return {
      type: type
    };
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if ('type' in nextProps) {
      this.setState({
        type: nextProps.type
      });
    }
  },
  onMonthSelect: function onMonthSelect(value) {
    this.onSelect(value, {
      target: 'month'
    });
  },
  setType: function setType(type) {
    if (!('type' in this.props)) {
      this.setState({
        type: type
      });
    }

    this.props.onTypeChange(type);
  },
  render: function render() {
    var props = this.props;
    var locale = props.locale,
        prefixCls = props.prefixCls,
        fullscreen = props.fullscreen,
        showHeader = props.showHeader,
        headerComponent = props.headerComponent,
        headerRender = props.headerRender,
        disabledDate = props.disabledDate;
    var _this$state = this.state,
        value = _this$state.value,
        type = _this$state.type;
    var header = null;

    if (showHeader) {
      if (headerRender) {
        header = headerRender(value, type, locale);
      } else {
        var TheHeader = headerComponent || _CalendarHeader["default"];
        header = _react["default"].createElement(TheHeader, (0, _extends2["default"])({
          key: "calendar-header"
        }, props, {
          prefixCls: "".concat(prefixCls, "-full"),
          type: type,
          value: value,
          onTypeChange: this.setType,
          onValueChange: this.setValue
        }));
      }
    }

    var table = type === 'date' ? _react["default"].createElement(_DateTable["default"], {
      dateRender: props.dateCellRender,
      contentRender: props.dateCellContentRender,
      locale: locale,
      prefixCls: prefixCls,
      onSelect: this.onSelect,
      value: value,
      disabledDate: disabledDate
    }) : _react["default"].createElement(_MonthTable["default"], {
      cellRender: props.monthCellRender,
      contentRender: props.monthCellContentRender,
      locale: locale,
      onSelect: this.onMonthSelect,
      prefixCls: "".concat(prefixCls, "-month-panel"),
      value: value,
      disabledDate: disabledDate
    });
    var children = [header, _react["default"].createElement("div", {
      key: "calendar-body",
      className: "".concat(prefixCls, "-calendar-body")
    }, table)];
    var className = ["".concat(prefixCls, "-full")];

    if (fullscreen) {
      className.push("".concat(prefixCls, "-fullscreen"));
    }

    return this.renderRoot({
      children: children,
      className: className.join(' ')
    });
  }
});
var _default = FullCalendar;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkZ1bGxDYWxlbmRhci5qc3giXSwibmFtZXMiOlsiRnVsbENhbGVuZGFyIiwicHJvcFR5cGVzIiwiZGVmYXVsdFR5cGUiLCJQcm9wVHlwZXMiLCJzdHJpbmciLCJ0eXBlIiwicHJlZml4Q2xzIiwibG9jYWxlIiwib2JqZWN0Iiwib25UeXBlQ2hhbmdlIiwiZnVuYyIsImZ1bGxzY3JlZW4iLCJib29sIiwibW9udGhDZWxsUmVuZGVyIiwiZGF0ZUNlbGxSZW5kZXIiLCJzaG93VHlwZVN3aXRjaCIsIlNlbGVjdCIsImlzUmVxdWlyZWQiLCJoZWFkZXJDb21wb25lbnRzIiwiYXJyYXkiLCJoZWFkZXJDb21wb25lbnQiLCJoZWFkZXJSZW5kZXIiLCJzaG93SGVhZGVyIiwiZGlzYWJsZWREYXRlIiwibWl4aW5zIiwiQ29tbW9uTWl4aW4iLCJDYWxlbmRhck1peGluIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0SW5pdGlhbFN0YXRlIiwicHJvcHMiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwibmV4dFByb3BzIiwic2V0U3RhdGUiLCJvbk1vbnRoU2VsZWN0IiwidmFsdWUiLCJvblNlbGVjdCIsInRhcmdldCIsInNldFR5cGUiLCJyZW5kZXIiLCJzdGF0ZSIsImhlYWRlciIsIlRoZUhlYWRlciIsIkNhbGVuZGFySGVhZGVyIiwic2V0VmFsdWUiLCJ0YWJsZSIsImRhdGVDZWxsQ29udGVudFJlbmRlciIsIm1vbnRoQ2VsbENvbnRlbnRSZW5kZXIiLCJjaGlsZHJlbiIsImNsYXNzTmFtZSIsInB1c2giLCJyZW5kZXJSb290Iiwiam9pbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQSxJQUFNQSxZQUFZLEdBQUcsa0NBQWlCO0FBQUE7QUFDcENDLEVBQUFBLFNBQVMsRUFBRTtBQUNUQyxJQUFBQSxXQUFXLEVBQUVDLHNCQUFVQyxNQURkO0FBRVRDLElBQUFBLElBQUksRUFB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YSxFQUFFZ0IsS0FBSyxDQUFDaUIsc0JBRnZCO0FBR0UsTUFBQSxNQUFNLEVBQUV2QyxNQUhWO0FBSUUsTUFBQSxRQUFRLEVBQUUsS0FBSzBCLGFBSmpCO0FBS0UsTUFBQSxTQUFTLFlBQUszQixTQUFMLGlCQUxYO0FBTUUsTUFBQSxLQUFLLEVBQUU0QixLQU5UO0FBT0UsTUFBQSxZQUFZLEVBQUVYO0FBUGhCLE1BWEY7QUFzQkEsUUFBTXdCLFFBQVEsR0FBRyxDQUNmUCxNQURlLEVBRWQ7QUFBSyxNQUFBLEdBQUcsRUFBQyxlQUFUO0FBQXlCLE1BQUEsU0FBUyxZQUFLbEMsU0FBTDtBQUFsQyxPQUNHc0MsS0FESCxDQUZjLENBQWpCO0FBUUEsUUFBTUksU0FBUyxHQUFHLFdBQUkxQyxTQUFKLFdBQWxCOztBQUVBLFFBQUlLLFVBQUosRUFBZ0I7QUFDZHFDLE1BQUFBLFNBQVMsQ0FBQ0MsSUFBVixXQUFrQjNDLFNBQWxCO0FBQ0Q7O0FBRUQsV0FBTyxLQUFLNEMsVUFBTCxDQUFnQjtBQUNyQkgsTUFBQUEsUUFBUSxFQUFSQSxRQURxQjtBQUVyQkMsTUFBQUEsU0FBUyxFQUFFQSxTQUFTLENBQUNHLElBQVYsQ0FBZSxHQUFmO0FBRlUsS0FBaEIsQ0FBUDtBQUlEO0FBckltQyxDQUFqQixDQUFyQjtlQXdJZW5ELFkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZVJlYWN0Q2xhc3MgZnJvbSAnY3JlYXRlLXJlYWN0LWNsYXNzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgRGF0ZVRhYmxlIGZyb20gJy4vZGF0ZS9EYXRlVGFibGUnO1xuaW1wb3J0IE1vbnRoVGFibGUgZnJvbSAnLi9tb250aC9Nb250aFRhYmxlJztcbmltcG9ydCBDYWxlbmRhck1peGluIGZyb20gJy4vbWl4aW4vQ2FsZW5kYXJNaXhpbic7XG5pbXBvcnQgQ29tbW9uTWl4aW4gZnJvbSAnLi9taXhpbi9Db21tb25NaXhpbic7XG5pbXBvcnQgQ2FsZW5kYXJIZWFkZXIgZnJvbSAnLi9mdWxsLWNhbGVuZGFyL0NhbGVuZGFySGVhZGVyJztcblxuY29uc3QgRnVsbENhbGVuZGFyID0gY3JlYXRlUmVhY3RDbGFzcyh7XG4gIHByb3BUeXBlczoge1xuICAgIGRlZmF1bHRUeXBlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgcHJlZml4Q2xzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGxvY2FsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBvblR5cGVDaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICAgIGZ1bGxzY3JlZW46IFByb3BUeXBlcy5ib29sLFxuICAgIG1vbnRoQ2VsbFJlbmRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgZGF0ZUNlbGxSZW5kZXI6IFByb3BUeXBlcy5mdW5jLFxuICAgIHNob3dUeXBlU3dpdGNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBTZWxlY3Q6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgaGVhZGVyQ29tcG9uZW50czogUHJvcFR5cGVzLmFycmF5LFxuICAgIGhlYWRlckNvbXBvbmVudDogUHJvcFR5cGVzLm9iamVjdCwgLy8gVGhlIHdob2xlIGhlYWRlciBjb21wb25lbnRcbiAgICBoZWFkZXJSZW5kZXI6IFByb3BUeXBlcy5mdW5jLFxuICAgIHNob3dIZWFkZXI6IFByb3BUeXBlcy5ib29sLFxuICAgIGRpc2FibGVkRGF0ZTogUHJvcFR5cGVzLmZ1bmMsXG4gIH0sXG4gIG1peGluczogW0NvbW1vbk1peGluLCBDYWxlbmRhck1peGluXSxcbiAgZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBkZWZhdWx0VHlwZTogJ2RhdGUnLFxuICAgICAgZnVsbHNjcmVlbjogZmFsc2UsXG4gICAgICBzaG93VHlwZVN3aXRjaDogdHJ1ZSxcbiAgICAgIHNob3dIZWFkZXI6IHRydWUsXG4gICAgICBvblR5cGVDaGFuZ2UoKSB7XG4gICAgICB9LFxuICAgIH07XG4gIH0sXG4gIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICBsZXQgdHlwZTtcbiAgICBpZiAoJ3R5cGUnIGluIHRoaXMucHJvcHMpIHtcbiAgICAgIHR5cGUgPSB0aGlzLnByb3BzLnR5cGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHR5cGUgPSB0aGlzLnByb3BzLmRlZmF1bHRUeXBlO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgdHlwZSxcbiAgICB9O1xuICB9LFxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIGlmICgndHlwZScgaW4gbmV4dFByb3BzKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgdHlwZTogbmV4dFByb3BzLnR5cGUsXG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIG9uTW9udGhTZWxlY3QodmFsdWUpIHtcbiAgICB0aGlzLm9uU2VsZWN0KHZhbHVlLCB7XG4gICAgICB0YXJnZXQ6ICdtb250aCcsXG4gICAgfSk7XG4gIH0sXG4gIHNldFR5cGUodHlwZSkge1xuICAgIGlmICghKCd0eXBlJyBpbiB0aGlzLnByb3BzKSkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHR5cGUsXG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy5wcm9wcy5vblR5cGVDaGFuZ2UodHlwZSk7XG4gIH0sXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgY29uc3Qge1xuICAgICAgbG9jYWxlLFxuICAgICAgcHJlZml4Q2xzLFxuICAgICAgZnVsbHNjcmVlbixcbiAgICAgIHNob3dIZWFkZXIsXG4gICAgICBoZWFkZXJDb21wb25lbnQsXG4gICAgICBoZWFkZXJSZW5kZXIsXG4gICAgICBkaXNhYmxlZERhdGUsXG4gICAgfSA9IHByb3BzO1xuICAgIGNvbnN0IHsgdmFsdWUsIHR5cGUgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICBsZXQgaGVhZGVyID0gbnVsbDtcbiAgICBpZiAoc2hvd0hlYWRlcikge1xuICAgICAgaWYgKGhlYWRlclJlbmRlcikge1xuICAgICAgICBoZWFkZXIgPSBoZWFkZXJSZW5kZXIodmFsdWUsIHR5cGUsIGxvY2FsZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBUaGVIZWFkZXIgPSBoZWFkZXJDb21wb25lbnQgfHwgQ2FsZW5kYXJIZWFkZXI7XG4gICAgICAgIGhlYWRlciA9IChcbiAgICAgICAgICA8VGhlSGVhZGVyXG4gICAgICAgICAgICBrZXk9XCJjYWxlbmRhci1oZWFkZXJcIlxuICAgICAgICAgICAgey4uLnByb3BzfVxuICAgICAgICAgICAgcHJlZml4Q2xzPXtgJHtwcmVmaXhDbHN9LWZ1bGxgfVxuICAgICAgICAgICAgdHlwZT17dHlwZX1cbiAgICAgICAgICAgIHZhbHVlPXt2YWx1ZX1cbiAgICAgICAgICAgIG9uVHlwZUNoYW5nZT17dGhpcy5zZXRUeXBlfVxuICAgICAgICAgICAgb25WYWx1ZUNoYW5nZT17dGhpcy5zZXRWYWx1ZX1cbiAgICAgICAgICAvPlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHRhYmxlID0gdHlwZSA9PT0gJ2RhdGUnID8gKFxuICAgICAgPERhdGVUYWJsZVxuICAgICAgICBkYXRlUmVuZGVyPXtwcm9wcy5kYXRlQ2VsbFJlbmRlcn1cbiAgICAgICAgY29udGVudFJlbmRlcj17cHJvcHMuZGF0ZUNlbGxDb250ZW50UmVuZGVyfVxuICAgICAgICBsb2NhbGU9e2xvY2FsZX1cbiAgICAgICAgcHJlZml4Q2xzPXtwcmVmaXhDbHN9XG4gICAgICAgIG9uU2VsZWN0PXt0aGlzLm9uU2VsZWN0fVxuICAgICAgICB2YWx1ZT17dmFsdWV9XG4gICAgICAgIGRpc2FibGVkRGF0ZT17ZGlzYWJsZWREYXRlfVxuICAgICAgLz5cbiAgICApIDogKFxuICAgICAgPE1vbnRoVGFibGVcbiAgICAgICAgY2VsbFJlbmRlcj17cHJvcHMubW9udGhDZWxsUmVuZGVyfVxuICAgICAgICBjb250ZW50UmVuZGVyPXtwcm9wcy5tb250aENlbGxDb250ZW50UmVuZGVyfVxuICAgICAgICBsb2NhbGU9e2xvY2FsZX1cbiAgICAgICAgb25TZWxlY3Q9e3RoaXMub25Nb250aFNlbGVjdH1cbiAgICAgICAgcHJlZml4Q2xzPXtgJHtwcmVmaXhDbHN9LW1vbnRoLXBhbmVsYH1cbiAgICAgICAgdmFsdWU9e3ZhbHVlfVxuICAgICAgICBkaXNhYmxlZERhdGU9e2Rpc2FibGVkRGF0ZX1cbiAgICAgIC8+XG4gICAgKTtcblxuICAgIGNvbnN0IGNoaWxkcmVuID0gW1xuICAgICAgaGVhZGVyLFxuICAgICAgKDxkaXYga2V5PVwiY2FsZW5kYXItYm9keVwiIGNsYXNzTmFtZT17YCR7cHJlZml4Q2xzfS1jYWxlbmRhci1ib2R5YH0+XG4gICAgICAgIHsgdGFibGUgfVxuICAgICAgPC9kaXY+KSxcbiAgICBdO1xuXG5cbiAgICBjb25zdCBjbGFzc05hbWUgPSBbYCR7cHJlZml4Q2xzfS1mdWxsYF07XG5cbiAgICBpZiAoZnVsbHNjcmVlbikge1xuICAgICAgY2xhc3NOYW1lLnB1c2goYCR7cHJlZml4Q2xzfS1mdWxsc2NyZWVuYCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucmVuZGVyUm9vdCh7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLmpvaW4oJyAnKSxcbiAgICB9KTtcbiAgfSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBGdWxsQ2FsZW5kYXI7XG4iXX0=