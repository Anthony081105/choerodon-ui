2f8f4a9e5e3f346b448f7071bd978169
"use strict";

/* istanbul ignore next */
function cov_181jp739tl() {
  var path = "/Users/huihuawk/Documents/opt/choerodon-ui/components/rc-components/tree/Indent.tsx";
  var hash = "88392f37bc1a7cefb6e61f14853ea614788c55bb";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/huihuawk/Documents/opt/choerodon-ui/components/rc-components/tree/Indent.tsx",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 30
        },
        end: {
          line: 3,
          column: 86
        }
      },
      "1": {
        start: {
          line: 5,
          column: 29
        },
        end: {
          line: 5,
          column: 84
        }
      },
      "2": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 9,
          column: 3
        }
      },
      "3": {
        start: {
          line: 10,
          column: 0
        },
        end: {
          line: 10,
          column: 28
        }
      },
      "4": {
        start: {
          line: 12,
          column: 23
        },
        end: {
          line: 12,
          column: 95
        }
      },
      "5": {
        start: {
          line: 14,
          column: 12
        },
        end: {
          line: 14,
          column: 53
        }
      },
      "6": {
        start: {
          line: 16,
          column: 18
        },
        end: {
          line: 16,
          column: 63
        }
      },
      "7": {
        start: {
          line: 18,
          column: 13
        },
        end: {
          line: 44,
          column: 1
        }
      },
      "8": {
        start: {
          line: 19,
          column: 18
        },
        end: {
          line: 19,
          column: 32
        }
      },
      "9": {
        start: {
          line: 20,
          column: 14
        },
        end: {
          line: 20,
          column: 24
        }
      },
      "10": {
        start: {
          line: 21,
          column: 16
        },
        end: {
          line: 21,
          column: 28
        }
      },
      "11": {
        start: {
          line: 22,
          column: 14
        },
        end: {
          line: 22,
          column: 24
        }
      },
      "12": {
        start: {
          line: 24,
          column: 2
        },
        end: {
          line: 26,
          column: 3
        }
      },
      "13": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 25,
          column: 16
        }
      },
      "14": {
        start: {
          line: 28,
          column: 22
        },
        end: {
          line: 28,
          column: 58
        }
      },
      "15": {
        start: {
          line: 29,
          column: 13
        },
        end: {
          line: 29,
          column: 15
        }
      },
      "16": {
        start: {
          line: 31,
          column: 2
        },
        end: {
          line: 38,
          column: 3
        }
      },
      "17": {
        start: {
          line: 31,
          column: 15
        },
        end: {
          line: 31,
          column: 16
        }
      },
      "18": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 37,
          column: 8
        }
      },
      "19": {
        start: {
          line: 40,
          column: 2
        },
        end: {
          line: 43,
          column: 11
        }
      },
      "20": {
        start: {
          line: 46,
          column: 15
        },
        end: {
          line: 46,
          column: 21
        }
      },
      "21": {
        start: {
          line: 47,
          column: 0
        },
        end: {
          line: 47,
          column: 30
        }
      }
    },
    fnMap: {
      "0": {
        name: "Indent",
        decl: {
          start: {
            line: 18,
            column: 22
          },
          end: {
            line: 18,
            column: 28
          }
        },
        loc: {
          start: {
            line: 18,
            column: 35
          },
          end: {
            line: 44,
            column: 1
          }
        },
        line: 18
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 24,
            column: 2
          },
          end: {
            line: 26,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 24,
            column: 2
          },
          end: {
            line: 26,
            column: 3
          }
        }, {
          start: {
            line: 24,
            column: 2
          },
          end: {
            line: 26,
            column: 3
          }
        }],
        line: 24
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "88392f37bc1a7cefb6e61f14853ea614788c55bb"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];

  cov_181jp739tl = function () {
    return actualCoverage;
  };

  return actualCoverage;
}

cov_181jp739tl();

var _interopRequireWildcard =
/* istanbul ignore next */
(cov_181jp739tl().s[0]++, require("@babel/runtime/helpers/interopRequireWildcard"));

var _interopRequireDefault =
/* istanbul ignore next */
(cov_181jp739tl().s[1]++, require("@babel/runtime/helpers/interopRequireDefault"));

/* istanbul ignore next */
cov_181jp739tl().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});

/* istanbul ignore next */
cov_181jp739tl().s[3]++;
exports["default"] = void 0;

var _defineProperty2 =
/* istanbul ignore next */
(cov_181jp739tl().s[4]++, _interopRequireDefault(require("@babel/runtime/helpers/defineProperty")));

var React =
/* istanbul ignore next */
(cov_181jp739tl().s[5]++, _interopRequireWildcard(require("react")));

var _classnames =
/* istanbul ignore next */
(cov_181jp739tl().s[6]++, _interopRequireDefault(require("classnames")));

/* istanbul ignore next */
cov_181jp739tl().s[7]++;

var Indent = function Indent(_ref) {
  /* istanbul ignore next */
  cov_181jp739tl().f[0]++;
  var prefixCls =
  /* istanbul ignore next */
  (cov_181jp739tl().s[8]++, _ref.prefixCls),
      level =
  /* istanbul ignore next */
  (cov_181jp739tl().s[9]++, _ref.level),
      isStart =
  /* istanbul ignore next */
  (cov_181jp739tl().s[10]++, _ref.isStart),
      isEnd =
  /* istanbul ignore next */
  (cov_181jp739tl().s[11]++, _ref.isEnd);

  /* istanbul ignore next */
  cov_181jp739tl().s[12]++;

  if (!level) {
    /* istanbul ignore next */
    cov_181jp739tl().b[0][0]++;
    cov_181jp739tl().s[13]++;
    return null;
  } else
  /* istanbul ignore next */
  {
    cov_181jp739tl().b[0][1]++;
  }

  var baseClassName =
  /* istanbul ignore next */
  (cov_181jp739tl().s[14]++, "".concat(prefixCls, "-indent-unit"));
  var list =
  /* istanbul ignore next */
  (cov_181jp739tl().s[15]++, []);

  /* istanbul ignore next */
  cov_181jp739tl().s[16]++;

  for (var i =
  /* istanbul ignore next */
  (cov_181jp739tl().s[17]++, 0); i < level; i += 1) {
    var _classNames;

    /* istanbul ignore next */
    cov_181jp739tl().s[18]++;
    list.push(React.createElement("span", {
      key: i,
      className: (0, _classnames["default"])(baseClassName, (_classNames = {}, (0, _defineProperty2["default"])(_classNames, "".concat(baseClassName, "-start"), isStart[i + 1]), (0, _defineProperty2["default"])(_classNames, "".concat(baseClassName, "-end"), isEnd[i + 1]), _classNames))
    }));
  }

  /* istanbul ignore next */
  cov_181jp739tl().s[19]++;
  return React.createElement("span", {
    "aria-hidden": "true",
    className: "".concat(prefixCls, "-indent")
  }, list);
};

var _default =
/* istanbul ignore next */
(cov_181jp739tl().s[20]++, Indent);

/* istanbul ignore next */
cov_181jp739tl().s[21]++;
exports["default"] = _default;