{"version":3,"sources":["index.test.js"],"names":["describe","it","mockFn","jest","fn","ds","DataSet","autoCreate","fields","name","defaultValue","min","max","step","events","update","wrapper","expect","toMatchSnapshot","find","at","simulate","clientX","clientY"],"mappings":";;;;AAAA;;AACA;;AACA;;AACA;;AAEAA,QAAQ,CAAC,OAAD,EAAU,YAAM;AACtBC,EAAAA,EAAE,CAAC,iDAAD,EAAoD,YAAM;AAC1D,QAAMC,MAAM,GAAGC,IAAI,CAACC,EAAL,EAAf;AACA,QAAMC,EAAE,GAAG,IAAIC,mBAAJ,CAAY;AACrBC,MAAAA,UAAU,EAAE,IADS;AAErBC,MAAAA,MAAM,EAAE,CAAC;AAAEC,QAAAA,IAAI,EAAE,OAAR;AAAiBC,QAAAA,YAAY,EAAE,EAA/B;AAAmCC,QAAAA,GAAG,EAAE,CAAxC;AAA2CC,QAAAA,GAAG,EAAE,GAAhD;AAAqDC,QAAAA,IAAI,EAAE;AAA3D,OAAD,CAFa;AAGrBC,MAAAA,MAAM,EAAE;AACNC,QAAAA,MAAM,EAAEb;AADF;AAHa,KAAZ,CAAX;AAOA,QAAMc,OAAO,GAAG,mBAAM,gCAAC,YAAD;AAAO,MAAA,OAAO,EAAEX;AAAhB,MAAN,CAAhB;AACAY,IAAAA,MAAM,CAACD,OAAD,CAAN,CAAgBE,eAAhB;AACAF,IAAAA,OAAO,CACJG,IADH,CACQ,2BADR,EAEGC,EAFH,CAEM,CAFN,EAGGC,QAHH,CAGY,YAHZ;AAIAJ,IAAAA,MAAM,CAACD,OAAD,CAAN,CAAgBE,eAAhB;AACD,GAhBC,CAAF;AAiBAjB,EAAAA,EAAE,CAAC,sBAAD,EAAyB,YAAM;AAC/B,QAAMC,MAAM,GAAGC,IAAI,CAACC,EAAL,EAAf;AACA,QAAMC,EAAE,GAAG,IAAIC,mBAAJ,CAAY;AACrBC,MAAAA,UAAU,EAAE,IADS;AAErBC,MAAAA,MAAM,EAAE,CAAC;AAAEC,QAAAA,IAAI,EAAE,OAAR;AAAiBC,QAAAA,YAAY,EAAE,CAA/B;AAAkCC,QAAAA,GAAG,EAAE,CAAvC;AAA0CC,QAAAA,GAAG,EAAE,GAA/C;AAAoDC,QAAAA,IAAI,EAAE;AAA1D,OAAD,CAFa;AAGrBC,MAAAA,MAAM,EAAE;AACNC,QAAAA,MAAM,EAAEb;AADF;AAHa,KAAZ,CAAX;AAOA,QAAMc,OAAO,GAAG,mBAAM,gCAAC,YAAD;AAAO,MAAA,OAAO,EAAEX;AAAhB,MAAN,CAAhB;AACAW,IAAAA,OAAO,CACJG,IADH,CACQ,sBADR,EAEGE,QAFH,CAEY,WAFZ,EAEyB;AAAEC,MAAAA,OAAO,EAAE,CAAX;AAAcC,MAAAA,OAAO,EAAE;AAAvB,KAFzB,EAGGF,QAHH,CAGY,WAHZ,EAGyB;AAAEC,MAAAA,OAAO,EAAE,CAAX;AAAcC,MAAAA,OAAO,EAAE;AAAvB,KAHzB,EAIGF,QAJH,CAIY,SAJZ;AAKAJ,IAAAA,MAAM,CAACD,OAAD,CAAN,CAAgBE,eAAhB;AACD,GAhBC,CAAF;AAiBD,CAnCO,CAAR","sourcesContent":["import React from 'react';\nimport { mount } from 'enzyme';\nimport Range from '..';\nimport DataSet from '../../data-set';\n\ndescribe('Range', () => {\n  it('should show tooltip when hovering range handler', () => {\n    const mockFn = jest.fn();\n    const ds = new DataSet({\n      autoCreate: true,\n      fields: [{ name: 'range', defaultValue: 50, min: 0, max: 100, step: 1 }],\n      events: {\n        update: mockFn,\n      },\n    });\n    const wrapper = mount(<Range dataSet={ds} />);\n    expect(wrapper).toMatchSnapshot();\n    wrapper\n      .find('.c7n-pro-range-draghandle')\n      .at(0)\n      .simulate('mouseEnter');\n    expect(wrapper).toMatchSnapshot();\n  });\n  it('the range drag test ', () => {\n    const mockFn = jest.fn();\n    const ds = new DataSet({\n      autoCreate: true,\n      fields: [{ name: 'range', defaultValue: 0, min: 0, max: 100, step: 1 }],\n      events: {\n        update: mockFn,\n      },\n    });\n    const wrapper = mount(<Range dataSet={ds} />);\n    wrapper\n      .find('.c7n-pro-range-track')\n      .simulate('mouseDown', { clientX: 0, clientY: 0 })\n      .simulate('mouseMove', { clientX: 0, clientY: 100 })\n      .simulate('mouseUp');\n    expect(wrapper).toMatchSnapshot();\n  });\n});\n"]}