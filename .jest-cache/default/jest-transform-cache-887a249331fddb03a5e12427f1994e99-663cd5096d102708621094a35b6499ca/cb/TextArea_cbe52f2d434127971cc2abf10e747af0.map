{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components/input/TextArea.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, {\n  ChangeEvent,\n  Component,\n  CSSProperties,\n  FocusEvent,\n  FormEventHandler,\n  KeyboardEvent,\n  ReactNode,\n  TextareaHTMLAttributes,\n} from 'react';\nimport omit from 'lodash/omit';\nimport classNames from 'classnames';\nimport { AbstractInputProps } from './Input';\nimport calculateNodeHeight from './calculateNodeHeight';\nimport { getPrefixCls } from '../configure';\n\nfunction onNextFrame(cb: () => void) {\n  if (window.requestAnimationFrame) {\n    return window.requestAnimationFrame(cb);\n  }\n  return window.setTimeout(cb, 1);\n}\n\nfunction clearNextFrameAction(nextFrameId: number) {\n  if (window.cancelAnimationFrame) {\n    window.cancelAnimationFrame(nextFrameId);\n  } else {\n    window.clearTimeout(nextFrameId);\n  }\n}\n\nexport interface AutoSizeType {\n  minRows?: number;\n  maxRows?: number;\n}\n\nexport interface TextAreaProps extends AbstractInputProps {\n  autosize?: boolean | AutoSizeType;\n  onPressEnter?: FormEventHandler<any>;\n  autoFocus?: boolean;\n  border?: boolean;\n}\n\nexport interface TextAreaState {\n  textareaStyles?: CSSProperties;\n  inputLength?: number;\n  focused?: boolean;\n}\n\nexport type HTMLTextareaProps = TextareaHTMLAttributes<HTMLTextAreaElement>;\n\nexport default class TextArea extends Component<TextAreaProps & HTMLTextareaProps, TextAreaState> {\n  static displayName = 'TextArea';\n\n  static defaultProps = {\n    showLengthInfo: true,\n    border: true,\n  };\n\n  nextFrameActionId: number;\n\n  state = {\n    textareaStyles: {},\n    inputLength: 0,\n    focused: false,\n  };\n\n  private textAreaRef: HTMLTextAreaElement;\n\n  componentDidMount() {\n    this.resizeTextarea();\n    if (this.textAreaRef.value) {\n      this.setState({\n        inputLength: this.textAreaRef.value.length,\n      });\n    }\n    const { autoFocus } = this.props;\n    if (autoFocus) {\n      this.setState({\n        focused: true,\n      });\n    }\n  }\n\n  componentWillReceiveProps(nextProps: TextAreaProps) {\n    // Re-render with the new content then recalculate the height as required.\n\n    if (this.textAreaRef.value !== nextProps.value) {\n      const inputLength = nextProps.value && nextProps.value.length;\n      this.setState({\n        inputLength: inputLength || 0,\n      });\n    }\n\n    if (nextProps.autoFocus) {\n      this.setState({\n        focused: true,\n      });\n    }\n    const { value } = this.props;\n    if (value !== nextProps.value) {\n      if (this.nextFrameActionId) {\n        clearNextFrameAction(this.nextFrameActionId);\n      }\n      this.nextFrameActionId = onNextFrame(this.resizeTextarea);\n    }\n  }\n\n  focus() {\n    this.textAreaRef.focus();\n  }\n\n  blur() {\n    this.textAreaRef.blur();\n  }\n\n  resizeTextarea = () => {\n    const { autosize } = this.props;\n    if (!autosize || !this.textAreaRef) {\n      return;\n    }\n    const minRows = autosize ? (autosize as AutoSizeType).minRows : null;\n    const maxRows = autosize ? (autosize as AutoSizeType).maxRows : null;\n    const textareaStyles = calculateNodeHeight(this.textAreaRef, false, minRows, maxRows);\n    this.setState({ textareaStyles });\n  };\n\n  getPrefixCls() {\n    const { prefixCls } = this.props;\n    return getPrefixCls('input', prefixCls);\n  }\n\n  getTextAreaClassName() {\n    const { className } = this.props;\n    const prefixCls = this.getPrefixCls();\n    return classNames(prefixCls, `${prefixCls}-textarea-element`, className);\n  }\n\n  handleTextareaChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n    if (!('value' in this.props)) {\n      this.resizeTextarea();\n    }\n    const { onChange } = this.props;\n    if (onChange) {\n      onChange(e);\n    }\n  };\n\n  handleKeyDown = (e: KeyboardEvent<HTMLTextAreaElement>) => {\n    const { onPressEnter, onKeyDown } = this.props;\n    if (e.keyCode === 13 && onPressEnter) {\n      onPressEnter(e);\n    }\n    if (onKeyDown) {\n      onKeyDown(e);\n    }\n  };\n\n  handleInput = () => {\n    this.setState({\n      inputLength: this.textAreaRef.value.length,\n    });\n  };\n\n  saveTextAreaRef = (textArea: HTMLTextAreaElement) => {\n    this.textAreaRef = textArea;\n  };\n\n  getWrapperClassName() {\n    const { disabled, label, border } = this.props;\n    const { inputLength, focused } = this.state;\n    const prefixCls = this.getPrefixCls();\n    return classNames(`${prefixCls}-wrapper`, `${prefixCls}-textarea`, {\n      [`${prefixCls}-has-value`]: inputLength !== 0,\n      [`${prefixCls}-focused`]: focused,\n      [`${prefixCls}-disabled`]: disabled,\n      [`${prefixCls}-has-label`]: !!label,\n      [`${prefixCls}-has-border`]: border,\n    });\n  }\n\n  handleFocus = (e: FocusEvent<HTMLTextAreaElement>) => {\n    const { onFocus } = this.props;\n    this.setState({\n      focused: true,\n    });\n    if (onFocus) {\n      onFocus(e);\n    }\n  };\n\n  handleBlur = (e: FocusEvent<HTMLTextAreaElement>) => {\n    const { onBlur } = this.props;\n    this.setState({\n      focused: false,\n    });\n    if (onBlur) {\n      onBlur(e);\n    }\n  };\n\n  getLengthInfo() {\n    const { maxLength, showLengthInfo } = this.props;\n    const prefixCls = this.getPrefixCls();\n    const { inputLength } = this.state;\n    return (maxLength && showLengthInfo) ||\n      (maxLength && maxLength > 0 && inputLength === maxLength) ? (\n      <div className={`${prefixCls}-length-info`}>{`${inputLength}/${maxLength}`}</div>\n    ) : null;\n  }\n\n  getLabel() {\n    const { placeholder, label } = this.props;\n    const { inputLength } = this.state;\n    if (inputLength === 0 && placeholder) {\n      return placeholder;\n    }\n    return label;\n  }\n\n  renderFloatLabel(): ReactNode {\n    const label = this.getLabel();\n    if (label) {\n      const prefixCls = this.getPrefixCls();\n      return (\n        <div className={`${prefixCls}-label-wrapper`}>\n          <div className={`${prefixCls}-label`}>{label}</div>\n        </div>\n      );\n    }\n  }\n\n  render() {\n    const props = this.props;\n    const { textareaStyles } = this.state;\n    const prefixCls = this.getPrefixCls();\n    const otherProps: TextAreaProps & HTMLTextareaProps = omit(props, [\n      'prefixCls',\n      'onPressEnter',\n      'autosize',\n      'placeholder',\n      'focused',\n      'showLengthInfo',\n    ]);\n    const style = {\n      ...props.style,\n      ...textareaStyles,\n    };\n\n    // Make sure it could be reset when using form.getFieldDecorator\n    if ('value' in otherProps) {\n      otherProps.value = otherProps.value || '';\n    }\n    otherProps.onInput = this.handleInput;\n\n    return (\n      <span className={this.getWrapperClassName()}>\n        <div className={`${prefixCls}-rendered-wrapper`}>\n          <textarea\n            {...otherProps}\n            className={this.getTextAreaClassName()}\n            style={style}\n            onKeyDown={this.handleKeyDown}\n            onChange={this.handleTextareaChange}\n            ref={this.saveTextAreaRef}\n            onInput={this.handleInput}\n            onBlur={this.handleBlur}\n            onFocus={this.handleFocus}\n          />\n          {this.renderFloatLabel()}\n        </div>\n        {this.getLengthInfo()}\n      </span>\n    );\n  }\n}\n"]}