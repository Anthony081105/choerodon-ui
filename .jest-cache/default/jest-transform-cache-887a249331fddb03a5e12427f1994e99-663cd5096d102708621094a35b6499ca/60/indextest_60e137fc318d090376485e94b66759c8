6f2a19dd04075687263e9bce6cce03e0
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _ = _interopRequireDefault(require(".."));

var _dataSet = _interopRequireDefault(require("../../data-set"));

var _transferTest = _interopRequireDefault(require("./transferTest"));

describe('Transfer', function () {
  var handleDataSetChange = jest.fn();
  var optionData = [{
    text: 'Jack',
    value: 'jack'
  }, {
    text: 'Huazhen',
    value: 'huazhen'
  }, {
    text: 'Lucy',
    value: 'lucy'
  }, {
    text: 'Niu',
    value: 'jiaqin'
  }, {
    text: 'Shao',
    value: 'shao'
  }];
  var data = [{
    'first-name': 'huazhen'
  }];
  var optionDs = new _dataSet["default"]({
    data: optionData,
    selection: 'single'
  });
  var ds = new _dataSet["default"]({
    data: data,
    fields: [{
      name: 'first-name',
      type: 'string',
      label: 'Âêç',
      textField: 'text',
      valueField: 'value',
      options: optionDs
    }],
    events: {
      update: handleDataSetChange
    }
  });
  it('Transfer render right Dom structure', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      dataSet: ds,
      name: "first-name"
    }));
    expect(wrapper.find('Select').length).toBe(2);
    expect(wrapper.find('TransferOperation').length).toBe(1);
  });
  it('basic test render 6 input item ', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_transferTest["default"], null));
    expect(wrapper.find('input').length).toBe(6);
  });
  it('check all test  ', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      dataSet: ds,
      name: "first-name"
    }));
    wrapper.find('Checkbox').at(0).simulate('click');
    expect(wrapper.find('Checkbox').at(1).prop('checked')).toBe(true);
  });
  it('click option button ', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      dataSet: ds,
      name: "first-name"
    }));
    wrapper.find('Checkbox').at(0).simulate('click');
    expect(wrapper.find('Select').at(1).find('Checkbox').length).toBe(2);
    wrapper.find('Button').at(1).simulate('click');
    expect(wrapper.find('Select').at(1).find('Checkbox').length).toBe(4);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRlc3QuanMiXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJoYW5kbGVEYXRhU2V0Q2hhbmdlIiwiamVzdCIsImZuIiwib3B0aW9uRGF0YSIsInRleHQiLCJ2YWx1ZSIsImRhdGEiLCJvcHRpb25EcyIsIkRhdGFTZXQiLCJzZWxlY3Rpb24iLCJkcyIsImZpZWxkcyIsIm5hbWUiLCJ0eXBlIiwibGFiZWwiLCJ0ZXh0RmllbGQiLCJ2YWx1ZUZpZWxkIiwib3B0aW9ucyIsImV2ZW50cyIsInVwZGF0ZSIsIml0Iiwid3JhcHBlciIsImV4cGVjdCIsImZpbmQiLCJsZW5ndGgiLCJ0b0JlIiwiYXQiLCJzaW11bGF0ZSIsInByb3AiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQUEsUUFBUSxDQUFDLFVBQUQsRUFBYSxZQUFNO0FBQ3pCLE1BQU1DLG1CQUFtQixHQUFHQyxJQUFJLENBQUNDLEVBQUwsRUFBNUI7QUFDQSxNQUFNQyxVQUFVLEdBQUcsQ0FDakI7QUFBRUMsSUFBQUEsSUFBSSxFQUFFLE1BQVI7QUFBZ0JDLElBQUFBLEtBQUssRUFBRTtBQUF2QixHQURpQixFQUVqQjtBQUFFRCxJQUFBQSxJQUFJLEVBQUUsU0FBUjtBQUFtQkMsSUFBQUEsS0FBSyxFQUFFO0FBQTFCLEdBRmlCLEVBR2pCO0FBQUVELElBQUFBLElBQUksRUFBRSxNQUFSO0FBQWdCQyxJQUFBQSxLQUFLLEVBQUU7QUFBdkIsR0FIaUIsRUFJakI7QUFBRUQsSUFBQUEsSUFBSSxFQUFFLEtBQVI7QUFBZUMsSUFBQUEsS0FBSyxFQUFFO0FBQXRCLEdBSmlCLEVBS2pCO0FBQUVELElBQUFBLElBQUksRUFBRSxNQUFSO0FBQWdCQyxJQUFBQSxLQUFLLEVBQUU7QUFBdkIsR0FMaUIsQ0FBbkI7QUFPQSxNQUFNQyxJQUFJLEdBQUcsQ0FDWDtBQUNFLGtCQUFjO0FBRGhCLEdBRFcsQ0FBYjtBQUtBLE1BQU1DLFFBQVEsR0FBRyxJQUFJQyxtQkFBSixD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RUFGSCxDQUVNLENBRk4sRUFHR0gsSUFISCxDQUdRLFVBSFIsRUFHb0JDLE1BSmhCLENBQU4sQ0FLRUMsSUFMRixDQUtPLENBTFA7QUFNRCxHQXRCQyxDQUFGO0FBdUJELENBbEZPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgbW91bnQgfSBmcm9tICdlbnp5bWUnO1xuaW1wb3J0IFRyYW5zZmVyIGZyb20gJy4uJztcbmltcG9ydCBEYXRhU2V0IGZyb20gJy4uLy4uL2RhdGEtc2V0JztcbmltcG9ydCBUcmFuc2ZlclRlc3QgZnJvbSAnLi90cmFuc2ZlclRlc3QnO1xuXG5kZXNjcmliZSgnVHJhbnNmZXInLCAoKSA9PiB7XG4gIGNvbnN0IGhhbmRsZURhdGFTZXRDaGFuZ2UgPSBqZXN0LmZuKCk7XG4gIGNvbnN0IG9wdGlvbkRhdGEgPSBbXG4gICAgeyB0ZXh0OiAnSmFjaycsIHZhbHVlOiAnamFjaycgfSxcbiAgICB7IHRleHQ6ICdIdWF6aGVuJywgdmFsdWU6ICdodWF6aGVuJyB9LFxuICAgIHsgdGV4dDogJ0x1Y3knLCB2YWx1ZTogJ2x1Y3knIH0sXG4gICAgeyB0ZXh0OiAnTml1JywgdmFsdWU6ICdqaWFxaW4nIH0sXG4gICAgeyB0ZXh0OiAnU2hhbycsIHZhbHVlOiAnc2hhbycgfSxcbiAgXTtcbiAgY29uc3QgZGF0YSA9IFtcbiAgICB7XG4gICAgICAnZmlyc3QtbmFtZSc6ICdodWF6aGVuJyxcbiAgICB9LFxuICBdO1xuICBjb25zdCBvcHRpb25EcyA9IG5ldyBEYXRhU2V0KHtcbiAgICBkYXRhOiBvcHRpb25EYXRhLFxuICAgIHNlbGVjdGlvbjogJ3NpbmdsZScsXG4gIH0pO1xuICBjb25zdCBkcyA9IG5ldyBEYXRhU2V0KHtcbiAgICBkYXRhLFxuICAgIGZpZWxkczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiAnZmlyc3QtbmFtZScsXG4gICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICBsYWJlbDogJ+WQjScsXG4gICAgICAgIHRleHRGaWVsZDogJ3RleHQnLFxuICAgICAgICB2YWx1ZUZpZWxkOiAndmFsdWUnLFxuICAgICAgICBvcHRpb25zOiBvcHRpb25EcyxcbiAgICAgIH0sXG4gICAgXSxcbiAgICBldmVudHM6IHtcbiAgICAgIHVwZGF0ZTogaGFuZGxlRGF0YVNldENoYW5nZSxcbiAgICB9LFxuICB9KTtcbiAgaXQoJ1RyYW5zZmVyIHJlbmRlciByaWdodCBEb20gc3RydWN0dXJlJywgKCkgPT4ge1xuICAgIGNvbnN0IHdyYXBwZXIgPSBtb3VudCg8VHJhbnNmZXIgZGF0YVNldD17ZHN9IG5hbWU9XCJmaXJzdC1uYW1lXCIgLz4pO1xuICAgIGV4cGVjdCh3cmFwcGVyLmZpbmQoJ1NlbGVjdCcpLmxlbmd0aCkudG9CZSgyKTtcbiAgICBleHBlY3Qod3JhcHBlci5maW5kKCdUcmFuc2Zlck9wZXJhdGlvbicpLmxlbmd0aCkudG9CZSgxKTtcbiAgfSk7XG5cbiAgaXQoJ2Jhc2ljIHRlc3QgcmVuZGVyIDYgaW5wdXQgaXRlbSAnLCAoKSA9PiB7XG4gICAgY29uc3Qgd3JhcHBlciA9IG1vdW50KDxUcmFuc2ZlclRlc3QgLz4pO1xuICAgIGV4cGVjdCh3cmFwcGVyLmZpbmQoJ2lucHV0JykubGVuZ3RoKS50b0JlKDYpO1xuICB9KTtcblxuICBpdCgnY2hlY2sgYWxsIHRlc3QgICcsICgpID0+IHtcbiAgICBjb25zdCB3cmFwcGVyID0gbW91bnQoPFRyYW5zZmVyIGRhdGFTZXQ9e2RzfSBuYW1lPVwiZmlyc3QtbmFtZVwiIC8+KTtcbiAgICB3cmFwcGVyXG4gICAgICAuZmluZCgnQ2hlY2tib3gnKVxuICAgICAgLmF0KDApXG4gICAgICAuc2ltdWxhdGUoJ2NsaWNrJyk7XG4gICAgZXhwZWN0KFxuICAgICAgd3JhcHBlclxuICAgICAgICAuZmluZCgnQ2hlY2tib3gnKVxuICAgICAgICAuYXQoMSlcbiAgICAgICAgLnByb3AoJ2NoZWNrZWQnKSxcbiAgICApLnRvQmUodHJ1ZSk7XG4gIH0pO1xuXG4gIGl0KCdjbGljayBvcHRpb24gYnV0dG9uICcsICgpID0+IHtcbiAgICBjb25zdCB3cmFwcGVyID0gbW91bnQoPFRyYW5zZmVyIGRhdGFTZXQ9e2RzfSBuYW1lPVwiZmlyc3QtbmFtZVwiIC8+KTtcbiAgICB3cmFwcGVyXG4gICAgICAuZmluZCgnQ2hlY2tib3gnKVxuICAgICAgLmF0KDApXG4gICAgICAuc2ltdWxhdGUoJ2NsaWNrJyk7XG4gICAgZXhwZWN0KFxuICAgICAgd3JhcHBlclxuICAgICAgICAuZmluZCgnU2VsZWN0JylcbiAgICAgICAgLmF0KDEpXG4gICAgICAgIC5maW5kKCdDaGVja2JveCcpLmxlbmd0aCxcbiAgICApLnRvQmUoMik7XG4gICAgd3JhcHBlclxuICAgICAgLmZpbmQoJ0J1dHRvbicpXG4gICAgICAuYXQoMSlcbiAgICAgIC5zaW11bGF0ZSgnY2xpY2snKTtcbiAgICBleHBlY3QoXG4gICAgICB3cmFwcGVyXG4gICAgICAgIC5maW5kKCdTZWxlY3QnKVxuICAgICAgICAuYXQoMSlcbiAgICAgICAgLmZpbmQoJ0NoZWNrYm94JykubGVuZ3RoLFxuICAgICkudG9CZSg0KTtcbiAgfSk7XG59KTtcbiJdfQ==