{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components/rc-components/tree/utils/treeUtil.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport * as React from 'react';\nimport toArray from 'rc-util/lib/Children/toArray';\nimport warning from 'rc-util/lib/warning';\nimport {\n  DataNode,\n  FlattenNode,\n  NodeElement,\n  DataEntity,\n  Key,\n  EventDataNode,\n} from '../interface';\n// @ts-ignore\nimport { getPosition, isTreeNode } from '../util';\nimport { TreeNodeProps } from '../TreeNode';\n\nexport function getKey(key: Key, pos: string) {\n  if (key !== null && key !== undefined) {\n    return key;\n  }\n  return pos;\n}\n\n/**\n * Warning if TreeNode do not provides key\n */\nexport function warningWithoutKey(treeData: DataNode[] = []) {\n  const keys: Map<string, boolean> = new Map();\n\n  function dig(list: DataNode[], path: string = '') {\n    (list || []).forEach(treeNode => {\n      const { key, children } = treeNode;\n      warning(\n        key !== null && key !== undefined,\n        `Tree node must have a certain key: [${path}${key}]`,\n      );\n\n      const recordKey = String(key);\n      warning(\n        !keys.has(recordKey) || key === null || key === undefined,\n        `Same 'key' exist in the Tree: ${recordKey}`,\n      );\n      keys.set(recordKey, true);\n\n      dig(children, `${path}${recordKey} > `);\n    });\n  }\n\n  dig(treeData);\n}\n\n/**\n * Convert `children` of Tree into `treeData` structure.\n */\nexport function convertTreeToData(rootNodes: React.ReactNode): DataNode[] {\n  function dig(node: React.ReactNode): DataNode[] {\n    const treeNodes = toArray(node) as NodeElement[];\n    return treeNodes\n      .map(treeNode => {\n        // Filter invalidate node\n        if (!isTreeNode(treeNode)) {\n          warning(\n            !treeNode,\n            'Tree/TreeNode can only accept TreeNode as children.',\n          );\n          return null;\n        }\n\n        const { key } = treeNode;\n        const { children, ...rest } = treeNode.props;\n\n        const dataNode: DataNode = {\n          key,\n          ...rest,\n        };\n\n        const parsedChildren = dig(children);\n        if (parsedChildren.length) {\n          dataNode.children = parsedChildren;\n        }\n\n        return dataNode;\n      })\n      .filter((dataNode: DataNode) => dataNode);\n  }\n\n  return dig(rootNodes);\n}\n\n/**\n * Flat nest tree data into flatten list. This is used for virtual list render.\n * @param treeNodeList Origin data node list\n * @param expandedKeys\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\n */\nexport function flattenTreeData(\n  treeNodeList: DataNode[] = [],\n  expandedKeys: Key[] | true = [],\n): FlattenNode[] {\n  const expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\n  const flattenList: FlattenNode[] = [];\n\n  function dig(list: DataNode[], parent: FlattenNode = null): FlattenNode[] {\n    return list.map((treeNode, index) => {\n      const pos: string = getPosition(parent ? parent.pos : '0', index);\n      const mergedKey = getKey(treeNode.key, pos);\n\n      // Add FlattenDataNode into list\n      const flattenNode: FlattenNode = {\n        ...treeNode,\n        parent,\n        pos,\n        children: null,\n        data: treeNode,\n        isStart: [...(parent ? parent.isStart : []), index === 0],\n        isEnd: [...(parent ? parent.isEnd : []), index === list.length - 1],\n      };\n\n      flattenList.push(flattenNode);\n\n      // Loop treeNode children\n      if (expandedKeys === true || expandedKeySet.has(mergedKey)) {\n        flattenNode.children = dig(treeNode.children || [], flattenNode);\n      } else {\n        flattenNode.children = [];\n      }\n\n      return flattenNode;\n    });\n  }\n\n  dig(treeNodeList);\n\n  return flattenList;\n}\n\n/**\n * Traverse all the data by `treeData`.\n * Please not use it out of the `rc-tree` since we may refactor this code.\n */\nexport function traverseDataNodes(\n  dataNodes: DataNode[],\n  callback: (data: {\n    node: DataNode;\n    index: number;\n    pos: string;\n    key: Key;\n    parentPos: string | number;\n    level: number;\n  }) => void,\n) {\n  function processNode(\n    node: DataNode,\n    index?: number,\n    parent?: { node: DataNode; pos: string; level: number },\n  ) {\n    const children = node ? node.children : dataNodes;\n    const pos = node ? getPosition(parent.pos, index) : '0';\n\n    // Process node if is not root\n    if (node) {\n      const data = {\n        node,\n        index,\n        pos,\n        key: node.key !== null ? node.key : pos,\n        parentPos: parent.node ? parent.pos : null,\n        level: parent.level + 1,\n      };\n\n      callback(data);\n    }\n\n    // Process children node\n    if (children) {\n      children.forEach((subNode, subIndex) => {\n        processNode(subNode, subIndex, {\n          node,\n          pos,\n          level: parent ? parent.level + 1 : -1,\n        });\n      });\n    }\n  }\n\n  processNode(null);\n}\n\ninterface Wrapper {\n  posEntities: Record<string, DataEntity>;\n  keyEntities: Record<Key, DataEntity>;\n}\n\n/**\n * Convert `treeData` into entity records.\n */\nexport function convertDataToEntities(\n  dataNodes: DataNode[],\n  {\n    initWrapper,\n    processEntity,\n    onProcessFinished,\n  }: {\n    initWrapper?: (wrapper: Wrapper) => Wrapper;\n    processEntity?: (entity: DataEntity, wrapper: Wrapper) => void;\n    onProcessFinished?: (wrapper: Wrapper) => void;\n  } = {},\n) {\n  const posEntities = {};\n  const keyEntities = {};\n  let wrapper = {\n    posEntities,\n    keyEntities,\n  };\n\n  if (initWrapper) {\n    wrapper = initWrapper(wrapper) || wrapper;\n  }\n\n  traverseDataNodes(dataNodes, item => {\n    const { node, index, pos, key, parentPos, level } = item;\n    const entity: DataEntity = { node, index, key, pos, level };\n\n    const mergedKey = getKey(key, pos);\n\n    posEntities[pos] = entity;\n    keyEntities[mergedKey] = entity;\n\n    // Fill children\n    entity.parent = posEntities[parentPos];\n    if (entity.parent) {\n      entity.parent.children = entity.parent.children || [];\n      entity.parent.children.push(entity);\n    }\n\n    if (processEntity) {\n      processEntity(entity, wrapper);\n    }\n  });\n\n  if (onProcessFinished) {\n    onProcessFinished(wrapper);\n  }\n\n  return wrapper;\n}\n\nexport interface TreeNodeRequiredProps {\n  expandedKeys: Key[];\n  selectedKeys: Key[];\n  loadedKeys: Key[];\n  loadingKeys: Key[];\n  checkedKeys: Key[];\n  halfCheckedKeys: Key[];\n  dragOverNodeKey: Key;\n  dropPosition: number;\n  keyEntities: Record<Key, DataEntity>;\n}\n\n/**\n * Get TreeNode props with Tree props.\n */\nexport function getTreeNodeProps(\n  key: Key,\n  {\n    expandedKeys,\n    selectedKeys,\n    loadedKeys,\n    loadingKeys,\n    checkedKeys,\n    halfCheckedKeys,\n    dragOverNodeKey,\n    dropPosition,\n    keyEntities,\n  }: TreeNodeRequiredProps,\n) {\n  const entity = keyEntities[key];\n\n  const treeNodeProps = {\n    eventKey: key,\n    expanded: expandedKeys.indexOf(key) !== -1,\n    selected: selectedKeys.indexOf(key) !== -1,\n    loaded: loadedKeys.indexOf(key) !== -1,\n    loading: loadingKeys.indexOf(key) !== -1,\n    checked: checkedKeys.indexOf(key) !== -1,\n    halfChecked: halfCheckedKeys.indexOf(key) !== -1,\n    pos: String(entity ? entity.pos : ''),\n\n    // [Legacy] Drag props\n    dragOver: dragOverNodeKey === key && dropPosition === 0,\n    dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\n    dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1,\n  };\n\n  return treeNodeProps;\n}\n\nexport function convertNodePropsToEventData(\n  props: TreeNodeProps,\n): EventDataNode {\n  const {\n    data,\n    expanded,\n    selected,\n    checked,\n    loaded,\n    loading,\n    halfChecked,\n    dragOver,\n    dragOverGapTop,\n    dragOverGapBottom,\n    pos,\n    active,\n  } = props;\n\n  const eventData = {\n    ...data,\n    expanded,\n    selected,\n    checked,\n    loaded,\n    loading,\n    halfChecked,\n    dragOver,\n    dragOverGapTop,\n    dragOverGapBottom,\n    pos,\n    active,\n  };\n\n  if (!('props' in eventData)) {\n    Object.defineProperty(eventData, 'props', {\n      get() {\n        warning(\n          false,\n          'Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`.',\n        );\n        return props;\n      },\n    });\n  }\n\n  return eventData;\n}\n"]}