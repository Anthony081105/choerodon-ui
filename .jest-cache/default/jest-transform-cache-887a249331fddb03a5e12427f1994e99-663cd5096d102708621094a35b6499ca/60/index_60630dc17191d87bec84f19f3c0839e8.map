{"version":3,"sources":["tree/index.js"],"names":["Tree","Component","isLeaf","loading","showLine","switcherIcon","prefixCls","Progress","type","className","size","switcherCls","Icon","switcherOriginCls","props","showIcon","children","checkable","RcTree","itemHeight","ref","setTreeRef","TreeNode","DirectoryTree","openAnimation","animation"],"mappings":"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","sourcesContent":["import React, { cloneElement, Component, } from 'react';\nimport classNames from 'classnames';\nimport DirectoryTree from './DirectoryTree';\nimport animation from '../_util/openAnimation';\nimport RcTree, { TreeNode } from '../rc-components/tree';\nimport Icon from '../icon';\nimport Progress from '../progress';\nimport { getPrefixCls } from '../configure';\nexport { TreeNode };\nexport default class Tree extends Component {\n    constructor() {\n        super(...arguments);\n        this.renderSwitcherIcon = ({ isLeaf, loading }) => {\n            const { showLine, switcherIcon } = this.props;\n            const prefixCls = this.getPrefixCls();\n            if (loading) {\n                return (React.createElement(Progress, { type: \"loading\" /* loading */, className: `${prefixCls}-switcher-loading-icon`, size: \"small\" /* small */ }));\n            }\n            const switcherCls = `${prefixCls}-switcher-icon`;\n            if (showLine) {\n                if (isLeaf) {\n                    return React.createElement(Icon, { type: \"note\", className: `${prefixCls}-switcher-line-icon` });\n                }\n                return React.createElement(Icon, { type: \"arrow_drop_down\", className: switcherCls });\n            }\n            if (isLeaf) {\n                return null;\n            }\n            if (switcherIcon) {\n                const switcherOriginCls = switcherIcon.props.className || '';\n                return cloneElement(switcherIcon, {\n                    className: [switcherOriginCls, switcherCls],\n                });\n            }\n            return React.createElement(Icon, { type: \"arrow_drop_down\", className: switcherCls });\n        };\n        this.setTreeRef = (node) => {\n            this.tree = node;\n        };\n    }\n    getPrefixCls() {\n        const { prefixCls } = this.props;\n        return getPrefixCls('tree', prefixCls);\n    }\n    render() {\n        const props = this.props;\n        const { className, showIcon, children } = props;\n        const { checkable } = props;\n        const prefixCls = this.getPrefixCls();\n        return (React.createElement(RcTree, Object.assign({ itemHeight: 20, ref: this.setTreeRef }, props, { className: classNames(!showIcon && `${prefixCls}-icon-hide`, className), checkable: checkable ? React.createElement(\"span\", { className: `${prefixCls}-checkbox-inner` }) : 0, switcherIcon: this.renderSwitcherIcon, prefixCls: prefixCls }), children));\n    }\n}\nTree.displayName = 'Tree';\nTree.TreeNode = TreeNode;\nTree.DirectoryTree = DirectoryTree;\nTree.defaultProps = {\n    checkable: false,\n    showIcon: false,\n    openAnimation: animation,\n};\n"]}