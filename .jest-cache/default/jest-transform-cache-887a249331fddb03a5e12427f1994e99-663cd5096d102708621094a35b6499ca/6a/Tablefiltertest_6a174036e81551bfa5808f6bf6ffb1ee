a40fbbe68542de293cddeb3f9bddc620
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _ = _interopRequireDefault(require(".."));

function _createSuper(Derived) {
  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  return function () {
    var Super = (0, _getPrototypeOf2["default"])(Derived),
        result;

    if (isNativeReflectConstruct()) {
      var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return (0, _possibleConstructorReturn2["default"])(this, result);
  };
}

describe('Table.filter', function () {
  var filterFn = function filterFn(value, record) {
    return record.name.indexOf(value) !== -1;
  };

  var column = {
    title: 'Name',
    dataIndex: 'name',
    filters: [{
      text: 'Boy',
      value: 'boy'
    }, {
      text: 'Girl',
      value: 'girl'
    }, {
      text: 'Title',
      value: 'title',
      children: [{
        text: 'Designer',
        value: 'designer'
      }, {
        text: 'Coder',
        value: 'coder'
      }]
    }],
    onFilter: filterFn
  };
  var data = [{
    key: 0,
    name: 'Jack'
  }, {
    key: 1,
    name: 'Lucy'
  }, {
    key: 2,
    name: 'Tom'
  }, {
    key: 3,
    name: 'Jerry'
  }];

  function createTable(props) {
    return _react["default"].createElement(_["default"], (0, _extends2["default"])({
      columns: [column],
      dataSource: data,
      pagination: false,
      filterBar: false
    }, props));
  }

  function renderedNames(wrapper) {
    return wrapper.find('TableRow').map(function (row) {
      return row.props().record.name;
    });
  }

  it('renders filter correctly', function () {
    var wrapper = (0, _enzyme.render)(createTable());
    expect(wrapper).toMatchSnapshot();
  });
  it('renders menu correctly', function () {
    var wrapper = (0, _enzyme.mount)(createTable());
    var dropdownWrapper = (0, _enzyme.render)(wrapper.find('Trigger').at(0).instance().getComponent());
    expect(dropdownWrapper).toMatchSnapshot();
  });
  it('renders radio filter correctly', function () {
    var wrapper = (0, _enzyme.mount)(createTable({
      columns: [(0, _objectSpread2["default"])({}, column, {
        filterMultiple: false
      })]
    }));
    var dropdownWrapper = (0, _enzyme.render)(wrapper.find('Trigger').at(0).instance().getComponent());
    expect(dropdownWrapper).toMatchSnapshot();
  });
  it('renders custom content correctly', function () {
    var filter = _react["default"].createElement("div", {
      className: "custom-filter-dropdown"
    }, "custom filter");

    var wrapper = (0, _enzyme.mount)(createTable({
      columns: [(0, _objectSpread2["default"])({}, column, {
        filterDropdown: filter
      })]
    }));
    var dropdownWrapper = (0, _enzyme.render)(wrapper.find('Trigger').at(0).instance().getComponent());
    expect(dropdownWrapper).toMatchSnapshot();
  });
  it('can be controlled by filterDropdownVisible', function () {
    var wrapper = (0, _enzyme.mount)(createTable({
      columns: [(0, _objectSpread2["default"])({}, column, {
        filterDropdownVisible: true
      })]
    }));
    var dropdown = wrapper.find('Dropdown').first();
    expect(dropdown.props().visible).toBe(true);
    wrapper.setProps({
      columns: [(0, _objectSpread2["default"])({}, column, {
        filterDropdownVisible: false
      })]
    });
    dropdown = wrapper.find('Dropdown').first();
    expect(dropdown.props().visible).toBe(false);
  });
  it('fires change event when visible change', function () {
    var handleChange = jest.fn();
    var wrapper = (0, _enzyme.mount)(createTable({
      columns: [(0, _objectSpread2["default"])({}, column, {
        onFilterDropdownVisibleChange: handleChange
      })]
    }));
    wrapper.find('.c7n-dropdown-trigger').first().simulate('click');
    expect(handleChange).toHaveBeenCalledWith(true);
  });
  it('can be controlled by filteredValue', function () {
    var wrapper = (0, _enzyme.mount)(createTable({
      columns: [(0, _objectSpread2["default"])({}, column, {
        filteredValue: ['Lucy']
      })]
    }));
    expect(wrapper.find('tbody tr').length).toBe(1);
    wrapper.setProps({
      columns: [(0, _objectSpread2["default"])({}, column, {
        filteredValue: []
      })]
    });
    expect(wrapper.find('tbody tr').length).toBe(4);
  });
  it('can be controlled by filteredValue null', function () {
    var wrapper = (0, _enzyme.mount)(createTable({
      columns: [(0, _objectSpread2["default"])({}, column, {
        filteredValue: ['Lucy']
      })]
    }));
    expect(wrapper.find('tbody tr').length).toBe(1);
    wrapper.setProps({
      columns: [(0, _objectSpread2["default"])({}, column, {
        filteredValue: null
      })]
    });
    expect(wrapper.find('tbody tr').length).toBe(4);
  });
  it('fires change event', function () {
    var handleChange = jest.fn();
    var wrapper = (0, _enzyme.mount)(createTable({
      onChange: handleChange
    }));
    var dropdownWrapper = (0, _enzyme.mount)(wrapper.find('Trigger').at(0).instance().getComponent());
    dropdownWrapper.find('MenuItem').first().simulate('click');
    dropdownWrapper.find('.confirm').simulate('click');
    expect(handleChange).toHaveBeenCalledWith({}, {
      name: ['boy']
    }, {}, []);
  });
  it('three levels menu', function () {
    var filters = [{
      text: 'Upper',
      value: 'Upper'
    }, {
      text: 'Lower',
      value: 'Lower'
    }, {
      text: 'Level2',
      value: 'Level2',
      children: [{
        text: 'Large',
        value: 'Large'
      }, {
        text: 'Small',
        value: 'Small'
      }, {
        text: 'Level3',
        value: 'Level3',
        children: [{
          text: 'Black',
          value: 'Black'
        }, {
          text: 'White',
          value: 'White'
        }, {
          text: 'Jack',
          value: 'Jack'
        }]
      }]
    }];
    var wrapper = (0, _enzyme.mount)(createTable({
      columns: [(0, _objectSpread2["default"])({}, column, {
        filters: filters
      })]
    }));
    jest.useFakeTimers();
    var dropdownWrapper = (0, _enzyme.mount)(wrapper.find('Trigger').at(0).instance().getComponent());
    dropdownWrapper.find('.c7n-dropdown-menu-submenu-title').at(0).simulate('mouseEnter');
    jest.runAllTimers();
    dropdownWrapper.update();
    dropdownWrapper.find('.c7n-dropdown-menu-submenu-title').at(1).simulate('mouseEnter');
    jest.runAllTimers();
    dropdownWrapper.update();
    dropdownWrapper.find('MenuItem').last().simulate('click');
    dropdownWrapper.find('.confirm').simulate('click');
    wrapper.update();
    expect(renderedNames(wrapper)).toEqual(['Jack']);
    jest.useRealTimers();
  });
  it('works with JSX in controlled mode', function () {
    var Column = _["default"].Column;

    var App =
    /*#__PURE__*/
    function (_React$Component) {
      (0, _inherits2["default"])(App, _React$Component);

      var _super = _createSuper(App);

      function App() {
        var _this;

        (0, _classCallCheck2["default"])(this, App);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "state", {
          filters: {}
        });
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "handleChange", function (pagination, filters) {
          _this.setState({
            filters: filters
          });
        });
        return _this;
      }

      (0, _createClass2["default"])(App, [{
        key: "render",
        value: function render() {
          var name = this.state.filters.name;
          return _react["default"].createElement(_["default"], {
            dataSource: data,
            onChange: this.handleChange,
            filterBar: false
          }, _react["default"].createElement(Column, {
            title: "name",
            dataIndex: "name",
            key: "name",
            filters: [{
              text: 'Jack',
              value: 'Jack'
            }, {
              text: 'Lucy',
              value: 'Lucy'
            }],
            filteredValue: name,
            onFilter: filterFn
          }));
        }
      }]);
      return App;
    }(_react["default"].Component);

    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(App, null));
    var dropdownWrapper = (0, _enzyme.mount)(wrapper.find('Trigger').at(0).instance().getComponent());
    dropdownWrapper.find('MenuItem').first().simulate('click');
    dropdownWrapper.find('.confirm').simulate('click');
    wrapper.update();
    expect(renderedNames(wrapper)).toEqual(['Jack']);
    dropdownWrapper.find('.clear').simulate('click');
    wrapper.update();
    expect(renderedNames(wrapper)).toEqual(['Jack', 'Lucy', 'Tom', 'Jerry']);
  });
  it('works with grouping columns in controlled mode', function () {
    var columns = [{
      title: 'group',
      key: 'group',
      children: [{
        title: 'Name',
        dataIndex: 'name',
        key: 'name',
        filters: [{
          text: 'Jack',
          value: 'Jack'
        }, {
          text: 'Lucy',
          value: 'Lucy'
        }],
        onFilter: filterFn,
        filteredValue: ['Jack']
      }, {
        title: 'Age',
        dataIndex: 'age',
        key: 'age'
      }]
    }];
    var testData = [{
      key: 0,
      name: 'Jack',
      age: 11
    }, {
      key: 1,
      name: 'Lucy',
      age: 20
    }, {
      key: 2,
      name: 'Tom',
      age: 21
    }, {
      key: 3,
      name: 'Jerry',
      age: 22
    }];
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      columns: columns,
      dataSource: testData,
      filterBar: false
    }));
    expect(renderedNames(wrapper)).toEqual(['Jack']);
  });
  it('confirm filter when dropdown hidden', function () {
    var handleChange = jest.fn();
    var wrapper = (0, _enzyme.mount)(createTable({
      columns: [(0, _objectSpread2["default"])({}, column, {
        filters: [{
          text: 'Jack',
          value: 'Jack'
        }, {
          text: 'Lucy',
          value: 'Lucy'
        }]
      })],
      onChange: handleChange
    }));
    wrapper.find('.c7n-dropdown-trigger').first().simulate('click');
    wrapper.find('.c7n-dropdown-menu-item').first().simulate('click');
    wrapper.find('.c7n-dropdown-trigger').first().simulate('click');
    expect(handleChange).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,