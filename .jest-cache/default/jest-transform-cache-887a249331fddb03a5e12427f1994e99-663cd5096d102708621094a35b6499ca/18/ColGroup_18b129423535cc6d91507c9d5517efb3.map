{"version":3,"sources":["ColGroup.jsx"],"names":["ColGroup","props","table","prefixCls","expandIconAsCell","fixed","cols","push","leafColumns","columnManager","leftLeafColumns","rightLeafColumns","concat","map","c","key","dataIndex","width","minWidth","propTypes","PropTypes","string","contextTypes","any"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEe,SAASA,QAAT,CAAkBC,KAAlB,QAAoC;AAAA,MAATC,KAAS,QAATA,KAAS;AAAA,qBACTA,KAAK,CAACD,KADG;AAAA,MACzCE,SADyC,gBACzCA,SADyC;AAAA,MAC9BC,gBAD8B,gBAC9BA,gBAD8B;AAAA,MAEzCC,KAFyC,GAE/BJ,KAF+B,CAEzCI,KAFyC;AAIjD,MAAIC,IAAI,GAAG,EAAX;;AAEA,MAAIF,gBAAgB,IAAIC,KAAK,KAAK,OAAlC,EAA2C;AACzCC,IAAAA,IAAI,CAACC,IAAL,CACE;AACE,MAAA,SAAS,YAAKJ,SAAL,qBADX;AAEE,MAAA,GAAG,EAAC;AAFN,MADF;AAMD;;AAED,MAAIK,WAAJ;;AAEA,MAAIH,KAAK,KAAK,MAAd,EAAsB;AACpBG,IAAAA,WAAW,GAAGN,KAAK,CAACO,aAAN,CAAoBC,eAApB,EAAd;AACD,GAFD,MAEO,IAAIL,KAAK,KAAK,OAAd,EAAuB;AAC5BG,IAAAA,WAAW,GAAGN,KAAK,CAACO,aAAN,CAAoBE,gBAApB,EAAd;AACD,GAFM,MAEA;AACLH,IAAAA,WAAW,GAAGN,KAAK,CAACO,aAAN,CAAoBD,WAApB,EAAd;AACD;;AACDF,EAAAA,IAAI,GAAGA,IAAI,CAACM,MAAL,CACLJ,WAAW,CAACK,GAAZ,CAAgB,UAAAC,CAAC,EAAI;AACnB,WACE;AACE,MAAA,GAAG,EAAEA,CAAC,CAACC,GAAF,IAASD,CAAC,CAACE,SADlB;AAEE,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAEH,CAAC,CAACG,KAAX;AAAkBC,QAAAA,QAAQ,EAAEJ,CAAC,CAACG;AAA9B;AAFT,MADF;AAMD,GAPD,CADK,CAAP;AAWA,SACE,kDACGX,IADH,CADF;AAKD;;AAEDN,QAAQ,CAACmB,SAAT,GAAqB;AACnBd,EAAAA,KAAK,EAAEe,sBAAUC;AADE,CAArB;AAIArB,QAAQ,CAACsB,YAAT,GAAwB;AACtBpB,EAAAA,KAAK,EAAEkB,sBAAUG;AADK,CAAxB","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function ColGroup(props, { table }) {\n  const { prefixCls, expandIconAsCell } = table.props;\n  const { fixed } = props;\n\n  let cols = [];\n\n  if (expandIconAsCell && fixed !== 'right') {\n    cols.push(\n      <col\n        className={`${prefixCls}-expand-icon-col`}\n        key=\"rc-table-expand-icon-col\"\n      />\n    );\n  }\n\n  let leafColumns;\n\n  if (fixed === 'left') {\n    leafColumns = table.columnManager.leftLeafColumns();\n  } else if (fixed === 'right') {\n    leafColumns = table.columnManager.rightLeafColumns();\n  } else {\n    leafColumns = table.columnManager.leafColumns();\n  }\n  cols = cols.concat(\n    leafColumns.map(c => {\n      return (\n        <col\n          key={c.key || c.dataIndex}\n          style={{ width: c.width, minWidth: c.width }}\n        />\n      );\n    })\n  );\n\n  return (\n    <colgroup>\n      {cols}\n    </colgroup>\n  );\n}\n\nColGroup.propTypes = {\n  fixed: PropTypes.string,\n};\n\nColGroup.contextTypes = {\n  table: PropTypes.any,\n};\n"]}