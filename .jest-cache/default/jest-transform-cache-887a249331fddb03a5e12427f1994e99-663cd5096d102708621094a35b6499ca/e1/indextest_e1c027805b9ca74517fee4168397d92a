1d089489bf74a2de1374358ee81f0c43
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _utils = require("../../../tests/utils");

var _mountTest = _interopRequireDefault(require("../../../tests/shared/mountTest"));

var _ = _interopRequireDefault(require(".."));

describe('BackTop', function () {
  (0, _mountTest["default"])(_["default"]);
  it('should scroll to top after click it',
  /*#__PURE__*/
  (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee() {
    var wrapper, scrollToSpy;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
              visibilityHeight: -1
            }));
            scrollToSpy = jest.spyOn(window, 'scrollTo').mockImplementation(function (x, y) {
              window.scrollY = y;
              window.pageYOffset = y;
            });
            window.scrollTo(0, 400); // trigger scroll manually

            wrapper.instance().handleScroll();
            _context.next = 6;
            return (0, _utils.sleep)();

          case 6:
            wrapper.find('.c7n-back-top').simulate('click');
            _context.next = 9;
            return (0, _utils.sleep)(500);

          case 9:
            expect(window.pageYOffset).toBe(0);
            scrollToSpy.mockRestore();

          case 11:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
  it('support onClick',
  /*#__PURE__*/
  (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee2() {
    var onClick, wrapper, scrollToSpy;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            onClick = jest.fn();
            wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
              onClick: onClick,
              visibilityHeight: -1
            }));
            scrollToSpy = jest.spyOn(window, 'scrollTo').mockImplementation(function (x, y) {
              window.scrollY = y;
              window.pageYOffset = y;
            });
            window.scrollTo(0, 400); // trigger scroll manually

            wrapper.instance().handleScroll();
            _context2.next = 7;
            return (0, _utils.sleep)();

          case 7:
            wrapper.find('.c7n-back-top').simulate('click');
            expect(onClick).toHaveBeenCalled();
            scrollToSpy.mockRestore();

          case 10:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  })));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRlc3QuanMiXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJCYWNrVG9wIiwiaXQiLCJ3cmFwcGVyIiwic2Nyb2xsVG9TcHkiLCJqZXN0Iiwic3B5T24iLCJ3aW5kb3ciLCJtb2NrSW1wbGVtZW50YXRpb24iLCJ4IiwieSIsInNjcm9sbFkiLCJwYWdlWU9mZnNldCIsInNjcm9sbFRvIiwiaW5zdGFuY2UiLCJoYW5kbGVTY3JvbGwiLCJmaW5kIiwic2ltdWxhdGUiLCJleHBlY3QiLCJ0b0JlIiwibW9ja1Jlc3RvcmUiLCJvbkNsaWNrIiwiZm4iLCJ0b0hhdmVCZWVuQ2FsbGVkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBQSxRQUFRLENBQUMsU0FBRCxFQUFZLFlBQU07QUFDeEIsNkJBQVVDLFlBQVY7QUFFQUMsRUFBQUEsRUFBRSxDQUFDLHFDQUFEO0FBQUE7QUFBQTtBQUFBO0FBQUEsK0JBQXdDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNsQ0MsWUFBQUEsT0FEa0MsR0FDeEIsbUJBQU0sZ0NBQUMsWUFBRDtBQUFTLGNBQUEsZ0JBQWdCLEVBQUUsQ0FBQztBQUE1QixjQUFOLENBRHdCO0FBRWxDQyxZQUFBQSxXQUZrQyxHQUVwQkMsSUFBSSxDQUFDQyxLQUFMLENBQVdDLE1BQVgsRUFBbUIsVUFBbkIsRUFBK0JDLGtCQUEvQixDQUFrRCxVQUFDQyxDQUFELEVBQUlDLENBQUosRUFBVTtBQUM5RUgsY0FBQUEsTUFBTSxDQUFDSSxPQUFQLEdBQWlCRCxDQUFqQjtBQUNBSCxjQUFBQSxNQUFNLENBQUNLLFdBQVAsR0FBcUJGLENBQXJCO0FBQ0QsYUFIbUIsQ0FGb0I7QUFNeENILFlBQUFBLE1BQU0sQ0FBQ00sUUFBUCxDQUFnQixDQUFoQixFQUFtQixHQUFuQixFQU53QyxDQU94Qzs7QUFDQVYsWUFBQUEsT0FBTyxDQUFDVyxRQUFSLEdBQW1CQyxZQUFuQjtBQVJ3QztBQUFBLG1CQVNsQyxtQkFUa0M7O0FBQUE7QUFVeENaLFlBQUFBLE9BQU8sQ0FBQ2EsSUFBUixDQUFhLGVBQWIsRUFBOEJDLFFBQTlCLENBQXVDLE9BQXZDO0FBVndDO0FBQUEsbUJBV2xDLGtCQUFNLEdBQU4sQ0FYa0M7O0FBQUE7QUFZeENDLFlBQUFBLE1BQU0sQ0FBQ1gsTUFBTSxDQUFDSyxXQUFSLENBQU4sQ0FBMkJPLElBQTNCLENBQWdDLENBQWhDO0FBQ0FmLFlBQUFBLFdBQVcsQ0FBQ2dCLFdBQVo7O0FBYndDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEdBQXhDLEdBQUY7QUFnQkFsQixFQUFBQSxFQUFFLENBQUMsaUJBQUQ7QUFBQTtBQUFBO0FBQUE7QUFBQSwrQkFBb0I7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ2RtQixZQUFBQSxPQURjLEdBQ0poQixJQUFJLENBQUNpQixFQUFMLEVBREk7QUFFZG5CLFlBQUFBLE9BRmMsR0FFSixtQkFBTSxnQ0FBQyxZQUFEO0FBQVMsY0FBQSxPQUFPLEVBQUVrQixPQUFsQjtBQUEyQixjQUFBLGdCQUFnQixFQUFFLENBQUM7QUFBOUMsY0FBTixDQUZJO0FBR2RqQixZQUFBQSxXQUhjLEdBR0FDLElBQUksQ0FBQ0MsS0FBTCxDQUFXQyxNQUFYLEVBQW1CLFVBQW5CLEVBQStCQyxrQkFBL0IsQ0FBa0QsVUFBQ0MsQ0FBRCxFQUFJQyxDQUFKLEVBQVU7QUFDOUVILGNBQUFBLE1BQU0sQ0FBQ0ksT0FBUCxHQUFpQkQsQ0FBakI7QUFDQUgsY0FBQUEsTUFBTSxDQUFDSyxXQUFQLEdBQXFCRixDQUFyQjtBQUNELGFBSG1CLENBSEE7QUFPcEJILFlBQUFBLE1BQU0sQ0FBQ00sUUFBUCxDQUFnQixDQUFoQixFQUFtQixHQUFuQixFQVBvQixDQVFwQjs7QUFDQVYsWUFBQUEsT0FBTyxDQUFDVyxRQUFSLEdBQW1CQyxZQUFuQjtBQVRvQjtBQUFBLG1CQVVkLG1CQVZjOztBQUFBO0FBV3BCWixZQUFBQSxPQUFPLENBQUNhLElBQVIsQ0FBYSxlQUFiLEVBQThCQyxRQUE5QixDQUF1QyxPQUF2QztBQUNBQyxZQUFBQSxNQUFNLENBQUNHLE9BQUQsQ0FBTixDQUFnQkUsZ0JBQWhCO0FBQ0FuQixZQUFBQSxXQUFXLENBQUNnQixXQUFaOztBQWJvQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxHQUFwQixHQUFGO0FBZUQsQ0FsQ08sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBtb3VudCB9IGZyb20gJ2VuenltZSc7XG5pbXBvcnQgeyBzbGVlcCB9IGZyb20gJy4uLy4uLy4uL3Rlc3RzL3V0aWxzJztcbmltcG9ydCBtb3VudFRlc3QgZnJvbSAnLi4vLi4vLi4vdGVzdHMvc2hhcmVkL21vdW50VGVzdCc7XG5pbXBvcnQgQmFja1RvcCBmcm9tICcuLic7XG5cbmRlc2NyaWJlKCdCYWNrVG9wJywgKCkgPT4ge1xuICBtb3VudFRlc3QoQmFja1RvcCk7XG5cbiAgaXQoJ3Nob3VsZCBzY3JvbGwgdG8gdG9wIGFmdGVyIGNsaWNrIGl0JywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHdyYXBwZXIgPSBtb3VudCg8QmFja1RvcCB2aXNpYmlsaXR5SGVpZ2h0PXstMX0gLz4pO1xuICAgIGNvbnN0IHNjcm9sbFRvU3B5ID0gamVzdC5zcHlPbih3aW5kb3csICdzY3JvbGxUbycpLm1vY2tJbXBsZW1lbnRhdGlvbigoeCwgeSkgPT4ge1xuICAgICAgd2luZG93LnNjcm9sbFkgPSB5O1xuICAgICAgd2luZG93LnBhZ2VZT2Zmc2V0ID0geTtcbiAgICB9KTtcbiAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgNDAwKTtcbiAgICAvLyB0cmlnZ2VyIHNjcm9sbCBtYW51YWxseVxuICAgIHdyYXBwZXIuaW5zdGFuY2UoKS5oYW5kbGVTY3JvbGwoKTtcbiAgICBhd2FpdCBzbGVlcCgpO1xuICAgIHdyYXBwZXIuZmluZCgnLmM3bi1iYWNrLXRvcCcpLnNpbXVsYXRlKCdjbGljaycpO1xuICAgIGF3YWl0IHNsZWVwKDUwMCk7XG4gICAgZXhwZWN0KHdpbmRvdy5wYWdlWU9mZnNldCkudG9CZSgwKTtcbiAgICBzY3JvbGxUb1NweS5tb2NrUmVzdG9yZSgpO1xuICB9KTtcblxuICBpdCgnc3VwcG9ydCBvbkNsaWNrJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IG9uQ2xpY2sgPSBqZXN0LmZuKCk7XG4gICAgY29uc3Qgd3JhcHBlciA9IG1vdW50KDxCYWNrVG9wIG9uQ2xpY2s9e29uQ2xpY2t9IHZpc2liaWxpdHlIZWlnaHQ9ey0xfSAvPik7XG4gICAgY29uc3Qgc2Nyb2xsVG9TcHkgPSBqZXN0LnNweU9uKHdpbmRvdywgJ3Njcm9sbFRvJykubW9ja0ltcGxlbWVudGF0aW9uKCh4LCB5KSA9PiB7XG4gICAgICB3aW5kb3cuc2Nyb2xsWSA9IHk7XG4gICAgICB3aW5kb3cucGFnZVlPZmZzZXQgPSB5O1xuICAgIH0pO1xuICAgIHdpbmRvdy5zY3JvbGxUbygwLCA0MDApO1xuICAgIC8vIHRyaWdnZXIgc2Nyb2xsIG1hbnVhbGx5XG4gICAgd3JhcHBlci5pbnN0YW5jZSgpLmhhbmRsZVNjcm9sbCgpO1xuICAgIGF3YWl0IHNsZWVwKCk7XG4gICAgd3JhcHBlci5maW5kKCcuYzduLWJhY2stdG9wJykuc2ltdWxhdGUoJ2NsaWNrJyk7XG4gICAgZXhwZWN0KG9uQ2xpY2spLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICBzY3JvbGxUb1NweS5tb2NrUmVzdG9yZSgpO1xuICB9KTtcbn0pO1xuIl19