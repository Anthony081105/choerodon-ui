3447086e8db586d4c7f4b64aa6e79774
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _ = _interopRequireDefault(require(".."));

var _button = _interopRequireDefault(require("../../button"));

describe('Tooltip', function () {
  it('check `onVisibleChange` arguments', function () {
    var onVisibleChange = jest.fn();
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      title: "",
      mouseEnterDelay: 0,
      mouseLeaveDelay: 0,
      onVisibleChange: onVisibleChange
    }, _react["default"].createElement("div", {
      id: "hello"
    }, "Hello world!"))); // `title` is empty.

    var div = wrapper.find('#hello').at(0);
    div.simulate('mouseenter');
    expect(onVisibleChange).not.toHaveBeenCalled();
    expect(wrapper.instance().tooltip.props.visible).toBe(false);
    div.simulate('mouseleave');
    expect(onVisibleChange).not.toHaveBeenCalled();
    expect(wrapper.instance().tooltip.props.visible).toBe(false); // update `title` value.

    wrapper.setProps({
      title: 'Have a nice day!'
    });
    wrapper.find('#hello').simulate('mouseenter');
    expect(onVisibleChange).toHaveBeenLastCalledWith(true);
    expect(wrapper.instance().tooltip.props.visible).toBe(true);
    wrapper.find('#hello').simulate('mouseleave');
    expect(onVisibleChange).toHaveBeenLastCalledWith(false);
    expect(wrapper.instance().tooltip.props.visible).toBe(false); // add `visible` props.

    wrapper.setProps({
      visible: false
    });
    wrapper.find('#hello').simulate('mouseenter');
    expect(onVisibleChange).toHaveBeenLastCalledWith(true);
    var lastCount = onVisibleChange.mock.calls.length;
    expect(wrapper.instance().tooltip.props.visible).toBe(false); // always trigger onVisibleChange

    wrapper.simulate('mouseleave');
    expect(onVisibleChange.mock.calls.length).toBe(lastCount); // no change with lastCount

    expect(wrapper.instance().tooltip.props.visible).toBe(false);
  });
  it('should hide when mouse leave native disabled button', function () {
    var onVisibleChange = jest.fn();
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      title: "xxxxx",
      mouseEnterDelay: 0,
      mouseLeaveDelay: 0,
      onVisibleChange: onVisibleChange
    }, _react["default"].createElement("button", {
      type: "button",
      disabled: true
    }, "Hello world!")));
    expect(wrapper.find('span')).toHaveLength(1);
    var button = wrapper.find('span').at(0);
    button.simulate('mouseenter');
    expect(onVisibleChange).toHaveBeenCalledWith(true);
    expect(wrapper.instance().tooltip.props.visible).toBe(true);
    button.simulate('mouseleave');
    expect(onVisibleChange).toHaveBeenCalledWith(false);
    expect(wrapper.instance().tooltip.props.visible).toBe(false);
  });
  it('should hide when mouse leave choerodon-ui disabled Button', function () {
    var onVisibleChange = jest.fn();
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      title: "xxxxx",
      mouseEnterDelay: 0,
      mouseLeaveDelay: 0,
      onVisibleChange: onVisibleChange
    }, _react["default"].createElement(_button["default"], {
      disabled: true
    }, "Hello world!")));
    expect(wrapper.render()).toMatchSnapshot();
    var button = wrapper.find('span').at(0);
    button.simulate('mouseenter');
    expect(onVisibleChange).toHaveBeenCalledWith(true);
    expect(wrapper.instance().tooltip.props.visible).toBe(true);
    button.simulate('mouseleave');
    expect(onVisibleChange).toHaveBeenCalledWith(false);
    expect(wrapper.instance().tooltip.props.visible).toBe(false);
  });
  it('should render disabled Button style properly', function () {
    var wrapper1 = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      title: "xxxxx"
    }, _react["default"].createElement(_button["default"], {
      disabled: true
    }, "Hello world!")));
    var wrapper2 = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      title: "xxxxx"
    }, _react["default"].createElement(_button["default"], {
      disabled: true,
      style: {
        display: 'block'
      }
    }, "Hello world!")));
    expect(wrapper1.find('span').first().getDOMNode().style.display).toBe('inline-block');
    expect(wrapper2.find('span').first().getDOMNode().style.display).toBe('block');
  });
  it('should not wrap span when trigger is not hover', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      title: "xxxxx",
      trigger: "click",
      mouseEnterDelay: 0,
      mouseLeaveDelay: 0
    }, _react["default"].createElement("button", {
      type: "button",
      disabled: true
    }, "Hello world!")));
    expect(wrapper.find('span')).toHaveLength(0);
  });
  it('should works for arrowPointAtCenter', function () {
    var arrowWidth = 5;
    var horizontalArrowShift = 16;
    var triggerWidth = 200;

    var suit = function suit() {
      var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
        title: "xxxxx",
        trigger: "click",
        mouseEnterDelay: 0,
        mouseLeaveDelay: 0,
        placement: "bottomLeft"
      }, _react["default"].createElement("button", {
        type: "button",
        style: {
          width: triggerWidth
        }
      }, "Hello world!")));
      wrapper.find('button').at(0).simulate('click');
      var popupLeftDefault = parseInt(wrapper.instance().getPopupDomNode().style.left, 10);
      var wrapper2 = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
        title: "xxxxx",
        trigger: "click",
        mouseEnterDelay: 0,
        mouseLeaveDelay: 0,
        placement: "bottomLeft",
        arrowPointAtCenter: true
      }, _react["default"].createElement("button", {
        type: "button",
        style: {
          width: triggerWidth
        }
      }, "Hello world!")));
      wrapper2.find('button').at(0).simulate('click');
      var popupLeftArrowPointAtCenter = parseInt(wrapper2.instance().getPopupDomNode().style.left, 10);
      expect(popupLeftArrowPointAtCenter - popupLeftDefault).toBe(triggerWidth / 2 - horizontalArrowShift - arrowWidth);
    };

    jest.dontMock('rc-trigger', suit);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,