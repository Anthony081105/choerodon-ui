e9dc52a0852c19df2fbe6fc7c1b5ba56
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = stepMismatch;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _moment = require("moment");

var _isEmpty = _interopRequireDefault(require("../../_util/isEmpty"));

var _ValidationResult = _interopRequireDefault(require("../ValidationResult"));

var _localeContext = require("../../locale-context");

var _utils = require("../../number-field/utils");

var _formatReactTemplate = _interopRequireDefault(require("../../formatter/formatReactTemplate"));

var _utils2 = require("../../field/utils");

function isStepMismatch(value, step, min, max, range) {
  if (range) {
    var nearStepValues;
    (0, _utils2.toRangeValue)(value, range).every(function (item) {
      if (!(0, _isEmpty["default"])(item)) {
        nearStepValues = (0, _utils.getNearStepValues)((0, _moment.isMoment)(item) ? item : Number(item), step, min, max);
      }

      return !nearStepValues;
    });
    return nearStepValues;
  }

  if (!(0, _isEmpty["default"])(value)) {
    return (0, _utils.getNearStepValues)((0, _moment.isMoment)(value) ? value : Number(value), step, min, max);
  }
}

function stepMismatch(value, props) {
  var step = props.step,
      min = props.min,
      max = props.max,
      defaultValidationMessages = props.defaultValidationMessages,
      range = props.range,
      format = props.format;

  if (step !== undefined) {
    var nearStepValues = isStepMismatch(value, step, min, max, range);

    if (nearStepValues !== undefined) {
      var _nearStepValues = (0, _slicedToArray2["default"])(nearStepValues, 2),
          before = _nearStepValues[0],
          after = _nearStepValues[1];

      var injectionOptions = {
        0: (0, _moment.isMoment)(before) ? before.format(format) : before,
        1: (0, _moment.isMoment)(after) ? after.format(format) : after
      };
      var ruleName = nearStepValues.length === 2 ? 'stepMismatchBetween' : 'stepMismatch';
      var key = nearStepValues.length === 2 ? 'step_mismatch_between' : 'step_mismatch';
      var _defaultValidationMes = defaultValidationMessages[ruleName],
          validationMessage = _defaultValidationMes === void 0 ? (0, _localeContext.$l)('Validator', key) : _defaultValidationMes;
      return new _ValidationResult["default"]({
        validationMessage: (0, _formatReactTemplate["default"])(validationMessage, injectionOptions),
        injectionOptions: injectionOptions,
        value: (0, _moment.isMoment)(value) ? value.format(format) : value,
        ruleName: ruleName
      });
    }
  }

  return true;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9odWlodWF3ay9Eb2N1bWVudHMvb3B0L2Nob2Vyb2Rvbi11aS9jb21wb25lbnRzLXByby92YWxpZGF0b3IvcnVsZXMvc3RlcE1pc21hdGNoLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOztBQUNBOztBQUVBLFNBQVMsY0FBVCxDQUF3QixLQUF4QixFQUErQixJQUEvQixFQUFxQyxHQUFyQyxFQUEwQyxHQUExQyxFQUErQyxLQUEvQyxFQUFvRDtBQUNsRCxNQUFJLEtBQUosRUFBVztBQUNULFFBQUksY0FBSjtBQUNBLDhCQUFhLEtBQWIsRUFBb0IsS0FBcEIsRUFBMkIsS0FBM0IsQ0FBaUMsVUFBQSxJQUFJLEVBQUc7QUFDdEMsVUFBSSxDQUFDLHlCQUFRLElBQVIsQ0FBTCxFQUFvQjtBQUNsQixRQUFBLGNBQWMsR0FBRyw4QkFBa0Isc0JBQVMsSUFBVCxJQUFpQixJQUFqQixHQUF3QixNQUFNLENBQUMsSUFBRCxDQUFoRCxFQUF3RCxJQUF4RCxFQUE4RCxHQUE5RCxFQUFtRSxHQUFuRSxDQUFqQjtBQUNEOztBQUNELGFBQU8sQ0FBQyxjQUFSO0FBQ0QsS0FMRDtBQU1BLFdBQU8sY0FBUDtBQUNEOztBQUNELE1BQUksQ0FBQyx5QkFBUSxLQUFSLENBQUwsRUFBcUI7QUFDbkIsV0FBTyw4QkFBa0Isc0JBQVMsS0FBVCxJQUFrQixLQUFsQixHQUEwQixNQUFNLENBQUMsS0FBRCxDQUFsRCxFQUEyRCxJQUEzRCxFQUFpRSxHQUFqRSxFQUFzRSxHQUF0RSxDQUFQO0FBQ0Q7QUFDRjs7QUFFYSxTQUFVLFlBQVYsQ0FBdUIsS0FBdkIsRUFBbUMsS0FBbkMsRUFBd0Q7QUFBQSxNQUM1RCxJQUQ0RCxHQUNDLEtBREQsQ0FDNUQsSUFENEQ7QUFBQSxNQUN0RCxHQURzRCxHQUNDLEtBREQsQ0FDdEQsR0FEc0Q7QUFBQSxNQUNqRCxHQURpRCxHQUNDLEtBREQsQ0FDakQsR0FEaUQ7QUFBQSxNQUM1Qyx5QkFENEMsR0FDQyxLQURELENBQzVDLHlCQUQ0QztBQUFBLE1BQ2pCLEtBRGlCLEdBQ0MsS0FERCxDQUNqQixLQURpQjtBQUFBLE1BQ1YsTUFEVSxHQUNDLEtBREQsQ0FDVixNQURVOztBQUVwRSxNQUFJLElBQUksS0FBSyxTQUFiLEVBQXdCO0FBQ3RCLFFBQU0sY0FBYyxHQUFHLGNBQWMsQ0FBQyxLQUFELEVBQVEsSUFBUixFQUFjLEdBQWQsRUFBbUIsR0FBbkIsRUFBd0IsS0FBeEIsQ0FBckM7O0FBQ0EsUUFBSSxjQUFjLEtBQUssU0FBdkIsRUFBa0M7QUFBQSw0REFDUixjQURRO0FBQUEsVUFDekIsTUFEeUI7QUFBQSxVQUNqQixLQURpQjs7QUFFaEMsVUFBTSxnQkFBZ0IsR0FBRztBQUN2QixXQUFHLHNCQUFTLE1BQVQsSUFBbUIsTUFBTSxDQUFDLE1BQVAsQ0FBYyxNQUFkLENBQW5CLEdBQTJDLE1BRHZCO0FBRXZCLFdBQUcsc0JBQVMsS0FBVCxJQUFrQixLQUFLLENBQUMsTUFBTixDQUFhLE1BQWIsQ0FBbEIsR0FBeUM7QUFGckIsT0FBekI7QUFJQSxVQUFNLFFBQVEsR0FBRyxjQUFjLENBQUMsTUFBZixLQUEwQixDQUExQixHQUE4QixxQkFBOUIsR0FBc0QsY0FBdkU7QUFDQSxVQUFNLEdBQUcsR0FBRyxjQUFjLENBQUMsTUFBZixLQUEwQixDQUExQixHQUE4Qix1QkFBOUIsR0FBd0QsZUFBcEU7QUFQZ0Msa0NBUWlDLHlCQVJqQyxDQVF2QixRQVJ1QjtBQUFBLFVBUVosaUJBUlksc0NBUVEsdUJBQUcsV0FBSCxFQUFnQixHQUFoQixDQVJSO0FBU2hDLGFBQU8sSUFBSSw0QkFBSixDQUFxQjtBQUMxQixRQUFBLGlCQUFpQixFQUFFLHFDQUFvQixpQkFBcEIsRUFBdUMsZ0JBQXZDLENBRE87QUFFMUIsUUFBQSxnQkFBZ0IsRUFBaEIsZ0JBRjBCO0FBRzFCLFFBQUEsS0FBSyxFQUFFLHNCQUFTLEtBQVQsSUFBa0IsS0FBSyxDQUFDLE1BQU4sQ0FBYSxNQUFiLENBQWxCLEdBQXlDLEtBSHRCO0FBSTFCLFFBQUEsUUFBUSxFQUFSO0FBSjBCLE9BQXJCLENBQVA7QUFNRDtBQUNGOztBQUNELFNBQU8sSUFBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNNb21lbnQgfSBmcm9tICdtb21lbnQnO1xuaW1wb3J0IGlzRW1wdHkgZnJvbSAnLi4vLi4vX3V0aWwvaXNFbXB0eSc7XG5pbXBvcnQgVmFsaWRhdGlvblJlc3VsdCBmcm9tICcuLi9WYWxpZGF0aW9uUmVzdWx0JztcbmltcG9ydCB7ICRsIH0gZnJvbSAnLi4vLi4vbG9jYWxlLWNvbnRleHQnO1xuaW1wb3J0IHsgZ2V0TmVhclN0ZXBWYWx1ZXMgfSBmcm9tICcuLi8uLi9udW1iZXItZmllbGQvdXRpbHMnO1xuaW1wb3J0IHsgbWV0aG9kUmV0dXJuLCBWYWxpZGF0b3JQcm9wcyB9IGZyb20gJy4nO1xuaW1wb3J0IGZvcm1hdFJlYWN0VGVtcGxhdGUgZnJvbSAnLi4vLi4vZm9ybWF0dGVyL2Zvcm1hdFJlYWN0VGVtcGxhdGUnO1xuaW1wb3J0IHsgdG9SYW5nZVZhbHVlIH0gZnJvbSAnLi4vLi4vZmllbGQvdXRpbHMnO1xuXG5mdW5jdGlvbiBpc1N0ZXBNaXNtYXRjaCh2YWx1ZSwgc3RlcCwgbWluLCBtYXgsIHJhbmdlKSB7XG4gIGlmIChyYW5nZSkge1xuICAgIGxldCBuZWFyU3RlcFZhbHVlcztcbiAgICB0b1JhbmdlVmFsdWUodmFsdWUsIHJhbmdlKS5ldmVyeShpdGVtID0+IHtcbiAgICAgIGlmICghaXNFbXB0eShpdGVtKSkge1xuICAgICAgICBuZWFyU3RlcFZhbHVlcyA9IGdldE5lYXJTdGVwVmFsdWVzKGlzTW9tZW50KGl0ZW0pID8gaXRlbSA6IE51bWJlcihpdGVtKSwgc3RlcCwgbWluLCBtYXgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuICFuZWFyU3RlcFZhbHVlcztcbiAgICB9KTtcbiAgICByZXR1cm4gbmVhclN0ZXBWYWx1ZXM7XG4gIH1cbiAgaWYgKCFpc0VtcHR5KHZhbHVlKSkge1xuICAgIHJldHVybiBnZXROZWFyU3RlcFZhbHVlcyhpc01vbWVudCh2YWx1ZSkgPyB2YWx1ZSA6IE51bWJlcih2YWx1ZSksIHN0ZXAsIG1pbiwgbWF4KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGVwTWlzbWF0Y2godmFsdWU6IGFueSwgcHJvcHM6IFZhbGlkYXRvclByb3BzKTogbWV0aG9kUmV0dXJuIHtcbiAgY29uc3QgeyBzdGVwLCBtaW4sIG1heCwgZGVmYXVsdFZhbGlkYXRpb25NZXNzYWdlcywgcmFuZ2UsIGZvcm1hdCB9ID0gcHJvcHM7XG4gIGlmIChzdGVwICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCBuZWFyU3RlcFZhbHVlcyA9IGlzU3RlcE1pc21hdGNoKHZhbHVlLCBzdGVwLCBtaW4sIG1heCwgcmFuZ2UpO1xuICAgIGlmIChuZWFyU3RlcFZhbHVlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zdCBbYmVmb3JlLCBhZnRlcl0gPSBuZWFyU3RlcFZhbHVlcztcbiAgICAgIGNvbnN0IGluamVjdGlvbk9wdGlvbnMgPSB7XG4gICAgICAgIDA6IGlzTW9tZW50KGJlZm9yZSkgPyBiZWZvcmUuZm9ybWF0KGZvcm1hdCkgOiBiZWZvcmUsXG4gICAgICAgIDE6IGlzTW9tZW50KGFmdGVyKSA/IGFmdGVyLmZvcm1hdChmb3JtYXQpIDogYWZ0ZXIsXG4gICAgICB9O1xuICAgICAgY29uc3QgcnVsZU5hbWUgPSBuZWFyU3RlcFZhbHVlcy5sZW5ndGggPT09IDIgPyAnc3RlcE1pc21hdGNoQmV0d2VlbicgOiAnc3RlcE1pc21hdGNoJztcbiAgICAgIGNvbnN0IGtleSA9IG5lYXJTdGVwVmFsdWVzLmxlbmd0aCA9PT0gMiA/ICdzdGVwX21pc21hdGNoX2JldHdlZW4nIDogJ3N0ZXBfbWlzbWF0Y2gnO1xuICAgICAgY29uc3QgeyBbcnVsZU5hbWVdOiB2YWxpZGF0aW9uTWVzc2FnZSA9ICRsKCdWYWxpZGF0b3InLCBrZXkpIH0gPSBkZWZhdWx0VmFsaWRhdGlvbk1lc3NhZ2VzO1xuICAgICAgcmV0dXJuIG5ldyBWYWxpZGF0aW9uUmVzdWx0KHtcbiAgICAgICAgdmFsaWRhdGlvbk1lc3NhZ2U6IGZvcm1hdFJlYWN0VGVtcGxhdGUodmFsaWRhdGlvbk1lc3NhZ2UsIGluamVjdGlvbk9wdGlvbnMpLFxuICAgICAgICBpbmplY3Rpb25PcHRpb25zLFxuICAgICAgICB2YWx1ZTogaXNNb21lbnQodmFsdWUpID8gdmFsdWUuZm9ybWF0KGZvcm1hdCkgOiB2YWx1ZSxcbiAgICAgICAgcnVsZU5hbWUsXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG4iXX0=