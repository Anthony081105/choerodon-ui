{"version":3,"sources":["progress/progress.js"],"names":["Progress","Component","props","customizePrefixCls","percent","status","successPercent","prefixCls","progressStatus","xmlns","width","height","viewBox","className","fill","d","transform","gapDegree","gapDeg","percentDeg","diffDeg","deg","format","trailColor","size","type","strokeWidth","strokeColor","showInfo","gapPosition","showPointer","restProps","textFormatter","circleType","text","Icon","progressInfo","progressCenter","style","percentStyle","background","successPercentStyle","successSegment","progress","React","circleSize","circleStyle","fontSize","circleWidth","gapPos","Circle","trailWidth","Loading","classString","PropTypes"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Icon from '../icon';\nimport { Circle } from '../rc-components/progress';\nimport Loading from './Loading';\nimport { getPrefixCls } from '../configure';\nexport default class Progress extends Component {\n    constructor() {\n        super(...arguments);\n        this.renderPointer = () => {\n            const props = this.props;\n            const { prefixCls: customizePrefixCls, \n            // strokeColor,\n            percent = 0, status, successPercent, } = props;\n            const prefixCls = getPrefixCls('progress', customizePrefixCls);\n            const progressStatus = parseInt(successPercent ? successPercent.toString() : percent.toString(), 10) >= 100 &&\n                !('status' in props)\n                ? \"success\" /* success */\n                : status || \"normal\" /* normal */;\n            return (React.createElement(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", width: \"38\", height: \"32\", viewBox: \"0 0 38 32\" },\n                React.createElement(\"path\", { \n                    // style={{\n                    //   fill: strokeColor ? strokeColor : '',\n                    // }}\n                    className: `${prefixCls}-status-pointer-${progressStatus}`, fill: \"#6887E8\", d: \"M103.371587,49.724578 C103.681687,50.1292204 103.634794,50.6951896 103.280961,51.0440945 L103.186137,51.1265795 L78.8502947,69.7769214 C79.5504585,70.8623565 79.9567807,72.1551739 79.9567807,73.5428929 C79.9567807,77.3850168 76.8421239,80.4996736 73,80.4996736 C69.1578761,80.4996736 66.0432193,77.3850168 66.0432193,73.5428929 C66.0432193,69.700769 69.1578761,66.5861122 73,66.5861122 C74.7317808,66.5861122 76.3157678,67.218893 77.5333601,68.265854 L101.969586,49.5391281 C102.407948,49.2031866 103.035646,49.2862154 103.371587,49.724578 Z M73,68.5861122 C70.2624456,68.5861122 68.0432193,70.8053385 68.0432193,73.5428929 C68.0432193,76.2804473 70.2624456,78.4996736 73,78.4996736 C75.7375544,78.4996736 77.9567807,76.2804473 77.9567807,73.5428929 C77.9567807,70.8053385 75.7375544,68.5861122 73,68.5861122 Z\", transform: \"translate(-66 -49)\" })));\n        };\n        /**\n         * 计算指针角度\n         */\n        this.getPointerDeg = () => {\n            const { percent = 0, gapDegree = 0, } = this.props;\n            // 缺口角度\n            const gapDeg = gapDegree || 75;\n            // percent 角度\n            const percentDeg = (360 - gapDeg) * (percent / 100);\n            // 初始位置 0 -> 126 + 缺口角度/2 + percent 角度 + diffDeg\n            let diffDeg = 0;\n            if (percent <= 75 && percent > 50) {\n                diffDeg = -3;\n            }\n            else if (percent > 75) {\n                diffDeg = -5;\n            }\n            else if (percent < 50) {\n                diffDeg = 5;\n            }\n            const deg = 128 + gapDeg / 2 + percentDeg + diffDeg;\n            return { transform: `rotate(${deg}deg)` };\n        };\n    }\n    render() {\n        const props = this.props;\n        const { prefixCls: customizePrefixCls, className, percent = 0, status, format, trailColor, size, successPercent, type, strokeWidth, strokeColor, width, showInfo, gapDegree = 0, gapPosition, showPointer, ...restProps } = props;\n        const prefixCls = getPrefixCls('progress', customizePrefixCls);\n        const progressStatus = parseInt(successPercent ? successPercent.toString() : percent.toString(), 10) >= 100 &&\n            !('status' in props)\n            ? \"success\" /* success */\n            : status || \"normal\" /* normal */;\n        let progressInfo;\n        let progressCenter;\n        let progress;\n        const textFormatter = format || (percentNumber => `${percentNumber}%`);\n        if (showInfo) {\n            let text;\n            const circleType = type === \"circle\" /* circle */ || type === \"dashboard\" /* dashboard */;\n            if (progressStatus === \"exception\" /* exception */) {\n                text = format ? textFormatter(percent) : React.createElement(Icon, { type: circleType ? 'close' : 'cancel' });\n            }\n            else if (progressStatus === \"success\" /* success */) {\n                text = format ? (textFormatter(percent)) : (React.createElement(Icon, { type: circleType ? 'check' : 'check_circle' }));\n            }\n            else {\n                text = textFormatter(percent);\n            }\n            progressInfo = React.createElement(\"span\", { className: `${prefixCls}-text` }, text);\n            if (showPointer) {\n                progressCenter = (React.createElement(\"div\", { className: `${prefixCls}-pointer`, style: this.getPointerDeg() }, this.renderPointer()));\n                progressInfo = React.createElement(\"span\", { className: `${prefixCls}-text-bottom` }, text);\n            }\n        }\n        if (type === \"line\" /* line */) {\n            const percentStyle = {\n                width: `${percent}%`,\n                height: strokeWidth || (size === \"small\" /* small */ ? 6 : 8),\n                background: strokeColor,\n            };\n            const successPercentStyle = {\n                width: `${successPercent}%`,\n                height: strokeWidth || (size === \"small\" /* small */ ? 6 : 8),\n            };\n            const successSegment = successPercent !== undefined ? (React.createElement(\"div\", { className: `${prefixCls}-success-bg`, style: successPercentStyle })) : null;\n            progress = (React.createElement(\"div\", null,\n                React.createElement(\"div\", { className: `${prefixCls}-outer` },\n                    React.createElement(\"div\", { className: `${prefixCls}-inner` },\n                        React.createElement(\"div\", { className: `${prefixCls}-bg`, style: percentStyle }),\n                        successSegment)),\n                progressInfo));\n        }\n        else if (type === \"circle\" /* circle */ || type === \"dashboard\" /* dashboard */) {\n            const circleSize = width || 120;\n            const circleStyle = {\n                width: circleSize,\n                height: circleSize,\n                fontSize: circleSize * 0.15 + 6,\n            };\n            const circleWidth = strokeWidth || 6;\n            const gapPos = gapPosition ||\n                (type === \"dashboard\" /* dashboard */ && \"bottom\" /* bottom */) ||\n                \"top\" /* top */;\n            const gapDeg = gapDegree || (type === \"dashboard\" /* dashboard */ && 75);\n            progress = (React.createElement(\"div\", { className: `${prefixCls}-inner`, style: circleStyle },\n                React.createElement(Circle, { percent: percent, strokeWidth: circleWidth, trailWidth: circleWidth, trailColor: trailColor, strokeColor: strokeColor, prefixCls: prefixCls, gapDegree: gapDeg, gapPosition: gapPos }),\n                progressCenter,\n                progressInfo));\n        }\n        else if (type === \"loading\" /* loading */) {\n            progress = (React.createElement(\"div\", { className: `${prefixCls}-inner` },\n                React.createElement(Loading, null)));\n        }\n        const classString = classNames(prefixCls, {\n            [`${prefixCls}-${(type === \"dashboard\" /* dashboard */ && \"circle\" /* circle */) || type}`]: true,\n            [`${prefixCls}-status-${progressStatus}`]: true,\n            [`${prefixCls}-show-info`]: showInfo,\n            [`${prefixCls}-${size}`]: size,\n        }, className);\n        return (React.createElement(\"div\", Object.assign({}, restProps, { className: classString }), progress));\n    }\n}\nProgress.displayName = 'Progress';\nProgress.defaultProps = {\n    type: \"line\" /* line */,\n    percent: 0,\n    showInfo: true,\n    showPointer: false,\n    trailColor: '#f3f3f3',\n    size: \"default\" /* default */,\n};\nProgress.propTypes = {\n    status: PropTypes.oneOf([\n        \"normal\" /* normal */,\n        \"exception\" /* exception */,\n        \"active\" /* active */,\n        \"success\" /* success */,\n    ]),\n    type: PropTypes.oneOf([\n        \"line\" /* line */,\n        \"circle\" /* circle */,\n        \"dashboard\" /* dashboard */,\n        \"loading\" /* loading */,\n    ]),\n    showInfo: PropTypes.bool,\n    showPointer: PropTypes.bool,\n    percent: PropTypes.number,\n    width: PropTypes.number,\n    strokeWidth: PropTypes.number,\n    strokeColor: PropTypes.string,\n    trailColor: PropTypes.string,\n    format: PropTypes.func,\n    gapDegree: PropTypes.number,\n    size: PropTypes.oneOf([\"default\" /* default */, \"small\" /* small */, \"large\" /* large */]),\n};\n"]}