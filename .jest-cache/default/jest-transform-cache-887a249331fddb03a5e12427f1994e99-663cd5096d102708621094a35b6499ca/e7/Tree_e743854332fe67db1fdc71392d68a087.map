{"version":3,"sources":["rc-components/tree/Tree.js"],"names":["keyPropType","PropTypes","Tree","React","Component","keyEntities","selectedKeys","checkedKeys","halfCheckedKeys","loadedKeys","loadingKeys","expandedKeys","dragging","dragNodesKeys","dragOverNodeKey","dropPosition","treeData","flattenNodes","focused","activeKey","prevProps","onDragStart","eventKey","node","event","onDragEnter","pos","setTimeout","Object","clearTimeout","newExpandedKeys","entity","onDragOver","onDragLeave","onDragEnd","onDrop","posArr","dropResult","dragNode","Number","dropToGap","onClick","onDoubleClick","onSelect","multiple","selected","key","treeNode","targetSelected","selectedNodes","nativeEvent","e","oriCheckedKeys","oriHalfCheckedKeys","checkStrictly","onCheck","eventObj","checked","checkedObj","halfChecked","keySet","Array","loadData","onLoad","promise","currentLoadedKeys","currentLoadingKeys","newLoadedKeys","newLoadingKeys","resolve","onExpand","expanded","index","targetExpanded","loadPromise","newFlattenTreeData","onMouseEnter","onMouseLeave","onRightClick","onFocus","onBlur","onActiveChange","offset","item","onKeyDown","checkable","selectable","KeyCode","activeItem","treeNodeRequiredProps","expandable","eventNode","data","active","atomic","needSync","allPassed","newState","name","state","props","prevState","entitiesMap","MOTION_KEY","MotionEntity","process","cloneKeyEntities","checkedKeyEntity","conductKeys","prefixCls","className","style","showLine","focusable","tabIndex","showIcon","icon","switcherIcon","draggable","disabled","motion","filterTreeNode","height","itemHeight","virtual","domProps","TreeContext","value","onNodeClick","onNodeDoubleClick","onNodeExpand","onNodeSelect","onNodeCheck","onNodeLoad","onNodeMouseEnter","onNodeMouseLeave","onNodeContextMenu","onNodeDragStart","onNodeDragEnter","onNodeDragOver","onNodeDragLeave","onNodeDragEnd","onNodeDrop","NodeList","ref","children","defaultExpandParent","autoExpandParent","defaultExpandAll","defaultExpandedKeys","defaultCheckedKeys","defaultSelectedKeys","TreeNode"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,UAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;;AACA,IAAA,QAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,qBAAA,CAAA,CAAA;;AACA,IAAA,QAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,qBAAA,CAAA,CAAA;;AACA,IAAA,WAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;;AACA,IAAA,sBAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;AACA,IAAA,aAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,IAAA,KAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AACA,IAAA,SAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;;AACA,IAAA,SAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;AAnBA;AACA;AACA;;AACA;;;AAGA;AACA;;;AAaA,IAAMA,WAAW,GAAGC,UAAAA,CAAAA,SAAAA,CAAAA,CAAAA,SAAAA,CAAoB,CAACA,UAAAA,CAAAA,SAAAA,CAAAA,CAAD,MAAA,EAAmBA,UAAAA,CAAAA,SAAAA,CAAAA,CAA3D,MAAwC,CAApBA,CAApB;;IACMC,I;;;;;AACF,WAAA,IAAA,GAAc;AAAA,QAAA,KAAA;;AAAA,KAAA,GAAA,gBAAA,CAAA,SAAA,CAAA,EAAA,IAAA,EAAA,IAAA;AACV,IAAA,KAAA,GAAA,CAAA,GAAA,2BAAA,CAAA,SAAA,CAAA,EAAA,IAAA,EAAA,CAAA,GAAA,gBAAA,CAAA,SAAA,CAAA,EAAA,IAAA,EAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;AACA,IAAA,KAAA,CAAA,KAAA,GAAa;AACTG,MAAAA,WAAW,EADF,EAAA;AAETC,MAAAA,YAAY,EAFH,EAAA;AAGTC,MAAAA,WAAW,EAHF,EAAA;AAITC,MAAAA,eAAe,EAJN,EAAA;AAKTC,MAAAA,UAAU,EALD,EAAA;AAMTC,MAAAA,WAAW,EANF,EAAA;AAOTC,MAAAA,YAAY,EAPH,EAAA;AAQTC,MAAAA,QAAQ,EARC,KAAA;AASTC,MAAAA,aAAa,EATJ,EAAA;AAUTC,MAAAA,eAAe,EAVN,IAAA;AAWTC,MAAAA,YAAY,EAXH,IAAA;AAYTC,MAAAA,QAAQ,EAZC,EAAA;AAaTC,MAAAA,YAAY,EAbH,EAAA;AAcTC,MAAAA,OAAO,EAdE,KAAA;AAeTC,MAAAA,SAAS,EAfA,IAAA;AAgBTC,MAAAA,SAAS,EAAE;AAhBF,KAAb;AAkBA,IAAA,KAAA,CAAA,OAAA,GAAejB,KAAK,CAApB,SAAeA,EAAf;;AACA,IAAA,KAAA,CAAA,eAAA,GAAuB,UAAA,KAAA,EAAA,IAAA,EAAiB;AAAA,UAAA,WAAA,GACE,KAAA,CADF,KAAA;AAAA,UAC5BQ,YAD4B,GAAA,WAAA,CAAA,YAAA;AAAA,UACdN,WADc,GAAA,WAAA,CAAA,WAAA;AAAA,UAE5BgB,WAF4B,GAEZ,KAAA,CAFY,KAEZ,CAFY,WAAA;AAAA,UAG5BC,QAH4B,GAGfC,IAAI,CAHW,KAGfA,CAHe,QAAA;AAIpC,MAAA,KAAA,CAAA,QAAA,GAAA,IAAA;;AACA,MAAA,KAAA,CAAA,QAAA,CAAc;AACVX,QAAAA,QAAQ,EADE,IAAA;AAEVC,QAAAA,aAAa,EAAE,CAAA,GAAA,KAAA,CAAA,gBAAA,EAAA,QAAA,EAFL,WAEK,CAFL;AAGVF,QAAAA,YAAY,EAAE,CAAA,GAAA,KAAA,CAAA,MAAA,EAAA,YAAA,EAAA,QAAA;AAHJ,OAAd;;AAKA,UAAA,WAAA,EAAiB;AACbU,QAAAA,WAAW,CAAC;AAAEG,UAAAA,KAAK,EAAP,KAAA;AAASD,UAAAA,IAAI,EAAE,CAAA,GAAA,SAAA,CAAA,2BAAA,EAA4BA,IAAI,CAAhC,KAAA;AAAf,SAAD,CAAXF;AACH;AAZL,KAAA;AAcA;;;;;;;;;AAOA,IAAA,KAAA,CAAA,eAAA,GAAuB,UAAA,KAAA,EAAA,IAAA,EAAiB;AAAA,UAAA,YAAA,GACE,KAAA,CADF,KAAA;AAAA,UAC5BV,YAD4B,GAAA,YAAA,CAAA,YAAA;AAAA,UACdN,WADc,GAAA,YAAA,CAAA,WAAA;AAAA,UAE5BoB,WAF4B,GAEZ,KAAA,CAFY,KAEZ,CAFY,WAAA;AAAA,UAAA,WAAA,GAGVF,IAAI,CAHM,KAAA;AAAA,UAG5BG,GAH4B,GAAA,WAAA,CAAA,GAAA;AAAA,UAGvBJ,QAHuB,GAAA,WAAA,CAAA,QAAA;AAIpC,UAAI,CAAC,KAAA,CAAL,QAAA,EACI;AACJ,UAAMP,YAAY,GAAG,CAAA,GAAA,KAAA,CAAA,gBAAA,EAAA,KAAA,EANe,IAMf,CAArB,CANoC,CAOpC;;AACA,UAAI,KAAA,CAAA,QAAA,CAAA,KAAA,CAAA,QAAA,KAAA,QAAA,IAA6CA,YAAY,KAA7D,CAAA,EAAqE;AACjE,QAAA,KAAA,CAAA,QAAA,CAAc;AACVD,UAAAA,eAAe,EADL,EAAA;AAEVC,UAAAA,YAAY,EAAE;AAFJ,SAAd;;AAIA;AAbgC,OAAA,CAepC;AACA;AACA;AACA;AACA;;;AACAY,MAAAA,UAAU,CAAC,YAAM;AACb;AACA,QAAA,KAAA,CAAA,QAAA,CAAc;AACVb,UAAAA,eAAe,EADL,QAAA;AAEVC,UAAAA,YAAY,EAAZA;AAFU,SAAd,EAFa,CAMb;;;AACA,YAAI,CAAC,KAAA,CAAL,qBAAA,EAAiC;AAC7B,UAAA,KAAA,CAAA,qBAAA,GAAA,EAAA;AACH;;AACDa,QAAAA,MAAM,CAANA,IAAAA,CAAY,KAAA,CAAZA,qBAAAA,EAAAA,OAAAA,CAAgD,UAAA,GAAA,EAAO;AACnDC,UAAAA,YAAY,CAAC,KAAA,CAAA,qBAAA,CAAbA,GAAa,CAAD,CAAZA;AADJD,SAAAA;AAGA,QAAA,KAAA,CAAA,qBAAA,CAAA,GAAA,IAAkC,MAAM,CAAN,UAAA,CAAkB,YAAM;AACtD,cAAI,CAAC,KAAA,CAAA,KAAA,CAAL,QAAA,EACI;AACJ,cAAIE,eAAe,GAAA,CAAA,GAAA,mBAAA,CAAA,SAAA,CAAA,EAAnB,YAAmB,CAAnB;AACA,cAAMC,MAAM,GAAG1B,WAAW,CAA1B,QAA0B,CAA1B;;AACA,cAAI0B,MAAM,IAAI,CAACA,MAAM,CAANA,QAAAA,IAAD,EAAA,EAAd,MAAA,EAA8C;AAC1CD,YAAAA,eAAe,GAAG,CAAA,GAAA,KAAA,CAAA,MAAA,EAAA,YAAA,EAAlBA,QAAkB,CAAlBA;AACH;;AACD,cAAI,EAAE,kBAAkB,KAAA,CAAxB,KAAI,CAAJ,EAAqC;AACjC,YAAA,KAAA,CAAA,QAAA,CAAc;AACVnB,cAAAA,YAAY,EAAEmB;AADJ,aAAd;AAGH;;AACD,cAAA,WAAA,EAAiB;AACbL,YAAAA,WAAW,CAAC;AACRD,cAAAA,KAAK,EADG,KAAA;AAERD,cAAAA,IAAI,EAAE,CAAA,GAAA,SAAA,CAAA,2BAAA,EAA4BA,IAAI,CAF9B,KAEF,CAFE;AAGRZ,cAAAA,YAAY,EAAEmB;AAHN,aAAD,CAAXL;AAKH;AAnB6B,SAAA,EAAlC,GAAkC,CAAlC;AAbM,OAAA,EAAVE,CAAU,CAAVA;AApBJ,KAAA;;AAwDA,IAAA,KAAA,CAAA,cAAA,GAAsB,UAAA,KAAA,EAAA,IAAA,EAAiB;AAAA,UAC3BK,UAD2B,GACZ,KAAA,CADY,KACZ,CADY,UAAA;AAAA,UAE3BV,QAF2B,GAEdC,IAAI,CAFU,KAEdA,CAFc,QAAA,CAAA,CAGnC;;AACA,UAAI,KAAA,CAAA,QAAA,IAAiBD,QAAQ,KAAK,KAAA,CAAA,KAAA,CAAlC,eAAA,EAA8D;AAC1D,YAAMP,YAAY,GAAG,CAAA,GAAA,KAAA,CAAA,gBAAA,EAAA,KAAA,EAArB,IAAqB,CAArB;AACA,YAAIA,YAAY,KAAK,KAAA,CAAA,KAAA,CAArB,YAAA,EACI;;AACJ,QAAA,KAAA,CAAA,QAAA,CAAc;AACVA,UAAAA,YAAY,EAAZA;AADU,SAAd;AAGH;;AACD,UAAA,UAAA,EAAgB;AACZiB,QAAAA,UAAU,CAAC;AAAER,UAAAA,KAAK,EAAP,KAAA;AAASD,UAAAA,IAAI,EAAE,CAAA,GAAA,SAAA,CAAA,2BAAA,EAA4BA,IAAI,CAAhC,KAAA;AAAf,SAAD,CAAVS;AACH;AAdL,KAAA;;AAgBA,IAAA,KAAA,CAAA,eAAA,GAAuB,UAAA,KAAA,EAAA,IAAA,EAAiB;AAAA,UAC5BC,WAD4B,GACZ,KAAA,CADY,KACZ,CADY,WAAA;;AAEpC,MAAA,KAAA,CAAA,QAAA,CAAc;AACVnB,QAAAA,eAAe,EAAE;AADP,OAAd;;AAGA,UAAA,WAAA,EAAiB;AACbmB,QAAAA,WAAW,CAAC;AAAET,UAAAA,KAAK,EAAP,KAAA;AAASD,UAAAA,IAAI,EAAE,CAAA,GAAA,SAAA,CAAA,2BAAA,EAA4BA,IAAI,CAAhC,KAAA;AAAf,SAAD,CAAXU;AACH;AAPL,KAAA;;AASA,IAAA,KAAA,CAAA,aAAA,GAAqB,UAAA,KAAA,EAAA,IAAA,EAAiB;AAAA,UAC1BC,SAD0B,GACZ,KAAA,CADY,KACZ,CADY,SAAA;;AAElC,MAAA,KAAA,CAAA,QAAA,CAAc;AACVpB,QAAAA,eAAe,EAAE;AADP,OAAd;;AAGA,MAAA,KAAA,CAAA,cAAA;;AACA,UAAA,SAAA,EAAe;AACXoB,QAAAA,SAAS,CAAC;AAAEV,UAAAA,KAAK,EAAP,KAAA;AAASD,UAAAA,IAAI,EAAE,CAAA,GAAA,SAAA,CAAA,2BAAA,EAA4BA,IAAI,CAAhC,KAAA;AAAf,SAAD,CAATW;AACH;;AACD,MAAA,KAAA,CAAA,QAAA,GAAA,IAAA;AATJ,KAAA;;AAWA,IAAA,KAAA,CAAA,UAAA,GAAkB,UAAA,KAAA,EAAA,IAAA,EAAiB;AAAA,UAAA,YAAA,GACc,KAAA,CADd,KAAA;AAAA,UAAA,qBAAA,GAAA,YAAA,CAAA,aAAA;AAAA,UACvBrB,aADuB,GAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,qBAAA;AAAA,UACHE,YADG,GAAA,YAAA,CAAA,YAAA;AAAA,UAEvBoB,MAFuB,GAEZ,KAAA,CAFY,KAEZ,CAFY,MAAA;AAAA,UAAA,YAAA,GAGLZ,IAAI,CAHC,KAAA;AAAA,UAGvBD,QAHuB,GAAA,YAAA,CAAA,QAAA;AAAA,UAGbI,GAHa,GAAA,YAAA,CAAA,GAAA;;AAI/B,MAAA,KAAA,CAAA,QAAA,CAAc;AACVZ,QAAAA,eAAe,EAAE;AADP,OAAd;;AAGA,MAAA,KAAA,CAAA,cAAA;;AACA,UAAID,aAAa,CAAbA,OAAAA,CAAAA,QAAAA,MAAoC,CAAxC,CAAA,EAA4C;AACxC,SAAA,GAAA,QAAA,CAAA,SAAA,CAAA,EAAA,KAAA,EAAA,sDAAA;AACA;AACH;;AACD,UAAMuB,MAAM,GAAG,CAAA,GAAA,KAAA,CAAA,QAAA,EAAf,GAAe,CAAf;AACA,UAAMC,UAAU,GAAG;AACfb,QAAAA,KAAK,EADU,KAAA;AAEfD,QAAAA,IAAI,EAAE,CAAA,GAAA,SAAA,CAAA,2BAAA,EAA4BA,IAAI,CAFvB,KAET,CAFS;AAGfe,QAAAA,QAAQ,EAAE,CAAA,GAAA,SAAA,CAAA,2BAAA,EAA4B,KAAA,CAAA,QAAA,CAHvB,KAGL,CAHK;AAIfzB,QAAAA,aAAa,EAAEA,aAAa,CAJb,KAIAA,EAJA;AAKfE,QAAAA,YAAY,EAAEA,YAAY,GAAGwB,MAAM,CAACH,MAAM,CAACA,MAAM,CAANA,MAAAA,GAL5B,CAK2B,CAAP,CALpB;AAMfI,QAAAA,SAAS,EAAE;AANI,OAAnB;;AAQA,UAAIzB,YAAY,KAAhB,CAAA,EAAwB;AACpBsB,QAAAA,UAAU,CAAVA,SAAAA,GAAAA,IAAAA;AACH;;AACD,UAAA,MAAA,EAAY;AACRF,QAAAA,MAAM,CAANA,UAAM,CAANA;AACH;;AACD,MAAA,KAAA,CAAA,QAAA,GAAA,IAAA;AA3BJ,KAAA;;AA6BA,IAAA,KAAA,CAAA,cAAA,GAAsB,YAAM;AAAA,UAChBvB,QADgB,GACH,KAAA,CADG,KACH,CADG,QAAA;;AAExB,UAAA,QAAA,EAAc;AACV,QAAA,KAAA,CAAA,QAAA,CAAc;AACVA,UAAAA,QAAQ,EAAE;AADA,SAAd;AAGH;AANL,KAAA;;AAQA,IAAA,KAAA,CAAA,WAAA,GAAmB,UAAA,CAAA,EAAA,QAAA,EAAiB;AAAA,UACxB6B,OADwB,GACZ,KAAA,CADY,KACZ,CADY,OAAA;;AAEhC,UAAA,OAAA,EAAa;AACTA,QAAAA,OAAO,CAAA,CAAA,EAAPA,QAAO,CAAPA;AACH;AAJL,KAAA;;AAMA,IAAA,KAAA,CAAA,iBAAA,GAAyB,UAAA,CAAA,EAAA,QAAA,EAAiB;AAAA,UAC9BC,aAD8B,GACZ,KAAA,CADY,KACZ,CADY,aAAA;;AAEtC,UAAA,aAAA,EAAmB;AACfA,QAAAA,aAAa,CAAA,CAAA,EAAbA,QAAa,CAAbA;AACH;AAJL,KAAA;;AAMA,IAAA,KAAA,CAAA,YAAA,GAAoB,UAAA,CAAA,EAAA,QAAA,EAAiB;AAAA,UAC3BpC,YAD2B,GACV,KAAA,CADU,KACV,CADU,YAAA;AAAA,UAEzBD,WAFyB,GAET,KAAA,CAFS,KAET,CAFS,WAAA;AAAA,UAAA,WAAA,GAGF,KAAA,CAHE,KAAA;AAAA,UAGzBsC,QAHyB,GAAA,WAAA,CAAA,QAAA;AAAA,UAGfC,QAHe,GAAA,WAAA,CAAA,QAAA;AAAA,UAIzBC,QAJyB,GAIPE,QAJO,CAAA,QAAA;AAAA,UAIfD,GAJe,GAIPC,QAJO,CAAA,GAAA;AAKjC,UAAMC,cAAc,GAAG,CALU,QAKjC,CALiC,CAMjC;;AACA,UAAI,CAAJ,cAAA,EAAqB;AACjB1C,QAAAA,YAAY,GAAG,CAAA,GAAA,KAAA,CAAA,MAAA,EAAA,YAAA,EAAfA,GAAe,CAAfA;AADJ,OAAA,MAGK,IAAI,CAAJ,QAAA,EAAe;AAChBA,QAAAA,YAAY,GAAG,CAAfA,GAAe,CAAfA;AADC,OAAA,MAGA;AACDA,QAAAA,YAAY,GAAG,CAAA,GAAA,KAAA,CAAA,MAAA,EAAA,YAAA,EAAfA,GAAe,CAAfA;AAd6B,OAAA,CAgBjC;;;AACA,UAAM2C,aAAa,GAAG,YAAY,CAAZ,GAAA,CACb,UAAA,WAAA,EAAe;AACpB,YAAMlB,MAAM,GAAG1B,WAAW,CAA1B,WAA0B,CAA1B;AACA,YAAI,CAAJ,MAAA,EACI,OAAA,IAAA;AACJ,eAAO0B,MAAM,CAAb,IAAA;AALkB,OAAA,EAAA,MAAA,CAOV,UAAA,IAAA,EAAI;AAAA,eAAA,IAAA;AAPhB,OAAsB,CAAtB;;AAQA,MAAA,KAAA,CAAA,oBAAA,CAA0B;AAAEzB,QAAAA,YAAY,EAAZA;AAAF,OAA1B;;AACA,UAAA,QAAA,EAAc;AACVqC,QAAAA,QAAQ,CAAA,YAAA,EAAe;AACnBnB,UAAAA,KAAK,EADc,QAAA;AAEnBqB,UAAAA,QAAQ,EAFW,cAAA;AAGnBtB,UAAAA,IAAI,EAHe,QAAA;AAInB0B,UAAAA,aAAa,EAJM,aAAA;AAKnBC,UAAAA,WAAW,EAAEC,CAAC,CAACD;AALI,SAAf,CAARP;AAOH;AAlCL,KAAA;;AAoCA,IAAA,KAAA,CAAA,WAAA,GAAmB,UAAA,CAAA,EAAA,QAAA,EAAA,OAAA,EAA0B;AAAA,UAAA,YAAA,GACkD,KAAA,CADlD,KAAA;AAAA,UACjCtC,WADiC,GAAA,YAAA,CAAA,WAAA;AAAA,UACP+C,cADO,GAAA,YAAA,CAAA,WAAA;AAAA,UAC0BC,kBAD1B,GAAA,YAAA,CAAA,eAAA;AAAA,UAAA,YAAA,GAEN,KAAA,CAFM,KAAA;AAAA,UAEjCC,aAFiC,GAAA,YAAA,CAAA,aAAA;AAAA,UAElBC,OAFkB,GAAA,YAAA,CAAA,OAAA;AAAA,UAGjCT,GAHiC,GAGzBC,QAHyB,CAAA,GAAA,CAAA,CAIzC;;AACA,UAAA,UAAA;AACA,UAAMS,QAAQ,GAAG;AACbhC,QAAAA,KAAK,EADQ,OAAA;AAEbD,QAAAA,IAAI,EAFS,QAAA;AAGbkC,QAAAA,OAAO,EAHM,OAAA;AAIbP,QAAAA,WAAW,EAAEC,CAAC,CAACD;AAJF,OAAjB;;AAMA,UAAA,aAAA,EAAmB;AACf,YAAM3C,WAAW,GAAGkD,OAAO,GACrB,CAAA,GAAA,KAAA,CAAA,MAAA,EAAA,cAAA,EADqB,GACrB,CADqB,GAErB,CAAA,GAAA,KAAA,CAAA,MAAA,EAAA,cAAA,EAFN,GAEM,CAFN;AAGA,YAAMjD,eAAe,GAAG,CAAA,GAAA,KAAA,CAAA,MAAA,EAAA,kBAAA,EAAxB,GAAwB,CAAxB;AACAkD,QAAAA,UAAU,GAAG;AAAED,UAAAA,OAAO,EAAT,WAAA;AAAwBE,UAAAA,WAAW,EAAEnD;AAArC,SAAbkD;AACAF,QAAAA,QAAQ,CAARA,YAAAA,GAAwB,WAAW,CAAX,GAAA,CACf,UAAA,UAAA,EAAU;AAAA,iBAAInD,WAAW,CAAf,UAAe,CAAf;AADK,SAAA,EAAA,MAAA,CAEZ,UAAA,MAAA,EAAM;AAAA,iBAAA,MAAA;AAFM,SAAA,EAAA,GAAA,CAGf,UAAA,MAAA,EAAM;AAAA,iBAAI0B,MAAM,CAAV,IAAA;AAHfyB,SAAwB,CAAxBA;;AAIA,QAAA,KAAA,CAAA,oBAAA,CAA0B;AAAEjD,UAAAA,WAAW,EAAXA;AAAF,SAA1B;AAVJ,OAAA,MAYK;AACD;AADC,YAAA,aAAA,GAEsC,CAAA,GAAA,YAAA,CAAA,YAAA,EAAA,GAAA,MAAA,CAAA,CAAA,GAAA,mBAAA,CAAA,SAAA,CAAA,EAAA,cAAA,CAAA,EAAA,CAAA,GAAA,CAAA,CAAA,EAAA,IAAA,EAFtC,WAEsC,CAFtC;AAAA,YAEKA,YAFL,GAAA,aAAA,CAAA,WAAA;AAAA,YAEkBC,gBAFlB,GAAA,aAAA,CAAA,eAAA,CAAA,CAGD;;;AACA,YAAI,CAAJ,OAAA,EAAc;AACV,cAAMoD,MAAM,GAAG,IAAA,GAAA,CAAf,YAAe,CAAf;AACAA,UAAAA,MAAM,CAANA,QAAM,CAANA,CAAAA,GAAAA;;AAFU,cAAA,cAAA,GAG0B,CAAA,GAAA,YAAA,CAAA,YAAA,EAAaC,KAAK,CAALA,IAAAA,CAAb,MAAaA,CAAb,EAAiC;AAAEJ,YAAAA,OAAO,EAAT,KAAA;AAAkBjD,YAAAA,eAAe,EAAfA;AAAlB,WAAjC,EAH1B,WAG0B,CAH1B;;AAGPD,UAAAA,YAHO,GAAA,cAAA,CAAA,WAGPA;AAAaC,UAAAA,gBAHN,GAAA,cAAA,CAAA,eAGMA;AACnB;;AACDkD,QAAAA,UAAU,GATT,YASDA,CATC,CAUD;;AACAF,QAAAA,QAAQ,CAARA,YAAAA,GAAAA,EAAAA;AACAA,QAAAA,QAAQ,CAARA,qBAAAA,GAAAA,EAAAA;AACAA,QAAAA,QAAQ,CAARA,eAAAA,GAAAA,gBAAAA;;AACAjD,QAAAA,YAAW,CAAXA,OAAAA,CAAoB,UAAA,UAAA,EAAc;AAC9B,cAAMwB,MAAM,GAAG1B,WAAW,CAA1B,UAA0B,CAA1B;AACA,cAAI,CAAJ,MAAA,EACI;AAH0B,cAItBkB,IAJsB,GAIRQ,MAJQ,CAAA,IAAA;AAAA,cAIhBL,GAJgB,GAIRK,MAJQ,CAAA,GAAA;AAK9ByB,UAAAA,QAAQ,CAARA,YAAAA,CAAAA,IAAAA,CAAAA,IAAAA;AACAA,UAAAA,QAAQ,CAARA,qBAAAA,CAAAA,IAAAA,CAAoC;AAAEjC,YAAAA,IAAI,EAAN,IAAA;AAAQG,YAAAA,GAAG,EAAHA;AAAR,WAApC8B;AANJjD,SAAAA;;AAQA,QAAA,KAAA,CAAA,oBAAA,CAA0B;AACtBA,UAAAA,WAAW,EADW,YAAA;AAEtBC,UAAAA,eAAe,EAAfA;AAFsB,SAA1B;AAIH;;AACD,UAAA,OAAA,EAAa;AACT+C,QAAAA,OAAO,CAAA,UAAA,EAAPA,QAAO,CAAPA;AACH;AArDL,KAAA;;AAuDA,IAAA,KAAA,CAAA,UAAA,GAAkB,UAAA,QAAA,EAAA;AAAA,aAAc,IAAA,OAAA,CAAY,UAAA,OAAA,EAAW;AACnD;AACA,QAAA,KAAA,CAAA,QAAA,CAAc,UAAA,IAAA,EAA2C;AAAA,cAAA,eAAA,GAAA,IAAA,CAAxC9C,UAAwC;AAAA,cAAxCA,UAAwC,GAAA,eAAA,KAAA,KAAA,CAAA,GAA3B,EAA2B,GAAA,eAAA;AAAA,cAAA,gBAAA,GAAA,IAAA,CAAvBC,WAAuB;AAAA,cAAvBA,WAAuB,GAAA,gBAAA,KAAA,KAAA,CAAA,GAAT,EAAS,GAAA,gBAAA;AAAA,cAAA,YAAA,GACxB,KAAA,CADwB,KAAA;AAAA,cAC7CoD,QAD6C,GAAA,YAAA,CAAA,QAAA;AAAA,cACnCC,MADmC,GAAA,YAAA,CAAA,MAAA;AAAA,cAE7CjB,GAF6C,GAErCC,QAFqC,CAAA,GAAA;;AAGrD,cAAI,CAAA,QAAA,IACAtC,UAAU,CAAVA,OAAAA,CAAAA,GAAAA,MAA4B,CAD5B,CAAA,IAEAC,WAAW,CAAXA,OAAAA,CAAAA,GAAAA,MAA6B,CAFjC,CAAA,EAEqC;AACjC;AACA,mBAAA,EAAA;AAPiD,WAAA,CASrD;;;AACA,cAAMsD,OAAO,GAAGF,QAAQ,CAAxB,QAAwB,CAAxB;AACAE,UAAAA,OAAO,CAAPA,IAAAA,CAAa,YAAM;AAAA,gBAAA,YAAA,GAC6D,KAAA,CAD7D,KAAA;AAAA,gBACKC,iBADL,GAAA,YAAA,CAAA,UAAA;AAAA,gBACqCC,kBADrC,GAAA,YAAA,CAAA,WAAA;AAEf,gBAAMC,aAAa,GAAG,CAAA,GAAA,KAAA,CAAA,MAAA,EAAA,iBAAA,EAAtB,GAAsB,CAAtB;AACA,gBAAMC,cAAc,GAAG,CAAA,GAAA,KAAA,CAAA,MAAA,EAAA,kBAAA,EAHR,GAGQ,CAAvB,CAHe,CAIf;AACA;;AACA,gBAAA,MAAA,EAAY;AACRL,cAAAA,MAAM,CAAA,aAAA,EAAgB;AAClBvC,gBAAAA,KAAK,EADa,MAAA;AAElBD,gBAAAA,IAAI,EAAEwB;AAFY,eAAhB,CAANgB;AAIH;;AACD,YAAA,KAAA,CAAA,oBAAA,CAA0B;AACtBtD,cAAAA,UAAU,EAAE0D;AADU,aAA1B;;AAGA,YAAA,KAAA,CAAA,QAAA,CAAc;AACVzD,cAAAA,WAAW,EAAE0D;AADH,aAAd;;AAGAC,YAAAA,OAAO;AAlBXL,WAAAA;AAoBA,iBAAO;AACHtD,YAAAA,WAAW,EAAE,CAAA,GAAA,KAAA,CAAA,MAAA,EAAA,WAAA,EAAA,GAAA;AADV,WAAP;AA/BJ,SAAA;AAFc,OAAc,CAAd;AAAlB,KAAA;;AAsCA,IAAA,KAAA,CAAA,YAAA,GAAoB,UAAA,CAAA,EAAA,QAAA,EAAiB;AAAA,UAC3BC,YAD2B,GACV,KAAA,CADU,KACV,CADU,YAAA;AAAA,UAEzBK,QAFyB,GAEZ,KAAA,CAFY,KAEZ,CAFY,QAAA;AAAA,UAAA,YAAA,GAGF,KAAA,CAHE,KAAA;AAAA,UAGzBsD,QAHyB,GAAA,YAAA,CAAA,QAAA;AAAA,UAGfR,QAHe,GAAA,YAAA,CAAA,QAAA;AAAA,UAIzBhB,GAJyB,GAIPC,QAJO,CAAA,GAAA;AAAA,UAIpBwB,QAJoB,GAIPxB,QAJO,CAAA,QAAA,CAAA,CAKjC;;AACA,UAAMyB,KAAK,GAAG7D,YAAY,CAAZA,OAAAA,CAAd,GAAcA,CAAd;AACA,UAAM8D,cAAc,GAAG,CAAvB,QAAA;AACA,OAAA,GAAA,QAAA,CAAA,SAAA,CAAA,EAASF,QAAQ,IAAIC,KAAK,KAAK,CAAvB,CAACD,IAA8B,CAAA,QAAA,IAAaC,KAAK,KAAK,CAA9D,CAAA,EAAA,wCAAA;;AACA,UAAA,cAAA,EAAoB;AAChB7D,QAAAA,YAAY,GAAG,CAAA,GAAA,KAAA,CAAA,MAAA,EAAA,YAAA,EAAfA,GAAe,CAAfA;AADJ,OAAA,MAGK;AACDA,QAAAA,YAAY,GAAG,CAAA,GAAA,KAAA,CAAA,MAAA,EAAA,YAAA,EAAfA,GAAe,CAAfA;AACH;;AACD,UAAMM,YAAY,GAAG,CAAA,GAAA,SAAA,CAAA,eAAA,EAAA,QAAA,EAArB,YAAqB,CAArB;;AACA,MAAA,KAAA,CAAA,oBAAA,CAA0B;AAAEN,QAAAA,YAAY,EAAd,YAAA;AAAgBM,QAAAA,YAAY,EAAZA;AAAhB,OAA1B,EAAA,IAAA;;AACA,UAAA,QAAA,EAAc;AACVqD,QAAAA,QAAQ,CAAA,YAAA,EAAe;AACnB/C,UAAAA,IAAI,EADe,QAAA;AAEnBgD,UAAAA,QAAQ,EAFW,cAAA;AAGnBrB,UAAAA,WAAW,EAAEC,CAAC,CAACD;AAHI,SAAf,CAARoB;AAlB6B,OAAA,CAwBjC;;;AACA,UAAIG,cAAc,IAAlB,QAAA,EAAgC;AAC5B,YAAMC,WAAW,GAAG,KAAA,CAAA,UAAA,CAApB,QAAoB,CAApB;;AACA,eAAOA,WAAW,GACZ,WAAW,CAAX,IAAA,CAAiB,YAAM;AACrB;AACA,cAAMC,kBAAkB,GAAG,CAAA,GAAA,SAAA,CAAA,eAAA,EAAgB,KAAA,CAAA,KAAA,CAAhB,QAAA,EAA3B,YAA2B,CAA3B;;AACA,UAAA,KAAA,CAAA,oBAAA,CAA0B;AAAE1D,YAAAA,YAAY,EAAE0D;AAAhB,WAA1B;AAJU,SACZ,CADY,GAAlB,IAAA;AAOH;;AACD,aAAA,IAAA;AAnCJ,KAAA;;AAqCA,IAAA,KAAA,CAAA,gBAAA,GAAwB,UAAA,KAAA,EAAA,IAAA,EAAiB;AAAA,UAC7BC,YAD6B,GACZ,KAAA,CADY,KACZ,CADY,YAAA;;AAErC,UAAA,YAAA,EAAkB;AACdA,QAAAA,YAAY,CAAC;AAAEpD,UAAAA,KAAK,EAAP,KAAA;AAASD,UAAAA,IAAI,EAAJA;AAAT,SAAD,CAAZqD;AACH;AAJL,KAAA;;AAMA,IAAA,KAAA,CAAA,gBAAA,GAAwB,UAAA,KAAA,EAAA,IAAA,EAAiB;AAAA,UAC7BC,YAD6B,GACZ,KAAA,CADY,KACZ,CADY,YAAA;;AAErC,UAAA,YAAA,EAAkB;AACdA,QAAAA,YAAY,CAAC;AAAErD,UAAAA,KAAK,EAAP,KAAA;AAASD,UAAAA,IAAI,EAAJA;AAAT,SAAD,CAAZsD;AACH;AAJL,KAAA;;AAMA,IAAA,KAAA,CAAA,iBAAA,GAAyB,UAAA,KAAA,EAAA,IAAA,EAAiB;AAAA,UAC9BC,YAD8B,GACb,KAAA,CADa,KACb,CADa,YAAA;;AAEtC,UAAA,YAAA,EAAkB;AACdtD,QAAAA,KAAK,CAALA,cAAAA;AACAsD,QAAAA,YAAY,CAAC;AAAEtD,UAAAA,KAAK,EAAP,KAAA;AAASD,UAAAA,IAAI,EAAJA;AAAT,SAAD,CAAZuD;AACH;AALL,KAAA;;AAOA,IAAA,KAAA,CAAA,OAAA,GAAe,YAAa;AAAA,UAChBC,OADgB,GACJ,KAAA,CADI,KACJ,CADI,OAAA;;AAExB,MAAA,KAAA,CAAA,QAAA,CAAc;AAAE7D,QAAAA,OAAO,EAAE;AAAX,OAAd;;AACA,UAAA,OAAA,EAAa;AACT6D,QAAAA,OAAO,CAAPA,KAAAA,CAAAA,KAAAA,CAAAA,EAAAA,SAAAA;AACH;AALL,KAAA;;AAOA,IAAA,KAAA,CAAA,MAAA,GAAc,YAAa;AAAA,UACfC,MADe,GACJ,KAAA,CADI,KACJ,CADI,MAAA;;AAEvB,MAAA,KAAA,CAAA,QAAA,CAAc;AAAE9D,QAAAA,OAAO,EAAE;AAAX,OAAd;;AACA,MAAA,KAAA,CAAA,cAAA,CAAA,IAAA;;AACA,UAAA,MAAA,EAAY;AACR8D,QAAAA,MAAM,CAANA,KAAAA,CAAAA,KAAAA,CAAAA,EAAAA,SAAAA;AACH;AANL,KAAA;;AAQA,IAAA,KAAA,CAAA,wBAAA,GAAgC,YAAM;AAAA,UAAA,YAAA,GACyG,KAAA,CADzG,KAAA;AAAA,UAC1BrE,YAD0B,GAAA,YAAA,CAAA,YAAA;AAAA,UACZL,YADY,GAAA,YAAA,CAAA,YAAA;AAAA,UACEG,UADF,GAAA,YAAA,CAAA,UAAA;AAAA,UACcC,WADd,GAAA,YAAA,CAAA,WAAA;AAAA,UAC2BH,WAD3B,GAAA,YAAA,CAAA,WAAA;AAAA,UACwCC,eADxC,GAAA,YAAA,CAAA,eAAA;AAAA,UACyDM,eADzD,GAAA,YAAA,CAAA,eAAA;AAAA,UAC0EC,YAD1E,GAAA,YAAA,CAAA,YAAA;AAAA,UACwFV,WADxF,GAAA,YAAA,CAAA,WAAA;AAElC,aAAO;AACHM,QAAAA,YAAY,EAAEA,YAAY,IADvB,EAAA;AAEHL,QAAAA,YAAY,EAAEA,YAAY,IAFvB,EAAA;AAGHG,QAAAA,UAAU,EAAEA,UAAU,IAHnB,EAAA;AAIHC,QAAAA,WAAW,EAAEA,WAAW,IAJrB,EAAA;AAKHH,QAAAA,WAAW,EAAEA,WAAW,IALrB,EAAA;AAMHC,QAAAA,eAAe,EAAEA,eAAe,IAN7B,EAAA;AAOHM,QAAAA,eAAe,EAPZ,eAAA;AAQHC,QAAAA,YAAY,EART,YAAA;AASHV,QAAAA,WAAW,EAAXA;AATG,OAAP;AAjYM,KA+XV,CA/XU,CA6YV;;;AACA,IAAA,KAAA,CAAA,cAAA,GAAsB,UAAA,SAAA,EAAe;AAAA,UACzB4E,cADyB,GACN,KAAA,CADM,KACN,CADM,cAAA;;AAEjC,MAAA,KAAA,CAAA,QAAA,CAAc;AAAE9D,QAAAA,SAAS,EAATA;AAAF,OAAd;;AACA,UAAIA,SAAS,KAAb,IAAA,EAAwB;AACpB,QAAA,KAAA,CAAA,QAAA,CAAc;AAAE2B,UAAAA,GAAG,EAAE3B;AAAP,SAAd;AACH;;AACD,UAAA,cAAA,EAAoB;AAChB8D,QAAAA,cAAc,CAAdA,SAAc,CAAdA;AACH;AARL,KAAA;;AAUA,IAAA,KAAA,CAAA,aAAA,GAAqB,YAAM;AAAA,UAAA,YAAA,GACa,KAAA,CADb,KAAA;AAAA,UACf9D,SADe,GAAA,YAAA,CAAA,SAAA;AAAA,UACJF,YADI,GAAA,YAAA,CAAA,YAAA;;AAEvB,UAAIE,SAAS,KAAb,IAAA,EAAwB;AACpB,eAAA,IAAA;AACH;;AACD,aAAO,YAAY,CAAZ,IAAA,CAAkB,UAAA,KAAA,EAAA;AAAA,YAAW2B,GAAX,GAAA,KAAA,CAAA,IAAA,CAAA,GAAA;AAAA,eAAuBA,GAAG,KAA1B,SAAA;AAAlB,OAAA,KAAP,IAAA;AALJ,KAAA;;AAOA,IAAA,KAAA,CAAA,eAAA,GAAuB,UAAA,MAAA,EAAY;AAAA,UAAA,YAAA,GACK,KAAA,CADL,KAAA;AAAA,UACvB7B,YADuB,GAAA,YAAA,CAAA,YAAA;AAAA,UACTE,SADS,GAAA,YAAA,CAAA,SAAA;AAE/B,UAAIqD,KAAK,GAAG,YAAY,CAAZ,SAAA,CAAuB,UAAA,KAAA,EAAA;AAAA,YAAW1B,GAAX,GAAA,KAAA,CAAA,IAAA,CAAA,GAAA;AAAA,eAAuBA,GAAG,KAA1B,SAAA;AAFJ,OAEnB,CAAZ,CAF+B,CAG/B;;AACA,UAAI0B,KAAK,KAAK,CAAVA,CAAAA,IAAgBU,MAAM,GAA1B,CAAA,EAAgC;AAC5BV,QAAAA,KAAK,GAAGvD,YAAY,CAApBuD,MAAAA;AACH;;AACDA,MAAAA,KAAK,GAAG,CAACA,KAAK,GAALA,MAAAA,GAAiBvD,YAAY,CAA9B,MAAA,IAAyCA,YAAY,CAA7DuD,MAAAA;AACA,UAAMW,IAAI,GAAGlE,YAAY,CAAzB,KAAyB,CAAzB;;AACA,UAAA,IAAA,EAAU;AAAA,YACE6B,GADF,GACUqC,IAAI,CADd,IACUA,CADV,GAAA;;AAEN,QAAA,KAAA,CAAA,cAAA,CAAA,GAAA;AAFJ,OAAA,MAIK;AACD,QAAA,KAAA,CAAA,cAAA,CAAA,IAAA;AACH;AAfL,KAAA;;AAiBA,IAAA,KAAA,CAAA,SAAA,GAAiB,UAAA,KAAA,EAAS;AAAA,UAAA,YAAA,GAC2B,KAAA,CAD3B,KAAA;AAAA,UACdhE,SADc,GAAA,YAAA,CAAA,SAAA;AAAA,UACHR,YADG,GAAA,YAAA,CAAA,YAAA;AAAA,UACWJ,WADX,GAAA,YAAA,CAAA,WAAA;AAAA,UAAA,YAAA,GAEuB,KAAA,CAFvB,KAAA;AAAA,UAEd6E,SAFc,GAAA,YAAA,CAAA,SAAA;AAAA,UAEHC,SAFG,GAAA,YAAA,CAAA,SAAA;AAAA,UAEQC,UAFR,GAAA,YAAA,CAAA,UAAA,CAAA,CAGtB;;AACA,cAAQ9D,KAAK,CAAb,KAAA;AACI,aAAK+D,QAAAA,CAAAA,SAAAA,CAAAA,CAAL,EAAA;AAAiB;AACb,YAAA,KAAA,CAAA,eAAA,CAAqB,CAArB,CAAA;;AACA/D,YAAAA,KAAK,CAALA,cAAAA;AACA;AACH;;AACD,aAAK+D,QAAAA,CAAAA,SAAAA,CAAAA,CAAL,IAAA;AAAmB;AACf,YAAA,KAAA,CAAA,eAAA,CAAA,CAAA;;AACA/D,YAAAA,KAAK,CAALA,cAAAA;AACA;AACH;AAVL,OAJsB,CAgBtB;;;AACA,UAAMgE,UAAU,GAAG,KAAA,CAAnB,aAAmB,EAAnB;;AACA,UAAIA,UAAU,IAAIA,UAAU,CAA5B,IAAA,EAAmC;AAC/B,YAAMC,qBAAqB,GAAG,KAAA,CAA9B,wBAA8B,EAA9B;;AACA,YAAMC,UAAU,GAAGF,UAAU,CAAVA,IAAAA,CAAAA,MAAAA,KAAAA,KAAAA,IACf,CAAC,CAAC,CAACA,UAAU,CAAVA,IAAAA,CAAAA,QAAAA,IAAD,EAAA,EADN,MAAA;AAEA,YAAMG,SAAS,GAAG,CAAA,GAAA,SAAA,CAAA,2BAAA,EAAA,CAAA,GAAA,cAAA,CAAA,SAAA,CAAA,EAAA,EAAA,EACX,CAAA,GAAA,SAAA,CAAA,gBAAA,EAAA,SAAA,EADW,qBACX,CADW,EAAA;AAEdC,UAAAA,IAAI,EAAEJ,UAAU,CAFF,IAAA;AAGdK,UAAAA,MAAM,EAAE;AAHM,SAAA,CAAA,CAAlB;;AAKA,gBAAQrE,KAAK,CAAb,KAAA;AACI;AACA,eAAK+D,QAAAA,CAAAA,SAAAA,CAAAA,CAAL,IAAA;AAAmB;AACf;AACA,kBAAIG,UAAU,IAAI/E,YAAY,CAAZA,QAAAA,CAAlB,SAAkBA,CAAlB,EAAoD;AAChD,gBAAA,KAAA,CAAA,YAAA,CAAA,EAAA,EAAA,SAAA;AADJ,eAAA,MAGK,IAAI6E,UAAU,CAAd,MAAA,EAAuB;AACxB,gBAAA,KAAA,CAAA,cAAA,CAAoBA,UAAU,CAAVA,MAAAA,CAAAA,IAAAA,CAApB,GAAA;AACH;;AACDhE,cAAAA,KAAK,CAALA,cAAAA;AACA;AACH;;AACD,eAAK+D,QAAAA,CAAAA,SAAAA,CAAAA,CAAL,KAAA;AAAoB;AAChB;AACA,kBAAIG,UAAU,IAAI,CAAC/E,YAAY,CAAZA,QAAAA,CAAnB,SAAmBA,CAAnB,EAAqD;AACjD,gBAAA,KAAA,CAAA,YAAA,CAAA,EAAA,EAAA,SAAA;AADJ,eAAA,MAGK,IAAI6E,UAAU,CAAVA,QAAAA,IAAuBA,UAAU,CAAVA,QAAAA,CAA3B,MAAA,EAAuD;AACxD,gBAAA,KAAA,CAAA,cAAA,CAAoBA,UAAU,CAAVA,QAAAA,CAAAA,CAAAA,EAAAA,IAAAA,CAApB,GAAA;AACH;;AACDhE,cAAAA,KAAK,CAALA,cAAAA;AACA;AACH;AACD;;AACA,eAAK+D,QAAAA,CAAAA,SAAAA,CAAAA,CAAL,KAAA;AACA,eAAKA,QAAAA,CAAAA,SAAAA,CAAAA,CAAL,KAAA;AAAoB;AAChB,kBAAIF,SAAS,IACT,CAACM,SAAS,CADVN,QAAAA,IAEAM,SAAS,CAATA,SAAAA,KAFAN,KAAAA,IAGA,CAACM,SAAS,CAHd,eAAA,EAGgC;AAC5B,gBAAA,KAAA,CAAA,WAAA,CAAA,EAAA,EAAA,SAAA,EAAgC,CAACpF,WAAW,CAAXA,QAAAA,CAAjC,SAAiCA,CAAjC;AAJJ,eAAA,MAMK,IAAI,CAAA,SAAA,IAAA,UAAA,IAEL,CAACoF,SAAS,CAFL,QAAA,IAGLA,SAAS,CAATA,UAAAA,KAHC,KAAA,EAG+B;AAChC,gBAAA,KAAA,CAAA,YAAA,CAAA,EAAA,EAAA,SAAA;AACH;;AACD;AACH;AAxCL;AA0CH;;AACD,UAAA,SAAA,EAAe;AACXP,QAAAA,SAAS,CAATA,KAAS,CAATA;AACH;AAxEL,KAAA;AA0EA;;;;;AAGA,IAAA,KAAA,CAAA,oBAAA,GAA4B,UAAA,KAAA,EAA2B;AAAA,UAAnBU,MAAmB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAV,KAAU;AACnD,UAAIC,QAAQ,GAAZ,KAAA;AACA,UAAIC,SAAS,GAAb,IAAA;AACA,UAAMC,QAAQ,GAAd,EAAA;AACArE,MAAAA,MAAM,CAANA,IAAAA,CAAAA,KAAAA,EAAAA,OAAAA,CAA2B,UAAA,IAAA,EAAQ;AAC/B,YAAIsE,IAAI,IAAI,KAAA,CAAZ,KAAA,EAAwB;AACpBF,UAAAA,SAAS,GAATA,KAAAA;AACA;AACH;;AACDD,QAAAA,QAAQ,GAARA,IAAAA;AACAE,QAAAA,QAAQ,CAARA,IAAQ,CAARA,GAAiBE,KAAK,CAAtBF,IAAsB,CAAtBA;AANJrE,OAAAA;;AAQA,UAAImE,QAAQ,KAAK,CAAA,MAAA,IAAjB,SAAY,CAAZ,EAAwC;AACpC,QAAA,KAAA,CAAA,QAAA,CAAA,QAAA;AACH;AAdL,KAAA;;AAgBA,IAAA,KAAA,CAAA,QAAA,GAAgB,UAAA,MAAA,EAAU;AACtB,MAAA,KAAA,CAAA,OAAA,CAAA,OAAA,CAAA,QAAA,CAAA,MAAA;AADJ,KAAA;;AA7gBU,WAAA,KAAA;AAghBb;;;;6BA4GQ;AAAA,UAAA,WAAA;;AAAA,UAAA,aAAA,GACgE,KADhE,KAAA;AAAA,UACG7E,OADH,GAAA,aAAA,CAAA,OAAA;AAAA,UACYD,YADZ,GAAA,aAAA,CAAA,YAAA;AAAA,UAC0BZ,WAD1B,GAAA,aAAA,CAAA,WAAA;AAAA,UACuCO,QADvC,GAAA,aAAA,CAAA,QAAA;AAAA,UACiDO,SADjD,GAAA,aAAA,CAAA,SAAA;AAAA,UAAA,YAAA,GAE+N,KAF/N,KAAA;AAAA,UAEG0F,SAFH,GAAA,YAAA,CAAA,SAAA;AAAA,UAEcC,SAFd,GAAA,YAAA,CAAA,SAAA;AAAA,UAEyBC,KAFzB,GAAA,YAAA,CAAA,KAAA;AAAA,UAEgCC,QAFhC,GAAA,YAAA,CAAA,QAAA;AAAA,UAE0CC,SAF1C,GAAA,YAAA,CAAA,SAAA;AAAA,UAAA,qBAAA,GAAA,YAAA,CAAA,QAAA;AAAA,UAEqDC,QAFrD,GAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,CAAA,GAAA,qBAAA;AAAA,UAEmE5B,UAFnE,GAAA,YAAA,CAAA,UAAA;AAAA,UAE+E6B,QAF/E,GAAA,YAAA,CAAA,QAAA;AAAA,UAEyFC,IAFzF,GAAA,YAAA,CAAA,IAAA;AAAA,UAE+FC,YAF/F,GAAA,YAAA,CAAA,YAAA;AAAA,UAE6GC,SAF7G,GAAA,YAAA,CAAA,SAAA;AAAA,UAEwHjC,SAFxH,GAAA,YAAA,CAAA,SAAA;AAAA,UAEmI/B,aAFnI,GAAA,YAAA,CAAA,aAAA;AAAA,UAEkJiE,QAFlJ,GAAA,YAAA,CAAA,QAAA;AAAA,UAE4JC,MAF5J,GAAA,YAAA,CAAA,MAAA;AAAA,UAEoK1D,QAFpK,GAAA,YAAA,CAAA,QAAA;AAAA,UAE8K2D,cAF9K,GAAA,YAAA,CAAA,cAAA;AAAA,UAE8LC,MAF9L,GAAA,YAAA,CAAA,MAAA;AAAA,UAEsMC,UAFtM,GAAA,YAAA,CAAA,UAAA;AAAA,UAEkNC,OAFlN,GAAA,YAAA,CAAA,OAAA;AAGL,UAAMC,QAAQ,GAAG,CAAA,GAAA,KAAA,CAAA,cAAA,EAAe,KAAhC,KAAiB,CAAjB;AACA,aAAQ,KAAK,CAAL,aAAA,CAAoBC,aAAAA,CAAAA,WAAAA,CAApB,QAAA,EAA0C;AAAEC,QAAAA,KAAK,EAAE;AACnDlB,UAAAA,SAAS,EAD0C,SAAA;AAEnDvB,UAAAA,UAAU,EAFyC,UAAA;AAGnD6B,UAAAA,QAAQ,EAH2C,QAAA;AAInDC,UAAAA,IAAI,EAJ+C,IAAA;AAKnDC,UAAAA,YAAY,EALuC,YAAA;AAMnDC,UAAAA,SAAS,EAN0C,SAAA;AAOnDjC,UAAAA,SAAS,EAP0C,SAAA;AAQnD/B,UAAAA,aAAa,EARsC,aAAA;AASnDiE,UAAAA,QAAQ,EAT2C,QAAA;AAUnDlH,UAAAA,WAAW,EAVwC,WAAA;AAWnDyD,UAAAA,QAAQ,EAX2C,QAAA;AAYnD2D,UAAAA,cAAc,EAZqC,cAAA;AAanDO,UAAAA,WAAW,EAAE,KAbsC,WAAA;AAcnDC,UAAAA,iBAAiB,EAAE,KAdgC,iBAAA;AAenDC,UAAAA,YAAY,EAAE,KAfqC,YAAA;AAgBnDC,UAAAA,YAAY,EAAE,KAhBqC,YAAA;AAiBnDC,UAAAA,WAAW,EAAE,KAjBsC,WAAA;AAkBnDC,UAAAA,UAAU,EAAE,KAlBuC,UAAA;AAmBnDC,UAAAA,gBAAgB,EAAE,KAnBiC,gBAAA;AAoBnDC,UAAAA,gBAAgB,EAAE,KApBiC,gBAAA;AAqBnDC,UAAAA,iBAAiB,EAAE,KArBgC,iBAAA;AAsBnDC,UAAAA,eAAe,EAAE,KAtBkC,eAAA;AAuBnDC,UAAAA,eAAe,EAAE,KAvBkC,eAAA;AAwBnDC,UAAAA,cAAc,EAAE,KAxBmC,cAAA;AAyBnDC,UAAAA,eAAe,EAAE,KAzBkC,eAAA;AA0BnDC,UAAAA,aAAa,EAAE,KA1BoC,aAAA;AA2BnDC,UAAAA,UAAU,EAAE,KAAKA;AA3BkC;AAAT,OAA1C,EA6BJ,KAAK,CAAL,aAAA,CAAA,KAAA,EAA2B;AAAEhC,QAAAA,SAAS,EAAE,CAAA,GAAA,WAAA,CAAA,SAAA,CAAA,EAAA,SAAA,EAAA,SAAA,GAAA,WAAA,GAAA,EAAA,EAAA,CAAA,GAAA,gBAAA,CAAA,SAAA,CAAA,EAAA,WAAA,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,YAAA,CAAA,EAAA,QAAA,CAAA,EAAA,CAAA,GAAA,gBAAA,CAAA,SAAA,CAAA,EAAA,WAAA,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,UAAA,CAAA,EAAA,OAAA,CAAA,EAAA,CAAA,GAAA,gBAAA,CAAA,SAAA,CAAA,EAAA,WAAA,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,iBAAA,CAAA,EAGC3F,SAAS,KAHV,IAAA,CAAA,EAAA,WAAA;AAAb,OAA3B,EAKIhB,KAAK,CAALA,aAAAA,CAAoB4I,SAAAA,CAApB5I,SAAoB4I,CAApB5I,EAA8B,CAAA,GAAA,SAAA,CAAA,SAAA,CAAA,EAAc;AAAE6I,QAAAA,GAAG,EAAE,KAAP,OAAA;AAAqBnC,QAAAA,SAAS,EAA9B,SAAA;AAA2CE,QAAAA,KAAK,EAAhD,KAAA;AAAyDnB,QAAAA,IAAI,EAA7D,YAAA;AAA6E2B,QAAAA,QAAQ,EAArF,QAAA;AAAiGjC,QAAAA,UAAU,EAA3G,UAAA;AAAyHD,QAAAA,SAAS,EAAEA,SAAS,GAAA,CAAA,GAA7I,CAAA;AAAuJmC,QAAAA,MAAM,EAA7J,MAAA;AAAuK5G,QAAAA,QAAQ,EAA/K,QAAA;AAA2L8G,QAAAA,MAAM,EAAjM,MAAA;AAA2MC,QAAAA,UAAU,EAArN,UAAA;AAAmOC,QAAAA,OAAO,EAA1O,OAAA;AAAqPX,QAAAA,SAAS,EAA9P,SAAA;AAA2Q/F,QAAAA,OAAO,EAAlR,OAAA;AAA6RgG,QAAAA,QAAQ,EAArS,QAAA;AAAiT1B,QAAAA,UAAU,EAAE,KAA7T,aAA6T,EAA7T;AAAmVT,QAAAA,OAAO,EAAE,KAA5V,OAAA;AAA0WC,QAAAA,MAAM,EAAE,KAAlX,MAAA;AAA+XI,QAAAA,SAAS,EAAE,KAA1Y,SAAA;AAA0ZH,QAAAA,cAAc,EAAE,KAAKA;AAA/a,OAAd,EAA+c,KAA/c,wBAA+c,EAA/c,EAlCtC,QAkCsC,CAA9B9E,CALJ,CA7BI,CAAR;AAmCH;;;6CAlJ+BiG,K,EAAOC,S,EAAW;AAAA,UACtCjF,SADsC,GACxBiF,SADwB,CAAA,SAAA;AAE9C,UAAMJ,QAAQ,GAAG;AACb7E,QAAAA,SAAS,EAAEgF;AADE,OAAjB;;AAGA,eAAA,QAAA,CAAA,IAAA,EAAwB;AACpB,eAAS,CAAA,SAAA,IAAcF,IAAI,IAAnB,KAAC,IACJ9E,SAAS,IAAIA,SAAS,CAATA,IAAS,CAATA,KAAoBgF,KAAK,CAD3C,IAC2C,CAD3C;AAN0C,OAAA,CAS9C;;;AACA,UAV8C,QAU9C,CAV8C,CAW9C;;AACA,UAAIL,QAAQ,CAAZ,UAAY,CAAZ,EAA0B;AACnB/E,QAAAA,QADmB,GACNoF,KADM,CAAA,QACnBpF;AADP,OAAA,MAGK,IAAI+E,QAAQ,CAAZ,UAAY,CAAZ,EAA0B;AAC3B;;;AAGA;AACA;AACA;AACA;AACA/E,QAAAA,QAAQ,GAAG,CAAA,GAAA,SAAA,CAAA,iBAAA,EAAkBoF,KAAK,CAAlCpF,QAAW,CAAXA;AAvB0C,OAAA,CAyB9C;;;AACA,UAAA,QAAA,EAAc;AACViF,QAAAA,QAAQ,CAARA,QAAAA,GAAAA,QAAAA;AACA,YAAMK,WAAW,GAAG,CAAA,GAAA,SAAA,CAAA,qBAAA,EAApB,QAAoB,CAApB;AACAL,QAAAA,QAAQ,CAARA,WAAAA,GAAAA,CAAAA,GAAAA,cAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAAA,GAAAA,gBAAAA,CAAAA,SAAAA,CAAAA,EAAAA,EAAAA,EACKM,SAAAA,CADLN,UAAAA,EACkBO,SAAAA,CADlBP,YAAAA,CAAAA,EAEOK,WAAW,CALR,WAGVL,CAAAA,CAHU,CAOV;;AACA,YAAIQ,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAAJ,YAAA,EAA2C;AACvC,WAAA,GAAA,SAAA,CAAA,iBAAA,EAAA,QAAA;AACH;AACJ;;AACD,UAAMpG,WAAW,GAAG4F,QAAQ,CAARA,WAAAA,IAAwBI,SAAS,CAtCP,WAsC9C,CAtC8C,CAuC9C;;AACA,UAAIN,QAAQ,CAARA,cAAQ,CAARA,IACC3E,SAAS,IAAI2E,QAAQ,CAD1B,kBAC0B,CAD1B,EACiD;AAC7CE,QAAAA,QAAQ,CAARA,YAAAA,GACIG,KAAK,CAALA,gBAAAA,IAA2B,CAAA,SAAA,IAAcA,KAAK,CAA9CA,mBAAAA,GACM,CAAA,GAAA,KAAA,CAAA,mBAAA,EAAoBA,KAAK,CAAzB,YAAA,EADNA,WACM,CADNA,GAEMA,KAAK,CAHfH,YAAAA;AAFJ,OAAA,MAOK,IAAI,CAAA,SAAA,IAAcG,KAAK,CAAvB,gBAAA,EAA0C;AAC3C,YAAMM,gBAAgB,GAAA,CAAA,GAAA,cAAA,CAAA,SAAA,CAAA,EAAA,EAAA,EAAtB,WAAsB,CAAtB;AACA,eAAOA,gBAAgB,CAACH,SAAAA,CAAxB,UAAuB,CAAvB;AACAN,QAAAA,QAAQ,CAARA,YAAAA,GAAwB,MAAM,CAAN,IAAA,CAAA,gBAAA,EAAA,GAAA,CAAkC,UAAA,GAAA,EAAG;AAAA,iBAAIS,gBAAgB,CAAhBA,GAAgB,CAAhBA,CAAJ,GAAA;AAA7DT,SAAwB,CAAxBA;AAHC,OAAA,MAKA,IAAI,CAAA,SAAA,IAAcG,KAAK,CAAvB,mBAAA,EAA6C;AAC9CH,QAAAA,QAAQ,CAARA,YAAAA,GACIG,KAAK,CAALA,gBAAAA,IAA0BA,KAAK,CAA/BA,mBAAAA,GACM,CAAA,GAAA,KAAA,CAAA,mBAAA,EAAoBA,KAAK,CAAzB,mBAAA,EADNA,WACM,CADNA,GAEMA,KAAK,CAHfH,mBAAAA;AAIH;;AACD,UAAI,CAACA,QAAQ,CAAb,YAAA,EAA4B;AACxB,eAAOA,QAAQ,CAAf,YAAA;AA3D0C,OAAA,CA6D9C;;;AACA,UAAIjF,QAAQ,IAAIiF,QAAQ,CAAxB,YAAA,EAAuC;AACnC,YAAMhF,YAAY,GAAG,CAAA,GAAA,SAAA,CAAA,eAAA,EAAgBD,QAAQ,IAAIqF,SAAS,CAArC,QAAA,EAAgDJ,QAAQ,CAARA,YAAAA,IAAyBI,SAAS,CAAvG,YAAqB,CAArB;AACAJ,QAAAA,QAAQ,CAARA,YAAAA,GAAAA,YAAAA;AAhE0C,OAAA,CAkE9C;;;AACA,UAAIG,KAAK,CAAT,UAAA,EAAsB;AAClB,YAAIL,QAAQ,CAAZ,cAAY,CAAZ,EAA8B;AAC1BE,UAAAA,QAAQ,CAARA,YAAAA,GAAwB,CAAA,GAAA,KAAA,CAAA,gBAAA,EAAiBG,KAAK,CAAtB,YAAA,EAAxBH,KAAwB,CAAxBA;AADJ,SAAA,MAGK,IAAI,CAAA,SAAA,IAAcG,KAAK,CAAvB,mBAAA,EAA6C;AAC9CH,UAAAA,QAAQ,CAARA,YAAAA,GAAwB,CAAA,GAAA,KAAA,CAAA,gBAAA,EAAiBG,KAAK,CAAtB,mBAAA,EAAxBH,KAAwB,CAAxBA;AACH;AAzEyC,OAAA,CA2E9C;;;AACA,UAAIG,KAAK,CAAT,SAAA,EAAqB;AACjB,YAAA,gBAAA;;AACA,YAAIL,QAAQ,CAAZ,aAAY,CAAZ,EAA6B;AACzBY,UAAAA,gBAAgB,GAAG,CAAA,GAAA,KAAA,CAAA,gBAAA,EAAiBP,KAAK,CAAtB,WAAA,KAAnBO,EAAAA;AADJ,SAAA,MAGK,IAAI,CAAA,SAAA,IAAcP,KAAK,CAAvB,kBAAA,EAA4C;AAC7CO,UAAAA,gBAAgB,GAAG,CAAA,GAAA,KAAA,CAAA,gBAAA,EAAiBP,KAAK,CAAtB,kBAAA,KAAnBO,EAAAA;AADC,SAAA,MAGA,IAAA,QAAA,EAAc;AACf;AACAA,UAAAA,gBAAgB,GAAG,CAAA,GAAA,KAAA,CAAA,gBAAA,EAAiBP,KAAK,CAAtB,WAAA,KAAuC;AACtD7F,YAAAA,WAAW,EAAE8F,SAAS,CADgC,WAAA;AAEtD7F,YAAAA,eAAe,EAAE6F,SAAS,CAAC7F;AAF2B,WAA1DmG;AAIH;;AACD,YAAA,gBAAA,EAAsB;AAAA,cAAA,iBAAA,GAAA,gBAAA;AAAA,cAAA,qBAAA,GAAA,iBAAA,CAAA,WAAA;AAAA,cACZpG,WADY,GAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,qBAAA;AAAA,cAAA,qBAAA,GAAA,iBAAA,CAAA,eAAA;AAAA,cACMC,eADN,GAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,qBAAA;;AAElB,cAAI,CAAC4F,KAAK,CAAV,aAAA,EAA0B;AACtB,gBAAMQ,WAAW,GAAG,CAAA,GAAA,YAAA,CAAA,YAAA,EAAA,WAAA,EAAA,IAAA,EAApB,WAAoB,CAApB;AACGrG,YAAAA,WAFmB,GAEcqG,WAFd,CAAA,WAEnBrG;AAAaC,YAAAA,eAFM,GAEcoG,WAFd,CAAA,eAENpG;AACnB;;AACDyF,UAAAA,QAAQ,CAARA,WAAAA,GAAAA,WAAAA;AACAA,UAAAA,QAAQ,CAARA,eAAAA,GAAAA,eAAAA;AACH;AAnGyC,OAAA,CAqG9C;;;AACA,UAAIF,QAAQ,CAAZ,YAAY,CAAZ,EAA4B;AACxBE,QAAAA,QAAQ,CAARA,UAAAA,GAAsBG,KAAK,CAA3BH,UAAAA;AACH;;AACD,aAAA,QAAA;AACH;;;EA5nBc9F,KAAK,CAACC,S;;AAsqBzBF,IAAI,CAAJA,SAAAA,GAAiB;AACb2G,EAAAA,SAAS,EAAE5G,UAAAA,CAAAA,SAAAA,CAAAA,CADE,MAAA;AAEb6G,EAAAA,SAAS,EAAE7G,UAAAA,CAAAA,SAAAA,CAAAA,CAFE,MAAA;AAGb8G,EAAAA,KAAK,EAAE9G,UAAAA,CAAAA,SAAAA,CAAAA,CAHM,MAAA;AAIbiH,EAAAA,QAAQ,EAAEjH,UAAAA,CAAAA,SAAAA,CAAAA,CAAAA,SAAAA,CAAoB,CAACA,UAAAA,CAAAA,SAAAA,CAAAA,CAAD,MAAA,EAAmBA,UAAAA,CAAAA,SAAAA,CAAAA,CAJpC,MAIiB,CAApBA,CAJG;AAKbgJ,EAAAA,QAAQ,EAAEhJ,UAAAA,CAAAA,SAAAA,CAAAA,CALG,GAAA;AAMbe,EAAAA,QAAQ,EAAEf,UAAAA,CAAAA,SAAAA,CAAAA,CANG,KAAA;AAOb+G,EAAAA,QAAQ,EAAE/G,UAAAA,CAAAA,SAAAA,CAAAA,CAPG,IAAA;AAQbkH,EAAAA,QAAQ,EAAElH,UAAAA,CAAAA,SAAAA,CAAAA,CARG,IAAA;AASbmH,EAAAA,IAAI,EAAEnH,UAAAA,CAAAA,SAAAA,CAAAA,CAAAA,SAAAA,CAAoB,CAACA,UAAAA,CAAAA,SAAAA,CAAAA,CAAD,IAAA,EAAiBA,UAAAA,CAAAA,SAAAA,CAAAA,CAT9B,IASa,CAApBA,CATO;AAUbqF,EAAAA,UAAU,EAAErF,UAAAA,CAAAA,SAAAA,CAAAA,CAVC,IAAA;AAWbsH,EAAAA,QAAQ,EAAEtH,UAAAA,CAAAA,SAAAA,CAAAA,CAXG,IAAA;AAYb2C,EAAAA,QAAQ,EAAE3C,UAAAA,CAAAA,SAAAA,CAAAA,CAZG,IAAA;AAaboF,EAAAA,SAAS,EAAEpF,UAAAA,CAAAA,SAAAA,CAAAA,CAAAA,SAAAA,CAAoB,CAACA,UAAAA,CAAAA,SAAAA,CAAAA,CAAD,IAAA,EAAiBA,UAAAA,CAAAA,SAAAA,CAAAA,CAbnC,IAakB,CAApBA,CAbE;AAcbqD,EAAAA,aAAa,EAAErD,UAAAA,CAAAA,SAAAA,CAAAA,CAdF,IAAA;AAebqH,EAAAA,SAAS,EAAErH,UAAAA,CAAAA,SAAAA,CAAAA,CAfE,IAAA;AAgBbiJ,EAAAA,mBAAmB,EAAEjJ,UAAAA,CAAAA,SAAAA,CAAAA,CAhBR,IAAA;AAiBbkJ,EAAAA,gBAAgB,EAAElJ,UAAAA,CAAAA,SAAAA,CAAAA,CAjBL,IAAA;AAkBbmJ,EAAAA,gBAAgB,EAAEnJ,UAAAA,CAAAA,SAAAA,CAAAA,CAlBL,IAAA;AAmBboJ,EAAAA,mBAAmB,EAAEpJ,UAAAA,CAAAA,SAAAA,CAAAA,CAAAA,OAAAA,CAnBR,WAmBQA,CAnBR;AAoBbU,EAAAA,YAAY,EAAEV,UAAAA,CAAAA,SAAAA,CAAAA,CAAAA,OAAAA,CApBD,WAoBCA,CApBD;AAqBbqJ,EAAAA,kBAAkB,EAAErJ,UAAAA,CAAAA,SAAAA,CAAAA,CAAAA,OAAAA,CArBP,WAqBOA,CArBP;AAsBbM,EAAAA,WAAW,EAAEN,UAAAA,CAAAA,SAAAA,CAAAA,CAAAA,SAAAA,CAAoB,CAC7BA,UAAAA,CAAAA,SAAAA,CAAAA,CAAAA,OAAAA,CAD6B,WAC7BA,CAD6B,EAE7BA,UAAAA,CAAAA,SAAAA,CAAAA,CAxBS,MAsBoB,CAApBA,CAtBA;AA0BbsJ,EAAAA,mBAAmB,EAAEtJ,UAAAA,CAAAA,SAAAA,CAAAA,CAAAA,OAAAA,CA1BR,WA0BQA,CA1BR;AA2BbK,EAAAA,YAAY,EAAEL,UAAAA,CAAAA,SAAAA,CAAAA,CAAAA,OAAAA,CA3BD,WA2BCA,CA3BD;AA4BbwC,EAAAA,OAAO,EAAExC,UAAAA,CAAAA,SAAAA,CAAAA,CA5BI,IAAA;AA6BbyC,EAAAA,aAAa,EAAEzC,UAAAA,CAAAA,SAAAA,CAAAA,CA7BF,IAAA;AA8BbqE,EAAAA,QAAQ,EAAErE,UAAAA,CAAAA,SAAAA,CAAAA,CA9BG,IAAA;AA+BbsD,EAAAA,OAAO,EAAEtD,UAAAA,CAAAA,SAAAA,CAAAA,CA/BI,IAAA;AAgCb0C,EAAAA,QAAQ,EAAE1C,UAAAA,CAAAA,SAAAA,CAAAA,CAhCG,IAAA;AAiCb8D,EAAAA,MAAM,EAAE9D,UAAAA,CAAAA,SAAAA,CAAAA,CAjCK,IAAA;AAkCb6D,EAAAA,QAAQ,EAAE7D,UAAAA,CAAAA,SAAAA,CAAAA,CAlCG,IAAA;AAmCbQ,EAAAA,UAAU,EAAER,UAAAA,CAAAA,SAAAA,CAAAA,CAAAA,OAAAA,CAnCC,WAmCDA,CAnCC;AAoCb2E,EAAAA,YAAY,EAAE3E,UAAAA,CAAAA,SAAAA,CAAAA,CApCD,IAAA;AAqCb4E,EAAAA,YAAY,EAAE5E,UAAAA,CAAAA,SAAAA,CAAAA,CArCD,IAAA;AAsCb6E,EAAAA,YAAY,EAAE7E,UAAAA,CAAAA,SAAAA,CAAAA,CAtCD,IAAA;AAuCboB,EAAAA,WAAW,EAAEpB,UAAAA,CAAAA,SAAAA,CAAAA,CAvCA,IAAA;AAwCbwB,EAAAA,WAAW,EAAExB,UAAAA,CAAAA,SAAAA,CAAAA,CAxCA,IAAA;AAyCb+B,EAAAA,UAAU,EAAE/B,UAAAA,CAAAA,SAAAA,CAAAA,CAzCC,IAAA;AA0CbgC,EAAAA,WAAW,EAAEhC,UAAAA,CAAAA,SAAAA,CAAAA,CA1CA,IAAA;AA2CbiC,EAAAA,SAAS,EAAEjC,UAAAA,CAAAA,SAAAA,CAAAA,CA3CE,IAAA;AA4CbkC,EAAAA,MAAM,EAAElC,UAAAA,CAAAA,SAAAA,CAAAA,CA5CK,IAAA;AA6CbwH,EAAAA,cAAc,EAAExH,UAAAA,CAAAA,SAAAA,CAAAA,CA7CH,IAAA;AA8CbuH,EAAAA,MAAM,EAAEvH,UAAAA,CAAAA,SAAAA,CAAAA,CA9CK,MAAA;AA+CboH,EAAAA,YAAY,EAAEpH,UAAAA,CAAAA,SAAAA,CAAAA,CAAAA,SAAAA,CAAoB,CAACA,UAAAA,CAAAA,SAAAA,CAAAA,CAAD,IAAA,EAAiBA,UAAAA,CAAAA,SAAAA,CAAAA,CAArCA,IAAoB,CAApBA;AA/CD,CAAjBC;AAiDAA,IAAI,CAAJA,YAAAA,GAAoB;AAChB2G,EAAAA,SAAS,EADO,SAAA;AAEhBG,EAAAA,QAAQ,EAFQ,KAAA;AAGhBG,EAAAA,QAAQ,EAHQ,IAAA;AAIhB7B,EAAAA,UAAU,EAJM,IAAA;AAKhB1C,EAAAA,QAAQ,EALQ,KAAA;AAMhByC,EAAAA,SAAS,EANO,KAAA;AAOhBkC,EAAAA,QAAQ,EAPQ,KAAA;AAQhBjE,EAAAA,aAAa,EARG,KAAA;AAShBgE,EAAAA,SAAS,EATO,KAAA;AAUhB4B,EAAAA,mBAAmB,EAVH,IAAA;AAWhBC,EAAAA,gBAAgB,EAXA,KAAA;AAYhBC,EAAAA,gBAAgB,EAZA,KAAA;AAahBC,EAAAA,mBAAmB,EAbH,EAAA;AAchBC,EAAAA,kBAAkB,EAdF,EAAA;AAehBC,EAAAA,mBAAmB,EAAE;AAfL,CAApBrJ;AAiBAA,IAAI,CAAJA,QAAAA,GAAgBsJ,SAAAA,CAAhBtJ,SAAgBsJ,CAAhBtJ;AACA,CAAA,GAAA,sBAAA,CAAA,QAAA,EAAA,IAAA;eACeA,I","sourcesContent":["/* eslint-disable */\n// TODO: https://www.w3.org/TR/2017/NOTE-wai-aria-practices-1.1-20171214/examples/treeview/treeview-2/treeview-2a.html\n// Fully accessibility support\n/**\n * most of it is move form the rc-tree ts lint pass the source code so there add the ts ignore\n */\n// tslint:disable\n// @ts-nocheck \nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport KeyCode from 'rc-util/lib/KeyCode';\nimport warning from '../../_util/warning';\nimport classNames from 'classnames';\nimport { polyfill } from 'react-lifecycles-compat';\nimport { TreeContext } from './contextTypes';\nimport { getDataAndAria, getDragNodesKeys, parseCheckedKeys, conductExpandParent, calcSelectedKeys, calcDropPosition, arrAdd, arrDel, posToArr, } from './util';\nimport { flattenTreeData, convertTreeToData, convertDataToEntities, warningWithoutKey, convertNodePropsToEventData, getTreeNodeProps, } from './utils/treeUtil';\nimport NodeList, { MOTION_KEY, MotionEntity } from './NodeList';\nimport TreeNode from './TreeNode';\nimport { conductCheck } from './utils/conductUtil';\nconst keyPropType = PropTypes.oneOfType([PropTypes.string, PropTypes.number]);\nclass Tree extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            keyEntities: {},\n            selectedKeys: [],\n            checkedKeys: [],\n            halfCheckedKeys: [],\n            loadedKeys: [],\n            loadingKeys: [],\n            expandedKeys: [],\n            dragging: false,\n            dragNodesKeys: [],\n            dragOverNodeKey: null,\n            dropPosition: null,\n            treeData: [],\n            flattenNodes: [],\n            focused: false,\n            activeKey: null,\n            prevProps: null,\n        };\n        this.listRef = React.createRef();\n        this.onNodeDragStart = (event, node) => {\n            const { expandedKeys, keyEntities } = this.state;\n            const { onDragStart } = this.props;\n            const { eventKey } = node.props;\n            this.dragNode = node;\n            this.setState({\n                dragging: true,\n                dragNodesKeys: getDragNodesKeys(eventKey, keyEntities),\n                expandedKeys: arrDel(expandedKeys, eventKey),\n            });\n            if (onDragStart) {\n                onDragStart({ event, node: convertNodePropsToEventData(node.props) });\n            }\n        };\n        /**\n         * [Legacy] Select handler is less small than node,\n         * so that this will trigger when drag enter node or select handler.\n         * This is a little tricky if customize css without padding.\n         * Better for use mouse move event to refresh drag state.\n         * But let's just keep it to avoid event trigger logic change.\n         */\n        this.onNodeDragEnter = (event, node) => {\n            const { expandedKeys, keyEntities } = this.state;\n            const { onDragEnter } = this.props;\n            const { pos, eventKey } = node.props;\n            if (!this.dragNode)\n                return;\n            const dropPosition = calcDropPosition(event, node);\n            // Skip if drag node is self\n            if (this.dragNode.props.eventKey === eventKey && dropPosition === 0) {\n                this.setState({\n                    dragOverNodeKey: '',\n                    dropPosition: null,\n                });\n                return;\n            }\n            // Ref: https://github.com/react-component/tree/issues/132\n            // Add timeout to let onDragLevel fire before onDragEnter,\n            // so that we can clean drag props for onDragLeave node.\n            // Macro task for this:\n            // https://html.spec.whatwg.org/multipage/webappapis.html#clean-up-after-running-script\n            setTimeout(() => {\n                // Update drag over node\n                this.setState({\n                    dragOverNodeKey: eventKey,\n                    dropPosition,\n                });\n                // Side effect for delay drag\n                if (!this.delayedDragEnterLogic) {\n                    this.delayedDragEnterLogic = {};\n                }\n                Object.keys(this.delayedDragEnterLogic).forEach(key => {\n                    clearTimeout(this.delayedDragEnterLogic[key]);\n                });\n                this.delayedDragEnterLogic[pos] = window.setTimeout(() => {\n                    if (!this.state.dragging)\n                        return;\n                    let newExpandedKeys = [...expandedKeys];\n                    const entity = keyEntities[eventKey];\n                    if (entity && (entity.children || []).length) {\n                        newExpandedKeys = arrAdd(expandedKeys, eventKey);\n                    }\n                    if (!('expandedKeys' in this.props)) {\n                        this.setState({\n                            expandedKeys: newExpandedKeys,\n                        });\n                    }\n                    if (onDragEnter) {\n                        onDragEnter({\n                            event,\n                            node: convertNodePropsToEventData(node.props),\n                            expandedKeys: newExpandedKeys,\n                        });\n                    }\n                }, 400);\n            }, 0);\n        };\n        this.onNodeDragOver = (event, node) => {\n            const { onDragOver } = this.props;\n            const { eventKey } = node.props;\n            // Update drag position\n            if (this.dragNode && eventKey === this.state.dragOverNodeKey) {\n                const dropPosition = calcDropPosition(event, node);\n                if (dropPosition === this.state.dropPosition)\n                    return;\n                this.setState({\n                    dropPosition,\n                });\n            }\n            if (onDragOver) {\n                onDragOver({ event, node: convertNodePropsToEventData(node.props) });\n            }\n        };\n        this.onNodeDragLeave = (event, node) => {\n            const { onDragLeave } = this.props;\n            this.setState({\n                dragOverNodeKey: '',\n            });\n            if (onDragLeave) {\n                onDragLeave({ event, node: convertNodePropsToEventData(node.props) });\n            }\n        };\n        this.onNodeDragEnd = (event, node) => {\n            const { onDragEnd } = this.props;\n            this.setState({\n                dragOverNodeKey: '',\n            });\n            this.cleanDragState();\n            if (onDragEnd) {\n                onDragEnd({ event, node: convertNodePropsToEventData(node.props) });\n            }\n            this.dragNode = null;\n        };\n        this.onNodeDrop = (event, node) => {\n            const { dragNodesKeys = [], dropPosition } = this.state;\n            const { onDrop } = this.props;\n            const { eventKey, pos } = node.props;\n            this.setState({\n                dragOverNodeKey: '',\n            });\n            this.cleanDragState();\n            if (dragNodesKeys.indexOf(eventKey) !== -1) {\n                warning(false, \"Can not drop to dragNode(include it's children node)\");\n                return;\n            }\n            const posArr = posToArr(pos);\n            const dropResult = {\n                event,\n                node: convertNodePropsToEventData(node.props),\n                dragNode: convertNodePropsToEventData(this.dragNode.props),\n                dragNodesKeys: dragNodesKeys.slice(),\n                dropPosition: dropPosition + Number(posArr[posArr.length - 1]),\n                dropToGap: false,\n            };\n            if (dropPosition !== 0) {\n                dropResult.dropToGap = true;\n            }\n            if (onDrop) {\n                onDrop(dropResult);\n            }\n            this.dragNode = null;\n        };\n        this.cleanDragState = () => {\n            const { dragging } = this.state;\n            if (dragging) {\n                this.setState({\n                    dragging: false,\n                });\n            }\n        };\n        this.onNodeClick = (e, treeNode) => {\n            const { onClick } = this.props;\n            if (onClick) {\n                onClick(e, treeNode);\n            }\n        };\n        this.onNodeDoubleClick = (e, treeNode) => {\n            const { onDoubleClick } = this.props;\n            if (onDoubleClick) {\n                onDoubleClick(e, treeNode);\n            }\n        };\n        this.onNodeSelect = (e, treeNode) => {\n            let { selectedKeys } = this.state;\n            const { keyEntities } = this.state;\n            const { onSelect, multiple } = this.props;\n            const { selected, key } = treeNode;\n            const targetSelected = !selected;\n            // Update selected keys\n            if (!targetSelected) {\n                selectedKeys = arrDel(selectedKeys, key);\n            }\n            else if (!multiple) {\n                selectedKeys = [key];\n            }\n            else {\n                selectedKeys = arrAdd(selectedKeys, key);\n            }\n            // [Legacy] Not found related usage in doc or upper libs\n            const selectedNodes = selectedKeys\n                .map(selectedKey => {\n                const entity = keyEntities[selectedKey];\n                if (!entity)\n                    return null;\n                return entity.node;\n            })\n                .filter(node => node);\n            this.setUncontrolledState({ selectedKeys });\n            if (onSelect) {\n                onSelect(selectedKeys, {\n                    event: 'select',\n                    selected: targetSelected,\n                    node: treeNode,\n                    selectedNodes,\n                    nativeEvent: e.nativeEvent,\n                });\n            }\n        };\n        this.onNodeCheck = (e, treeNode, checked) => {\n            const { keyEntities, checkedKeys: oriCheckedKeys, halfCheckedKeys: oriHalfCheckedKeys, } = this.state;\n            const { checkStrictly, onCheck } = this.props;\n            const { key } = treeNode;\n            // Prepare trigger arguments\n            let checkedObj;\n            const eventObj = {\n                event: 'check',\n                node: treeNode,\n                checked,\n                nativeEvent: e.nativeEvent,\n            };\n            if (checkStrictly) {\n                const checkedKeys = checked\n                    ? arrAdd(oriCheckedKeys, key)\n                    : arrDel(oriCheckedKeys, key);\n                const halfCheckedKeys = arrDel(oriHalfCheckedKeys, key);\n                checkedObj = { checked: checkedKeys, halfChecked: halfCheckedKeys };\n                eventObj.checkedNodes = checkedKeys\n                    .map(checkedKey => keyEntities[checkedKey])\n                    .filter(entity => entity)\n                    .map(entity => entity.node);\n                this.setUncontrolledState({ checkedKeys });\n            }\n            else {\n                // Always fill first\n                let { checkedKeys, halfCheckedKeys } = conductCheck([...oriCheckedKeys, key], true, keyEntities);\n                // If remove, we do it again to correction\n                if (!checked) {\n                    const keySet = new Set(checkedKeys);\n                    keySet.delete(key);\n                    ({ checkedKeys, halfCheckedKeys } = conductCheck(Array.from(keySet), { checked: false, halfCheckedKeys }, keyEntities));\n                }\n                checkedObj = checkedKeys;\n                // [Legacy] This is used for `rc-tree-select`\n                eventObj.checkedNodes = [];\n                eventObj.checkedNodesPositions = [];\n                eventObj.halfCheckedKeys = halfCheckedKeys;\n                checkedKeys.forEach(checkedKey => {\n                    const entity = keyEntities[checkedKey];\n                    if (!entity)\n                        return;\n                    const { node, pos } = entity;\n                    eventObj.checkedNodes.push(node);\n                    eventObj.checkedNodesPositions.push({ node, pos });\n                });\n                this.setUncontrolledState({\n                    checkedKeys,\n                    halfCheckedKeys,\n                });\n            }\n            if (onCheck) {\n                onCheck(checkedObj, eventObj);\n            }\n        };\n        this.onNodeLoad = (treeNode) => new Promise(resolve => {\n            // We need to get the latest state of loading/loaded keys\n            this.setState(({ loadedKeys = [], loadingKeys = [] }) => {\n                const { loadData, onLoad } = this.props;\n                const { key } = treeNode;\n                if (!loadData ||\n                    loadedKeys.indexOf(key) !== -1 ||\n                    loadingKeys.indexOf(key) !== -1) {\n                    // react 15 will warn if return null\n                    return {};\n                }\n                // Process load data\n                const promise = loadData(treeNode);\n                promise.then(() => {\n                    const { loadedKeys: currentLoadedKeys, loadingKeys: currentLoadingKeys, } = this.state;\n                    const newLoadedKeys = arrAdd(currentLoadedKeys, key);\n                    const newLoadingKeys = arrDel(currentLoadingKeys, key);\n                    // onLoad should trigger before internal setState to avoid `loadData` trigger twice.\n                    // https://github.com/ant-design/ant-design/issues/12464\n                    if (onLoad) {\n                        onLoad(newLoadedKeys, {\n                            event: 'load',\n                            node: treeNode,\n                        });\n                    }\n                    this.setUncontrolledState({\n                        loadedKeys: newLoadedKeys,\n                    });\n                    this.setState({\n                        loadingKeys: newLoadingKeys,\n                    });\n                    resolve();\n                });\n                return {\n                    loadingKeys: arrAdd(loadingKeys, key),\n                };\n            });\n        });\n        this.onNodeExpand = (e, treeNode) => {\n            let { expandedKeys } = this.state;\n            const { treeData } = this.state;\n            const { onExpand, loadData } = this.props;\n            const { key, expanded } = treeNode;\n            // Update selected keys\n            const index = expandedKeys.indexOf(key);\n            const targetExpanded = !expanded;\n            warning((expanded && index !== -1) || (!expanded && index === -1), 'Expand state not sync with index check');\n            if (targetExpanded) {\n                expandedKeys = arrAdd(expandedKeys, key);\n            }\n            else {\n                expandedKeys = arrDel(expandedKeys, key);\n            }\n            const flattenNodes = flattenTreeData(treeData, expandedKeys);\n            this.setUncontrolledState({ expandedKeys, flattenNodes }, true);\n            if (onExpand) {\n                onExpand(expandedKeys, {\n                    node: treeNode,\n                    expanded: targetExpanded,\n                    nativeEvent: e.nativeEvent,\n                });\n            }\n            // Async Load data\n            if (targetExpanded && loadData) {\n                const loadPromise = this.onNodeLoad(treeNode);\n                return loadPromise\n                    ? loadPromise.then(() => {\n                        // [Legacy] Refresh logic\n                        const newFlattenTreeData = flattenTreeData(this.state.treeData, expandedKeys);\n                        this.setUncontrolledState({ flattenNodes: newFlattenTreeData });\n                    })\n                    : null;\n            }\n            return null;\n        };\n        this.onNodeMouseEnter = (event, node) => {\n            const { onMouseEnter } = this.props;\n            if (onMouseEnter) {\n                onMouseEnter({ event, node });\n            }\n        };\n        this.onNodeMouseLeave = (event, node) => {\n            const { onMouseLeave } = this.props;\n            if (onMouseLeave) {\n                onMouseLeave({ event, node });\n            }\n        };\n        this.onNodeContextMenu = (event, node) => {\n            const { onRightClick } = this.props;\n            if (onRightClick) {\n                event.preventDefault();\n                onRightClick({ event, node });\n            }\n        };\n        this.onFocus = (...args) => {\n            const { onFocus } = this.props;\n            this.setState({ focused: true });\n            if (onFocus) {\n                onFocus(...args);\n            }\n        };\n        this.onBlur = (...args) => {\n            const { onBlur } = this.props;\n            this.setState({ focused: false });\n            this.onActiveChange(null);\n            if (onBlur) {\n                onBlur(...args);\n            }\n        };\n        this.getTreeNodeRequiredProps = () => {\n            const { expandedKeys, selectedKeys, loadedKeys, loadingKeys, checkedKeys, halfCheckedKeys, dragOverNodeKey, dropPosition, keyEntities, } = this.state;\n            return {\n                expandedKeys: expandedKeys || [],\n                selectedKeys: selectedKeys || [],\n                loadedKeys: loadedKeys || [],\n                loadingKeys: loadingKeys || [],\n                checkedKeys: checkedKeys || [],\n                halfCheckedKeys: halfCheckedKeys || [],\n                dragOverNodeKey,\n                dropPosition,\n                keyEntities,\n            };\n        };\n        // =========================== Keyboard ===========================\n        this.onActiveChange = (activeKey) => {\n            const { onActiveChange } = this.props;\n            this.setState({ activeKey });\n            if (activeKey !== null) {\n                this.scrollTo({ key: activeKey });\n            }\n            if (onActiveChange) {\n                onActiveChange(activeKey);\n            }\n        };\n        this.getActiveItem = () => {\n            const { activeKey, flattenNodes } = this.state;\n            if (activeKey === null) {\n                return null;\n            }\n            return flattenNodes.find(({ data: { key } }) => key === activeKey) || null;\n        };\n        this.offsetActiveKey = (offset) => {\n            const { flattenNodes, activeKey } = this.state;\n            let index = flattenNodes.findIndex(({ data: { key } }) => key === activeKey);\n            // Align with index\n            if (index === -1 && offset < 0) {\n                index = flattenNodes.length;\n            }\n            index = (index + offset + flattenNodes.length) % flattenNodes.length;\n            const item = flattenNodes[index];\n            if (item) {\n                const { key } = item.data;\n                this.onActiveChange(key);\n            }\n            else {\n                this.onActiveChange(null);\n            }\n        };\n        this.onKeyDown = event => {\n            const { activeKey, expandedKeys, checkedKeys } = this.state;\n            const { onKeyDown, checkable, selectable } = this.props;\n            // >>>>>>>>>> Direction\n            switch (event.which) {\n                case KeyCode.UP: {\n                    this.offsetActiveKey(-1);\n                    event.preventDefault();\n                    break;\n                }\n                case KeyCode.DOWN: {\n                    this.offsetActiveKey(1);\n                    event.preventDefault();\n                    break;\n                }\n            }\n            // >>>>>>>>>> Expand & Selection\n            const activeItem = this.getActiveItem();\n            if (activeItem && activeItem.data) {\n                const treeNodeRequiredProps = this.getTreeNodeRequiredProps();\n                const expandable = activeItem.data.isLeaf === false ||\n                    !!(activeItem.data.children || []).length;\n                const eventNode = convertNodePropsToEventData({\n                    ...getTreeNodeProps(activeKey, treeNodeRequiredProps),\n                    data: activeItem.data,\n                    active: true,\n                });\n                switch (event.which) {\n                    // >>> Expand\n                    case KeyCode.LEFT: {\n                        // Collapse if possible\n                        if (expandable && expandedKeys.includes(activeKey)) {\n                            this.onNodeExpand({}, eventNode);\n                        }\n                        else if (activeItem.parent) {\n                            this.onActiveChange(activeItem.parent.data.key);\n                        }\n                        event.preventDefault();\n                        break;\n                    }\n                    case KeyCode.RIGHT: {\n                        // Expand if possible\n                        if (expandable && !expandedKeys.includes(activeKey)) {\n                            this.onNodeExpand({}, eventNode);\n                        }\n                        else if (activeItem.children && activeItem.children.length) {\n                            this.onActiveChange(activeItem.children[0].data.key);\n                        }\n                        event.preventDefault();\n                        break;\n                    }\n                    // Selection\n                    case KeyCode.ENTER:\n                    case KeyCode.SPACE: {\n                        if (checkable &&\n                            !eventNode.disabled &&\n                            eventNode.checkable !== false &&\n                            !eventNode.disableCheckbox) {\n                            this.onNodeCheck({}, eventNode, !checkedKeys.includes(activeKey));\n                        }\n                        else if (!checkable &&\n                            selectable &&\n                            !eventNode.disabled &&\n                            eventNode.selectable !== false) {\n                            this.onNodeSelect({}, eventNode);\n                        }\n                        break;\n                    }\n                }\n            }\n            if (onKeyDown) {\n                onKeyDown(event);\n            }\n        };\n        /**\n         * Only update the value which is not in props\n         */\n        this.setUncontrolledState = (state, atomic = false) => {\n            let needSync = false;\n            let allPassed = true;\n            const newState = {};\n            Object.keys(state).forEach(name => {\n                if (name in this.props) {\n                    allPassed = false;\n                    return;\n                }\n                needSync = true;\n                newState[name] = state[name];\n            });\n            if (needSync && (!atomic || allPassed)) {\n                this.setState(newState);\n            }\n        };\n        this.scrollTo = scroll => {\n            this.listRef.current.scrollTo(scroll);\n        };\n    }\n    static getDerivedStateFromProps(props, prevState) {\n        const { prevProps } = prevState;\n        const newState = {\n            prevProps: props,\n        };\n        function needSync(name) {\n            return ((!prevProps && name in props) ||\n                (prevProps && prevProps[name] !== props[name]));\n        }\n        // ================== Tree Node ==================\n        let treeData;\n        // Check if `treeData` or `children` changed and save into the state.\n        if (needSync('treeData')) {\n            ({ treeData } = props);\n        }\n        else if (needSync('children')) {\n            /**\n             * 后续可以考虑使用treeData 重构tree pro\n             */\n            // warning(\n            //   false,\n            //   '`children` of Tree is deprecated. Please use `treeData` instead.',\n            // );\n            treeData = convertTreeToData(props.children);\n        }\n        // Save flatten nodes info and convert `treeData` into keyEntities\n        if (treeData) {\n            newState.treeData = treeData;\n            const entitiesMap = convertDataToEntities(treeData);\n            newState.keyEntities = {\n                [MOTION_KEY]: MotionEntity,\n                ...entitiesMap.keyEntities,\n            };\n            // Warning if treeNode not provide key\n            if (process.env.NODE_ENV !== 'production') {\n                warningWithoutKey(treeData);\n            }\n        }\n        const keyEntities = newState.keyEntities || prevState.keyEntities;\n        // ================ expandedKeys =================\n        if (needSync('expandedKeys') ||\n            (prevProps && needSync('autoExpandParent'))) {\n            newState.expandedKeys =\n                props.autoExpandParent || (!prevProps && props.defaultExpandParent)\n                    ? conductExpandParent(props.expandedKeys, keyEntities)\n                    : props.expandedKeys;\n        }\n        else if (!prevProps && props.defaultExpandAll) {\n            const cloneKeyEntities = { ...keyEntities };\n            delete cloneKeyEntities[MOTION_KEY];\n            newState.expandedKeys = Object.keys(cloneKeyEntities).map(key => cloneKeyEntities[key].key);\n        }\n        else if (!prevProps && props.defaultExpandedKeys) {\n            newState.expandedKeys =\n                props.autoExpandParent || props.defaultExpandParent\n                    ? conductExpandParent(props.defaultExpandedKeys, keyEntities)\n                    : props.defaultExpandedKeys;\n        }\n        if (!newState.expandedKeys) {\n            delete newState.expandedKeys;\n        }\n        // ================ flattenNodes =================\n        if (treeData || newState.expandedKeys) {\n            const flattenNodes = flattenTreeData(treeData || prevState.treeData, newState.expandedKeys || prevState.expandedKeys);\n            newState.flattenNodes = flattenNodes;\n        }\n        // ================ selectedKeys =================\n        if (props.selectable) {\n            if (needSync('selectedKeys')) {\n                newState.selectedKeys = calcSelectedKeys(props.selectedKeys, props);\n            }\n            else if (!prevProps && props.defaultSelectedKeys) {\n                newState.selectedKeys = calcSelectedKeys(props.defaultSelectedKeys, props);\n            }\n        }\n        // ================= checkedKeys =================\n        if (props.checkable) {\n            let checkedKeyEntity;\n            if (needSync('checkedKeys')) {\n                checkedKeyEntity = parseCheckedKeys(props.checkedKeys) || {};\n            }\n            else if (!prevProps && props.defaultCheckedKeys) {\n                checkedKeyEntity = parseCheckedKeys(props.defaultCheckedKeys) || {};\n            }\n            else if (treeData) {\n                // If `treeData` changed, we also need check it\n                checkedKeyEntity = parseCheckedKeys(props.checkedKeys) || {\n                    checkedKeys: prevState.checkedKeys,\n                    halfCheckedKeys: prevState.halfCheckedKeys,\n                };\n            }\n            if (checkedKeyEntity) {\n                let { checkedKeys = [], halfCheckedKeys = [] } = checkedKeyEntity;\n                if (!props.checkStrictly) {\n                    const conductKeys = conductCheck(checkedKeys, true, keyEntities);\n                    ({ checkedKeys, halfCheckedKeys } = conductKeys);\n                }\n                newState.checkedKeys = checkedKeys;\n                newState.halfCheckedKeys = halfCheckedKeys;\n            }\n        }\n        // ================= loadedKeys ==================\n        if (needSync('loadedKeys')) {\n            newState.loadedKeys = props.loadedKeys;\n        }\n        return newState;\n    }\n    render() {\n        const { focused, flattenNodes, keyEntities, dragging, activeKey, } = this.state;\n        const { prefixCls, className, style, showLine, focusable, tabIndex = 0, selectable, showIcon, icon, switcherIcon, draggable, checkable, checkStrictly, disabled, motion, loadData, filterTreeNode, height, itemHeight, virtual, } = this.props;\n        const domProps = getDataAndAria(this.props);\n        return (React.createElement(TreeContext.Provider, { value: {\n                prefixCls,\n                selectable,\n                showIcon,\n                icon,\n                switcherIcon,\n                draggable,\n                checkable,\n                checkStrictly,\n                disabled,\n                keyEntities,\n                loadData,\n                filterTreeNode,\n                onNodeClick: this.onNodeClick,\n                onNodeDoubleClick: this.onNodeDoubleClick,\n                onNodeExpand: this.onNodeExpand,\n                onNodeSelect: this.onNodeSelect,\n                onNodeCheck: this.onNodeCheck,\n                onNodeLoad: this.onNodeLoad,\n                onNodeMouseEnter: this.onNodeMouseEnter,\n                onNodeMouseLeave: this.onNodeMouseLeave,\n                onNodeContextMenu: this.onNodeContextMenu,\n                onNodeDragStart: this.onNodeDragStart,\n                onNodeDragEnter: this.onNodeDragEnter,\n                onNodeDragOver: this.onNodeDragOver,\n                onNodeDragLeave: this.onNodeDragLeave,\n                onNodeDragEnd: this.onNodeDragEnd,\n                onNodeDrop: this.onNodeDrop,\n            } },\n            React.createElement(\"div\", { className: classNames(prefixCls, className, {\n                    [`${prefixCls}-show-line`]: showLine,\n                    [`${prefixCls}-focused`]: focused,\n                    [`${prefixCls}-active-focused`]: activeKey !== null,\n                }) },\n                React.createElement(NodeList, Object.assign({ ref: this.listRef, prefixCls: prefixCls, style: style, data: flattenNodes, disabled: disabled, selectable: selectable, checkable: checkable ? 1 : 0, motion: motion, dragging: dragging, height: height, itemHeight: itemHeight, virtual: virtual, focusable: focusable, focused: focused, tabIndex: tabIndex, activeItem: this.getActiveItem(), onFocus: this.onFocus, onBlur: this.onBlur, onKeyDown: this.onKeyDown, onActiveChange: this.onActiveChange }, this.getTreeNodeRequiredProps(), domProps)))));\n    }\n}\nTree.propTypes = {\n    prefixCls: PropTypes.string,\n    className: PropTypes.string,\n    style: PropTypes.object,\n    tabIndex: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    children: PropTypes.any,\n    treeData: PropTypes.array,\n    showLine: PropTypes.bool,\n    showIcon: PropTypes.bool,\n    icon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n    selectable: PropTypes.bool,\n    disabled: PropTypes.bool,\n    multiple: PropTypes.bool,\n    checkable: PropTypes.oneOfType([PropTypes.bool, PropTypes.node]),\n    checkStrictly: PropTypes.bool,\n    draggable: PropTypes.bool,\n    defaultExpandParent: PropTypes.bool,\n    autoExpandParent: PropTypes.bool,\n    defaultExpandAll: PropTypes.bool,\n    defaultExpandedKeys: PropTypes.arrayOf(keyPropType),\n    expandedKeys: PropTypes.arrayOf(keyPropType),\n    defaultCheckedKeys: PropTypes.arrayOf(keyPropType),\n    checkedKeys: PropTypes.oneOfType([\n        PropTypes.arrayOf(keyPropType),\n        PropTypes.object,\n    ]),\n    defaultSelectedKeys: PropTypes.arrayOf(keyPropType),\n    selectedKeys: PropTypes.arrayOf(keyPropType),\n    onClick: PropTypes.func,\n    onDoubleClick: PropTypes.func,\n    onExpand: PropTypes.func,\n    onCheck: PropTypes.func,\n    onSelect: PropTypes.func,\n    onLoad: PropTypes.func,\n    loadData: PropTypes.func,\n    loadedKeys: PropTypes.arrayOf(keyPropType),\n    onMouseEnter: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onRightClick: PropTypes.func,\n    onDragStart: PropTypes.func,\n    onDragEnter: PropTypes.func,\n    onDragOver: PropTypes.func,\n    onDragLeave: PropTypes.func,\n    onDragEnd: PropTypes.func,\n    onDrop: PropTypes.func,\n    filterTreeNode: PropTypes.func,\n    motion: PropTypes.object,\n    switcherIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n};\nTree.defaultProps = {\n    prefixCls: 'rc-tree',\n    showLine: false,\n    showIcon: true,\n    selectable: true,\n    multiple: false,\n    checkable: false,\n    disabled: false,\n    checkStrictly: false,\n    draggable: false,\n    defaultExpandParent: true,\n    autoExpandParent: false,\n    defaultExpandAll: false,\n    defaultExpandedKeys: [],\n    defaultCheckedKeys: [],\n    defaultSelectedKeys: [],\n};\nTree.TreeNode = TreeNode;\npolyfill(Tree);\nexport default Tree;\n"]}