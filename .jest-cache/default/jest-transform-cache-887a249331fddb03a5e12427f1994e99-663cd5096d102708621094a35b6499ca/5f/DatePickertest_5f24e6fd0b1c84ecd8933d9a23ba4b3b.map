{"version":3,"sources":["DatePicker.test.js"],"names":["describe","DatePicker","beforeEach","MockDate","set","afterEach","reset","it","locale","lang","placeholder","rangePlaceholder","today","now","backToToday","ok","clear","month","year","timeSelect","dateSelect","monthSelect","yearSelect","decadeSelect","previousMonth","nextMonth","previousYear","nextYear","previousDecade","nextDecade","previousCentury","nextCentury","yearFormat","dateFormat","dayFormat","dateTimeFormat","monthBeforeYear","timePickerLocale","birthday","wrapper","expect","render","toMatchSnapshot","Test","cleared","value","state","format","setState","onChange","React","Component","find","getDOMNode","toBe","handleChange","jest","fn","not","toHaveBeenCalled"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { mount } from 'enzyme';\nimport moment from 'moment';\nimport MockDate from 'mockdate';\nimport DatePicker from '..';\nimport { selectDate, openPanel, clearInput, nextYear, nextMonth, hasSelected } from './utils';\nimport focusTest from '../../../tests/shared/focusTest';\n\ndescribe('DatePicker', () => {\n  focusTest(DatePicker);\n\n  beforeEach(() => {\n    MockDate.set(moment('2016-11-22'));\n  });\n\n  afterEach(() => {\n    MockDate.reset();\n  });\n\n  it('prop locale should works', () => {\n    const locale = {\n      lang: {\n        placeholder: 'Избери дата',\n        rangePlaceholder: ['Начална дата', 'Крайна дата'],\n        today: 'Днес',\n        now: 'Сега',\n        backToToday: 'Към днес',\n        ok: 'Добре',\n        clear: 'Изчистване',\n        month: 'Месец',\n        year: 'Година',\n        timeSelect: 'Избор на час',\n        dateSelect: 'Избор на дата',\n        monthSelect: 'Избор на месец',\n        yearSelect: 'Избор на година',\n        decadeSelect: 'Десетилетие',\n        previousMonth: 'Предишен месец (PageUp)',\n        nextMonth: 'Следващ месец (PageDown)',\n        previousYear: 'Последна година (Control + left)',\n        nextYear: 'Следваща година (Control + right)',\n        previousDecade: 'Предишно десетилетие',\n        nextDecade: 'Следващо десетилетие',\n        previousCentury: 'Последен век',\n        nextCentury: 'Следващ век',\n        yearFormat: 'YYYY',\n        dateFormat: 'D M YYYY',\n        dayFormat: 'D',\n        dateTimeFormat: 'D M YYYY HH:mm:ss',\n        monthBeforeYear: true,\n      },\n      timePickerLocale: {\n        placeholder: 'Избор на час',\n      },\n    };\n    const birthday = moment('2000-01-01', 'YYYY-MM-DD');\n    const wrapper = mount(<DatePicker open locale={locale} value={birthday} />);\n    expect(wrapper.render()).toMatchSnapshot();\n  });\n\n  it('control value after panel closed', () => {\n    class Test extends React.Component {\n      state = {\n        cleared: false,\n        value: moment(),\n      };\n\n      onChange = value => {\n        let { cleared } = this.state;\n\n        if (cleared) {\n          value = moment(moment(value).format('YYYY-MM-DD 12:12:12'));\n          cleared = false;\n        }\n\n        if (!value) {\n          cleared = true;\n        }\n\n        this.setState({ value, cleared });\n      };\n\n      render() {\n        const { value } = this.state;\n        return (\n          <DatePicker\n            showTime\n            value={value}\n            format=\"YYYY-MM-DD HH:mm:ss\"\n            onChange={this.onChange}\n          />\n        );\n      }\n    }\n\n    const wrapper = mount(<Test />);\n    // clear input\n    clearInput(wrapper);\n    openPanel(wrapper);\n    selectDate(wrapper, moment('2016-11-13'));\n    expect(wrapper.find('.c7n-calendar-input').getDOMNode().value).toBe('2016-11-13 12:12:12');\n    selectDate(wrapper, moment('2016-11-14'));\n    expect(wrapper.find('.c7n-calendar-input').getDOMNode().value).toBe('2016-11-14 12:12:12');\n  });\n\n  it('triggers onChange only when date was selected', () => {\n    const handleChange = jest.fn();\n    const wrapper = mount(<DatePicker onChange={handleChange} />);\n    openPanel(wrapper);\n    nextYear(wrapper);\n    expect(handleChange).not.toHaveBeenCalled();\n    nextMonth(wrapper);\n    expect(handleChange).not.toHaveBeenCalled();\n    selectDate(wrapper, moment('2017-12-22'));\n    expect(handleChange).toHaveBeenCalled();\n  });\n\n  it('clear input', () => {\n    const wrapper = mount(<DatePicker />);\n    openPanel(wrapper);\n    selectDate(wrapper, moment('2016-11-23'));\n    clearInput(wrapper);\n    openPanel(wrapper);\n    expect(hasSelected(wrapper, moment('2016-11-22'))).toBe(true);\n  });\n});\n"]}