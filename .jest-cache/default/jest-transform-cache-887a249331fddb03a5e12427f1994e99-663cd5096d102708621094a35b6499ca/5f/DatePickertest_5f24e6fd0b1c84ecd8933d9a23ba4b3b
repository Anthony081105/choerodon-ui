b66b0cae8c5af3b61c3e86143f4540e6
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _moment = _interopRequireDefault(require("moment"));

var _mockdate = _interopRequireDefault(require("mockdate"));

var _ = _interopRequireDefault(require(".."));

var _utils = require("./utils");

var _focusTest = _interopRequireDefault(require("../../../tests/shared/focusTest"));

describe('DatePicker', function () {
  (0, _focusTest["default"])(_["default"]);
  beforeEach(function () {
    _mockdate["default"].set((0, _moment["default"])('2016-11-22'));
  });
  afterEach(function () {
    _mockdate["default"].reset();
  });
  it('prop locale should works', function () {
    var locale = {
      lang: {
        placeholder: 'Избери дата',
        rangePlaceholder: ['Начална дата', 'Крайна дата'],
        today: 'Днес',
        now: 'Сега',
        backToToday: 'Към днес',
        ok: 'Добре',
        clear: 'Изчистване',
        month: 'Месец',
        year: 'Година',
        timeSelect: 'Избор на час',
        dateSelect: 'Избор на дата',
        monthSelect: 'Избор на месец',
        yearSelect: 'Избор на година',
        decadeSelect: 'Десетилетие',
        previousMonth: 'Предишен месец (PageUp)',
        nextMonth: 'Следващ месец (PageDown)',
        previousYear: 'Последна година (Control + left)',
        nextYear: 'Следваща година (Control + right)',
        previousDecade: 'Предишно десетилетие',
        nextDecade: 'Следващо десетилетие',
        previousCentury: 'Последен век',
        nextCentury: 'Следващ век',
        yearFormat: 'YYYY',
        dateFormat: 'D M YYYY',
        dayFormat: 'D',
        dateTimeFormat: 'D M YYYY HH:mm:ss',
        monthBeforeYear: true
      },
      timePickerLocale: {
        placeholder: 'Избор на час'
      }
    };
    var birthday = (0, _moment["default"])('2000-01-01', 'YYYY-MM-DD');
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      open: true,
      locale: locale,
      value: birthday
    }));
    expect(wrapper.render()).toMatchSnapshot();
  });
  it('control value after panel closed', function () {
    var Test =
    /*#__PURE__*/
    function (_React$Component) {
      (0, _inherits2["default"])(Test, _React$Component);

      function Test() {
        var _getPrototypeOf2;

        var _this;

        (0, _classCallCheck2["default"])(this, Test);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = (0, _possibleConstructorReturn2["default"])(this, (_getPrototypeOf2 = (0, _getPrototypeOf3["default"])(Test)).call.apply(_getPrototypeOf2, [this].concat(args)));
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "state", {
          cleared: false,
          value: (0, _moment["default"])()
        });
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onChange", function (value) {
          var cleared = _this.state.cleared;

          if (cleared) {
            value = (0, _moment["default"])((0, _moment["default"])(value).format('YYYY-MM-DD 12:12:12'));
            cleared = false;
          }

          if (!value) {
            cleared = true;
          }

          _this.setState({
            value: value,
            cleared: cleared
          });
        });
        return _this;
      }

      (0, _createClass2["default"])(Test, [{
        key: "render",
        value: function render() {
          var value = this.state.value;
          return _react["default"].createElement(_["default"], {
            showTime: true,
            value: value,
            format: "YYYY-MM-DD HH:mm:ss",
            onChange: this.onChange
          });
        }
      }]);
      return Test;
    }(_react["default"].Component);

    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(Test, null)); // clear input

    (0, _utils.clearInput)(wrapper);
    (0, _utils.openPanel)(wrapper);
    (0, _utils.selectDate)(wrapper, (0, _moment["default"])('2016-11-13'));
    expect(wrapper.find('.c7n-calendar-input').getDOMNode().value).toBe('2016-11-13 12:12:12');
    (0, _utils.selectDate)(wrapper, (0, _moment["default"])('2016-11-14'));
    expect(wrapper.find('.c7n-calendar-input').getDOMNode().value).toBe('2016-11-14 12:12:12');
  });
  it('triggers onChange only when date was selected', function () {
    var handleChange = jest.fn();
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      onChange: handleChange
    }));
    (0, _utils.openPanel)(wrapper);
    (0, _utils.nextYear)(wrapper);
    expect(handleChange).not.toHaveBeenCalled();
    (0, _utils.nextMonth)(wrapper);
    expect(handleChange).not.toHaveBeenCalled();
    (0, _utils.selectDate)(wrapper, (0, _moment["default"])('2017-12-22'));
    expect(handleChange).toHaveBeenCalled();
  });
  it('clear input', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], null));
    (0, _utils.openPanel)(wrapper);
    (0, _utils.selectDate)(wrapper, (0, _moment["default"])('2016-11-23'));
    (0, _utils.clearInput)(wrapper);
    (0, _utils.openPanel)(wrapper);
    expect((0, _utils.hasSelected)(wrapper, (0, _moment["default"])('2016-11-22'))).toBe(true);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,