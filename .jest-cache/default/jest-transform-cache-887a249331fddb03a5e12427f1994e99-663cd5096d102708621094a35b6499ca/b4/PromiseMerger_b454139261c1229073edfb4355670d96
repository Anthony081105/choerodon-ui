25d577d9e1e87d82c7133622ad5887ef
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _tslib = require("tslib");

var _mobx = require("mobx");

var _Cache = _interopRequireWildcard(require("./Cache"));

var PromiseMerger =
/*#__PURE__*/
function () {
  function PromiseMerger(callback, config) {
    var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 200;
    (0, _classCallCheck2["default"])(this, PromiseMerger);
    this.promiseList = {};
    this.timeout = timeout;
    this.cache = new _Cache["default"](config);
    this.callback = callback;
    this.reaction = (0, _Cache.refreshCacheOptions)(this.cache);
  }

  (0, _createClass2["default"])(PromiseMerger, [{
    key: "dispose",
    value: function dispose() {
      this.reaction();
    }
  }, {
    key: "add",
    value: function add(code) {
      var _this = this;

      var cache = this.cache,
          promiseList = this.promiseList;
      var item = cache.get(code);

      if (item) {
        return Promise.resolve(item);
      }

      return new Promise(function (resolve, reject) {
        var promise = promiseList[code];

        var resolveCallback = function resolveCallback() {
          resolve(cache.get(code));
        };

        var rejectCallback = function rejectCallback() {
          reject();
        };

        if (promise) {
          promise.resolves.push(resolveCallback);
          promise.rejects.push(rejectCallback);
        } else {
          if (_this.waitID) {
            clearTimeout(_this.waitID);
          }

          promise = {
            resolves: [resolveCallback],
            rejects: [rejectCallback]
          };
          _this.promiseList[code] = promise;
          _this.waitID = setTimeout(function () {
            var codeList = Object.keys(promiseList);
            var memo = (0, _objectSpread2["default"])({}, promiseList);
            _this.promiseList = {};

            if (process.env.LOGGER_LEVEL === 'info') {
              // eslint-disable-next-line no-console
              console.info("batch request: ".concat(codeList));
            }

            _this.callback(codeList).then(function (res) {
              codeList.forEach(function (key) {
                var data = res[key];

                var _ref = memo[key] || {},
                    _ref$resolves = _ref.resolves,
                    resolves = _ref$resolves === void 0 ? [] : _ref$resolves;

                _this.cache.set(key, data);

                resolves.forEach(function (r) {
                  return r(data);
                });
              });
            })["catch"](function (error) {
              codeList.forEach(function (key) {
                var _ref2 = memo[key] || {},
                    _ref2$rejects = _ref2.rejects,
                    rejects = _ref2$rejects === void 0 ? [] : _ref2$rejects;

                rejects.forEach(function (r) {
                  return r(error);
                });
              });
            });
          }, _this.timeout);
        }
      });
    }
  }]);
  return PromiseMerger;
}();

exports["default"] = PromiseMerger;
(0, _tslib.__decorate)([_mobx.action], PromiseMerger.prototype, "add", null);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9odWlodWF3ay9Eb2N1bWVudHMvb3B0L2Nob2Vyb2Rvbi11aS9jb21wb25lbnRzLXByby9fdXRpbC9Qcm9taXNlTWVyZ2VyLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0lBRXFCLGE7OztBQWFuQix5QkFBWSxRQUFaLEVBQWdFLE1BQWhFLEVBQTZGO0FBQUEsUUFBckIsT0FBcUIsdUVBQUgsR0FBRztBQUFBO0FBUjdGLFNBQUEsV0FBQSxHQUFnRixFQUFoRjtBQVNFLFNBQUssT0FBTCxHQUFlLE9BQWY7QUFDQSxTQUFLLEtBQUwsR0FBYSxJQUFJLGlCQUFKLENBQXFCLE1BQXJCLENBQWI7QUFDQSxTQUFLLFFBQUwsR0FBZ0IsUUFBaEI7QUFDQSxTQUFLLFFBQUwsR0FBZ0IsZ0NBQW9CLEtBQUssS0FBekIsQ0FBaEI7QUFDRDs7Ozs4QkFFTTtBQUNMLFdBQUssUUFBTDtBQUNEOzs7d0JBR0csSSxFQUFZO0FBQUE7O0FBQUEsVUFDTixLQURNLEdBQ2lCLElBRGpCLENBQ04sS0FETTtBQUFBLFVBQ0MsV0FERCxHQUNpQixJQURqQixDQUNDLFdBREQ7QUFFZCxVQUFNLElBQUksR0FBRyxLQUFLLENBQUMsR0FBTixDQUFVLElBQVYsQ0FBYjs7QUFDQSxVQUFJLElBQUosRUFBVTtBQUNSLGVBQU8sT0FBTyxDQUFDLE9BQVIsQ0FBZ0IsSUFBaEIsQ0FBUDtBQUNEOztBQUNELGFBQU8sSUFBSSxPQUFKLENBQWUsVUFBQyxPQUFELEVBQVUsTUFBVixFQUFvQjtBQUN4QyxZQUFJLE9BQU8sR0FBRyxXQUFXLENBQUMsSUFBRCxDQUF6Qjs7QUFDQSxZQUFNLGVBQWUsR0FBRyxTQUFsQixlQUFrQixHQUFLO0FBQzNCLFVBQUEsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFOLENBQVUsSUFBVixDQUFELENBQVA7QUFDRCxTQUZEOztBQUdBLFlBQU0sY0FBYyxHQUFHLFNBQWpCLGNBQWlCLEdBQUs7QUFDMUIsVUFBQSxNQUFNO0FBQ1AsU0FGRDs7QUFHQSxZQUFJLE9BQUosRUFBYTtBQUNYLFVBQUEsT0FBTyxDQUFDLFFBQVIsQ0FBaUIsSUFBakIsQ0FBc0IsZUFBdEI7QUFDQSxVQUFBLE9BQU8sQ0FBQyxPQUFSLENBQWdCLElBQWhCLENBQXFCLGNBQXJCO0FBQ0QsU0FIRCxNQUdPO0FBQ0wsY0FBSSxLQUFJLENBQUMsTUFBVCxFQUFpQjtBQUNmLFlBQUEsWUFBWSxDQUFDLEtBQUksQ0FBQyxNQUFOLENBQVo7QUFDRDs7QUFDRCxVQUFBLE9BQU8sR0FBRztBQUNSLFlBQUEsUUFBUSxFQUFFLENBQUMsZUFBRCxDQURGO0FBRVIsWUFBQSxPQUFPLEVBQUUsQ0FBQyxjQUFEO0FBRkQsV0FBVjtBQUlBLFVBQUEsS0FBSSxDQUFDLFdBQUwsQ0FBaUIsSUFBakIsSUFBeUIsT0FBekI7QUFDQSxVQUFBLEtBQUksQ0FBQyxNQUFMLEdBQWMsVUFBVSxDQUFDLFlBQUs7QUFDNUIsZ0JBQU0sUUFBUSxHQUFhLE1BQU0sQ0FBQyxJQUFQLENBQVksV0FBWixDQUEzQjtBQUNBLGdCQUFNLElBQUksc0NBQVEsV0FBUixDQUFWO0FBQ0EsWUFBQSxLQUFJLENBQUMsV0FBTCxHQUFtQixFQUFuQjs7QUFFQSxnQkFBSSxPQUFPLENBQUMsR0FBUixDQUFZLFlBQVosS0FBNkIsTUFBakMsRUFBeUM7QUFDdkM7QUFDQSxjQUFBLE9BQU8sQ0FBQyxJQUFSLDBCQUErQixRQUEvQjtBQUNEOztBQUNELFlBQUEsS0FBSSxDQUFDLFFBQUwsQ0FBYyxRQUFkLEVBQ0csSUFESCxDQUNRLFVBQUEsR0FBRyxFQUFHO0FBQ1YsY0FBQSxRQUFRLENBQUMsT0FBVCxDQUFpQixVQUFBLEdBQUcsRUFBRztBQUNyQixvQkFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUQsQ0FBaEI7O0FBRHFCLDJCQUVLLElBQUksQ0FBQyxHQUFELENBQUosSUFBYSxFQUZsQjtBQUFBLHlDQUViLFFBRmE7QUFBQSxvQkFFYixRQUZhLDhCQUVGLEVBRkU7O0FBR3JCLGdCQUFBLEtBQUksQ0FBQyxLQUFMLENBQVcsR0FBWCxDQUFlLEdBQWYsRUFBb0IsSUFBcEI7O0FBQ0EsZ0JBQUEsUUFBUSxDQUFDLE9BQVQsQ0FBaUIsVUFBQSxDQUFDO0FBQUEseUJBQUksQ0FBQyxDQUFDLElBQUQsQ0FBTDtBQUFBLGlCQUFsQjtBQUNELGVBTEQ7QUFNRCxhQVJILFdBU1MsVUFBQSxLQUFLLEVBQUc7QUFDYixjQUFBLFFBQVEsQ0FBQyxPQUFULENBQWlCLFVBQUEsR0FBRyxFQUFHO0FBQUEsNEJBQ0ksSUFBSSxDQUFDLEdBQUQsQ0FBSixJQUFhLEVBRGpCO0FBQUEsMENBQ2IsT0FEYTtBQUFBLG9CQUNiLE9BRGEsOEJBQ0gsRUFERzs7QUFFckIsZ0JBQUEsT0FBTyxDQUFDLE9BQVIsQ0FBZ0IsVUFBQSxDQUFDO0FBQUEseUJBQUksQ0FBQyxDQUFDLEtBQUQsQ0FBTDtBQUFBLGlCQUFqQjtBQUNELGVBSEQ7QUFJRCxhQWRIO0FBZUQsV0F4QnVCLEVBd0JyQixLQUFJLENBQUMsT0F4QmdCLENBQXhCO0FBeUJEO0FBQ0YsT0E5Q00sQ0FBUDtBQStDRDs7Ozs7O0FBckRELHVCQUFBLENBREMsWUFDRCxDQUFBLEUsdUJBQUEsRSxLQUFBLEVBcURDLElBckREIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYWN0aW9uLCBJUmVhY3Rpb25EaXNwb3NlciB9IGZyb20gJ21vYngnO1xuaW1wb3J0IENhY2hlLCB7IHJlZnJlc2hDYWNoZU9wdGlvbnMgfSBmcm9tICcuL0NhY2hlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJvbWlzZU1lcmdlcjxWPiB7XG4gIHRpbWVvdXQ6IG51bWJlcjtcblxuICBjYWNoZTogQ2FjaGU8c3RyaW5nLCBWPjtcblxuICBwcm9taXNlTGlzdDogeyBba2V5OiBzdHJpbmddOiB7IHJlc29sdmVzOiBGdW5jdGlvbltdOyByZWplY3RzOiBGdW5jdGlvbltdIH0gfSA9IHt9O1xuXG4gIHdhaXRJRDtcblxuICBjYWxsYmFjazogKGNvZGVzKSA9PiBQcm9taXNlPHsgW2tleTogc3RyaW5nXTogViB9PjtcblxuICByZWFjdGlvbjogSVJlYWN0aW9uRGlzcG9zZXI7XG5cbiAgY29uc3RydWN0b3IoY2FsbGJhY2s6IChjb2RlcykgPT4gUHJvbWlzZTx7IFtrZXk6IHN0cmluZ106IFYgfT4sIGNvbmZpZywgdGltZW91dDogbnVtYmVyID0gMjAwKSB7XG4gICAgdGhpcy50aW1lb3V0ID0gdGltZW91dDtcbiAgICB0aGlzLmNhY2hlID0gbmV3IENhY2hlPHN0cmluZywgVj4oY29uZmlnKTtcbiAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgdGhpcy5yZWFjdGlvbiA9IHJlZnJlc2hDYWNoZU9wdGlvbnModGhpcy5jYWNoZSk7XG4gIH1cblxuICBkaXNwb3NlKCkge1xuICAgIHRoaXMucmVhY3Rpb24oKTtcbiAgfVxuXG4gIEBhY3Rpb25cbiAgYWRkKGNvZGU6IHN0cmluZyk6IFByb21pc2U8Vj4ge1xuICAgIGNvbnN0IHsgY2FjaGUsIHByb21pc2VMaXN0IH0gPSB0aGlzO1xuICAgIGNvbnN0IGl0ZW0gPSBjYWNoZS5nZXQoY29kZSk7XG4gICAgaWYgKGl0ZW0pIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoaXRlbSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgUHJvbWlzZTxWPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBsZXQgcHJvbWlzZSA9IHByb21pc2VMaXN0W2NvZGVdO1xuICAgICAgY29uc3QgcmVzb2x2ZUNhbGxiYWNrID0gKCkgPT4ge1xuICAgICAgICByZXNvbHZlKGNhY2hlLmdldChjb2RlKSk7XG4gICAgICB9O1xuICAgICAgY29uc3QgcmVqZWN0Q2FsbGJhY2sgPSAoKSA9PiB7XG4gICAgICAgIHJlamVjdCgpO1xuICAgICAgfTtcbiAgICAgIGlmIChwcm9taXNlKSB7XG4gICAgICAgIHByb21pc2UucmVzb2x2ZXMucHVzaChyZXNvbHZlQ2FsbGJhY2spO1xuICAgICAgICBwcm9taXNlLnJlamVjdHMucHVzaChyZWplY3RDYWxsYmFjayk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGhpcy53YWl0SUQpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy53YWl0SUQpO1xuICAgICAgICB9XG4gICAgICAgIHByb21pc2UgPSB7XG4gICAgICAgICAgcmVzb2x2ZXM6IFtyZXNvbHZlQ2FsbGJhY2tdLFxuICAgICAgICAgIHJlamVjdHM6IFtyZWplY3RDYWxsYmFja10sXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucHJvbWlzZUxpc3RbY29kZV0gPSBwcm9taXNlO1xuICAgICAgICB0aGlzLndhaXRJRCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGNvZGVMaXN0OiBzdHJpbmdbXSA9IE9iamVjdC5rZXlzKHByb21pc2VMaXN0KTtcbiAgICAgICAgICBjb25zdCBtZW1vID0geyAuLi5wcm9taXNlTGlzdCB9O1xuICAgICAgICAgIHRoaXMucHJvbWlzZUxpc3QgPSB7fTtcblxuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5MT0dHRVJfTEVWRUwgPT09ICdpbmZvJykge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhgYmF0Y2ggcmVxdWVzdDogJHtjb2RlTGlzdH1gKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5jYWxsYmFjayhjb2RlTGlzdClcbiAgICAgICAgICAgIC50aGVuKHJlcyA9PiB7XG4gICAgICAgICAgICAgIGNvZGVMaXN0LmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gcmVzW2tleV07XG4gICAgICAgICAgICAgICAgY29uc3QgeyByZXNvbHZlcyA9IFtdIH0gPSBtZW1vW2tleV0gfHwge307XG4gICAgICAgICAgICAgICAgdGhpcy5jYWNoZS5zZXQoa2V5LCBkYXRhKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlcy5mb3JFYWNoKHIgPT4gcihkYXRhKSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgICAgIGNvZGVMaXN0LmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHJlamVjdHMgPSBbXSB9ID0gbWVtb1trZXldIHx8IHt9O1xuICAgICAgICAgICAgICAgIHJlamVjdHMuZm9yRWFjaChyID0+IHIoZXJyb3IpKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSwgdGhpcy50aW1lb3V0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuIl19