ded74f25632840e69141ce039524def8
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _createReactClass = _interopRequireDefault(require("create-react-class"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _KeyCode = _interopRequireDefault(require("../../_util/KeyCode"));

var _CalendarHeader = _interopRequireDefault(require("./calendar/CalendarHeader"));

var _CalendarFooter = _interopRequireDefault(require("./calendar/CalendarFooter"));

var _CalendarMixin = _interopRequireDefault(require("./mixin/CalendarMixin"));

var _CommonMixin = _interopRequireDefault(require("./mixin/CommonMixin"));

var MonthCalendar = (0, _createReactClass["default"])({
  displayName: "MonthCalendar",
  propTypes: {
    monthCellRender: _propTypes["default"].func,
    dateCellRender: _propTypes["default"].func
  },
  mixins: [_CommonMixin["default"], _CalendarMixin["default"]],
  getInitialState: function getInitialState() {
    return {
      mode: 'month'
    };
  },
  onKeyDown: function onKeyDown(event) {
    var keyCode = event.keyCode;
    var ctrlKey = event.ctrlKey || event.metaKey;
    var stateValue = this.state.value;
    var disabledDate = this.props.disabledDate;
    var value = stateValue;

    switch (keyCode) {
      case _KeyCode["default"].DOWN:
        value = stateValue.clone();
        value.add(3, 'months');
        break;

      case _KeyCode["default"].UP:
        value = stateValue.clone();
        value.add(-3, 'months');
        break;

      case _KeyCode["default"].LEFT:
        value = stateValue.clone();

        if (ctrlKey) {
          value.add(-1, 'years');
        } else {
          value.add(-1, 'months');
        }

        break;

      case _KeyCode["default"].RIGHT:
        value = stateValue.clone();

        if (ctrlKey) {
          value.add(1, 'years');
        } else {
          value.add(1, 'months');
        }

        break;

      case _KeyCode["default"].ENTER:
        if (!disabledDate || !disabledDate(stateValue)) {
          this.onSelect(stateValue);
        }

        event.preventDefault();
        return 1;

      default:
        return undefined;
    }

    if (value !== stateValue) {
      this.setValue(value);
      event.preventDefault();
      return 1;
    }
  },
  handlePanelChange: function handlePanelChange(_, mode) {
    if (mode !== 'date') {
      this.setState({
        mode: mode
      });
    }
  },
  render: function render() {
    var props = this.props,
        state = this.state;
    var mode = state.mode,
        value = state.value;

    var children = _react["default"].createElement("div", {
      className: "".concat(props.prefixCls, "-month-calendar-content")
    }, _react["default"].createElement("div", {
      className: "".concat(props.prefixCls, "-month-header-wrap")
    }, _react["default"].createElement(_CalendarHeader["default"], {
      prefixCls: props.prefixCls,
      mode: mode,
      value: value,
      locale: props.locale,
      disabledMonth: props.disabledDate,
      monthCellRender: props.monthCellRender,
      monthCellContentRender: props.monthCellContentRender,
      onMonthSelect: this.onSelect,
      onValueChange: this.setValue,
      onPanelChange: this.handlePanelChange
    })), _react["default"].createElement(_CalendarFooter["default"], {
      prefixCls: props.prefixCls,
      renderFooter: props.renderFooter
    }));

    return this.renderRoot({
      className: "".concat(props.prefixCls, "-month-calendar"),
      children: children
    });
  }
});
var _default = MonthCalendar;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,