{"version":3,"sources":["TabContent.jsx"],"names":["TabContent","displayName","propTypes","animated","PropTypes","bool","animatedWithMargin","prefixCls","string","children","any","activeKey","style","tabBarPosition","getDefaultProps","getTabPanes","props","newChildren","Children","forEach","child","index","key","active","push","destroyInactiveTabPane","rootPrefixCls","render","classes","activeIndex","animatedStyle","display"],"mappings":"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","sourcesContent":["import React, { Children, cloneElement } from 'react';\nimport createReactClass from 'create-react-class';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { generateKey, getActiveIndex, getMarginStyle, getTransformByIndex, getTransformPropValue } from './utils';\n\nconst TabContent = createReactClass({\n  displayName: 'TabContent',\n  propTypes: {\n    animated: PropTypes.bool,\n    animatedWithMargin: PropTypes.bool,\n    prefixCls: PropTypes.string,\n    children: PropTypes.any,\n    activeKey: PropTypes.string,\n    style: PropTypes.any,\n    tabBarPosition: PropTypes.string,\n  },\n  getDefaultProps() {\n    return {\n      animated: true,\n    };\n  },\n  getTabPanes() {\n    const props = this.props;\n    const activeKey = props.activeKey;\n    const children = props.children;\n    const newChildren = [];\n\n    Children.forEach(children, (child, index) => {\n      if (!child) {\n        return;\n      }\n      const key = generateKey(child.key, index);\n      const active = activeKey === key;\n      newChildren.push(cloneElement(child, {\n        key,\n        active,\n        destroyInactiveTabPane: props.destroyInactiveTabPane,\n        rootPrefixCls: props.prefixCls,\n      }));\n    });\n\n    return newChildren;\n  },\n  render() {\n    const { props } = this;\n    const {\n      prefixCls, children, activeKey,\n      tabBarPosition, animated, animatedWithMargin,\n    } = props;\n    let { style } = props;\n    const classes = classnames({\n      [`${prefixCls}-content`]: true,\n      [animated ? `${prefixCls}-content-animated` : `${prefixCls}-content-no-animated`]: true,\n    });\n    if (animated) {\n      const activeIndex = getActiveIndex(children, activeKey);\n      if (activeIndex !== -1) {\n        const animatedStyle = animatedWithMargin ? getMarginStyle(activeIndex, tabBarPosition) : getTransformPropValue(getTransformByIndex(activeIndex, tabBarPosition));\n        style = {\n          ...style,\n          ...animatedStyle,\n        };\n      } else {\n        style = {\n          ...style,\n          display: 'none',\n        };\n      }\n    }\n    return (\n      <div\n        className={classes}\n        style={style}\n      >\n        {this.getTabPanes()}\n      </div>\n    );\n  },\n});\n\nexport default TabContent;\n"]}