{"version":3,"sources":["createMention.jsx"],"names":["findWithRegex","regex","contentBlock","callback","text","getText","matchArr","start","exec","index","length","mentionContentStrategy","contentState","findEntityRanges","character","entityKey","getEntity","getType","MentionContentComponent","props","tag","callbacks","getEditorState","getCurrentContent","data","getData","createMention","config","onChange","noop","onUpArrow","onDownArrow","setEditorState","handleReturn","onBlur","componentProps","mentionStore","suggestionRegex","prefix","MentionContent","decorators","strategy","component","mentionStyle","mode","unshift","name","Suggestions","editorState","exportContent"],"mappings":"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","sourcesContent":["import React, { createElement } from 'react';\nimport noop from 'lodash/noop';\nimport Suggestions from '../component/Suggestions.react';\nimport SuggestionPortal from '../component/SuggestionPortal.react';\nimport MentionContent from '../component/MentionContent.react';\nimport mentionStore from '../model/mentionStore';\nimport exportContent from './exportContent';\nimport getRegExp from '../utils/getRegExp';\n\nfunction findWithRegex(regex, contentBlock, callback) {\n  // Get the text from the contentBlock\n  const text = contentBlock.getText();\n  let matchArr;\n  let start; // eslint-disable-line\n  // Go through all matches in the text and return the indizes to the callback\n  while ((matchArr = regex.exec(text)) !== null) { // eslint-disable-line\n    start = matchArr.index;\n    callback(start, start + matchArr[0].length);\n  }\n}\n\nfunction mentionContentStrategy(contentBlock, callback, contentState) {\n  contentBlock.findEntityRanges((character) => {\n    const entityKey = character.getEntity();\n    return entityKey && contentState.getEntity(entityKey).getType() === 'mention';\n  }, callback);\n}\n\nconst MentionContentComponent = (props) => {\n  const { entityKey, tag, callbacks } = props;\n  const contentState = callbacks.getEditorState().getCurrentContent();\n  const data = contentState.getEntity(entityKey).getData();\n  return createElement(tag, { ...props, data });\n};\n\nexport default function createMention(config = {}) {\n  const callbacks = {\n    onChange: noop,\n    onUpArrow: noop,\n    onDownArrow: noop,\n    getEditorState: noop,\n    setEditorState: noop,\n    handleReturn: noop,\n    onBlur: noop,\n  };\n  const componentProps = {\n    callbacks,\n    mentionStore,\n  };\n  const suggestionRegex = getRegExp(config.prefix);\n\n  const tag = config.tag || MentionContent;\n  const decorators = [{\n    strategy: (contentBlock, callback) => {\n      findWithRegex(suggestionRegex, contentBlock, callback);\n    },\n    component: props => (<SuggestionPortal\n      {...props}\n      {...componentProps}\n      style={config.mentionStyle}\n      suggestionRegex={getRegExp(config.prefix)}\n    />),\n  }];\n  if (config.mode !== 'immutable') {\n    decorators.unshift({\n      strategy: mentionContentStrategy,\n      component: props => <MentionContentComponent tag={tag} {...props} callbacks={callbacks} />,\n    });\n  }\n\n  return {\n    name: 'mention',\n    Suggestions: props => (<Suggestions {...props}\n      {...componentProps}\n      store={mentionStore}\n    />),\n    decorators,\n    onChange: (editorState) => {\n      return callbacks.onChange ? callbacks.onChange(editorState) : editorState;\n    },\n    callbacks,\n    export: exportContent,\n  };\n}\n"]}