e5c9343d0f29e1d5092c063dbf4ccb94
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _moment = _interopRequireDefault(require("moment"));

var _ = _interopRequireDefault(require(".."));

var _utils = require("../../../tests/utils");

var _utils2 = require("./utils");

var _focusTest = _interopRequireDefault(require("../../../tests/shared/focusTest"));

var RangePicker = _["default"].RangePicker;
describe('RangePicker', function () {
  (0, _focusTest["default"])(RangePicker);
  beforeEach(function () {
    (0, _utils.setMockDate)();
  });
  afterEach(function () {
    (0, _utils.resetMockDate)();
  });
  it('show month panel according to value', function () {
    var birthday = (0, _moment["default"])('2000-01-01', 'YYYY-MM-DD').locale('zh-cn');
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(RangePicker, {
      getCalendarContainer: function getCalendarContainer(trigger) {
        return trigger;
      },
      format: "YYYY/MM/DD",
      showTime: true,
      open: true
    }));
    wrapper.setProps({
      value: [birthday, birthday]
    });
    expect((0, _enzyme.render)(wrapper.find('Trigger').instance().getComponent())).toMatchSnapshot();
  });
  it('switch to corresponding month panel when click presetted ranges', function () {
    var birthday = (0, _moment["default"])('2000-01-01', 'YYYY-MM-DD').locale('zh-cn');
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(RangePicker, {
      ranges: {
        'My Birthday': [birthday, birthday]
      },
      getCalendarContainer: function getCalendarContainer(trigger) {
        return trigger;
      },
      format: "YYYY/MM/DD",
      showTime: true,
      open: true
    }));
    var rangeCalendarWrapper = (0, _enzyme.mount)(wrapper.find('Trigger').instance().getComponent());
    rangeCalendarWrapper.find('.c7n-calendar-range-quick-selector a').simulate('click');
    expect((0, _enzyme.render)(wrapper.find('Trigger').instance().getComponent())).toMatchSnapshot();
  });
  it('highlight range when hover presetted range', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(RangePicker, {
      ranges: {
        'This Month': [(0, _moment["default"])().startOf('month'), (0, _moment["default"])().endOf('month')]
      },
      getCalendarContainer: function getCalendarContainer(trigger) {
        return trigger;
      },
      format: "YYYY/MM/DD",
      open: true
    }));
    var rangeCalendarWrapper = (0, _enzyme.mount)(wrapper.find('Trigger').instance().getComponent());
    rangeCalendarWrapper.find('.c7n-calendar-range-quick-selector a').simulate('mouseEnter');
    rangeCalendarWrapper = (0, _enzyme.mount)(wrapper.find('Trigger').instance().getComponent());
    expect(rangeCalendarWrapper.find('.c7n-calendar-selected-day').length).toBe(2);
  });
  it('should trigger onCalendarChange when change value', function () {
    var onCalendarChangeFn = jest.fn();
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(RangePicker, {
      getCalendarContainer: function getCalendarContainer(trigger) {
        return trigger;
      },
      onCalendarChange: onCalendarChangeFn,
      open: true
    }));
    var rangeCalendarWrapper = (0, _enzyme.mount)(wrapper.find('Trigger').instance().getComponent());
    rangeCalendarWrapper.find('.c7n-calendar-cell').at(15).simulate('click');
    expect(onCalendarChangeFn).toHaveBeenCalled();
  });
  it('should not throw error when value is reset to `[]`', function () {
    var birthday = (0, _moment["default"])('2000-01-01', 'YYYY-MM-DD');
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(RangePicker, {
      getCalendarContainer: function getCalendarContainer(trigger) {
        return trigger;
      },
      value: [birthday, birthday],
      open: true
    }));
    wrapper.setProps({
      value: []
    });
    var rangeCalendarWrapper = (0, _enzyme.mount)(wrapper.find('Trigger').instance().getComponent());
    expect(function () {
      return rangeCalendarWrapper.find('.c7n-calendar-cell').at(15).simulate('click').simulate('click');
    }).not.toThrow();
  });
  it('should not throw error when select after clear', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(RangePicker, {
      getCalendarContainer: function getCalendarContainer(trigger) {
        return trigger;
      },
      open: true
    }));
    var rangeCalendarWrapper = (0, _enzyme.mount)(wrapper.find('Trigger').instance().getComponent());
    rangeCalendarWrapper.find('.c7n-calendar-cell').at(15).simulate('click').simulate('click');
    wrapper.update();
    wrapper.find('.c7n-calendar-picker-clear').hostNodes().simulate('click');
    wrapper.find('.c7n-calendar-picker-input').simulate('click');
    rangeCalendarWrapper = (0, _enzyme.mount)(wrapper.find('Trigger').instance().getComponent());
    expect(function () {
      return rangeCalendarWrapper.find('.c7n-calendar-cell').at(15).simulate('click').simulate('click');
    }).not.toThrow();
  });
  it('clear hover value after panel close', function () {
    jest.useFakeTimers();
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement("div", null, _react["default"].createElement(RangePicker, {
      value: [(0, _moment["default"])(), (0, _moment["default"])().add(2, 'day')]
    })));
    wrapper.find('.c7n-calendar-picker-input').simulate('click');
    wrapper.find('.c7n-calendar-cell').at(25).simulate('click');
    wrapper.find('.c7n-calendar-cell').at(27).simulate('mouseEnter');
    document.dispatchEvent(new MouseEvent('mousedown'));
    jest.runAllTimers();
    wrapper.find('.c7n-calendar-picker-input').simulate('click');
    expect(wrapper.find('.c7n-calendar-cell').at(23).hasClass('c7n-calendar-in-range-cell')).toBe(true);
  });
  describe('preset range', function () {
    it('static range', function () {
      var range = [(0, _moment["default"])().subtract(2, 'd'), (0, _moment["default"])()];
      var format = 'YYYY-MM-DD HH:mm:ss';
      var wrapper = (0, _enzyme.mount)(_react["default"].createElement(RangePicker, {
        ranges: {
          'recent two days': range
        },
        format: format
      }));
      wrapper.find('.c7n-calendar-picker-input').simulate('click');
      wrapper.find('.c7n-calendar-range-quick-selector a').simulate('click');
      expect(wrapper.find('.c7n-calendar-range-picker-input').first().getDOMNode().value).toBe(range[0].format(format));
      expect(wrapper.find('.c7n-calendar-range-picker-input').last().getDOMNode().value).toBe(range[1].format(format));
    });
    it('function range', function () {
      var range = [(0, _moment["default"])().subtract(2, 'd'), (0, _moment["default"])()];
      var format = 'YYYY-MM-DD HH:mm:ss';
      var wrapper = (0, _enzyme.mount)(_react["default"].createElement(RangePicker, {
        ranges: {
          'recent two days': function recentTwoDays() {
            return range;
          }
        },
        format: format
      }));
      wrapper.find('.c7n-calendar-picker-input').simulate('click');
      wrapper.find('.c7n-calendar-range-quick-selector a').simulate('click');
      expect(wrapper.find('.c7n-calendar-range-picker-input').first().getDOMNode().value).toBe(range[0].format(format));
      expect(wrapper.find('.c7n-calendar-range-picker-input').last().getDOMNode().value).toBe(range[1].format(format));
    });
  });
  it('input date manually', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(RangePicker, {
      open: true
    }));
    var dateString = '2008-12-31';
    var input = wrapper.find('.c7n-calendar-input').first();
    input.simulate('change', {
      target: {
        value: dateString
      }
    });
    expect(input.getDOMNode().value).toBe(dateString);
  });
  it('triggers onOk when click on preset range', function () {
    var handleOk = jest.fn();
    var range = [(0, _moment["default"])().subtract(2, 'd'), (0, _moment["default"])()];
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(RangePicker, {
      ranges: {
        'recent two days': range
      },
      onOk: handleOk
    }));
    wrapper.find('.c7n-calendar-picker-input').simulate('click');
    wrapper.find('.c7n-calendar-range-quick-selector a').simulate('click');
    expect(handleOk).toHaveBeenCalledWith(range);
  });
  it('invali end date not throw error', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(RangePicker, null));
    wrapper.find('.c7n-calendar-picker-input').simulate('click');
    (0, _utils2.selectDate)(wrapper, (0, _moment["default"])('2017-09-18'), 0);
    (0, _utils2.selectDate)(wrapper, (0, _moment["default"])('2017-10-18'), 1);
    wrapper.find('.c7n-calendar-picker-input').simulate('click');
    expect(function () {
      return wrapper.find('.c7n-calendar-input').at(1).simulate('change', {
        target: {
          value: '2016-01-01'
        }
      });
    }).not.toThrow();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJhbmdlUGlja2VyLnRlc3QuanMiXSwibmFtZXMiOlsiUmFuZ2VQaWNrZXIiLCJEYXRlUGlja2VyIiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwiYWZ0ZXJFYWNoIiwiaXQiLCJiaXJ0aGRheSIsImxvY2FsZSIsIndyYXBwZXIiLCJ0cmlnZ2VyIiwic2V0UHJvcHMiLCJ2YWx1ZSIsImV4cGVjdCIsImZpbmQiLCJpbnN0YW5jZSIsImdldENvbXBvbmVudCIsInRvTWF0Y2hTbmFwc2hvdCIsInJhbmdlQ2FsZW5kYXJXcmFwcGVyIiwic2ltdWxhdGUiLCJzdGFydE9mIiwiZW5kT2YiLCJsZW5ndGgiLCJ0b0JlIiwib25DYWxlbmRhckNoYW5nZUZuIiwiamVzdCIsImZuIiwiYXQiLCJ0b0hhdmVCZWVuQ2FsbGVkIiwibm90IiwidG9UaHJvdyIsInVwZGF0ZSIsImhvc3ROb2RlcyIsInVzZUZha2VUaW1lcnMiLCJhZGQiLCJkb2N1bWVudCIsImRpc3BhdGNoRXZlbnQiLCJNb3VzZUV2ZW50IiwicnVuQWxsVGltZXJzIiwiaGFzQ2xhc3MiLCJyYW5nZSIsInN1YnRyYWN0IiwiZm9ybWF0IiwiZmlyc3QiLCJnZXRET01Ob2RlIiwibGFzdCIsImRhdGVTdHJpbmciLCJpbnB1dCIsInRhcmdldCIsImhhbmRsZU9rIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7SUFFUUEsVyxHQUFnQkMsWSxDQUFoQkQsVztBQUVSRSxRQUFRLENBQUMsYUFBRCxFQUFnQixZQUFNO0FBQzVCLDZCQUFVRixXQUFWO0FBRUFHLEVBQUFBLFVBQVUsQ0FBQyxZQUFNO0FBQ2Y7QUFDRCxHQUZTLENBQVY7QUFJQUMsRUFBQUEsU0FBUyxDQUFDLFlBQU07QUFDZDtBQUNELEdBRlEsQ0FBVDtBQUlBQyxFQUFBQSxFQUFFLENBQUMscUNBQUQsRUFBd0MsWUFBTTtBQUM5QyxRQUFNQyxRQUFRLEdB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cEQ7QUFDQU4sSUFBQUEsTUFBTSxDQUFDO0FBQUEsYUFDTEosT0FBTyxDQUNKSyxJQURILENBQ1EscUJBRFIsRUFFR2EsRUFGSCxDQUVNLENBRk4sRUFHR1IsUUFISCxDQUdZLFFBSFosRUFHc0I7QUFBRTZCLFFBQUFBLE1BQU0sRUFBRTtBQUFFcEMsVUFBQUEsS0FBSyxFQUFFO0FBQVQ7QUFBVixPQUh0QixDQURLO0FBQUEsS0FBRCxDQUFOLENBS0VpQixHQUxGLENBS01DLE9BTE47QUFNRCxHQVpDLENBQUY7QUFhRCxDQXpRTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IG1vdW50LCByZW5kZXIgfSBmcm9tICdlbnp5bWUnO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IERhdGVQaWNrZXIgZnJvbSAnLi4nO1xuaW1wb3J0IHsgc2V0TW9ja0RhdGUsIHJlc2V0TW9ja0RhdGUgfSBmcm9tICcuLi8uLi8uLi90ZXN0cy91dGlscyc7XG5pbXBvcnQgeyBzZWxlY3REYXRlIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgZm9jdXNUZXN0IGZyb20gJy4uLy4uLy4uL3Rlc3RzL3NoYXJlZC9mb2N1c1Rlc3QnO1xuXG5jb25zdCB7IFJhbmdlUGlja2VyIH0gPSBEYXRlUGlja2VyO1xuXG5kZXNjcmliZSgnUmFuZ2VQaWNrZXInLCAoKSA9PiB7XG4gIGZvY3VzVGVzdChSYW5nZVBpY2tlcik7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgc2V0TW9ja0RhdGUoKTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICByZXNldE1vY2tEYXRlKCk7XG4gIH0pO1xuXG4gIGl0KCdzaG93IG1vbnRoIHBhbmVsIGFjY29yZGluZyB0byB2YWx1ZScsICgpID0+IHtcbiAgICBjb25zdCBiaXJ0aGRheSA9IG1vbWVudCgnMjAwMC0wMS0wMScsICdZWVlZLU1NLUREJykubG9jYWxlKCd6aC1jbicpO1xuICAgIGNvbnN0IHdyYXBwZXIgPSBtb3VudChcbiAgICAgIDxSYW5nZVBpY2tlciBnZXRDYWxlbmRhckNvbnRhaW5lcj17dHJpZ2dlciA9PiB0cmlnZ2VyfSBmb3JtYXQ9XCJZWVlZL01NL0REXCIgc2hvd1RpbWUgb3BlbiAvPixcbiAgICApO1xuXG4gICAgd3JhcHBlci5zZXRQcm9wcyh7IHZhbHVlOiBbYmlydGhkYXksIGJpcnRoZGF5XSB9KTtcbiAgICBleHBlY3QoXG4gICAgICByZW5kZXIoXG4gICAgICAgIHdyYXBwZXJcbiAgICAgICAgICAuZmluZCgnVHJpZ2dlcicpXG4gICAgICAgICAgLmluc3RhbmNlKClcbiAgICAgICAgICAuZ2V0Q29tcG9uZW50KCksXG4gICAgICApLFxuICAgICkudG9NYXRjaFNuYXBzaG90KCk7XG4gIH0pO1xuXG4gIGl0KCdzd2l0Y2ggdG8gY29ycmVzcG9uZGluZyBtb250aCBwYW5lbCB3aGVuIGNsaWNrIHByZXNldHRlZCByYW5nZXMnLCAoKSA9PiB7XG4gICAgY29uc3QgYmlydGhkYXkgPSBtb21lbnQoJzIwMDAtMDEtMDEnLCAnWVlZWS1NTS1ERCcpLmxvY2FsZSgnemgtY24nKTtcbiAgICBjb25zdCB3cmFwcGVyID0gbW91bnQoXG4gICAgICA8UmFuZ2VQaWNrZXJcbiAgICAgICAgcmFuZ2VzPXt7XG4gICAgICAgICAgJ015IEJpcnRoZGF5JzogW2JpcnRoZGF5LCBiaXJ0aGRheV0sXG4gICAgICAgIH19XG4gICAgICAgIGdldENhbGVuZGFyQ29udGFpbmVyPXt0cmlnZ2VyID0+IHRyaWdnZXJ9XG4gICAgICAgIGZvcm1hdD1cIllZWVkvTU0vRERcIlxuICAgICAgICBzaG93VGltZVxuICAgICAgICBvcGVuXG4gICAgICAvPixcbiAgICApO1xuXG4gICAgY29uc3QgcmFuZ2VDYWxlbmRhcldyYXBwZXIgPSBtb3VudChcbiAgICAgIHdyYXBwZXJcbiAgICAgICAgLmZpbmQoJ1RyaWdnZXInKVxuICAgICAgICAuaW5zdGFuY2UoKVxuICAgICAgICAuZ2V0Q29tcG9uZW50KCksXG4gICAgKTtcbiAgICByYW5nZUNhbGVuZGFyV3JhcHBlci5maW5kKCcuYzduLWNhbGVuZGFyLXJhbmdlLXF1aWNrLXNlbGVjdG9yIGEnKS5zaW11bGF0ZSgnY2xpY2snKTtcbiAgICBleHBlY3QoXG4gICAgICByZW5kZXIoXG4gICAgICAgIHdyYXBwZXJcbiAgICAgICAgICAuZmluZCgnVHJpZ2dlcicpXG4gICAgICAgICAgLmluc3RhbmNlKClcbiAgICAgICAgICAuZ2V0Q29tcG9uZW50KCksXG4gICAgICApLFxuICAgICkudG9NYXRjaFNuYXBzaG90KCk7XG4gIH0pO1xuXG4gIGl0KCdoaWdobGlnaHQgcmFuZ2Ugd2hlbiBob3ZlciBwcmVzZXR0ZWQgcmFuZ2UnLCAoKSA9PiB7XG4gICAgY29uc3Qgd3JhcHBlciA9IG1vdW50KFxuICAgICAgPFJhbmdlUGlja2VyXG4gICAgICAgIHJhbmdlcz17e1xuICAgICAgICAgICdUaGlzIE1vbnRoJzogW21vbWVudCgpLnN0YXJ0T2YoJ21vbnRoJyksIG1vbWVudCgpLmVuZE9mKCdtb250aCcpXSxcbiAgICAgICAgfX1cbiAgICAgICAgZ2V0Q2FsZW5kYXJDb250YWluZXI9e3RyaWdnZXIgPT4gdHJpZ2dlcn1cbiAgICAgICAgZm9ybWF0PVwiWVlZWS9NTS9ERFwiXG4gICAgICAgIG9wZW5cbiAgICAgIC8+LFxuICAgICk7XG5cbiAgICBsZXQgcmFuZ2VDYWxlbmRhcldyYXBwZXIgPSBtb3VudChcbiAgICAgIHdyYXBwZXJcbiAgICAgICAgLmZpbmQoJ1RyaWdnZXInKVxuICAgICAgICAuaW5zdGFuY2UoKVxuICAgICAgICAuZ2V0Q29tcG9uZW50KCksXG4gICAgKTtcbiAgICByYW5nZUNhbGVuZGFyV3JhcHBlci5maW5kKCcuYzduLWNhbGVuZGFyLXJhbmdlLXF1aWNrLXNlbGVjdG9yIGEnKS5zaW11bGF0ZSgnbW91c2VFbnRlcicpO1xuICAgIHJhbmdlQ2FsZW5kYXJXcmFwcGVyID0gbW91bnQoXG4gICAgICB3cmFwcGVyXG4gICAgICAgIC5maW5kKCdUcmlnZ2VyJylcbiAgICAgICAgLmluc3RhbmNlKClcbiAgICAgICAgLmdldENvbXBvbmVudCgpLFxuICAgICk7XG4gICAgZXhwZWN0KHJhbmdlQ2FsZW5kYXJXcmFwcGVyLmZpbmQoJy5jN24tY2FsZW5kYXItc2VsZWN0ZWQtZGF5JykubGVuZ3RoKS50b0JlKDIpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHRyaWdnZXIgb25DYWxlbmRhckNoYW5nZSB3aGVuIGNoYW5nZSB2YWx1ZScsICgpID0+IHtcbiAgICBjb25zdCBvbkNhbGVuZGFyQ2hhbmdlRm4gPSBqZXN0LmZuKCk7XG4gICAgY29uc3Qgd3JhcHBlciA9IG1vdW50KFxuICAgICAgPFJhbmdlUGlja2VyXG4gICAgICAgIGdldENhbGVuZGFyQ29udGFpbmVyPXt0cmlnZ2VyID0+IHRyaWdnZXJ9XG4gICAgICAgIG9uQ2FsZW5kYXJDaGFuZ2U9e29uQ2FsZW5kYXJDaGFuZ2VGbn1cbiAgICAgICAgb3BlblxuICAgICAgLz4sXG4gICAgKTtcbiAgICBjb25zdCByYW5nZUNhbGVuZGFyV3JhcHBlciA9IG1vdW50KFxuICAgICAgd3JhcHBlclxuICAgICAgICAuZmluZCgnVHJpZ2dlcicpXG4gICAgICAgIC5pbnN0YW5jZSgpXG4gICAgICAgIC5nZXRDb21wb25lbnQoKSxcbiAgICApO1xuICAgIHJhbmdlQ2FsZW5kYXJXcmFwcGVyXG4gICAgICAuZmluZCgnLmM3bi1jYWxlbmRhci1jZWxsJylcbiAgICAgIC5hdCgxNSlcbiAgICAgIC5zaW11bGF0ZSgnY2xpY2snKTtcbiAgICBleHBlY3Qob25DYWxlbmRhckNoYW5nZUZuKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgbm90IHRocm93IGVycm9yIHdoZW4gdmFsdWUgaXMgcmVzZXQgdG8gYFtdYCcsICgpID0+IHtcbiAgICBjb25zdCBiaXJ0aGRheSA9IG1vbWVudCgnMjAwMC0wMS0wMScsICdZWVlZLU1NLUREJyk7XG4gICAgY29uc3Qgd3JhcHBlciA9IG1vdW50KFxuICAgICAgPFJhbmdlUGlja2VyIGdldENhbGVuZGFyQ29udGFpbmVyPXt0cmlnZ2VyID0+IHRyaWdnZXJ9IHZhbHVlPXtbYmlydGhkYXksIGJpcnRoZGF5XX0gb3BlbiAvPixcbiAgICApO1xuICAgIHdyYXBwZXIuc2V0UHJvcHMoeyB2YWx1ZTogW10gfSk7XG4gICAgY29uc3QgcmFuZ2VDYWxlbmRhcldyYXBwZXIgPSBtb3VudChcbiAgICAgIHdyYXBwZXJcbiAgICAgICAgLmZpbmQoJ1RyaWdnZXInKVxuICAgICAgICAuaW5zdGFuY2UoKVxuICAgICAgICAuZ2V0Q29tcG9uZW50KCksXG4gICAgKTtcbiAgICBleHBlY3QoKCkgPT5cbiAgICAgIHJhbmdlQ2FsZW5kYXJXcmFwcGVyXG4gICAgICAgIC5maW5kKCcuYzduLWNhbGVuZGFyLWNlbGwnKVxuICAgICAgICAuYXQoMTUpXG4gICAgICAgIC5zaW11bGF0ZSgnY2xpY2snKVxuICAgICAgICAuc2ltdWxhdGUoJ2NsaWNrJyksXG4gICAgKS5ub3QudG9UaHJvdygpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIG5vdCB0aHJvdyBlcnJvciB3aGVuIHNlbGVjdCBhZnRlciBjbGVhcicsICgpID0+IHtcbiAgICBjb25zdCB3cmFwcGVyID0gbW91bnQoPFJhbmdlUGlja2VyIGdldENhbGVuZGFyQ29udGFpbmVyPXt0cmlnZ2VyID0+IHRyaWdnZXJ9IG9wZW4gLz4pO1xuICAgIGxldCByYW5nZUNhbGVuZGFyV3JhcHBlciA9IG1vdW50KFxuICAgICAgd3JhcHBlclxuICAgICAgICAuZmluZCgnVHJpZ2dlcicpXG4gICAgICAgIC5pbnN0YW5jZSgpXG4gICAgICAgIC5nZXRDb21wb25lbnQoKSxcbiAgICApO1xuICAgIHJhbmdlQ2FsZW5kYXJXcmFwcGVyXG4gICAgICAuZmluZCgnLmM3bi1jYWxlbmRhci1jZWxsJylcbiAgICAgIC5hdCgxNSlcbiAgICAgIC5zaW11bGF0ZSgnY2xpY2snKVxuICAgICAgLnNpbXVsYXRlKCdjbGljaycpO1xuICAgIHdyYXBwZXIudXBkYXRlKCk7XG4gICAgd3JhcHBlclxuICAgICAgLmZpbmQoJy5jN24tY2FsZW5kYXItcGlja2VyLWNsZWFyJylcbiAgICAgIC5ob3N0Tm9kZXMoKVxuICAgICAgLnNpbXVsYXRlKCdjbGljaycpO1xuICAgIHdyYXBwZXIuZmluZCgnLmM3bi1jYWxlbmRhci1waWNrZXItaW5wdXQnKS5zaW11bGF0ZSgnY2xpY2snKTtcbiAgICByYW5nZUNhbGVuZGFyV3JhcHBlciA9IG1vdW50KFxuICAgICAgd3JhcHBlclxuICAgICAgICAuZmluZCgnVHJpZ2dlcicpXG4gICAgICAgIC5pbnN0YW5jZSgpXG4gICAgICAgIC5nZXRDb21wb25lbnQoKSxcbiAgICApO1xuICAgIGV4cGVjdCgoKSA9PlxuICAgICAgcmFuZ2VDYWxlbmRhcldyYXBwZXJcbiAgICAgICAgLmZpbmQoJy5jN24tY2FsZW5kYXItY2VsbCcpXG4gICAgICAgIC5hdCgxNSlcbiAgICAgICAgLnNpbXVsYXRlKCdjbGljaycpXG4gICAgICAgIC5zaW11bGF0ZSgnY2xpY2snKSxcbiAgICApLm5vdC50b1Rocm93KCk7XG4gIH0pO1xuXG4gIGl0KCdjbGVhciBob3ZlciB2YWx1ZSBhZnRlciBwYW5lbCBjbG9zZScsICgpID0+IHtcbiAgICBqZXN0LnVzZUZha2VUaW1lcnMoKTtcbiAgICBjb25zdCB3cmFwcGVyID0gbW91bnQoXG4gICAgICA8ZGl2PlxuICAgICAgICA8UmFuZ2VQaWNrZXIgdmFsdWU9e1ttb21lbnQoKSwgbW9tZW50KCkuYWRkKDIsICdkYXknKV19IC8+XG4gICAgICA8L2Rpdj4sXG4gICAgKTtcbiAgICB3cmFwcGVyLmZpbmQoJy5jN24tY2FsZW5kYXItcGlja2VyLWlucHV0Jykuc2ltdWxhdGUoJ2NsaWNrJyk7XG4gICAgd3JhcHBlclxuICAgICAgLmZpbmQoJy5jN24tY2FsZW5kYXItY2VsbCcpXG4gICAgICAuYXQoMjUpXG4gICAgICAuc2ltdWxhdGUoJ2NsaWNrJyk7XG4gICAgd3JhcHBlclxuICAgICAgLmZpbmQoJy5jN24tY2FsZW5kYXItY2VsbCcpXG4gICAgICAuYXQoMjcpXG4gICAgICAuc2ltdWxhdGUoJ21vdXNlRW50ZXInKTtcbiAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBNb3VzZUV2ZW50KCdtb3VzZWRvd24nKSk7XG4gICAgamVzdC5ydW5BbGxUaW1lcnMoKTtcbiAgICB3cmFwcGVyLmZpbmQoJy5jN24tY2FsZW5kYXItcGlja2VyLWlucHV0Jykuc2ltdWxhdGUoJ2NsaWNrJyk7XG4gICAgZXhwZWN0KFxuICAgICAgd3JhcHBlclxuICAgICAgICAuZmluZCgnLmM3bi1jYWxlbmRhci1jZWxsJylcbiAgICAgICAgLmF0KDIzKVxuICAgICAgICAuaGFzQ2xhc3MoJ2M3bi1jYWxlbmRhci1pbi1yYW5nZS1jZWxsJyksXG4gICAgKS50b0JlKHRydWUpO1xuICB9KTtcblxuICBkZXNjcmliZSgncHJlc2V0IHJhbmdlJywgKCkgPT4ge1xuICAgIGl0KCdzdGF0aWMgcmFuZ2UnLCAoKSA9PiB7XG4gICAgICBjb25zdCByYW5nZSA9IFttb21lbnQoKS5zdWJ0cmFjdCgyLCAnZCcpLCBtb21lbnQoKV07XG4gICAgICBjb25zdCBmb3JtYXQgPSAnWVlZWS1NTS1ERCBISDptbTpzcyc7XG4gICAgICBjb25zdCB3cmFwcGVyID0gbW91bnQoPFJhbmdlUGlja2VyIHJhbmdlcz17eyAncmVjZW50IHR3byBkYXlzJzogcmFuZ2UgfX0gZm9ybWF0PXtmb3JtYXR9IC8+KTtcbiAgICAgIHdyYXBwZXIuZmluZCgnLmM3bi1jYWxlbmRhci1waWNrZXItaW5wdXQnKS5zaW11bGF0ZSgnY2xpY2snKTtcbiAgICAgIHdyYXBwZXIuZmluZCgnLmM3bi1jYWxlbmRhci1yYW5nZS1xdWljay1zZWxlY3RvciBhJykuc2ltdWxhdGUoJ2NsaWNrJyk7XG4gICAgICBleHBlY3QoXG4gICAgICAgIHdyYXBwZXJcbiAgICAgICAgICAuZmluZCgnLmM3bi1jYWxlbmRhci1yYW5nZS1waWNrZXItaW5wdXQnKVxuICAgICAgICAgIC5maXJzdCgpXG4gICAgICAgICAgLmdldERPTU5vZGUoKS52YWx1ZSxcbiAgICAgICkudG9CZShyYW5nZVswXS5mb3JtYXQoZm9ybWF0KSk7XG4gICAgICBleHBlY3QoXG4gICAgICAgIHdyYXBwZXJcbiAgICAgICAgICAuZmluZCgnLmM3bi1jYWxlbmRhci1yYW5nZS1waWNrZXItaW5wdXQnKVxuICAgICAgICAgIC5sYXN0KClcbiAgICAgICAgICAuZ2V0RE9NTm9kZSgpLnZhbHVlLFxuICAgICAgKS50b0JlKHJhbmdlWzFdLmZvcm1hdChmb3JtYXQpKTtcbiAgICB9KTtcblxuICAgIGl0KCdmdW5jdGlvbiByYW5nZScsICgpID0+IHtcbiAgICAgIGNvbnN0IHJhbmdlID0gW21vbWVudCgpLnN1YnRyYWN0KDIsICdkJyksIG1vbWVudCgpXTtcbiAgICAgIGNvbnN0IGZvcm1hdCA9ICdZWVlZLU1NLUREIEhIOm1tOnNzJztcbiAgICAgIGNvbnN0IHdyYXBwZXIgPSBtb3VudChcbiAgICAgICAgPFJhbmdlUGlja2VyIHJhbmdlcz17eyAncmVjZW50IHR3byBkYXlzJzogKCkgPT4gcmFuZ2UgfX0gZm9ybWF0PXtmb3JtYXR9IC8+LFxuICAgICAgKTtcbiAgICAgIHdyYXBwZXIuZmluZCgnLmM3bi1jYWxlbmRhci1waWNrZXItaW5wdXQnKS5zaW11bGF0ZSgnY2xpY2snKTtcbiAgICAgIHdyYXBwZXIuZmluZCgnLmM3bi1jYWxlbmRhci1yYW5nZS1xdWljay1zZWxlY3RvciBhJykuc2ltdWxhdGUoJ2NsaWNrJyk7XG4gICAgICBleHBlY3QoXG4gICAgICAgIHdyYXBwZXJcbiAgICAgICAgICAuZmluZCgnLmM3bi1jYWxlbmRhci1yYW5nZS1waWNrZXItaW5wdXQnKVxuICAgICAgICAgIC5maXJzdCgpXG4gICAgICAgICAgLmdldERPTU5vZGUoKS52YWx1ZSxcbiAgICAgICkudG9CZShyYW5nZVswXS5mb3JtYXQoZm9ybWF0KSk7XG4gICAgICBleHBlY3QoXG4gICAgICAgIHdyYXBwZXJcbiAgICAgICAgICAuZmluZCgnLmM3bi1jYWxlbmRhci1yYW5nZS1waWNrZXItaW5wdXQnKVxuICAgICAgICAgIC5sYXN0KClcbiAgICAgICAgICAuZ2V0RE9NTm9kZSgpLnZhbHVlLFxuICAgICAgKS50b0JlKHJhbmdlWzFdLmZvcm1hdChmb3JtYXQpKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgaXQoJ2lucHV0IGRhdGUgbWFudWFsbHknLCAoKSA9PiB7XG4gICAgY29uc3Qgd3JhcHBlciA9IG1vdW50KDxSYW5nZVBpY2tlciBvcGVuIC8+KTtcbiAgICBjb25zdCBkYXRlU3RyaW5nID0gJzIwMDgtMTItMzEnO1xuICAgIGNvbnN0IGlucHV0ID0gd3JhcHBlci5maW5kKCcuYzduLWNhbGVuZGFyLWlucHV0JykuZmlyc3QoKTtcbiAgICBpbnB1dC5zaW11bGF0ZSgnY2hhbmdlJywgeyB0YXJnZXQ6IHsgdmFsdWU6IGRhdGVTdHJpbmcgfSB9KTtcbiAgICBleHBlY3QoaW5wdXQuZ2V0RE9NTm9kZSgpLnZhbHVlKS50b0JlKGRhdGVTdHJpbmcpO1xuICB9KTtcblxuICBpdCgndHJpZ2dlcnMgb25PayB3aGVuIGNsaWNrIG9uIHByZXNldCByYW5nZScsICgpID0+IHtcbiAgICBjb25zdCBoYW5kbGVPayA9IGplc3QuZm4oKTtcbiAgICBjb25zdCByYW5nZSA9IFttb21lbnQoKS5zdWJ0cmFjdCgyLCAnZCcpLCBtb21lbnQoKV07XG4gICAgY29uc3Qgd3JhcHBlciA9IG1vdW50KDxSYW5nZVBpY2tlciByYW5nZXM9e3sgJ3JlY2VudCB0d28gZGF5cyc6IHJhbmdlIH19IG9uT2s9e2hhbmRsZU9rfSAvPik7XG4gICAgd3JhcHBlci5maW5kKCcuYzduLWNhbGVuZGFyLXBpY2tlci1pbnB1dCcpLnNpbXVsYXRlKCdjbGljaycpO1xuICAgIHdyYXBwZXIuZmluZCgnLmM3bi1jYWxlbmRhci1yYW5nZS1xdWljay1zZWxlY3RvciBhJykuc2ltdWxhdGUoJ2NsaWNrJyk7XG4gICAgZXhwZWN0KGhhbmRsZU9rKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChyYW5nZSk7XG4gIH0pO1xuXG4gIGl0KCdpbnZhbGkgZW5kIGRhdGUgbm90IHRocm93IGVycm9yJywgKCkgPT4ge1xuICAgIGNvbnN0IHdyYXBwZXIgPSBtb3VudCg8UmFuZ2VQaWNrZXIgLz4pO1xuICAgIHdyYXBwZXIuZmluZCgnLmM3bi1jYWxlbmRhci1waWNrZXItaW5wdXQnKS5zaW11bGF0ZSgnY2xpY2snKTtcbiAgICBzZWxlY3REYXRlKHdyYXBwZXIsIG1vbWVudCgnMjAxNy0wOS0xOCcpLCAwKTtcbiAgICBzZWxlY3REYXRlKHdyYXBwZXIsIG1vbWVudCgnMjAxNy0xMC0xOCcpLCAxKTtcbiAgICB3cmFwcGVyLmZpbmQoJy5jN24tY2FsZW5kYXItcGlja2VyLWlucHV0Jykuc2ltdWxhdGUoJ2NsaWNrJyk7XG4gICAgZXhwZWN0KCgpID0+XG4gICAgICB3cmFwcGVyXG4gICAgICAgIC5maW5kKCcuYzduLWNhbGVuZGFyLWlucHV0JylcbiAgICAgICAgLmF0KDEpXG4gICAgICAgIC5zaW11bGF0ZSgnY2hhbmdlJywgeyB0YXJnZXQ6IHsgdmFsdWU6ICcyMDE2LTAxLTAxJyB9IH0pLFxuICAgICkubm90LnRvVGhyb3coKTtcbiAgfSk7XG59KTtcbiJdfQ==