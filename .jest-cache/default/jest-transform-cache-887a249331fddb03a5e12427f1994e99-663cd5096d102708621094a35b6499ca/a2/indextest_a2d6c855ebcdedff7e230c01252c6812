9ef4f57c34d0094d0a6952e208ba8608
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _ = _interopRequireDefault(require(".."));

var _dataSet = _interopRequireDefault(require("../../data-set"));

var _focusTest = _interopRequireDefault(require("../../../tests/shared/focusTest"));

(0, _focusTest["default"])(_["default"]);
describe('Password input', function () {
  beforeEach(function () {
    jest.useFakeTimers();
  });
  afterEach(function () {
    jest.useRealTimers();
  });
  it('renders Password correctly', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], null));
    expect(wrapper).toMatchSnapshot();
  });
  it('renders Password reveal correctly', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], null));
    expect(wrapper.props().reveal).toEqual(true);
    expect(wrapper.find('.c7n-pro-password-inner-button')).toHaveLength(1);
    wrapper.setProps({
      reveal: false
    });
    wrapper.update();
    expect(wrapper.props().reveal).toEqual(false);
    expect(wrapper.find('.c7n-pro-password-inner-button')).toHaveLength(0);
  });
  it('renders input correctly', function () {
    var handleInput = jest.fn();
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      value: "reveal",
      onInput: handleInput
    }));
    wrapper.find('.c7n-pro-password').at(0).simulate('input', {
      target: {
        value: 'revealValue'
      }
    });
    jest.runAllTimers();
    expect(handleInput).toHaveBeenCalled();
  });
  it('renders reveal correctly', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      value: "reveal"
    }));
    expect(wrapper.find('.c7n-pro-password').at(0).prop('type')).toBe('password');
    wrapper.instance().doReveal(wrapper.instance());
    jest.runAllTimers();
    wrapper.update();
    expect(wrapper.find('.c7n-pro-password').at(0).prop('type')).toBe('text');
    wrapper.instance().resetReveal(wrapper.instance());
    jest.runAllTimers();
    wrapper.update();
    expect(wrapper.find('.c7n-pro-password').at(0).prop('type')).toBe('password');
  });
  it('the value will be controlled', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      value: "password"
    }));
    expect(wrapper.find('.c7n-pro-password').at(0).prop('value')).toBe('password');
    wrapper.setProps({
      value: 'setPass'
    });
    wrapper.update();
    expect(wrapper.find('.c7n-pro-password').at(0).prop('value')).toBe('setPass');
  });
  it('the icon should be changed when icon can click', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      value: "password"
    }));
    expect(wrapper.find('.icon-visibility_off')).toHaveLength(1);
    expect(wrapper.find('.icon-visibility')).toHaveLength(0);
    wrapper.find('.icon').simulate('click');
    jest.runAllTimers();
    wrapper.update();
    expect(wrapper.find('.icon-visibility_off')).toHaveLength(0);
    expect(wrapper.find('.icon-visibility')).toHaveLength(1);
  });
  it('the dataset  will be render correctly', function () {
    var handleDataSetChange = jest.fn();
    var ds = new _dataSet["default"]({
      autoCreate: true,
      fields: [{
        name: 'test',
        type: 'string',
        defaultValue: 'password',
        required: true
      }],
      events: {
        update: handleDataSetChange
      }
    });
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      dataSet: ds,
      name: "test"
    }));
    expect(wrapper.find('Password').props().name).toEqual('test');
    expect(wrapper.find('.c7n-pro-password').at(0).prop('value')).toBe('password');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,