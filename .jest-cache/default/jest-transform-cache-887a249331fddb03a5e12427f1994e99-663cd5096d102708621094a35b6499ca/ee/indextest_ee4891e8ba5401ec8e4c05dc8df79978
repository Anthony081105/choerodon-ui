1dcb88efb07d879fd0e49bf64afd8050
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _KeyCode = _interopRequireDefault(require("../../_util/KeyCode"));

var _ = _interopRequireDefault(require(".."));

var _focusTest = _interopRequireDefault(require("../../../tests/shared/focusTest"));

var options = [{
  value: 'zhejiang',
  label: 'Zhejiang',
  children: [{
    value: 'hangzhou',
    label: 'Hangzhou',
    children: [{
      value: 'xihu',
      label: 'West Lake'
    }]
  }]
}, {
  value: 'jiangsu',
  label: 'Jiangsu',
  children: [{
    value: 'nanjing',
    label: 'Nanjing',
    children: [{
      value: 'zhonghuamen',
      label: 'Zhong Hua Men'
    }]
  }]
}];
describe('Cascader', function () {
  (0, _focusTest["default"])(_["default"]);
  it('popup correctly when panel is hidden', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      options: options
    }));
    expect((0, _enzyme.render)(wrapper.find('Trigger').instance().getComponent())).toMatchSnapshot();
  });
  it('popup correctly when panel is open', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      options: options
    }));
    wrapper.find('input').simulate('click');
    expect((0, _enzyme.render)(wrapper.find('Trigger').instance().getComponent())).toMatchSnapshot();
  });
  it('support controlled mode', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      options: options
    }));
    wrapper.setProps({
      value: ['zhejiang', 'hangzhou', 'xihu']
    });
    expect(wrapper.render()).toMatchSnapshot();
  });
  it('popup correctly with defaultValue', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      options: options,
      defaultValue: ['zhejiang', 'hangzhou']
    }));
    wrapper.find('input').simulate('click');
    expect((0, _enzyme.render)(wrapper.find('Trigger').instance().getComponent())).toMatchSnapshot();
  });
  it('can be selected', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      options: options
    }));
    wrapper.find('input').simulate('click');
    var popupWrapper = (0, _enzyme.mount)(wrapper.find('Trigger').instance().getComponent());
    popupWrapper.find('.c7n-cascader-menu').at(0).find('.c7n-cascader-menu-item').at(0).simulate('click');
    expect((0, _enzyme.render)(wrapper.find('Trigger').instance().getComponent())).toMatchSnapshot();
    popupWrapper = (0, _enzyme.mount)(wrapper.find('Trigger').instance().getComponent());
    popupWrapper.find('.c7n-cascader-menu').at(1).find('.c7n-cascader-menu-item').at(0).simulate('click');
    expect((0, _enzyme.render)(wrapper.find('Trigger').instance().getComponent())).toMatchSnapshot();
    popupWrapper = (0, _enzyme.mount)(wrapper.find('Trigger').instance().getComponent());
    popupWrapper.find('.c7n-cascader-menu').at(2).find('.c7n-cascader-menu-item').at(0).simulate('click');
    expect((0, _enzyme.render)(wrapper.find('Trigger').instance().getComponent())).toMatchSnapshot();
  });
  it('backspace should work with `Cascader[showSearch]`', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      options: options,
      showSearch: true
    }));
    wrapper.find('input').simulate('change', {
      target: {
        value: '123'
      }
    });
    expect(wrapper.state('inputValue')).toBe('123');
    wrapper.find('input').simulate('keydown', {
      keyCode: _KeyCode["default"].BACKSPACE
    }); // Simulate onKeyDown will not trigger onChange by default, so the value is still '123'

    expect(wrapper.state('inputValue')).toBe('123');
  });
  it('when use single mode you can look only menu items', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      options: options,
      menuMode: "single"
    }));
    wrapper.find('input').simulate('click');
    expect(wrapper.find('.c7n-cascader-menu-single').length).toBe(1);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,