{"version":3,"sources":["PropTypes.jsx"],"names":["nonEmptyStringType","props","propsName","value","Error","valueType","propName","componentName","labelInValueShape","PropTypes","shape","label","node","labelInValue","validate","oneOfType","arrayOf","error","arguments","treeCheckable","treeCheckStrictly","multiple","string","SelectPropTypes","className","prefixCls","bool","filterTreeNode","any","showSearch","disabled","showArrow","allowClear","defaultOpen","open","transitionName","animation","choiceTransitionName","onClick","func","onChange","onSelect","onDeselect","onSearch","searchPlaceholder","placeholder","inputValue","defaultValue","defaultLabel","dropdownStyle","object","dropdownPopupAlign","onDropdownVisibleChange","maxTagTextLength","number","showCheckedStrategy","oneOf","SHOW_ALL","SHOW_PARENT","SHOW_CHILD","treeIcon","treeLine","treeDefaultExpandAll","treeNodeLabelProp","treeNodeFilterProp","treeData","array","treeDataSimpleMode","loadData"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport { SHOW_ALL, SHOW_CHILD, SHOW_PARENT } from './strategies';\n\nfunction nonEmptyStringType(props, propsName) {\n  const value = props[propsName];\n  if (typeof value !== 'string' || !value) {\n    return new Error(); // Just a flag, so don't need message.\n  }\n}\n\nfunction valueType(props, propName, componentName) {\n  const labelInValueShape = PropTypes.shape({\n    value: nonEmptyStringType,\n    label: PropTypes.node,\n  });\n  if (props.labelInValue) {\n    const validate = PropTypes.oneOfType([\n      PropTypes.arrayOf(labelInValueShape),\n      labelInValueShape,\n    ]);\n    const error = validate(...arguments);\n    if (error) {\n      return new Error(\n        `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`, ` +\n        `when \\`labelInValue\\` is \\`true\\`, \\`${propName}\\` should in ` +\n        `shape of \\`{ value: string, label?: string }\\`.`\n      );\n    }\n  } else if (props.treeCheckable && props.treeCheckStrictly) {\n    const validate = PropTypes.oneOfType([\n      PropTypes.arrayOf(labelInValueShape),\n      labelInValueShape,\n    ]);\n    const error = validate(...arguments);\n    if (error) {\n      return new Error(\n        `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`, ` +\n        `when \\`treeCheckable\\` and \\`treeCheckStrictly\\` are \\`true\\`, ` +\n        `\\`${propName}\\` should in shape of \\`{ value: string, label?: string }\\`.`\n      );\n    }\n  } else if (props.multiple && props[propName] === '') {\n    return new Error(\n      `Invalid prop \\`${propName}\\` of type \\`string\\` supplied to \\`${componentName}\\`, ` +\n      `expected \\`array\\` when \\`multiple\\` is \\`true\\`.`\n    );\n  } else {\n    const validate = PropTypes.oneOfType([\n      PropTypes.arrayOf(PropTypes.string),\n      PropTypes.string,\n    ]);\n    return validate(...arguments);\n  }\n}\n\nexport const SelectPropTypes = {\n  className: PropTypes.string,\n  prefixCls: PropTypes.string,\n  multiple: PropTypes.bool,\n  filterTreeNode: PropTypes.any,\n  showSearch: PropTypes.bool,\n  disabled: PropTypes.bool,\n  showArrow: PropTypes.bool,\n  allowClear: PropTypes.bool,\n  defaultOpen: PropTypes.bool,\n  open: PropTypes.bool,\n  transitionName: PropTypes.string,\n  animation: PropTypes.string,\n  choiceTransitionName: PropTypes.string,\n  onClick: PropTypes.func,\n  onChange: PropTypes.func,\n  onSelect: PropTypes.func,\n  onDeselect: PropTypes.func,\n  onSearch: PropTypes.func,\n  searchPlaceholder: PropTypes.string,\n  placeholder: PropTypes.any,\n  inputValue: PropTypes.any,\n  value: valueType,\n  defaultValue: valueType,\n  label: PropTypes.node,\n  defaultLabel: PropTypes.any,\n  labelInValue: PropTypes.bool,\n  dropdownStyle: PropTypes.object,\n  dropdownPopupAlign: PropTypes.object,\n  onDropdownVisibleChange: PropTypes.func,\n  maxTagTextLength: PropTypes.number,\n  showCheckedStrategy: PropTypes.oneOf([\n    SHOW_ALL, SHOW_PARENT, SHOW_CHILD,\n  ]),\n  treeCheckStrictly: PropTypes.bool,\n  treeIcon: PropTypes.bool,\n  treeLine: PropTypes.bool,\n  treeDefaultExpandAll: PropTypes.bool,\n  treeCheckable: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.node,\n  ]),\n  treeNodeLabelProp: PropTypes.string,\n  treeNodeFilterProp: PropTypes.string,\n  treeData: PropTypes.array,\n  treeDataSimpleMode: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.object,\n  ]),\n  loadData: PropTypes.func,\n};\n"]}