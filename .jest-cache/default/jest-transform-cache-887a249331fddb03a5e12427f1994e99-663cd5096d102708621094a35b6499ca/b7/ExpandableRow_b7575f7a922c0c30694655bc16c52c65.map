{"version":3,"sources":["ExpandableRow.jsx"],"names":["ExpandableRow","columnIndex","expandRowByClick","props","expandIconAsCell","expandIconColumnIndex","record","event","onExpandedChange","expanded","rowKey","expandable","index","onRowClick","handleExpandChange","prefixCls","needIndentSpaced","cells","push","renderExpandIcon","handleDestroy","childrenColumnName","expandedRowRender","indentSize","fixed","childrenData","expandableRowProps","handleRowClick","hasExpandIcon","renderExpandIconCell","children","Component","PropTypes","string","isRequired","oneOfType","number","bool","object","func","expandedRowKeys","indexOf"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'mini-store';\nimport ExpandIcon from './ExpandIcon';\n\nclass ExpandableRow extends Component {\n  static propTypes = {\n    prefixCls: PropTypes.string.isRequired,\n    rowKey: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]).isRequired,\n    fixed: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.bool,\n    ]),\n    record: PropTypes.object.isRequired,\n    indentSize: PropTypes.number,\n    needIndentSpaced: PropTypes.bool.isRequired,\n    expandRowByClick: PropTypes.bool,\n    expanded: PropTypes.bool.isRequired,\n    expandIconAsCell: PropTypes.bool,\n    expandIconColumnIndex: PropTypes.number,\n    childrenColumnName: PropTypes.string,\n    expandedRowRender: PropTypes.func,\n    onExpandedChange: PropTypes.func.isRequired,\n    onRowClick: PropTypes.func,\n    children: PropTypes.func.isRequired,\n  }\n\n  componentWillUnmount() {\n    this.handleDestroy();\n  }\n\n  hasExpandIcon = (columnIndex) => {\n    const { expandRowByClick } = this.props;\n    return !this.expandIconAsCell &&\n      !expandRowByClick &&\n      columnIndex === this.expandIconColumnIndex;\n  }\n\n  handleExpandChange = (record, event) => {\n    const { onExpandedChange, expanded, rowKey } = this.props;\n    if (this.expandable) {\n      onExpandedChange(!expanded, record, event, rowKey);\n    }\n  }\n\n  handleDestroy() {\n    const { onExpandedChange, rowKey, record } = this.props;\n    if (this.expandable) {\n      onExpandedChange(false, record, null, rowKey, true);\n    }\n  }\n\n  handleRowClick = (record, index, event) => {\n    const { expandRowByClick, onRowClick } = this.props;\n    if (expandRowByClick) {\n      this.handleExpandChange(record, event);\n    }\n    if (onRowClick) {\n      onRowClick(record, index, event);\n    }\n  }\n\n  renderExpandIcon = () => {\n    const { prefixCls, expanded, record, needIndentSpaced } = this.props;\n\n    return (\n      <ExpandIcon\n        expandable={this.expandable}\n        prefixCls={prefixCls}\n        onExpand={this.handleExpandChange}\n        needIndentSpaced={needIndentSpaced}\n        expanded={expanded}\n        record={record}\n      />\n    );\n  }\n\n  renderExpandIconCell = (cells) => {\n    if (!this.expandIconAsCell) {\n      return;\n    }\n    const { prefixCls } = this.props;\n\n    cells.push(\n      <td\n        className={`${prefixCls}-expand-icon-cell`}\n        key=\"rc-table-expand-icon-cell\"\n      >\n        {this.renderExpandIcon()}\n      </td>\n    );\n  }\n\n  render() {\n    const {\n      childrenColumnName,\n      expandedRowRender,\n      indentSize,\n      record,\n      fixed,\n    } = this.props;\n\n    this.expandIconAsCell = fixed !== 'right' ? this.props.expandIconAsCell : false;\n    this.expandIconColumnIndex = fixed !== 'right' ? this.props.expandIconColumnIndex : -1;\n    const childrenData = record[childrenColumnName];\n    this.expandable = !!(childrenData || expandedRowRender);\n\n    const expandableRowProps = {\n      indentSize,\n      onRowClick: this.handleRowClick,\n      hasExpandIcon: this.hasExpandIcon,\n      renderExpandIcon: this.renderExpandIcon,\n      renderExpandIconCell: this.renderExpandIconCell,\n    };\n\n    return this.props.children(expandableRowProps);\n  }\n}\n\nexport default connect(({ expandedRowKeys }, { rowKey }) => ({\n  expanded: !!~expandedRowKeys.indexOf(rowKey),\n}))(ExpandableRow);\n"]}