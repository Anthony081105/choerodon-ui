a21f78cd1524b64cb394f77d800574cf
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _noop = _interopRequireDefault(require("lodash/noop"));

var _moment = _interopRequireDefault(require("moment"));

var _trigger = _interopRequireDefault(require("../trigger"));

var _Panel = _interopRequireDefault(require("./Panel"));

var _placements = _interopRequireWildcard(require("./placements"));

var _icon = _interopRequireDefault(require("../../icon"));

var _input = _interopRequireDefault(require("../../input"));

function _createSuper(Derived) {
  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  return function () {
    var Super = (0, _getPrototypeOf2["default"])(Derived),
        result;

    if (isNativeReflectConstruct()) {
      var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return (0, _possibleConstructorReturn2["default"])(this, result);
  };
}

function refFn(field, component) {
  this[field] = component;
}

var Picker =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(Picker, _Component);

  var _super = _createSuper(Picker);

  function Picker(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, Picker);
    _this = _super.call(this, props);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onPanelChange", function (value) {
      _this.setValue(value);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onPanelClear", function () {
      _this.setValue(null);

      _this.setOpen(false);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onVisibleChange", function (open) {
      _this.setOpen(open);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onEsc", function () {
      _this.setOpen(false);

      _this.focus();
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onKeyDown", function (e) {
      if (e.keyCode === 40) {
        _this.setOpen(true);
      }
    });
    _this.saveInputRef = refFn.bind((0, _assertThisInitialized2["default"])(_this), 'picker');
    _this.savePanelRef = refFn.bind((0, _assertThisInitialized2["default"])(_this), 'panelInstance');

    var defaultOpen = props.defaultOpen,
        defaultValue = props.defaultValue,
        _props$open = props.open,
        _open = _props$open === void 0 ? defaultOpen : _props$open,
        _props$value = props.value,
        _value = _props$value === void 0 ? defaultValue : _props$value;

    _this.state = {
      open: _open,
      value: _value
    };
    return _this;
  }

  (0, _createClass2["default"])(Picker, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      var value = nextProps.value,
          open = nextProps.open;

      if ('value' in nextProps) {
        this.setState({
          value: value
        });
      }

      if (open !== undefined) {
        this.setState({
          open: open
        });
      }
    }
  }, {
    key: "setValue",
    value: function setValue(value) {
      if (!('value' in this.props)) {
        this.setState({
          value: value
        });
      }

      this.props.onChange(value);
    }
  }, {
    key: "getFormat",
    value: function getFormat() {
      var _this$props = this.props,
          format = _this$props.format,
          showHour = _this$props.showHour,
          showMinute = _this$props.showMinute,
          showSecond = _this$props.showSecond,
          use12Hours = _this$props.use12Hours;

      if (format) {
        return format;
      }

      if (use12Hours) {
        var fmtString = [showHour ? 'h' : '', showMinute ? 'mm' : '', showSecond ? 'ss' : ''].filter(function (item) {
          return !!item;
        }).join(':');
        return fmtString.concat(' a');
      }

      return [showHour ? 'HH' : '', showMinute ? 'mm' : '', showSecond ? 'ss' : ''].filter(function (item) {
        return !!item;
      }).join(':');
    }
  }, {
    key: "getPanelElement",
    value: function getPanelElement() {
      var _this$props2 = this.props,
          prefixCls = _this$props2.prefixCls,
          placeholder = _this$props2.placeholder,
          disabledHours = _this$props2.disabledHours,
          disabledMinutes = _this$props2.disabledMinutes,
          disabledSeconds = _this$props2.disabledSeconds,
          hideDisabledOptions = _this$props2.hideDisabledOptions,
          inputReadOnly = _this$props2.inputReadOnly,
          allowEmpty = _this$props2.allowEmpty,
          showHour = _this$props2.showHour,
          showMinute = _this$props2.showMinute,
          showSecond = _this$props2.showSecond,
          defaultOpenValue = _this$props2.defaultOpenValue,
          clearText = _this$props2.clearText,
          addon = _this$props2.addon,
          use12Hours = _this$props2.use12Hours,
          focusOnOpen = _this$props2.focusOnOpen,
          onKeyDown = _this$props2.onKeyDown,
          hourStep = _this$props2.hourStep,
          minuteStep = _this$props2.minuteStep,
          secondStep = _this$props2.secondStep;
      return _react["default"].createElement(_Panel["default"], {
        clearText: clearText,
        prefixCls: "".concat(prefixCls, "-panel"),
        ref: this.savePanelRef,
        value: this.state.value,
        inputReadOnly: inputReadOnly,
        onChange: this.onPanelChange,
        onClear: this.onPanelClear,
        defaultOpenValue: defaultOpenValue,
        showHour: showHour,
        showMinute: showMinute,
        showSecond: showSecond,
        onEsc: this.onEsc,
        allowEmpty: allowEmpty,
        format: this.getFormat(),
        placeholder: placeholder,
        disabledHours: disabledHours,
        disabledMinutes: disabledMinutes,
        disabledSeconds: disabledSeconds,
        hideDisabledOptions: hideDisabledOptions,
        use12Hours: use12Hours,
        hourStep: hourStep,
        minuteStep: minuteStep,
        secondStep: secondStep,
        addon: addon,
        focusOnOpen: focusOnOpen,
        onKeyDown: onKeyDown
      });
    }
  }, {
    key: "getPopupClassName",
    value: function getPopupClassName() {
      var _this$props3 = this.props,
          showHour = _this$props3.showHour,
          showMinute = _this$props3.showMinute,
          showSecond = _this$props3.showSecond,
          use12Hours = _this$props3.use12Hours,
          prefixCls = _this$props3.prefixCls;
      var popupClassName = this.props.popupClassName; // Keep it for old compatibility

      if ((!showHour || !showMinute || !showSecond) && !use12Hours) {
        popupClassName += " ".concat(prefixCls, "-panel-narrow");
      }

      var selectColumnCount = 0;

      if (showHour) {
        selectColumnCount += 1;
      }

      if (showMinute) {
        selectColumnCount += 1;
      }

      if (showSecond) {
        selectColumnCount += 1;
      }

      if (use12Hours) {
        selectColumnCount += 1;
      }

      popupClassName += " ".concat(prefixCls, "-panel-column-").concat(selectColumnCount);
      return popupClassName;
    }
  }, {
    key: "getBuiltInPlacements",
    value: function getBuiltInPlacements() {
      var label = this.props.label;
      var placement_haslabel = {
        'bottomLeft': [0, -19],
        'bottomRight': [0, -19]
      };

      if (label) {
        return (0, _placements.getPlacements)(placement_haslabel);
      }

      return _placements["default"];
    }
  }, {
    key: "setOpen",
    value: function setOpen(open) {
      var _this$props4 = this.props,
          onOpen = _this$props4.onOpen,
          onClose = _this$props4.onClose;

      if (this.state.open !== open) {
        if (!('open' in this.props)) {
          this.setState({
            open: open
          });
        }

        if (open) {
          onOpen({
            open: open
          });
        } else {
          onClose({
            open: open
          });
        }
      }
    }
  }, {
    key: "focus",
    value: function focus() {
      this.picker.focus();
    }
  }, {
    key: "blur",
    value: function blur() {
      this.picker.blur();
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props5 = this.props,
          prefixCls = _this$props5.prefixCls,
          placeholder = _this$props5.placeholder,
          placement = _this$props5.placement,
          align = _this$props5.align,
          id = _this$props5.id,
          disabled = _this$props5.disabled,
          transitionName = _this$props5.transitionName,
          style = _this$props5.style,
          className = _this$props5.className,
          getPopupContainer = _this$props5.getPopupContainer,
          name = _this$props5.name,
          autoComplete = _this$props5.autoComplete,
          onFocus = _this$props5.onFocus,
          onBlur = _this$props5.onBlur,
          autoFocus = _this$props5.autoFocus,
          inputReadOnly = _this$props5.inputReadOnly,
          label = _this$props5.label;
      var _this$state = this.state,
          open = _this$state.open,
          value = _this$state.value;
      var popupClassName = this.getPopupClassName();
      return _react["default"].createElement(_trigger["default"], {
        prefixCls: "".concat(prefixCls, "-panel"),
        popupClassName: popupClassName,
        popup: this.getPanelElement(),
        popupAlign: align,
        builtinPlacements: this.getBuiltInPlacements(),
        popupPlacement: placement,
        action: disabled ? [] : ['click'],
        destroyPopupOnHide: true,
        getPopupContainer: getPopupContainer,
        popupTransitionName: transitionName,
        popupVisible: open,
        onPopupVisibleChange: this.onVisibleChange
      }, _react["default"].createElement("span", {
        className: "".concat(prefixCls, " ").concat(className),
        style: style
      }, _react["default"].createElement(_input["default"], {
        className: "".concat(prefixCls, "-input"),
        ref: this.saveInputRef,
        type: "text",
        label: label,
        placeholder: placeholder,
        name: name,
        onKeyDown: this.onKeyDown,
        disabled: disabled,
        value: value && value.format(this.getFormat()) || '',
        autoComplete: autoComplete,
        onFocus: onFocus,
        onBlur: onBlur,
        suffix: _react["default"].createElement(_icon["default"], {
          type: "av_timer",
          className: "".concat(prefixCls, "-icon")
        }),
        autoFocus: autoFocus,
        focused: open,
        onChange: _noop["default"],
        readOnly: true,
        id: id
      })));
    }
  }]);
  return Picker;
}(_react.Component);

exports["default"] = Picker;
(0, _defineProperty2["default"])(Picker, "propTypes", {
  prefixCls: _propTypes["default"].string,
  clearText: _propTypes["default"].string,
  value: _propTypes["default"].object,
  defaultOpenValue: _propTypes["default"].object,
  inputReadOnly: _propTypes["default"].bool,
  disabled: _propTypes["default"].bool,
  allowEmpty: _propTypes["default"].bool,
  defaultValue: _propTypes["default"].object,
  open: _propTypes["default"].bool,
  defaultOpen: _propTypes["default"].bool,
  align: _propTypes["default"].object,
  placement: _propTypes["default"].any,
  transitionName: _propTypes["default"].string,
  getPopupContainer: _propTypes["default"].func,
  placeholder: _propTypes["default"].string,
  format: _propTypes["default"].string,
  showHour: _propTypes["default"].bool,
  showMinute: _propTypes["default"].bool,
  showSecond: _propTypes["default"].bool,
  style: _propTypes["default"].object,
  className: _propTypes["default"].string,
  popupClassName: _propTypes["default"].string,
  disabledHours: _propTypes["default"].func,
  disabledMinutes: _propTypes["default"].func,
  disabledSeconds: _propTypes["default"].func,
  hideDisabledOptions: _propTypes["default"].bool,
  onChange: _propTypes["default"].func,
  onOpen: _propTypes["default"].func,
  onClose: _propTypes["default"].func,
  onFocus: _propTypes["default"].func,
  onBlur: _propTypes["default"].func,
  addon: _propTypes["default"].func,
  name: _propTypes["default"].string,
  autoComplete: _propTypes["default"].string,
  use12Hours: _propTypes["default"].bool,
  hourStep: _propTypes["default"].number,
  minuteStep: _propTypes["default"].number,
  secondStep: _propTypes["default"].number,
  focusOnOpen: _propTypes["default"].bool,
  onKeyDown: _propTypes["default"].func,
  autoFocus: _propTypes["default"].bool,
  id: _propTypes["default"].string,
  label: _propTypes["default"].oneOfType([_propTypes["default"].node, _propTypes["default"].string])
});
(0, _defineProperty2["default"])(Picker, "defaultProps", {
  clearText: 'clear',
  prefixCls: 'rc-time-picker',
  defaultOpen: false,
  inputReadOnly: false,
  style: {},
  className: '',
  popupClassName: '',
  id: '',
  align: {},
  defaultOpenValue: (0, _moment["default"])(),
  allowEmpty: true,
  showHour: true,
  showMinute: true,
  showSecond: true,
  disabledHours: _noop["default"],
  disabledMinutes: _noop["default"],
  disabledSeconds: _noop["default"],
  hideDisabledOptions: false,
  placement: 'bottomLeft',
  onChange: _noop["default"],
  onOpen: _noop["default"],
  onClose: _noop["default"],
  onFocus: _noop["default"],
  onBlur: _noop["default"],
  addon: _noop["default"],
  use12Hours: false,
  focusOnOpen: false,
  onKeyDown: _noop["default"]
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,