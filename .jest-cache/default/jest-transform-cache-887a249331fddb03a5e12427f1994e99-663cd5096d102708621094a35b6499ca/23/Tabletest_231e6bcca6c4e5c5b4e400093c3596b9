0d4f649379390fc2ea929aae918b7c52
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _ = _interopRequireDefault(require(".."));

var Column = _["default"].Column,
    ColumnGroup = _["default"].ColumnGroup;
describe('Table', function () {
  it('renders JSX correctly', function () {
    var data = [{
      key: '1',
      firstName: 'John',
      lastName: 'Brown',
      age: 32
    }, {
      key: '2',
      firstName: 'Jim',
      lastName: 'Green',
      age: 42
    }];
    var wrapper = (0, _enzyme.render)(_react["default"].createElement(_["default"], {
      dataSource: data,
      pagination: false
    }, _react["default"].createElement(ColumnGroup, {
      title: "Name"
    }, _react["default"].createElement(Column, {
      title: "First Name",
      dataIndex: "firstName",
      key: "firstName"
    }), _react["default"].createElement(Column, {
      title: "Last Name",
      dataIndex: "lastName",
      key: "lastName"
    })), _react["default"].createElement(Column, {
      title: "Age",
      dataIndex: "age",
      key: "age"
    })));
    expect(wrapper).toMatchSnapshot();
  });
  it('updates columns when receiving props', function () {
    var columns = [{
      title: 'Name',
      key: 'name',
      dataIndex: 'name'
    }];
    var wrapper = (0, _enzyme.shallow)(_react["default"].createElement(_["default"], {
      columns: columns
    }));
    var newColumns = [{
      title: 'Title',
      key: 'title',
      dataIndex: 'title'
    }];
    wrapper.setProps({
      columns: newColumns
    });
    expect(wrapper.instance().columns).toBe(newColumns);
  });
  it('loading with Spin',
  /*#__PURE__*/
  (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee() {
    var loading, wrapper;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            loading = {
              spinning: false,
              delay: 500
            };
            wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
              loading: loading
            }));
            expect(wrapper.find('.c7n-spin')).toHaveLength(0);
            expect(wrapper.find('.c7n-table-placeholder').text()).not.toEqual('');
            loading.spinning = true;
            wrapper.setProps({
              loading: loading
            });
            expect(wrapper.find('.c7n-spin')).toHaveLength(0);
            _context.next = 9;
            return new Promise(function (resolve) {
              return setTimeout(resolve, 500);
            });

          case 9:
            wrapper.update();
            expect(wrapper.find('.c7n-spin')).toHaveLength(1);

          case 11:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRhYmxlLnRlc3QuanMiXSwibmFtZXMiOlsiQ29sdW1uIiwiVGFibGUiLCJDb2x1bW5Hcm91cCIsImRlc2NyaWJlIiwiaXQiLCJkYXRhIiwia2V5IiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJhZ2UiLCJ3cmFwcGVyIiwiZXhwZWN0IiwidG9NYXRjaFNuYXBzaG90IiwiY29sdW1ucyIsInRpdGxlIiwiZGF0YUluZGV4IiwibmV3Q29sdW1ucyIsInNldFByb3BzIiwiaW5zdGFuY2UiLCJ0b0JlIiwibG9hZGluZyIsInNwaW5uaW5nIiwiZGVsYXkiLCJmaW5kIiwidG9IYXZlTGVuZ3RoIiwidGV4dCIsIm5vdCIsInRvRXF1YWwiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJ1cGRhdGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0lBRVFBLE0sR0FBd0JDLFksQ0FBeEJELE07SUFBUUUsVyxHQUFnQkQsWSxDQUFoQkMsVztBQUVoQkMsUUFBUSxDQUFDLE9BQUQsRUFBVSxZQUFNO0FBQ3RCQyxFQUFBQSxFQUFFLENBQUMsdUJBQUQsRUFBMEIsWUFBTTtBQUNoQyxRQUFNQyxJQUFJLEdBQUcsQ0FDWDtBQUNFQyxNQUFBQSxHQUFHLEVBQUUsR0FEUDtBQUVFQyxNQUFBQSxTQUFTLEVBQUUsTUFGYjtBQUdFQyxNQUFBQSxRQUFRLEVBQUUsT0FIWjtBQUlFQyxNQUFBQSxHQUFHLEVBQUU7QUFKUCxLQURXLEVBT1g7QUFDRUgsTUFBQUEsR0FBRyxFQUFFLEdBRFA7QUFFRUMsTUFBQUEsU0FBUyxFQUFFLEtBRmI7QUFHRUMsTUFBQUEsUUFBUSxFQUFFLE9BSFo7QUFJRUMsTUFBQUEsR0FBRyxFQUFFO0FBSlAsS0FQVyxDQUFiO0FBZUEsUUFBTUMsT0FBTyxHQUFHLG9CQUNkLGdDQUFDLFlBQUQ7QUFBTyxNQUFBLFVBQVUsRUFBRUwsSUFBbkI7QUFBeUIsTUFBQSxVQUFVLEVBQUU7QUFBckMsT0FDRSxnQ0FBQyxXQUFEO0FB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QUFBO0FBQUE7QUFBQTtBQUFBLEdBQXRCLEdBQUY7QUFpQkQsQ0FwRU8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIsIHNoYWxsb3csIG1vdW50IH0gZnJvbSAnZW56eW1lJztcbmltcG9ydCBUYWJsZSBmcm9tICcuLic7XG5cbmNvbnN0IHsgQ29sdW1uLCBDb2x1bW5Hcm91cCB9ID0gVGFibGU7XG5cbmRlc2NyaWJlKCdUYWJsZScsICgpID0+IHtcbiAgaXQoJ3JlbmRlcnMgSlNYIGNvcnJlY3RseScsICgpID0+IHtcbiAgICBjb25zdCBkYXRhID0gW1xuICAgICAge1xuICAgICAgICBrZXk6ICcxJyxcbiAgICAgICAgZmlyc3ROYW1lOiAnSm9obicsXG4gICAgICAgIGxhc3ROYW1lOiAnQnJvd24nLFxuICAgICAgICBhZ2U6IDMyLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAga2V5OiAnMicsXG4gICAgICAgIGZpcnN0TmFtZTogJ0ppbScsXG4gICAgICAgIGxhc3ROYW1lOiAnR3JlZW4nLFxuICAgICAgICBhZ2U6IDQyLFxuICAgICAgfSxcbiAgICBdO1xuXG4gICAgY29uc3Qgd3JhcHBlciA9IHJlbmRlcihcbiAgICAgIDxUYWJsZSBkYXRhU291cmNlPXtkYXRhfSBwYWdpbmF0aW9uPXtmYWxzZX0+XG4gICAgICAgIDxDb2x1bW5Hcm91cCB0aXRsZT1cIk5hbWVcIj5cbiAgICAgICAgICA8Q29sdW1uIHRpdGxlPVwiRmlyc3QgTmFtZVwiIGRhdGFJbmRleD1cImZpcnN0TmFtZVwiIGtleT1cImZpcnN0TmFtZVwiIC8+XG4gICAgICAgICAgPENvbHVtbiB0aXRsZT1cIkxhc3QgTmFtZVwiIGRhdGFJbmRleD1cImxhc3ROYW1lXCIga2V5PVwibGFzdE5hbWVcIiAvPlxuICAgICAgICA8L0NvbHVtbkdyb3VwPlxuICAgICAgICA8Q29sdW1uIHRpdGxlPVwiQWdlXCIgZGF0YUluZGV4PVwiYWdlXCIga2V5PVwiYWdlXCIgLz5cbiAgICAgIDwvVGFibGU+LFxuICAgICk7XG5cbiAgICBleHBlY3Qod3JhcHBlcikudG9NYXRjaFNuYXBzaG90KCk7XG4gIH0pO1xuXG4gIGl0KCd1cGRhdGVzIGNvbHVtbnMgd2hlbiByZWNlaXZpbmcgcHJvcHMnLCAoKSA9PiB7XG4gICAgY29uc3QgY29sdW1ucyA9IFtcbiAgICAgIHtcbiAgICAgICAgdGl0bGU6ICdOYW1lJyxcbiAgICAgICAga2V5OiAnbmFtZScsXG4gICAgICAgIGRhdGFJbmRleDogJ25hbWUnLFxuICAgICAgfSxcbiAgICBdO1xuICAgIGNvbnN0IHdyYXBwZXIgPSBzaGFsbG93KDxUYWJsZSBjb2x1bW5zPXtjb2x1bW5zfSAvPik7XG4gICAgY29uc3QgbmV3Q29sdW1ucyA9IFtcbiAgICAgIHtcbiAgICAgICAgdGl0bGU6ICdUaXRsZScsXG4gICAgICAgIGtleTogJ3RpdGxlJyxcbiAgICAgICAgZGF0YUluZGV4OiAndGl0bGUnLFxuICAgICAgfSxcbiAgICBdO1xuICAgIHdyYXBwZXIuc2V0UHJvcHMoeyBjb2x1bW5zOiBuZXdDb2x1bW5zIH0pO1xuXG4gICAgZXhwZWN0KHdyYXBwZXIuaW5zdGFuY2UoKS5jb2x1bW5zKS50b0JlKG5ld0NvbHVtbnMpO1xuICB9KTtcblxuICBpdCgnbG9hZGluZyB3aXRoIFNwaW4nLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgbG9hZGluZyA9IHtcbiAgICAgIHNwaW5uaW5nOiBmYWxzZSxcbiAgICAgIGRlbGF5OiA1MDAsXG4gICAgfTtcbiAgICBjb25zdCB3cmFwcGVyID0gbW91bnQoPFRhYmxlIGxvYWRpbmc9e2xvYWRpbmd9IC8+KTtcbiAgICBleHBlY3Qod3JhcHBlci5maW5kKCcuYzduLXNwaW4nKSkudG9IYXZlTGVuZ3RoKDApO1xuICAgIGV4cGVjdCh3cmFwcGVyLmZpbmQoJy5jN24tdGFibGUtcGxhY2Vob2xkZXInKS50ZXh0KCkpLm5vdC50b0VxdWFsKCcnKTtcblxuICAgIGxvYWRpbmcuc3Bpbm5pbmcgPSB0cnVlO1xuICAgIHdyYXBwZXIuc2V0UHJvcHMoeyBsb2FkaW5nIH0pO1xuICAgIGV4cGVjdCh3cmFwcGVyLmZpbmQoJy5jN24tc3BpbicpKS50b0hhdmVMZW5ndGgoMCk7XG5cbiAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgNTAwKSk7XG4gICAgd3JhcHBlci51cGRhdGUoKTtcbiAgICBleHBlY3Qod3JhcHBlci5maW5kKCcuYzduLXNwaW4nKSkudG9IYXZlTGVuZ3RoKDEpO1xuICB9KTtcbn0pO1xuIl19