{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/axios/throttleAdapterEnhancer.tsx"],"names":[],"mappings":";;;;;;;;;;;;;AACA;;AAEA;;AAYc,SAAU,uBAAV,CACZ,OADY,EAES;AAAA,MAArB,OAAqB,uEAAF,EAAE;AAAA,2BAE+D,OAF/D,CAEb,SAFa;AAAA,MAEb,SAFa,mCAED,IAFC;AAAA,uBAE+D,OAF/D,CAEK,KAFL;AAAA,MAEK,KAFL,+BAEa,IAAI,iBAAJ,CAAiC;AAAE,IAAA,GAAG,EAAE;AAAP,GAAjC,CAFb;;AAIrB,MAAM,sBAAsB,GAAG,SAAzB,sBAAyB,CAAC,KAAD,EAAgB,MAAhB,EAA8C;AAC3E,QAAM,eAAe,GAAG;AAAA;AAAA,iCAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEE,OAAO,CAAC,MAAD,CAFT;;AAAA;AAEf,cAAA,QAFe;AAGrB,cAAA,KAAK,CAAC,GAAN,CAAU,KAAV,EAAiB;AACf,gBAAA,SAAS,EAAE,IAAI,CAAC,GAAL,EADI;AAEf,gBAAA,KAAK,EAAE,OAAO,CAAC,OAAR,CAAgB,QAAhB;AAFQ,eAAjB;AAHqB,+CAOd,QAPc;;AAAA;AAAA;AAAA;AASrB,cAAA,KAAK,CAAC,GAAN,CAAU,KAAV;AATqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD,IAAxB;AAcA,IAAA,KAAK,CAAC,GAAN,CAAU,KAAV,EAAiB;AACf,MAAA,SAAS,EAAE,IAAI,CAAC,GAAL,EADI;AAEf,MAAA,KAAK,EAAE;AAFQ,KAAjB;AAKA,WAAO,eAAP;AACD,GArBD;;AAuBA,SAAO,UAAA,MAAM,EAAG;AACd,QAAM,KAAK,GAAG,oCAAwB,MAAxB,CAAd;AACA,QAAM,GAAG,GAAG,IAAI,CAAC,GAAL,EAAZ;AACA,QAAM,YAAY,GAAG,KAAK,CAAC,GAAN,CAAU,KAAV,KAAoB;AAAE,MAAA,SAAS,EAAE;AAAb,KAAzC;;AACA,QAAI,GAAG,GAAG,YAAY,CAAC,SAAnB,IAAgC,SAApC,EAA+C;AAC7C,UAAM,eAAe,GAAG,YAAY,CAAC,KAArC;;AACA,UAAI,eAAJ,EAAqB;AACnB,YAAI,OAAO,CAAC,GAAR,CAAY,YAAZ,KAA6B,MAAjC,EAAyC;AACvC;AACA,UAAA,OAAO,CAAC,IAAR,+CAAoD,KAApD;AACD;;AACD,eAAO,eAAP;AACD;AACF;;AAED,WAAO,sBAAsB,CAAC,KAAD,EAAQ,MAAR,CAA7B;AACD,GAhBD;AAiBD","sourcesContent":["import { AxiosAdapter, AxiosPromise, AxiosRequestConfig } from 'axios';\nimport Cache from '../_util/Cache';\nimport { ICacheLike } from './cacheAdapterEnhancer';\nimport { buildURLWithAxiosConfig } from './utils';\n\nexport type RecordedCache = {\n  timestamp: number;\n  value?: AxiosPromise;\n};\n\nexport type Options = {\n  threshold?: number;\n  cache?: ICacheLike<RecordedCache>;\n};\n\nexport default function throttleAdapterEnhancer(\n  adapter: AxiosAdapter,\n  options: Options = {},\n): AxiosAdapter {\n  const { threshold = 1000, cache = new Cache<string, RecordedCache>({ max: 10 }) } = options;\n\n  const recordCacheWithRequest = (index: string, config: AxiosRequestConfig) => {\n    const responsePromise = (async () => {\n      try {\n        const response = await adapter(config);\n        cache.set(index, {\n          timestamp: Date.now(),\n          value: Promise.resolve(response),\n        });\n        return response;\n      } catch (reason) {\n        cache.del(index);\n        throw reason;\n      }\n    })();\n\n    cache.set(index, {\n      timestamp: Date.now(),\n      value: responsePromise,\n    });\n\n    return responsePromise;\n  };\n\n  return config => {\n    const index = buildURLWithAxiosConfig(config);\n    const now = Date.now();\n    const cachedRecord = cache.get(index) || { timestamp: now };\n    if (now - cachedRecord.timestamp <= threshold) {\n      const responsePromise = cachedRecord.value;\n      if (responsePromise) {\n        if (process.env.LOGGER_LEVEL === 'info') {\n          // eslint-disable-next-line no-console\n          console.info(`request cached by throttle adapter: ${index}`);\n        }\n        return responsePromise;\n      }\n    }\n\n    return recordCacheWithRequest(index, config);\n  };\n}\n"]}