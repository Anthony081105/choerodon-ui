3b9e3b4b61e52222c004a6f315cbe12f
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _Input = _interopRequireDefault(require("./Input"));

var _button = _interopRequireDefault(require("../button"));

var _configure = require("../configure");

function _createSuper(Derived) {
  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  return function () {
    var Super = (0, _getPrototypeOf2["default"])(Derived),
        result;

    if (isNativeReflectConstruct()) {
      var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return (0, _possibleConstructorReturn2["default"])(this, result);
  };
}

var Search =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(Search, _Component);

  var _super = _createSuper(Search);

  function Search() {
    var _this;

    (0, _classCallCheck2["default"])(this, Search);
    _this = _super.apply(this, arguments);

    _this.onSearch = function () {
      var onSearch = _this.props.onSearch;

      if (onSearch) {
        onSearch(_this.input.input.value);
      }

      _this.input.focus();
    };

    _this.saveInput = function (node) {
      _this.input = node;
    };

    return _this;
  }

  (0, _createClass2["default"])(Search, [{
    key: "focus",
    value: function focus() {
      this.input.focus();
    }
  }, {
    key: "blur",
    value: function blur() {
      this.input.blur();
    }
  }, {
    key: "getPrefixCls",
    value: function getPrefixCls() {
      var prefixCls = this.props.prefixCls;
      return (0, _configure.getPrefixCls)('input-search', prefixCls);
    }
  }, {
    key: "getButtonOrIcon",
    value: function getButtonOrIcon() {
      var _this$props = this.props,
          enterButton = _this$props.enterButton,
          size = _this$props.size;

      if (!enterButton) {
        return _react["default"].createElement(_button["default"], {
          type: "primary",
          size: size,
          shape: "circle",
          icon: "search"
        });
      }

      var enterButtonAsElement = enterButton;

      if (enterButtonAsElement.type === _button["default"] || enterButtonAsElement.type === 'button') {
        return (0, _react.cloneElement)(enterButtonAsElement, enterButtonAsElement.type === _button["default"] ? {
          className: "".concat(this.getPrefixCls(), "-button"),
          size: size,
          onClick: this.onSearch
        } : {
          onClick: this.onSearch
        });
      }

      if (enterButton === true) {
        return _react["default"].createElement(_button["default"], {
          type: "primary",
          size: size,
          shape: "circle",
          onClick: this.onSearch,
          icon: "search"
        });
      }

      return _react["default"].createElement(_button["default"], {
        type: "primary",
        size: size,
        onClick: this.onSearch,
        key: "enterButton"
      }, enterButton);
    }
  }, {
    key: "render",
    value: function render() {
      var _classNames;

      var _this$props2 = this.props,
          className = _this$props2.className,
          inputPrefixCls = _this$props2.inputPrefixCls,
          size = _this$props2.size,
          suffix = _this$props2.suffix,
          enterButton = _this$props2.enterButton,
          others = (0, _objectWithoutProperties2["default"])(_this$props2, ["className", "inputPrefixCls", "size", "suffix", "enterButton"]);
      var prefixCls = this.getPrefixCls();
      delete others.onSearch;
      delete others.prefixCls;
      var buttonOrIcon = this.getButtonOrIcon();
      var searchSuffix = suffix ? [suffix, buttonOrIcon] : buttonOrIcon;
      var inputClassName = (0, _classnames["default"])(prefixCls, className, (_classNames = {}, (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-enter-button"), !!enterButton), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-").concat(size), !!size), _classNames));
      return _react["default"].createElement(_Input["default"], (0, _extends2["default"])({
        onPressEnter: this.onSearch
      }, others, {
        size: size,
        className: inputClassName,
        prefixCls: (0, _configure.getPrefixCls)('input', inputPrefixCls),
        suffix: searchSuffix,
        ref: this.saveInput
      }));
    }
  }]);
  return Search;
}(_react.Component);

exports["default"] = Search;
Search.displayName = 'Search';
Search.defaultProps = {
  enterButton: false,
  size: "small"
  /* small */

};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,