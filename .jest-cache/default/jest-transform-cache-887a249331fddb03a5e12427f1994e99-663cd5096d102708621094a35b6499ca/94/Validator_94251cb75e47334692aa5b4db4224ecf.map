{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/validator/Validator.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { ReactNode } from 'react';\nimport { action, computed, isArrayLike, observable, runInAction } from 'mobx';\nimport isString from 'lodash/isString';\nimport omitBy from 'lodash/omitBy';\nimport isUndefined from 'lodash/isUndefined';\nimport { getConfig } from 'choerodon-ui/lib/configure';\nimport Validity from './Validity';\nimport ValidationResult from './ValidationResult';\nimport Record from '../data-set/Record';\nimport Form from '../form/Form';\nimport validationRules, { methodReturn, validationRule, ValidatorProps } from './rules';\nimport valueMissing from './rules/valueMissing';\nimport getReactNodeText from '../_util/getReactNodeText';\nimport Field from '../data-set/Field';\nimport { FormField } from '../field/FormField';\n// import { FieldType } from '../data-set/enum';\n// import { findBindField } from '../data-set/utils';\n\nexport type CustomValidator = (\n  value: any,\n  name?: string,\n  record?: Record | Form,\n) => Promise<boolean | string | undefined>;\n\nexport interface ValidationMessages {\n  badInput?: ReactNode;\n  patternMismatch?: ReactNode;\n  rangeOverflow?: ReactNode;\n  rangeUnderflow?: ReactNode;\n  stepMismatch?: ReactNode;\n  stepMismatchBetween?: ReactNode;\n  tooLong?: ReactNode;\n  tooShort?: ReactNode;\n  typeMismatch?: ReactNode;\n  valueMissing?: ReactNode;\n  valueMissingNoLabel?: ReactNode;\n  customError?: ReactNode;\n  uniqueError?: ReactNode;\n  unknown?: ReactNode;\n}\n\nexport default class Validator {\n  @observable private field?: Field;\n\n  @observable private control?: FormField<any>;\n\n  @observable private innerValidationResults: ValidationResult[];\n\n  @computed\n  get props(): ValidatorProps {\n    const { control, field } = this;\n    const controlProps = control && omitBy(control.getValidatorProps(), isUndefined);\n    const fieldProps = field && field.getValidatorProps();\n    return {\n      ...fieldProps,\n      ...controlProps,\n      defaultValidationMessages: {\n        ...(controlProps && controlProps.defaultValidationMessages),\n        ...getConfig('defaultValidationMessages'),\n        ...(fieldProps && fieldProps.defaultValidationMessages),\n      },\n    };\n  }\n\n  @computed\n  private get uniqueRefFields(): Field[] {\n    const { name, unique, record } = this.props;\n    if (record && isString(unique)) {\n      return [...record.fields.values()].filter(\n        field =>\n          field.name !== name &&\n          field.get('unique') === unique &&\n          !field.get('multiple') &&\n          !field.get('range'),\n      );\n    }\n    return [];\n  }\n\n  // @computed\n  // private get bindingFieldWithValidationResult(): Field | undefined {\n  //   const { name, record, type } = this.props;\n  //   if (record && name && type === FieldType.object) {\n  //     return findBindField(name, record.fields, field => !field.isValid());\n  //   }\n  //   return undefined;\n  // }\n\n  @computed\n  private get uniqueRefValidationResult(): ValidationResult | undefined {\n    const { uniqueRefFields } = this;\n    let validationResult: ValidationResult | undefined;\n    if (\n      uniqueRefFields.length &&\n      this.innerValidationResults.every(result => result.ruleName !== 'uniqueError')\n    ) {\n      uniqueRefFields.some(uniqueRefField => {\n        validationResult = uniqueRefField.validator.innerValidationResults.find(\n          result => result.ruleName === 'uniqueError',\n        );\n        return !!validationResult;\n      });\n    }\n    return validationResult;\n  }\n\n  @computed\n  get validationResults(): ValidationResult[] {\n    const { uniqueRefValidationResult } = this;\n    if (uniqueRefValidationResult) {\n      return [uniqueRefValidationResult];\n    }\n    const { innerValidationResults } = this;\n    if (innerValidationResults.length) {\n      return innerValidationResults;\n    }\n    // const { bindingFieldWithValidationResult } = this;\n    // if (bindingFieldWithValidationResult) {\n    //   return bindingFieldWithValidationResult.getValidationErrorValues();\n    // }\n    return [];\n  }\n\n  @computed\n  get currentValidationResult(): ValidationResult | undefined {\n    const { validationResults } = this;\n    return validationResults.length ? validationResults[0] : undefined;\n  }\n\n  @computed\n  get validity(): Validity {\n    const { currentValidationResult } = this;\n    return new Validity(\n      currentValidationResult ? { [currentValidationResult.ruleName]: true } : undefined,\n    );\n  }\n\n  @computed\n  get injectionOptions(): object {\n    const { currentValidationResult } = this;\n    return (currentValidationResult && currentValidationResult.injectionOptions) || {};\n  }\n\n  @computed\n  get validationMessage(): ReactNode {\n    const { currentValidationResult } = this;\n    return currentValidationResult && currentValidationResult.validationMessage;\n  }\n\n  constructor(field?: Field, control?: FormField<any>) {\n    runInAction(() => {\n      this.field = field;\n      this.control = control;\n      this.innerValidationResults = [];\n    });\n  }\n\n  @action\n  reset() {\n    this.clearErrors();\n    const { uniqueRefFields } = this;\n    if (uniqueRefFields.length) {\n      uniqueRefFields.forEach(uniqueRefField => uniqueRefField.validator.clearErrors());\n    }\n  }\n\n  @action\n  async report(ret: ValidationResult) {\n    const { name, dataSet, record } = this.props;\n    if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {\n      const { validationMessage, value } = ret;\n      const reportMessage: any[] = [\n        'validation:',\n        isString(validationMessage)\n          ? validationMessage\n          : await getReactNodeText(<span>{validationMessage}</span>),\n      ];\n      if (dataSet) {\n        const { name: dsName, id } = dataSet;\n        if (dsName || id) {\n          reportMessage.push(\n            `\n[dataSet<${dsName || id}>]:`,\n            dataSet,\n          );\n        } else {\n          reportMessage.push('\\n[dataSet]:', dataSet);\n        }\n      }\n      if (record) {\n        if (dataSet) {\n          reportMessage.push(\n            `\n[record<${dataSet.indexOf(record)}>]:`,\n            record,\n          );\n        } else {\n          reportMessage.push(`\\n[record]:`, record);\n        }\n        reportMessage.push(\n          `\n[field<${name}>]:`,\n          record.getField(name),\n        );\n      } else {\n        reportMessage.push('[field]:', name);\n      }\n      reportMessage.push('\\n[value]:', value);\n      console.warn(...reportMessage);\n    }\n  }\n\n  @action\n  clearErrors() {\n    this.innerValidationResults = [];\n  }\n\n  @action\n  addError(result: ValidationResult) {\n    this.innerValidationResults.push(result);\n    this.report(result);\n  }\n\n  async execute(rules: validationRule[], value: any[]): Promise<any> {\n    const { props } = this;\n    const method = rules.shift();\n    if (method) {\n      const results: methodReturn[] = await Promise.all<methodReturn>(\n        value.map(item => method(item, props)),\n      );\n      results.forEach(result => {\n        if (result instanceof ValidationResult) {\n          this.addError(result);\n          const index = value.indexOf(result.value);\n          if (index !== -1) {\n            value.splice(index, 1);\n          }\n        }\n      });\n      if (value.length) {\n        await this.execute(rules, value);\n      }\n    }\n  }\n\n  async checkValidity(value: any = null): Promise<boolean> {\n    const valueMiss: methodReturn = valueMissing(value, this.props);\n    this.clearErrors();\n    if (valueMiss !== true) {\n      this.addError(valueMiss);\n    } else {\n      const { multiple } = this.props;\n      await this.execute(\n        validationRules.slice(),\n        multiple && isArrayLike(value) ? value.slice() : [value],\n      );\n    }\n    return this.validity.valid;\n  }\n}\n"]}