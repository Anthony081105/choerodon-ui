f271116640ae0c6c98a1eaedd88c8337
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calcRangeKeys = calcRangeKeys;
exports.convertDirectoryKeysToNodes = convertDirectoryKeysToNodes;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var Record;

(function (Record) {
  Record[Record["None"] = 0] = "None";
  Record[Record["Start"] = 1] = "Start";
  Record[Record["End"] = 2] = "End";
})(Record || (Record = {}));

function traverseNodesKey(treeData, callback) {
  function processNode(dataNode) {
    var key = dataNode.key,
        children = dataNode.children;

    if (callback(key, dataNode) !== false) {
      traverseNodesKey(children || [], callback);
    }
  }

  treeData.forEach(processNode);
}
/** 计算选中范围，只考虑expanded情况以优化性能 */


function calcRangeKeys(treeData, expandedKeys, startKey, endKey) {
  var keys = [];
  var record = Record.None;

  if (startKey && startKey === endKey) {
    return [startKey];
  }

  if (!startKey || !endKey) {
    return [];
  }

  function matchKey(key) {
    return key === startKey || key === endKey;
  }

  traverseNodesKey(treeData, function (key) {
    if (record === Record.End) {
      return false;
    }

    if (matchKey(key)) {
      // Match test
      keys.push(key);

      if (record === Record.None) {
        record = Record.Start;
      } else if (record === Record.Start) {
        record = Record.End;
        return false;
      }
    } else if (record === Record.Start) {
      // Append selection
      keys.push(key);
    }

    if (expandedKeys.indexOf(key) === -1) {
      return false;
    }

    return true;
  });
  return keys;
}

function convertDirectoryKeysToNodes(treeData, keys) {
  var restKeys = (0, _toConsumableArray2["default"])(keys);
  var nodes = [];
  traverseNodesKey(treeData, function (key, node) {
    var index = restKeys.indexOf(key);

    if (index !== -1) {
      nodes.push(node);
      restKeys.splice(index, 1);
    }

    return !!restKeys.length;
  });
  return nodes;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyZWUvdXRpbHMvZGljdFV0aWwuanMiXSwibmFtZXMiOlsiUmVjb3JkIiwia2V5IiwiY2hpbGRyZW4iLCJkYXRhTm9kZSIsImNhbGxiYWNrIiwidHJhdmVyc2VOb2Rlc0tleSIsInRyZWVEYXRhIiwia2V5cyIsInJlY29yZCIsInN0YXJ0S2V5IiwibWF0Y2hLZXkiLCJleHBhbmRlZEtleXMiLCJyZXN0S2V5cyIsIm5vZGVzIiwiaW5kZXgiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLElBQUEsTUFBQTs7QUFDQSxDQUFDLFVBQUEsTUFBQSxFQUFrQjtBQUNmQSxFQUFBQSxNQUFNLENBQUNBLE1BQU0sQ0FBTkEsTUFBTSxDQUFOQSxHQUFQQSxDQUFNLENBQU5BLEdBQUFBLE1BQUFBO0FBQ0FBLEVBQUFBLE1BQU0sQ0FBQ0EsTUFBTSxDQUFOQSxPQUFNLENBQU5BLEdBQVBBLENBQU0sQ0FBTkEsR0FBQUEsT0FBQUE7QUFDQUEsRUFBQUEsTUFBTSxDQUFDQSxNQUFNLENBQU5BLEtBQU0sQ0FBTkEsR0FBUEEsQ0FBTSxDQUFOQSxHQUFBQSxLQUFBQTtBQUhKLENBQUEsRUFJR0EsTUFBTSxLQUFLQSxNQUFNLEdBSnBCLEVBSVMsQ0FKVDs7QUFLQSxTQUFBLGdCQUFBLENBQUEsUUFBQSxFQUFBLFFBQUEsRUFBOEM7QUFDMUMsV0FBQSxXQUFBLENBQUEsUUFBQSxFQUErQjtBQUFBLFFBQ25CQyxHQURtQixHQUNERSxRQURDLENBQUEsR0FBQTtBQUFBLFFBQ2RELFFBRGMsR0FDREMsUUFEQyxDQUFBLFFBQUE7O0FBRTNCLFFBQUlDLFFBQVEsQ0FBQSxHQUFBLEVBQVJBLFFBQVEsQ0FBUkEsS0FBSixLQUFBLEVBQXVDO0FBQ25DQyxNQUFBQSxnQkFBZ0IsQ0FBQ0gsUUFBUSxJQUFULEVBQUEsRUFBaEJHLFFBQWdCLENBQWhCQTtBQUNIO0FBQ0o7O0FBQ0RDLEVBQUFBLFFBQVEsQ0FBUkEsT0FBQUEsQ0FBQUEsV0FBQUE7QUFDSDtBQUNEOzs7QUFDTyxTQUFBLGFBQUEsQ0FBQSxRQUFBLEVBQUEsWUFBQSxFQUFBLFFBQUEsRUFBQSxNQUFBLEVBQWlFO0FBQ3BFLE1BQU1DLElBQUksR0FBVixFQUFBO0FBQ0EsTUFBSUMsTUFBTSxHQUFHUixNQUFNLENBQW5CLElBQUE7O0FBQ0EsTUFBSVMsUUFBUSxJQUFJQSxRQUFRLEtBQXhCLE1BQUEsRUFBcUM7QUFDakMsV0FBTyxDQUFQLFFBQU8sQ0FBUDtBQUNIOztBQUNELE1BQUksQ0FBQSxRQUFBLElBQWEsQ0FBakIsTUFBQSxFQUEwQjtBQUN0QixXQUFBLEVBQUE7QUFDSDs7QUFDRCxXQUFBLFFBQUEsQ0FBQSxHQUFBLEVBQXVCO0FBQ25CLFdBQU9SLEdBQUcsS0FBSEEsUUFBQUEsSUFBb0JBLEdBQUcsS0FBOUIsTUFBQTtBQUNIOztBQUNESSxFQUFBQSxnQkFBZ0IsQ0FBQSxRQUFBLEVBQVcsVUFBQSxHQUFBLEVBQVM7QUFDaEMsUUFBSUcsTUFBTSxLQUFLUixNQUFNLENBQXJCLEdBQUEsRUFBMkI7QUFDdkIsYUFBQSxLQUFBO0FBQ0g7O0FBQ0QsUUFBSVUsUUFBUSxDQUFaLEdBQVksQ0FBWixFQUFtQjtBQUNmO0FBQ0FILE1BQUFBLElBQUksQ0FBSkEsSUFBQUEsQ0FBQUEsR0FBQUE7O0FBQ0EsVUFBSUMsTUFBTSxLQUFLUixNQUFNLENBQXJCLElBQUEsRUFBNEI7QUFDeEJRLFFBQUFBLE1BQU0sR0FBR1IsTUFBTSxDQUFmUSxLQUFBQTtBQURKLE9BQUEsTUFHSyxJQUFJQSxNQUFNLEtBQUtSLE1BQU0sQ0FBckIsS0FBQSxFQUE2QjtBQUM5QlEsUUFBQUEsTUFBTSxHQUFHUixNQUFNLENBQWZRLEdBQUFBO0FBQ0EsZUFBQSxLQUFBO0FBQ0g7QUFUTCxLQUFBLE1BV0ssSUFBSUEsTUFBTSxLQUFLUixNQUFNLENBQXJCLEtBQUEsRUFBNkI7QUFDOUI7QUFDQU8sTUFBQUEsSUFBSSxDQUFKQSxJQUFBQSxDQUFBQSxHQUFBQTtBQUNIOztBQUNELFFBQUlJLFlBQVksQ0FBWkEsT0FBQUEsQ0FBQUEsR0FBQUEsTUFBOEIsQ0FBbEMsQ0FBQSxFQUFzQztBQUNsQyxhQUFBLEtBQUE7QUFDSDs7QUFDRCxXQUFBLElBQUE7QUF0QkpOLEdBQWdCLENBQWhCQTtBQXdCQSxTQUFBLElBQUE7QUFDSDs7QUFDTSxTQUFBLDJCQUFBLENBQUEsUUFBQSxFQUFBLElBQUEsRUFBcUQ7QUFDeEQsTUFBTU8sUUFBUSxHQUFBLENBQUEsR0FBQSxtQkFBQSxDQUFBLFNBQUEsQ0FBQSxFQUFkLElBQWMsQ0FBZDtBQUNBLE1BQU1DLEtBQUssR0FBWCxFQUFBO0FBQ0FSLEVBQUFBLGdCQUFnQixDQUFBLFFBQUEsRUFBVyxVQUFBLEdBQUEsRUFBQSxJQUFBLEVBQWU7QUFDdEMsUUFBTVMsS0FBSyxHQUFHRixRQUFRLENBQVJBLE9BQUFBLENBQWQsR0FBY0EsQ0FBZDs7QUFDQSxRQUFJRSxLQUFLLEtBQUssQ0FBZCxDQUFBLEVBQWtCO0FBQ2RELE1BQUFBLEtBQUssQ0FBTEEsSUFBQUEsQ0FBQUEsSUFBQUE7QUFDQUQsTUFBQUEsUUFBUSxDQUFSQSxNQUFBQSxDQUFBQSxLQUFBQSxFQUFBQSxDQUFBQTtBQUNIOztBQUNELFdBQU8sQ0FBQyxDQUFDQSxRQUFRLENBQWpCLE1BQUE7QUFOSlAsR0FBZ0IsQ0FBaEJBO0FBUUEsU0FBQSxLQUFBO0FBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgUmVjb3JkO1xuKGZ1bmN0aW9uIChSZWNvcmQpIHtcbiAgICBSZWNvcmRbUmVjb3JkW1wiTm9uZVwiXSA9IDBdID0gXCJOb25lXCI7XG4gICAgUmVjb3JkW1JlY29yZFtcIlN0YXJ0XCJdID0gMV0gPSBcIlN0YXJ0XCI7XG4gICAgUmVjb3JkW1JlY29yZFtcIkVuZFwiXSA9IDJdID0gXCJFbmRcIjtcbn0pKFJlY29yZCB8fCAoUmVjb3JkID0ge30pKTtcbmZ1bmN0aW9uIHRyYXZlcnNlTm9kZXNLZXkodHJlZURhdGEsIGNhbGxiYWNrKSB7XG4gICAgZnVuY3Rpb24gcHJvY2Vzc05vZGUoZGF0YU5vZGUpIHtcbiAgICAgICAgY29uc3QgeyBrZXksIGNoaWxkcmVuIH0gPSBkYXRhTm9kZTtcbiAgICAgICAgaWYgKGNhbGxiYWNrKGtleSwgZGF0YU5vZGUpICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgdHJhdmVyc2VOb2Rlc0tleShjaGlsZHJlbiB8fCBbXSwgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRyZWVEYXRhLmZvckVhY2gocHJvY2Vzc05vZGUpO1xufVxuLyoqIOiuoeeul+mAieS4reiMg+WbtO+8jOWPquiAg+iZkWV4cGFuZGVk5oOF5Ya15Lul5LyY5YyW5oCn6IO9ICovXG5leHBvcnQgZnVuY3Rpb24gY2FsY1JhbmdlS2V5cyh0cmVlRGF0YSwgZXhwYW5kZWRLZXlzLCBzdGFydEtleSwgZW5kS2V5KSB7XG4gICAgY29uc3Qga2V5cyA9IFtdO1xuICAgIGxldCByZWNvcmQgPSBSZWNvcmQuTm9uZTtcbiAgICBpZiAoc3RhcnRLZXkgJiYgc3RhcnRLZXkgPT09IGVuZEtleSkge1xuICAgICAgICByZXR1cm4gW3N0YXJ0S2V5XTtcbiAgICB9XG4gICAgaWYgKCFzdGFydEtleSB8fCAhZW5kS2V5KSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgZnVuY3Rpb24gbWF0Y2hLZXkoa2V5KSB7XG4gICAgICAgIHJldHVybiBrZXkgPT09IHN0YXJ0S2V5IHx8IGtleSA9PT0gZW5kS2V5O1xuICAgIH1cbiAgICB0cmF2ZXJzZU5vZGVzS2V5KHRyZWVEYXRhLCAoa2V5KSA9PiB7XG4gICAgICAgIGlmIChyZWNvcmQgPT09IFJlY29yZC5FbmQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF0Y2hLZXkoa2V5KSkge1xuICAgICAgICAgICAgLy8gTWF0Y2ggdGVzdFxuICAgICAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICAgICAgICBpZiAocmVjb3JkID09PSBSZWNvcmQuTm9uZSkge1xuICAgICAgICAgICAgICAgIHJlY29yZCA9IFJlY29yZC5TdGFydDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHJlY29yZCA9PT0gUmVjb3JkLlN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgcmVjb3JkID0gUmVjb3JkLkVuZDtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocmVjb3JkID09PSBSZWNvcmQuU3RhcnQpIHtcbiAgICAgICAgICAgIC8vIEFwcGVuZCBzZWxlY3Rpb25cbiAgICAgICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChleHBhbmRlZEtleXMuaW5kZXhPZihrZXkpID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuICAgIHJldHVybiBrZXlzO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnREaXJlY3RvcnlLZXlzVG9Ob2Rlcyh0cmVlRGF0YSwga2V5cykge1xuICAgIGNvbnN0IHJlc3RLZXlzID0gWy4uLmtleXNdO1xuICAgIGNvbnN0IG5vZGVzID0gW107XG4gICAgdHJhdmVyc2VOb2Rlc0tleSh0cmVlRGF0YSwgKGtleSwgbm9kZSkgPT4ge1xuICAgICAgICBjb25zdCBpbmRleCA9IHJlc3RLZXlzLmluZGV4T2Yoa2V5KTtcbiAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgbm9kZXMucHVzaChub2RlKTtcbiAgICAgICAgICAgIHJlc3RLZXlzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICEhcmVzdEtleXMubGVuZ3RoO1xuICAgIH0pO1xuICAgIHJldHVybiBub2Rlcztcbn1cbiJdfQ==