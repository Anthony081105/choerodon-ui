e7b9e2c355b7fc20a2e88590dc5dd9a5
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _omit = _interopRequireDefault(require("lodash/omit"));

var _classnames = _interopRequireDefault(require("classnames"));

var _calculateNodeHeight = _interopRequireDefault(require("./calculateNodeHeight"));

var _configure = require("../configure");

function _createSuper(Derived) {
  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  return function () {
    var Super = (0, _getPrototypeOf2["default"])(Derived),
        result;

    if (isNativeReflectConstruct()) {
      var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return (0, _possibleConstructorReturn2["default"])(this, result);
  };
}

function onNextFrame(cb) {
  if (window.requestAnimationFrame) {
    return window.requestAnimationFrame(cb);
  }

  return window.setTimeout(cb, 1);
}

function clearNextFrameAction(nextFrameId) {
  if (window.cancelAnimationFrame) {
    window.cancelAnimationFrame(nextFrameId);
  } else {
    window.clearTimeout(nextFrameId);
  }
}

var TextArea =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(TextArea, _Component);

  var _super = _createSuper(TextArea);

  function TextArea() {
    var _this;

    (0, _classCallCheck2["default"])(this, TextArea);
    _this = _super.apply(this, arguments);
    _this.state = {
      textareaStyles: {},
      inputLength: 0,
      focused: false
    };

    _this.resizeTextarea = function () {
      var autosize = _this.props.autosize;

      if (!autosize || !_this.textAreaRef) {
        return;
      }

      var minRows = autosize ? autosize.minRows : null;
      var maxRows = autosize ? autosize.maxRows : null;
      var textareaStyles = (0, _calculateNodeHeight["default"])(_this.textAreaRef, false, minRows, maxRows);

      _this.setState({
        textareaStyles: textareaStyles
      });
    };

    _this.handleTextareaChange = function (e) {
      if (!('value' in _this.props)) {
        _this.resizeTextarea();
      }

      var onChange = _this.props.onChange;

      if (onChange) {
        onChange(e);
      }
    };

    _this.handleKeyDown = function (e) {
      var _this$props = _this.props,
          onPressEnter = _this$props.onPressEnter,
          onKeyDown = _this$props.onKeyDown;

      if (e.keyCode === 13 && onPressEnter) {
        onPressEnter(e);
      }

      if (onKeyDown) {
        onKeyDown(e);
      }
    };

    _this.handleInput = function () {
      _this.setState({
        inputLength: _this.textAreaRef.value.length
      });
    };

    _this.saveTextAreaRef = function (textArea) {
      _this.textAreaRef = textArea;
    };

    _this.handleFocus = function (e) {
      var onFocus = _this.props.onFocus;

      _this.setState({
        focused: true
      });

      if (onFocus) {
        onFocus(e);
      }
    };

    _this.handleBlur = function (e) {
      var onBlur = _this.props.onBlur;

      _this.setState({
        focused: false
      });

      if (onBlur) {
        onBlur(e);
      }
    };

    return _this;
  }

  (0, _createClass2["default"])(TextArea, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.resizeTextarea();

      if (this.textAreaRef.value) {
        this.setState({
          inputLength: this.textAreaRef.value.length
        });
      }

      var autoFocus = this.props.autoFocus;

      if (autoFocus) {
        this.setState({
          focused: true
        });
      }
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      // Re-render with the new content then recalculate the height as required.
      if (this.textAreaRef.value !== nextProps.value) {
        var inputLength = nextProps.value && nextProps.value.length;
        this.setState({
          inputLength: inputLength || 0
        });
      }

      if (nextProps.autoFocus) {
        this.setState({
          focused: true
        });
      }

      var value = this.props.value;

      if (value !== nextProps.value) {
        if (this.nextFrameActionId) {
          clearNextFrameAction(this.nextFrameActionId);
        }

        this.nextFrameActionId = onNextFrame(this.resizeTextarea);
      }
    }
  }, {
    key: "focus",
    value: function focus() {
      this.textAreaRef.focus();
    }
  }, {
    key: "blur",
    value: function blur() {
      this.textAreaRef.blur();
    }
  }, {
    key: "getPrefixCls",
    value: function getPrefixCls() {
      var prefixCls = this.props.prefixCls;
      return (0, _configure.getPrefixCls)('input', prefixCls);
    }
  }, {
    key: "getTextAreaClassName",
    value: function getTextAreaClassName() {
      var className = this.props.className;
      var prefixCls = this.getPrefixCls();
      return (0, _classnames["default"])(prefixCls, "".concat(prefixCls, "-textarea-element"), className);
    }
  }, {
    key: "getWrapperClassName",
    value: function getWrapperClassName() {
      var _classNames;

      var _this$props2 = this.props,
          disabled = _this$props2.disabled,
          label = _this$props2.label,
          border = _this$props2.border;
      var _this$state = this.state,
          inputLength = _this$state.inputLength,
          focused = _this$state.focused;
      var prefixCls = this.getPrefixCls();
      return (0, _classnames["default"])("".concat(prefixCls, "-wrapper"), "".concat(prefixCls, "-textarea"), (_classNames = {}, (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-has-value"), inputLength !== 0), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-focused"), focused), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-disabled"), disabled), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-has-label"), !!label), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-has-border"), border), _classNames));
    }
  }, {
    key: "getLengthInfo",
    value: function getLengthInfo() {
      var _this$props3 = this.props,
          maxLength = _this$props3.maxLength,
          showLengthInfo = _this$props3.showLengthInfo;
      var prefixCls = this.getPrefixCls();
      var inputLength = this.state.inputLength;
      return maxLength && showLengthInfo || maxLength && maxLength > 0 && inputLength === maxLength ? _react["default"].createElement("div", {
        className: "".concat(prefixCls, "-length-info")
      }, "".concat(inputLength, "/").concat(maxLength)) : null;
    }
  }, {
    key: "getLabel",
    value: function getLabel() {
      var _this$props4 = this.props,
          placeholder = _this$props4.placeholder,
          label = _this$props4.label;
      var inputLength = this.state.inputLength;

      if (inputLength === 0 && placeholder) {
        return placeholder;
      }

      return label;
    }
  }, {
    key: "renderFloatLabel",
    value: function renderFloatLabel() {
      var label = this.getLabel();

      if (label) {
        var prefixCls = this.getPrefixCls();
        return _react["default"].createElement("div", {
          className: "".concat(prefixCls, "-label-wrapper")
        }, _react["default"].createElement("div", {
          className: "".concat(prefixCls, "-label")
        }, label));
      }
    }
  }, {
    key: "render",
    value: function render() {
      var props = this.props;
      var textareaStyles = this.state.textareaStyles;
      var prefixCls = this.getPrefixCls();
      var otherProps = (0, _omit["default"])(props, ['prefixCls', 'onPressEnter', 'autosize', 'placeholder', 'focused', 'showLengthInfo']);
      var style = (0, _objectSpread2["default"])({}, props.style, {}, textareaStyles); // Make sure it could be reset when using form.getFieldDecorator

      if ('value' in otherProps) {
        otherProps.value = otherProps.value || '';
      }

      otherProps.onInput = this.handleInput;
      return _react["default"].createElement("span", {
        className: this.getWrapperClassName()
      }, _react["default"].createElement("div", {
        className: "".concat(prefixCls, "-rendered-wrapper")
      }, _react["default"].createElement("textarea", (0, _extends2["default"])({}, otherProps, {
        className: this.getTextAreaClassName(),
        style: style,
        onKeyDown: this.handleKeyDown,
        onChange: this.handleTextareaChange,
        ref: this.saveTextAreaRef,
        onInput: this.handleInput,
        onBlur: this.handleBlur,
        onFocus: this.handleFocus
      })), this.renderFloatLabel()), this.getLengthInfo());
    }
  }]);
  return TextArea;
}(_react.Component);

exports["default"] = TextArea;
TextArea.displayName = 'TextArea';
TextArea.defaultProps = {
  showLengthInfo: true,
  border: true
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,