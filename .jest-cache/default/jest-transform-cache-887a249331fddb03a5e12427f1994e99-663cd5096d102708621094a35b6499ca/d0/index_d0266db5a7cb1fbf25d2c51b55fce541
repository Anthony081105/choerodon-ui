75ff52ba4666d67bbe198b023048fdbf
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "TreeNode", {
  enumerable: true,
  get: function get() {
    return _tree.TreeNode;
  }
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _DirectoryTree = _interopRequireDefault(require("./DirectoryTree"));

var _openAnimation = _interopRequireDefault(require("../_util/openAnimation"));

var _tree = _interopRequireWildcard(require("../rc-components/tree"));

var _icon = _interopRequireDefault(require("../icon"));

var _progress = _interopRequireDefault(require("../progress"));

var _configure = require("../configure");

function _createSuper(Derived) {
  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  return function () {
    var Super = (0, _getPrototypeOf2["default"])(Derived),
        result;

    if (isNativeReflectConstruct()) {
      var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return (0, _possibleConstructorReturn2["default"])(this, result);
  };
}

var Tree =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(Tree, _Component);

  var _super = _createSuper(Tree);

  function Tree() {
    var _this;

    (0, _classCallCheck2["default"])(this, Tree);
    _this = _super.apply(this, arguments);

    _this.renderSwitcherIcon = function (_ref) {
      var isLeaf = _ref.isLeaf,
          loading = _ref.loading;
      var _this$props = _this.props,
          showLine = _this$props.showLine,
          switcherIcon = _this$props.switcherIcon;

      var prefixCls = _this.getPrefixCls();

      if (loading) {
        return _react["default"].createElement(_progress["default"], {
          type: "loading"
          /* loading */
          ,
          className: "".concat(prefixCls, "-switcher-loading-icon"),
          size: "small"
          /* small */

        });
      }

      var switcherCls = "".concat(prefixCls, "-switcher-icon");

      if (showLine) {
        if (isLeaf) {
          return _react["default"].createElement(_icon["default"], {
            type: "note",
            className: "".concat(prefixCls, "-switcher-line-icon")
          });
        }

        return _react["default"].createElement(_icon["default"], {
          type: "arrow_drop_down",
          className: switcherCls
        });
      }

      if (isLeaf) {
        return null;
      }

      if (switcherIcon) {
        var switcherOriginCls = switcherIcon.props.className || '';
        return (0, _react.cloneElement)(switcherIcon, {
          className: [switcherOriginCls, switcherCls]
        });
      }

      return _react["default"].createElement(_icon["default"], {
        type: "arrow_drop_down",
        className: switcherCls
      });
    };

    _this.setTreeRef = function (node) {
      _this.tree = node;
    };

    return _this;
  }

  (0, _createClass2["default"])(Tree, [{
    key: "getPrefixCls",
    value: function getPrefixCls() {
      var prefixCls = this.props.prefixCls;
      return (0, _configure.getPrefixCls)('tree', prefixCls);
    }
  }, {
    key: "render",
    value: function render() {
      var props = this.props;
      var className = props.className,
          showIcon = props.showIcon,
          children = props.children;
      var checkable = props.checkable;
      var prefixCls = this.getPrefixCls();
      return _react["default"].createElement(_tree["default"], (0, _extends2["default"])({
        itemHeight: 20,
        ref: this.setTreeRef
      }, props, {
        className: (0, _classnames["default"])(!showIcon && "".concat(prefixCls, "-icon-hide"), className),
        checkable: checkable ? _react["default"].createElement("span", {
          className: "".concat(prefixCls, "-checkbox-inner")
        }) : 0,
        switcherIcon: this.renderSwitcherIcon,
        prefixCls: prefixCls
      }), children);
    }
  }]);
  return Tree;
}(_react.Component);

exports["default"] = Tree;
Tree.displayName = 'Tree';
Tree.TreeNode = _tree.TreeNode;
Tree.DirectoryTree = _DirectoryTree["default"];
Tree.defaultProps = {
  checkable: false,
  showIcon: false,
  openAnimation: _openAnimation["default"]
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,