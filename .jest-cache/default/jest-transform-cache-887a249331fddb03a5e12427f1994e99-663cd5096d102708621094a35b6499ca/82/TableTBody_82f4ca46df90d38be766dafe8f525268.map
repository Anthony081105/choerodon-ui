{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/table/TableTBody.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { Component, CSSProperties, ReactNode } from 'react';\nimport PropTypes from 'prop-types';\nimport { observer } from 'mobx-react';\nimport { action, computed } from 'mobx';\nimport classes from 'component-classes';\nimport raf from 'raf';\nimport { pxToRem } from 'choerodon-ui/lib/_util/UnitConvertor';\nimport ReactResizeObserver from 'choerodon-ui/lib/_util/resizeObserver';\nimport { ColumnProps } from './Column';\nimport { ElementProps } from '../core/ViewComponent';\nimport TableContext from './TableContext';\nimport TableRow from './TableRow';\nimport Record from '../data-set/Record';\nimport { ColumnLock } from './enum';\nimport ExpandedRow from './ExpandedRow';\nimport { DataSetStatus } from '../data-set/enum';\nimport autobind from '../_util/autobind';\n\nexport interface TableTBodyProps extends ElementProps {\n  lock?: ColumnLock | boolean;\n  indentSize: number;\n}\n\n@observer\nexport default class TableTBody extends Component<TableTBodyProps, any> {\n  static displayName = 'TableTBody';\n\n  static propTypes = {\n    lock: PropTypes.oneOfType([\n      PropTypes.bool,\n      PropTypes.oneOf([ColumnLock.right, ColumnLock.left]),\n    ]),\n    prefixCls: PropTypes.string,\n    indentSize: PropTypes.number.isRequired,\n  };\n\n  static contextType = TableContext;\n\n  tableBody: HTMLTableSectionElement | null;\n\n  nextFrameActionId?: number;\n\n  @computed\n  get leafColumns(): ColumnProps[] {\n    const { tableStore } = this.context;\n    const { lock } = this.props;\n    if (lock === 'right') {\n      return tableStore.rightLeafColumns.filter(({ hidden }) => !hidden);\n    }\n    if (lock) {\n      return tableStore.leftLeafColumns.filter(({ hidden }) => !hidden);\n    }\n    return tableStore.leafColumns.filter(({ hidden }) => !hidden);\n  }\n\n  @autobind\n  handleResize() {\n    if (this.nextFrameActionId !== undefined) {\n      raf.cancel(this.nextFrameActionId);\n    }\n    this.nextFrameActionId = raf(this.syncBodyHeight);\n  }\n\n  @autobind\n  saveRef(node) {\n    this.tableBody = node;\n    this.handleResize();\n  }\n\n  /**\n   * 虚拟滚动计算可视化数据\n   */\n  @autobind\n  processData() {\n    const {\n      tableStore: { data, lastScrollTop = 0, height, rowHeight },\n    } = this.context;\n    const startIndex = Math.max(Math.round((lastScrollTop / rowHeight) - 3), 0);\n    const endIndex = Math.min(Math.round((lastScrollTop + height) / rowHeight + 2), data.length);\n    return data.slice(startIndex, endIndex);\n  }\n\n  render() {\n    const { prefixCls, lock } = this.props;\n    const { leafColumns } = this;\n    const {\n      tableStore: { data, props: { virtual }, height },\n    } = this.context;\n    const rowData = virtual && height ? this.processData() : data;\n    const rows = data.length\n      ? this.getRows(rowData, leafColumns, true, lock)\n      : this.getEmptyRow(leafColumns, lock);\n    const body = (\n      <tbody ref={lock ? undefined : this.saveRef} className={`${prefixCls}-tbody`}>\n        {rows}\n      </tbody>\n    );\n    return lock ? (\n      body\n    ) : (\n      <ReactResizeObserver onResize={this.handleResize} resizeProp=\"height\">\n        {body}\n      </ReactResizeObserver>\n    );\n  }\n\n  componentDidUpdate() {\n    const { lock, prefixCls } = this.props;\n    if (!lock) {\n      const {\n        tableStore: { node },\n      } = this.context;\n      if (\n        classes(node.wrapper).has(`${prefixCls}-focused`) &&\n        !node.wrapper.contains(document.activeElement)\n      ) {\n        node.focus();\n      }\n    }\n  }\n\n  getRows(\n    records: Record[],\n    columns: ColumnProps[],\n    expanded?: boolean,\n    lock?: ColumnLock | boolean,\n  ): ReactNode {\n    return records.map((record, index) => this.getRow(columns, record, index, expanded, lock));\n  }\n\n  getEmptyRow(columns: ColumnProps[], lock?: ColumnLock | boolean): ReactNode | undefined {\n    const {\n      tableStore: { dataSet, emptyText, width },\n    } = this.context;\n    const { prefixCls } = this.props;\n    const style: CSSProperties = width\n      ? {\n          marginLeft: pxToRem(width / 2),\n        }\n      : {\n          transform: 'none',\n          display: 'inline-block',\n        };\n    const tdStyle: CSSProperties = width ? {} : { textAlign: 'center' };\n    return (\n      <tr className={`${prefixCls}-empty-row`}>\n        <td colSpan={columns.length} style={tdStyle}>\n          <div style={style}>{!lock && dataSet.status === DataSetStatus.ready && emptyText}</div>\n        </td>\n      </tr>\n    );\n  }\n\n  @autobind\n  renderExpandedRows(\n    columns: ColumnProps[],\n    record: Record,\n    isExpanded?: boolean,\n    lock?: ColumnLock | boolean,\n  ): ReactNode {\n    return this.getRows(record.children || [], columns, isExpanded, lock);\n  }\n\n  getRow(\n    columns: ColumnProps[],\n    record: Record,\n    index: number,\n    expanded?: boolean,\n    lock?: ColumnLock | boolean,\n  ): ReactNode {\n    const { prefixCls, indentSize } = this.props;\n    const {\n      tableStore: { isTree },\n    } = this.context;\n    const children = isTree && (\n      <ExpandedRow record={record} columns={columns} lock={lock}>\n        {this.renderExpandedRows}\n      </ExpandedRow>\n    );\n    return (\n      <TableRow\n        key={record.key}\n        hidden={!expanded}\n        lock={lock}\n        indentSize={indentSize}\n        prefixCls={prefixCls}\n        columns={columns}\n        record={record}\n        index={index}\n      >\n        {children}\n      </TableRow>\n    );\n  }\n\n  @autobind\n  @action\n  syncBodyHeight() {\n    const { tableStore } = this.context;\n    if (this.tableBody && !tableStore.hidden) {\n      tableStore.bodyHeight = this.tableBody.offsetHeight;\n    }\n  }\n}\n"]}