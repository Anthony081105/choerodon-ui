{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/code-area/lint/javascript.tsx"],"names":[],"mappings":";;AAEA;;AAEA,IAAI,OAAO,MAAP,KAAkB,WAAtB,EAAmC;AACjC,EAAA,OAAO,CAAC,gCAAD,CAAP;;AACA,EAAA,OAAO,CAAC,4BAAD,CAAP;;AACA,MAAM,UAAU,GAAG,OAAO,CAAC,YAAD,CAA1B;;AAEA,MAAM,WAAW,GAAG,SAAd,WAAc,CAAS,MAAT,EAAiB,MAAjB,EAAqC;AACvD,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,MAA3B,EAAmC,CAAC,EAApC,EAAwC;AACtC,UAAM,KAAK,GAAG,MAAM,CAAC,CAAD,CAApB;;AACA,UAAI,KAAJ,EAAW;AACT,YAAI,KAAK,CAAC,IAAN,IAAc,CAAlB,EAAqB;AACnB,cAAI,MAAM,CAAC,OAAX,EAAoB;AAClB,YAAA,MAAM,CAAC,OAAP,CAAe,IAAf,qDAAiE,KAAK,CAAC,IAAvE,QAAgF,KAAhF;AACD;;AACD;AACD;;AAED,YAAM,KAAK,GAAG,KAAK,CAAC,SAAN,GAAkB,CAAhC;AACA,YAAI,GAAG,GAAG,KAAK,GAAG,CAAlB;;AACA,YAAI,KAAK,CAAC,QAAV,EAAoB;AAClB,cAAM,KAAK,GAAG,KAAK,CAAC,QAAN,CAAe,SAAf,CAAyB,KAAzB,EAAgC,MAAhC,CAAuC,KAAvC,CAAd;;AACA,cAAI,KAAK,GAAG,CAAC,CAAb,EAAgB;AACd,YAAA,GAAG,IAAI,KAAP;AACD;AACF,SAfQ,CAiBT;;;AACA,YAAM,IAAI,GAAe;AACvB,UAAA,OAAO,EAAE,KAAK,CAAC,MADQ;AAEvB,UAAA,QAAQ,EAAE,KAAK,CAAC,IAAN,GAAc,KAAK,CAAC,IAAN,CAAW,UAAX,CAAsB,GAAtB,IAA6B,SAA7B,GAAyC,OAAvD,GAAkE,OAFrD;AAGvB,UAAA,IAAI,EAAE,UAAU,CAAC,GAAX,CAAe,KAAK,CAAC,IAAN,GAAa,CAA5B,EAA+B,KAA/B,CAHiB;AAIvB,UAAA,EAAE,EAAE,UAAU,CAAC,GAAX,CAAe,KAAK,CAAC,IAAN,GAAa,CAA5B,EAA+B,GAA/B;AAJmB,SAAzB;AAOA,QAAA,MAAM,CAAC,IAAP,CAAY,IAAZ;AACD;AACF;AACF,GA/BD;;AAiCA,MAAM,SAAS,GAAG,SAAZ,SAAY,CAAS,IAAT,EAAe,OAAf,EAAsB;AACtC,QAAI,CAAC,OAAO,CAAC,MAAb,EACE;AACA,MAAA,OAAO,CAAC,MAAR,GAAiB,CAAjB,CAHoC,CAGhB;;AACtB,wBAAO,IAAP,EAAa,OAAb,EAAsB,OAAO,CAAC,OAA9B;;AAJsC,uBAKnB,eAAO,IAAP,EALmB;AAAA,QAK9B,MAL8B,gBAK9B,MAL8B;;AAMtC,QAAM,MAAM,GAAiB,EAA7B;AACA,QAAI,MAAJ,EAAY,WAAW,CAAC,MAAD,EAAS,MAAT,CAAX;AACZ,WAAO,MAAP;AACD,GATD;;AAWA,EAAA,UAAU,CAAC,cAAX,CAA0B,MAA1B,EAAkC,YAAlC,EAAgD,SAAhD;AACD","sourcesContent":["/* eslint-disable global-require */\nimport { Annotation } from 'codemirror';\nimport { JSHINT } from 'jshint';\n\nif (typeof window !== 'undefined') {\n  require('codemirror/addon/lint/lint.css');\n  require('codemirror/addon/lint/lint');\n  const CodeMirror = require('codemirror');\n\n  const parseErrors = function(errors, output: Annotation[]) {\n    for (let i = 0; i < errors.length; i++) {\n      const error = errors[i];\n      if (error) {\n        if (error.line <= 0) {\n          if (window.console) {\n            window.console.warn(`Cannot display JSHint error (invalid line ${error.line})`, error);\n          }\n          continue;\n        }\n\n        const start = error.character - 1;\n        let end = start + 1;\n        if (error.evidence) {\n          const index = error.evidence.substring(start).search(/.\\b/);\n          if (index > -1) {\n            end += index;\n          }\n        }\n\n        // Convert to format expected by validation service\n        const hint: Annotation = {\n          message: error.reason,\n          severity: error.code ? (error.code.startsWith('W') ? 'warning' : 'error') : 'error',\n          from: CodeMirror.Pos(error.line - 1, start),\n          to: CodeMirror.Pos(error.line - 1, end),\n        };\n\n        output.push(hint);\n      }\n    }\n  };\n\n  const validator = function(text, options) {\n    if (!options.indent)\n      // JSHint error.character actually is a column index, this fixes underlining on lines using tabs for indentation\n      options.indent = 1; // JSHint default value is 4\n    JSHINT(text, options, options.globals);\n    const { errors } = JSHINT.data();\n    const result: Annotation[] = [];\n    if (errors) parseErrors(errors, result);\n    return result;\n  };\n\n  CodeMirror.registerHelper('lint', 'javascript', validator);\n}\n"]}