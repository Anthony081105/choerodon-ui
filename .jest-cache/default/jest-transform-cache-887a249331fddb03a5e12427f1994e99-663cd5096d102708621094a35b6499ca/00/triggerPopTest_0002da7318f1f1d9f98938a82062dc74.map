{"version":3,"sources":["triggerPopTest.js"],"names":["triggerPopTest","Component","describe","beforeAll","jest","useFakeTimers","container","beforeEach","document","createElement","body","appendChild","afterAll","useRealTimers","afterEach","removeChild","it","handlePopupChange","fn","wrapper","expect","not","toHaveBeenCalled","find","simulate","runAllTimers","setProps","readOnly"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEe,SAASA,cAAT,CAAwBC,SAAxB,EAAmC;AAChDC,EAAAA,QAAQ,CAAC,kBAAD,EAAqB,YAAM;AACjCC,IAAAA,SAAS,CAAC,YAAM;AACdC,MAAAA,IAAI,CAACC,aAAL;AACD,KAFQ,CAAT;AAIA,QAAIC,SAAJ;AACAC,IAAAA,UAAU,CAAC,YAAM;AACfD,MAAAA,SAAS,GAAGE,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAZ;AACAD,MAAAA,QAAQ,CAACE,IAAT,CAAcC,WAAd,CAA0BL,SAA1B;AACD,KAHS,CAAV;AAKAM,IAAAA,QAAQ,CAAC,YAAM;AACbR,MAAAA,IAAI,CAACS,aAAL;AACD,KAFO,CAAR;AAIAC,IAAAA,SAAS,CAAC,YAAM;AACdN,MAAAA,QAAQ,CAACE,IAAT,CAAcK,WAAd,CAA0BT,SAA1B;AACD,KAFQ,CAAT;AAIAU,IAAAA,EAAE,CAAC,+FAAD,EAAkG,YAAM;AACxG,UAAMC,iBAAiB,GAAGb,IAAI,CAACc,EAAL,EAA1B;AACA,UAAMC,OAAO,GAAG,mBAAM,gCAAC,SAAD;AAAW,QAAA,mBAAmB,EAAEF;AAAhC,QAAN,CAAhB;AACAG,MAAAA,MAAM,CAACH,iBAAD,CAAN,CAA0BI,GAA1B,CAA8BC,gBAA9B;AAEAH,MAAAA,OAAO,CAACI,IAAR,CAAa,OAAb,EAAsBC,QAAtB,CAA+B,OAA/B;AACApB,MAAAA,IAAI,CAACqB,YAAL;AACAL,MAAAA,MAAM,CAACH,iBAAD,CAAN,CAA0BK,gBAA1B;AAEAH,MAAAA,OAAO,CAACI,IAAR,CAAa,OAAb,EAAsBC,QAAtB,CAA+B,WAA/B;AACApB,MAAAA,IAAI,CAACqB,YAAL;AACAL,MAAAA,MAAM,CAACH,iBAAD,CAAN,CAA0BK,gBAA1B;AAEAH,MAAAA,OAAO,CAACI,IAAR,CAAa,OAAb,EAAsBC,QAAtB,CAA+B,YAA/B;AACApB,MAAAA,IAAI,CAACqB,YAAL;AACAL,MAAAA,MAAM,CAACH,iBAAD,CAAN,CAA0BK,gBAA1B;AAEAH,MAAAA,OAAO,CAACI,IAAR,CAAa,OAAb,EAAsBC,QAAtB,CAA+B,WAA/B;AACApB,MAAAA,IAAI,CAACqB,YAAL;AACAL,MAAAA,MAAM,CAACH,iBAAD,CAAN,CAA0BK,gBAA1B;AAEAH,MAAAA,OAAO,CAACI,IAAR,CAAa,OAAb,EAAsBC,QAAtB,CAA+B,aAA/B;AACApB,MAAAA,IAAI,CAACqB,YAAL;AACAL,MAAAA,MAAM,CAACH,iBAAD,CAAN,CAA0BK,gBAA1B;AACD,KAxBC,CAAF;AA0BAN,IAAAA,EAAE,CAAC,qEAAD,EAAwE,YAAM;AAC9E,UAAMC,iBAAiB,GAAGb,IAAI,CAACc,EAAL,EAA1B;AACA,UAAMC,OAAO,GAAG,mBAAM,gCAAC,SAAD;AAAW,QAAA,mBAAmB,EAAEF;AAAhC,QAAN,CAAhB;AAEAE,MAAAA,OAAO,CAACO,QAAR,CAAiB;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OAAjB;AACAR,MAAAA,OAAO,CAACI,IAAR,CAAa,OAAb,EAAsBC,QAAtB,CAA+B,OAA/B;AACApB,MAAAA,IAAI,CAACqB,YAAL;AACAL,MAAAA,MAAM,CAACH,iBAAD,CAAN,CAA0BI,GAA1B,CAA8BC,gBAA9B;AACD,KARC,CAAF;AASD,GAtDO,CAAR;AAuDD","sourcesContent":["import React from 'react';\nimport { mount } from 'enzyme';\n\nexport default function triggerPopTest(Component) {\n  describe('Trigger Pop Test', () => {\n    beforeAll(() => {\n      jest.useFakeTimers();\n    });\n\n    let container;\n    beforeEach(() => {\n      container = document.createElement('div');\n      document.body.appendChild(container);\n    });\n\n    afterAll(() => {\n      jest.useRealTimers();\n    });\n\n    afterEach(() => {\n      document.body.removeChild(container);\n    });\n\n    it('the Popup change event will trigger when {click, mousedown,mousemove,mouseenter,contextmenu }', () => {\n      const handlePopupChange = jest.fn();\n      const wrapper = mount(<Component onPopupHiddenChange={handlePopupChange} />);\n      expect(handlePopupChange).not.toHaveBeenCalled();\n\n      wrapper.find('input').simulate('click');\n      jest.runAllTimers();\n      expect(handlePopupChange).toHaveBeenCalled();\n\n      wrapper.find('input').simulate('mousedown');\n      jest.runAllTimers();\n      expect(handlePopupChange).toHaveBeenCalled();\n\n      wrapper.find('input').simulate('mouseenter');\n      jest.runAllTimers();\n      expect(handlePopupChange).toHaveBeenCalled();\n\n      wrapper.find('input').simulate('mousemove');\n      jest.runAllTimers();\n      expect(handlePopupChange).toHaveBeenCalled();\n\n      wrapper.find('input').simulate('contextmenu');\n      jest.runAllTimers();\n      expect(handlePopupChange).toHaveBeenCalled();\n    });\n\n    it('the Popup change can not trigger when the property readonly is true', () => {\n      const handlePopupChange = jest.fn();\n      const wrapper = mount(<Component onPopupHiddenChange={handlePopupChange} />);\n\n      wrapper.setProps({ readOnly: true });\n      wrapper.find('input').simulate('click');\n      jest.runAllTimers();\n      expect(handlePopupChange).not.toHaveBeenCalled();\n    });\n  });\n}\n"]}