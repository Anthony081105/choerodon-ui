{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/performance-table/utils/mergeCells.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport isFunction from 'lodash/isFunction';\nimport get from 'lodash/get';\nimport ColumnGroup from '../ColumnGroup';\n\nimport isNullOrUndefined from './isNullOrUndefined';\n\nfunction cloneCell(Cell, props) {\n  return React.cloneElement(Cell, props);\n}\n\nfunction mergeCells(cells) {\n  const nextCells = [];\n  for (let i = 0; i < cells.length; i += 1) {\n    const {\n      width,\n      colSpan,\n      groupCount,\n      groupHeader,\n      isHeaderCell,\n      headerHeight,\n      verticalAlign,\n    } = cells[i].props;\n\n    const groupChildren = [];\n\n    /**\n     * 为列头添加分组\n     */\n    if (groupCount && isHeaderCell) {\n      let nextWidth = width;\n      let left = 0;\n      for (let j = 0; j < groupCount; j += 1) {\n        const nextCell = cells[i + j];\n        const { width: nextCellWidth, children } = nextCell.props;\n\n        if (j !== 0) {\n          nextWidth += nextCellWidth;\n          left += cells[i + j - 1].props.width;\n          cells[i + j] = cloneCell(nextCell, { removed: true });\n        }\n        groupChildren.push(\n          // @ts-ignore\n          <div key={j} style={{ width: nextCellWidth, left }}>\n            {children}\n          </div>,\n        );\n      }\n      nextCells.push(\n        // @ts-ignore\n        cloneCell(cells[i], {\n          width: nextWidth,\n          children: (\n            <ColumnGroup\n              width={nextWidth}\n              headerHeight={headerHeight}\n              header={groupHeader}\n              verticalAlign={verticalAlign}\n            >\n              {groupChildren}\n            </ColumnGroup>\n          ),\n        }),\n      );\n      continue;\n    } else if (colSpan) {\n      /**\n       * 如果存在 colSpan 属性，就去找它的下一个 Cell,\n       * 看看值是否是 isNullOrUndefined，，如果为空这可以合并这个单元格\n       */\n      let nextWidth = width;\n      for (let j = 0; j < colSpan; j += 1) {\n        const nextCell = cells[i + j];\n        if (nextCell) {\n          const {\n            rowData,\n            rowIndex,\n            children,\n            width: colSpanWidth,\n            isHeaderCell,\n            dataKey,\n          } = nextCell.props;\n\n          const cellText = isFunction(children)\n            ? children(rowData, rowIndex)\n            : get(rowData, dataKey);\n\n          if (\n            (rowData && isNullOrUndefined(cellText)) ||\n            (isHeaderCell && isNullOrUndefined(children))\n          ) {\n            nextWidth += colSpanWidth;\n            cells[i + j] = cloneCell(nextCell, {\n              removed: true,\n            });\n          }\n        }\n      }\n\n      // @ts-ignore\n      nextCells.push(cloneCell(cells[i], { width: nextWidth }));\n      continue;\n    }\n    // @ts-ignore\n    nextCells.push(cells[i]);\n  }\n  return nextCells;\n}\n\nexport default mergeCells;\n"]}