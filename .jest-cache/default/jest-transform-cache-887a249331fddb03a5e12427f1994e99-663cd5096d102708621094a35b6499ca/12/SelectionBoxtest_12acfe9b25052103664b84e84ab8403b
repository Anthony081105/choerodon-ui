28be1f7c309164feed14e658b611229d
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _createStore = _interopRequireDefault(require("../createStore"));

var _SelectionBox = _interopRequireDefault(require("../SelectionBox"));

var getDefaultStore = function getDefaultStore(selectedRowKeys) {
  return (0, _createStore["default"])({
    selectedRowKeys: selectedRowKeys || [],
    selectionDirty: false
  });
};

describe('SelectionBox', function () {
  it('unchecked by selectedRowKeys ', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_SelectionBox["default"], {
      store: getDefaultStore(),
      rowIndex: "1",
      disabled: false,
      onChange: function onChange() {},
      defaultSelection: []
    }));
    expect(wrapper.state()).toEqual({
      checked: false
    });
  });
  it('checked by selectedRowKeys ', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_SelectionBox["default"], {
      store: getDefaultStore(['1']),
      rowIndex: "1",
      disabled: false,
      onChange: function onChange() {},
      defaultSelection: []
    }));
    expect(wrapper.state()).toEqual({
      checked: true
    });
  });
  it('checked by defaultSelection', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_SelectionBox["default"], {
      store: getDefaultStore(),
      rowIndex: "1",
      disabled: false,
      onChange: function onChange() {},
      defaultSelection: ['1']
    }));
    expect(wrapper.state()).toEqual({
      checked: true
    });
  });
  it('checked when store change', function () {
    var store = getDefaultStore();
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_SelectionBox["default"], {
      store: store,
      rowIndex: "1",
      disabled: false,
      onChange: function onChange() {},
      defaultSelection: []
    }));
    store.setState({
      selectedRowKeys: ['1'],
      selectionDirty: true
    });
    expect(wrapper.state()).toEqual({
      checked: true
    });
  });
  it('passes props to Checkbox', function () {
    var checkboxProps = {
      name: 'testName',
      id: 'testId'
    };
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_SelectionBox["default"], (0, _extends2["default"])({
      store: getDefaultStore(),
      rowIndex: "1",
      disabled: false,
      onChange: function onChange() {},
      defaultSelection: ['1']
    }, checkboxProps)));
    wrapper.find('Checkbox').forEach(function (box) {
      expect(box.props().name).toEqual(checkboxProps.name);
      expect(box.props().id).toEqual(checkboxProps.id);
    });
  });
  it('passes props to Radios', function () {
    var radioProps = {
      name: 'testName',
      id: 'testId'
    };
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_SelectionBox["default"], (0, _extends2["default"])({
      store: getDefaultStore(),
      rowIndex: "1",
      disabled: false,
      onChange: function onChange() {},
      defaultSelection: ['1'],
      type: "radio"
    }, radioProps)));
    wrapper.find('Radio').forEach(function (radio) {
      expect(radio.props().name).toEqual(radioProps.name);
      expect(radio.props().id).toEqual(radioProps.id);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,