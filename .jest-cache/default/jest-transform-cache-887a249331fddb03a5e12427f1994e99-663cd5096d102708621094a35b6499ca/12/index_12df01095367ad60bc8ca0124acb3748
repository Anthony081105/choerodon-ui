14c4dec590dbdb383b7b1856f87eeea2
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getConfig = getConfig;
exports.getPrefixCls = getPrefixCls;
exports.getProPrefixCls = getProPrefixCls;
exports["default"] = configure;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _mobx = require("mobx");

var _isObject = _interopRequireDefault(require("lodash/isObject"));

var _choerodonUiFont = require("choerodon-ui-font");

var _localeContext = require("../../pro/lib/locale-context");

var _FeedBack = _interopRequireDefault(require("../../pro/lib/data-set/FeedBack"));

var _utils = require("../../pro/lib/form/utils");

var _ref;

var defaultRenderEmpty = function defaultRenderEmpty(componentName) {
  switch (componentName) {
    case 'Table':
      return (0, _localeContext.$l)('Table', 'empty_data');

    case 'Select':
      return (0, _localeContext.$l)('Select', 'no_matching_results');

    default:
  }
};

var defaultButtonProps = {
  color: "primary"
  /* primary */
  ,
  funcType: "flat"
  /* flat */

};
var defaultSpinProps = {
  size: "default"
  /* default */
  ,
  wrapperClassName: ''
};

var globalConfig = _mobx.observable.map([['prefixCls', 'c7n'], ['proPrefixCls', 'c7n-pro'], ['iconfontPrefix', 'icon'], ['ripple', true], ['collapseExpandIconPosition', 'left'], ['collapseTrigger', 'header'], ['lookupCache', {
  maxAge: 1000 * 60 * 10,
  max: 100
}], ['lookupUrl', function (code) {
  return "/common/code/".concat(code, "/");
}], ['lookupAxiosMethod', 'post'], // [
//   'lookupBatchAxiosConfig',
//   codes => ({
//     url: '/common/batch',
//     params: codes.reduce((obj, code) => {
//       obj[code] = code;
//       return obj;
//     }, {}),
//   }),
// ],
['lovDefineUrl', function (code) {
  return "/sys/lov/lov_define?code=".concat(code);
}], ['lovQueryUrl', function (code) {
  return "/common/lov/dataset/".concat(code);
}], ['lovTriggerMode', "icon"
/* icon */
], ['dataKey', 'rows'], ['totalKey', 'total'], ['statusKey', '__status'], ['tlsKey', '__tls'], ['status', (_ref = {}, (0, _defineProperty2["default"])(_ref, "add"
/* add */
, 'add'), (0, _defineProperty2["default"])(_ref, "update"
/* update */
, 'update'), (0, _defineProperty2["default"])(_ref, "delete"
/* delete */
, 'delete'), _ref)], ['labelLayout', "horizontal"
/* horizontal */
], ['queryBar', "normal"
/* normal */
], ['tableBorder', true], ['tableHighLightRow', true], ['tableSelectedHighLightRow', false], ['tableRowHeight', 30], ['tableDefaultRenderer', ''], ['tableColumnResizable', true], ['tableSpinProps', defaultSpinProps], ['tableButtonProps', defaultButtonProps], ['tableCommandProps', defaultButtonProps], ['tableAlwaysShowRowBox', false], ['tableUseMouseBatchChoose', false], ['tableEditorNextKeyEnterDown', true], ['modalSectionBorder', true], ['modalOkFirst', true], ['buttonColor', "default"
/* default */
], ['buttonFuncType', "raised"
/* raised */
], ['feedback', _FeedBack["default"]], ['renderEmpty', defaultRenderEmpty], ['icons', _choerodonUiFont.categories], ['formatter', {
  jsonDate: 'YYYY-MM-DD HH:mm:ss',
  date: 'YYYY-MM-DD',
  dateTime: 'YYYY-MM-DD HH:mm:ss',
  time: 'HH:mm:ss',
  year: 'YYYY',
  month: 'YYYY-MM',
  week: 'GGGG-Wo'
}], ['dropdownMatchSelectWidth', true], ['useColon', false], ['excludeUseColonTagList', _utils.defaultExcludeUseColonTag], ['lovTableProps', {}], ['textFieldAutoComplete', undefined], ['tableDragRow', false], ['tableDragColumn', false], ['numberFieldNonStrictStep', false]]);

function getConfig(key) {
  // FIXME: observable.map把构建map时传入的key类型和value类型分别做了union，
  // 丢失了一一对应的映射关系，导致函数调用者无法使用union后的返回值类型，因此需要指定本函数返回值为any
  return globalConfig.get(key);
}

function getPrefixCls(suffixCls, customizePrefixCls) {
  if (customizePrefixCls) {
    return customizePrefixCls;
  }

  return "".concat(getConfig('prefixCls'), "-").concat(suffixCls);
}

function getProPrefixCls(suffixCls, customizePrefixCls) {
  if (customizePrefixCls) {
    return customizePrefixCls;
  }

  return "".concat(getConfig('proPrefixCls'), "-").concat(suffixCls);
}

var mergeProps = ['transport', 'feedback', 'formatter'];

function configure(config) {
  (0, _mobx.runInAction)(function () {
    Object.keys(config).forEach(function (key) {
      var value = config[key];

      if (mergeProps.includes(key) && (0, _isObject["default"])(value)) {
        globalConfig.set(key, (0, _objectSpread2["default"])({}, (0, _mobx.toJS)(globalConfig.get(key)), {}, value));
      } else {
        globalConfig.set(key, config[key]);
      }
    });
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,