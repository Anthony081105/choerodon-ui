2b8133cc74cb533fcd199624940f60d2
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _moment = _interopRequireDefault(require("moment"));

var _weekPicker = _interopRequireDefault(require("../../week-picker"));

var _focusTest = _interopRequireDefault(require("../../../tests/shared/focusTest"));

var _utils = require("./utils");

describe('weeks-picker-pro', function () {
  (0, _focusTest["default"])(_weekPicker["default"]);
  beforeEach(function () {
    jest.useFakeTimers();
  });
  afterEach(function () {
    jest.useRealTimers();
  });
  it('the week will be controlled by the value', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_weekPicker["default"], {
      value: (0, _moment["default"])('2020-02-19')
    }));
    expect(wrapper.find('input').at(0).prop('value')).toBe('2020-8th');
    wrapper.setProps({
      value: (0, _moment["default"])('2020-02-26')
    });
    wrapper.update();
    expect(wrapper.find('input').at(0).prop('value')).toBe('2020-9th');
  });
  it('should has disabled property can not do anything', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_weekPicker["default"], null));
    (0, _utils.disableWrapper)(wrapper);
  });
  it('the keyDown event keyCode should render correctly', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_weekPicker["default"], null));
    wrapper.find('input').simulate('click');
    jest.runAllTimers();
    wrapper.update();
    (0, _utils.simulateCode)(wrapper, 39);
    (0, _utils.simulateCode)(wrapper, 37);
    wrapper.update();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlZWtzLnRlc3QuanMiXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJXZWVrc1BpY2tlciIsImJlZm9yZUVhY2giLCJqZXN0IiwidXNlRmFrZVRpbWVycyIsImFmdGVyRWFjaCIsInVzZVJlYWxUaW1lcnMiLCJpdCIsIndyYXBwZXIiLCJleHBlY3QiLCJmaW5kIiwiYXQiLCJwcm9wIiwidG9CZSIsInNldFByb3BzIiwidmFsdWUiLCJ1cGRhdGUiLCJzaW11bGF0ZSIsInJ1bkFsbFRpbWVycyJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBQSxRQUFRLENBQUMsa0JBQUQsRUFBcUIsWUFBTTtBQUNqQyw2QkFBVUMsc0JBQVY7QUFFQUMsRUFBQUEsVUFBVSxDQUFDLFlBQU07QUFDZkMsSUFBQUEsSUFBSSxDQUFDQyxhQUFMO0FBQ0QsR0FGUyxDQUFWO0FBSUFDLEVBQUFBLFNBQVMsQ0FBQyxZQUFNO0FBQ2RGLElBQUFBLElBQUksQ0FBQ0csYUFBTDtBQUNELEdBRlEsQ0FBVDtBQUlBQyxFQUFBQSxFQUFFLENBQUMsMENBQUQsRUFBNkMsWUFBTTtBQUNuRCxRQUFNQyxPQUFPLEdBQUcsbUJBQU0sZ0NBQUMsc0JBQUQ7QUFBYSxNQUFBLEtBQUssRUFBRSx3QkFBTyxZQUFQO0FBQXBCLE1BQU4sQ0FBaEI7QUFDQUMsSUFBQUEsTUFBTSxDQUNKRCxPQUFPLENBQ0pFLElBREgsQ0FDUSxPQURSLEVBRUdDLEVBRkgsQ0FFTSxDQUZOLEVBR0dDLElBSEgsQ0FHUSxPQUhSLENBREksQ0FBTixDQUtFQyxJQUxGLENBS08sVUFMUDtBQU1BTCxJQUFBQSxPQUFPLENBQUNNLFFBQVIsQ0FBaUI7QUFBRUMsTUFBQUEsS0FBSyxFQUFFLHdCQUFPLFlBQVA7QUFBVCxLQUFqQjtBQUNBUCxJQUFBQSxPQUFPLENBQUNRLE1BQVI7QUFDQVAsSUFBQUEsTUFBTSxDQUNKRCxPQUFPLENBQ0pFLElBREgsQ0FDUSxPQURSLEVBRUdDLEVBRkgsQ0FFTSxDQUZOLEVBR0dDLElBSEgsQ0FHUSxPQUhSLENBREksQ0FBTixDQUtFQyxJQUxGLENBS08sVUFMUDtBQU1ELEdBaEJDLENBQUY7QUFrQkFOLEVBQUFBLEVBQUUsQ0FBQyxrREFBRCxFQUFxRCxZQUFNO0FBQzNELFFBQU1DLE9BQU8sR0FBRyxtQkFBTSxnQ0FBQyxzQkFBRCxPQUFOLENBQWhCO0FBQ0EsK0JBQWVBLE9BQWY7QUFDRCxHQUhDLENBQUY7QUFLQUQsRUFBQUEsRUFBRSxDQUFDLG1EQUFELEVBQXNELFlBQU07QUFDNUQsUUFBTUMsT0FBTyxHQUFHLG1CQUFNLGdDQUFDLHNCQUFELE9BQU4sQ0FBaEI7QUFDQUEsSUFBQUEsT0FBTyxDQUFDRSxJQUFSLENBQWEsT0FBYixFQUFzQk8sUUFBdEIsQ0FBK0IsT0FBL0I7QUFDQWQsSUFBQUEsSUFBSSxDQUFDZSxZQUFMO0FBQ0FWLElBQUFBLE9BQU8sQ0FBQ1EsTUFBUjtBQUNBLDZCQUFhUixPQUFiLEVBQXNCLEVBQXRCO0FBQ0EsNkJBQWFBLE9BQWIsRUFBc0IsRUFBdEI7QUFDQUEsSUFBQUEsT0FBTyxDQUFDUSxNQUFSO0FBQ0QsR0FSQyxDQUFGO0FBU0QsQ0EzQ08sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBtb3VudCB9IGZyb20gJ2VuenltZSc7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgV2Vla3NQaWNrZXIgZnJvbSAnLi4vLi4vd2Vlay1waWNrZXInO1xuaW1wb3J0IGZvY3VzVGVzdCBmcm9tICcuLi8uLi8uLi90ZXN0cy9zaGFyZWQvZm9jdXNUZXN0JztcbmltcG9ydCB7IGRpc2FibGVXcmFwcGVyLCBzaW11bGF0ZUNvZGUgfSBmcm9tICcuL3V0aWxzJztcblxuZGVzY3JpYmUoJ3dlZWtzLXBpY2tlci1wcm8nLCAoKSA9PiB7XG4gIGZvY3VzVGVzdChXZWVrc1BpY2tlcik7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgamVzdC51c2VGYWtlVGltZXJzKCk7XG4gIH0pO1xuXG4gIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgamVzdC51c2VSZWFsVGltZXJzKCk7XG4gIH0pO1xuXG4gIGl0KCd0aGUgd2VlayB3aWxsIGJlIGNvbnRyb2xsZWQgYnkgdGhlIHZhbHVlJywgKCkgPT4ge1xuICAgIGNvbnN0IHdyYXBwZXIgPSBtb3VudCg8V2Vla3NQaWNrZXIgdmFsdWU9e21vbWVudCgnMjAyMC0wMi0xOScpfSAvPik7XG4gICAgZXhwZWN0KFxuICAgICAgd3JhcHBlclxuICAgICAgICAuZmluZCgnaW5wdXQnKVxuICAgICAgICAuYXQoMClcbiAgICAgICAgLnByb3AoJ3ZhbHVlJyksXG4gICAgKS50b0JlKCcyMDIwLTh0aCcpO1xuICAgIHdyYXBwZXIuc2V0UHJvcHMoeyB2YWx1ZTogbW9tZW50KCcyMDIwLTAyLTI2JykgfSk7XG4gICAgd3JhcHBlci51cGRhdGUoKTtcbiAgICBleHBlY3QoXG4gICAgICB3cmFwcGVyXG4gICAgICAgIC5maW5kKCdpbnB1dCcpXG4gICAgICAgIC5hdCgwKVxuICAgICAgICAucHJvcCgndmFsdWUnKSxcbiAgICApLnRvQmUoJzIwMjAtOXRoJyk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgaGFzIGRpc2FibGVkIHByb3BlcnR5IGNhbiBub3QgZG8gYW55dGhpbmcnLCAoKSA9PiB7XG4gICAgY29uc3Qgd3JhcHBlciA9IG1vdW50KDxXZWVrc1BpY2tlciAvPik7XG4gICAgZGlzYWJsZVdyYXBwZXIod3JhcHBlcik7XG4gIH0pO1xuXG4gIGl0KCd0aGUga2V5RG93biBldmVudCBrZXlDb2RlIHNob3VsZCByZW5kZXIgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgIGNvbnN0IHdyYXBwZXIgPSBtb3VudCg8V2Vla3NQaWNrZXIgLz4pO1xuICAgIHdyYXBwZXIuZmluZCgnaW5wdXQnKS5zaW11bGF0ZSgnY2xpY2snKTtcbiAgICBqZXN0LnJ1bkFsbFRpbWVycygpO1xuICAgIHdyYXBwZXIudXBkYXRlKCk7XG4gICAgc2ltdWxhdGVDb2RlKHdyYXBwZXIsIDM5KTtcbiAgICBzaW11bGF0ZUNvZGUod3JhcHBlciwgMzcpO1xuICAgIHdyYXBwZXIudXBkYXRlKCk7XG4gIH0pO1xufSk7XG4iXX0=