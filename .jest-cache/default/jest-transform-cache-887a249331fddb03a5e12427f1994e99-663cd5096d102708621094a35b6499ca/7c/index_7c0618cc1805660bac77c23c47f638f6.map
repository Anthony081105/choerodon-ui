{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components/locale-provider/index.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA,SAAS,eAAT,CAAyB,MAAzB,EAAuC;AACrC,MAAI,MAAM,IAAI,MAAM,CAAC,MAArB,EAA6B;AAC3B,oCAAe,kBAAf,EAAuB,MAAvB,CAA8B,MAAM,CAAC,MAArC;AACD,GAFD,MAEO;AACL,oCAAe,kBAAf,EAAuB,MAAvB,CAA8B,IAA9B;AACD;AACF;;IAEoB,c;;;;;;;;;;;;;;sCAaJ;AAAA,UACL,MADK,GACM,KAAK,KADX,CACL,MADK;AAEb,aAAO;AACL,QAAA,SAAS,qCACJ,MADI;AAEP,UAAA,KAAK,EAAE;AAFA;AADJ,OAAP;AAMD;;;yCAEiB;AAAA,UACR,MADQ,GACG,KAAK,KADR,CACR,MADQ;AAEhB,MAAA,eAAe,CAAC,MAAD,CAAf;AACA,WAAK,kBAAL;AACD;;;8CAEyB,S,EAA8B;AAAA,UAC9C,MAD8C,GACnC,KAAK,KAD8B,CAC9C,MAD8C;AAEtD,UAAM,UAAU,GAAG,SAAS,CAAC,MAA7B;;AACA,UAAI,MAAM,KAAK,UAAf,EAA2B;AACzB,QAAA,eAAe,CAAC,SAAS,CAAC,MAAX,CAAf;AACD;AACF;;;yCAEiB;AAAA,UACR,MADQ,GACG,KAAK,KADR,CACR,MADQ;AAEhB,uCAAoB,MAAM,IAAI,MAAM,CAAC,KAArC;AACD;;;2CAEmB;AAClB;AACD;;;6BAEK;AAAA,UACI,QADJ,GACiB,KAAK,KADtB,CACI,QADJ;AAEJ,aAAO,gBAAS,IAAT,CAAc,QAAd,CAAP;AACD;;;EAjDyC,gB;;;AACnC,cAAA,CAAA,SAAA,GAAY;AACjB,EAAA,MAAM,EAAE,sBAAU;AADD,CAAZ;AAIA,cAAA,CAAA,YAAA,GAAe;AACpB,EAAA,MAAM,EAAE;AADY,CAAf;AAIA,cAAA,CAAA,iBAAA,GAAoB;AACzB,EAAA,SAAS,EAAE,sBAAU;AADI,CAApB","sourcesContent":["import { Children, Component, ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport interopDefault from '../_util/interopDefault';\nimport { changeConfirmLocale, ModalLocale } from '../modal/locale';\n\nexport interface Locale {\n  locale: string;\n  Pagination?: Object;\n  Cascader?: Object;\n  DatePicker?: Object;\n  TimePicker?: Object;\n  Calendar?: Object;\n  Table?: Object;\n  Modal?: ModalLocale;\n  Popconfirm?: Object;\n  Transfer?: Object;\n  Select?: Object;\n  Upload?: Object;\n  imageCrop?: imageCrop;\n  performanceTable?: PerformanceTable;\n}\n\nexport interface imageCrop {\n  editImage: string,\n  avatarUploadError: string,\n  avatarServerError: string,\n  avatarUpload: string,\n  avatarReminder: string,\n  preview: string,\n  reUpload: string,\n  imageTooLarge: string,\n  imageUploadError: string,\n  imageDragHere: string,\n  pleaseUpload: string,\n  uploadType: string,\n  picture: string,\n  cancelButton: string,\n  saveButton: string,\n  changeAvatar: string,\n}\n\nexport interface PerformanceTable {\n  emptyMessage: string;\n  loading:string;\n}\n\nexport interface LocaleProviderProps {\n  locale: Locale;\n  children?: ReactElement<any>;\n}\n\nfunction setMomentLocale(locale: Locale) {\n  if (locale && locale.locale) {\n    interopDefault(moment).locale(locale.locale);\n  } else {\n    interopDefault(moment).locale('en');\n  }\n}\n\nexport default class LocaleProvider extends Component<LocaleProviderProps, any> {\n  static propTypes = {\n    locale: PropTypes.object,\n  };\n\n  static defaultProps = {\n    locale: {},\n  };\n\n  static childContextTypes = {\n    c7nLocale: PropTypes.object,\n  };\n\n  getChildContext() {\n    const { locale } = this.props;\n    return {\n      c7nLocale: {\n        ...locale,\n        exist: true,\n      },\n    };\n  }\n\n  componentWillMount() {\n    const { locale } = this.props;\n    setMomentLocale(locale);\n    this.componentDidUpdate();\n  }\n\n  componentWillReceiveProps(nextProps: LocaleProviderProps) {\n    const { locale } = this.props;\n    const nextLocale = nextProps.locale;\n    if (locale !== nextLocale) {\n      setMomentLocale(nextProps.locale);\n    }\n  }\n\n  componentDidUpdate() {\n    const { locale } = this.props;\n    changeConfirmLocale(locale && locale.Modal);\n  }\n\n  componentWillUnmount() {\n    changeConfirmLocale();\n  }\n\n  render() {\n    const { children } = this.props;\n    return Children.only(children);\n  }\n}\n"]}