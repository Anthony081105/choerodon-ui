{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components/switch/index.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA;;IAeqB,M;;;;;AAArB,oBAAA;AAAA;;AAAA;;;AAqBE,UAAA,UAAA,GAAa,UAAC,IAAD,EAA0B;AACrC,YAAK,QAAL,GAAgB,IAAhB;AACD,KAFD;;AArBF;AAyCC;;;;4BA5BM;AACH,WAAK,QAAL,CAAc,KAAd;AACD;;;2BAEG;AACF,WAAK,QAAL,CAAc,IAAd;AACD;;;6BAMK;AAAA;;AAAA,wBACqE,KAAK,KAD1E;AAAA,UACe,kBADf,eACI,SADJ;AAAA,UACmC,IADnC,eACmC,IADnC;AAAA,UACyC,OADzC,eACyC,OADzC;AAAA,8CACkD,SADlD;AAAA,UACkD,SADlD,sCAC8D,EAD9D;AAEJ,UAAM,SAAS,GAAG,6BAAa,QAAb,EAAuB,kBAAvB,CAAlB;AACA,UAAM,OAAO,GAAG,4BAAW,SAAX,6EACV,SADU,aACU,IAAI,KAAA,OADd,2DAEV,SAFU,eAEY,OAFZ,gBAAhB;AAIA,aACE,kBAAA,aAAA,CAAC,kBAAD,EAAS,0BAAA,EAAA,EACH,sBAAK,KAAK,KAAV,EAAiB,CAAC,SAAD,CAAjB,CADG,EAC0B;AACjC,QAAA,SAAS,EAAE,SADsB;AAEjC,QAAA,SAAS,EAAE,OAFsB;AAGjC,QAAA,GAAG,EAAE,KAAK;AAHuB,OAD1B,CAAT,CADF;AAQD;;;EAxCiC,gB;;;AAC3B,MAAA,CAAA,WAAA,GAAc,QAAd;AAEA,MAAA,CAAA,SAAA,GAAY;AACjB,EAAA,SAAS,EAAE,sBAAU,MADJ;AAGjB;AACA,EAAA,IAAI,EAAE,sBAAU,KAAV,CAAgB,CAAA;AAAA;AAAA,IAAA;AAAA;AAAA,IAAA;AAAA;AAAA,GAAhB,CAJW;AAKjB,EAAA,SAAS,EAAE,sBAAU;AALJ,CAAZ","sourcesContent":["import React, { Component, ReactNode } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport omit from 'lodash/omit';\nimport RcSwitch from '../rc-components/switch';\nimport { Size } from '../_util/enum';\nimport { getPrefixCls } from '../configure';\n\nexport interface SwitchProps {\n  prefixCls?: string;\n  size?: Size;\n  className?: string;\n  checked?: boolean;\n  defaultChecked?: boolean;\n  onChange?: (checked: boolean) => any;\n  checkedChildren?: ReactNode;\n  unCheckedChildren?: ReactNode;\n  disabled?: boolean;\n  loading?: boolean;\n}\n\nexport default class Switch extends Component<SwitchProps, {}> {\n  static displayName = 'Switch';\n\n  static propTypes = {\n    prefixCls: PropTypes.string,\n\n    // size=default and size=large are the same\n    size: PropTypes.oneOf([Size.small, Size.default, Size.large]),\n    className: PropTypes.string,\n  };\n\n  private rcSwitch: any;\n\n  focus() {\n    this.rcSwitch.focus();\n  }\n\n  blur() {\n    this.rcSwitch.blur();\n  }\n\n  saveSwitch = (node: RcSwitch | null) => {\n    this.rcSwitch = node;\n  };\n\n  render() {\n    const { prefixCls: customizePrefixCls, size, loading, className = '' } = this.props;\n    const prefixCls = getPrefixCls('switch', customizePrefixCls);\n    const classes = classNames(className, {\n      [`${prefixCls}-small`]: size === Size.small,\n      [`${prefixCls}-loading`]: loading,\n    });\n    return (\n      <RcSwitch\n        {...omit(this.props, ['loading'])}\n        prefixCls={prefixCls}\n        className={classes}\n        ref={this.saveSwitch}\n      />\n    );\n  }\n}\n"]}