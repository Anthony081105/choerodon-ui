{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/validator/rules/patternMismatch.tsx"],"names":[],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAGA,SAAS,eAAT,CAAyB,OAAzB,EAAiD;AAC/C,MAAI,OAAO,YAAY,MAAvB,EAA+B;AAC7B,WAAO,OAAP;AACD;;AACD,MAAM,KAAK,GAAG,OAAO,CAAC,UAAR,CAAmB,GAAnB,IAA0B,EAA1B,GAA+B,GAA7C;AACA,MAAM,GAAG,GAAG,OAAO,CAAC,QAAR,CAAiB,GAAjB,IAAwB,EAAxB,GAA6B,GAAzC;AACA,SAAO,IAAI,MAAJ,WAAc,KAAd,SAAsB,OAAtB,SAAgC,GAAhC,EAAP;AACD;;AAEa,SAAU,eAAV,CAA0B,KAA1B,EAAsC,KAAtC,EAA2D;AAAA,MAC/D,OAD+D,GACxB,KADwB,CAC/D,OAD+D;AAAA,MACtD,yBADsD,GACxB,KADwB,CACtD,yBADsD;;AAEvE,MAAI,CAAC,yBAAQ,KAAR,CAAD,IAAmB,CAAC,CAAC,OAArB,IAAgC,CAAC,eAAe,CAAC,OAAD,CAAf,CAAyB,IAAzB,CAA8B,KAA9B,CAArC,EAA2E;AACzE,QAAM,QAAQ,GAAG,iBAAjB;AADyE,gCAIrE,yBAJqE,CAGtE,QAHsE;AAAA,QAG3D,iBAH2D,sCAGvC,uBAAG,WAAH,EAAgB,kBAAhB,CAHuC;AAKzE,WAAO,IAAI,4BAAJ,CAAqB;AAC1B,MAAA,iBAAiB,EAAjB,iBAD0B;AAE1B,MAAA,KAAK,EAAL,KAF0B;AAG1B,MAAA,QAAQ,EAAR;AAH0B,KAArB,CAAP;AAKD;;AACD,SAAO,IAAP;AACD","sourcesContent":["import isEmpty from '../../_util/isEmpty';\nimport ValidationResult from '../ValidationResult';\nimport { $l } from '../../locale-context';\nimport { methodReturn, ValidatorProps } from '.';\n\nfunction generatePattern(pattern: string | RegExp): RegExp {\n  if (pattern instanceof RegExp) {\n    return pattern;\n  }\n  const begin = pattern.startsWith('^') ? '' : '^';\n  const end = pattern.endsWith('$') ? '' : '$';\n  return new RegExp(`${begin}${pattern}${end}`);\n}\n\nexport default function patternMismatch(value: any, props: ValidatorProps): methodReturn {\n  const { pattern, defaultValidationMessages } = props;\n  if (!isEmpty(value) && !!pattern && !generatePattern(pattern).test(value)) {\n    const ruleName = 'patternMismatch';\n    const {\n      [ruleName]: validationMessage = $l('Validator', 'pattern_mismatch'),\n    } = defaultValidationMessages;\n    return new ValidationResult({\n      validationMessage,\n      value,\n      ruleName,\n    });\n  }\n  return true;\n}\n"]}