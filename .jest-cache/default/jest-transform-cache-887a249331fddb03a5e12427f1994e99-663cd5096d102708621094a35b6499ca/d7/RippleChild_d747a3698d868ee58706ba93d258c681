a02503bf692f98e7bf4d8ec1e02bb75e
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _animate = _interopRequireDefault(require("../animate"));

var _MouseDown = _interopRequireDefault(require("./MouseDown"));

function _createSuper(Derived) {
  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  return function () {
    var Super = (0, _getPrototypeOf2["default"])(Derived),
        result;

    if (isNativeReflectConstruct()) {
      var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return (0, _possibleConstructorReturn2["default"])(this, result);
  };
}

var RippleChild =
/*#__PURE__*/
function (_PureComponent) {
  (0, _inherits2["default"])(RippleChild, _PureComponent);

  var _super = _createSuper(RippleChild);

  function RippleChild() {
    var _this;

    (0, _classCallCheck2["default"])(this, RippleChild);
    _this = _super.apply(this, arguments);

    _this.handleMouseDown = function (child, size) {
      var prefixCls = _this.props.prefixCls;
      var _child$props = child.props,
          children = _child$props.children,
          style = _child$props.style;
      var componentProps = {
        className: "".concat(prefixCls, "-wrapper")
      };

      if (size) {
        var x = size.x,
            y = size.y,
            width = size.width,
            height = size.height;
        var maxWidth = Math.max(width - x, x);
        var maxHeight = Math.max(height - y, y);
        var max = Math.sqrt(maxWidth * maxWidth + maxHeight * maxHeight);
        _this.currentCircleStyle = {
          width: max + max,
          height: max + max,
          left: x - max,
          top: y - max
        };
      }

      var newProps = {
        children: [children, _react["default"].createElement(_animate["default"], {
          key: "ripple",
          component: "div",
          componentProps: componentProps,
          transitionName: size ? 'zoom-small-slow' : 'fade',
          hiddenProp: "hidden"
        }, _this.currentCircleStyle && _react["default"].createElement("div", {
          hidden: !size,
          className: prefixCls,
          key: "circle",
          style: _this.currentCircleStyle
        }))],
        style: _this.currentStyle || style
      };

      if (size && size.position === 'static') {
        newProps.style = (0, _objectSpread2["default"])({}, style, {
          position: 'relative'
        });
        _this.currentStyle = newProps.style;
      }

      return (0, _react.cloneElement)(child, newProps);
    };

    _this.ripple = function (child) {
      if ((0, _react.isValidElement)(child)) {
        return _react["default"].createElement(_MouseDown["default"], {
          rippleChild: child
        }, _this.handleMouseDown);
      }

      return child;
    };

    return _this;
  }

  (0, _createClass2["default"])(RippleChild, [{
    key: "render",
    value: function render() {
      var children = this.props.children;
      return this.ripple(_react.Children.only(children));
    }
  }]);
  return RippleChild;
}(_react.PureComponent);

exports["default"] = RippleChild;
RippleChild.displayName = 'RippleChild';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJpcHBsZS9SaXBwbGVDaGlsZC5qcyJdLCJuYW1lcyI6WyJSaXBwbGVDaGlsZCIsIlB1cmVDb21wb25lbnQiLCJwcmVmaXhDbHMiLCJjaGlsZHJlbiIsInN0eWxlIiwiY2hpbGQiLCJjb21wb25lbnRQcm9wcyIsImNsYXNzTmFtZSIsIngiLCJ5Iiwid2lkdGgiLCJoZWlnaHQiLCJzaXplIiwibWF4V2lkdGgiLCJNYXRoIiwibWF4SGVpZ2h0IiwibWF4IiwibGVmdCIsInRvcCIsIm5ld1Byb3BzIiwiQW5pbWF0ZSIsImtleSIsImNvbXBvbmVudCIsInRyYW5zaXRpb25OYW1lIiwiaGlkZGVuUHJvcCIsImhpZGRlbiIsImN1cnJlbnRDaXJjbGVTdHlsZSIsInBvc2l0aW9uIiwiTW91c2VEb3duIiwicmlwcGxlQ2hpbGQiLCJDaGlsZHJlbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFBLE1BQUEsR0FBQSx1QkFBQSxDQUFBLE9BQUEsQ0FBQSxPQUFBLENBQUEsQ0FBQTs7QUFDQSxJQUFBLFFBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUEsQ0FBQSxZQUFBLENBQUEsQ0FBQTs7QUFDQSxJQUFBLFVBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUEsQ0FBQSxhQUFBLENBQUEsQ0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQUNxQkEsVzs7Ozs7OztBQUNqQixXQUFBLFdBQUEsR0FBYztBQUFBLFFBQUEsS0FBQTs7QUFBQSxLQUFBLEdBQUEsZ0JBQUEsQ0FBQSxTQUFBLENBQUEsRUFBQSxJQUFBLEVBQUEsV0FBQTtBQUNWLElBQUEsS0FBQSxHQUFBLE1BQUEsQ0FBQSxLQUFBLENBQUEsSUFBQSxFQUFBLFNBQUEsQ0FBQTs7QUFDQSxJQUFBLEtBQUEsQ0FBQSxlQUFBLEdBQXVCLFVBQUEsS0FBQSxFQUFBLElBQUEsRUFBaUI7QUFBQSxVQUM1QkUsU0FENEIsR0FDZCxLQUFBLENBRGMsS0FDZCxDQURjLFNBQUE7QUFBQSxV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QSxNQUFBLENBQUEsY0FBQSxFQUFKLEtBQUksQ0FBSixFQUEyQjtBQUN2QixlQUFPLE1BQUEsQ0FBQSxTQUFBLENBQUEsQ0FBQSxhQUFBLENBQW9CUyxVQUFBQSxDQUFwQixTQUFvQkEsQ0FBcEIsRUFBK0I7QUFBRUMsVUFBQUEsV0FBVyxFQUFFeEI7QUFBZixTQUEvQixFQUF1RCxLQUFBLENBQTlELGVBQU8sQ0FBUDtBQUNIOztBQUNELGFBQUEsS0FBQTtBQUpKLEtBQUE7O0FBakNVLFdBQUEsS0FBQTtBQXVDYjs7Ozs2QkFDUTtBQUFBLFVBQ0dGLFFBREgsR0FDZ0IsS0FEaEIsS0FDZ0IsQ0FEaEIsUUFBQTtBQUVMLGFBQU8sS0FBQSxNQUFBLENBQVkyQixNQUFBQSxDQUFBQSxRQUFBQSxDQUFBQSxJQUFBQSxDQUFuQixRQUFtQkEsQ0FBWixDQUFQO0FBQ0g7OztFQTVDb0M3QixNQUFBQSxDQUFBQSxhOzs7QUE4Q3pDRCxXQUFXLENBQVhBLFdBQUFBLEdBQUFBLGFBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IENoaWxkcmVuLCBjbG9uZUVsZW1lbnQsIGlzVmFsaWRFbGVtZW50LCBQdXJlQ29tcG9uZW50LCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBBbmltYXRlIGZyb20gJy4uL2FuaW1hdGUnO1xuaW1wb3J0IE1vdXNlRG93biBmcm9tICcuL01vdXNlRG93bic7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSaXBwbGVDaGlsZCBleHRlbmRzIFB1cmVDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmhhbmRsZU1vdXNlRG93biA9IChjaGlsZCwgc2l6ZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBwcmVmaXhDbHMgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgICAgICBjb25zdCB7IGNoaWxkcmVuLCBzdHlsZSB9ID0gY2hpbGQucHJvcHM7XG4gICAgICAgICAgICBjb25zdCBjb21wb25lbnRQcm9wcyA9IHtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGAke3ByZWZpeENsc30td3JhcHBlcmAsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKHNpemUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHgsIHksIHdpZHRoLCBoZWlnaHQgfSA9IHNpemU7XG4gICAgICAgICAgICAgICAgY29uc3QgbWF4V2lkdGggPSBNYXRoLm1heCh3aWR0aCAtIHgsIHgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1heEhlaWdodCA9IE1hdGgubWF4KGhlaWdodCAtIHksIHkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1heCA9IE1hdGguc3FydChtYXhXaWR0aCAqIG1heFdpZHRoICsgbWF4SGVpZ2h0ICogbWF4SGVpZ2h0KTtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRDaXJjbGVTdHlsZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IG1heCArIG1heCxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBtYXggKyBtYXgsXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IHggLSBtYXgsXG4gICAgICAgICAgICAgICAgICAgIHRvcDogeSAtIG1heCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbmV3UHJvcHMgPSB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQW5pbWF0ZSwgeyBrZXk6IFwicmlwcGxlXCIsIGNvbXBvbmVudDogXCJkaXZcIiwgY29tcG9uZW50UHJvcHM6IGNvbXBvbmVudFByb3BzLCB0cmFuc2l0aW9uTmFtZTogc2l6ZSA/ICd6b29tLXNtYWxsLXNsb3cnIDogJ2ZhZGUnLCBoaWRkZW5Qcm9wOiBcImhpZGRlblwiIH0sIHRoaXMuY3VycmVudENpcmNsZVN0eWxlICYmIChSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgaGlkZGVuOiAhc2l6ZSwgY2xhc3NOYW1lOiBwcmVmaXhDbHMsIGtleTogXCJjaXJjbGVcIiwgc3R5bGU6IHRoaXMuY3VycmVudENpcmNsZVN0eWxlIH0pKSksXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBzdHlsZTogdGhpcy5jdXJyZW50U3R5bGUgfHwgc3R5bGUsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKHNpemUgJiYgc2l6ZS5wb3NpdGlvbiA9PT0gJ3N0YXRpYycpIHtcbiAgICAgICAgICAgICAgICBuZXdQcm9wcy5zdHlsZSA9IHsgLi4uc3R5bGUsIHBvc2l0aW9uOiAncmVsYXRpdmUnIH07XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50U3R5bGUgPSBuZXdQcm9wcy5zdHlsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjbG9uZUVsZW1lbnQoY2hpbGQsIG5ld1Byb3BzKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5yaXBwbGUgPSAoY2hpbGQpID0+IHtcbiAgICAgICAgICAgIGlmIChpc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChNb3VzZURvd24sIHsgcmlwcGxlQ2hpbGQ6IGNoaWxkIH0sIHRoaXMuaGFuZGxlTW91c2VEb3duKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB7IGNoaWxkcmVuIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICByZXR1cm4gdGhpcy5yaXBwbGUoQ2hpbGRyZW4ub25seShjaGlsZHJlbikpO1xuICAgIH1cbn1cblJpcHBsZUNoaWxkLmRpc3BsYXlOYW1lID0gJ1JpcHBsZUNoaWxkJztcbiJdfQ==