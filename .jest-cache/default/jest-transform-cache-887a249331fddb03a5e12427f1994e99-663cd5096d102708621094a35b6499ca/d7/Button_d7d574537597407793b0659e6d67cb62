631942c8e69ec53d8c83906e3bc5c530
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _omit = _interopRequireDefault(require("lodash/omit"));

var _icon = _interopRequireDefault(require("../icon"));

var _ripple = _interopRequireDefault(require("../ripple"));

var _configure = require("../configure");

var _progress = _interopRequireDefault(require("../progress"));

function _createSuper(Derived) {
  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  return function () {
    var Super = (0, _getPrototypeOf2["default"])(Derived),
        result;

    if (isNativeReflectConstruct()) {
      var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return (0, _possibleConstructorReturn2["default"])(this, result);
  };
}

var Button =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(Button, _Component);

  var _super = _createSuper(Button);

  function Button(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, Button);
    _this = _super.call(this, props);

    _this.handleClick = function (e) {
      clearTimeout(_this.timeout);
      _this.timeout = window.setTimeout(function () {
        return _this.setState({
          clicked: false
        });
      }, 500);
      var onClick = _this.props.onClick;

      if (onClick) {
        onClick(e);
      }
    };

    _this.state = {
      loading: props.loading,
      clicked: false
    };
    return _this;
  }

  (0, _createClass2["default"])(Button, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      var _this2 = this;

      var currentLoading = this.props.loading;
      var loading = nextProps.loading;

      if (currentLoading) {
        clearTimeout(this.delayTimeout);
      }

      if (typeof loading !== 'boolean' && loading && loading.delay) {
        this.delayTimeout = window.setTimeout(function () {
          return _this2.setState({
            loading: loading
          });
        }, loading.delay);
      } else {
        this.setState({
          loading: loading
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.timeout) {
        clearTimeout(this.timeout);
      }

      if (this.delayTimeout) {
        clearTimeout(this.delayTimeout);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _classNames;

      var _this$props = this.props,
          customizePrefixCls = _this$props.prefixCls,
          type = _this$props.type,
          shape = _this$props.shape,
          size = _this$props.size,
          className = _this$props.className,
          htmlType = _this$props.htmlType,
          children = _this$props.children,
          icon = _this$props.icon,
          ghost = _this$props.ghost,
          funcType = _this$props.funcType,
          others = (0, _objectWithoutProperties2["default"])(_this$props, ["prefixCls", "type", "shape", "size", "className", "htmlType", "children", "icon", "ghost", "funcType"]);
      var _this$state = this.state,
          loading = _this$state.loading,
          clicked = _this$state.clicked;
      var prefixCls = (0, _configure.getPrefixCls)('btn', customizePrefixCls); // large => lg
      // small => sm

      var sizeCls = '';

      switch (size) {
        case "large"
        /* large */
        :
          sizeCls = 'lg';
          break;

        case "small"
        /* small */
        :
          sizeCls = 'sm';
          break;

        default:
      }

      var ComponentProp = others.href ? 'a' : 'button';
      var classes = (0, _classnames["default"])(prefixCls, className, (_classNames = {}, (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-").concat(type), type), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-").concat(shape), shape), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-").concat(sizeCls), sizeCls), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-icon-only"), !children && icon), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-loading"), loading), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-clicked"), clicked), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-background-ghost"), ghost), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-").concat(funcType), funcType), _classNames));
      var iconNode = icon ? _react["default"].createElement(_icon["default"], {
        type: icon
      }) : null;
      iconNode = loading ? _react["default"].createElement(_progress["default"], {
        key: "loading",
        type: "loading"
        /* loading */
        ,
        size: "small"
        /* small */

      }) : iconNode;
      var kids = children || children === 0 ? _react.Children.map(children, function (child) {
        if (typeof child === 'string') {
          return _react["default"].createElement("span", null, child);
        }

        return child;
      }) : null;
      return _react["default"].createElement(_ripple["default"], {
        disabled: others.disabled
      }, _react["default"].createElement(ComponentProp, (0, _extends2["default"])({}, (0, _omit["default"])(others, ['loading']), {
        // 如果没有href属性，则表示组件使用button标签，type为'submit' | 'reset' | 'button'
        type: others.href ? undefined : htmlType || 'button',
        className: classes,
        onClick: this.handleClick
      }), iconNode, kids));
    }
  }]);
  return Button;
}(_react.Component);

exports["default"] = Button;
Button.displayName = 'Button';
Button.__ANT_BUTTON = true;
Button.defaultProps = {
  loading: false,
  ghost: false,
  funcType: 'flat'
};
Button.propTypes = {
  type: _propTypes["default"].string,
  shape: _propTypes["default"].oneOf(['circle', 'circle-outline']),
  size: _propTypes["default"].oneOf(["large"
  /* large */
  , "default"
  /* default */
  , "small"
  /* small */
  ]),
  htmlType: _propTypes["default"].oneOf(['submit', 'button', 'reset']),
  onClick: _propTypes["default"].func,
  loading: _propTypes["default"].oneOfType([_propTypes["default"].bool, _propTypes["default"].object]),
  className: _propTypes["default"].string,
  icon: _propTypes["default"].string,
  ghost: _propTypes["default"].bool,
  funcType: _propTypes["default"].oneOf(['raised', 'flat'])
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,