567919453abfddb4b6a40cdb0e09abdc
"use strict";

var _jshint = require("jshint");

if (typeof window !== 'undefined') {
  require('codemirror/addon/lint/lint.css');

  require('codemirror/addon/lint/lint');

  var CodeMirror = require('codemirror');

  var parseErrors = function parseErrors(errors, output) {
    for (var i = 0; i < errors.length; i++) {
      var error = errors[i];

      if (error) {
        if (error.line <= 0) {
          if (window.console) {
            window.console.warn("Cannot display JSHint error (invalid line ".concat(error.line, ")"), error);
          }

          continue;
        }

        var start = error.character - 1;
        var end = start + 1;

        if (error.evidence) {
          var index = error.evidence.substring(start).search(/.\b/);

          if (index > -1) {
            end += index;
          }
        } // Convert to format expected by validation service


        var hint = {
          message: error.reason,
          severity: error.code ? error.code.startsWith('W') ? 'warning' : 'error' : 'error',
          from: CodeMirror.Pos(error.line - 1, start),
          to: CodeMirror.Pos(error.line - 1, end)
        };
        output.push(hint);
      }
    }
  };

  var validator = function validator(text, options) {
    if (!options.indent) // JSHint error.character actually is a column index, this fixes underlining on lines using tabs for indentation
      options.indent = 1; // JSHint default value is 4

    (0, _jshint.JSHINT)(text, options, options.globals);

    var _JSHINT$data = _jshint.JSHINT.data(),
        errors = _JSHINT$data.errors;

    var result = [];
    if (errors) parseErrors(errors, result);
    return result;
  };

  CodeMirror.registerHelper('lint', 'javascript', validator);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9odWlodWF3ay9Eb2N1bWVudHMvb3B0L2Nob2Vyb2Rvbi11aS9jb21wb25lbnRzLXByby9jb2RlLWFyZWEvbGludC9qYXZhc2NyaXB0LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBOztBQUVBLElBQUksT0FBTyxNQUFQLEtBQWtCLFdBQXRCLEVBQW1DO0FBQ2pDLEVBQUEsT0FBTyxDQUFDLGdDQUFELENBQVA7O0FBQ0EsRUFBQSxPQUFPLENBQUMsNEJBQUQsQ0FBUDs7QUFDQSxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsWUFBRCxDQUExQjs7QUFFQSxNQUFNLFdBQVcsR0FBRyxTQUFkLFdBQWMsQ0FBUyxNQUFULEVBQWlCLE1BQWpCLEVBQXFDO0FBQ3ZELFNBQUssSUFBSSxDQUFDLEdBQUcsQ0FBYixFQUFnQixDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQTNCLEVBQW1DLENBQUMsRUFBcEMsRUFBd0M7QUFDdEMsVUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLENBQUQsQ0FBcEI7O0FBQ0EsVUFBSSxLQUFKLEVBQVc7QUFDVCxZQUFJLEtBQUssQ0FBQyxJQUFOLElBQWMsQ0FBbEIsRUFBcUI7QUFDbkIsY0FBSSxNQUFNLENBQUMsT0FBWCxFQUFvQjtBQUNsQixZQUFBLE1BQU0sQ0FBQyxPQUFQLENBQWUsSUFBZixxREFBaUUsS0FBSyxDQUFDLElBQXZFLFFBQWdGLEtBQWhGO0FBQ0Q7O0FBQ0Q7QUFDRDs7QUFFRCxZQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsU0FBTixHQUFrQixDQUFoQztBQUNBLFlBQUksR0FBRyxHQUFHLEtBQUssR0FBRyxDQUFsQjs7QUFDQSxZQUFJLEtBQUssQ0FBQyxRQUFWLEVBQW9CO0FBQ2xCLGNBQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxRQUFOLENBQWUsU0FBZixDQUF5QixLQUF6QixFQUFnQyxNQUFoQyxDQUF1QyxLQUF2QyxDQUFkOztBQUNBLGNBQUksS0FBSyxHQUFHLENBQUMsQ0FBYixFQUFnQjtBQUNkLFlBQUEsR0FBRyxJQUFJLEtBQVA7QUFDRDtBQUNGLFNBZlEsQ0FpQlQ7OztBQUNBLFlBQU0sSUFBSSxHQUFlO0FBQ3ZCLFVBQUEsT0FBTyxFQUFFLEtBQUssQ0FBQyxNQURRO0FBRXZCLFVBQUEsUUFBUSxFQUFFLEtBQUssQ0FBQyxJQUFOLEdBQWMsS0FBSyxDQUFDLElBQU4sQ0FBVyxVQUFYLENBQXNCLEdBQXRCLElBQTZCLFNBQTdCLEdBQXlDLE9BQXZELEdBQWtFLE9BRnJEO0FBR3ZCLFVBQUEsSUFBSSxFQUFFLFVBQVUsQ0FBQyxHQUFYLENBQWUsS0FBSyxDQUFDLElBQU4sR0FBYSxDQUE1QixFQUErQixLQUEvQixDQUhpQjtBQUl2QixVQUFBLEVBQUUsRUFBRSxVQUFVLENBQUMsR0FBWCxDQUFlLEtBQUssQ0FBQyxJQUFOLEdBQWEsQ0FBNUIsRUFBK0IsR0FBL0I7QUFKbUIsU0FBekI7QUFPQSxRQUFBLE1BQU0sQ0FBQyxJQUFQLENBQVksSUFBWjtBQUNEO0FBQ0Y7QUFDRixHQS9CRDs7QUFpQ0EsTUFBTSxTQUFTLEdBQUcsU0FBWixTQUFZLENBQVMsSUFBVCxFQUFlLE9BQWYsRUFBc0I7QUFDdEMsUUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFiLEVBQ0U7QUFDQSxNQUFBLE9BQU8sQ0FBQyxNQUFSLEdBQWlCLENBQWpCLENBSG9DLENBR2hCOztBQUN0Qix3QkFBTyxJQUFQLEVBQWEsT0FBYixFQUFzQixPQUFPLENBQUMsT0FBOUI7O0FBSnNDLHVCQUtuQixlQUFPLElBQVAsRUFMbUI7QUFBQSxRQUs5QixNQUw4QixnQkFLOUIsTUFMOEI7O0FBTXRDLFFBQU0sTUFBTSxHQUFpQixFQUE3QjtBQUNBLFFBQUksTUFBSixFQUFZLFdBQVcsQ0FBQyxNQUFELEVBQVMsTUFBVCxDQUFYO0FBQ1osV0FBTyxNQUFQO0FBQ0QsR0FURDs7QUFXQSxFQUFBLFVBQVUsQ0FBQyxjQUFYLENBQTBCLE1BQTFCLEVBQWtDLFlBQWxDLEVBQWdELFNBQWhEO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBnbG9iYWwtcmVxdWlyZSAqL1xuaW1wb3J0IHsgQW5ub3RhdGlvbiB9IGZyb20gJ2NvZGVtaXJyb3InO1xuaW1wb3J0IHsgSlNISU5UIH0gZnJvbSAnanNoaW50JztcblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJlcXVpcmUoJ2NvZGVtaXJyb3IvYWRkb24vbGludC9saW50LmNzcycpO1xuICByZXF1aXJlKCdjb2RlbWlycm9yL2FkZG9uL2xpbnQvbGludCcpO1xuICBjb25zdCBDb2RlTWlycm9yID0gcmVxdWlyZSgnY29kZW1pcnJvcicpO1xuXG4gIGNvbnN0IHBhcnNlRXJyb3JzID0gZnVuY3Rpb24oZXJyb3JzLCBvdXRwdXQ6IEFubm90YXRpb25bXSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZXJyb3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBlcnJvciA9IGVycm9yc1tpXTtcbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICBpZiAoZXJyb3IubGluZSA8PSAwKSB7XG4gICAgICAgICAgaWYgKHdpbmRvdy5jb25zb2xlKSB7XG4gICAgICAgICAgICB3aW5kb3cuY29uc29sZS53YXJuKGBDYW5ub3QgZGlzcGxheSBKU0hpbnQgZXJyb3IgKGludmFsaWQgbGluZSAke2Vycm9yLmxpbmV9KWAsIGVycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzdGFydCA9IGVycm9yLmNoYXJhY3RlciAtIDE7XG4gICAgICAgIGxldCBlbmQgPSBzdGFydCArIDE7XG4gICAgICAgIGlmIChlcnJvci5ldmlkZW5jZSkge1xuICAgICAgICAgIGNvbnN0IGluZGV4ID0gZXJyb3IuZXZpZGVuY2Uuc3Vic3RyaW5nKHN0YXJ0KS5zZWFyY2goLy5cXGIvKTtcbiAgICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgICAgZW5kICs9IGluZGV4O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENvbnZlcnQgdG8gZm9ybWF0IGV4cGVjdGVkIGJ5IHZhbGlkYXRpb24gc2VydmljZVxuICAgICAgICBjb25zdCBoaW50OiBBbm5vdGF0aW9uID0ge1xuICAgICAgICAgIG1lc3NhZ2U6IGVycm9yLnJlYXNvbixcbiAgICAgICAgICBzZXZlcml0eTogZXJyb3IuY29kZSA/IChlcnJvci5jb2RlLnN0YXJ0c1dpdGgoJ1cnKSA/ICd3YXJuaW5nJyA6ICdlcnJvcicpIDogJ2Vycm9yJyxcbiAgICAgICAgICBmcm9tOiBDb2RlTWlycm9yLlBvcyhlcnJvci5saW5lIC0gMSwgc3RhcnQpLFxuICAgICAgICAgIHRvOiBDb2RlTWlycm9yLlBvcyhlcnJvci5saW5lIC0gMSwgZW5kKSxcbiAgICAgICAgfTtcblxuICAgICAgICBvdXRwdXQucHVzaChoaW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgY29uc3QgdmFsaWRhdG9yID0gZnVuY3Rpb24odGV4dCwgb3B0aW9ucykge1xuICAgIGlmICghb3B0aW9ucy5pbmRlbnQpXG4gICAgICAvLyBKU0hpbnQgZXJyb3IuY2hhcmFjdGVyIGFjdHVhbGx5IGlzIGEgY29sdW1uIGluZGV4LCB0aGlzIGZpeGVzIHVuZGVybGluaW5nIG9uIGxpbmVzIHVzaW5nIHRhYnMgZm9yIGluZGVudGF0aW9uXG4gICAgICBvcHRpb25zLmluZGVudCA9IDE7IC8vIEpTSGludCBkZWZhdWx0IHZhbHVlIGlzIDRcbiAgICBKU0hJTlQodGV4dCwgb3B0aW9ucywgb3B0aW9ucy5nbG9iYWxzKTtcbiAgICBjb25zdCB7IGVycm9ycyB9ID0gSlNISU5ULmRhdGEoKTtcbiAgICBjb25zdCByZXN1bHQ6IEFubm90YXRpb25bXSA9IFtdO1xuICAgIGlmIChlcnJvcnMpIHBhcnNlRXJyb3JzKGVycm9ycywgcmVzdWx0KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIENvZGVNaXJyb3IucmVnaXN0ZXJIZWxwZXIoJ2xpbnQnLCAnamF2YXNjcmlwdCcsIHZhbGlkYXRvcik7XG59XG4iXX0=