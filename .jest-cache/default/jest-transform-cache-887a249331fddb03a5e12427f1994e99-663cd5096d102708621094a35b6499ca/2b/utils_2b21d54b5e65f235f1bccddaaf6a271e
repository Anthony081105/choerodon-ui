b00b27a98f52378fc37accba384bdef4
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useNormal = useNormal;
exports.useAll = useAll;
exports.useSelected = useSelected;
exports.useCascade = useCascade;
exports.useDirty = useDirty;
exports.append = append;
exports.getOrderFields = getOrderFields;
exports.processToJSON = processToJSON;
exports.processValue = processValue;
exports.childrenInfoForDelete = childrenInfoForDelete;
exports.sortTree = sortTree;
exports.sliceTree = sliceTree;
exports.checkParentByInsert = checkParentByInsert;
exports.checkFieldType = checkFieldType;
exports.doExport = doExport;
exports.findBindFields = findBindFields;
exports.findBindField = findBindField;
exports.getFieldSorter = getFieldSorter;
exports.generateRecordJSONData = generateRecordJSONData;
exports.prepareSubmitData = prepareSubmitData;
exports.axiosConfigAdapter = axiosConfigAdapter;
exports.findRootParent = findRootParent;
exports.prepareForSubmit = prepareForSubmit;
exports.generateResponseData = generateResponseData;
exports.getRecordValue = getRecordValue;
exports.processIntlField = processIntlField;
exports.findBindFieldBy = findBindFieldBy;
exports.processFieldValue = processFieldValue;
exports.getLimit = getLimit;
exports.adapterDataToJSON = adapterDataToJSON;
exports.generateData = generateData;
exports.generateJSONData = generateJSONData;
exports.isDirtyRecord = isDirtyRecord;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _querystringify = _interopRequireDefault(require("querystringify"));

var _moment = _interopRequireWildcard(require("moment"));

var _mobx = require("mobx");

var _isBoolean = _interopRequireDefault(require("lodash/isBoolean"));

var _isObject = _interopRequireDefault(require("lodash/isObject"));

var _isString = _interopRequireDefault(require("lodash/isString"));

var _isArray = _interopRequireDefault(require("lodash/isArray"));

var _isNumber = _interopRequireDefault(require("lodash/isNumber"));

var _warning = _interopRequireDefault(require("choerodon-ui/lib/_util/warning"));

var _configure = require("choerodon-ui/lib/configure");

var _isNil = _interopRequireDefault(require("lodash/isNil"));

var _isEmpty = _interopRequireDefault(require("../_util/isEmpty"));

var ObjectChainValue = _interopRequireWildcard(require("../_util/ObjectChainValue"));

var _localeContext = _interopRequireWildcard(require("../locale-context"));

var _formatString = _interopRequireDefault(require("../formatter/formatString"));

var _formatNumber = _interopRequireDefault(require("../formatter/formatNumber"));

var _formatCurrency = _interopRequireDefault(require("../formatter/formatCurrency"));

var _utils = require("../number-field/utils");

function useNormal(dataToJSON) {
  return ["normal"
  /* normal */
  , "normal-self"
  /* 'normal-self' */
  ].includes(dataToJSON);
}

function useAll(dataToJSON) {
  return ["all"
  /* all */
  , "all-self"
  /* 'all-self' */
  ].includes(dataToJSON);
}

function useSelected(dataToJSON) {
  return ["selected"
  /* selected */
  , "selected-self"
  /* 'selected-self' */
  ].includes(dataToJSON);
}

function useCascade(dataToJSON) {
  return ["dirty"
  /* dirty */
  , "selected"
  /* selected */
  , "all"
  /* all */
  , "normal"
  /* normal */
  ].includes(dataToJSON);
}

function useDirty(dataToJSON) {
  return ["dirty"
  /* dirty */
  , "dirty-self"
  /* 'dirty-self' */
  ].includes(dataToJSON);
}

function append(url, suffix) {
  if (suffix) {
    return url + _querystringify["default"].stringify(suffix, url.indexOf('?') === -1);
  }

  return url;
}

function getOrderFields(fields) {
  return (0, _toConsumableArray2["default"])(fields.values()).filter(function (_ref) {
    var order = _ref.order;
    return order;
  });
}

function processToJSON(value) {
  if ((0, _moment.isDate)(value)) {
    value = (0, _moment["default"])(value);
  }

  if ((0, _moment.isMoment)(value)) {
    var _getConfig = (0, _configure.getConfig)('formatter'),
        jsonDate = _getConfig.jsonDate;

    value = jsonDate ? value.format(jsonDate) : +value;
  }

  return value;
}

function processOne(value, field) {
  var checkRange = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

  if (!(0, _isEmpty["default"])(value)) {
    var range = field.get('range');

    if (range && checkRange) {
      if ((0, _mobx.isArrayLike)(range)) {
        if ((0, _isObject["default"])(value)) {
          var _range = (0, _slicedToArray2["default"])(range, 2),
              start = _range[0],
              end = _range[1];

          value[start] = processOne(value[start], field, false);
          value[end] = processOne(value[end], field, false);
        }
      } else if ((0, _mobx.isArrayLike)(value)) {
        value[0] = processOne(value[0], field, false);
        value[1] = processOne(value[1], field, false);
      }
    } else if (value instanceof Date) {
      value = (0, _moment["default"])(value);
    } else if (!(0, _isObject["default"])(value)) {
      value = (0, _formatString["default"])(value, {
        trim: field.get('trim'),
        format: field.get('format')
      });

      switch (field.type) {
        case "boolean"
        /* boolean */
        :
          {
            var trueValue = field.get("trueValue"
            /* trueValue */
            );
            var falseValue = field.get("falseValue"
            /* falseValue */
            );

            if (value !== trueValue) {
              value = falseValue;
            }

            break;
          }

        case "number"
        /* number */
        :
        case "currency"
        /* currency */
        :
          if (!isNaN(value)) {
            value = Number(value);
          } else {
            value = undefined;
          }

          break;

        case "string"
        /* string */
        :
        case "intl"
        /* intl */
        :
        case "email"
        /* email */
        :
        case "url"
        /* url */
        :
          value = String(value);
          break;

        case "date"
        /* date */
        :
        case "dateTime"
        /* dateTime */
        :
        case "time"
        /* time */
        :
        case "week"
        /* week */
        :
        case "month"
        /* month */
        :
        case "year"
        /* year */
        :
          {
            var _getConfig2 = (0, _configure.getConfig)('formatter'),
                jsonDate = _getConfig2.jsonDate;

            value = jsonDate ? (0, _moment["default"])(value, jsonDate) : (0, _moment["default"])(value);
            break;
          }

        default:
      }
    }
  }

  return value;
}

function processValue(value, field) {
  if (field) {
    var multiple = field.get('multiple');
    var range = field.get('range');

    if (multiple) {
      if ((0, _isEmpty["default"])(value)) {
        value = [];
      } else if (!(0, _isArray["default"])(value)) {
        if ((0, _isString["default"])(multiple) && (0, _isString["default"])(value)) {
          value = value.split(multiple);
        } else {
          value = [value];
        }
      }
    }

    if ((0, _isArray["default"])(value) && (multiple || !range)) {
      return value.map(function (item) {
        return processOne(item, field);
      });
    }

    return processOne(value, field);
  }

  return value;
}

function childrenInfoForDelete(json, children) {
  return Object.keys(children).reduce(function (data, name) {
    var child = children[name];

    if (child) {
      data[name] = [childrenInfoForDelete({}, child.children)];
    }

    return data;
  }, json);
}

function sortTree(children, orderField) {
  if (orderField && children.length > 0) {
    var name = orderField.name,
        order = orderField.order;
    var m = Number.MIN_SAFE_INTEGER;
    children.sort(function (record1, record2) {
      var a = record1.get(name) || m;
      var b = record2.get(name) || m;

      if ((0, _isString["default"])(a) || (0, _isString["default"])(b)) {
        return order === "asc"
        /* asc */
        ? String(a).localeCompare(String(b)) : String(b).localeCompare(String(a));
      }

      return order === "asc"
      /* asc */
      ? a - b : b - a;
    });
  }

  return children;
} // 递归生成树获取树形结构数据


function availableTree(idField, parentField, parentId, allData) {
  var result = [];
  allData.forEach(function (element) {
    if (element[parentField] === parentId) {
      var childresult = availableTree(idField, parentField, element[idField], allData);
      result = result.concat(element).concat(childresult);
    }
  });
  return result;
} // 获取单个页面能够展示的数据


function sliceTree(idField, parentField, allData, pageSize) {
  var availableTreeData = [];

  if (allData.length) {
    var parentLength = 0;
    allData.forEach(function (item) {
      if (item) {
        if ((0, _isNil["default"])(item[parentField]) && !(0, _isNil["default"])(idField) && parentLength < pageSize) {
          parentLength++;
          var childresult = availableTree(idField, parentField, item[idField], allData);
          availableTreeData = availableTreeData.concat(item).concat(childresult);
        }
      }
    });
  }

  return availableTreeData;
}

function checkParentByInsert(_ref2) {
  var parent = _ref2.parent;

  if (parent && !parent.current) {
    throw new Error((0, _localeContext.$l)('DataSet', 'cannot_add_record_when_head_no_current'));
  }
}

function getValueType(value) {
  return (0, _isBoolean["default"])(value) ? "boolean"
  /* boolean */
  : (0, _isNumber["default"])(value) ? "number"
  /* number */
  : (0, _isString["default"])(value) ? "string"
  /* string */
  : (0, _moment.isMoment)(value) ? "date"
  /* date */
  : (0, _isObject["default"])(value) ? "object"
  /* object */
  : "auto"
  /* auto */
  ;
}

function getBaseType(type) {
  switch (type) {
    case "number"
    /* number */
    :
    case "currency"
    /* currency */
    :
      return "number"
      /* number */
      ;

    case "dateTime"
    /* dateTime */
    :
    case "time"
    /* time */
    :
    case "week"
    /* week */
    :
    case "month"
    /* month */
    :
    case "year"
    /* year */
    :
      return "date"
      /* date */
      ;

    case "intl"
    /* intl */
    :
    case "url"
    /* url */
    :
    case "email"
    /* email */
    :
      return "string"
      /* string */
      ;

    default:
      return type;
  }
}

function checkFieldType(value, field) {
  if (process.env.NODE_ENV !== 'production') {
    if (!(0, _isEmpty["default"])(value)) {
      if ((0, _mobx.isArrayLike)(value)) {
        return value.every(function (item) {
          return checkFieldType(item, field);
        });
      }

      var fieldType = getBaseType(field.type);
      var valueType = field.type === "boolean"
      /* boolean */
      && [field.get("trueValue"
      /* trueValue */
      ), field.get("falseValue"
      /* falseValue */
      )].includes(value) ? "boolean"
      /* boolean */
      : getValueType(value);

      if (fieldType !== "auto"
      /* auto */
      && fieldType !== "reactNode"
      /* reactNode */
      && fieldType !== valueType) {
        (0, _warning["default"])(false, "Value type error: The value<".concat(value, ">'s type is ").concat(valueType, ", but the field<").concat(field.name, ">'s type is ").concat(fieldType, "."));
        return false;
      }
    }
  }

  return true;
}

var iframe;

function doExport(url, data) {
  var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'post';

  if (!iframe) {
    iframe = document.createElement('iframe');
    iframe.id = '_export_window';
    iframe.name = '_export_window';
    iframe.style.cssText = 'position:absolute;left:-10000px;top:-10000px;width:1px;height:1px;display:none';
    document.body.appendChild(iframe);
  }

  var form = document.createElement('form');
  form.target = '_export_window';
  form.method = method;
  form.action = url;
  var s = document.createElement('input');
  s.id = '_request_data';
  s.type = 'hidden';
  s.name = '_request_data';
  s.value = JSON.stringify(data);
  form.appendChild(s);
  document.body.appendChild(form);
  form.submit();
  document.body.removeChild(form);
}

function findBindFields(myField, fields, excludeSelf) {
  var name = myField.name;
  return (0, _toConsumableArray2["default"])(fields.values()).filter(function (field) {
    if (field !== myField) {
      var bind = field.get('bind');
      return (0, _isString["default"])(bind) && bind.startsWith("".concat(name, "."));
    }

    return !excludeSelf;
  });
}

function findBindField(myField, fields, callback) {
  var name = (0, _isString["default"])(myField) ? myField : myField.name;
  return (0, _toConsumableArray2["default"])(fields.values()).find(function (field) {
    if (field.name !== name) {
      var bind = field.get('bind');
      return (0, _isString["default"])(bind) && bind.startsWith("".concat(name, ".")) && (!callback || callback(field));
    }

    return false;
  });
}

function numberSorter(a, b) {
  return a - b;
}

function stringSorter(a, b) {
  return String(a || '').localeCompare(String(b || ''));
}

function getFieldSorter(field) {
  var name = field.name;

  switch (field.type) {
    case "number"
    /* number */
    :
    case "currency"
    /* currency */
    :
    case "date"
    /* date */
    :
    case "dateTime"
    /* dateTime */
    :
    case "week"
    /* week */
    :
    case "month"
    /* month */
    :
    case "year"
    /* year */
    :
    case "time"
    /* time */
    :
      return field.order === "asc"
      /* asc */
      ? function (a, b) {
        return numberSorter(a.get(name), b.get(name));
      } : function (a, b) {
        return numberSorter(b.get(name), a.get(name));
      };

    default:
      return field.order === "asc"
      /* asc */
      ? function (a, b) {
        return stringSorter(a.get(name), b.get(name));
      } : function (a, b) {
        return stringSorter(b.get(name), a.get(name));
      };
  }
}

function generateRecordJSONData(array, record, dataToJSON) {
  var normal = useNormal(dataToJSON);
  var json = normal ? record.status !== "delete"
  /* delete */
  && record.toData() : record.toJSONData();

  if (json && (normal || useAll(dataToJSON) || !useDirty(dataToJSON) || json.__dirty)) {
    delete json.__dirty;
    array.push(json);
  }
}

function prepareSubmitData(records, dataToJSON) {
  var created = [];
  var updated = [];
  var destroyed = [];

  function storeWith(status) {
    switch (status) {
      case "add"
      /* add */
      :
        return created;

      case "delete"
      /* delete */
      :
        return destroyed;

      default:
        return updated;
    }
  }

  records.forEach(function (record) {
    return generateRecordJSONData(storeWith(record.status), record, dataToJSON);
  });
  return [created, updated, destroyed];
}

function defaultAxiosConfigAdapter(config) {
  return config;
}

function generateConfig(config, dataSet, data, params, options) {
  if ((0, _isString["default"])(config)) {
    return {
      url: config
    };
  }

  if (typeof config === 'function') {
    return config((0, _objectSpread2["default"])({}, options, {
      data: data,
      dataSet: dataSet,
      params: params
    }));
  }

  return config;
}

function axiosConfigAdapter(type, dataSet, data, params, options) {
  var newConfig = {
    data: data,
    params: params,
    method: 'post'
  };

  var _ref3 = (0, _configure.getConfig)('transport') || {},
      globalConfig = _ref3[type],
      _ref3$adapter = _ref3.adapter,
      globalAdapter = _ref3$adapter === void 0 ? defaultAxiosConfigAdapter : _ref3$adapter;

  var _dataSet$transport = dataSet.transport,
      config = _dataSet$transport[type],
      adapter = _dataSet$transport.adapter;

  if (globalConfig) {
    (0, _extends2["default"])(newConfig, generateConfig(globalConfig, dataSet, data, params, options));
  }

  if (config) {
    (0, _extends2["default"])(newConfig, generateConfig(config, dataSet, data, params, options));
  }

  if (newConfig.data && newConfig.method && newConfig.method.toLowerCase() === 'get') {
    newConfig.params = (0, _objectSpread2["default"])({}, newConfig.params, {}, newConfig.data);
  }

  return (adapter || globalAdapter)(newConfig, type) || newConfig;
} // 查询顶层父亲节点


function findRootParent(children) {
  if (children.parent) {
    return findRootParent(children.parent);
  }

  return children;
}

function prepareForSubmit(type, data, configs, dataSet) {
  if (data.length) {
    var newConfig = axiosConfigAdapter(type, dataSet, data);

    if (newConfig.url) {
      configs.push(newConfig);
    } else {
      return data;
    }
  }

  return [];
}

function generateResponseData(item, dataKey) {
  if (item) {
    if ((0, _isArray["default"])(item)) {
      return item;
    }

    if ((0, _isObject["default"])(item)) {
      if (dataKey) {
        var result = ObjectChainValue.get(item, dataKey);

        if (result === undefined) {
          return [item];
        }

        if ((0, _isArray["default"])(result)) {
          return result;
        }

        if ((0, _isObject["default"])(result)) {
          return [result];
        }
      } else {
        return [item];
      }
    }
  }

  return [];
}

function getRecordValue(data, cb, fieldName) {
  if (fieldName) {
    var field = this.getField(fieldName);

    if (field) {
      var bind = field.get('bind');

      if (bind) {
        fieldName = bind;
      }
    }

    var dataSet = this.dataSet;

    if (dataSet) {
      var checkField = dataSet.props.checkField;

      if (checkField && checkField === fieldName) {
        var trueValue = field ? field.get("trueValue"
        /* trueValue */
        ) : true;
        var falseValue = field ? field.get("falseValue"
        /* falseValue */
        ) : false;
        var children = this.children;

        if (children) {
          return children.every(function (child) {
            return cb(child, checkField) === trueValue;
          }) ? trueValue : falseValue;
        }
      }
    }

    return ObjectChainValue.get(data, fieldName);
  }
}

function tlsBind(props, name, lang, tlsKey) {
  var tls = props.record.get(tlsKey) || {};

  if (name in tls) {
    return "".concat(tlsKey, ".").concat(name, ".").concat(lang);
  }
}

function processIntlField(name, fieldProps, callback, dataSet) {
  var tlsKey = (0, _configure.getConfig)('tlsKey');
  var supports = _localeContext["default"].supports;
  var languages = Object.keys(supports);
  var type = fieldProps.type,
      dynamicProps = fieldProps.dynamicProps;

  if (type === "intl"
  /* intl */
  ) {
      languages.forEach(function (language) {
        return callback("".concat(tlsKey, ".").concat(name, ".").concat(language), {
          type: "string"
          /* string */
          ,
          label: "".concat(supports[language])
        });
      });

      var _ref4 = dataSet || {},
          _ref4$lang = _ref4.lang,
          lang = _ref4$lang === void 0 ? _localeContext["default"].locale.lang : _ref4$lang;

      var newDynamicProps = typeof dynamicProps === 'function' ? function (props) {
        return (0, _objectSpread2["default"])({}, dynamicProps(props), {
          bind: tlsBind(props, name, lang, tlsKey)
        });
      } : (0, _objectSpread2["default"])({}, dynamicProps, {
        bind: function bind(props) {
          return tlsBind(props, name, lang, tlsKey);
        }
      });
      return callback(name, (0, _objectSpread2["default"])({}, fieldProps, {
        dynamicProps: newDynamicProps
      }));
    }

  return callback(name, fieldProps);
}

function findBindFieldBy(myField, fields, prop) {
  var value = myField.get(prop);
  var myName = myField.name;
  return (0, _toConsumableArray2["default"])(fields.values()).find(function (field) {
    var bind = field.get('bind');
    return bind && bind === "".concat(myName, ".").concat(value);
  });
}

function processFieldValue(value, field, lang, showValueIfNotFound) {
  var type = field.type;

  if (type === "number"
  /* number */
  ) {
      var precision = (0, _utils.getPrecision)(value || 0);
      var options = {
        minimumFractionDigits: precision,
        maximumFractionDigits: precision
      };
      return (0, _formatNumber["default"])(value, lang, options);
    }

  if (type === "currency"
  /* currency */
  ) {
      return (0, _formatCurrency["default"])(value, lang, {
        currency: field.get('currency')
      });
    }

  return field.getText(value, showValueIfNotFound);
}

function getLimit(limit, record) {
  if ((0, _isString["default"])(limit) && record.getField(limit)) {
    return record.get(limit);
  }

  return limit;
}

function adapterDataToJSON(isSelected, noCascade) {
  if (isSelected) {
    if (noCascade) {
      return "selected-self"
      /* 'selected-self' */
      ;
    }

    return "selected"
    /* selected */
    ;
  }

  if (noCascade) {
    return "dirty-self"
    /* 'dirty-self' */
    ;
  }

  return undefined;
}

function generateData(ds) {
  var dirty = ds.destroyed.length > 0;
  var data = ds.data.map(function (record) {
    var d = record.toData();

    if (d.__dirty) {
      dirty = true;
    }

    delete d.__dirty;
    return d;
  });
  return {
    dirty: dirty,
    data: data
  };
}

function generateJSONData(ds, isSelect) {
  var dataToJSON = ds.dataToJSON;
  var data = [];
  (isSelect || useSelected(dataToJSON) ? ds.selected : ds.records).forEach(function (record) {
    return generateRecordJSONData(data, record, dataToJSON);
  });
  return {
    dirty: data.length > 0,
    data: data
  };
}

function isDirtyRecord(record) {
  return record.status !== "sync"
  /* sync */
  || record.dirty;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,