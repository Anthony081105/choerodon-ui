{"version":3,"sources":["createDOMForm.jsx"],"names":["computedStyle","el","prop","getComputedStyle","window","style","currentStyle","replace","word","letter","toUpperCase","undefined","getScrollableContainer","n","node","nodeName","toLowerCase","overflowY","scrollHeight","clientHeight","parentNode","ownerDocument","mixin","getForm","formMixin","call","validateFieldsAndScroll","ns","opt","cb","names","callback","options","newCb","error","values","modify","validNames","fieldsStore","getValidFieldsName","firstNode","firstTop","name","instance","getFieldInstance","ReactDOM","findDOMNode","top","getBoundingClientRect","c","container","onlyScrollIfNeeded","scroll","validateFields","createDOMForm","option"],"mappings":"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","sourcesContent":["import ReactDOM from 'react-dom';\nimport scrollIntoView from 'dom-scroll-into-view';\nimport has from 'lodash/has';\nimport createBaseForm from './createBaseForm';\nimport { mixin as formMixin } from './createForm';\nimport { getParams } from './utils';\n\nfunction computedStyle(el, prop) {\n  const getComputedStyle = window.getComputedStyle;\n  const style =\n    // If we have getComputedStyle\n    getComputedStyle ?\n      // Query it\n      // TODO: From CSS-Query notes, we might need (node, null) for FF\n      getComputedStyle(el) :\n\n      // Otherwise, we are in IE and use currentStyle\n      el.currentStyle;\n  if (style) {\n    return style\n      [\n      // Switch to camelCase for CSSOM\n      // DEV: Grabbed from jQuery\n      // https://github.com/jquery/jquery/blob/1.9-stable/src/css.js#L191-L194\n      // https://github.com/jquery/jquery/blob/1.9-stable/src/core.js#L593-L597\n      prop.replace(/-(\\w)/gi, (word, letter) => {\n        return letter.toUpperCase();\n      })\n      ];\n  }\n  return undefined;\n}\n\nfunction getScrollableContainer(n) {\n  let node = n;\n  let nodeName;\n  /* eslint no-cond-assign:0 */\n  while ((nodeName = node.nodeName.toLowerCase()) !== 'body') {\n    const overflowY = computedStyle(node, 'overflowY');\n    // https://stackoverflow.com/a/36900407/3040605\n    if (\n      node !== n &&\n        (overflowY === 'auto' || overflowY === 'scroll') &&\n        node.scrollHeight > node.clientHeight\n    ) {\n      return node;\n    }\n    node = node.parentNode;\n  }\n  return nodeName === 'body' ? node.ownerDocument : node;\n}\n\nconst mixin = {\n  getForm() {\n    return {\n      ...formMixin.getForm.call(this),\n      validateFieldsAndScroll: this.validateFieldsAndScroll,\n    };\n  },\n\n  validateFieldsAndScroll(ns, opt, cb) {\n    const { names, callback, options } = getParams(ns, opt, cb);\n\n    const newCb = (error, values, modify) => {\n      if (error) {\n        const validNames = this.fieldsStore.getValidFieldsName();\n        let firstNode;\n        let firstTop;\n        for (const name of validNames) {\n          if (has(error, name)) {\n            const instance = this.getFieldInstance(name);\n            if (instance) {\n              const node = ReactDOM.findDOMNode(instance);\n              const top = node.getBoundingClientRect().top;\n              if (firstTop === undefined || firstTop > top) {\n                firstTop = top;\n                firstNode = node;\n              }\n            }\n          }\n        }\n        if (firstNode) {\n          const c = options.container || getScrollableContainer(firstNode);\n          scrollIntoView(firstNode, c, {\n            onlyScrollIfNeeded: true,\n            ...options.scroll,\n          });\n        }\n      }\n\n      if (typeof callback === 'function') {\n        callback(error, values, modify);\n      }\n    };\n\n    return this.validateFields(names, options, newCb);\n  },\n};\n\nfunction createDOMForm(option) {\n  return createBaseForm({\n    ...option,\n  }, [mixin]);\n}\n\nexport default createDOMForm;\n"]}