{"version":3,"sources":["index.test.js"],"names":["EmailFiled","describe","beforeEach","jest","useFakeTimers","afterEach","useRealTimers","handleDataSetChange","fn","ds","DataSet","autoCreate","fields","name","type","defaultValue","required","events","update","it","dstest","wrapper","runAllTimers","expect","find","length","toBe","at","simulate","target","value","prop"],"mappings":";;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA,2BAAUA,YAAV;AAEAC,QAAQ,CAAC,QAAD,EAAW,YAAM;AACvBC,EAAAA,UAAU,CAAC,YAAM;AACfC,IAAAA,IAAI,CAACC,aAAL;AACD,GAFS,CAAV;AAIAC,EAAAA,SAAS,CAAC,YAAM;AACdF,IAAAA,IAAI,CAACG,aAAL;AACD,GAFQ,CAAT;AAGA,MAAMC,mBAAmB,GAAGJ,IAAI,CAACK,EAAL,EAA5B;AAEA,MAAMC,EAAE,GAAG,IAAIC,mBAAJ,CAAY;AACrBC,IAAAA,UAAU,EAAE,IADS;AAErBC,IAAAA,MAAM,EAAE,CAAC;AAAEC,MAAAA,IAAI,EAAE,OAAR;AAAiBC,MAAAA,IAAI,EAAE,OAAvB;AAAgCC,MAAAA,YAAY,EAAE,aAA9C;AAA6DC,MAAAA,QAAQ,EAAE;AAAvE,KAAD,CAFa;AAGrBC,IAAAA,MAAM,EAAE;AACNC,MAAAA,MAAM,EAAEX;AADF;AAHa,GAAZ,CAAX;AAOAY,EAAAA,EAAE,CAAC,0BAAD,EAA6B,YAAM;AACnC,QAAMC,MAAM,GAAG,IAAIV,mBAAJ,CAAY;AACzBC,MAAAA,UAAU,EAAE,IADa;AAEzBC,MAAAA,MAAM,EAAE,CAAC;AAAEC,QAAAA,IAAI,EAAE,OAAR;AAAiBC,QAAAA,IAAI,EAAE,OAAvB;AAAgCC,QAAAA,YAAY,EAAE,aAA9C;AAA6DC,QAAAA,QAAQ,EAAE;AAAvE,OAAD,CAFiB;AAGzBC,MAAAA,MAAM,EAAE;AACNC,QAAAA,MAAM,EAAEX;AADF;AAHiB,KAAZ,CAAf;AAOA,QAAMc,OAAO,GAAG,mBAAM,gCAAC,YAAD;AAAY,MAAA,OAAO,EAAED;AAArB,MAAN,CAAhB;AACAjB,IAAAA,IAAI,CAACmB,YAAL;AACAC,IAAAA,MAAM,CAACF,OAAO,CAACG,IAAR,CAAa,OAAb,EAAsBC,MAAvB,CAAN,CAAqCC,IAArC,CAA0C,CAA1C;AACD,GAXC,CAAF;AAYAP,EAAAA,EAAE,CAAC,yBAAD,EAA4B,YAAM;AAClC,QAAME,OAAO,GAAG,mBAAM,gCAAC,YAAD;AAAY,MAAA,OAAO,EAAEZ;AAArB,MAAN,CAAhB;AACAY,IAAAA,OAAO,CACJG,IADH,CACQ,OADR,EAEGG,EAFH,CAEM,CAFN,EAGGC,QAHH,CAGY,QAHZ,EAGsB;AAClBC,MAAAA,MAAM,EAAE;AACNC,QAAAA,KAAK,EAAE;AADD;AADU,KAHtB;AAQAP,IAAAA,MAAM,CACJF,OAAO,CACJG,IADH,CACQ,OADR,EAEGG,EAFH,CAEM,CAFN,EAGGI,IAHH,CAGQ,OAHR,CADI,CAAN,CAKEL,IALF,CAKO,cALP;AAMD,GAhBC,CAAF;AAiBD,CA9CO,CAAR","sourcesContent":["import React from 'react';\nimport { mount } from 'enzyme';\nimport EmailFiled from '..';\nimport DataSet from '../../data-set';\nimport focusTest from '../../../tests/shared/focusTest';\n\nfocusTest(EmailFiled);\n\ndescribe('Select', () => {\n  beforeEach(() => {\n    jest.useFakeTimers();\n  });\n\n  afterEach(() => {\n    jest.useRealTimers();\n  });\n  const handleDataSetChange = jest.fn();\n\n  const ds = new DataSet({\n    autoCreate: true,\n    fields: [{ name: 'email', type: 'email', defaultValue: '123@abc.com', required: true }],\n    events: {\n      update: handleDataSetChange,\n    },\n  });\n  it('dataset set Select value', () => {\n    const dstest = new DataSet({\n      autoCreate: true,\n      fields: [{ name: 'email', type: 'email', defaultValue: '123@abc.com', required: true }],\n      events: {\n        update: handleDataSetChange,\n      },\n    });\n    const wrapper = mount(<EmailFiled dataSet={dstest} />);\n    jest.runAllTimers();\n    expect(wrapper.find('input').length).toBe(1);\n  });\n  it('change the Select value', () => {\n    const wrapper = mount(<EmailFiled dataSet={ds} />);\n    wrapper\n      .find('input')\n      .at(0)\n      .simulate('change', {\n        target: {\n          value: '1234@abc.com',\n        },\n      });\n    expect(\n      wrapper\n        .find('input')\n        .at(0)\n        .prop('value'),\n    ).toBe('1234@abc.com');\n  });\n});\n"]}