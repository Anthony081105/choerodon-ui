{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/tree/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import Set from 'core-js/library/fn/set';\nimport React, { Component,MouseEvent} from 'react';\nimport PropTypes from 'prop-types';\nimport { observer } from 'mobx-react';\nimport { computed, action, observable, runInAction } from 'mobx';\nimport noop from 'lodash/noop';\nimport C7NTree, {\n  TreeNode,\n  DataNode,\n  C7nTreeNodeProps,\n  EventDataNode,\n  TreeProps as C7NTreeProps,\n} from 'choerodon-ui/lib/tree';\nimport autobind from 'choerodon-ui/pro/lib/_util/autobind';\nimport DataSet from '../data-set/DataSet';\nimport { getKey, getTreeNodes, NodeRenderer, TreeNodeRenderer} from './util';\nimport { BooleanValue, DataSetSelection } from '../data-set/enum';\nimport Spin from '../spin';\n\ninterface C7nNodeEvent extends EventDataNode {\n  eventKey:string\n}\ninterface TreeNodeCheckedEvent {\n  event: 'check';\n  node: C7nNodeEvent;\n  checked: boolean;\n  nativeEvent: MouseEvent;\n  checkedNodes: DataNode[];\n  checkedNodesPositions?: { node: DataNode; pos: string }[];\n  halfCheckedKeys?: string[];\n}\n\ninterface C7nTreeNodeSelectedEvent {\n  event: \"select\";\n  selected: boolean;\n  node: C7nNodeEvent;\n  selectedNodes: DataNode[];\n  nativeEvent:MouseEvent;\n}\ninterface C7nTreeNodeExpandedEvent {\n  expanded:boolean;\n  nativeEvent:MouseEvent;\n  node:C7nNodeEvent;\n}\nexport interface TreeProps extends C7NTreeProps {\n  dataSet?: DataSet;\n  renderer?: NodeRenderer;\n  titleField?: string;\n  treeNodeRenderer?:TreeNodeRenderer;\n}\n\nfunction defaultRenderer({ text }) {\n  return text;\n}\n\nfunction defaultNodeCover(){\n  return {};\n}\n\nconst keyPropType = PropTypes.oneOfType([PropTypes.string, PropTypes.number]);\n@observer\nexport default class Tree extends Component<TreeProps> {\n  static displayName = 'Tree<PRO>';\n\n  static propTypes = {\n    prefixCls: PropTypes.string,\n    className: PropTypes.string,\n    style: PropTypes.object,\n    tabIndex: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    children: PropTypes.any,\n    treeData: PropTypes.array, // Generate treeNode by children\n    showLine: PropTypes.bool,\n    showIcon: PropTypes.bool,\n    icon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n    selectable: PropTypes.bool,\n    disabled: PropTypes.bool,\n    multiple: PropTypes.bool,\n    checkable: PropTypes.oneOfType([PropTypes.bool, PropTypes.node]),\n    checkStrictly: PropTypes.bool,\n    draggable: PropTypes.bool,\n    defaultExpandParent: PropTypes.bool,\n    autoExpandParent: PropTypes.bool,\n    defaultExpandAll: PropTypes.bool,\n    defaultExpandedKeys: PropTypes.arrayOf(keyPropType),\n    expandedKeys: PropTypes.arrayOf(keyPropType),\n    defaultCheckedKeys: PropTypes.arrayOf(keyPropType),\n    checkedKeys: PropTypes.oneOfType([\n      PropTypes.arrayOf(keyPropType),\n      PropTypes.object,\n    ]),\n    defaultSelectedKeys: PropTypes.arrayOf(keyPropType),\n    selectedKeys: PropTypes.arrayOf(keyPropType),\n    onClick: PropTypes.func,\n    onDoubleClick: PropTypes.func,\n    onExpand: PropTypes.func,\n    onCheck: PropTypes.func,\n    onSelect: PropTypes.func,\n    onLoad: PropTypes.func,\n    loadData: PropTypes.func,\n    loadedKeys: PropTypes.arrayOf(keyPropType),\n    onMouseEnter: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onRightClick: PropTypes.func,\n    onDragStart: PropTypes.func,\n    onDragEnter: PropTypes.func,\n    onDragOver: PropTypes.func,\n    onDragLeave: PropTypes.func,\n    onDragEnd: PropTypes.func,\n    onDrop: PropTypes.func,\n    filterTreeNode: PropTypes.func,\n    motion: PropTypes.object,\n    switcherIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  };\n\n  static TreeNode = TreeNode;\n\n  @observable stateCheckedKeys: string[];\n\n  @observable stateExpandedKeys: string[];\n\n  stateForceRenderKeys: string[] = [];\n\n\n  componentWillMount() {\n    this.handleDataSetLoad();\n    this.processDataSetListener(true);\n  }\n\n\n  componentWillReceiveProps(nextProps) {\n    const {defaultExpandAll,defaultSelectedKeys,defaultExpandedKeys,defaultCheckedKeys} = this.props;\n    if(defaultExpandAll !== nextProps.defaultExpandAll ||\n      defaultExpandedKeys !== nextProps.defaultExpandedKeys ||\n      defaultCheckedKeys !== nextProps.defaultCheckKeys ||\n      defaultSelectedKeys !== nextProps.defaultSelectedKeys\n      ){\n      this.processDataSetListener(false);\n      this.processDataSetListener(true);\n    }\n  }\n\n  componentWillUnmount() {\n    this.processDataSetListener(false);\n  }\n\n  processDataSetListener(flag: boolean) {\n    const { dataSet } = this.props;\n    if (dataSet) {\n      const handler = flag ? dataSet.addEventListener : dataSet.removeEventListener;\n      handler.call(dataSet, 'load', this.handleDataSetLoad);\n    }\n  }\n\n  @autobind\n  handleDataSetLoad() {\n    this.initDefaultExpandedRows();\n    this.initDefaultCheckRows();\n    this.initDefaultSelectRows();\n  }\n\n  @action\n  initDefaultExpandedRows() {\n    const {\n      props: {\n        defaultExpandAll,\n        dataSet,\n        defaultExpandedKeys,\n      },\n    } = this;\n    this.stateExpandedKeys = this.dealDefalutCheckExpand(dataSet,defaultExpandedKeys,defaultExpandAll)\n  }\n\n  @action\n  initDefaultCheckRows(){\n    const {\n      props: {\n        dataSet,\n        defaultCheckedKeys,\n      },\n    } = this;\n    this.stateCheckedKeys = this.dealDefalutCheckExpand(dataSet,defaultCheckedKeys)\n  }\n\n  @action\n  initDefaultSelectRows(){\n    const {\n      props: {\n        dataSet,\n        defaultSelectedKeys,\n      },\n    } = this;\n    if(dataSet && (defaultSelectedKeys)){\n      const { idField } = dataSet.props;\n      defaultSelectedKeys.map(selectKey => {\n        const found = dataSet.find(\n          record => selectKey === String(idField ? record.get(idField) : record.id),\n        );\n        if(found){\n          dataSet.select(found)\n        }\n        return null\n      })\n    }\n\n  }\n\n  /**\n   * 处理tree的props expand check的默认事件\n   * @param dataSet\n   * @param defalutAll\n   * @param defalutKeys\n   */\n  dealDefalutCheckExpand(dataSet:DataSet|undefined,defalutKeys:string[]|undefined,defalutAll?:boolean){\n    let defalutStateKeys: string[] = []\n    if(dataSet){\n      const {idField, expandField} = dataSet.props;\n      if ( defalutAll && !expandField) {\n        defalutStateKeys = dataSet.reduce<(string)[]>((array, record) => {\n          if (record.children) {\n            array.push(getKey(record, idField));\n          }\n          return array;\n        }, []);\n      }else if(defalutKeys && !expandField){\n        defalutStateKeys = dataSet.reduce<(string)[]>((array, record) => {\n          defalutKeys.map((key) => {\n            if(getKey(record,idField) === key){\n              array.push(key)\n            }\n            return null\n          })\n          return array;\n        },[]);\n      }\n    }\n    return defalutStateKeys\n  }\n\n  @computed\n  get forceRenderKeys() {\n    return (this.stateForceRenderKeys = [\n      ...new Set<string>([...this.stateForceRenderKeys, ...this.expandedKeys]),\n    ]);\n  }\n\n  @computed\n  get expandedKeys(): string[] {\n    const { dataSet } = this.props;\n    if (dataSet) {\n      const { expandField, idField } = dataSet.props;\n      if (expandField) {\n        const keys: string[] = [];\n        dataSet.forEach(record => {\n          if (record.isExpanded) {\n            keys.push(getKey(record, idField));\n          }\n        });\n        return keys;\n      }\n    }\n    return this.stateExpandedKeys;\n  }\n\n  @computed\n  get checkedKeys(): string[] {\n    const { dataSet } = this.props;\n    if (dataSet) {\n      const { checkField, idField } = dataSet.props;\n      if (checkField) {\n        const keys: string[] = [];\n        dataSet.forEach(record => {\n          const field = record.getField(checkField);\n          if (record.get(checkField) === (field ? field.get(BooleanValue.trueValue) : true)) {\n            keys.push(getKey(record, idField));\n          }\n        });\n        return keys;\n      }\n    }\n    return this.stateCheckedKeys;\n  }\n\n  @computed\n  get selectedKeys(): string[] {\n    const { dataSet } = this.props;\n    if (dataSet) {\n      const { idField } = dataSet.props;\n      return dataSet.selected.map(record => getKey(record, idField));\n    }\n    return [];\n  }\n\n  constructor(props, context) {\n    super(props, context);\n    runInAction(() => {\n      this.stateCheckedKeys = [];\n      this.stateExpandedKeys = [];\n    });\n  }\n\n  setExpand(eventObj: C7nTreeNodeExpandedEvent) {\n    const { dataSet } = this.props;\n    if (dataSet) {\n      const { expandField, idField } = dataSet.props;\n      if (expandField) {\n        const { node, expanded } = eventObj;\n        const { eventKey } = node;\n        const found = dataSet.find(record => eventKey === getKey(record, idField));\n        if (found) {\n          found.isExpanded = !!expanded;\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n\n  setCheck(eventObj: C7nTreeNodeProps) {\n    const { dataSet } = this.props;\n    if (dataSet) {\n      const { checkField, idField } = dataSet.props;\n      if (checkField) {\n        const { node, checked } = eventObj;\n        const { eventKey } = node;\n        const found = dataSet.find(\n          record => eventKey === String(idField ? record.get(idField) : record.id),\n        );\n        if (found) {\n          const field = found.getField(checkField);\n          found.set(\n            checkField,\n            field\n              ? checked\n                ? field.get(BooleanValue.trueValue)\n                : field.get(BooleanValue.falseValue)\n              : checked,\n          );\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  handleExpand = (expandedKeys: string[], eventObj: C7nTreeNodeExpandedEvent) => {\n    if (this.setExpand(eventObj)) {\n      runInAction(() => {\n        this.stateExpandedKeys = expandedKeys;\n      });\n    }\n    const { onExpand = noop } = this.props;\n    // @ts-ignore\n    onExpand(expandedKeys, eventObj);\n  };\n\n  handleCheck = (checkedKeys: string[], eventObj: TreeNodeCheckedEvent) => {\n    if (this.setCheck(eventObj)) {\n      runInAction(() => {\n        this.stateCheckedKeys = checkedKeys;\n      });\n    }\n    const { onCheck = noop } = this.props;\n    // @ts-ignore\n    onCheck(checkedKeys, eventObj);\n  };\n\n  handleSelect = (_selectedKeys: string[], eventObj: C7nTreeNodeSelectedEvent) => {\n    const { dataSet } = this.props;\n    if (dataSet) {\n      const { idField } = dataSet.props;\n      const { node, selected } = eventObj;\n      const { eventKey } = node;\n      const found = dataSet.find(\n        record => eventKey === String(idField ? record.get(idField) : record.id),\n      );\n      if (found) {\n        if (selected) {\n          dataSet.select(found);\n        } else {\n          dataSet.unSelect(found);\n        }\n      }\n    }\n  };\n\n  render() {\n    const { dataSet, renderer = defaultRenderer, titleField, treeNodeRenderer = defaultNodeCover,loadData ,...otherProps } = this.props;\n    if (dataSet) {\n      const props: TreeProps = {};\n      props.treeData = getTreeNodes(\n        dataSet,\n        dataSet.treeData,\n        this.forceRenderKeys,\n        renderer,\n        // @ts-ignore\n        treeNodeRenderer,\n        loadData,\n        titleField,\n      );\n      // @ts-ignore\n      props.onExpand = this.handleExpand;\n      // @ts-ignore\n      props.onCheck = this.handleCheck;\n      // @ts-ignore\n      props.onSelect = this.handleSelect;\n      props.loadData = loadData;\n      props.expandedKeys = this.expandedKeys.slice();\n      props.checkedKeys = this.checkedKeys.slice();\n      props.multiple = dataSet.props.selection === DataSetSelection.multiple;\n      props.selectedKeys = this.selectedKeys.slice();\n      return (\n        <Spin dataSet={dataSet}>\n          <C7NTree {...otherProps} {...props} />\n        </Spin>\n      );\n    }\n    return <C7NTree {...otherProps} />;\n  }\n}\n"]}