{"version":3,"sources":["grid/row.js"],"names":["defaultGutter","Row","Component","gutter","type","justify","align","className","style","children","customizePrefixCls","others","prefixCls","classes","rowStyle","marginLeft","marginRight","cols","col","paddingLeft","paddingRight","otherProps","Responsive","items","PropTypes","string"],"mappings":"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","sourcesContent":["import React, { Children, cloneElement, Component } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport omit from 'lodash/omit';\nimport Responsive from '../responsive/Responsive';\nimport { getPrefixCls } from '../configure';\nconst defaultGutter = 0;\nexport default class Row extends Component {\n    constructor() {\n        super(...arguments);\n        this.renderRow = ([gutter = defaultGutter]) => {\n            const { type, justify, align, className, style, children, prefixCls: customizePrefixCls, ...others } = this.props;\n            const prefixCls = getPrefixCls('row', customizePrefixCls);\n            const classes = classNames({\n                [prefixCls]: !type,\n                [`${prefixCls}-${type}`]: type,\n                [`${prefixCls}-${type}-${justify}`]: type && justify,\n                [`${prefixCls}-${type}-${align}`]: type && align,\n            }, className);\n            const rowStyle = gutter > 0\n                ? {\n                    marginLeft: gutter / -2,\n                    marginRight: gutter / -2,\n                    ...style,\n                }\n                : style;\n            const cols = Children.map(children, (col) => {\n                if (!col) {\n                    return null;\n                }\n                if (col.props && gutter > 0) {\n                    return cloneElement(col, {\n                        style: {\n                            paddingLeft: gutter / 2,\n                            paddingRight: gutter / 2,\n                            ...col.props.style,\n                        },\n                    });\n                }\n                return col;\n            });\n            const otherProps = { ...others };\n            delete otherProps.gutter;\n            return (React.createElement(\"div\", Object.assign({}, omit(otherProps, ['rowIndex', 'colIndex']), { className: classes, style: rowStyle }), cols));\n        };\n    }\n    render() {\n        const { gutter } = this.props;\n        return React.createElement(Responsive, { items: [gutter] }, this.renderRow);\n    }\n}\nRow.displayName = 'Row';\nRow.defaultProps = {\n    gutter: defaultGutter,\n};\nRow.propTypes = {\n    type: PropTypes.string,\n    align: PropTypes.string,\n    justify: PropTypes.string,\n    className: PropTypes.string,\n    children: PropTypes.node,\n    gutter: PropTypes.oneOfType([PropTypes.object, PropTypes.number]),\n    prefixCls: PropTypes.string,\n};\n"]}