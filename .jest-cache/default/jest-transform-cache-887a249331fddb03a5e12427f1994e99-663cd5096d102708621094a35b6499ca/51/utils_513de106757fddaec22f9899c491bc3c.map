{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components/statistic/utils.tsx"],"names":[],"mappings":";;;;;;;;;;;;AACA;;AAuBA;AACA,IAAM,SAAS,GAAuB,CACpC,CAAC,GAAD,EAAM,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAAjB,GAAsB,GAA5B,CADoC,EAEpC,CAAC,GAAD,EAAM,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAAjB,GAAsB,EAA5B,CAFoC,EAGpC,CAAC,GAAD,EAAM,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAAvB,CAHoC,EAIpC,CAAC,GAAD,EAAM,OAAO,EAAP,GAAY,EAAlB,CAJoC,EAKpC,CAAC,GAAD,EAAM,OAAO,EAAb,CALoC,EAMpC,CAAC,GAAD,EAAM,IAAN,CANoC,EAOpC,CAAC,GAAD,EAAM,CAAN,CAPoC,CAAtC;;AAUM,SAAU,aAAV,CAAwB,QAAxB,EAA0C,MAA1C,EAAwD;AAC5D,MAAI,YAAY,GAAW,QAA3B;AAEA,MAAM,WAAW,GAAG,YAApB;AACA,MAAM,QAAQ,GAAa,CAAC,MAAM,CAAC,KAAP,CAAa,WAAb,KAA6B,EAA9B,EAAkC,GAAlC,CAAsC,UAAA,GAAG;AAAA,WAAI,GAAG,CAAC,KAAJ,CAAU,CAAV,EAAa,CAAC,CAAd,CAAJ;AAAA,GAAzC,CAA3B;AACA,MAAM,YAAY,GAAG,MAAM,CAAC,OAAP,CAAe,WAAf,EAA4B,IAA5B,CAArB;AAEA,MAAM,YAAY,GAAG,SAAS,CAAC,MAAV,CAAiB,UAAC,OAAD,QAA0B;AAAA;AAAA,QAAf,IAAe;AAAA,QAAT,IAAS;;AAC9D,QAAI,OAAO,CAAC,OAAR,CAAgB,IAAhB,MAA0B,CAAC,CAA/B,EAAkC;AAChC,UAAM,KAAK,GAAG,IAAI,CAAC,KAAL,CAAW,YAAY,GAAG,IAA1B,CAAd;AACA,MAAA,YAAY,IAAI,KAAK,GAAG,IAAxB;AACA,aAAO,OAAO,CAAC,OAAR,CAAgB,IAAI,MAAJ,WAAc,IAAd,QAAuB,GAAvB,CAAhB,EAA6C,UAAC,KAAD,EAAkB;AACpE,YAAM,GAAG,GAAG,KAAK,CAAC,MAAlB;AACA,eAAO,0BAAS,KAAK,CAAC,QAAN,EAAT,EAA2B,GAA3B,EAAgC,GAAhC,CAAP;AACD,OAHM,CAAP;AAID;;AACD,WAAO,OAAP;AACD,GAVoB,EAUlB,YAVkB,CAArB;AAYA,MAAI,KAAK,GAAG,CAAZ;AACA,SAAO,YAAY,CAAC,OAAb,CAAqB,WAArB,EAAkC,YAAK;AAC5C,QAAM,KAAK,GAAG,QAAQ,CAAC,KAAD,CAAtB;AACA,IAAA,KAAK,IAAI,CAAT;AACA,WAAO,KAAP;AACD,GAJM,CAAP;AAKD;;AAEK,SAAU,eAAV,CAA0B,KAA1B,EAAqD,MAArD,EAAkF;AAAA,uBAC9D,MAD8D,CAC9E,MAD8E;AAAA,MAC9E,MAD8E,+BACrE,EADqE;AAEtF,MAAM,MAAM,GAAG,IAAI,IAAJ,CAAS,KAAT,EAAgB,OAAhB,EAAf;AACA,MAAM,OAAO,GAAG,IAAI,CAAC,GAAL,EAAhB;AACA,MAAM,IAAI,GAAG,IAAI,CAAC,GAAL,CAAS,MAAM,GAAG,OAAlB,EAA2B,CAA3B,CAAb;AAEA,SAAO,aAAa,CAAC,IAAD,EAAO,MAAP,CAApB;AACD","sourcesContent":["import * as React from 'react';\nimport padStart from 'lodash/padStart';\n\nexport type valueType = number | string;\nexport type countdownValueType = valueType | string;\n\nexport type Formatter =\n  | false\n  | 'number'\n  | 'countdown'\n  | ((value: valueType, config?: FormatConfig) => React.ReactNode);\n\nexport interface FormatConfig {\n  formatter?: Formatter;\n  decimalSeparator?: string;\n  groupSeparator?: string;\n  precision?: number;\n  prefixCls?: string;\n}\n\nexport interface CountdownFormatConfig extends FormatConfig {\n  format?: string;\n}\n\n// Countdown\nconst timeUnits: [string, number][] = [\n  ['Y', 1000 * 60 * 60 * 24 * 365], // years\n  ['M', 1000 * 60 * 60 * 24 * 30], // months\n  ['D', 1000 * 60 * 60 * 24], // days\n  ['H', 1000 * 60 * 60], // hours\n  ['m', 1000 * 60], // minutes\n  ['s', 1000], // seconds\n  ['S', 1], // million seconds\n];\n\nexport function formatTimeStr(duration: number, format: string) {\n  let leftDuration: number = duration;\n\n  const escapeRegex = /\\[[^\\]]*]/g;\n  const keepList: string[] = (format.match(escapeRegex) || []).map(str => str.slice(1, -1));\n  const templateText = format.replace(escapeRegex, '[]');\n\n  const replacedText = timeUnits.reduce((current, [name, unit]) => {\n    if (current.indexOf(name) !== -1) {\n      const value = Math.floor(leftDuration / unit);\n      leftDuration -= value * unit;\n      return current.replace(new RegExp(`${name}+`, 'g'), (match: string) => {\n        const len = match.length;\n        return padStart(value.toString(), len, '0');\n      });\n    }\n    return current;\n  }, templateText);\n\n  let index = 0;\n  return replacedText.replace(escapeRegex, () => {\n    const match = keepList[index];\n    index += 1;\n    return match;\n  });\n}\n\nexport function formatCountdown(value: countdownValueType, config: CountdownFormatConfig) {\n  const { format = '' } = config;\n  const target = new Date(value).getTime();\n  const current = Date.now();\n  const diff = Math.max(target - current, 0);\n\n  return formatTimeStr(diff, format);\n}\n"]}