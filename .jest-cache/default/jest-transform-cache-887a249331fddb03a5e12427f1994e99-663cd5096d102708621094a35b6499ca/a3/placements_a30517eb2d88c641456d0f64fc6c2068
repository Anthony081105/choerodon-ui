6e097246b01924f7a5cbe94d2b5565c0
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.placements = void 0;
var autoAdjustOverflow = {
  adjustX: 1,
  adjustY: 1
};
var targetOffset = [0, 0];
var placements = {
  left: {
    points: ['cr', 'cl'],
    overflow: autoAdjustOverflow,
    offset: [-4, 0],
    targetOffset: targetOffset
  },
  right: {
    points: ['cl', 'cr'],
    overflow: autoAdjustOverflow,
    offset: [4, 0],
    targetOffset: targetOffset
  },
  top: {
    points: ['bc', 'tc'],
    overflow: autoAdjustOverflow,
    offset: [0, -4],
    targetOffset: targetOffset
  },
  bottom: {
    points: ['tc', 'bc'],
    overflow: autoAdjustOverflow,
    offset: [0, 4],
    targetOffset: targetOffset
  },
  topLeft: {
    points: ['bl', 'tl'],
    overflow: autoAdjustOverflow,
    offset: [0, -4],
    targetOffset: targetOffset
  },
  leftTop: {
    points: ['tr', 'tl'],
    overflow: autoAdjustOverflow,
    offset: [-4, 0],
    targetOffset: targetOffset
  },
  topRight: {
    points: ['br', 'tr'],
    overflow: autoAdjustOverflow,
    offset: [0, -4],
    targetOffset: targetOffset
  },
  rightTop: {
    points: ['tl', 'tr'],
    overflow: autoAdjustOverflow,
    offset: [4, 0],
    targetOffset: targetOffset
  },
  bottomRight: {
    points: ['tr', 'br'],
    overflow: autoAdjustOverflow,
    offset: [0, 4],
    targetOffset: targetOffset
  },
  rightBottom: {
    points: ['bl', 'br'],
    overflow: autoAdjustOverflow,
    offset: [4, 0],
    targetOffset: targetOffset
  },
  bottomLeft: {
    points: ['tl', 'bl'],
    overflow: autoAdjustOverflow,
    offset: [0, 4],
    targetOffset: targetOffset
  },
  leftBottom: {
    points: ['br', 'bl'],
    overflow: autoAdjustOverflow,
    offset: [-4, 0],
    targetOffset: targetOffset
  }
};
exports.placements = placements;
var _default = placements;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBsYWNlbWVudHMuanN4Il0sIm5hbWVzIjpbImF1dG9BZGp1c3RPdmVyZmxvdyIsImFkanVzdFgiLCJhZGp1c3RZIiwidGFyZ2V0T2Zmc2V0IiwicGxhY2VtZW50cyIsImxlZnQiLCJwb2ludHMiLCJvdmVyZmxvdyIsIm9mZnNldCIsInJpZ2h0IiwidG9wIiwiYm90dG9tIiwidG9wTGVmdCIsImxlZnRUb3AiLCJ0b3BSaWdodCIsInJpZ2h0VG9wIiwiYm90dG9tUmlnaHQiLCJyaWdodEJvdHRvbSIsImJvdHRvbUxlZnQiLCJsZWZ0Qm90dG9tIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFNQSxrQkFBa0IsR0FBRztBQUN6QkMsRUFBQUEsT0FBTyxFQUFFLENBRGdCO0FBRXpCQyxFQUFBQSxPQUFPLEVBQUU7QUFGZ0IsQ0FBM0I7QUFLQSxJQUFNQyxZQUFZLEdBQUcsQ0FBQyxDQUFELEVBQUksQ0FBSixDQUFyQjtBQUVPLElBQU1DLFVBQVUsR0FBRztBQUN4QkMsRUFBQUEsSUFBSSxFQUFFO0FBQ0pDLElBQUFBLE1BQU0sRUFBRSxDQUFDLElBQUQsRUFBTyxJQUFQLENBREo7QUFFSkMsSUFBQUEsUUFBUSxFQUFFUCxrQkFGTjtBQUdKUSxJQUFBQSxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUYsRUFBSyxDQUFMLENBSEo7QUFJSkwsSUFBQUEsWUFBWSxFQUFaQTtBQUpJLEdBRGtCO0FBT3hCTSxFQUFBQSxLQUFLLEVBQUU7QUFDTEgsSUFBQUEsTUFBTSxFQUFFLENBQUMsSUFBRCxFQUFPLElBQVAsQ0FESDtBQUVMQyxJQUFBQSxRQUFRLEVBQUVQLGtCQUZMO0FBR0xRLElBQUFBLE1BQU0sRUFBRSxDQUFDLENBQUQsRUFBSSxDQUFKLENBSEg7QUFJTEwsSUFBQUEsWUFBWSxFQUFaQTtBQUpLLEdBUGlCO0FBYXhCTyxFQUFBQSxHQUFHLEVBQUU7QUFDSEosSUFBQUEsTUFBTSxFQUFFLENBQUMsSUFBRCxFQUFPLElBQVAsQ0FETDtBQUVIQyxJQUFBQSxRQUFR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c3RPdmVyZmxvdyA9IHtcbiAgYWRqdXN0WDogMSxcbiAgYWRqdXN0WTogMSxcbn07XG5cbmNvbnN0IHRhcmdldE9mZnNldCA9IFswLCAwXTtcblxuZXhwb3J0IGNvbnN0IHBsYWNlbWVudHMgPSB7XG4gIGxlZnQ6IHtcbiAgICBwb2ludHM6IFsnY3InLCAnY2wnXSxcbiAgICBvdmVyZmxvdzogYXV0b0FkanVzdE92ZXJmbG93LFxuICAgIG9mZnNldDogWy00LCAwXSxcbiAgICB0YXJnZXRPZmZzZXQsXG4gIH0sXG4gIHJpZ2h0OiB7XG4gICAgcG9pbnRzOiBbJ2NsJywgJ2NyJ10sXG4gICAgb3ZlcmZsb3c6IGF1dG9BZGp1c3RPdmVyZmxvdyxcbiAgICBvZmZzZXQ6IFs0LCAwXSxcbiAgICB0YXJnZXRPZmZzZXQsXG4gIH0sXG4gIHRvcDoge1xuICAgIHBvaW50czogWydiYycsICd0YyddLFxuICAgIG92ZXJmbG93OiBhdXRvQWRqdXN0T3ZlcmZsb3csXG4gICAgb2Zmc2V0OiBbMCwgLTRdLFxuICAgIHRhcmdldE9mZnNldCxcbiAgfSxcbiAgYm90dG9tOiB7XG4gICAgcG9pbnRzOiBbJ3RjJywgJ2JjJ10sXG4gICAgb3ZlcmZsb3c6IGF1dG9BZGp1c3RPdmVyZmxvdyxcbiAgICBvZmZzZXQ6IFswLCA0XSxcbiAgICB0YXJnZXRPZmZzZXQsXG4gIH0sXG4gIHRvcExlZnQ6IHtcbiAgICBwb2ludHM6IFsnYmwnLCAndGwnXSxcbiAgICBvdmVyZmxvdzogYXV0b0FkanVzdE92ZXJmbG93LFxuICAgIG9mZnNldDogWzAsIC00XSxcbiAgICB0YXJnZXRPZmZzZXQsXG4gIH0sXG4gIGxlZnRUb3A6IHtcbiAgICBwb2ludHM6IFsndHInLCAndGwnXSxcbiAgICBvdmVyZmxvdzogYXV0b0FkanVzdE92ZXJmbG93LFxuICAgIG9mZnNldDogWy00LCAwXSxcbiAgICB0YXJnZXRPZmZzZXQsXG4gIH0sXG4gIHRvcFJpZ2h0OiB7XG4gICAgcG9pbnRzOiBbJ2JyJywgJ3RyJ10sXG4gICAgb3ZlcmZsb3c6IGF1dG9BZGp1c3RPdmVyZmxvdyxcbiAgICBvZmZzZXQ6IFswLCAtNF0sXG4gICAgdGFyZ2V0T2Zmc2V0LFxuICB9LFxuICByaWdodFRvcDoge1xuICAgIHBvaW50czogWyd0bCcsICd0ciddLFxuICAgIG92ZXJmbG93OiBhdXRvQWRqdXN0T3ZlcmZsb3csXG4gICAgb2Zmc2V0OiBbNCwgMF0sXG4gICAgdGFyZ2V0T2Zmc2V0LFxuICB9LFxuICBib3R0b21SaWdodDoge1xuICAgIHBvaW50czogWyd0cicsICdiciddLFxuICAgIG92ZXJmbG93OiBhdXRvQWRqdXN0T3ZlcmZsb3csXG4gICAgb2Zmc2V0OiBbMCwgNF0sXG4gICAgdGFyZ2V0T2Zmc2V0LFxuICB9LFxuICByaWdodEJvdHRvbToge1xuICAgIHBvaW50czogWydibCcsICdiciddLFxuICAgIG92ZXJmbG93OiBhdXRvQWRqdXN0T3ZlcmZsb3csXG4gICAgb2Zmc2V0OiBbNCwgMF0sXG4gICAgdGFyZ2V0T2Zmc2V0LFxuICB9LFxuICBib3R0b21MZWZ0OiB7XG4gICAgcG9pbnRzOiBbJ3RsJywgJ2JsJ10sXG4gICAgb3ZlcmZsb3c6IGF1dG9BZGp1c3RPdmVyZmxvdyxcbiAgICBvZmZzZXQ6IFswLCA0XSxcbiAgICB0YXJnZXRPZmZzZXQsXG4gIH0sXG4gIGxlZnRCb3R0b206IHtcbiAgICBwb2ludHM6IFsnYnInLCAnYmwnXSxcbiAgICBvdmVyZmxvdzogYXV0b0FkanVzdE92ZXJmbG93LFxuICAgIG9mZnNldDogWy00LCAwXSxcbiAgICB0YXJnZXRPZmZzZXQsXG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBwbGFjZW1lbnRzO1xuIl19