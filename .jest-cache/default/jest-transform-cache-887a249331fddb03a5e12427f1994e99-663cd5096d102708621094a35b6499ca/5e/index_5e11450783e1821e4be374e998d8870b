3bfebcc3f3dbf9e3aef303af2dbfc4e1
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getTodayTime = getTodayTime;
exports.getTitleString = getTitleString;
exports.getTodayTimeStr = getTodayTimeStr;
exports.getMonthName = getMonthName;
exports.syncTime = syncTime;
exports.getTimeConfig = getTimeConfig;
exports.isTimeValidByConfig = isTimeValidByConfig;
exports.isTimeValid = isTimeValid;
exports.isAllowedDate = isAllowedDate;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _moment = _interopRequireDefault(require("moment"));

var defaultDisabledTime = {
  disabledHours: function disabledHours() {
    return [];
  },
  disabledMinutes: function disabledMinutes() {
    return [];
  },
  disabledSeconds: function disabledSeconds() {
    return [];
  }
};

function getTodayTime(value) {
  var today = (0, _moment["default"])();
  today.locale(value.locale()).utcOffset(value.utcOffset());
  return today;
}

function getTitleString(value) {
  return value.format('LL');
}

function getTodayTimeStr(value) {
  var today = getTodayTime(value);
  return getTitleString(today);
}

function getMonthName(month) {
  var locale = month.locale();
  var localeData = month.localeData();
  return localeData[locale === 'zh-cn' ? 'months' : 'monthsShort'](month);
}

function syncTime(from, to) {
  if (!_moment["default"].isMoment(from) || !_moment["default"].isMoment(to)) return;
  to.hour(from.hour());
  to.minute(from.minute());
  to.second(from.second());
}

function getTimeConfig(value, disabledTime) {
  var disabledTimeConfig = disabledTime ? disabledTime(value) : {};
  disabledTimeConfig = (0, _objectSpread2["default"])({}, defaultDisabledTime, {}, disabledTimeConfig);
  return disabledTimeConfig;
}

function isTimeValidByConfig(value, disabledTimeConfig) {
  var invalidTime = false;

  if (value) {
    var hour = value.hour();
    var minutes = value.minute();
    var seconds = value.second();
    var disabledHours = disabledTimeConfig.disabledHours();

    if (disabledHours.indexOf(hour) === -1) {
      var disabledMinutes = disabledTimeConfig.disabledMinutes(hour);

      if (disabledMinutes.indexOf(minutes) === -1) {
        var disabledSeconds = disabledTimeConfig.disabledSeconds(hour, minutes);
        invalidTime = disabledSeconds.indexOf(seconds) !== -1;
      } else {
        invalidTime = true;
      }
    } else {
      invalidTime = true;
    }
  }

  return !invalidTime;
}

function isTimeValid(value, disabledTime) {
  var disabledTimeConfig = getTimeConfig(value, disabledTime);
  return isTimeValidByConfig(value, disabledTimeConfig);
}

function isAllowedDate(value, disabledDate, disabledTime) {
  if (disabledDate) {
    if (disabledDate(value)) {
      return false;
    }
  }

  if (disabledTime) {
    if (!isTimeValid(value, disabledTime)) {
      return false;
    }
  }

  return true;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzeCJdLCJuYW1lcyI6WyJkZWZhdWx0RGlzYWJsZWRUaW1lIiwiZGlzYWJsZWRIb3VycyIsImRpc2FibGVkTWludXRlcyIsImRpc2FibGVkU2Vjb25kcyIsImdldFRvZGF5VGltZSIsInZhbHVlIiwidG9kYXkiLCJsb2NhbGUiLCJ1dGNPZmZzZXQiLCJnZXRUaXRsZVN0cmluZyIsImZvcm1hdCIsImdldFRvZGF5VGltZVN0ciIsImdldE1vbnRoTmFtZSIsIm1vbnRoIiwibG9jYWxlRGF0YSIsInN5bmNUaW1lIiwiZnJvbSIsInRvIiwibW9tZW50IiwiaXNNb21lbnQiLCJob3VyIiwibWludXRlIiwic2Vjb25kIiwiZ2V0VGltZUNvbmZpZyIsImRpc2FibGVkVGltZSIsImRpc2FibGVkVGltZUNvbmZpZyIsImlzVGltZVZhbGlkQnlDb25maWciLCJpbnZhbGlkVGltZSIsIm1pbnV0ZXMiLCJzZWNvbmRzIiwiaW5kZXhPZiIsImlzVGltZVZhbGlkIiwiaXNBbGxvd2VkRGF0ZSIsImRpc2FibGVkRGF0ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUVBLElBQU1BLG1CQUFtQixHQUFHO0FBQzFCQyxFQUFBQSxhQUQwQiwyQkFDVjtBQUNkLFdBQU8sRUFBUDtBQUNELEdBSHlCO0FBSTFCQyxFQUFBQSxlQUowQiw2QkFJUjtBQUNoQixXQUFPLEVBQVA7QUFDRCxHQU55QjtBQU8xQkMsRUFBQUEsZUFQMEIsNkJBT1I7QUFDaEIsV0FBTyxFQUFQO0FBQ0Q7QUFUeUIsQ0FBNUI7O0FBWU8sU0FBU0MsWUFBVCxDQUFzQkMsS0FBdEIsRUFBNkI7QUFDbEMsTUFBTUMsS0FBSyxHQUFHLHlCQUFkO0FBQ0FBLEVBQUFBLEtBQUssQ0FBQ0MsTUFBTixDQUFhRixLQUFLLENBQUNFLE1BQU4sRUFBYixFQUE2QkMsU0FBN0IsQ0FBdUNILEtBQUssQ0FBQ0csU0FBTixFQUF2QztBQUNBLFNBQU9GLEtBQVA7QUFDRDs7QUFFTSxTQUFTRyxj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QkFBbUIsQ0FBQ3JCLEtBQUQsRUFBUW9CLGtCQUFSLENBQTFCO0FBQ0Q7O0FBRU0sU0FBU08sYUFBVCxDQUF1QjNCLEtBQXZCLEVBQThCNEIsWUFBOUIsRUFBNENULFlBQTVDLEVBQTBEO0FBQy9ELE1BQUlTLFlBQUosRUFBa0I7QUFDaEIsUUFBSUEsWUFBWSxDQUFDNUIsS0FBRCxDQUFoQixFQUF5QjtBQUN2QixhQUFPLEtBQVA7QUFDRDtBQUNGOztBQUNELE1BQUltQixZQUFKLEVBQWtCO0FBQ2hCLFFBQUksQ0FBQ08sV0FBVyxDQUFDMUIsS0FBRCxFQUFRbUIsWUFBUixDQUFoQixFQUF1QztBQUNyQyxhQUFPLEtBQVA7QUFDRDtBQUNGOztBQUNELFNBQU8sSUFBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuXG5jb25zdCBkZWZhdWx0RGlzYWJsZWRUaW1lID0ge1xuICBkaXNhYmxlZEhvdXJzKCkge1xuICAgIHJldHVybiBbXTtcbiAgfSxcbiAgZGlzYWJsZWRNaW51dGVzKCkge1xuICAgIHJldHVybiBbXTtcbiAgfSxcbiAgZGlzYWJsZWRTZWNvbmRzKCkge1xuICAgIHJldHVybiBbXTtcbiAgfSxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUb2RheVRpbWUodmFsdWUpIHtcbiAgY29uc3QgdG9kYXkgPSBtb21lbnQoKTtcbiAgdG9kYXkubG9jYWxlKHZhbHVlLmxvY2FsZSgpKS51dGNPZmZzZXQodmFsdWUudXRjT2Zmc2V0KCkpO1xuICByZXR1cm4gdG9kYXk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUaXRsZVN0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUuZm9ybWF0KCdMTCcpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VG9kYXlUaW1lU3RyKHZhbHVlKSB7XG4gIGNvbnN0IHRvZGF5ID0gZ2V0VG9kYXlUaW1lKHZhbHVlKTtcbiAgcmV0dXJuIGdldFRpdGxlU3RyaW5nKHRvZGF5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE1vbnRoTmFtZShtb250aCkge1xuICBjb25zdCBsb2NhbGUgPSBtb250aC5sb2NhbGUoKTtcbiAgY29uc3QgbG9jYWxlRGF0YSA9IG1vbnRoLmxvY2FsZURhdGEoKTtcbiAgcmV0dXJuIGxvY2FsZURhdGFbbG9jYWxlID09PSAnemgtY24nID8gJ21vbnRocycgOiAnbW9udGhzU2hvcnQnXShtb250aCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzeW5jVGltZShmcm9tLCB0bykge1xuICBpZiAoIW1vbWVudC5pc01vbWVudChmcm9tKSB8fCAhbW9tZW50LmlzTW9tZW50KHRvKSkgcmV0dXJuO1xuICB0by5ob3VyKGZyb20uaG91cigpKTtcbiAgdG8ubWludXRlKGZyb20ubWludXRlKCkpO1xuICB0by5zZWNvbmQoZnJvbS5zZWNvbmQoKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUaW1lQ29uZmlnKHZhbHVlLCBkaXNhYmxlZFRpbWUpIHtcbiAgbGV0IGRpc2FibGVkVGltZUNvbmZpZyA9IGRpc2FibGVkVGltZSA/IGRpc2FibGVkVGltZSh2YWx1ZSkgOiB7fTtcbiAgZGlzYWJsZWRUaW1lQ29uZmlnID0ge1xuICAgIC4uLmRlZmF1bHREaXNhYmxlZFRpbWUsXG4gICAgLi4uZGlzYWJsZWRUaW1lQ29uZmlnLFxuICB9O1xuICByZXR1cm4gZGlzYWJsZWRUaW1lQ29uZmlnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNUaW1lVmFsaWRCeUNvbmZpZyh2YWx1ZSwgZGlzYWJsZWRUaW1lQ29uZmlnKSB7XG4gIGxldCBpbnZhbGlkVGltZSA9IGZhbHNlO1xuICBpZiAodmFsdWUpIHtcbiAgICBjb25zdCBob3VyID0gdmFsdWUuaG91cigpO1xuICAgIGNvbnN0IG1pbnV0ZXMgPSB2YWx1ZS5taW51dGUoKTtcbiAgICBjb25zdCBzZWNvbmRzID0gdmFsdWUuc2Vjb25kKCk7XG4gICAgY29uc3QgZGlzYWJsZWRIb3VycyA9IGRpc2FibGVkVGltZUNvbmZpZy5kaXNhYmxlZEhvdXJzKCk7XG4gICAgaWYgKGRpc2FibGVkSG91cnMuaW5kZXhPZihob3VyKSA9PT0gLTEpIHtcbiAgICAgIGNvbnN0IGRpc2FibGVkTWludXRlcyA9IGRpc2FibGVkVGltZUNvbmZpZy5kaXNhYmxlZE1pbnV0ZXMoaG91cik7XG4gICAgICBpZiAoZGlzYWJsZWRNaW51dGVzLmluZGV4T2YobWludXRlcykgPT09IC0xKSB7XG4gICAgICAgIGNvbnN0IGRpc2FibGVkU2Vjb25kcyA9IGRpc2FibGVkVGltZUNvbmZpZy5kaXNhYmxlZFNlY29uZHMoaG91ciwgbWludXRlcyk7XG4gICAgICAgIGludmFsaWRUaW1lID0gZGlzYWJsZWRTZWNvbmRzLmluZGV4T2Yoc2Vjb25kcykgIT09IC0xO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW52YWxpZFRpbWUgPSB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpbnZhbGlkVGltZSA9IHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiAhaW52YWxpZFRpbWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1RpbWVWYWxpZCh2YWx1ZSwgZGlzYWJsZWRUaW1lKSB7XG4gIGNvbnN0IGRpc2FibGVkVGltZUNvbmZpZyA9IGdldFRpbWVDb25maWcodmFsdWUsIGRpc2FibGVkVGltZSk7XG4gIHJldHVybiBpc1RpbWVWYWxpZEJ5Q29uZmlnKHZhbHVlLCBkaXNhYmxlZFRpbWVDb25maWcpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNBbGxvd2VkRGF0ZSh2YWx1ZSwgZGlzYWJsZWREYXRlLCBkaXNhYmxlZFRpbWUpIHtcbiAgaWYgKGRpc2FibGVkRGF0ZSkge1xuICAgIGlmIChkaXNhYmxlZERhdGUodmFsdWUpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIGlmIChkaXNhYmxlZFRpbWUpIHtcbiAgICBpZiAoIWlzVGltZVZhbGlkKHZhbHVlLCBkaXNhYmxlZFRpbWUpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuIl19