71edd2918c45e74b5d1ee2f348392bef
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _moment = _interopRequireDefault(require("moment"));

var _ = _interopRequireDefault(require(".."));

var _DatePicker = _interopRequireDefault(require("./DatePicker"));

var _utils = require("./utils");

var _focusTest = _interopRequireDefault(require("../../../tests/shared/focusTest"));

var _triggerPopTest = _interopRequireDefault(require("../../../tests/shared/triggerPopTest"));

describe('date-picker-pro', function () {
  (0, _focusTest["default"])(_["default"]);
  (0, _triggerPopTest["default"])(_["default"]);
  beforeEach(function () {
    jest.useFakeTimers();
  });
  afterEach(function () {
    jest.useRealTimers();
  });
  it('renders multiple correctly', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      defaultValue: "2020-02-10 18:18:18"
    }));
    expect(wrapper.find('input').at(0).prop('value')).toBe('2020-02-10');
    wrapper.setProps({
      multiple: true
    });
    wrapper.update();
    expect(wrapper.find('.c7n-pro-calendar-picker-wrapper').at(0).hasClass('c7n-pro-calendar-picker-multiple')).toBe(true);
  });
  it('renders dataSet date correctly', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_DatePicker["default"], null));
    expect(wrapper.find('DatePicker').props().name).toEqual('date');
    expect(wrapper.find('.c7n-pro-calendar-picker-wrapper').at(0).hasClass('c7n-pro-calendar-picker-multiple')).toBe(false);
    expect(wrapper.find('.c7n-pro-calendar-picker-range-end').at(0).prop('value')).toBe('2020-02-09');
    expect(wrapper.find('.c7n-pro-calendar-picker-range-start').at(0).prop('value')).toBe('1984-11-22');
  });
  it('the onChange event only triggers when date was selected or changed', function () {
    var handleChange = jest.fn();
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      onChange: handleChange
    }));
    (0, _utils.openPanel)(wrapper);
    (0, _utils.nextYear)(wrapper);
    expect(handleChange).not.toHaveBeenCalled();
    (0, _utils.nextMonth)(wrapper);
    expect(handleChange).not.toHaveBeenCalled();
  });
  it('the keydown event should render correctly', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      mode: "date",
      multiple: false
    }));
    wrapper.find('input').simulate('click');
    jest.runAllTimers();
    wrapper.update();
    (0, _utils.simulateCode)(wrapper, 39);
    (0, _utils.simulateCode)(wrapper, 37);
    (0, _utils.simulateCode)(wrapper, 40);
    (0, _utils.simulateCode)(wrapper, 38);
    (0, _utils.simulateCode)(wrapper, 35);
    (0, _utils.simulateCode)(wrapper, 36);
    (0, _utils.simulateCode)(wrapper, 33);
    (0, _utils.simulateCode)(wrapper, 34);
    (0, _utils.simulateCode)(wrapper, 13);
    (0, _utils.simulateCode)(wrapper, 10);
    wrapper.update();
  });
  it('the keyDown event {space} keyCode should render correctly', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], null));
    wrapper.find('input').simulate('keydown', {
      keyCode: 32
    });
    jest.runAllTimers();
    wrapper.update();
  });
  it('the mode { decade } should render correctly', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      mode: "decade"
    }));
    wrapper.find('input').simulate('keydown', {
      keyCode: 32
    });
    jest.runAllTimers();
    wrapper.update();
  });
  it('the keyDown event { esc, enter } keyCode should render correctly', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], null));
    wrapper.find('input').simulate('click');
    jest.runAllTimers();
    wrapper.update();
    (0, _utils.simulateCode)(wrapper, 9);
    wrapper.update();
    wrapper.find('input').simulate('click');
    jest.runAllTimers();
    (0, _utils.simulateCode)(wrapper, 27);
    wrapper.update();
  });
  it('the { multiple, min, max } property should render correctly', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      mode: "month",
      multiple: true,
      min: (0, _moment["default"])('2019-02-10'),
      max: (0, _moment["default"])('2021-02-10')
    }));
    wrapper.find('input').at(0).simulate('click');
    jest.runAllTimers();
    wrapper.update();
    wrapper.find('input').at(0).simulate('keydown', {
      keyCode: 13
    });
    jest.runAllTimers();
    wrapper.update();
  });
  it('the { min, max } property should render month-picker correctly', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      mode: "month",
      min: (0, _moment["default"])('2019-02-10'),
      max: (0, _moment["default"])('2021-02-10')
    }));
    wrapper.find('input').at(0).simulate('click');
    jest.runAllTimers();
    wrapper.update();
  });
  it('read only when setting read-only', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      readOnly: true
    }));
    var isReadOnly = wrapper.find('input').at(0).prop('readOnly');
    expect(isReadOnly).toBe(true);
  });
  it('the { min, max } property should render year-picker correctly', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      mode: "year",
      min: (0, _moment["default"])('2019-02-10'),
      max: (0, _moment["default"])('2021-02-10')
    }));
    wrapper.find('input').at(0).simulate('click');
    jest.runAllTimers();
    wrapper.update();
  });
  it('the { min, max } property should render date-time-picker correctly', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      mode: "dateTime",
      min: (0, _moment["default"])('2019-02-10'),
      max: (0, _moment["default"])('2021-02-10')
    }));
    wrapper.find('input').at(0).simulate('click');
    jest.runAllTimers();
    wrapper.update();
  });
  it('the { min, max } property should render decadeYear-picker correctly', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      mode: "decade",
      min: (0, _moment["default"])('2019-02-10'),
      max: (0, _moment["default"])('2021-02-10')
    }));
    wrapper.find('input').at(0).simulate('click');
    jest.runAllTimers();
    wrapper.update();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,