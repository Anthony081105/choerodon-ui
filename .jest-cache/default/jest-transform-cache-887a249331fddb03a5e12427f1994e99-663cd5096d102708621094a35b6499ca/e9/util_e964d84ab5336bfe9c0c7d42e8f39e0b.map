{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components/rc-components/tree/util.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Legacy code. Should avoid to use if you are new to import these code.\n */\n\nimport React from 'react';\nimport warning from '../../_util/warning';\n// @ts-ignore\nimport TreeNode, { TreeNodeProps } from './TreeNode';\nimport { NodeElement, Key, DataNode, Entity, DataEntity, NodeInstance } from './interface';\nimport { TreeProps } from './Tree';\n\nconst DRAG_SIDE_RANGE = 0.25;\nconst DRAG_MIN_GAP = 2;\n\nexport function arrDel(list: Key[], value: Key) {\n  const clone = list.slice();\n  const index = clone.indexOf(value);\n  if (index >= 0) {\n    clone.splice(index, 1);\n  }\n  return clone;\n}\n\nexport function arrAdd(list: Key[], value: Key) {\n  const clone = list.slice();\n  if (clone.indexOf(value) === -1) {\n    clone.push(value);\n  }\n  return clone;\n}\n\nexport function posToArr(pos: string) {\n  return pos.split('-');\n}\n\nexport function getPosition(level: string | number, index: number) {\n  return `${level}-${index}`;\n}\n\nexport function isTreeNode(node: NodeElement) {\n  return node && node.type && node.type.isTreeNode;\n}\n\nexport function getDragNodesKeys(dragNodeKey: Key, keyEntities: Record<Key, DataEntity>): Key[] {\n  const dragNodesKeys = [dragNodeKey];\n\n  const entity = keyEntities[dragNodeKey];\n  function dig(list: DataEntity[] = []) {\n    list.forEach(({ key, children }) => {\n      dragNodesKeys.push(key);\n      dig(children);\n    });\n  }\n\n  dig(entity.children);\n\n  return dragNodesKeys;\n}\n\n// Only used when drag, not affect SSR.\nexport function calcDropPosition(event: React.MouseEvent, treeNode: NodeInstance) {\n  const { clientY } = event;\n  const { top, bottom, height } = treeNode.selectHandle!.getBoundingClientRect();\n  const des = Math.max(height * DRAG_SIDE_RANGE, DRAG_MIN_GAP);\n\n  if (clientY <= top + des) {\n    return -1;\n  }\n  if (clientY >= bottom - des) {\n    return 1;\n  }\n\n  return 0;\n}\n\n/**\n * Return selectedKeys according with multiple prop\n * @param selectedKeys\n * @param props\n * @returns [string]\n */\nexport function calcSelectedKeys(selectedKeys: Key[], props: TreeProps) {\n  if (!selectedKeys) return undefined;\n\n  const { multiple } = props;\n  if (multiple) {\n    return selectedKeys.slice();\n  }\n\n  if (selectedKeys.length) {\n    return [selectedKeys[0]];\n  }\n  return selectedKeys;\n}\n\nconst internalProcessProps = (props: DataNode): Partial<TreeNodeProps> => props;\nexport function convertDataToTree(\n  treeData: DataNode[],\n  processor?: { processProps: (prop: DataNode) => any },\n): NodeElement[] {\n  if (!treeData) return [];\n\n  const { processProps = internalProcessProps } = processor || {};\n  const list = Array.isArray(treeData) ? treeData : [treeData];\n  return list.map(\n    ({ children, ...props }): NodeElement => {\n      const childrenNodes = convertDataToTree(children!, processor);\n      // @ts-ignore\n      // eslint-disable-next-line react/jsx-key\n      return <TreeNode {...processProps(props)}>{childrenNodes}</TreeNode>;\n    },\n  );\n}\n\n// TODO: ========================= NEW LOGIC =========================\n// @ts-ignore\ninterface Wrapper {\n  posEntities: Record<string, Entity>;\n  keyEntities: Record<Key, Entity>;\n}\n\n/**\n * Parse `checkedKeys` to { checkedKeys, halfCheckedKeys } style\n */\nexport function parseCheckedKeys(keys: Key[] | { checked: Key[]; halfChecked: Key[] }) {\n  if (!keys) {\n    return null;\n  }\n\n  // Convert keys to object format\n  let keyProps;\n  if (Array.isArray(keys)) {\n    // [Legacy] Follow the api doc\n    keyProps = {\n      checkedKeys: keys,\n      halfCheckedKeys: undefined,\n    };\n  } else if (typeof keys === 'object') {\n    keyProps = {\n      checkedKeys: keys.checked || undefined,\n      halfCheckedKeys: keys.halfChecked || undefined,\n    };\n  } else {\n    warning(false, '`checkedKeys` is not an array or an object');\n    return null;\n  }\n\n  return keyProps;\n}\n\n/**\n * If user use `autoExpandParent` we should get the list of parent node\n * @param keyList\n * @param keyEntities\n */\nexport function conductExpandParent(keyList: Key[], keyEntities: Record<Key, DataEntity>) {\n  const expandedKeys = {};\n\n  function conductUp(key: Key) {\n    if (expandedKeys[key]) return;\n\n    const entity = keyEntities[key];\n    if (!entity) return;\n\n    expandedKeys[key] = true;\n\n    const { parent, node } = entity;\n\n    if (node.disabled) return;\n\n    if (parent) {\n      conductUp(parent.key);\n    }\n  }\n\n  (keyList || []).forEach(key => {\n    conductUp(key);\n  });\n\n  return Object.keys(expandedKeys);\n}\n\n/**\n * Returns only the data- and aria- key/value pairs\n */\nexport function getDataAndAria(props: Partial<TreeProps | TreeNodeProps>) {\n  const omitProps: Record<string, string> = {};\n  Object.keys(props).forEach(key => {\n    if (key.startsWith('data-') || key.startsWith('aria-')) {\n      omitProps[key] = props[key];\n    }\n  });\n\n  return omitProps;\n}\n"]}