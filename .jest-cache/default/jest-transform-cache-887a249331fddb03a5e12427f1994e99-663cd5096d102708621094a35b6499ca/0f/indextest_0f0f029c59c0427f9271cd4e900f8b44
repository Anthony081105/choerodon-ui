33a9091114a2b983982bfc680b062f62
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _ = _interopRequireDefault(require(".."));

var _IntlList = _interopRequireDefault(require("../IntlList"));

var _intlField = _interopRequireDefault(require("./intlField"));

var _focusTest = _interopRequireDefault(require("../../../tests/shared/focusTest"));

var _mountTest = _interopRequireDefault(require("../../../tests/shared/mountTest"));

var _ModalContainer = require("../../modal-container/ModalContainer");

var _dataSet = _interopRequireDefault(require("../../data-set"));

(0, _mountTest["default"])(_IntlList["default"]);
(0, _mountTest["default"])(_["default"]);
(0, _focusTest["default"])(_["default"]);
describe('IntlField-pro', function () {
  var errorSpy = jest.spyOn(console, 'error').mockImplementation(function () {});
  beforeEach(function () {
    jest.useFakeTimers();
  });
  afterEach(function () {
    errorSpy.mockReset();
    document.body.innerHTML = '';
    jest.useRealTimers();
  });
  afterAll(function () {
    errorSpy.mockRestore();
  });

  var _pro = function _pro(className) {
    return document.body.querySelectorAll(className);
  };

  it('renders IntlField correctly', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], null));
    expect(wrapper).toMatchSnapshot();
  });
  it('should focused when the input click or mousedown', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], null));
    expect(wrapper.find('.c7n-pro-input-focused')).toHaveLength(0);
    wrapper.find('input').simulate('focus');
    jest.runAllTimers();
    wrapper.update();
    expect(wrapper.find('.c7n-pro-input-focused')).toHaveLength(1);
  });
  it('input should render readOnly correctly', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], null));
    expect(wrapper.prop('readOnly')).toBe(false);
    wrapper.setProps({
      readOnly: true
    });
    wrapper.update();
    expect(wrapper.prop('readOnly')).toBe(true);
    wrapper.find('.c7n-pro-input-suffix').simulate('click');
    jest.runAllTimers();
    expect(_pro('.c7n-pro-modal-container')).toHaveLength(0);
  });
  it('trigger onOk once when click on ok button', function () {
    var onCancel = jest.fn();
    var onOk = jest.fn();
    (0, _ModalContainer.open)({
      onCancel: onCancel,
      onOk: onOk
    });

    _pro('.c7n-pro-modal-footer')[0].querySelector('.c7n-pro-btn-primary').click();

    expect(onCancel.mock.calls.length).toBe(0);
    expect(onOk.mock.calls.length).toBe(1);
  });
  it('renders dataset correctly', function () {
    var handleDataSetChange = jest.fn();
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_intlField["default"], null));
    expect(wrapper.find('IntlField').props().name).toEqual('first-name');
    expect(wrapper.find('input').props().value).toEqual('Âê¥');
    expect(wrapper).toMatchSnapshot();
    var ds = new _dataSet["default"]({
      lang: 'en_GB',
      primaryKey: 'pk',
      data: [{}],
      tlsUrl: '/dataset/user/languages',
      fields: [{
        name: 'first',
        type: 'intl',
        required: true
      }],
      events: {
        update: handleDataSetChange
      }
    });
    var wrapper1 = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      dataSet: ds,
      name: "first"
    }));
    expect(wrapper1.find('IntlField').props().name).toEqual('first');
    expect(wrapper1).toMatchSnapshot();
  });
  it('{ ok, cancel } button click render correctly', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], null));
    expect(_pro('.c7n-pro-modal-container')).toHaveLength(0);
    wrapper.find('.c7n-pro-input-suffix').simulate('click');
    jest.runAllTimers();
    expect(_pro('.c7n-pro-modal-container')).toHaveLength(1);
    expect(_pro('.c7n-pro-btn')).toHaveLength(2);

    _pro('.c7n-pro-btn-primary')[0].click();

    jest.runAllTimers();
    wrapper.update();

    _pro('.c7n-pro-btn-default')[0].click();

    jest.runAllTimers();
    wrapper.update();
    expect(wrapper).toMatchSnapshot();
  });
  it('the input keydown event , keyCode {down}', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], null));
    expect(_pro('.c7n-pro-modal-container')).toHaveLength(0);
    wrapper.find('input').simulate('keydown', {
      keyCode: 40
    });
    jest.runAllTimers();
    wrapper.update();
    expect(_pro('.c7n-pro-modal-container')).toHaveLength(1);
  });
  it('modal should unmout', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], null));
    wrapper.unmount();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,