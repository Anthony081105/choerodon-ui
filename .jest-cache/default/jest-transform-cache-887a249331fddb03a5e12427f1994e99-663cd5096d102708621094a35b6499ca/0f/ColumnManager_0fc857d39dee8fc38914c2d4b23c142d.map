{"version":3,"sources":["ColumnManager.jsx"],"names":["ColumnManager","columns","elements","normalize","_cache","some","column","fixed","leafColumns","footer","groupedColumns","filter","_leafColumns","leftColumns","rightColumns","_groupColumns","currentRow","parentColumn","rows","grouped","setRowSpan","rowSpan","length","children","forEach","index","newColumn","push","colSpan","i","Children","element","props","key","type","isTableColumnGroup","_cached","name","fn"],"mappings":"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","sourcesContent":["import React, { Children, isValidElement } from 'react';\n\nexport default class ColumnManager {\n  _cached = {};\n\n  constructor(columns, elements) {\n    this.columns = columns || this.normalize(elements);\n  }\n\n  isAnyColumnsFixed() {\n    return this._cache('isAnyColumnsFixed', () => {\n      return this.columns.some(column => !!column.fixed);\n    });\n  }\n\n  isAnyColumnsLeftFixed() {\n    return this._cache('isAnyColumnsLeftFixed', () => {\n      return this.columns.some(\n        column => column.fixed === 'left' || column.fixed === true,\n      );\n    });\n  }\n\n  isAnyColumnsRightFixed() {\n    return this._cache('isAnyColumnsRightFixed', () => {\n      return this.columns.some(\n        column => column.fixed === 'right',\n      );\n    });\n  }\n\n  hasFooter() {\n    return this._cache('hasFooter', () => {\n      return this.leafColumns().some(column => column.footer);\n    });\n  }\n\n  leftColumns() {\n    return this._cache('leftColumns', () => {\n      return this.groupedColumns().filter(\n        column => column.fixed === 'left' || column.fixed === true,\n      );\n    });\n  }\n\n  rightColumns() {\n    return this._cache('rightColumns', () => {\n      return this.groupedColumns().filter(\n        column => column.fixed === 'right',\n      );\n    });\n  }\n\n  leafColumns() {\n    return this._cache('leafColumns', () =>\n      this._leafColumns(this.columns),\n    );\n  }\n\n  leftLeafColumns() {\n    return this._cache('leftLeafColumns', () =>\n      this._leafColumns(this.leftColumns()),\n    );\n  }\n\n  rightLeafColumns() {\n    return this._cache('rightLeafColumns', () =>\n      this._leafColumns(this.rightColumns()),\n    );\n  }\n\n  // add appropriate rowspan and colspan to column\n  groupedColumns() {\n    return this._cache('groupedColumns', () => {\n      const _groupColumns = (columns, currentRow = 0, parentColumn = {}, rows = []) => {\n        // track how many rows we got\n        rows[currentRow] = rows[currentRow] || [];\n        const grouped = [];\n        const setRowSpan = column => {\n          const rowSpan = rows.length - currentRow;\n          if (column &&\n            !column.children && // parent columns are supposed to be one row\n            rowSpan > 1 &&\n            (!column.rowSpan || column.rowSpan < rowSpan)\n          ) {\n            column.rowSpan = rowSpan;\n          }\n        };\n        columns.forEach((column, index) => {\n          const newColumn = { ...column };\n          rows[currentRow].push(newColumn);\n          parentColumn.colSpan = parentColumn.colSpan || 0;\n          if (newColumn.children && newColumn.children.length > 0) {\n            newColumn.children = _groupColumns(newColumn.children, currentRow + 1, newColumn, rows);\n            parentColumn.colSpan = parentColumn.colSpan + newColumn.colSpan;\n          } else {\n            parentColumn.colSpan++;\n          }\n          // update rowspan to all same row columns\n          for (let i = 0; i < rows[currentRow].length - 1; ++i) {\n            setRowSpan(rows[currentRow][i]);\n          }\n          // last column, update rowspan immediately\n          if (index + 1 === columns.length) {\n            setRowSpan(newColumn);\n          }\n          grouped.push(newColumn);\n        });\n        return grouped;\n      };\n      return _groupColumns(this.columns);\n    });\n  }\n\n  normalize(elements) {\n    const columns = [];\n    Children.forEach(elements, element => {\n      if (!isValidElement(element)) {\n        return;\n      }\n      const column = { ...element.props };\n      if (element.key) {\n        column.key = element.key;\n      }\n      if (element.type.isTableColumnGroup) {\n        column.children = this.normalize(column.children);\n      }\n      columns.push(column);\n    });\n    return columns;\n  }\n\n  reset(columns, elements) {\n    this.columns = columns || this.normalize(elements);\n    this._cached = {};\n  }\n\n  _cache(name, fn) {\n    if (name in this._cached) {\n      return this._cached[name];\n    }\n    this._cached[name] = fn();\n    return this._cached[name];\n  }\n\n  _leafColumns(columns) {\n    const leafColumns = [];\n    columns.forEach(column => {\n      if (!column.children) {\n        leafColumns.push(column);\n      } else {\n        leafColumns.push(...this._leafColumns(column.children));\n      }\n    });\n    return leafColumns;\n  }\n}\n"]}