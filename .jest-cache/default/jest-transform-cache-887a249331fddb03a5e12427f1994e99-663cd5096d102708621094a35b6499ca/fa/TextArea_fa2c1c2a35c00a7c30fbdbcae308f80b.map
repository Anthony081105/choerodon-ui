{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/text-area/TextArea.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA,IAAqB,QAArB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,oCAwBe;AAAA,UACH,MADG,GACQ,KAAK,KADb,CACH,MADG;AAEX,UAAM,UAAU,GAAG,qIAA4B,CAAC,QAAD,EAAW,UAAX,CAA5B,CAAnB;AAFW,8BAGY,UAHZ,CAGH,KAHG;AAAA,UAGH,KAHG,kCAGK,EAHL;AAIX,MAAA,KAAK,CAAC,MAAN,GAAe,MAAf;;AACA,UAAI,MAAM,KAAA;AAAA;AAAV,QAAgC;AAC9B,UAAA,KAAK,CAAC,UAAN,GAAmB,MAAnB;AACD;;AAPU,UAQH,QARG,GAQU,KAAK,KARf,CAQH,QARG;AASX,UAAI,cAAc,GAAG,EAArB;;AACA,UAAI,QAAJ,EAAc;AAAA,YACJ,OADI,GACiB,QADjB,CACJ,OADI;AAAA,YACK,OADL,GACiB,QADjB,CACK,OADL;AAEZ,QAAA,UAAU,CAAC,IAAX,GAAkB,OAAlB;;AACA,YAAI,KAAK,OAAT,EAAkB;AAChB,UAAA,cAAc,GAAG,qCAAoB,KAAK,OAAzB,EAAkC,IAAlC,EAAwC,OAAxC,EAAiD,OAAjD,CAAjB;AACD;AACF;;AACD,MAAA,UAAU,CAAC,KAAX,sCAAwB,KAAxB,MAAkC,cAAlC;AACA,aAAO,UAAP;AACD;AA3CH;AAAA;AAAA,oCA6Ce;AACX,UAAM,IAAI,GAAG,KAAK,WAAL,EAAb;AACA,aACE,kBAAA,aAAA,CAAA,KAAA,EAAA,0BAAA;AAAK,QAAA,GAAG,EAAC;AAAT,OAAA,EAAuB,KAAK,eAAL,EAAvB,CAAA,EACG,KAAK,iBAAL,EADH,EAEE,kBAAA,aAAA,CAAA,OAAA,EAAA,IAAA,EACE,kBAAA,aAAA,CAAA,UAAA,EAAA,0BAAA,EAAA,EACM,KAAK,aAAL,EADN,EAC0B;AACxB,QAAA,WAAW,EAAE,KAAK,aAAL,GAAqB,SAArB,GAAiC,KAAK,eAAL,GAAuB,CAAvB,CADtB;AAExB,QAAA,QAAQ,EAAE,CAAC,KAAK,QAFQ;AAGxB,QAAA,KAAK,EAAE,0BAAS,IAAT,IAAiB,IAAjB,GAAwB,KAAK,OAAL,CAAa,KAAK,QAAL,EAAb;AAHP,OAD1B,CAAA,CADF,EAOG,KAAK,gBAAL,EAPH,CAFF,CADF;AAcD;AA7DH;AAAA;AAAA,sCA+DiB,CAAK;AA/DtB;AAAA;AAAA,EAA+D,qBAA/D,CAAA;;AACS,QAAA,CAAA,WAAA,GAAc,UAAd;AAEA,QAAA,CAAA,SAAA;AACL,EAAA,IAAI,EAAE,sBAAU,MADX;AAEL,EAAA,IAAI,EAAE,sBAAU,MAFX;AAGL,EAAA,MAAM,EAAE,sBAAU,KAAV,CAAgB,C;;AAAA,I;;AAAA,I;;AAAA,I;;AAAA,GAAhB,CAHH;AASL,EAAA,QAAQ,EAAE,sBAAU,SAAV,CAAoB,CAAC,sBAAU,IAAX,EAAiB,sBAAU,MAA3B,CAApB;AATL,GAUF,sBAAU,SAVR;AAaA,QAAA,CAAA,YAAA,sCACF,sBAAU,YADR;AAEL,EAAA,SAAS,EAAE,UAFN;AAGL,EAAA,MAAM,EAAA;AAAA;AAHD;AAIL,EAAA,IAAI,EAAE,CAJD;AAKL,EAAA,QAAQ,EAAE;AALL;AAhBY,QAAQ,GAAA,uBAAA,CAD5B,mBAC4B,CAAA,EAAR,QAAQ,CAAR;eAAA,Q","sourcesContent":["import React, { ReactNode } from 'react';\nimport { observer } from 'mobx-react';\nimport isString from 'lodash/isString';\nimport omit from 'lodash/omit';\nimport PropTypes from 'prop-types';\nimport { TextField, TextFieldProps } from '../text-field/TextField';\nimport { ResizeType, AutoSizeType } from './enum';\nimport calculateNodeHeight from './calculateNodeHeight';\n\nexport interface TextAreaProps extends TextFieldProps {\n  cols?: number;\n  rows?: number;\n  resize?: ResizeType;\n  autoSize?: boolean | AutoSizeType;\n}\n\n@observer\nexport default class TextArea<T extends TextAreaProps> extends TextField<T> {\n  static displayName = 'TextArea';\n\n  static propTypes = {\n    cols: PropTypes.number,\n    rows: PropTypes.number,\n    resize: PropTypes.oneOf([\n      ResizeType.vertical,\n      ResizeType.horizontal,\n      ResizeType.none,\n      ResizeType.both,\n    ]),\n    autoSize: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n    ...TextField.propTypes,\n  };\n\n  static defaultProps = {\n    ...TextField.defaultProps,\n    suffixCls: 'textarea',\n    resize: ResizeType.none,\n    rows: 4,\n    autoSize: false,\n  };\n\n  getOtherProps() {\n    const { resize } = this.props;\n    const otherProps = omit(super.getOtherProps(), ['resize', 'autoSize']);\n    const { style = {} } = otherProps;\n    style.resize = resize;\n    if (resize !== ResizeType.none) {\n      style.transition = 'none';\n    }\n    const { autoSize } = this.props;\n    let textAreaStyles = {};\n    if (autoSize) {\n      const { minRows, maxRows } = autoSize as AutoSizeType;\n      otherProps.rows = minRows;\n      if (this.element) {\n        textAreaStyles = calculateNodeHeight(this.element, true, minRows, maxRows);\n      }\n    }\n    otherProps.style = { ...style, ...textAreaStyles };\n    return otherProps;\n  }\n\n  renderWrapper(): ReactNode {\n    const text = this.getTextNode();\n    return (\n      <div key=\"wrapper\" {...this.getWrapperProps()}>\n        {this.renderPlaceHolder()}\n        <label>\n          <textarea\n            {...this.getOtherProps()}\n            placeholder={this.hasFloatLabel ? undefined : this.getPlaceholders()[0]}\n            readOnly={!this.editable}\n            value={isString(text) ? text : this.getText(this.getValue())}\n          />\n          {this.renderFloatLabel()}\n        </label>\n      </div>\n    );\n  }\n\n  handleEnterDown() {}\n}\n"]}