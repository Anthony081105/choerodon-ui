54fd7216a25e6c9ba7962da1ad52914a
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _noop = _interopRequireDefault(require("lodash/noop"));

var _Pager = _interopRequireDefault(require("./Pager"));

var _Options = _interopRequireDefault(require("./Options"));

var _KeyCode = _interopRequireDefault(require("./KeyCode"));

var _zh_CN = _interopRequireDefault(require("./locale/zh_CN"));

function _createSuper(Derived) {
  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  return function () {
    var Super = (0, _getPrototypeOf2["default"])(Derived),
        result;

    if (isNativeReflectConstruct()) {
      var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return (0, _possibleConstructorReturn2["default"])(this, result);
  };
}

function isInteger(value) {
  return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;
}

function defaultItemRender(page, type, element) {
  return element;
}

var Pagination =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(Pagination, _Component);

  var _super = _createSuper(Pagination);

  function Pagination(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, Pagination);
    _this = _super.call(this, props);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "savePaginationNode", function (node) {
      _this.paginationNode = node;
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "calculatePage", function (p) {
      var pageSize = p;

      if (typeof pageSize === 'undefined') {
        pageSize = _this.state.pageSize;
      }

      return Math.floor((_this.props.total - 1) / pageSize) + 1;
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "isValid", function (page) {
      return isInteger(page) && page >= 1 && page !== _this.state.current;
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "handleKeyDown", function (e) {
      if (e.keyCode === _KeyCode["default"].ARROW_UP || e.keyCode === _KeyCode["default"].ARROW_DOWN) {
        e.preventDefault();
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "handleKeyUp", function (e) {
      var inputValue = e.target.value;
      var currentInputValue = _this.state.currentInputValue;
      var value;

      if (inputValue === '') {
        value = inputValue;
      } else if (isNaN(Number(inputValue))) {
        value = currentInputValue;
      } else {
        value = Number(inputValue);
      }

      if (value !== currentInputValue) {
        _this.setState({
          currentInputValue: value
        });
      }

      if (e.keyCode === _KeyCode["default"].ENTER) {
        _this.handleChange(value);
      } else if (e.keyCode === _KeyCode["default"].ARROW_UP) {
        _this.handleChange(value - 1);
      } else if (e.keyCode === _KeyCode["default"].ARROW_DOWN) {
        _this.handleChange(value + 1);
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "changePageSize", function (size) {
      var current = _this.state.current;

      var newCurrent = _this.calculatePage(size);

      current = current > newCurrent ? newCurrent : current;

      if (typeof size === 'number') {
        if (!('pageSize' in _this.props)) {
          _this.setState({
            pageSize: size
          });
        }

        if (!('current' in _this.props)) {
          _this.setState({
            current: current,
            currentInputValue: current
          });
        }
      }

      _this.props.onShowSizeChange(current, size);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "handleChange", function (p) {
      var page = p;

      if (_this.isValid(page)) {
        if (page > _this.calculatePage()) {
          page = _this.calculatePage();
        }

        if (!('current' in _this.props)) {
          _this.setState({
            current: page,
            currentInputValue: page
          });
        }

        var pageSize = _this.state.pageSize;

        _this.props.onChange(page, pageSize);

        return page;
      }

      return _this.state.current;
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "first", function () {
      if (_this.hasPrev()) {
        _this.handleChange(1);
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "last", function () {
      if (_this.hasNext()) {
        _this.handleChange(_this.calculatePage());
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "prev", function () {
      if (_this.hasPrev()) {
        _this.handleChange(_this.state.current - 1);
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "next", function () {
      if (_this.hasNext()) {
        _this.handleChange(_this.state.current + 1);
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "jumpPrev", function () {
      _this.handleChange(_this.getJumpPrevPage());
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "jumpNext", function () {
      _this.handleChange(_this.getJumpNextPage());
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "hasPrev", function () {
      return _this.state.current > 1;
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "hasNext", function () {
      return _this.state.current < _this.calculatePage();
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "runIfEnter", function (event, callback) {
      if (event.key === 'Enter' || event.charCode === 13) {
        for (var _len = arguments.length, restParams = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          restParams[_key - 2] = arguments[_key];
        }

        callback.apply(void 0, restParams);
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "runIfEnterFirst", function (e) {
      _this.runIfEnter(e, _this.first);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "runIfEnterLast", function (e) {
      _this.runIfEnter(e, _this.last);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "runIfEnterPrev", function (e) {
      _this.runIfEnter(e, _this.prev);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "runIfEnterNext", function (e) {
      _this.runIfEnter(e, _this.next);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "runIfEnterJumpPrev", function (e) {
      _this.runIfEnter(e, _this.jumpPrev);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "runIfEnterJumpNext", function (e) {
      _this.runIfEnter(e, _this.jumpNext);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "handleGoTO", function (e) {
      if (e.keyCode === _KeyCode["default"].ENTER || e.type === 'click') {
        _this.handleChange(_this.state.currentInputValue);
      }
    });
    var hasOnChange = props.onChange !== _noop["default"];
    var hasCurrent = 'current' in props;

    if (hasCurrent && !hasOnChange) {
      console.warn('Warning: You provided a `current` prop to a Pagination component without an `onChange` handler. This will render a read-only component.'); // eslint-disable-line
    }

    var _current = props.defaultCurrent;

    if ('current' in props) {
      _current = props.current;
    }

    var _pageSize = props.defaultPageSize;

    if ('pageSize' in props) {
      _pageSize = props.pageSize;
    }

    _this.state = {
      current: _current,
      currentInputValue: _current,
      pageSize: _pageSize
    };
    return _this;
  }

  (0, _createClass2["default"])(Pagination, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if ('current' in nextProps) {
        this.setState({
          current: nextProps.current,
          currentInputValue: nextProps.current
        });
      }

      if ('pageSize' in nextProps) {
        var newState = {};
        var current = this.state.current;
        var newCurrent = this.calculatePage(nextProps.pageSize);
        current = current > newCurrent ? newCurrent : current;

        if (!('current' in nextProps)) {
          newState.current = current;
          newState.currentInputValue = current;
        }

        newState.pageSize = nextProps.pageSize;
        this.setState(newState);
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      // When current page change, fix focused style of prev item
      var prefixCls = this.props.prefixCls;

      if (prevState.current !== this.state.current && this.paginationNode) {
        var lastCurrentNode = this.paginationNode.querySelector(".".concat(prefixCls, "-item-").concat(prevState.current));

        if (lastCurrentNode && document.activeElement === lastCurrentNode) {
          lastCurrentNode.blur();
        }
      }
    }
  }, {
    key: "getJumpPrevPage",
    value: function getJumpPrevPage() {
      return Math.max(1, this.state.current - (this.props.showLessItems ? 3 : 5));
    }
  }, {
    key: "getJumpNextPage",
    value: function getJumpNextPage() {
      return Math.min(this.calculatePage(), this.state.current + (this.props.showLessItems ? 3 : 5));
    }
  }, {
    key: "getJumpPrevPage",
    value: function getJumpPrevPage() {
      return Math.max(1, this.state.current - (this.props.showLessItems ? 3 : 5));
    }
  }, {
    key: "getJumpNextPage",
    value: function getJumpNextPage() {
      return Math.min(this.calculatePage(), this.state.current + (this.props.showLessItems ? 3 : 5));
    }
  }, {
    key: "render",
    value: function render() {
      // When hideOnSinglePage is true and there is only 1 page, hide the pager
      if (this.props.hideOnSinglePage === true && this.props.total <= this.state.pageSize) {
        return null;
      }

      var props = this.props;
      var locale = props.locale;
      var prefixCls = props.prefixCls;
      var allPages = this.calculatePage();
      var pagerList = [];
      var jumpPrev = null;
      var jumpNext = null;
      var firstPager = null;
      var lastPager = null;
      var gotoButton = null;
      var goButton = props.showQuickJumper && props.showQuickJumper.goButton;
      var pageBufferSize = props.showLessItems ? 1 : 2;
      var _this$state = this.state,
          current = _this$state.current,
          pageSize = _this$state.pageSize;
      var prevPage = current - 1 > 0 ? current - 1 : 0;
      var nextPage = current + 1 < allPages ? current + 1 : allPages;

      if (props.simple) {
        if (goButton) {
          if (typeof goButton === 'boolean') {
            gotoButton = _react["default"].createElement("button", {
              type: "button",
              onClick: this.handleGoTO,
              onKeyUp: this.handleGoTO
            }, locale.jump_to_confirm);
          } else {
            gotoButton = _react["default"].createElement("span", {
              onClick: this.handleGoTO,
              onKeyUp: this.handleGoTO
            }, goButton);
          }

          gotoButton = _react["default"].createElement("li", {
            title: props.showTitle ? "".concat(locale.jump_to).concat(this.state.current, "/").concat(allPages) : null,
            className: "".concat(prefixCls, "-simple-pager")
          }, gotoButton);
        }

        return _react["default"].createElement("ul", {
          className: "".concat(prefixCls, " ").concat(prefixCls, "-simple ").concat(props.className),
          style: props.style
        }, _react["default"].createElement("li", {
          title: props.showTitle ? locale.prev_page : null,
          onClick: this.prev,
          tabIndex: this.hasPrev() ? 0 : null,
          onKeyPress: this.runIfEnterPrev,
          className: "".concat(this.hasPrev() ? '' : "".concat(prefixCls, "-disabled"), " ").concat(prefixCls, "-prev"),
          "aria-disabled": !this.hasPrev()
        }, props.itemRender(prevPage, 'prev', _react["default"].createElement("a", {
          className: "".concat(prefixCls, "-item-link")
        }), !this.hasPrev(), 'small')), _react["default"].createElement("li", {
          title: props.showTitle ? "".concat(this.state.current, "/").concat(allPages) : null,
          className: "".concat(prefixCls, "-simple-pager")
        }, _react["default"].createElement("input", {
          type: "text",
          value: this.state.currentInputValue,
          onKeyDown: this.handleKeyDown,
          onKeyUp: this.handleKeyUp,
          onChange: this.handleKeyUp,
          size: "3"
        }), _react["default"].createElement("span", {
          className: "".concat(prefixCls, "-slash")
        }, "\uFF0F"), allPages), _react["default"].createElement("li", {
          title: props.showTitle ? locale.next_page : null,
          onClick: this.next,
          tabIndex: this.hasPrev() ? 0 : null,
          onKeyPress: this.runIfEnterNext,
          className: "".concat(this.hasNext() ? '' : "".concat(prefixCls, "-disabled"), " ").concat(prefixCls, "-next"),
          "aria-disabled": !this.hasNext()
        }, props.itemRender(nextPage, 'next', _react["default"].createElement("a", {
          className: "".concat(prefixCls, "-item-link")
        }), !this.hasNext(), 'small')), gotoButton);
      }

      if (allPages <= 5 + pageBufferSize * 2) {
        for (var i = 1; i <= allPages; i++) {
          var active = this.state.current === i;
          pagerList.push(_react["default"].createElement(_Pager["default"], {
            size: props.size,
            locale: locale,
            rootPrefixCls: prefixCls,
            onClick: this.handleChange,
            onKeyPress: this.runIfEnter,
            key: i,
            page: i,
            active: active,
            showTitle: props.showTitle,
            itemRender: props.itemRender
          }));
        }
      } else {
        var prevItemTitle = props.showLessItems ? locale.prev_3 : locale.prev_5;
        var nextItemTitle = props.showLessItems ? locale.next_3 : locale.next_5;

        if (props.showPrevNextJumpers) {
          jumpPrev = _react["default"].createElement("li", {
            title: props.showTitle ? prevItemTitle : null,
            key: "prev",
            onClick: this.jumpPrev,
            tabIndex: "0",
            onKeyPress: this.runIfEnterJumpPrev,
            className: "".concat(prefixCls, "-jump-prev")
          }, props.itemRender(this.getJumpPrevPage(), 'jump-prev', _react["default"].createElement("a", {
            className: "".concat(prefixCls, "-item-link")
          }, "\u2022\u2022\u2022"), props.size));
          jumpNext = _react["default"].createElement("li", {
            title: props.showTitle ? nextItemTitle : null,
            key: "next",
            tabIndex: "0",
            onClick: this.jumpNext,
            onKeyPress: this.runIfEnterJumpNext,
            className: "".concat(prefixCls, "-jump-next")
          }, props.itemRender(this.getJumpNextPage(), 'jump-next', _react["default"].createElement("a", {
            className: "".concat(prefixCls, "-item-link")
          }, "\u2022\u2022\u2022"), props.size));
        }

        lastPager = _react["default"].createElement(_Pager["default"], {
          size: props.size,
          locale: props.locale,
          last: true,
          rootPrefixCls: prefixCls,
          onClick: this.handleChange,
          onKeyPress: this.runIfEnter,
          key: allPages,
          page: allPages,
          active: false,
          showTitle: props.showTitle,
          itemRender: props.itemRender
        });
        firstPager = _react["default"].createElement(_Pager["default"], {
          size: props.size,
          locale: props.locale,
          rootPrefixCls: prefixCls,
          onClick: this.handleChange,
          onKeyPress: this.runIfEnter,
          key: 1,
          page: 1,
          active: false,
          showTitle: props.showTitle,
          itemRender: props.itemRender
        });
        var left = Math.max(1, current - pageBufferSize);
        var right = Math.min(current + pageBufferSize, allPages);

        if (current - 1 <= pageBufferSize) {
          right = 1 + pageBufferSize * 2;
        }

        if (allPages - current <= pageBufferSize) {
          left = allPages - pageBufferSize * 2;
        }

        for (var _i = left; _i <= right; _i++) {
          var _active = current === _i;

          pagerList.push(_react["default"].createElement(_Pager["default"], {
            size: props.size,
            locale: props.locale,
            rootPrefixCls: prefixCls,
            onClick: this.handleChange,
            onKeyPress: this.runIfEnter,
            key: _i,
            page: _i,
            active: _active,
            showTitle: props.showTitle,
            itemRender: props.itemRender
          }));
        }

        if (current - 1 >= pageBufferSize * 2 && current !== 1 + 2) {
          pagerList[0] = (0, _react.cloneElement)(pagerList[0], {
            className: "".concat(prefixCls, "-item-after-jump-prev")
          });
          pagerList.unshift(jumpPrev);
        }

        if (allPages - current >= pageBufferSize * 2 && current !== allPages - 2) {
          pagerList[pagerList.length - 1] = (0, _react.cloneElement)(pagerList[pagerList.length - 1], {
            className: "".concat(prefixCls, "-item-before-jump-next")
          });
          pagerList.push(jumpNext);
        }

        if (left !== 1) {
          pagerList.unshift(firstPager);
        }

        if (right !== allPages) {
          pagerList.push(lastPager);
        }
      }

      var totalText = null;

      if (props.showTotal) {
        totalText = _react["default"].createElement("li", {
          className: "".concat(prefixCls, "-total-text")
        }, props.showTotal(props.total, [(current - 1) * pageSize + 1, current * pageSize > props.total ? props.total : current * pageSize]));
      }

      if (props.tiny) {
        var fistDisabled = !this.hasPrev();
        var lastDisabled = !this.hasNext();
        firstPager = _react["default"].createElement("li", {
          title: props.showTitle ? locale.first_page : null,
          onClick: this.first,
          tabIndex: fistDisabled ? null : 0,
          onKeyPress: this.runIfEnterFirst,
          className: "".concat(!fistDisabled ? '' : "".concat(prefixCls, "-disabled"), " ").concat(prefixCls, "-first"),
          "aria-disabled": fistDisabled
        }, props.itemRender(1, 'first', _react["default"].createElement("a", {
          className: "".concat(prefixCls, "-item-link")
        }), fistDisabled, props.size));
        lastPager = _react["default"].createElement("li", {
          title: props.showTitle ? locale.last_page : null,
          onClick: this.last,
          tabIndex: lastDisabled ? null : 0,
          onKeyPress: this.runIfEnterLast,
          className: "".concat(!lastDisabled ? '' : "".concat(prefixCls, "-disabled"), " ").concat(prefixCls, "-last"),
          "aria-disabled": lastDisabled
        }, props.itemRender(allPages, 'last', _react["default"].createElement("a", {
          className: "".concat(prefixCls, "-item-link")
        }), lastDisabled, props.size));
      }

      var prevDisabled = !this.hasPrev();
      var nextDisabled = !this.hasNext();

      var sizeChanger = _react["default"].createElement(_Options["default"], {
        locale: props.locale,
        rootPrefixCls: prefixCls,
        selectComponentClass: props.selectComponentClass,
        selectPrefixCls: props.selectPrefixCls,
        changeSize: this.props.showSizeChanger ? this.changePageSize : null,
        current: this.state.current,
        pageSize: this.state.pageSize,
        pageSizeOptions: this.props.pageSizeOptions,
        quickGo: this.props.showQuickJumper ? this.handleChange : null,
        goButton: goButton,
        buildOptionText: props.sizeChangerOptionText,
        changeSizeLabel: this.props.showSizeChangerLabel
      });

      var classString = (0, _classnames["default"])(prefixCls, props.className, (0, _defineProperty2["default"])({}, "".concat(prefixCls, "-tiny"), props.tiny));
      return _react["default"].createElement("ul", {
        className: classString,
        style: props.style,
        unselectable: "unselectable",
        ref: this.savePaginationNode
      }, props.tiny && sizeChanger, totalText, props.tiny && firstPager, _react["default"].createElement("li", {
        title: props.showTitle ? locale.prev_page : null,
        onClick: this.prev,
        tabIndex: prevDisabled ? null : 0,
        onKeyPress: this.runIfEnterPrev,
        className: "".concat(!prevDisabled ? '' : "".concat(prefixCls, "-disabled"), " ").concat(prefixCls, "-prev"),
        "aria-disabled": prevDisabled
      }, props.itemRender(prevPage, 'prev', _react["default"].createElement("a", {
        className: "".concat(prefixCls, "-item-link")
      }), prevDisabled, props.size)), !props.tiny && pagerList, _react["default"].createElement("li", {
        title: props.showTitle ? locale.next_page : null,
        onClick: this.next,
        tabIndex: nextDisabled ? null : 0,
        onKeyPress: this.runIfEnterNext,
        className: "".concat(!nextDisabled ? '' : "".concat(prefixCls, "-disabled"), " ").concat(prefixCls, "-next"),
        "aria-disabled": nextDisabled
      }, props.itemRender(nextPage, 'next', _react["default"].createElement("a", {
        className: "".concat(prefixCls, "-item-link")
      }), nextDisabled, props.size)), props.tiny ? lastPager : sizeChanger);
    }
  }]);
  return Pagination;
}(_react.Component);

exports["default"] = Pagination;
(0, _defineProperty2["default"])(Pagination, "propTypes", {
  prefixCls: _propTypes["default"].string,
  current: _propTypes["default"].number,
  defaultCurrent: _propTypes["default"].number,
  total: _propTypes["default"].number,
  pageSize: _propTypes["default"].number,
  defaultPageSize: _propTypes["default"].number,
  onChange: _propTypes["default"].func,
  hideOnSinglePage: _propTypes["default"].bool,
  showSizeChanger: _propTypes["default"].bool,
  showLessItems: _propTypes["default"].bool,
  onShowSizeChange: _propTypes["default"].func,
  selectComponentClass: _propTypes["default"].func,
  showPrevNextJumpers: _propTypes["default"].bool,
  showQuickJumper: _propTypes["default"].oneOfType([_propTypes["default"].bool, _propTypes["default"].object]),
  showTitle: _propTypes["default"].bool,
  pageSizeOptions: _propTypes["default"].arrayOf(_propTypes["default"].string),
  showTotal: _propTypes["default"].func,
  locale: _propTypes["default"].object,
  style: _propTypes["default"].object,
  itemRender: _propTypes["default"].func,
  tiny: _propTypes["default"].bool
});
(0, _defineProperty2["default"])(Pagination, "defaultProps", {
  defaultCurrent: 1,
  total: 0,
  defaultPageSize: 10,
  onChange: _noop["default"],
  className: '',
  selectPrefixCls: 'rc-select',
  prefixCls: 'rc-pagination',
  selectComponentClass: null,
  hideOnSinglePage: false,
  showPrevNextJumpers: true,
  showQuickJumper: false,
  showSizeChanger: false,
  showLessItems: false,
  showTitle: true,
  onShowSizeChange: _noop["default"],
  locale: _zh_CN["default"],
  style: {},
  itemRender: defaultItemRender
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlBhZ2luYXRpb24uanN4Il0sIm5hbWVzIjpbImlzSW50ZWdlciIsInZhbHVlIiwiaXNGaW5pdGUiLCJNYXRoIiwiZmxvb3IiLCJkZWZhdWx0SXRlbVJlbmRlciIsInBhZ2UiLCJ0eXBlIiwiZWxlbWVudCIsIlBhZ2luYXRpb24iLCJwcm9wcyIsIm5vZGUiLCJwYWdpbmF0aW9uTm9kZSIsInAiLCJwYWdlU2l6ZSIsInN0YXRlIiwidG90YWwiLCJjdXJyZW50IiwiZSIsImtleUNvZGUiLCJLRVlDT0RFIiwiQVJST1dfVVAiLCJBUlJPV19ET1dOIiwicHJldmVudERlZmF1bHQiLCJpbnB1dFZhbHVlIiwidGFyZ2V0IiwiY3VycmVudElucHV0VmFsdWUiLCJpc05hTiIsIk51bWJlciIsInNldFN0YXRlIiwiRU5URVIiLCJoYW5kbGVDaGFuZ2UiLCJzaXplIiwibmV3Q3VycmVudCIsImNhbGN1bGF0ZVBhZ2UiLCJvblNob3dTaXplQ2hhbmdlIiwiaXNWYWxpZCIsIm9uQ2hhbmdlIiwiaGFzUHJldiIsImhhc05leHQiLCJnZXRKdW1wUHJldlBhZ2UiLCJnZXRKdW1wTmV4dFBhZ2UiLCJldmVudCIsImNhbGxiYWNrIiwia2V5IiwiY2hhckNvZGUiLCJyZXN0UGFyYW1zIiwicnVuSWZFbnRlciIsImZpcnN0IiwibGFzdCIsInByZXYiLCJuZXh0IiwianVtcFByZXYiLCJqdW1wTmV4dCIsImhhc09uQ2hhbmdlIiwibm9vcCIsImhhc0N1cnJlbnQiLCJjb25zb2xlIiwid2FybiIsImRlZmF1bHRDdXJyZW50IiwiZGVmYXVsdFBhZ2VTaXplIiwibmV4dFByb3BzIiwibmV3U3RhdGUiLCJwcmV2UHJvcHMiLCJwcmV2U3RhdGUiLCJwcmVmaXhDbHMiLCJsYXN0Q3VycmVudE5vZGUiLCJxdWVyeVNlbGVjdG9yIiwiZG9jdW1lbnQiLCJhY3RpdmVFbGVtZW50IiwiYmx1ciIsIm1heCIsInNob3dMZXNzSXRlbXMiLCJtaW4iLCJoaWRlT25TaW5nbGVQYWdlIiwibG9jYWxlIiwiYWxsUGFnZXMiLCJwYWdlckxpc3QiLCJmaXJzdFBhZ2VyIiwibGFzdFBhZ2VyIiwiZ290b0J1dHRvbiIsImdvQnV0dG9uIiwic2hvd1F1aWNrSnVtcGVyIiwicGFnZUJ1ZmZlclNpemUiLCJwcmV2UGFnZSIsIm5leHRQYWdlIiwic2ltcGxlIiwiaGFuZGxlR29UTyIsImp1bXBfdG9fY29uZmlybSIsInNob3dUaXRsZSIsImp1bXBfdG8iLCJjbGFzc05hbWUiLCJzdHlsZSIsInByZXZfcGFnZSIsInJ1bklmRW50ZXJQcmV2IiwiaXRlbVJlbmRlciIsImhhbmRsZUtleURvd24iLCJoYW5kbGVLZXlVcCIsIm5leHRfcGFnZSIsInJ1bklmRW50ZXJOZXh0IiwiaSIsImFjdGl2ZSIsInB1c2giLCJwcmV2SXRlbVRpdGxlIiwicHJldl8zIiwicHJldl81IiwibmV4dEl0ZW1UaXRsZSIsIm5leHRfMyIsIm5leHRfNSIsInNob3dQcmV2TmV4dEp1bXBlcnMiLCJydW5JZkVudGVySnVtcFByZXYiLCJydW5JZkVudGVySnVtcE5leHQiLCJsZWZ0IiwicmlnaHQiLCJ1bnNoaWZ0IiwibGVuZ3RoIiwidG90YWxUZXh0Iiwic2hvd1RvdGFsIiwidGlueSIsImZpc3REaXNhYmxlZCIsImxhc3REaXNhYmxlZCIsImZpcnN0X3BhZ2UiLCJydW5JZkVudGVyRmlyc3QiLCJsYXN0X3BhZ2UiLCJydW5JZkVudGVyTGFzdCIsInByZXZEaXNhYmxlZCIsIm5leHREaXNhYmxlZCIsInNpemVDaGFuZ2VyIiwic2VsZWN0Q29tcG9uZW50Q2xhc3MiLCJzZWxlY3RQcmVmaXhDbHMiLCJzaG93U2l6ZUNoYW5nZXIiLCJjaGFuZ2VQYWdlU2l6ZSIsInBhZ2VTaXplT3B0aW9ucyIsInNpemVDaGFuZ2VyT3B0aW9uVGV4dCIsInNob3dTaXplQ2hhbmdlckxhYmVsIiwiY2xhc3NTdHJpbmciLCJzYXZlUGFnaW5hdGlvbk5vZGUiLCJDb21wb25lbnQiLCJQcm9wVHlwZXMiLCJzdHJpbmciLCJudW1iZXIiLCJmdW5jIiwiYm9vbCIsIm9uZU9m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RWtCLGdCQUpVO0FBS3BCb0MsRUFBQUEsU0FBUyxFQUFFLEVBTFM7QUFNcEJzQyxFQUFBQSxlQUFlLEVBQUUsV0FORztBQU9wQmhFLEVBQUFBLFNBQVMsRUFBRSxlQVBTO0FBUXBCK0QsRUFBQUEsb0JBQW9CLEVBQUUsSUFSRjtBQVNwQnRELEVBQUFBLGdCQUFnQixFQUFFLEtBVEU7QUFVcEJtQyxFQUFBQSxtQkFBbUIsRUFBRSxJQVZEO0FBV3BCM0IsRUFBQUEsZUFBZSxFQUFFLEtBWEc7QUFZcEJnRCxFQUFBQSxlQUFlLEVBQUUsS0FaRztBQWFwQjFELEVBQUFBLGFBQWEsRUFBRSxLQWJLO0FBY3BCaUIsRUFBQUEsU0FBUyxFQUFFLElBZFM7QUFlcEJ0RCxFQUFBQSxnQkFBZ0IsRUFBRW9CLGdCQWZFO0FBZ0JwQm9CLEVBQUFBLE1BQU0sRUFBRXVFLGlCQWhCWTtBQWlCcEJ0RCxFQUFBQSxLQUFLLEVBQUUsRUFqQmE7QUFrQnBCRyxFQUFBQSxVQUFVLEVBQUUxRjtBQWxCUSxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IGNsb25lRWxlbWVudCwgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IG5vb3AgZnJvbSAnbG9kYXNoL25vb3AnO1xuaW1wb3J0IFBhZ2VyIGZyb20gJy4vUGFnZXInO1xuaW1wb3J0IE9wdGlvbnMgZnJvbSAnLi9PcHRpb25zJztcbmltcG9ydCBLRVlDT0RFIGZyb20gJy4vS2V5Q29kZSc7XG5pbXBvcnQgTE9DQUxFIGZyb20gJy4vbG9jYWxlL3poX0NOJztcblxuZnVuY3Rpb24gaXNJbnRlZ2VyKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmXG4gICAgaXNGaW5pdGUodmFsdWUpICYmXG4gICAgTWF0aC5mbG9vcih2YWx1ZSkgPT09IHZhbHVlO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0SXRlbVJlbmRlcihwYWdlLCB0eXBlLCBlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYWdpbmF0aW9uIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBwcmVmaXhDbHM6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY3VycmVudDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBkZWZhdWx0Q3VycmVudDogUHJvcFR5cGVzLm51bWJlcixcbiAgICB0b3RhbDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBwYWdlU2l6ZTogUHJvcFR5cGVzLm51bWJlcixcbiAgICBkZWZhdWx0UGFnZVNpemU6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICAgIGhpZGVPblNpbmdsZVBhZ2U6IFByb3BUeXBlcy5ib29sLFxuICAgIHNob3dTaXplQ2hhbmdlcjogUHJvcFR5cGVzLmJvb2wsXG4gICAgc2hvd0xlc3NJdGVtczogUHJvcFR5cGVzLmJvb2wsXG4gICAgb25TaG93U2l6ZUNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgc2VsZWN0Q29tcG9uZW50Q2xhc3M6IFByb3BUeXBlcy5mdW5jLFxuICAgIHNob3dQcmV2TmV4dEp1bXBlcnM6IFByb3BUeXBlcy5ib29sLFxuICAgIHNob3dRdWlja0p1bXBlcjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmJvb2wsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgICBzaG93VGl0bGU6IFByb3BUeXBlcy5ib29sLFxuICAgIHBhZ2VTaXplT3B0aW9uczogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyksXG4gICAgc2hvd1RvdGFsOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBsb2NhbGU6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgaXRlbVJlbmRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgdGlueTogUHJvcFR5cGVzLmJvb2wsXG4gIH07XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBkZWZhdWx0Q3VycmVudDogMSxcbiAgICB0b3RhbDogMCxcbiAgICBkZWZhdWx0UGFnZVNpemU6IDEwLFxuICAgIG9uQ2hhbmdlOiBub29wLFxuICAgIGNsYXNzTmFtZTogJycsXG4gICAgc2VsZWN0UHJlZml4Q2xzOiAncmMtc2VsZWN0JyxcbiAgICBwcmVmaXhDbHM6ICdyYy1wYWdpbmF0aW9uJyxcbiAgICBzZWxlY3RDb21wb25lbnRDbGFzczogbnVsbCxcbiAgICBoaWRlT25TaW5nbGVQYWdlOiBmYWxzZSxcbiAgICBzaG93UHJldk5leHRKdW1wZXJzOiB0cnVlLFxuICAgIHNob3dRdWlja0p1bXBlcjogZmFsc2UsXG4gICAgc2hvd1NpemVDaGFuZ2VyOiBmYWxzZSxcbiAgICBzaG93TGVzc0l0ZW1zOiBmYWxzZSxcbiAgICBzaG93VGl0bGU6IHRydWUsXG4gICAgb25TaG93U2l6ZUNoYW5nZTogbm9vcCxcbiAgICBsb2NhbGU6IExPQ0FMRSxcbiAgICBzdHlsZToge30sXG4gICAgaXRlbVJlbmRlcjogZGVmYXVsdEl0ZW1SZW5kZXIsXG4gIH07XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICBjb25zdCBoYXNPbkNoYW5nZSA9IHByb3BzLm9uQ2hhbmdlICE9PSBub29wO1xuICAgIGNvbnN0IGhhc0N1cnJlbnQgPSAoJ2N1cnJlbnQnIGluIHByb3BzKTtcbiAgICBpZiAoaGFzQ3VycmVudCAmJiAhaGFzT25DaGFuZ2UpIHtcbiAgICAgIGNvbnNvbGUud2FybignV2FybmluZzogWW91IHByb3ZpZGVkIGEgYGN1cnJlbnRgIHByb3AgdG8gYSBQYWdpbmF0aW9uIGNvbXBvbmVudCB3aXRob3V0IGFuIGBvbkNoYW5nZWAgaGFuZGxlci4gVGhpcyB3aWxsIHJlbmRlciBhIHJlYWQtb25seSBjb21wb25lbnQuJyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICB9XG5cbiAgICBsZXQgY3VycmVudCA9IHByb3BzLmRlZmF1bHRDdXJyZW50O1xuICAgIGlmICgnY3VycmVudCcgaW4gcHJvcHMpIHtcbiAgICAgIGN1cnJlbnQgPSBwcm9wcy5jdXJyZW50O1xuICAgIH1cblxuICAgIGxldCBwYWdlU2l6ZSA9IHByb3BzLmRlZmF1bHRQYWdlU2l6ZTtcbiAgICBpZiAoJ3BhZ2VTaXplJyBpbiBwcm9wcykge1xuICAgICAgcGFnZVNpemUgPSBwcm9wcy5wYWdlU2l6ZTtcbiAgICB9XG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgY3VycmVudCxcbiAgICAgIGN1cnJlbnRJbnB1dFZhbHVlOiBjdXJyZW50LFxuICAgICAgcGFnZVNpemUsXG4gICAgfTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgaWYgKCdjdXJyZW50JyBpbiBuZXh0UHJvcHMpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBjdXJyZW50OiBuZXh0UHJvcHMuY3VycmVudCxcbiAgICAgICAgY3VycmVudElucHV0VmFsdWU6IG5leHRQcm9wcy5jdXJyZW50LFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKCdwYWdlU2l6ZScgaW4gbmV4dFByb3BzKSB7XG4gICAgICBjb25zdCBuZXdTdGF0ZSA9IHt9O1xuICAgICAgbGV0IGN1cnJlbnQgPSB0aGlzLnN0YXRlLmN1cnJlbnQ7XG4gICAgICBjb25zdCBuZXdDdXJyZW50ID0gdGhpcy5jYWxjdWxhdGVQYWdlKG5leHRQcm9wcy5wYWdlU2l6ZSk7XG4gICAgICBjdXJyZW50ID0gY3VycmVudCA+IG5ld0N1cnJlbnQgPyBuZXdDdXJyZW50IDogY3VycmVudDtcbiAgICAgIGlmICghKCdjdXJyZW50JyBpbiBuZXh0UHJvcHMpKSB7XG4gICAgICAgIG5ld1N0YXRlLmN1cnJlbnQgPSBjdXJyZW50O1xuICAgICAgICBuZXdTdGF0ZS5jdXJyZW50SW5wdXRWYWx1ZSA9IGN1cnJlbnQ7XG4gICAgICB9XG4gICAgICBuZXdTdGF0ZS5wYWdlU2l6ZSA9IG5leHRQcm9wcy5wYWdlU2l6ZTtcbiAgICAgIHRoaXMuc2V0U3RhdGUobmV3U3RhdGUpO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgIC8vIFdoZW4gY3VycmVudCBwYWdlIGNoYW5nZSwgZml4IGZvY3VzZWQgc3R5bGUgb2YgcHJldiBpdGVtXG4gICAgY29uc3QgeyBwcmVmaXhDbHMgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKHByZXZTdGF0ZS5jdXJyZW50ICE9PSB0aGlzLnN0YXRlLmN1cnJlbnQgJiYgdGhpcy5wYWdpbmF0aW9uTm9kZSkge1xuICAgICAgY29uc3QgbGFzdEN1cnJlbnROb2RlID0gdGhpcy5wYWdpbmF0aW9uTm9kZS5xdWVyeVNlbGVjdG9yKFxuICAgICAgICBgLiR7cHJlZml4Q2xzfS1pdGVtLSR7cHJldlN0YXRlLmN1cnJlbnR9YCxcbiAgICAgICk7XG4gICAgICBpZiAobGFzdEN1cnJlbnROb2RlICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGxhc3RDdXJyZW50Tm9kZSkge1xuICAgICAgICBsYXN0Q3VycmVudE5vZGUuYmx1cigpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdldEp1bXBQcmV2UGFnZSgpIHtcbiAgICByZXR1cm4gTWF0aC5tYXgoMSwgdGhpcy5zdGF0ZS5jdXJyZW50IC0gKHRoaXMucHJvcHMuc2hvd0xlc3NJdGVtcyA/IDMgOiA1KSk7XG4gIH1cblxuICBnZXRKdW1wTmV4dFBhZ2UoKSB7XG4gICAgcmV0dXJuIE1hdGgubWluKHRoaXMuY2FsY3VsYXRlUGFnZSgpLCB0aGlzLnN0YXRlLmN1cnJlbnQgKyAodGhpcy5wcm9wcy5zaG93TGVzc0l0ZW1zID8gMyA6IDUpKTtcbiAgfVxuXG4gIHNhdmVQYWdpbmF0aW9uTm9kZSA9IChub2RlKSA9PiB7XG4gICAgdGhpcy5wYWdpbmF0aW9uTm9kZSA9IG5vZGU7XG4gIH07XG5cbiAgY2FsY3VsYXRlUGFnZSA9IChwKSA9PiB7XG4gICAgbGV0IHBhZ2VTaXplID0gcDtcbiAgICBpZiAodHlwZW9mIHBhZ2VTaXplID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcGFnZVNpemUgPSB0aGlzLnN0YXRlLnBhZ2VTaXplO1xuICAgIH1cbiAgICByZXR1cm4gTWF0aC5mbG9vcigodGhpcy5wcm9wcy50b3RhbCAtIDEpIC8gcGFnZVNpemUpICsgMTtcbiAgfTtcblxuICBpc1ZhbGlkID0gKHBhZ2UpID0+IHtcbiAgICByZXR1cm4gaXNJbnRlZ2VyKHBhZ2UpICYmIHBhZ2UgPj0gMSAmJiBwYWdlICE9PSB0aGlzLnN0YXRlLmN1cnJlbnQ7XG4gIH07XG5cbiAgaGFuZGxlS2V5RG93biA9IChlKSA9PiB7XG4gICAgaWYgKGUua2V5Q29kZSA9PT0gS0VZQ09ERS5BUlJPV19VUCB8fCBlLmtleUNvZGUgPT09IEtFWUNPREUuQVJST1dfRE9XTikge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfTtcblxuICBoYW5kbGVLZXlVcCA9IChlKSA9PiB7XG4gICAgY29uc3QgaW5wdXRWYWx1ZSA9IGUudGFyZ2V0LnZhbHVlO1xuICAgIGNvbnN0IGN1cnJlbnRJbnB1dFZhbHVlID0gdGhpcy5zdGF0ZS5jdXJyZW50SW5wdXRWYWx1ZTtcbiAgICBsZXQgdmFsdWU7XG5cbiAgICBpZiAoaW5wdXRWYWx1ZSA9PT0gJycpIHtcbiAgICAgIHZhbHVlID0gaW5wdXRWYWx1ZTtcbiAgICB9IGVsc2UgaWYgKGlzTmFOKE51bWJlcihpbnB1dFZhbHVlKSkpIHtcbiAgICAgIHZhbHVlID0gY3VycmVudElucHV0VmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlID0gTnVtYmVyKGlucHV0VmFsdWUpO1xuICAgIH1cblxuICAgIGlmICh2YWx1ZSAhPT0gY3VycmVudElucHV0VmFsdWUpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBjdXJyZW50SW5wdXRWYWx1ZTogdmFsdWUsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoZS5rZXlDb2RlID09PSBLRVlDT0RFLkVOVEVSKSB7XG4gICAgICB0aGlzLmhhbmRsZUNoYW5nZSh2YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChlLmtleUNvZGUgPT09IEtFWUNPREUuQVJST1dfVVApIHtcbiAgICAgIHRoaXMuaGFuZGxlQ2hhbmdlKHZhbHVlIC0gMSk7XG4gICAgfSBlbHNlIGlmIChlLmtleUNvZGUgPT09IEtFWUNPREUuQVJST1dfRE9XTikge1xuICAgICAgdGhpcy5oYW5kbGVDaGFuZ2UodmFsdWUgKyAxKTtcbiAgICB9XG4gIH07XG5cbiAgY2hhbmdlUGFnZVNpemUgPSAoc2l6ZSkgPT4ge1xuICAgIGxldCBjdXJyZW50ID0gdGhpcy5zdGF0ZS5jdXJyZW50O1xuICAgIGNvbnN0IG5ld0N1cnJlbnQgPSB0aGlzLmNhbGN1bGF0ZVBhZ2Uoc2l6ZSk7XG4gICAgY3VycmVudCA9IGN1cnJlbnQgPiBuZXdDdXJyZW50ID8gbmV3Q3VycmVudCA6IGN1cnJlbnQ7XG4gICAgaWYgKHR5cGVvZiBzaXplID09PSAnbnVtYmVyJykge1xuICAgICAgaWYgKCEoJ3BhZ2VTaXplJyBpbiB0aGlzLnByb3BzKSkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBwYWdlU2l6ZTogc2l6ZSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoISgnY3VycmVudCcgaW4gdGhpcy5wcm9wcykpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICBjdXJyZW50SW5wdXRWYWx1ZTogY3VycmVudCxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMucHJvcHMub25TaG93U2l6ZUNoYW5nZShjdXJyZW50LCBzaXplKTtcbiAgfTtcblxuICBoYW5kbGVDaGFuZ2UgPSAocCkgPT4ge1xuICAgIGxldCBwYWdlID0gcDtcbiAgICBpZiAodGhpcy5pc1ZhbGlkKHBhZ2UpKSB7XG4gICAgICBpZiAocGFnZSA+IHRoaXMuY2FsY3VsYXRlUGFnZSgpKSB7XG4gICAgICAgIHBhZ2UgPSB0aGlzLmNhbGN1bGF0ZVBhZ2UoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCEoJ2N1cnJlbnQnIGluIHRoaXMucHJvcHMpKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGN1cnJlbnQ6IHBhZ2UsXG4gICAgICAgICAgY3VycmVudElucHV0VmFsdWU6IHBhZ2UsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBwYWdlU2l6ZSA9IHRoaXMuc3RhdGUucGFnZVNpemU7XG4gICAgICB0aGlzLnByb3BzLm9uQ2hhbmdlKHBhZ2UsIHBhZ2VTaXplKTtcblxuICAgICAgcmV0dXJuIHBhZ2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuY3VycmVudDtcbiAgfTtcblxuICBmaXJzdCA9ICgpID0+IHtcbiAgICBpZiAodGhpcy5oYXNQcmV2KCkpIHtcbiAgICAgIHRoaXMuaGFuZGxlQ2hhbmdlKDEpO1xuICAgIH1cbiAgfTtcblxuICBsYXN0ID0gKCkgPT4ge1xuICAgIGlmICh0aGlzLmhhc05leHQoKSkge1xuICAgICAgdGhpcy5oYW5kbGVDaGFuZ2UodGhpcy5jYWxjdWxhdGVQYWdlKCkpO1xuICAgIH1cbiAgfTtcblxuICBwcmV2ID0gKCkgPT4ge1xuICAgIGlmICh0aGlzLmhhc1ByZXYoKSkge1xuICAgICAgdGhpcy5oYW5kbGVDaGFuZ2UodGhpcy5zdGF0ZS5jdXJyZW50IC0gMSk7XG4gICAgfVxuICB9O1xuXG4gIG5leHQgPSAoKSA9PiB7XG4gICAgaWYgKHRoaXMuaGFzTmV4dCgpKSB7XG4gICAgICB0aGlzLmhhbmRsZUNoYW5nZSh0aGlzLnN0YXRlLmN1cnJlbnQgKyAxKTtcbiAgICB9XG4gIH07XG5cbiAgZ2V0SnVtcFByZXZQYWdlKCkge1xuICAgIHJldHVybiBNYXRoLm1heCgxLCB0aGlzLnN0YXRlLmN1cnJlbnQgLSAodGhpcy5wcm9wcy5zaG93TGVzc0l0ZW1zID8gMyA6IDUpKTtcbiAgfVxuXG4gIGdldEp1bXBOZXh0UGFnZSgpIHtcbiAgICByZXR1cm4gTWF0aC5taW4odGhpcy5jYWxjdWxhdGVQYWdlKCksIHRoaXMuc3RhdGUuY3VycmVudCArICh0aGlzLnByb3BzLnNob3dMZXNzSXRlbXMgPyAzIDogNSkpO1xuICB9XG5cbiAganVtcFByZXYgPSAoKSA9PiB7XG4gICAgdGhpcy5oYW5kbGVDaGFuZ2UodGhpcy5nZXRKdW1wUHJldlBhZ2UoKSk7XG4gIH07XG5cbiAganVtcE5leHQgPSAoKSA9PiB7XG4gICAgdGhpcy5oYW5kbGVDaGFuZ2UodGhpcy5nZXRKdW1wTmV4dFBhZ2UoKSk7XG4gIH07XG5cbiAgaGFzUHJldiA9ICgpID0+IHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5jdXJyZW50ID4gMTtcbiAgfTtcblxuICBoYXNOZXh0ID0gKCkgPT4ge1xuICAgIHJldHVybiB0aGlzLnN0YXRlLmN1cnJlbnQgPCB0aGlzLmNhbGN1bGF0ZVBhZ2UoKTtcbiAgfTtcblxuICBydW5JZkVudGVyID0gKGV2ZW50LCBjYWxsYmFjaywgLi4ucmVzdFBhcmFtcykgPT4ge1xuICAgIGlmIChldmVudC5rZXkgPT09ICdFbnRlcicgfHwgZXZlbnQuY2hhckNvZGUgPT09IDEzKSB7XG4gICAgICBjYWxsYmFjayguLi5yZXN0UGFyYW1zKTtcbiAgICB9XG4gIH07XG5cbiAgcnVuSWZFbnRlckZpcnN0ID0gZSA9PiB7XG4gICAgdGhpcy5ydW5JZkVudGVyKGUsIHRoaXMuZmlyc3QpO1xuICB9O1xuXG4gIHJ1bklmRW50ZXJMYXN0ID0gZSA9PiB7XG4gICAgdGhpcy5ydW5JZkVudGVyKGUsIHRoaXMubGFzdCk7XG4gIH07XG5cbiAgcnVuSWZFbnRlclByZXYgPSBlID0+IHtcbiAgICB0aGlzLnJ1bklmRW50ZXIoZSwgdGhpcy5wcmV2KTtcbiAgfTtcblxuICBydW5JZkVudGVyTmV4dCA9IGUgPT4ge1xuICAgIHRoaXMucnVuSWZFbnRlcihlLCB0aGlzLm5leHQpO1xuICB9O1xuXG4gIHJ1bklmRW50ZXJKdW1wUHJldiA9IGUgPT4ge1xuICAgIHRoaXMucnVuSWZFbnRlcihlLCB0aGlzLmp1bXBQcmV2KTtcbiAgfTtcblxuICBydW5JZkVudGVySnVtcE5leHQgPSBlID0+IHtcbiAgICB0aGlzLnJ1bklmRW50ZXIoZSwgdGhpcy5qdW1wTmV4dCk7XG4gIH07XG5cbiAgaGFuZGxlR29UTyA9IGUgPT4ge1xuICAgIGlmIChlLmtleUNvZGUgPT09IEtFWUNPREUuRU5URVIgfHwgZS50eXBlID09PSAnY2xpY2snKSB7XG4gICAgICB0aGlzLmhhbmRsZUNoYW5nZSh0aGlzLnN0YXRlLmN1cnJlbnRJbnB1dFZhbHVlKTtcbiAgICB9XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIC8vIFdoZW4gaGlkZU9uU2luZ2xlUGFnZSBpcyB0cnVlIGFuZCB0aGVyZSBpcyBvbmx5IDEgcGFnZSwgaGlkZSB0aGUgcGFnZXJcbiAgICBpZiAodGhpcy5wcm9wcy5oaWRlT25TaW5nbGVQYWdlID09PSB0cnVlICYmIHRoaXMucHJvcHMudG90YWwgPD0gdGhpcy5zdGF0ZS5wYWdlU2l6ZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGxvY2FsZSA9IHByb3BzLmxvY2FsZTtcblxuICAgIGNvbnN0IHByZWZpeENscyA9IHByb3BzLnByZWZpeENscztcbiAgICBjb25zdCBhbGxQYWdlcyA9IHRoaXMuY2FsY3VsYXRlUGFnZSgpO1xuICAgIGNvbnN0IHBhZ2VyTGlzdCA9IFtdO1xuICAgIGxldCBqdW1wUHJldiA9IG51bGw7XG4gICAgbGV0IGp1bXBOZXh0ID0gbnVsbDtcbiAgICBsZXQgZmlyc3RQYWdlciA9IG51bGw7XG4gICAgbGV0IGxhc3RQYWdlciA9IG51bGw7XG4gICAgbGV0IGdvdG9CdXR0b24gPSBudWxsO1xuXG4gICAgY29uc3QgZ29CdXR0b24gPSAocHJvcHMuc2hvd1F1aWNrSnVtcGVyICYmIHByb3BzLnNob3dRdWlja0p1bXBlci5nb0J1dHRvbik7XG4gICAgY29uc3QgcGFnZUJ1ZmZlclNpemUgPSBwcm9wcy5zaG93TGVzc0l0ZW1zID8gMSA6IDI7XG4gICAgY29uc3QgeyBjdXJyZW50LCBwYWdlU2l6ZSB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGNvbnN0IHByZXZQYWdlID0gY3VycmVudCAtIDEgPiAwID8gY3VycmVudCAtIDEgOiAwO1xuICAgIGNvbnN0IG5leHRQYWdlID0gY3VycmVudCArIDEgPCBhbGxQYWdlcyA/IGN1cnJlbnQgKyAxIDogYWxsUGFnZXM7XG5cbiAgICBpZiAocHJvcHMuc2ltcGxlKSB7XG4gICAgICBpZiAoZ29CdXR0b24pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBnb0J1dHRvbiA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgZ290b0J1dHRvbiA9IChcbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuaGFuZGxlR29UT31cbiAgICAgICAgICAgICAgb25LZXlVcD17dGhpcy5oYW5kbGVHb1RPfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7bG9jYWxlLmp1bXBfdG9fY29uZmlybX1cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZ290b0J1dHRvbiA9IChcbiAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuaGFuZGxlR29UT31cbiAgICAgICAgICAgICAgb25LZXlVcD17dGhpcy5oYW5kbGVHb1RPfVxuICAgICAgICAgICAgPntnb0J1dHRvbn08L3NwYW4+XG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBnb3RvQnV0dG9uID0gKFxuICAgICAgICAgIDxsaVxuICAgICAgICAgICAgdGl0bGU9e3Byb3BzLnNob3dUaXRsZSA/IGAke2xvY2FsZS5qdW1wX3RvfSR7dGhpcy5zdGF0ZS5jdXJyZW50fS8ke2FsbFBhZ2VzfWAgOiBudWxsfVxuICAgICAgICAgICAgY2xhc3NOYW1lPXtgJHtwcmVmaXhDbHN9LXNpbXBsZS1wYWdlcmB9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2dvdG9CdXR0b259XG4gICAgICAgICAgPC9saT5cbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPHVsIGNsYXNzTmFtZT17YCR7cHJlZml4Q2xzfSAke3ByZWZpeENsc30tc2ltcGxlICR7cHJvcHMuY2xhc3NOYW1lfWB9IHN0eWxlPXtwcm9wcy5zdHlsZX0+XG4gICAgICAgICAgPGxpXG4gICAgICAgICAgICB0aXRsZT17cHJvcHMuc2hvd1RpdGxlID8gbG9jYWxlLnByZXZfcGFnZSA6IG51bGx9XG4gICAgICAgICAgICBvbkNsaWNrPXt0aGlzLnByZXZ9XG4gICAgICAgICAgICB0YWJJbmRleD17dGhpcy5oYXNQcmV2KCkgPyAwIDogbnVsbH1cbiAgICAgICAgICAgIG9uS2V5UHJlc3M9e3RoaXMucnVuSWZFbnRlclByZXZ9XG4gICAgICAgICAgICBjbGFzc05hbWU9e2Ake3RoaXMuaGFzUHJldigpID8gJycgOiBgJHtwcmVmaXhDbHN9LWRpc2FibGVkYH0gJHtwcmVmaXhDbHN9LXByZXZgfVxuICAgICAgICAgICAgYXJpYS1kaXNhYmxlZD17IXRoaXMuaGFzUHJldigpfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtwcm9wcy5pdGVtUmVuZGVyKHByZXZQYWdlLCAncHJldicsIDxhIGNsYXNzTmFtZT17YCR7cHJlZml4Q2xzfS1pdGVtLWxpbmtgfSAvPiwgIXRoaXMuaGFzUHJldigpLCAnc21hbGwnKX1cbiAgICAgICAgICA8L2xpPlxuICAgICAgICAgIDxsaVxuICAgICAgICAgICAgdGl0bGU9e3Byb3BzLnNob3dUaXRsZSA/IGAke3RoaXMuc3RhdGUuY3VycmVudH0vJHthbGxQYWdlc31gIDogbnVsbH1cbiAgICAgICAgICAgIGNsYXNzTmFtZT17YCR7cHJlZml4Q2xzfS1zaW1wbGUtcGFnZXJgfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLmN1cnJlbnRJbnB1dFZhbHVlfVxuICAgICAgICAgICAgICBvbktleURvd249e3RoaXMuaGFuZGxlS2V5RG93bn1cbiAgICAgICAgICAgICAgb25LZXlVcD17dGhpcy5oYW5kbGVLZXlVcH1cbiAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlS2V5VXB9XG4gICAgICAgICAgICAgIHNpemU9XCIzXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9e2Ake3ByZWZpeENsc30tc2xhc2hgfT7vvI88L3NwYW4+XG4gICAgICAgICAgICB7YWxsUGFnZXN9XG4gICAgICAgICAgPC9saT5cbiAgICAgICAgICA8bGlcbiAgICAgICAgICAgIHRpdGxlPXtwcm9wcy5zaG93VGl0bGUgPyBsb2NhbGUubmV4dF9wYWdlIDogbnVsbH1cbiAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMubmV4dH1cbiAgICAgICAgICAgIHRhYkluZGV4PXt0aGlzLmhhc1ByZXYoKSA/IDAgOiBudWxsfVxuICAgICAgICAgICAgb25LZXlQcmVzcz17dGhpcy5ydW5JZkVudGVyTmV4dH1cbiAgICAgICAgICAgIGNsYXNzTmFtZT17YCR7dGhpcy5oYXNOZXh0KCkgPyAnJyA6IGAke3ByZWZpeENsc30tZGlzYWJsZWRgfSAke3ByZWZpeENsc30tbmV4dGB9XG4gICAgICAgICAgICBhcmlhLWRpc2FibGVkPXshdGhpcy5oYXNOZXh0KCl9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3Byb3BzLml0ZW1SZW5kZXIobmV4dFBhZ2UsICduZXh0JywgPGEgY2xhc3NOYW1lPXtgJHtwcmVmaXhDbHN9LWl0ZW0tbGlua2B9IC8+LCAhdGhpcy5oYXNOZXh0KCksICdzbWFsbCcpfVxuICAgICAgICAgIDwvbGk+XG4gICAgICAgICAge2dvdG9CdXR0b259XG4gICAgICAgIDwvdWw+XG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChhbGxQYWdlcyA8PSA1ICsgcGFnZUJ1ZmZlclNpemUgKiAyKSB7XG4gICAgICBmb3IgKGxldCBpID0gMTsgaSA8PSBhbGxQYWdlczsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGFjdGl2ZSA9IHRoaXMuc3RhdGUuY3VycmVudCA9PT0gaTtcbiAgICAgICAgcGFnZXJMaXN0LnB1c2goXG4gICAgICAgICAgPFBhZ2VyXG4gICAgICAgICAgICBzaXplPXtwcm9wcy5zaXplfVxuICAgICAgICAgICAgbG9jYWxlPXtsb2NhbGV9XG4gICAgICAgICAgICByb290UHJlZml4Q2xzPXtwcmVmaXhDbHN9XG4gICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZUNoYW5nZX1cbiAgICAgICAgICAgIG9uS2V5UHJlc3M9e3RoaXMucnVuSWZFbnRlcn1cbiAgICAgICAgICAgIGtleT17aX1cbiAgICAgICAgICAgIHBhZ2U9e2l9XG4gICAgICAgICAgICBhY3RpdmU9e2FjdGl2ZX1cbiAgICAgICAgICAgIHNob3dUaXRsZT17cHJvcHMuc2hvd1RpdGxlfVxuICAgICAgICAgICAgaXRlbVJlbmRlcj17cHJvcHMuaXRlbVJlbmRlcn1cbiAgICAgICAgICAvPixcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgcHJldkl0ZW1UaXRsZSA9IHByb3BzLnNob3dMZXNzSXRlbXMgPyBsb2NhbGUucHJldl8zIDogbG9jYWxlLnByZXZfNTtcbiAgICAgIGNvbnN0IG5leHRJdGVtVGl0bGUgPSBwcm9wcy5zaG93TGVzc0l0ZW1zID8gbG9jYWxlLm5leHRfMyA6IGxvY2FsZS5uZXh0XzU7XG4gICAgICBpZiAocHJvcHMuc2hvd1ByZXZOZXh0SnVtcGVycykge1xuICAgICAgICBqdW1wUHJldiA9IChcbiAgICAgICAgICA8bGlcbiAgICAgICAgICAgIHRpdGxlPXtwcm9wcy5zaG93VGl0bGUgPyBwcmV2SXRlbVRpdGxlIDogbnVsbH1cbiAgICAgICAgICAgIGtleT1cInByZXZcIlxuICAgICAgICAgICAgb25DbGljaz17dGhpcy5qdW1wUHJldn1cbiAgICAgICAgICAgIHRhYkluZGV4PVwiMFwiXG4gICAgICAgICAgICBvbktleVByZXNzPXt0aGlzLnJ1bklmRW50ZXJKdW1wUHJldn1cbiAgICAgICAgICAgIGNsYXNzTmFtZT17YCR7cHJlZml4Q2xzfS1qdW1wLXByZXZgfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtwcm9wcy5pdGVtUmVuZGVyKFxuICAgICAgICAgICAgICB0aGlzLmdldEp1bXBQcmV2UGFnZSgpLCAnanVtcC1wcmV2JywgPGEgY2xhc3NOYW1lPXtgJHtwcmVmaXhDbHN9LWl0ZW0tbGlua2B9PuKAouKAouKAojwvYT4sIHByb3BzLnNpemUsXG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvbGk+XG4gICAgICAgICk7XG4gICAgICAgIGp1bXBOZXh0ID0gKFxuICAgICAgICAgIDxsaVxuICAgICAgICAgICAgdGl0bGU9e3Byb3BzLnNob3dUaXRsZSA/IG5leHRJdGVtVGl0bGUgOiBudWxsfVxuICAgICAgICAgICAga2V5PVwibmV4dFwiXG4gICAgICAgICAgICB0YWJJbmRleD1cIjBcIlxuICAgICAgICAgICAgb25DbGljaz17dGhpcy5qdW1wTmV4dH1cbiAgICAgICAgICAgIG9uS2V5UHJlc3M9e3RoaXMucnVuSWZFbnRlckp1bXBOZXh0fVxuICAgICAgICAgICAgY2xhc3NOYW1lPXtgJHtwcmVmaXhDbHN9LWp1bXAtbmV4dGB9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3Byb3BzLml0ZW1SZW5kZXIoXG4gICAgICAgICAgICAgIHRoaXMuZ2V0SnVtcE5leHRQYWdlKCksICdqdW1wLW5leHQnLCA8YSBjbGFzc05hbWU9e2Ake3ByZWZpeENsc30taXRlbS1saW5rYH0+4oCi4oCi4oCiPC9hPiwgcHJvcHMuc2l6ZSxcbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9saT5cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGxhc3RQYWdlciA9IChcbiAgICAgICAgPFBhZ2VyXG4gICAgICAgICAgc2l6ZT17cHJvcHMuc2l6ZX1cbiAgICAgICAgICBsb2NhbGU9e3Byb3BzLmxvY2FsZX1cbiAgICAgICAgICBsYXN0XG4gICAgICAgICAgcm9vdFByZWZpeENscz17cHJlZml4Q2xzfVxuICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuaGFuZGxlQ2hhbmdlfVxuICAgICAgICAgIG9uS2V5UHJlc3M9e3RoaXMucnVuSWZFbnRlcn1cbiAgICAgICAgICBrZXk9e2FsbFBhZ2VzfVxuICAgICAgICAgIHBhZ2U9e2FsbFBhZ2VzfVxuICAgICAgICAgIGFjdGl2ZT17ZmFsc2V9XG4gICAgICAgICAgc2hvd1RpdGxlPXtwcm9wcy5zaG93VGl0bGV9XG4gICAgICAgICAgaXRlbVJlbmRlcj17cHJvcHMuaXRlbVJlbmRlcn1cbiAgICAgICAgLz5cbiAgICAgICk7XG4gICAgICBmaXJzdFBhZ2VyID0gKFxuICAgICAgICA8UGFnZXJcbiAgICAgICAgICBzaXplPXtwcm9wcy5zaXplfVxuICAgICAgICAgIGxvY2FsZT17cHJvcHMubG9jYWxlfVxuICAgICAgICAgIHJvb3RQcmVmaXhDbHM9e3ByZWZpeENsc31cbiAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZUNoYW5nZX1cbiAgICAgICAgICBvbktleVByZXNzPXt0aGlzLnJ1bklmRW50ZXJ9XG4gICAgICAgICAga2V5PXsxfVxuICAgICAgICAgIHBhZ2U9ezF9XG4gICAgICAgICAgYWN0aXZlPXtmYWxzZX1cbiAgICAgICAgICBzaG93VGl0bGU9e3Byb3BzLnNob3dUaXRsZX1cbiAgICAgICAgICBpdGVtUmVuZGVyPXtwcm9wcy5pdGVtUmVuZGVyfVxuICAgICAgICAvPlxuICAgICAgKTtcblxuICAgICAgbGV0IGxlZnQgPSBNYXRoLm1heCgxLCBjdXJyZW50IC0gcGFnZUJ1ZmZlclNpemUpO1xuICAgICAgbGV0IHJpZ2h0ID0gTWF0aC5taW4oY3VycmVudCArIHBhZ2VCdWZmZXJTaXplLCBhbGxQYWdlcyk7XG5cbiAgICAgIGlmIChjdXJyZW50IC0gMSA8PSBwYWdlQnVmZmVyU2l6ZSkge1xuICAgICAgICByaWdodCA9IDEgKyBwYWdlQnVmZmVyU2l6ZSAqIDI7XG4gICAgICB9XG5cbiAgICAgIGlmIChhbGxQYWdlcyAtIGN1cnJlbnQgPD0gcGFnZUJ1ZmZlclNpemUpIHtcbiAgICAgICAgbGVmdCA9IGFsbFBhZ2VzIC0gcGFnZUJ1ZmZlclNpemUgKiAyO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGxldCBpID0gbGVmdDsgaSA8PSByaWdodDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGFjdGl2ZSA9IGN1cnJlbnQgPT09IGk7XG4gICAgICAgIHBhZ2VyTGlzdC5wdXNoKFxuICAgICAgICAgIDxQYWdlclxuICAgICAgICAgICAgc2l6ZT17cHJvcHMuc2l6ZX1cbiAgICAgICAgICAgIGxvY2FsZT17cHJvcHMubG9jYWxlfVxuICAgICAgICAgICAgcm9vdFByZWZpeENscz17cHJlZml4Q2xzfVxuICAgICAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVDaGFuZ2V9XG4gICAgICAgICAgICBvbktleVByZXNzPXt0aGlzLnJ1bklmRW50ZXJ9XG4gICAgICAgICAgICBrZXk9e2l9XG4gICAgICAgICAgICBwYWdlPXtpfVxuICAgICAgICAgICAgYWN0aXZlPXthY3RpdmV9XG4gICAgICAgICAgICBzaG93VGl0bGU9e3Byb3BzLnNob3dUaXRsZX1cbiAgICAgICAgICAgIGl0ZW1SZW5kZXI9e3Byb3BzLml0ZW1SZW5kZXJ9XG4gICAgICAgICAgLz4sXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjdXJyZW50IC0gMSA+PSBwYWdlQnVmZmVyU2l6ZSAqIDIgJiYgY3VycmVudCAhPT0gMSArIDIpIHtcbiAgICAgICAgcGFnZXJMaXN0WzBdID0gY2xvbmVFbGVtZW50KHBhZ2VyTGlzdFswXSwge1xuICAgICAgICAgIGNsYXNzTmFtZTogYCR7cHJlZml4Q2xzfS1pdGVtLWFmdGVyLWp1bXAtcHJldmAsXG4gICAgICAgIH0pO1xuICAgICAgICBwYWdlckxpc3QudW5zaGlmdChqdW1wUHJldik7XG4gICAgICB9XG4gICAgICBpZiAoYWxsUGFnZXMgLSBjdXJyZW50ID49IHBhZ2VCdWZmZXJTaXplICogMiAmJiBjdXJyZW50ICE9PSBhbGxQYWdlcyAtIDIpIHtcbiAgICAgICAgcGFnZXJMaXN0W3BhZ2VyTGlzdC5sZW5ndGggLSAxXSA9IGNsb25lRWxlbWVudChwYWdlckxpc3RbcGFnZXJMaXN0Lmxlbmd0aCAtIDFdLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBgJHtwcmVmaXhDbHN9LWl0ZW0tYmVmb3JlLWp1bXAtbmV4dGAsXG4gICAgICAgIH0pO1xuICAgICAgICBwYWdlckxpc3QucHVzaChqdW1wTmV4dCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChsZWZ0ICE9PSAxKSB7XG4gICAgICAgIHBhZ2VyTGlzdC51bnNoaWZ0KGZpcnN0UGFnZXIpO1xuICAgICAgfVxuICAgICAgaWYgKHJpZ2h0ICE9PSBhbGxQYWdlcykge1xuICAgICAgICBwYWdlckxpc3QucHVzaChsYXN0UGFnZXIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCB0b3RhbFRleHQgPSBudWxsO1xuXG4gICAgaWYgKHByb3BzLnNob3dUb3RhbCkge1xuICAgICAgdG90YWxUZXh0ID0gKFxuICAgICAgICA8bGkgY2xhc3NOYW1lPXtgJHtwcmVmaXhDbHN9LXRvdGFsLXRleHRgfT5cbiAgICAgICAgICB7cHJvcHMuc2hvd1RvdGFsKFxuICAgICAgICAgICAgcHJvcHMudG90YWwsXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgIChjdXJyZW50IC0gMSkgKiBwYWdlU2l6ZSArIDEsXG4gICAgICAgICAgICAgIGN1cnJlbnQgKiBwYWdlU2l6ZSA+IHByb3BzLnRvdGFsID8gcHJvcHMudG90YWwgOiBjdXJyZW50ICogcGFnZVNpemUsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICl9XG4gICAgICAgIDwvbGk+XG4gICAgICApO1xuICAgIH1cbiAgICBpZiAocHJvcHMudGlueSkge1xuICAgICAgY29uc3QgZmlzdERpc2FibGVkID0gIXRoaXMuaGFzUHJldigpO1xuICAgICAgY29uc3QgbGFzdERpc2FibGVkID0gIXRoaXMuaGFzTmV4dCgpO1xuICAgICAgZmlyc3RQYWdlciA9IChcbiAgICAgICAgPGxpXG4gICAgICAgICAgdGl0bGU9e3Byb3BzLnNob3dUaXRsZSA/IGxvY2FsZS5maXJzdF9wYWdlIDogbnVsbH1cbiAgICAgICAgICBvbkNsaWNrPXt0aGlzLmZpcnN0fVxuICAgICAgICAgIHRhYkluZGV4PXtmaXN0RGlzYWJsZWQgPyBudWxsIDogMH1cbiAgICAgICAgICBvbktleVByZXNzPXt0aGlzLnJ1bklmRW50ZXJGaXJzdH1cbiAgICAgICAgICBjbGFzc05hbWU9e2AkeyFmaXN0RGlzYWJsZWQgPyAnJyA6IGAke3ByZWZpeENsc30tZGlzYWJsZWRgfSAke3ByZWZpeENsc30tZmlyc3RgfVxuICAgICAgICAgIGFyaWEtZGlzYWJsZWQ9e2Zpc3REaXNhYmxlZH1cbiAgICAgICAgPlxuICAgICAgICAgIHtwcm9wcy5pdGVtUmVuZGVyKDEsICdmaXJzdCcsIDxhIGNsYXNzTmFtZT17YCR7cHJlZml4Q2xzfS1pdGVtLWxpbmtgfSAvPiwgZmlzdERpc2FibGVkLCBwcm9wcy5zaXplKX1cbiAgICAgICAgPC9saT5cbiAgICAgICk7XG4gICAgICBsYXN0UGFnZXIgPSAoXG4gICAgICAgIDxsaVxuICAgICAgICAgIHRpdGxlPXtwcm9wcy5zaG93VGl0bGUgPyBsb2NhbGUubGFzdF9wYWdlIDogbnVsbH1cbiAgICAgICAgICBvbkNsaWNrPXt0aGlzLmxhc3R9XG4gICAgICAgICAgdGFiSW5kZXg9e2xhc3REaXNhYmxlZCA/IG51bGwgOiAwfVxuICAgICAgICAgIG9uS2V5UHJlc3M9e3RoaXMucnVuSWZFbnRlckxhc3R9XG4gICAgICAgICAgY2xhc3NOYW1lPXtgJHshbGFzdERpc2FibGVkID8gJycgOiBgJHtwcmVmaXhDbHN9LWRpc2FibGVkYH0gJHtwcmVmaXhDbHN9LWxhc3RgfVxuICAgICAgICAgIGFyaWEtZGlzYWJsZWQ9e2xhc3REaXNhYmxlZH1cbiAgICAgICAgPlxuICAgICAgICAgIHtwcm9wcy5pdGVtUmVuZGVyKGFsbFBhZ2VzLCAnbGFzdCcsIDxhIGNsYXNzTmFtZT17YCR7cHJlZml4Q2xzfS1pdGVtLWxpbmtgfSAvPiwgbGFzdERpc2FibGVkLCBwcm9wcy5zaXplKX1cbiAgICAgICAgPC9saT5cbiAgICAgICk7XG4gICAgfVxuICAgIGNvbnN0IHByZXZEaXNhYmxlZCA9ICF0aGlzLmhhc1ByZXYoKTtcbiAgICBjb25zdCBuZXh0RGlzYWJsZWQgPSAhdGhpcy5oYXNOZXh0KCk7XG4gICAgY29uc3Qgc2l6ZUNoYW5nZXIgPSAoXG4gICAgICA8T3B0aW9uc1xuICAgICAgICBsb2NhbGU9e3Byb3BzLmxvY2FsZX1cbiAgICAgICAgcm9vdFByZWZpeENscz17cHJlZml4Q2xzfVxuICAgICAgICBzZWxlY3RDb21wb25lbnRDbGFzcz17cHJvcHMuc2VsZWN0Q29tcG9uZW50Q2xhc3N9XG4gICAgICAgIHNlbGVjdFByZWZpeENscz17cHJvcHMuc2VsZWN0UHJlZml4Q2xzfVxuICAgICAgICBjaGFuZ2VTaXplPXt0aGlzLnByb3BzLnNob3dTaXplQ2hhbmdlciA/IHRoaXMuY2hhbmdlUGFnZVNpemUgOiBudWxsfVxuICAgICAgICBjdXJyZW50PXt0aGlzLnN0YXRlLmN1cnJlbnR9XG4gICAgICAgIHBhZ2VTaXplPXt0aGlzLnN0YXRlLnBhZ2VTaXplfVxuICAgICAgICBwYWdlU2l6ZU9wdGlvbnM9e3RoaXMucHJvcHMucGFnZVNpemVPcHRpb25zfVxuICAgICAgICBxdWlja0dvPXt0aGlzLnByb3BzLnNob3dRdWlja0p1bXBlciA/IHRoaXMuaGFuZGxlQ2hhbmdlIDogbnVsbH1cbiAgICAgICAgZ29CdXR0b249e2dvQnV0dG9ufVxuICAgICAgICBidWlsZE9wdGlvblRleHQ9e3Byb3BzLnNpemVDaGFuZ2VyT3B0aW9uVGV4dH1cbiAgICAgICAgY2hhbmdlU2l6ZUxhYmVsPXt0aGlzLnByb3BzLnNob3dTaXplQ2hhbmdlckxhYmVsfVxuICAgICAgLz5cbiAgICApO1xuICAgIGNvbnN0IGNsYXNzU3RyaW5nID0gY2xhc3NOYW1lcyhwcmVmaXhDbHMsIHByb3BzLmNsYXNzTmFtZSwge1xuICAgICAgW2Ake3ByZWZpeENsc30tdGlueWBdOiBwcm9wcy50aW55LFxuICAgIH0pO1xuICAgIHJldHVybiAoXG4gICAgICA8dWxcbiAgICAgICAgY2xhc3NOYW1lPXtjbGFzc1N0cmluZ31cbiAgICAgICAgc3R5bGU9e3Byb3BzLnN0eWxlfVxuICAgICAgICB1bnNlbGVjdGFibGU9XCJ1bnNlbGVjdGFibGVcIlxuICAgICAgICByZWY9e3RoaXMuc2F2ZVBhZ2luYXRpb25Ob2RlfVxuICAgICAgPlxuICAgICAgICB7cHJvcHMudGlueSAmJiBzaXplQ2hhbmdlcn1cbiAgICAgICAge3RvdGFsVGV4dH1cbiAgICAgICAge3Byb3BzLnRpbnkgJiYgZmlyc3RQYWdlcn1cbiAgICAgICAgPGxpXG4gICAgICAgICAgdGl0bGU9e3Byb3BzLnNob3dUaXRsZSA/IGxvY2FsZS5wcmV2X3BhZ2UgOiBudWxsfVxuICAgICAgICAgIG9uQ2xpY2s9e3RoaXMucHJldn1cbiAgICAgICAgICB0YWJJbmRleD17cHJldkRpc2FibGVkID8gbnVsbCA6IDB9XG4gICAgICAgICAgb25LZXlQcmVzcz17dGhpcy5ydW5JZkVudGVyUHJldn1cbiAgICAgICAgICBjbGFzc05hbWU9e2AkeyFwcmV2RGlzYWJsZWQgPyAnJyA6IGAke3ByZWZpeENsc30tZGlzYWJsZWRgfSAke3ByZWZpeENsc30tcHJldmB9XG4gICAgICAgICAgYXJpYS1kaXNhYmxlZD17cHJldkRpc2FibGVkfVxuICAgICAgICA+XG4gICAgICAgICAge3Byb3BzLml0ZW1SZW5kZXIocHJldlBhZ2UsICdwcmV2JywgPGEgY2xhc3NOYW1lPXtgJHtwcmVmaXhDbHN9LWl0ZW0tbGlua2B9IC8+LCBwcmV2RGlzYWJsZWQsIHByb3BzLnNpemUpfVxuICAgICAgICA8L2xpPlxuICAgICAgICB7IXByb3BzLnRpbnkgJiYgcGFnZXJMaXN0fVxuICAgICAgICA8bGlcbiAgICAgICAgICB0aXRsZT17cHJvcHMuc2hvd1RpdGxlID8gbG9jYWxlLm5leHRfcGFnZSA6IG51bGx9XG4gICAgICAgICAgb25DbGljaz17dGhpcy5uZXh0fVxuICAgICAgICAgIHRhYkluZGV4PXtuZXh0RGlzYWJsZWQgPyBudWxsIDogMH1cbiAgICAgICAgICBvbktleVByZXNzPXt0aGlzLnJ1bklmRW50ZXJOZXh0fVxuICAgICAgICAgIGNsYXNzTmFtZT17YCR7IW5leHREaXNhYmxlZCA/ICcnIDogYCR7cHJlZml4Q2xzfS1kaXNhYmxlZGB9ICR7cHJlZml4Q2xzfS1uZXh0YH1cbiAgICAgICAgICBhcmlhLWRpc2FibGVkPXtuZXh0RGlzYWJsZWR9XG4gICAgICAgID5cbiAgICAgICAgICB7cHJvcHMuaXRlbVJlbmRlcihuZXh0UGFnZSwgJ25leHQnLCA8YSBjbGFzc05hbWU9e2Ake3ByZWZpeENsc30taXRlbS1saW5rYH0gLz4sIG5leHREaXNhYmxlZCwgcHJvcHMuc2l6ZSl9XG4gICAgICAgIDwvbGk+XG4gICAgICAgIHtwcm9wcy50aW55ID8gbGFzdFBhZ2VyIDogc2l6ZUNoYW5nZXJ9XG4gICAgICA8L3VsPlxuICAgICk7XG4gIH1cbn1cbiJdfQ==