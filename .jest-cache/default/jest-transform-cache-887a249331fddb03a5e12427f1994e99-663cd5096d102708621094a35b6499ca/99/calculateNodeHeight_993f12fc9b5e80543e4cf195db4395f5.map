{"version":3,"sources":["input/calculateNodeHeight.js"],"names":["HIDDEN_TEXTAREA_STYLE","SIZING_STYLE","computedStyleCache","useCache","nodeRef","node","style","window","boxSizing","paddingSize","parseFloat","borderSize","sizingStyle","nodeInfo","minRows","maxRows","hiddenTextarea","document","uiTextNode","calculateNodeStyling","minHeight","Number","maxHeight","height","singleRowHeight","Math","overflowY"],"mappings":"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","sourcesContent":["// Thanks to https://github.com/andreypopp/react-textarea-autosize/\n/**\n * calculateNodeHeight(uiTextNode, useCache = false)\n */\nconst HIDDEN_TEXTAREA_STYLE = `\n  min-height:0 !important;\n  max-height:none !important;\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important\n`;\nconst SIZING_STYLE = [\n    'letter-spacing',\n    'line-height',\n    'padding-top',\n    'padding-bottom',\n    'font-family',\n    'font-weight',\n    'font-size',\n    'text-rendering',\n    'text-transform',\n    'width',\n    'text-indent',\n    'padding-left',\n    'padding-right',\n    'border-width',\n    'box-sizing',\n];\nconst computedStyleCache = {};\nlet hiddenTextarea;\nfunction calculateNodeStyling(node, useCache = false) {\n    const nodeRef = (node.getAttribute('id') ||\n        node.getAttribute('data-reactid') ||\n        node.getAttribute('name'));\n    if (useCache && computedStyleCache[nodeRef]) {\n        return computedStyleCache[nodeRef];\n    }\n    const style = window.getComputedStyle(node);\n    const boxSizing = style.getPropertyValue('box-sizing') ||\n        style.getPropertyValue('-moz-box-sizing') ||\n        style.getPropertyValue('-webkit-box-sizing');\n    const paddingSize = parseFloat(style.getPropertyValue('padding-bottom')) +\n        parseFloat(style.getPropertyValue('padding-top'));\n    const borderSize = parseFloat(style.getPropertyValue('border-bottom-width')) +\n        parseFloat(style.getPropertyValue('border-top-width'));\n    const sizingStyle = SIZING_STYLE.map(name => `${name}:${style.getPropertyValue(name)}`).join(';');\n    const nodeInfo = {\n        sizingStyle,\n        paddingSize,\n        borderSize,\n        boxSizing,\n    };\n    if (useCache && nodeRef) {\n        computedStyleCache[nodeRef] = nodeInfo;\n    }\n    return nodeInfo;\n}\nexport default function calculateNodeHeight(uiTextNode, useCache = false, minRows = null, maxRows = null) {\n    if (!hiddenTextarea) {\n        hiddenTextarea = document.createElement('textarea');\n        document.body.appendChild(hiddenTextarea);\n    }\n    // Fix wrap=\"off\" issue\n    if (uiTextNode.getAttribute('wrap')) {\n        hiddenTextarea.setAttribute('wrap', uiTextNode.getAttribute('wrap'));\n    }\n    else {\n        hiddenTextarea.removeAttribute('wrap');\n    }\n    // Copy all CSS properties that have an impact on the height of the content in\n    // the textbox\n    const { paddingSize, borderSize, boxSizing, sizingStyle } = calculateNodeStyling(uiTextNode, useCache);\n    // Need to have the overflow attribute to hide the scrollbar otherwise\n    // text-lines will not calculated properly as the shadow will technically be\n    // narrower for content\n    hiddenTextarea.setAttribute('style', `${sizingStyle};${HIDDEN_TEXTAREA_STYLE}`);\n    hiddenTextarea.value = uiTextNode.value || uiTextNode.placeholder || '';\n    let minHeight = Number.MIN_SAFE_INTEGER;\n    let maxHeight = Number.MAX_SAFE_INTEGER;\n    let height = hiddenTextarea.scrollHeight;\n    let overflowY;\n    if (boxSizing === 'border-box') {\n        // border-box: add border, since height = content + padding + border\n        height += borderSize;\n    }\n    else if (boxSizing === 'content-box') {\n        // remove padding, since height = content\n        height -= paddingSize;\n    }\n    if (minRows !== null || maxRows !== null) {\n        // measure height of a textarea with a single row\n        hiddenTextarea.value = ' ';\n        const singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;\n        if (minRows !== null) {\n            minHeight = singleRowHeight * minRows;\n            if (boxSizing === 'border-box') {\n                minHeight = minHeight + paddingSize + borderSize;\n            }\n            height = Math.max(minHeight, height);\n        }\n        if (maxRows !== null) {\n            maxHeight = singleRowHeight * maxRows;\n            if (boxSizing === 'border-box') {\n                maxHeight = maxHeight + paddingSize + borderSize;\n            }\n            overflowY = height > maxHeight ? '' : 'hidden';\n            height = Math.min(maxHeight, height);\n        }\n    }\n    // Remove scroll bar flash when autosize without maxRows\n    if (!maxRows) {\n        overflowY = 'hidden';\n    }\n    return { height, minHeight, maxHeight, overflowY };\n}\n"]}