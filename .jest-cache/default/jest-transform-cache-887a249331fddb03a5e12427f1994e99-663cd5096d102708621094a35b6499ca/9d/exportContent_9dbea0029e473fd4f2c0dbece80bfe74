b65dc7a3c592a54beb7f01bbf6de253d
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exportContent;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _draftJs = require("draft-js");

function encodeContent(text) {
  return text.split('&').join('&amp;').split('<').join('&lt;').split('>').join('&gt;').split('\xA0').join('&nbsp;').split('\n').join('<br > \n');
}

var MentionGenerator =
/*#__PURE__*/
function () {
  function MentionGenerator(contentState, options) {
    (0, _classCallCheck2["default"])(this, MentionGenerator);
    this.contentState = contentState;
    this.options = options;
  }

  (0, _createClass2["default"])(MentionGenerator, [{
    key: "generate",
    value: function generate() {
      var contentRaw = (0, _draftJs.convertToRaw)(this.contentState);
      return this.processContent(contentRaw);
    }
  }, {
    key: "processContent",
    value: function processContent(contentRaw) {
      var blocks = contentRaw.blocks;
      var encode = this.options.encode;
      return blocks.map(function (block) {
        return encode ? encodeContent(block.text) : block.text;
      }).join(encode ? '<br />\n' : '\n');
    }
  }]);
  return MentionGenerator;
}();

function exportContent(contentState) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return new MentionGenerator(contentState, options).generate();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4cG9ydENvbnRlbnQuanN4Il0sIm5hbWVzIjpbImVuY29kZUNvbnRlbnQiLCJ0ZXh0Iiwic3BsaXQiLCJqb2luIiwiTWVudGlvbkdlbmVyYXRvciIsImNvbnRlbnRTdGF0ZSIsIm9wdGlvbnMiLCJjb250ZW50UmF3IiwicHJvY2Vzc0NvbnRlbnQiLCJibG9ja3MiLCJlbmNvZGUiLCJtYXAiLCJibG9jayIsImV4cG9ydENvbnRlbnQiLCJnZW5lcmF0ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBOztBQUVBLFNBQVNBLGFBQVQsQ0FBdUJDLElBQXZCLEVBQTZCO0FBQzNCLFNBQU9BLElBQUksQ0FDUkMsS0FESSxDQUNFLEdBREYsRUFFSkMsSUFGSSxDQUVDLE9BRkQsRUFJSkQsS0FKSSxDQUlFLEdBSkYsRUFLSkMsSUFMSSxDQUtDLE1BTEQsRUFPSkQsS0FQSSxDQU9FLEdBUEYsRUFRSkMsSUFSSSxDQVFDLE1BUkQsRUFVSkQsS0FWSSxDQVVFLE1BVkYsRUFXSkMsSUFYSSxDQVdDLFFBWEQsRUFhSkQsS0FiSSxDQWFFLElBYkYsRUFjSkMsSUFkSSxDQWNDLFVBZEQsQ0FBUDtBQWVEOztJQUVLQyxnQjs7O0FBQ0osNEJBQVlDLFlBQVosRUFBMEJDLE9BQTFCLEVBQW1DO0FBQUE7QUFDakMsU0FBS0QsWUFBTCxHQUFvQkEsWUFBcEI7QUFDQSxTQUFLQyxPQUFMLEdBQWVBLE9BQWY7QUFDRDs7OzsrQkFDVTtBQUNULFVBQU1DLFVBQVUsR0FBRywyQkFBYSxLQUFLRixZQUFsQixDQUFuQjtBQUNBLGFBQU8sS0FBS0csY0FBTCxDQUFvQkQsVUFBcEIsQ0FBUDtBQUNEOzs7bUNBQ2NBLFUsRUFBWTtBQUFBLFVBQ2pCRSxNQURpQixHQUNORixVQURNLENBQ2pCRSxNQURpQjtBQUFBLFVBRWpCQyxNQUZpQixHQUVOLEtBQUtKLE9BRkMsQ0FFakJJLE1BRmlCO0FBR3pCLGFBQU9ELE1BQU0sQ0FBQ0UsR0FBUCxDQUFXLFVBQUNDLEtBQUQsRUFBVztBQUMzQixlQUFPRixNQUFNLEdBQUdWLGFBQWEsQ0FBQ1ksS0FBSyxDQUFDWCxJQUFQLENBQWhCLEdBQStCVyxLQUFLLENBQUNYLElBQWxEO0FBQ0QsT0FGTSxFQUVKRSxJQUZJLENBRUNPLE1BQU0sR0FBRyxVQUFILEdBQWdCLElBRnZCLENBQVA7QUFHRDs7Ozs7QUFHWSxTQUFTRyxhQUFULENBQXVCUixZQUF2QixFQUFtRDtBQUFBLE1BQWRDLE9BQWMsdUVBQUosRUFBSTtBQUNoRSxTQUFPLElBQUlGLGdCQUFKLENBQXFCQyxZQUFyQixFQUFtQ0MsT0FBbkMsRUFBNENRLFFBQTVDLEVBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbnZlcnRUb1JhdyB9IGZyb20gJ2RyYWZ0LWpzJztcblxuZnVuY3Rpb24gZW5jb2RlQ29udGVudCh0ZXh0KSB7XG4gIHJldHVybiB0ZXh0XG4gICAgLnNwbGl0KCcmJylcbiAgICAuam9pbignJmFtcDsnKVxuXG4gICAgLnNwbGl0KCc8JylcbiAgICAuam9pbignJmx0OycpXG5cbiAgICAuc3BsaXQoJz4nKVxuICAgIC5qb2luKCcmZ3Q7JylcblxuICAgIC5zcGxpdCgnXFx4QTAnKVxuICAgIC5qb2luKCcmbmJzcDsnKVxuXG4gICAgLnNwbGl0KCdcXG4nKVxuICAgIC5qb2luKCc8YnIgPiBcXG4nKTtcbn1cblxuY2xhc3MgTWVudGlvbkdlbmVyYXRvciB7XG4gIGNvbnN0cnVjdG9yKGNvbnRlbnRTdGF0ZSwgb3B0aW9ucykge1xuICAgIHRoaXMuY29udGVudFN0YXRlID0gY29udGVudFN0YXRlO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cbiAgZ2VuZXJhdGUoKSB7XG4gICAgY29uc3QgY29udGVudFJhdyA9IGNvbnZlcnRUb1Jhdyh0aGlzLmNvbnRlbnRTdGF0ZSk7XG4gICAgcmV0dXJuIHRoaXMucHJvY2Vzc0NvbnRlbnQoY29udGVudFJhdyk7XG4gIH1cbiAgcHJvY2Vzc0NvbnRlbnQoY29udGVudFJhdykge1xuICAgIGNvbnN0IHsgYmxvY2tzIH0gPSBjb250ZW50UmF3O1xuICAgIGNvbnN0IHsgZW5jb2RlIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgcmV0dXJuIGJsb2Nrcy5tYXAoKGJsb2NrKSA9PiB7XG4gICAgICByZXR1cm4gZW5jb2RlID8gZW5jb2RlQ29udGVudChibG9jay50ZXh0KSA6IGJsb2NrLnRleHQ7XG4gICAgfSkuam9pbihlbmNvZGUgPyAnPGJyIC8+XFxuJyA6ICdcXG4nKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBleHBvcnRDb250ZW50KGNvbnRlbnRTdGF0ZSwgb3B0aW9ucyA9IHt9KSB7XG4gIHJldHVybiBuZXcgTWVudGlvbkdlbmVyYXRvcihjb250ZW50U3RhdGUsIG9wdGlvbnMpLmdlbmVyYXRlKCk7XG59XG4iXX0=