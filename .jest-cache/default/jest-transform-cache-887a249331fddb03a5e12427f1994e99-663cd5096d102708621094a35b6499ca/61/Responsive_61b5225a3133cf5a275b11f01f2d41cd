b59b48df0f53e77f2c87abe3f3ba82d6
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _objectSpread4 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = require("react");

var _isObject = _interopRequireDefault(require("lodash/isObject"));

var _mobx = require("mobx");

var _mediaQueryListPolyfill = require("../_util/mediaQueryListPolyfill");

var _enum = require("./enum");

var _responsiveMap;

var enquire;

if (typeof window !== 'undefined') {
  window.matchMedia = window.matchMedia || _mediaQueryListPolyfill.matchMediaPolifill; // eslint-disable-next-line global-require

  enquire = require('enquire.js');
}

var responsiveMap = (_responsiveMap = {}, (0, _defineProperty2["default"])(_responsiveMap, _enum.Breakpoint.xxl, '(min-width: 1600px)'), (0, _defineProperty2["default"])(_responsiveMap, _enum.Breakpoint.xl, '(min-width: 1200px)'), (0, _defineProperty2["default"])(_responsiveMap, _enum.Breakpoint.lg, '(min-width: 992px)'), (0, _defineProperty2["default"])(_responsiveMap, _enum.Breakpoint.md, '(min-width: 768px)'), (0, _defineProperty2["default"])(_responsiveMap, _enum.Breakpoint.sm, '(min-width: 576px)'), (0, _defineProperty2["default"])(_responsiveMap, _enum.Breakpoint.xs, '(max-width: 575px)'), _responsiveMap);
var responsiveArray = Object.keys(responsiveMap);

var Responsive =
/*#__PURE__*/
function (_PureComponent) {
  (0, _inherits2["default"])(Responsive, _PureComponent);

  function Responsive() {
    var _this;

    (0, _classCallCheck2["default"])(this, Responsive);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(Responsive).apply(this, arguments));
    _this.state = {
      breakpoints: {}
    };
    return _this;
  }

  (0, _createClass2["default"])(Responsive, [{
    key: "isDisabled",
    value: function isDisabled(props) {
      var disabled = props.disabled,
          items = props.items;

      if (!disabled && items) {
        return !items.some(_isObject["default"]);
      }

      return true;
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      if (!this.isDisabled(this.props)) {
        this.register();
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      var onChange = this.props.onChange;

      if (onChange) {
        onChange(this.getValues());
      }
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (this.isDisabled(this.props) && !this.isDisabled(nextProps)) {
        this.register();
      }

      if (!this.isDisabled(this.props) && this.isDisabled(nextProps)) {
        this.unregister();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (!this.isDisabled(this.props)) {
        this.unregister();
      }
    }
  }, {
    key: "register",
    value: function register() {
      var _this2 = this;

      if (enquire) {
        responsiveArray.map(function (breakpoint) {
          return enquire.register(responsiveMap[breakpoint], {
            match: function match() {
              _this2.setState(function (prevState) {
                return {
                  breakpoints: (0, _objectSpread4["default"])({}, prevState.breakpoints, (0, _defineProperty2["default"])({}, breakpoint, true))
                };
              });
            },
            unmatch: function unmatch() {
              _this2.setState(function (prevState) {
                return {
                  breakpoints: (0, _objectSpread4["default"])({}, prevState.breakpoints, (0, _defineProperty2["default"])({}, breakpoint, false))
                };
              });
            },
            // Keep a empty destory to avoid triggering unmatch when unregister
            destroy: function destroy() {}
          });
        });
      }
    }
  }, {
    key: "unregister",
    value: function unregister() {
      Object.keys(responsiveMap).map(function (breakpoint) {
        return enquire.unregister(responsiveMap[breakpoint]);
      });
    }
  }, {
    key: "processValue",
    value: function processValue(value) {
      var breakpoints = this.state.breakpoints;

      if ((0, _mobx.isArrayLike)(value)) {
        return value.map(this.processValue, this);
      }

      if ((0, _isObject["default"])(value)) {
        for (var i = 0; i < responsiveArray.length; i++) {
          var breakpoint = responsiveArray[i];

          if (breakpoints[breakpoint] && value[breakpoint] !== undefined) {
            return value[breakpoint];
          }
        }

        return undefined;
      }

      return value;
    }
  }, {
    key: "getValues",
    value: function getValues() {
      var items = this.props.items;

      if (items) {
        return items.map(this.processValue, this);
      }

      return [];
    }
  }, {
    key: "render",
    value: function render() {
      var children = this.props.children;

      if (typeof children === 'function') {
        return children(this.getValues());
      }

      return children;
    }
  }]);
  return Responsive;
}(_react.PureComponent);

exports["default"] = Responsive;
Responsive.displayName = 'Responsive';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,