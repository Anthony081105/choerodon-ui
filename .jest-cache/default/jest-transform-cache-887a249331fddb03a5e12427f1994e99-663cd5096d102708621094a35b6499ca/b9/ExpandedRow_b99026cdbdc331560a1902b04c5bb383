d2f42e3b5117be5096132021de412a4c
"use strict";

/* istanbul ignore next */
function cov_5l3x9zdi9() {
  var path = "/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/table/ExpandedRow.tsx";
  var hash = "e1fce3c304f8e5a9f5229bb70c75bf4cc61accf5";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/table/ExpandedRow.tsx",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 29
        },
        end: {
          line: 3,
          column: 84
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 7,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 28
        }
      },
      "3": {
        start: {
          line: 10,
          column: 18
        },
        end: {
          line: 10,
          column: 70
        }
      },
      "4": {
        start: {
          line: 12,
          column: 18
        },
        end: {
          line: 29,
          column: 1
        }
      },
      "5": {
        start: {
          line: 13,
          column: 19
        },
        end: {
          line: 13,
          column: 35
        }
      },
      "6": {
        start: {
          line: 14,
          column: 24
        },
        end: {
          line: 14,
          column: 38
        }
      },
      "7": {
        start: {
          line: 15,
          column: 17
        },
        end: {
          line: 15,
          column: 68
        }
      },
      "8": {
        start: {
          line: 16,
          column: 16
        },
        end: {
          line: 16,
          column: 29
        }
      },
      "9": {
        start: {
          line: 17,
          column: 15
        },
        end: {
          line: 17,
          column: 27
        }
      },
      "10": {
        start: {
          line: 18,
          column: 13
        },
        end: {
          line: 18,
          column: 23
        }
      },
      "11": {
        start: {
          line: 20,
          column: 2
        },
        end: {
          line: 26,
          column: 3
        }
      },
      "12": {
        start: {
          line: 21,
          column: 16
        },
        end: {
          line: 21,
          column: 59
        }
      },
      "13": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 25,
          column: 5
        }
      },
      "14": {
        start: {
          line: 24,
          column: 6
        },
        end: {
          line: 24,
          column: 19
        }
      },
      "15": {
        start: {
          line: 28,
          column: 2
        },
        end: {
          line: 28,
          column: 18
        }
      },
      "16": {
        start: {
          line: 31,
          column: 15
        },
        end: {
          line: 31,
          column: 26
        }
      },
      "17": {
        start: {
          line: 32,
          column: 0
        },
        end: {
          line: 32,
          column: 30
        }
      }
    },
    fnMap: {
      "0": {
        name: "ExpandedRow",
        decl: {
          start: {
            line: 12,
            column: 27
          },
          end: {
            line: 12,
            column: 38
          }
        },
        loc: {
          start: {
            line: 12,
            column: 46
          },
          end: {
            line: 29,
            column: 1
          }
        },
        line: 12
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 15,
            column: 17
          },
          end: {
            line: 15,
            column: 68
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 15,
            column: 46
          },
          end: {
            line: 15,
            column: 50
          }
        }, {
          start: {
            line: 15,
            column: 53
          },
          end: {
            line: 15,
            column: 68
          }
        }],
        line: 15
      },
      "1": {
        loc: {
          start: {
            line: 20,
            column: 2
          },
          end: {
            line: 26,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 20,
            column: 2
          },
          end: {
            line: 26,
            column: 3
          }
        }, {
          start: {
            line: 20,
            column: 2
          },
          end: {
            line: 26,
            column: 3
          }
        }],
        line: 20
      },
      "2": {
        loc: {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        }, {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        }],
        line: 23
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e1fce3c304f8e5a9f5229bb70c75bf4cc61accf5"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];

  cov_5l3x9zdi9 = function () {
    return actualCoverage;
  };

  return actualCoverage;
}

cov_5l3x9zdi9();

var _interopRequireDefault =
/* istanbul ignore next */
(cov_5l3x9zdi9().s[0]++, require("@babel/runtime/helpers/interopRequireDefault"));

/* istanbul ignore next */
cov_5l3x9zdi9().s[1]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});

/* istanbul ignore next */
cov_5l3x9zdi9().s[2]++;
exports["default"] = void 0;

var _isFunction =
/* istanbul ignore next */
(cov_5l3x9zdi9().s[3]++, _interopRequireDefault(require("lodash/isFunction")));

/* istanbul ignore next */
cov_5l3x9zdi9().s[4]++;

var ExpandedRow = function ExpandedRow(props) {
  /* istanbul ignore next */
  cov_5l3x9zdi9().f[0]++;

  var isExpanded =
  /* istanbul ignore next */
  (cov_5l3x9zdi9().s[5]++, props.isExpanded),
      _props$children =
  /* istanbul ignore next */
  (cov_5l3x9zdi9().s[6]++, props.children),
      children =
  /* istanbul ignore next */
  (cov_5l3x9zdi9().s[7]++, _props$children === void 0 ?
  /* istanbul ignore next */
  (cov_5l3x9zdi9().b[0][0]++, null) :
  /* istanbul ignore next */
  (cov_5l3x9zdi9().b[0][1]++, _props$children)),
      columns =
  /* istanbul ignore next */
  (cov_5l3x9zdi9().s[8]++, props.columns),
      record =
  /* istanbul ignore next */
  (cov_5l3x9zdi9().s[9]++, props.record),
      lock =
  /* istanbul ignore next */
  (cov_5l3x9zdi9().s[10]++, props.lock);

  /* istanbul ignore next */
  cov_5l3x9zdi9().s[11]++;

  if ((0, _isFunction["default"])(children)) {
    /* istanbul ignore next */
    cov_5l3x9zdi9().b[1][0]++;
    var child =
    /* istanbul ignore next */
    (cov_5l3x9zdi9().s[12]++, children(columns, record, isExpanded, lock));

    /* istanbul ignore next */
    cov_5l3x9zdi9().s[13]++;

    if (child) {
      /* istanbul ignore next */
      cov_5l3x9zdi9().b[2][0]++;
      cov_5l3x9zdi9().s[14]++;
      return child;
    } else
    /* istanbul ignore next */
    {
      cov_5l3x9zdi9().b[2][1]++;
    }
  } else
  /* istanbul ignore next */
  {
    cov_5l3x9zdi9().b[1][1]++;
  }

  cov_5l3x9zdi9().s[15]++;
  return children;
};

var _default =
/* istanbul ignore next */
(cov_5l3x9zdi9().s[16]++, ExpandedRow);

/* istanbul ignore next */
cov_5l3x9zdi9().s[17]++;
exports["default"] = _default;