{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/rich-text/RichText.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { ReactNode } from 'react';\nimport PropTypes from 'prop-types';\nimport { observer } from 'mobx-react';\nimport { toJS } from 'mobx';\nimport { ReactQuillProps } from 'react-quill/lib';\nimport 'react-quill/dist/quill.snow.css';\nimport isEqual from 'lodash/isEqual';\nimport omit from 'lodash/omit';\nimport { Delta } from './quill';\nimport ObserverFormField from '../field';\nimport DataSet from '../data-set/DataSet';\nimport { FormFieldProps } from '../field/FormField';\nimport autobind from '../_util/autobind';\nimport BaseEditor from './BaseEditor';\nimport RichTextViewer from './RichTextViewer';\nimport { randomWord } from './utils';\nimport { RichTextMode, RichTextToolbarType } from './enum';\n\nexport interface RichTextToolbarHookProps {\n  id?: string;\n  dataSet?: DataSet;\n}\n\nexport type RichTextToolbarHook = (props: RichTextToolbarHookProps) => ReactNode;\n\nexport interface RichTextProps extends FormFieldProps {\n  options?: ReactQuillProps;\n  mode?: RichTextMode;\n  toolbar?: RichTextToolbarType | RichTextToolbarHook;\n}\n\nconst defaultRichTextOptions: ReactQuillProps = {\n  theme: 'snow',\n};\n\n@observer\nexport default class RichText extends ObserverFormField<RichTextProps> {\n  static displayName = 'RichText';\n\n  static RichTextViewer = RichTextViewer;\n\n  static propTypes = {\n    options: PropTypes.object,\n    mode: PropTypes.oneOf([RichTextMode.editor, RichTextMode.preview]),\n    toolbar: PropTypes.oneOfType([\n      PropTypes.oneOf([\n        RichTextToolbarType.none,\n        RichTextToolbarType.normal,\n      ]),\n      PropTypes.func,\n    ]),\n    ...ObserverFormField.propTypes,\n  };\n\n  static defaultProps = {\n    ...ObserverFormField.defaultProps,\n    suffixCls: 'rich-text',\n    autoFocus: false,\n    mode: 'editor',\n    toolbar: RichTextToolbarType.normal,\n  };\n\n  editor: any;\n\n  toolbarId: string = randomWord(false, 32, 64);\n\n  rtOptions: ReactQuillProps = this.getRichTextOptions();\n\n\n  getRichTextOptions(options: ReactQuillProps = this.props.options!): ReactQuillProps {\n    if (options) {\n      if (options.modules && options.modules.imageDropAndPaste !== false) {\n        options.modules.imageDropAndPaste = true;\n      }\n    } else {\n      options = {\n        modules: {\n          toolbar: {\n            container: `#${this.toolbarId}`,\n          },\n          imageDropAndPaste: true,\n        },\n      };\n    }\n    return { ...defaultRichTextOptions, ...options };\n  }\n\n  getOtherProps() {\n    return omit(super.getOtherProps(), ['defaultValue', 'value', 'disabled']);\n  }\n\n  @autobind\n  handleChange(value: Delta) {\n    this.setValue(value);\n  }\n\n  // 禁用与只读表现一致\n  // @autobind\n  // setDisabled(disabled) {\n  //   if(this.element && this.element.editor) {\n  //     this.element.editor.getEditor().enable(!disabled);\n  //   }\n  // }\n\n  componentWillReceiveProps(nextProps, nextContext) {\n    const { options } = nextProps;\n    if (!isEqual(options, this.props.options)) {\n      this.rtOptions = this.getRichTextOptions(options);\n    }\n    super.componentWillReceiveProps(nextProps, nextContext);\n  }\n\n  renderWrapper(): ReactNode {\n    const { defaultValue, dataSet } = this.props;\n    this.rtOptions.readOnly = this.isDisabled() ? true : this.isReadOnly();\n    const deltaOps = this.getValue() || defaultValue;\n    return (\n      <div {...this.getWrapperProps()}>\n        <BaseEditor\n          {...this.getOtherProps()}\n          {...this.rtOptions}\n          toolbarId={this.toolbarId}\n          value={toJS(deltaOps)}\n          dataSet={dataSet}\n        />\n        {this.renderFloatLabel()}\n      </div>\n    );\n  }\n}\n"]}