19d5d3938dfe2b68444e7f45cd926820
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = upload;

function getError(option, xhr) {
  var msg = "cannot post ".concat(option.action, " ").concat(xhr.status, "'");
  var err = new Error(msg);
  err.status = xhr.status;
  err.method = 'post';
  err.url = option.action;
  return err;
}

function getBody(xhr) {
  var text = xhr.responseText || xhr.response;

  if (!text) {
    return text;
  }

  try {
    return JSON.parse(text);
  } catch (e) {
    return text;
  }
} // option {
//  onProgress: (event: { percent: number }): void,
//  onError: (event: Error, body?: Object): void,
//  onSuccess: (body: Object): void,
//  data: Object,
//  filename: String,
//  file: File,
//  withCredentials: Boolean,
//  action: String,
//  headers: Object,
// }


function upload(option) {
  var xhr = new XMLHttpRequest();

  if (option.onProgress && xhr.upload) {
    xhr.upload.onprogress = function progress(e) {
      if (e.total > 0) {
        e.percent = e.loaded / e.total * 100;
      }

      option.onProgress(e);
    };
  }

  var formData = new FormData();

  if (option.data) {
    Object.keys(option.data).map(function (key) {
      formData.append(key, option.data[key]);
    });
  }

  formData.append(option.filename, option.file);

  xhr.onerror = function error(e) {
    option.onError(e);
  };

  xhr.onload = function onload() {
    // allow success when 2xx status
    // see https://github.com/react-component/upload/issues/34
    if (xhr.status < 200 || xhr.status >= 300) {
      return option.onError(getError(option, xhr), getBody(xhr));
    }

    option.onSuccess(getBody(xhr), xhr);
  };

  xhr.open('post', option.action, true); // Has to be after `.open()`. See https://github.com/enyo/dropzone/issues/179

  if (option.withCredentials && 'withCredentials' in xhr) {
    xhr.withCredentials = true;
  }

  var headers = option.headers || {}; // when set headers['X-Requested-With'] = null , can close default XHR header
  // see https://github.com/react-component/upload/issues/33

  if (headers['X-Requested-With'] !== null) {
    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
  }

  for (var h in headers) {
    if (headers.hasOwnProperty(h) && headers[h] !== null) {
      xhr.setRequestHeader(h, headers[h]);
    }
  }

  xhr.send(formData);
  return {
    abort: function abort() {
      xhr.abort();
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlcXVlc3QuanN4Il0sIm5hbWVzIjpbImdldEVycm9yIiwib3B0aW9uIiwieGhyIiwibXNnIiwiYWN0aW9uIiwic3RhdHVzIiwiZXJyIiwiRXJyb3IiLCJtZXRob2QiLCJ1cmwiLCJnZXRCb2R5IiwidGV4dCIsInJlc3BvbnNlVGV4dCIsInJlc3BvbnNlIiwiSlNPTiIsInBhcnNlIiwiZSIsInVwbG9hZCIsIlhNTEh0dHBSZXF1ZXN0Iiwib25Qcm9ncmVzcyIsIm9ucHJvZ3Jlc3MiLCJwcm9ncmVzcyIsInRvdGFsIiwicGVyY2VudCIsImxvYWRlZCIsImZvcm1EYXRhIiwiRm9ybURhdGEiLCJkYXRhIiwiT2JqZWN0Iiwia2V5cyIsIm1hcCIsImtleSIsImFwcGVuZCIsImZpbGVuYW1lIiwiZmlsZSIsIm9uZXJyb3IiLCJlcnJvciIsIm9uRXJyb3IiLCJvbmxvYWQiLCJvblN1Y2Nlc3MiLCJvcGVuIiwid2l0aENyZWRlbnRpYWxzIiwiaGVhZGVycyIsInNldFJlcXVlc3RIZWFkZXIiLCJoIiwiaGFzT3duUHJvcGVydHkiLCJzZW5kIiwiYWJvcnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxTQUFTQSxRQUFULENBQWtCQyxNQUFsQixFQUEwQkMsR0FBMUIsRUFBK0I7QUFDN0IsTUFBTUMsR0FBRyx5QkFBa0JGLE1BQU0sQ0FBQ0csTUFBekIsY0FBbUNGLEdBQUcsQ0FBQ0csTUFBdkMsTUFBVDtBQUNBLE1BQU1DLEdBQUcsR0FBRyxJQUFJQyxLQUFKLENBQVVKLEdBQVYsQ0FBWjtBQUNBRyxFQUFBQSxHQUFHLENBQUNELE1BQUosR0FBYUgsR0FBRyxDQUFDRyxNQUFqQjtBQUNBQyxFQUFBQSxHQUFHLENBQUNFLE1BQUosR0FBYSxNQUFiO0FBQ0FGLEVBQUFBLEdBQUcsQ0FBQ0csR0FBSixHQUFVUixNQUFNLENBQUNHLE1BQWpCO0FBQ0EsU0FBT0UsR0FBUDtBQUNEOztBQUVELFNBQVNJLE9BQVQsQ0FBaUJSLEdBQWpCLEVBQXNCO0FBQ3BCLE1BQU1TLElB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QUFDeUMsZ0JBQUosQ0FBcUIsa0JBQXJCLEVBQXlDLGdCQUF6QztBQUNEOztBQUVELE9BQUssSUFBTUMsQ0FBWCxJQUFnQkYsT0FBaEIsRUFBeUI7QUFDdkIsUUFBSUEsT0FBTyxDQUFDRyxjQUFSLENBQXVCRCxDQUF2QixLQUE2QkYsT0FBTyxDQUFDRSxDQUFELENBQVAsS0FBZSxJQUFoRCxFQUFzRDtBQUNwRDFDLE1BQUFBLEdBQUcsQ0FBQ3lDLGdCQUFKLENBQXFCQyxDQUFyQixFQUF3QkYsT0FBTyxDQUFDRSxDQUFELENBQS9CO0FBQ0Q7QUFDRjs7QUFDRDFDLEVBQUFBLEdBQUcsQ0FBQzRDLElBQUosQ0FBU3JCLFFBQVQ7QUFFQSxTQUFPO0FBQ0xzQixJQUFBQSxLQURLLG1CQUNHO0FBQ043QyxNQUFBQSxHQUFHLENBQUM2QyxLQUFKO0FBQ0Q7QUFISSxHQUFQO0FBS0QiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBnZXRFcnJvcihvcHRpb24sIHhocikge1xuICBjb25zdCBtc2cgPSBgY2Fubm90IHBvc3QgJHtvcHRpb24uYWN0aW9ufSAke3hoci5zdGF0dXN9J2A7XG4gIGNvbnN0IGVyciA9IG5ldyBFcnJvcihtc2cpO1xuICBlcnIuc3RhdHVzID0geGhyLnN0YXR1cztcbiAgZXJyLm1ldGhvZCA9ICdwb3N0JztcbiAgZXJyLnVybCA9IG9wdGlvbi5hY3Rpb247XG4gIHJldHVybiBlcnI7XG59XG5cbmZ1bmN0aW9uIGdldEJvZHkoeGhyKSB7XG4gIGNvbnN0IHRleHQgPSB4aHIucmVzcG9uc2VUZXh0IHx8IHhoci5yZXNwb25zZTtcbiAgaWYgKCF0ZXh0KSB7XG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cblxuICB0cnkge1xuICAgIHJldHVybiBKU09OLnBhcnNlKHRleHQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cbn1cblxuLy8gb3B0aW9uIHtcbi8vICBvblByb2dyZXNzOiAoZXZlbnQ6IHsgcGVyY2VudDogbnVtYmVyIH0pOiB2b2lkLFxuLy8gIG9uRXJyb3I6IChldmVudDogRXJyb3IsIGJvZHk/OiBPYmplY3QpOiB2b2lkLFxuLy8gIG9uU3VjY2VzczogKGJvZHk6IE9iamVjdCk6IHZvaWQsXG4vLyAgZGF0YTogT2JqZWN0LFxuLy8gIGZpbGVuYW1lOiBTdHJpbmcsXG4vLyAgZmlsZTogRmlsZSxcbi8vICB3aXRoQ3JlZGVudGlhbHM6IEJvb2xlYW4sXG4vLyAgYWN0aW9uOiBTdHJpbmcsXG4vLyAgaGVhZGVyczogT2JqZWN0LFxuLy8gfVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBsb2FkKG9wdGlvbikge1xuICBjb25zdCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICBpZiAob3B0aW9uLm9uUHJvZ3Jlc3MgJiYgeGhyLnVwbG9hZCkge1xuICAgIHhoci51cGxvYWQub25wcm9ncmVzcyA9IGZ1bmN0aW9uIHByb2dyZXNzKGUpIHtcbiAgICAgIGlmIChlLnRvdGFsID4gMCkge1xuICAgICAgICBlLnBlcmNlbnQgPSBlLmxvYWRlZCAvIGUudG90YWwgKiAxMDA7XG4gICAgICB9XG4gICAgICBvcHRpb24ub25Qcm9ncmVzcyhlKTtcbiAgICB9O1xuICB9XG5cbiAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcblxuICBpZiAob3B0aW9uLmRhdGEpIHtcbiAgICBPYmplY3Qua2V5cyhvcHRpb24uZGF0YSkubWFwKGtleSA9PiB7XG4gICAgICBmb3JtRGF0YS5hcHBlbmQoa2V5LCBvcHRpb24uZGF0YVtrZXldKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZvcm1EYXRhLmFwcGVuZChvcHRpb24uZmlsZW5hbWUsIG9wdGlvbi5maWxlKTtcblxuICB4aHIub25lcnJvciA9IGZ1bmN0aW9uIGVycm9yKGUpIHtcbiAgICBvcHRpb24ub25FcnJvcihlKTtcbiAgfTtcblxuICB4aHIub25sb2FkID0gZnVuY3Rpb24gb25sb2FkKCkge1xuICAgIC8vIGFsbG93IHN1Y2Nlc3Mgd2hlbiAyeHggc3RhdHVzXG4gICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdC1jb21wb25lbnQvdXBsb2FkL2lzc3Vlcy8zNFxuICAgIGlmICh4aHIuc3RhdHVzIDwgMjAwIHx8IHhoci5zdGF0dXMgPj0gMzAwKSB7XG4gICAgICByZXR1cm4gb3B0aW9uLm9uRXJyb3IoZ2V0RXJyb3Iob3B0aW9uLCB4aHIpLCBnZXRCb2R5KHhocikpO1xuICAgIH1cblxuICAgIG9wdGlvbi5vblN1Y2Nlc3MoZ2V0Qm9keSh4aHIpLCB4aHIpO1xuICB9O1xuXG5cbiAgeGhyLm9wZW4oJ3Bvc3QnLCBvcHRpb24uYWN0aW9uLCB0cnVlKTtcblxuICAvLyBIYXMgdG8gYmUgYWZ0ZXIgYC5vcGVuKClgLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2VueW8vZHJvcHpvbmUvaXNzdWVzLzE3OVxuICBpZiAob3B0aW9uLndpdGhDcmVkZW50aWFscyAmJiAnd2l0aENyZWRlbnRpYWxzJyBpbiB4aHIpIHtcbiAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgfVxuXG4gIGNvbnN0IGhlYWRlcnMgPSBvcHRpb24uaGVhZGVycyB8fCB7fTtcblxuICAvLyB3aGVuIHNldCBoZWFkZXJzWydYLVJlcXVlc3RlZC1XaXRoJ10gPSBudWxsICwgY2FuIGNsb3NlIGRlZmF1bHQgWEhSIGhlYWRlclxuICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LWNvbXBvbmVudC91cGxvYWQvaXNzdWVzLzMzXG4gIGlmIChoZWFkZXJzWydYLVJlcXVlc3RlZC1XaXRoJ10gIT09IG51bGwpIHtcbiAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignWC1SZXF1ZXN0ZWQtV2l0aCcsICdYTUxIdHRwUmVxdWVzdCcpO1xuICB9XG5cbiAgZm9yIChjb25zdCBoIGluIGhlYWRlcnMpIHtcbiAgICBpZiAoaGVhZGVycy5oYXNPd25Qcm9wZXJ0eShoKSAmJiBoZWFkZXJzW2hdICE9PSBudWxsKSB7XG4gICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihoLCBoZWFkZXJzW2hdKTtcbiAgICB9XG4gIH1cbiAgeGhyLnNlbmQoZm9ybURhdGEpO1xuXG4gIHJldHVybiB7XG4gICAgYWJvcnQoKSB7XG4gICAgICB4aHIuYWJvcnQoKTtcbiAgICB9LFxuICB9O1xufVxuIl19