{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components/rc-components/tree/Tree.tsx"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable */\n// TODO: https://www.w3.org/TR/2017/NOTE-wai-aria-practices-1.1-20171214/examples/treeview/treeview-2/treeview-2a.html\n// Fully accessibility support\n/**\n * most of it is move form the rc-tree ts lint pass the source code so there add the ts ignore\n */\n\n\n// tslint:disable\n// @ts-nocheck \n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport KeyCode from 'rc-util/lib/KeyCode';\nimport warning from '../../_util/warning';\nimport classNames from 'classnames';\nimport { polyfill } from 'react-lifecycles-compat';\n\nimport { TreeContext } from './contextTypes';\nimport {\n  getDataAndAria,\n  getDragNodesKeys,\n  parseCheckedKeys,\n  conductExpandParent,\n  calcSelectedKeys,\n  calcDropPosition,\n  arrAdd,\n  arrDel,\n  posToArr,\n} from './util';\nimport {\n  DataNode,\n  IconType,\n  Key,\n  FlattenNode,\n  DataEntity,\n  EventDataNode,\n  NodeInstance,\n  ScrollTo,\n} from './interface';\nimport {\n  flattenTreeData,\n  convertTreeToData,\n  convertDataToEntities,\n  warningWithoutKey,\n  convertNodePropsToEventData,\n  getTreeNodeProps,\n} from './utils/treeUtil';\nimport NodeList, { MOTION_KEY, MotionEntity, NodeListRef } from './NodeList';\nimport TreeNode from './TreeNode';\nimport { conductCheck } from './utils/conductUtil';\n\ninterface CheckInfo {\n  event: 'check';\n  node: EventDataNode;\n  checked: boolean;\n  nativeEvent: MouseEvent;\n  checkedNodes: DataNode[];\n  checkedNodesPositions?: { node: DataNode; pos: string }[];\n  halfCheckedKeys?: Key[];\n}\n\nexport interface TreeProps {\n  prefixCls: string;\n  className?: string;\n  style?: React.CSSProperties;\n  focusable?: boolean;\n  tabIndex?: number;\n  children?: React.ReactNode;\n  treeData?: DataNode[]; // Generate treeNode by children\n  showLine?: boolean;\n  showIcon?: boolean;\n  icon?: IconType;\n  selectable?: boolean;\n  disabled?: boolean;\n  multiple?: boolean;\n  checkable?: boolean | React.ReactNode;\n  checkStrictly?: boolean;\n  draggable?: boolean;\n  defaultExpandParent?: boolean;\n  autoExpandParent?: boolean;\n  defaultExpandAll?: boolean;\n  defaultExpandedKeys?: Key[];\n  expandedKeys?: Key[];\n  defaultCheckedKeys?: Key[];\n  checkedKeys?: Key[] | { checked: Key[]; halfChecked: Key[] };\n  defaultSelectedKeys?: Key[];\n  selectedKeys?: Key[];\n  onFocus?: React.FocusEventHandler<HTMLDivElement>;\n  onBlur?: React.FocusEventHandler<HTMLDivElement>;\n  onKeyDown?: React.KeyboardEventHandler<HTMLDivElement>;\n  onClick?: (e: React.MouseEvent, treeNode: EventDataNode) => void;\n  onDoubleClick?: (e: React.MouseEvent, treeNode: EventDataNode) => void;\n  onExpand?: (\n    expandedKeys: Key[],\n    info: {\n      node: EventDataNode;\n      expanded: boolean;\n      nativeEvent: MouseEvent;\n    },\n  ) => void;\n  onCheck?: (\n    checked: { checked: Key[]; halfChecked: Key[] } | Key[],\n    info: CheckInfo,\n  ) => void;\n  onSelect?: (\n    selectedKeys: Key[],\n    info: {\n      event: 'select';\n      selected: boolean;\n      node: EventDataNode;\n      selectedNodes: DataNode[];\n      nativeEvent: MouseEvent;\n    },\n  ) => void;\n  onLoad?: (\n    loadedKeys: Key[],\n    info: {\n      event: 'load';\n      node: EventDataNode;\n    },\n  ) => void;\n  loadData?: (treeNode: EventDataNode) => Promise<void>;\n  loadedKeys?: Key[];\n  onMouseEnter?: (info: {\n    event: React.MouseEvent;\n    node: EventDataNode;\n  }) => void;\n  onMouseLeave?: (info: {\n    event: React.MouseEvent;\n    node: EventDataNode;\n  }) => void;\n  onRightClick?: (info: {\n    event: React.MouseEvent;\n    node: EventDataNode;\n  }) => void;\n  onDragStart?: (info: {\n    event: React.MouseEvent;\n    node: EventDataNode;\n  }) => void;\n  onDragEnter?: (info: {\n    event: React.MouseEvent;\n    node: EventDataNode;\n    expandedKeys: Key[];\n  }) => void;\n  onDragOver?: (info: { event: React.MouseEvent; node: EventDataNode }) => void;\n  onDragLeave?: (info: {\n    event: React.MouseEvent;\n    node: EventDataNode;\n  }) => void;\n  onDragEnd?: (info: { event: React.MouseEvent; node: EventDataNode }) => void;\n  onDrop?: (info: {\n    event: React.MouseEvent;\n    node: EventDataNode;\n    dragNode: EventDataNode;\n    dragNodesKeys: Key[];\n    dropPosition: number;\n    dropToGap: boolean;\n  }) => void;\n  /**\n   * Used for `rc-tree-select` only.\n   * Do not use in your production code directly since this will be refactor.\n   */\n  onActiveChange?: (key: Key) => void;\n  filterTreeNode?: (treeNode: EventDataNode) => boolean;\n  motion?: any;\n  switcherIcon?: IconType;\n\n  // Virtual List\n  height?: number;\n  itemHeight?: number;\n  virtual?: boolean;\n}\n\ninterface TreeState {\n  keyEntities: Record<Key, DataEntity>;\n\n  selectedKeys: Key[];\n  checkedKeys: Key[];\n  halfCheckedKeys: Key[];\n  loadedKeys: Key[];\n  loadingKeys: Key[];\n  expandedKeys: Key[];\n\n  dragging: boolean;\n  dragNodesKeys: Key[];\n  dragOverNodeKey: Key;\n  dropPosition: number;\n\n  treeData: DataNode[];\n  flattenNodes: FlattenNode[];\n\n  focused: boolean;\n  activeKey: Key;\n\n  prevProps: TreeProps;\n}\n\nconst keyPropType = PropTypes.oneOfType([PropTypes.string, PropTypes.number]);\n\nclass Tree extends React.Component<TreeProps, TreeState> {\n  static propTypes = {\n    prefixCls: PropTypes.string,\n    className: PropTypes.string,\n    style: PropTypes.object,\n    tabIndex: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    children: PropTypes.any,\n    treeData: PropTypes.array, // Generate treeNode by children\n    showLine: PropTypes.bool,\n    showIcon: PropTypes.bool,\n    icon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n    selectable: PropTypes.bool,\n    disabled: PropTypes.bool,\n    multiple: PropTypes.bool,\n    checkable: PropTypes.oneOfType([PropTypes.bool, PropTypes.node]),\n    checkStrictly: PropTypes.bool,\n    draggable: PropTypes.bool,\n    defaultExpandParent: PropTypes.bool,\n    autoExpandParent: PropTypes.bool,\n    defaultExpandAll: PropTypes.bool,\n    defaultExpandedKeys: PropTypes.arrayOf(keyPropType),\n    expandedKeys: PropTypes.arrayOf(keyPropType),\n    defaultCheckedKeys: PropTypes.arrayOf(keyPropType),\n    checkedKeys: PropTypes.oneOfType([\n      PropTypes.arrayOf(keyPropType),\n      PropTypes.object,\n    ]),\n    defaultSelectedKeys: PropTypes.arrayOf(keyPropType),\n    selectedKeys: PropTypes.arrayOf(keyPropType),\n    onClick: PropTypes.func,\n    onDoubleClick: PropTypes.func,\n    onExpand: PropTypes.func,\n    onCheck: PropTypes.func,\n    onSelect: PropTypes.func,\n    onLoad: PropTypes.func,\n    loadData: PropTypes.func,\n    loadedKeys: PropTypes.arrayOf(keyPropType),\n    onMouseEnter: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onRightClick: PropTypes.func,\n    onDragStart: PropTypes.func,\n    onDragEnter: PropTypes.func,\n    onDragOver: PropTypes.func,\n    onDragLeave: PropTypes.func,\n    onDragEnd: PropTypes.func,\n    onDrop: PropTypes.func,\n    filterTreeNode: PropTypes.func,\n    motion: PropTypes.object,\n    switcherIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  };\n\n  static defaultProps = {\n    prefixCls: 'rc-tree',\n    showLine: false,\n    showIcon: true,\n    selectable: true,\n    multiple: false,\n    checkable: false,\n    disabled: false,\n    checkStrictly: false,\n    draggable: false,\n    defaultExpandParent: true,\n    autoExpandParent: false,\n    defaultExpandAll: false,\n    defaultExpandedKeys: [],\n    defaultCheckedKeys: [],\n    defaultSelectedKeys: [],\n  };\n\n  static TreeNode = TreeNode;\n\n  delayedDragEnterLogic: Record<Key, number>;\n\n  state: TreeState = {\n    keyEntities: {},\n\n    selectedKeys: [],\n    checkedKeys: [],\n    halfCheckedKeys: [],\n    loadedKeys: [],\n    loadingKeys: [],\n    expandedKeys: [],\n\n    dragging: false,\n    dragNodesKeys: [],\n    dragOverNodeKey: null,\n    dropPosition: null,\n\n    treeData: [],\n    flattenNodes: [],\n\n    focused: false,\n    activeKey: null,\n\n    prevProps: null,\n  };\n\n  dragNode: NodeInstance;\n\n  listRef = React.createRef<NodeListRef>();\n\n  static getDerivedStateFromProps(props: TreeProps, prevState: TreeState) {\n    const { prevProps } = prevState;\n    const newState: Partial<TreeState> = {\n      prevProps: props,\n    };\n\n    function needSync(name: string) {\n      return (\n        (!prevProps && name in props) ||\n        (prevProps && prevProps[name] !== props[name])\n      );\n    }\n\n    // ================== Tree Node ==================\n    let treeData: DataNode[];\n\n    // Check if `treeData` or `children` changed and save into the state.\n    if (needSync('treeData')) {\n      ({ treeData } = props);\n    } else if (needSync('children')) {\n      /**\n       * 后续可以考虑使用treeData 重构tree pro\n       */\n      // warning(\n      //   false,\n      //   '`children` of Tree is deprecated. Please use `treeData` instead.',\n      // );\n      treeData = convertTreeToData(props.children);\n    }\n\n    // Save flatten nodes info and convert `treeData` into keyEntities\n    if (treeData) {\n      newState.treeData = treeData;\n      const entitiesMap = convertDataToEntities(treeData);\n      newState.keyEntities = {\n        [MOTION_KEY]: MotionEntity,\n        ...entitiesMap.keyEntities,\n      };\n\n      // Warning if treeNode not provide key\n      if (process.env.NODE_ENV !== 'production') {\n        warningWithoutKey(treeData);\n      }\n    }\n\n    const keyEntities = newState.keyEntities || prevState.keyEntities;\n\n    // ================ expandedKeys =================\n    if (\n      needSync('expandedKeys') ||\n      (prevProps && needSync('autoExpandParent'))\n    ) {\n      newState.expandedKeys =\n        props.autoExpandParent || (!prevProps && props.defaultExpandParent)\n          ? conductExpandParent(props.expandedKeys, keyEntities)\n          : props.expandedKeys;\n    } else if (!prevProps && props.defaultExpandAll) {\n      const cloneKeyEntities = { ...keyEntities };\n      delete cloneKeyEntities[MOTION_KEY];\n      newState.expandedKeys = Object.keys(cloneKeyEntities).map(\n        key => cloneKeyEntities[key].key,\n      );\n    } else if (!prevProps && props.defaultExpandedKeys) {\n      newState.expandedKeys =\n        props.autoExpandParent || props.defaultExpandParent\n          ? conductExpandParent(props.defaultExpandedKeys, keyEntities)\n          : props.defaultExpandedKeys;\n    }\n\n    if (!newState.expandedKeys) {\n      delete newState.expandedKeys;\n    }\n\n    // ================ flattenNodes =================\n    if (treeData || newState.expandedKeys) {\n      const flattenNodes: FlattenNode[] = flattenTreeData(\n        treeData || prevState.treeData,\n        newState.expandedKeys || prevState.expandedKeys,\n      );\n      newState.flattenNodes = flattenNodes;\n    }\n\n    // ================ selectedKeys =================\n    if (props.selectable) {\n      if (needSync('selectedKeys')) {\n        newState.selectedKeys = calcSelectedKeys(props.selectedKeys, props);\n      } else if (!prevProps && props.defaultSelectedKeys) {\n        newState.selectedKeys = calcSelectedKeys(\n          props.defaultSelectedKeys,\n          props,\n        );\n      }\n    }\n\n    // ================= checkedKeys =================\n    if (props.checkable) {\n      let checkedKeyEntity;\n\n      if (needSync('checkedKeys')) {\n        checkedKeyEntity = parseCheckedKeys(props.checkedKeys) || {};\n      } else if (!prevProps && props.defaultCheckedKeys) {\n        checkedKeyEntity = parseCheckedKeys(props.defaultCheckedKeys) || {};\n      } else if (treeData) {\n        // If `treeData` changed, we also need check it\n        checkedKeyEntity = parseCheckedKeys(props.checkedKeys) || {\n          checkedKeys: prevState.checkedKeys,\n          halfCheckedKeys: prevState.halfCheckedKeys,\n        };\n      }\n\n      if (checkedKeyEntity) {\n        let { checkedKeys = [], halfCheckedKeys = [] } = checkedKeyEntity;\n\n        if (!props.checkStrictly) {\n          const conductKeys = conductCheck(checkedKeys, true, keyEntities);\n          ({ checkedKeys, halfCheckedKeys } = conductKeys);\n        }\n\n        newState.checkedKeys = checkedKeys;\n        newState.halfCheckedKeys = halfCheckedKeys;\n      }\n    }\n\n    // ================= loadedKeys ==================\n    if (needSync('loadedKeys')) {\n      newState.loadedKeys = props.loadedKeys;\n    }\n\n    return newState;\n  }\n\n  onNodeDragStart = (\n    event: React.MouseEvent<HTMLDivElement>,\n    node: NodeInstance,\n  ) => {\n    const { expandedKeys, keyEntities } = this.state;\n    const { onDragStart } = this.props;\n    const { eventKey } = node.props;\n\n    this.dragNode = node;\n\n    this.setState({\n      dragging: true,\n      dragNodesKeys: getDragNodesKeys(eventKey, keyEntities),\n      expandedKeys: arrDel(expandedKeys, eventKey),\n    });\n\n    if (onDragStart) {\n      onDragStart({ event, node: convertNodePropsToEventData(node.props) });\n    }\n  };\n\n  /**\n   * [Legacy] Select handler is less small than node,\n   * so that this will trigger when drag enter node or select handler.\n   * This is a little tricky if customize css without padding.\n   * Better for use mouse move event to refresh drag state.\n   * But let's just keep it to avoid event trigger logic change.\n   */\n  onNodeDragEnter = (\n    event: React.MouseEvent<HTMLDivElement>,\n    node: NodeInstance,\n  ) => {\n    const { expandedKeys, keyEntities } = this.state;\n    const { onDragEnter } = this.props;\n    const { pos, eventKey } = node.props;\n\n    if (!this.dragNode) return;\n\n    const dropPosition = calcDropPosition(event, node);\n\n    // Skip if drag node is self\n    if (this.dragNode.props.eventKey === eventKey && dropPosition === 0) {\n      this.setState({\n        dragOverNodeKey: '',\n        dropPosition: null,\n      });\n      return;\n    }\n\n    // Ref: https://github.com/react-component/tree/issues/132\n    // Add timeout to let onDragLevel fire before onDragEnter,\n    // so that we can clean drag props for onDragLeave node.\n    // Macro task for this:\n    // https://html.spec.whatwg.org/multipage/webappapis.html#clean-up-after-running-script\n    setTimeout(() => {\n      // Update drag over node\n      this.setState({\n        dragOverNodeKey: eventKey,\n        dropPosition,\n      });\n\n      // Side effect for delay drag\n      if (!this.delayedDragEnterLogic) {\n        this.delayedDragEnterLogic = {};\n      }\n      Object.keys(this.delayedDragEnterLogic).forEach(key => {\n        clearTimeout(this.delayedDragEnterLogic[key]);\n      });\n      this.delayedDragEnterLogic[pos] = window.setTimeout(() => {\n        if (!this.state.dragging) return;\n\n        let newExpandedKeys = [...expandedKeys];\n        const entity = keyEntities[eventKey];\n\n        if (entity && (entity.children || []).length) {\n          newExpandedKeys = arrAdd(expandedKeys, eventKey);\n        }\n\n        if (!('expandedKeys' in this.props)) {\n          this.setState({\n            expandedKeys: newExpandedKeys,\n          });\n        }\n\n        if (onDragEnter) {\n          onDragEnter({\n            event,\n            node: convertNodePropsToEventData(node.props),\n            expandedKeys: newExpandedKeys,\n          });\n        }\n      }, 400);\n    }, 0);\n  };\n\n  onNodeDragOver = (\n    event: React.MouseEvent<HTMLDivElement>,\n    node: NodeInstance,\n  ) => {\n    const { onDragOver } = this.props;\n    const { eventKey } = node.props;\n\n    // Update drag position\n    if (this.dragNode && eventKey === this.state.dragOverNodeKey) {\n      const dropPosition = calcDropPosition(event, node);\n\n      if (dropPosition === this.state.dropPosition) return;\n\n      this.setState({\n        dropPosition,\n      });\n    }\n\n    if (onDragOver) {\n      onDragOver({ event, node: convertNodePropsToEventData(node.props) });\n    }\n  };\n\n  onNodeDragLeave = (\n    event: React.MouseEvent<HTMLDivElement>,\n    node: NodeInstance,\n  ) => {\n    const { onDragLeave } = this.props;\n\n    this.setState({\n      dragOverNodeKey: '',\n    });\n\n    if (onDragLeave) {\n      onDragLeave({ event, node: convertNodePropsToEventData(node.props) });\n    }\n  };\n\n  onNodeDragEnd = (\n    event: React.MouseEvent<HTMLDivElement>,\n    node: NodeInstance,\n  ) => {\n    const { onDragEnd } = this.props;\n    this.setState({\n      dragOverNodeKey: '',\n    });\n    this.cleanDragState();\n\n    if (onDragEnd) {\n      onDragEnd({ event, node: convertNodePropsToEventData(node.props) });\n    }\n\n    this.dragNode = null;\n  };\n\n  onNodeDrop = (\n    event: React.MouseEvent<HTMLDivElement>,\n    node: NodeInstance,\n  ) => {\n    const { dragNodesKeys = [], dropPosition } = this.state;\n    const { onDrop } = this.props;\n    const { eventKey, pos } = node.props;\n\n    this.setState({\n      dragOverNodeKey: '',\n    });\n    this.cleanDragState();\n\n    if (dragNodesKeys.indexOf(eventKey) !== -1) {\n      warning(false, \"Can not drop to dragNode(include it's children node)\");\n      return;\n    }\n\n    const posArr = posToArr(pos);\n\n    const dropResult = {\n      event,\n      node: convertNodePropsToEventData(node.props),\n      dragNode: convertNodePropsToEventData(this.dragNode.props),\n      dragNodesKeys: dragNodesKeys.slice(),\n      dropPosition: dropPosition + Number(posArr[posArr.length - 1]),\n      dropToGap: false,\n    };\n\n    if (dropPosition !== 0) {\n      dropResult.dropToGap = true;\n    }\n\n    if (onDrop) {\n      onDrop(dropResult);\n    }\n\n    this.dragNode = null;\n  };\n\n  cleanDragState = () => {\n    const { dragging } = this.state;\n    if (dragging) {\n      this.setState({\n        dragging: false,\n      });\n    }\n  };\n\n  onNodeClick = (\n    e: React.MouseEvent<HTMLDivElement>,\n    treeNode: EventDataNode,\n  ) => {\n    const { onClick } = this.props;\n    if (onClick) {\n      onClick(e, treeNode);\n    }\n  };\n\n  onNodeDoubleClick = (\n    e: React.MouseEvent<HTMLDivElement>,\n    treeNode: EventDataNode,\n  ) => {\n    const { onDoubleClick } = this.props;\n    if (onDoubleClick) {\n      onDoubleClick(e, treeNode);\n    }\n  };\n\n  onNodeSelect = (\n    e: React.MouseEvent<HTMLDivElement>,\n    treeNode: EventDataNode,\n  ) => {\n    let { selectedKeys } = this.state;\n    const { keyEntities } = this.state;\n    const { onSelect, multiple } = this.props;\n    const { selected, key } = treeNode;\n    const targetSelected = !selected;\n\n    // Update selected keys\n    if (!targetSelected) {\n      selectedKeys = arrDel(selectedKeys, key);\n    } else if (!multiple) {\n      selectedKeys = [key];\n    } else {\n      selectedKeys = arrAdd(selectedKeys, key);\n    }\n\n    // [Legacy] Not found related usage in doc or upper libs\n    const selectedNodes = selectedKeys\n      .map(selectedKey => {\n        const entity = keyEntities[selectedKey];\n        if (!entity) return null;\n\n        return entity.node;\n      })\n      .filter(node => node);\n\n    this.setUncontrolledState({ selectedKeys });\n\n    if (onSelect) {\n      onSelect(selectedKeys, {\n        event: 'select',\n        selected: targetSelected,\n        node: treeNode,\n        selectedNodes,\n        nativeEvent: e.nativeEvent,\n      });\n    }\n  };\n\n  onNodeCheck = (\n    e: React.MouseEvent<HTMLDivElement>,\n    treeNode: EventDataNode,\n    checked: boolean,\n  ) => {\n    const {\n      keyEntities,\n      checkedKeys: oriCheckedKeys,\n      halfCheckedKeys: oriHalfCheckedKeys,\n    } = this.state;\n    const { checkStrictly, onCheck } = this.props;\n    const { key } = treeNode;\n\n    // Prepare trigger arguments\n    let checkedObj;\n    const eventObj: Partial<CheckInfo> = {\n      event: 'check',\n      node: treeNode,\n      checked,\n      nativeEvent: e.nativeEvent,\n    };\n\n    if (checkStrictly) {\n      const checkedKeys = checked\n        ? arrAdd(oriCheckedKeys, key)\n        : arrDel(oriCheckedKeys, key);\n      const halfCheckedKeys = arrDel(oriHalfCheckedKeys, key);\n      checkedObj = { checked: checkedKeys, halfChecked: halfCheckedKeys };\n\n      eventObj.checkedNodes = checkedKeys\n        .map(checkedKey => keyEntities[checkedKey])\n        .filter(entity => entity)\n        .map(entity => entity.node);\n\n      this.setUncontrolledState({ checkedKeys });\n    } else {\n      // Always fill first\n      let { checkedKeys, halfCheckedKeys } = conductCheck(\n        [...oriCheckedKeys, key],\n        true,\n        keyEntities,\n      );\n\n      // If remove, we do it again to correction\n      if (!checked) {\n        const keySet = new Set(checkedKeys);\n        keySet.delete(key);\n        ({ checkedKeys, halfCheckedKeys } = conductCheck(\n          Array.from(keySet),\n          { checked: false, halfCheckedKeys },\n          keyEntities,\n        ));\n      }\n\n      checkedObj = checkedKeys;\n\n      // [Legacy] This is used for `rc-tree-select`\n      eventObj.checkedNodes = [];\n      eventObj.checkedNodesPositions = [];\n      eventObj.halfCheckedKeys = halfCheckedKeys;\n\n      checkedKeys.forEach(checkedKey => {\n        const entity = keyEntities[checkedKey];\n        if (!entity) return;\n\n        const { node, pos } = entity;\n\n        eventObj.checkedNodes.push(node);\n        eventObj.checkedNodesPositions.push({ node, pos });\n      });\n\n      this.setUncontrolledState({\n        checkedKeys,\n        halfCheckedKeys,\n      });\n    }\n\n    if (onCheck) {\n      onCheck(checkedObj, eventObj as CheckInfo);\n    }\n  };\n\n  onNodeLoad = (treeNode: EventDataNode) =>\n    new Promise(resolve => {\n      // We need to get the latest state of loading/loaded keys\n      this.setState(({ loadedKeys = [], loadingKeys = [] }): any => {\n        const { loadData, onLoad } = this.props;\n        const { key } = treeNode;\n\n        if (\n          !loadData ||\n          loadedKeys.indexOf(key) !== -1 ||\n          loadingKeys.indexOf(key) !== -1\n        ) {\n          // react 15 will warn if return null\n          return {};\n        }\n\n        // Process load data\n        const promise = loadData(treeNode);\n        promise.then(() => {\n          const {\n            loadedKeys: currentLoadedKeys,\n            loadingKeys: currentLoadingKeys,\n          } = this.state;\n          const newLoadedKeys = arrAdd(currentLoadedKeys, key);\n          const newLoadingKeys = arrDel(currentLoadingKeys, key);\n\n          // onLoad should trigger before internal setState to avoid `loadData` trigger twice.\n          // https://github.com/ant-design/ant-design/issues/12464\n          if (onLoad) {\n            onLoad(newLoadedKeys, {\n              event: 'load',\n              node: treeNode,\n            });\n          }\n\n          this.setUncontrolledState({\n            loadedKeys: newLoadedKeys,\n          });\n          this.setState({\n            loadingKeys: newLoadingKeys,\n          });\n\n          resolve();\n        });\n\n        return {\n          loadingKeys: arrAdd(loadingKeys, key),\n        };\n      });\n    });\n\n  onNodeExpand = (\n    e: React.MouseEvent<HTMLDivElement>,\n    treeNode: EventDataNode,\n  ) => {\n    let { expandedKeys } = this.state;\n    const { treeData } = this.state;\n    const { onExpand, loadData } = this.props;\n    const { key, expanded } = treeNode;\n\n    // Update selected keys\n    const index = expandedKeys.indexOf(key);\n    const targetExpanded = !expanded;\n\n    warning(\n      (expanded && index !== -1) || (!expanded && index === -1),\n      'Expand state not sync with index check',\n    );\n\n    if (targetExpanded) {\n      expandedKeys = arrAdd(expandedKeys, key);\n    } else {\n      expandedKeys = arrDel(expandedKeys, key);\n    }\n\n    const flattenNodes: FlattenNode[] = flattenTreeData(treeData, expandedKeys);\n    this.setUncontrolledState({ expandedKeys, flattenNodes }, true);\n\n    if (onExpand) {\n      onExpand(expandedKeys, {\n        node: treeNode,\n        expanded: targetExpanded,\n        nativeEvent: e.nativeEvent,\n      });\n    }\n\n    // Async Load data\n    if (targetExpanded && loadData) {\n      const loadPromise = this.onNodeLoad(treeNode);\n      return loadPromise\n        ? loadPromise.then(() => {\n            // [Legacy] Refresh logic\n            const newFlattenTreeData = flattenTreeData(\n              this.state.treeData,\n              expandedKeys,\n            );\n            this.setUncontrolledState({ flattenNodes: newFlattenTreeData });\n          })\n        : null;\n    }\n\n    return null;\n  };\n\n  onNodeMouseEnter = (\n    event: React.MouseEvent<HTMLDivElement>,\n    node: EventDataNode,\n  ) => {\n    const { onMouseEnter } = this.props;\n    if (onMouseEnter) {\n      onMouseEnter({ event, node });\n    }\n  };\n\n  onNodeMouseLeave = (\n    event: React.MouseEvent<HTMLDivElement>,\n    node: EventDataNode,\n  ) => {\n    const { onMouseLeave } = this.props;\n    if (onMouseLeave) {\n      onMouseLeave({ event, node });\n    }\n  };\n\n  onNodeContextMenu = (\n    event: React.MouseEvent<HTMLDivElement>,\n    node: EventDataNode,\n  ) => {\n    const { onRightClick } = this.props;\n    if (onRightClick) {\n      event.preventDefault();\n      onRightClick({ event, node });\n    }\n  };\n\n  onFocus: React.FocusEventHandler<HTMLDivElement> = (...args) => {\n    const { onFocus } = this.props;\n    this.setState({ focused: true });\n\n    if (onFocus) {\n      onFocus(...args);\n    }\n  };\n\n  onBlur: React.FocusEventHandler<HTMLDivElement> = (...args) => {\n    const { onBlur } = this.props;\n    this.setState({ focused: false });\n    this.onActiveChange(null);\n\n    if (onBlur) {\n      onBlur(...args);\n    }\n  };\n\n  getTreeNodeRequiredProps = () => {\n    const {\n      expandedKeys,\n      selectedKeys,\n      loadedKeys,\n      loadingKeys,\n      checkedKeys,\n      halfCheckedKeys,\n      dragOverNodeKey,\n      dropPosition,\n      keyEntities,\n    } = this.state;\n    return {\n      expandedKeys: expandedKeys || [],\n      selectedKeys: selectedKeys || [],\n      loadedKeys: loadedKeys || [],\n      loadingKeys: loadingKeys || [],\n      checkedKeys: checkedKeys || [],\n      halfCheckedKeys: halfCheckedKeys || [],\n      dragOverNodeKey,\n      dropPosition,\n      keyEntities,\n    };\n  };\n\n  // =========================== Keyboard ===========================\n  onActiveChange = (activeKey: Key) => {\n    const { onActiveChange } = this.props;\n\n    this.setState({ activeKey });\n    if (activeKey !== null) {\n      this.scrollTo({ key: activeKey });\n    }\n\n    if (onActiveChange) {\n      onActiveChange(activeKey);\n    }\n  };\n\n  getActiveItem = () => {\n    const { activeKey, flattenNodes } = this.state;\n    if (activeKey === null) {\n      return null;\n    }\n\n    return flattenNodes.find(({ data: { key } }) => key === activeKey) || null;\n  };\n\n  offsetActiveKey = (offset: number) => {\n    const { flattenNodes, activeKey } = this.state;\n\n    let index = flattenNodes.findIndex(\n      ({ data: { key } }) => key === activeKey,\n    );\n\n    // Align with index\n    if (index === -1 && offset < 0) {\n      index = flattenNodes.length;\n    }\n\n    index = (index + offset + flattenNodes.length) % flattenNodes.length;\n\n    const item = flattenNodes[index];\n    if (item) {\n      const { key } = item.data;\n      this.onActiveChange(key);\n    } else {\n      this.onActiveChange(null);\n    }\n  };\n\n  onKeyDown: React.KeyboardEventHandler<HTMLDivElement> = event => {\n    const { activeKey, expandedKeys, checkedKeys } = this.state;\n    const { onKeyDown, checkable, selectable } = this.props;\n\n    // >>>>>>>>>> Direction\n    switch (event.which) {\n      case KeyCode.UP: {\n        this.offsetActiveKey(-1);\n        event.preventDefault();\n        break;\n      }\n      case KeyCode.DOWN: {\n        this.offsetActiveKey(1);\n        event.preventDefault();\n        break;\n      }\n    }\n\n    // >>>>>>>>>> Expand & Selection\n    const activeItem = this.getActiveItem();\n    if (activeItem && activeItem.data) {\n      const treeNodeRequiredProps = this.getTreeNodeRequiredProps();\n\n      const expandable =\n        activeItem.data.isLeaf === false ||\n        !!(activeItem.data.children || []).length;\n      const eventNode = convertNodePropsToEventData({\n        ...getTreeNodeProps(activeKey, treeNodeRequiredProps),\n        data: activeItem.data,\n        active: true,\n      });\n\n      switch (event.which) {\n        // >>> Expand\n        case KeyCode.LEFT: {\n          // Collapse if possible\n          if (expandable && expandedKeys.includes(activeKey)) {\n            this.onNodeExpand(\n              {} as React.MouseEvent<HTMLDivElement>,\n              eventNode,\n            );\n          } else if (activeItem.parent) {\n            this.onActiveChange(activeItem.parent.data.key);\n          }\n          event.preventDefault();\n          break;\n        }\n        case KeyCode.RIGHT: {\n          // Expand if possible\n          if (expandable && !expandedKeys.includes(activeKey)) {\n            this.onNodeExpand(\n              {} as React.MouseEvent<HTMLDivElement>,\n              eventNode,\n            );\n          } else if (activeItem.children && activeItem.children.length) {\n            this.onActiveChange(activeItem.children[0].data.key);\n          }\n          event.preventDefault();\n          break;\n        }\n\n        // Selection\n        case KeyCode.ENTER:\n        case KeyCode.SPACE: {\n          if (\n            checkable &&\n            !eventNode.disabled &&\n            eventNode.checkable !== false &&\n            !eventNode.disableCheckbox\n          ) {\n            this.onNodeCheck(\n              {} as React.MouseEvent<HTMLDivElement>,\n              eventNode,\n              !checkedKeys.includes(activeKey),\n            );\n          } else if (\n            !checkable &&\n            selectable &&\n            !eventNode.disabled &&\n            eventNode.selectable !== false\n          ) {\n            this.onNodeSelect(\n              {} as React.MouseEvent<HTMLDivElement>,\n              eventNode,\n            );\n          }\n          break;\n        }\n      }\n    }\n\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n  };\n\n  /**\n   * Only update the value which is not in props\n   */\n  setUncontrolledState = (\n    state: Partial<TreeState>,\n    atomic: boolean = false,\n  ) => {\n    let needSync = false;\n    let allPassed = true;\n    const newState = {};\n\n    Object.keys(state).forEach(name => {\n      if (name in this.props) {\n        allPassed = false;\n        return;\n      }\n\n      needSync = true;\n      newState[name] = state[name];\n    });\n\n    if (needSync && (!atomic || allPassed)) {\n      this.setState(newState);\n    }\n  };\n\n  scrollTo: ScrollTo = scroll => {\n    this.listRef.current.scrollTo(scroll);\n  };\n\n  render() {\n    const {\n      focused,\n      flattenNodes,\n      keyEntities,\n      dragging,\n      activeKey,\n    } = this.state;\n    const {\n      prefixCls,\n      className,\n      style,\n      showLine,\n      focusable,\n      tabIndex = 0,\n      selectable,\n      showIcon,\n      icon,\n      switcherIcon,\n      draggable,\n      checkable,\n      checkStrictly,\n      disabled,\n      motion,\n      loadData,\n      filterTreeNode,\n      height,\n      itemHeight,\n      virtual,\n    } = this.props;\n    const domProps: React.HTMLAttributes<HTMLDivElement> = getDataAndAria(\n      this.props,\n    );\n\n    return (\n      <TreeContext.Provider\n        value={{\n          prefixCls,\n          selectable,\n          showIcon,\n          icon,\n          switcherIcon,\n          draggable,\n          checkable,\n          checkStrictly,\n          disabled,\n          keyEntities,\n\n          loadData,\n          filterTreeNode,\n\n          onNodeClick: this.onNodeClick,\n          onNodeDoubleClick: this.onNodeDoubleClick,\n          onNodeExpand: this.onNodeExpand,\n          onNodeSelect: this.onNodeSelect,\n          onNodeCheck: this.onNodeCheck,\n          onNodeLoad: this.onNodeLoad,\n          onNodeMouseEnter: this.onNodeMouseEnter,\n          onNodeMouseLeave: this.onNodeMouseLeave,\n          onNodeContextMenu: this.onNodeContextMenu,\n          onNodeDragStart: this.onNodeDragStart,\n          onNodeDragEnter: this.onNodeDragEnter,\n          onNodeDragOver: this.onNodeDragOver,\n          onNodeDragLeave: this.onNodeDragLeave,\n          onNodeDragEnd: this.onNodeDragEnd,\n          onNodeDrop: this.onNodeDrop,\n        }}\n      >\n        <div\n          className={classNames(prefixCls, className, {\n            [`${prefixCls}-show-line`]: showLine,\n            [`${prefixCls}-focused`]: focused,\n            [`${prefixCls}-active-focused`]: activeKey !== null,\n          })}\n        >\n          <NodeList\n            ref={this.listRef}\n            prefixCls={prefixCls}\n            style={style}\n            data={flattenNodes}\n            disabled={disabled}\n            selectable={selectable}\n            checkable={checkable ? 1:0 } // React对boolean类型的attribute的识别方式问题，可以采用以下方法解决：xxx={value ? 1 : 0}\n            motion={motion}\n            dragging={dragging}\n            height={height}\n            itemHeight={itemHeight}\n            virtual={virtual}\n            focusable={focusable}\n            focused={focused}\n            tabIndex={tabIndex}\n            activeItem={this.getActiveItem()}\n            onFocus={this.onFocus}\n            onBlur={this.onBlur}\n            onKeyDown={this.onKeyDown}\n            onActiveChange={this.onActiveChange}\n            {...this.getTreeNodeRequiredProps()}\n            {...domProps}\n          />\n        </div>\n      </TreeContext.Provider>\n    );\n  }\n}\n\npolyfill(Tree);\n\nexport default Tree;\n"]}