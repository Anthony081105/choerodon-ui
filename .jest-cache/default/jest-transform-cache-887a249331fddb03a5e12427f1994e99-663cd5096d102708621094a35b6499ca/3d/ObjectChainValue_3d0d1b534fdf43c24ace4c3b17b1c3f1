aa9b4efffee98daf09b7489f32046ba4
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.get = get;
exports.set = set;
exports.remove = remove;

var _isObject = _interopRequireDefault(require("lodash/isObject"));

var _mobx = require("mobx");

var _MobxUtils = require("./MobxUtils");

function get(obj, prop) {
  var index = prop.indexOf('.');

  if (index !== -1) {
    var key = prop.slice(0, index);
    var restKey = prop.slice(index + 1);
    var value = (0, _MobxUtils.mobxGet)(obj, key);

    if ((0, _mobx.isArrayLike)(value)) {
      return value.map(function (item) {
        return get(item, restKey);
      }).filter(function (item) {
        return !!item;
      });
    }

    if ((0, _isObject["default"])(value)) {
      return get(value, restKey);
    }
  } else {
    return (0, _MobxUtils.mobxGet)(obj, prop);
  }
}

function set(data, prop, value) {
  var fields = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _mobx.observable.map();
  var index = prop.indexOf('.');

  if (index !== -1) {
    var key = prop.slice(0, index);

    if (!data[key] && value !== undefined) {
      var field = fields.get(key);

      if (field && field.get('multiple')) {
        (0, _MobxUtils.mobxSet)(data, key, []);
      } else {
        (0, _MobxUtils.mobxSet)(data, key, {});
      }
    }

    var obj = (0, _MobxUtils.mobxGet)(data, key);

    if ((0, _mobx.isArrayLike)(obj)) {
      if ((0, _mobx.isArrayLike)(value)) {
        value.forEach(function (item, i) {
          if (!obj[i]) {
            obj.push({});
          }

          set(obj[i], prop.slice(index + 1), item);
        });
      }
    } else if ((0, _isObject["default"])(obj)) {
      set(obj, prop.slice(index + 1), value);
    }
  } else {
    (0, _MobxUtils.mobxSet)(data, prop, value);
  }
}

function remove(obj, prop) {
  var index = prop.indexOf('.');

  if (index !== -1) {
    var value = (0, _MobxUtils.mobxGet)(obj, prop.slice(0, index));

    if (value) {
      var restKey = prop.slice(index + 1);

      if ((0, _mobx.isArrayLike)(value)) {
        value.forEach(function (item) {
          return remove(item, restKey);
        });
      } else if ((0, _isObject["default"])(value)) {
        remove(value, restKey);
      }
    }
  } else {
    (0, _MobxUtils.mobxRemove)(obj, prop);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9odWlodWF3ay9Eb2N1bWVudHMvb3B0L2Nob2Vyb2Rvbi11aS9jb21wb25lbnRzLXByby9fdXRpbC9PYmplY3RDaGFpblZhbHVlLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUdNLFNBQVUsR0FBVixDQUFjLEdBQWQsRUFBMkIsSUFBM0IsRUFBdUM7QUFDM0MsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQUwsQ0FBYSxHQUFiLENBQWQ7O0FBQ0EsTUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFmLEVBQWtCO0FBQ2hCLFFBQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFMLENBQVcsQ0FBWCxFQUFjLEtBQWQsQ0FBWjtBQUNBLFFBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFMLENBQVcsS0FBSyxHQUFHLENBQW5CLENBQWhCO0FBQ0EsUUFBTSxLQUFLLEdBQUcsd0JBQVEsR0FBUixFQUFhLEdBQWIsQ0FBZDs7QUFDQSxRQUFJLHVCQUFZLEtBQVosQ0FBSixFQUF3QjtBQUN0QixhQUFPLEtBQUssQ0FBQyxHQUFOLENBQVUsVUFBQSxJQUFJO0FBQUEsZUFBSSxHQUFHLENBQUMsSUFBRCxFQUFPLE9BQVAsQ0FBUDtBQUFBLE9BQWQsRUFBc0MsTUFBdEMsQ0FBNkMsVUFBQSxJQUFJO0FBQUEsZUFBSSxDQUFDLENBQUMsSUFBTjtBQUFBLE9BQWpELENBQVA7QUFDRDs7QUFDRCxRQUFJLDBCQUFTLEtBQVQsQ0FBSixFQUFxQjtBQUNuQixhQUFPLEdBQUcsQ0FBQyxLQUFELEVBQVEsT0FBUixDQUFWO0FBQ0Q7QUFDRixHQVZELE1BVU87QUFDTCxXQUFPLHdCQUFRLEdBQVIsRUFBYSxJQUFiLENBQVA7QUFDRDtBQUNGOztBQUVLLFNBQVUsR0FBVixDQUNKLElBREksRUFFSixJQUZJLEVBR0osS0FISSxFQUk0QztBQUFBLE1BQWhELE1BQWdELHVFQUEvQixpQkFBVyxHQUFYLEVBQStCO0FBRWhELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFMLENBQWEsR0FBYixDQUFkOztBQUNBLE1BQUksS0FBSyxLQUFLLENBQUMsQ0FBZixFQUFrQjtBQUNoQixRQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBTCxDQUFXLENBQVgsRUFBYyxLQUFkLENBQVo7O0FBQ0EsUUFBSSxDQUFDLElBQUksQ0FBQyxHQUFELENBQUwsSUFBYyxLQUFLLEtBQUssU0FBNUIsRUFBdUM7QUFDckMsVUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLEdBQVAsQ0FBVyxHQUFYLENBQWQ7O0FBQ0EsVUFBSSxLQUFLLElBQUksS0FBSyxDQUFDLEdBQU4sQ0FBVSxVQUFWLENBQWIsRUFBb0M7QUFDbEMsZ0NBQVEsSUFBUixFQUFjLEdBQWQsRUFBbUIsRUFBbkI7QUFDRCxPQUZELE1BRU87QUFDTCxnQ0FBUSxJQUFSLEVBQWMsR0FBZCxFQUFtQixFQUFuQjtBQUNEO0FBQ0Y7O0FBQ0QsUUFBTSxHQUFHLEdBQUcsd0JBQVEsSUFBUixFQUFjLEdBQWQsQ0FBWjs7QUFDQSxRQUFJLHVCQUFZLEdBQVosQ0FBSixFQUFzQjtBQUNwQixVQUFJLHVCQUFZLEtBQVosQ0FBSixFQUF3QjtBQUN0QixRQUFBLEtBQUssQ0FBQyxPQUFOLENBQWMsVUFBQyxJQUFELEVBQU8sQ0FBUCxFQUFZO0FBQ3hCLGNBQUksQ0FBQyxHQUFHLENBQUMsQ0FBRCxDQUFSLEVBQWE7QUFDWCxZQUFBLEdBQUcsQ0FBQyxJQUFKLENBQVMsRUFBVDtBQUNEOztBQUNELFVBQUEsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFELENBQUosRUFBUyxJQUFJLENBQUMsS0FBTCxDQUFXLEtBQUssR0FBRyxDQUFuQixDQUFULEVBQWdDLElBQWhDLENBQUg7QUFDRCxTQUxEO0FBTUQ7QUFDRixLQVRELE1BU08sSUFBSSwwQkFBUyxHQUFULENBQUosRUFBbUI7QUFDeEIsTUFBQSxHQUFHLENBQUMsR0FBRCxFQUFNLElBQUksQ0FBQyxLQUFMLENBQVcsS0FBSyxHQUFHLENBQW5CLENBQU4sRUFBNkIsS0FBN0IsQ0FBSDtBQUNEO0FBQ0YsR0F2QkQsTUF1Qk87QUFDTCw0QkFBUSxJQUFSLEVBQWMsSUFBZCxFQUFvQixLQUFwQjtBQUNEO0FBQ0Y7O0FBRUssU0FBVSxNQUFWLENBQWlCLEdBQWpCLEVBQThCLElBQTlCLEVBQTBDO0FBQzlDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFMLENBQWEsR0FBYixDQUFkOztBQUNBLE1BQUksS0FBSyxLQUFLLENBQUMsQ0FBZixFQUFrQjtBQUNoQixRQUFNLEtBQUssR0FBRyx3QkFBUSxHQUFSLEVBQWEsSUFBSSxDQUFDLEtBQUwsQ0FBVyxDQUFYLEVBQWMsS0FBZCxDQUFiLENBQWQ7O0FBQ0EsUUFBSSxLQUFKLEVBQVc7QUFDVCxVQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBTCxDQUFXLEtBQUssR0FBRyxDQUFuQixDQUFoQjs7QUFDQSxVQUFJLHVCQUFZLEtBQVosQ0FBSixFQUF3QjtBQUN0QixRQUFBLEtBQUssQ0FBQyxPQUFOLENBQWMsVUFBQSxJQUFJO0FBQUEsaUJBQUksTUFBTSxDQUFDLElBQUQsRUFBTyxPQUFQLENBQVY7QUFBQSxTQUFsQjtBQUNELE9BRkQsTUFFTyxJQUFJLDBCQUFTLEtBQVQsQ0FBSixFQUFxQjtBQUMxQixRQUFBLE1BQU0sQ0FBQyxLQUFELEVBQVEsT0FBUixDQUFOO0FBQ0Q7QUFDRjtBQUNGLEdBVkQsTUFVTztBQUNMLCtCQUFXLEdBQVgsRUFBZ0IsSUFBaEI7QUFDRDtBQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGlzT2JqZWN0IGZyb20gJ2xvZGFzaC9pc09iamVjdCc7XG5pbXBvcnQgeyBpc0FycmF5TGlrZSwgb2JzZXJ2YWJsZSB9IGZyb20gJ21vYngnO1xuaW1wb3J0IHsgbW9ieEdldCwgbW9ieFJlbW92ZSwgbW9ieFNldCB9IGZyb20gJy4vTW9ieFV0aWxzJztcbmltcG9ydCBGaWVsZCwgeyBGaWVsZHMgfSBmcm9tICcuLi9kYXRhLXNldC9GaWVsZCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXQob2JqOiBvYmplY3QsIHByb3A6IHN0cmluZyk6IGFueSB7XG4gIGNvbnN0IGluZGV4ID0gcHJvcC5pbmRleE9mKCcuJyk7XG4gIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICBjb25zdCBrZXkgPSBwcm9wLnNsaWNlKDAsIGluZGV4KTtcbiAgICBjb25zdCByZXN0S2V5ID0gcHJvcC5zbGljZShpbmRleCArIDEpO1xuICAgIGNvbnN0IHZhbHVlID0gbW9ieEdldChvYmosIGtleSk7XG4gICAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlLm1hcChpdGVtID0+IGdldChpdGVtLCByZXN0S2V5KSkuZmlsdGVyKGl0ZW0gPT4gISFpdGVtKTtcbiAgICB9XG4gICAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGdldCh2YWx1ZSwgcmVzdEtleSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBtb2J4R2V0KG9iaiwgcHJvcCk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldChcbiAgZGF0YTogb2JqZWN0LFxuICBwcm9wOiBzdHJpbmcsXG4gIHZhbHVlOiBhbnksXG4gIGZpZWxkczogRmllbGRzID0gb2JzZXJ2YWJsZS5tYXA8c3RyaW5nLCBGaWVsZD4oKSxcbik6IGFueSB7XG4gIGNvbnN0IGluZGV4ID0gcHJvcC5pbmRleE9mKCcuJyk7XG4gIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICBjb25zdCBrZXkgPSBwcm9wLnNsaWNlKDAsIGluZGV4KTtcbiAgICBpZiAoIWRhdGFba2V5XSAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zdCBmaWVsZCA9IGZpZWxkcy5nZXQoa2V5KTtcbiAgICAgIGlmIChmaWVsZCAmJiBmaWVsZC5nZXQoJ211bHRpcGxlJykpIHtcbiAgICAgICAgbW9ieFNldChkYXRhLCBrZXksIFtdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1vYnhTZXQoZGF0YSwga2V5LCB7fSk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IG9iaiA9IG1vYnhHZXQoZGF0YSwga2V5KTtcbiAgICBpZiAoaXNBcnJheUxpa2Uob2JqKSkge1xuICAgICAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSkge1xuICAgICAgICB2YWx1ZS5mb3JFYWNoKChpdGVtLCBpKSA9PiB7XG4gICAgICAgICAgaWYgKCFvYmpbaV0pIHtcbiAgICAgICAgICAgIG9iai5wdXNoKHt9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2V0KG9ialtpXSwgcHJvcC5zbGljZShpbmRleCArIDEpLCBpdGVtKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc09iamVjdChvYmopKSB7XG4gICAgICBzZXQob2JqLCBwcm9wLnNsaWNlKGluZGV4ICsgMSksIHZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbW9ieFNldChkYXRhLCBwcm9wLCB2YWx1ZSk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZShvYmo6IG9iamVjdCwgcHJvcDogc3RyaW5nKSB7XG4gIGNvbnN0IGluZGV4ID0gcHJvcC5pbmRleE9mKCcuJyk7XG4gIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICBjb25zdCB2YWx1ZSA9IG1vYnhHZXQob2JqLCBwcm9wLnNsaWNlKDAsIGluZGV4KSk7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBjb25zdCByZXN0S2V5ID0gcHJvcC5zbGljZShpbmRleCArIDEpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSkge1xuICAgICAgICB2YWx1ZS5mb3JFYWNoKGl0ZW0gPT4gcmVtb3ZlKGl0ZW0sIHJlc3RLZXkpKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHJlbW92ZSh2YWx1ZSwgcmVzdEtleSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG1vYnhSZW1vdmUob2JqLCBwcm9wKTtcbiAgfVxufVxuIl19