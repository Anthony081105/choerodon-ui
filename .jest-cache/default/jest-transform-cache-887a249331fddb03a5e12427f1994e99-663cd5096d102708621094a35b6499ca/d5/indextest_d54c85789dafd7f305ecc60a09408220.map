{"version":3,"sources":["index.test.js"],"names":["TextArea","Input","describe","it","wrapper","expect","toMatchSnapshot","beforeAll","jest","useFakeTimers","afterAll","useRealTimers","mockFunc","spyOn","instance","setProps","value","runAllTimers","toHaveBeenCalledTimes","Demo","form","props","resetFields","getFieldDecorator","reset","React","Component","DemoForm","Form","create","find","simulate","target","prop","toBe"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { mount } from 'enzyme';\nimport Input from '..';\nimport Form from '../../form';\nimport focusTest from '../../../tests/shared/focusTest';\n\nconst { TextArea } = Input;\n\ndescribe('Input', () => {\n  focusTest(Input);\n\n  it('should support maxLength', () => {\n    const wrapper = mount(<Input maxLength=\"3\" />);\n    expect(wrapper).toMatchSnapshot();\n  });\n});\n\nfocusTest(TextArea);\n\ndescribe('TextArea', () => {\n  beforeAll(() => {\n    jest.useFakeTimers();\n  });\n\n  afterAll(() => {\n    jest.useRealTimers();\n  });\n\n  it('should auto calculate height according to content length', () => {\n    const wrapper = mount(<TextArea value=\"\" readOnly autosize />);\n    const mockFunc = jest.spyOn(wrapper.instance(), 'resizeTextarea');\n    wrapper.setProps({ value: '1111\\n2222\\n3333' });\n    jest.runAllTimers();\n    expect(mockFunc).toHaveBeenCalledTimes(1);\n    wrapper.setProps({ value: '1111' });\n    jest.runAllTimers();\n    expect(mockFunc).toHaveBeenCalledTimes(2);\n  });\n\n  it('should support disabled', () => {\n    const wrapper = mount(<TextArea disabled />);\n    expect(wrapper).toMatchSnapshot();\n  });\n\n  it('should support maxLength', () => {\n    const wrapper = mount(<TextArea maxLength=\"10\" />);\n    expect(wrapper).toMatchSnapshot();\n  });\n});\n\ndescribe('As Form Control', () => {\n  it('should be reset when wrapped in form.getFieldDecorator without initialValue', () => {\n    class Demo extends React.Component {\n      reset = () => {\n        const { form } = this.props;\n        form.resetFields();\n      };\n\n      render() {\n        const {\n          form: { getFieldDecorator },\n        } = this.props;\n        return (\n          <Form>\n            <Form.Item>{getFieldDecorator('input')(<Input />)}</Form.Item>\n            <Form.Item>{getFieldDecorator('textarea')(<Input.TextArea />)}</Form.Item>\n            <button type=\"button\" onClick={this.reset}>\n              reset\n            </button>\n          </Form>\n        );\n      }\n    }\n    const DemoForm = Form.create()(Demo);\n    const wrapper = mount(<DemoForm />);\n    wrapper.find('input').simulate('change', { target: { value: '111' } });\n    wrapper.find('textarea').simulate('change', { target: { value: '222' } });\n    expect(wrapper.find('input').prop('value')).toBe('111');\n    expect(wrapper.find('textarea').prop('value')).toBe('222');\n    wrapper.find('button').simulate('click');\n    expect(wrapper.find('input').prop('value')).toBe('');\n    expect(wrapper.find('textarea').prop('value')).toBe('');\n  });\n});\n\ndescribe('Input.Search', () => {\n  it('should support suffix', () => {\n    const wrapper = mount(<Input.Search suffix=\"suffix\" />);\n    expect(wrapper).toMatchSnapshot();\n  });\n});\n"]}