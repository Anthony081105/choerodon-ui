{"version":3,"sources":["formatter/formatReactTemplate.js"],"names":["result","Object","node","map","stringText","placeholder","length","textArr","index","isString","createElement","Fragment"],"mappings":";;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AACA,IAAA,eAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,iBAAA,CAAA,CAAA;;AACA,IAAA,SAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,iBAAA,CAAA,CAAA;;AACA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA;;AACA,IAAA,QAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,CAAA;;AACe,SAAA,mBAAA,CAAA,QAAA,EAAA,GAAA,EAA4C;AACvD,MAAIA,MAAM,GAAG,CAAb,QAAa,CAAb;AACAC,EAAAA,MAAM,CAANA,IAAAA,CAAAA,GAAAA,EAAAA,OAAAA,CAAyB,UAAA,GAAA,EAAO;AAC5B,QAAMC,IAAI,GAAGC,GAAG,CAAhB,GAAgB,CAAhB;;AACA,QAAI,CAAC,CAAA,GAAA,MAAA,CAAA,SAAA,CAAA,EAAL,IAAK,CAAL,EAAkB;AACdH,MAAAA,MAAM,GAAG,CAAA,GAAA,QAAA,CAAA,SAAA,CAAA,EAAA,MAAA,EAAgB,UAAA,IAAA,EAAQ;AAC7B,YAAI,CAAA,GAAA,SAAA,CAAA,SAAA,CAAA,EAAJ,IAAI,CAAJ,EAAoB;AAChB,cAAII,UAAU,GAAd,IAAA;;AACA,cAAI,CAAA,GAAA,MAAA,CAAA,cAAA,EAAJ,IAAI,CAAJ,EAA0B;AACtB,gBAAMC,WAAW,GAAA,IAAA,MAAA,CAAA,GAAA,EAAjB,GAAiB,CAAjB;AADsB,gBAEdC,MAFc,GAEHD,WAFG,CAAA,MAAA;AAGtB,gBAAME,OAAO,GAAb,EAAA;AACA,gBAAIC,KAAK,GAAGJ,UAAU,CAAVA,OAAAA,CAAZ,WAAYA,CAAZ;;AACA,mBAAOI,KAAK,GAAG,CAAf,CAAA,EAAmB;AACf,kBAAIA,KAAK,GAAT,CAAA,EAAe;AACXD,gBAAAA,OAAO,CAAPA,IAAAA,CAAaH,UAAU,CAAVA,KAAAA,CAAAA,CAAAA,EAAbG,KAAaH,CAAbG;AACH;;AACDA,cAAAA,OAAO,CAAPA,IAAAA,CAAAA,IAAAA;AACAH,cAAAA,UAAU,GAAGA,UAAU,CAAVA,KAAAA,CAAiBI,KAAK,GAAnCJ,MAAaA,CAAbA;AACAI,cAAAA,KAAK,GAAGJ,UAAU,CAAVA,OAAAA,CAARI,WAAQJ,CAARI;AACH;;AACD,gBAAA,UAAA,EAAgB;AACZD,cAAAA,OAAO,CAAPA,IAAAA,CAAAA,UAAAA;AACH;;AACD,mBAAA,OAAA;AACH;;AACD,iBAAO,CAAA,GAAA,eAAA,CAAA,SAAA,CAAA,EAAA,IAAA,EAAP,GAAO,CAAP;AACH;;AACD,eAAA,IAAA;AAvBJP,OAAS,CAATA;AAyBH;AA5BLC,GAAAA;;AA8BA,MAAID,MAAM,CAANA,KAAAA,CAAaS,SAAAA,CAAjB,SAAiBA,CAAbT,CAAJ,EAA4B;AACxB,WAAOA,MAAM,CAANA,IAAAA,CAAP,EAAOA,CAAP;AACH;;AACD,SAAOU,MAAAA,CAAAA,aAAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAAA,EAAAA,CAAcC,MAAAA,CAAdD,QAAAA,EAAAA,EAAAA,EAAAA,MAAAA,CAAAA,CAAAA,GAAAA,mBAAAA,CAAAA,SAAAA,CAAAA,EAAP,MAAOA,CAAAA,CAAAA,CAAP;AACH","sourcesContent":["import { createElement, Fragment, isValidElement } from 'react';\nimport format from 'string-template';\nimport isString from 'lodash/isString';\nimport isNil from 'lodash/isNil';\nimport flatMap from 'lodash/flatMap';\nexport default function formatReactTemplate(template, map) {\n    let result = [template];\n    Object.keys(map).forEach(key => {\n        const node = map[key];\n        if (!isNil(node)) {\n            result = flatMap(result, text => {\n                if (isString(text)) {\n                    let stringText = text;\n                    if (isValidElement(node)) {\n                        const placeholder = `{${key}}`;\n                        const { length } = placeholder;\n                        const textArr = [];\n                        let index = stringText.indexOf(placeholder);\n                        while (index > -1) {\n                            if (index > 0) {\n                                textArr.push(stringText.slice(0, index));\n                            }\n                            textArr.push(node);\n                            stringText = stringText.slice(index + length);\n                            index = stringText.indexOf(placeholder);\n                        }\n                        if (stringText) {\n                            textArr.push(stringText);\n                        }\n                        return textArr;\n                    }\n                    return format(text, map);\n                }\n                return text;\n            });\n        }\n    });\n    if (result.every(isString)) {\n        return result.join('');\n    }\n    return createElement(Fragment, {}, ...result);\n}\n"]}