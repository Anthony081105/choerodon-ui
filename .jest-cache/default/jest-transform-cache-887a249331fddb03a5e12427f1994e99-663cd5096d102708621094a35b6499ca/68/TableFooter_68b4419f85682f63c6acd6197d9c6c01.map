{"version":3,"sources":["TableFooter.jsx"],"names":["appendExpandIconColumn","columns","expandIconCol","key","render","TableFooter","props","table","columnManager","components","prefixCls","data","expandIconAsCell","fixed","onHover","leafColumns","leftLeafColumns","rightLeafColumns","FooterWrapper","footer","wrapper","isAnyColumnsFixed","propTypes","PropTypes","string","array","isRequired","func","contextTypes","any"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA,SAASA,sBAAT,CAAgCC,OAAhC,EAAyC;AACvC,MAAMC,aAAa,GAAG;AACpBC,IAAAA,GAAG,EAAE,yBADe;AAEpBC,IAAAA,MAAM,EAAE;AAAA,aAAM,IAAN;AAAA;AAFY,GAAtB;AAIA,UAAQF,aAAR,6CAA0BD,OAA1B;AACD;;AAEc,SAASI,WAAT,CAAqBC,KAArB,QAAuC;AAAA,MAATC,KAAS,QAATA,KAAS;AAAA,MAC5CC,aAD4C,GACdD,KADc,CAC5CC,aAD4C;AAAA,MAC7BC,UAD6B,GACdF,KADc,CAC7BE,UAD6B;AAAA,qBAENF,KAAK,CAACD,KAFA;AAAA,MAE5CI,SAF4C,gBAE5CA,SAF4C;AAAA,MAEjCC,IAFiC,gBAEjCA,IAFiC;AAAA,MAE3BC,gBAF2B,gBAE3BA,gBAF2B;AAAA,MAG5CC,KAH4C,GAGzBP,KAHyB,CAG5CO,KAH4C;AAAA,MAGrCC,OAHqC,GAGzBR,KAHyB,CAGrCQ,OAHqC;AAKpD,MAAIC,WAAJ;;AACA,MAAIF,KAAK,KAAK,MAAd,EAAsB;AACpBE,IAAAA,WAAW,GAAGP,aAAa,CAACQ,eAAd,EAAd;;AACA,QAAIJ,gBAAJ,EAAsB;AACpBG,MAAAA,WAAW,GAAGf,sBAAsB,CAACe,WAAD,CAApC;AACD;AACF,GALD,MAKO,IAAIF,KAAK,KAAK,OAAd,EAAuB;AAC5BE,IAAAA,WAAW,GAAGP,aAAa,CAACS,gBAAd,EAAd;AACD,GAFM,MAEA;AACLF,IAAAA,WAAW,GAAGP,aAAa,CAACO,WAAd,EAAd;;AACA,QAAIH,gBAAJ,EAAsB;AACpBG,MAAAA,WAAW,GAAGf,sBAAsB,CAACe,WAAD,CAApC;AACD;AACF;;AAED,MAAMG,aAAa,GAAGT,UAAU,CAACU,MAAX,CAAkBC,OAAxC;AAEA,SACE,gCAAC,aAAD;AAAe,IAAA,SAAS,YAAKV,SAAL;AAAxB,KACE,gCAAC,0BAAD;AACE,IAAA,SAAS,EAAEA,SADb;AAEE,IAAA,OAAO,EAAEK,WAFX;AAGE,IAAA,UAAU,EAAEN,UAHd;AAIE,IAAA,KAAK,EAAEI,KAJT;AAKE,IAAA,IAAI,EAAEF,IALR;AAME,IAAA,OAAO,EAAEH,aAAa,CAACa,iBAAd,KAAoCP,OAApC,GAA8C;AANzD,IADF,CADF;AAYD;;AAEDT,WAAW,CAACiB,SAAZ,GAAwB;AACtBT,EAAAA,KAAK,EAAEU,sBAAUC,MADK;AAEtBvB,EAAAA,OAAO,EAAEsB,sBAAUE,KAAV,CAAgBC,UAFH;AAGtBZ,EAAAA,OAAO,EAAES,sBAAUI;AAHG,CAAxB;AAMAtB,WAAW,CAACuB,YAAZ,GAA2B;AACzBrB,EAAAA,KAAK,EAAEgB,sBAAUM;AADQ,CAA3B","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport TableFooterRow from './TableFooterRow';\n\nfunction appendExpandIconColumn(columns) {\n  const expandIconCol = {\n    key: 'expand-icon-placeholder',\n    render: () => null,\n  };\n  return [expandIconCol, ...columns];\n}\n\nexport default function TableFooter(props, { table }) {\n  const { columnManager, components } = table;\n  const { prefixCls, data, expandIconAsCell } = table.props;\n  const { fixed, onHover } = props;\n\n  let leafColumns;\n  if (fixed === 'left') {\n    leafColumns = columnManager.leftLeafColumns();\n    if (expandIconAsCell) {\n      leafColumns = appendExpandIconColumn(leafColumns);\n    }\n  } else if (fixed === 'right') {\n    leafColumns = columnManager.rightLeafColumns();\n  } else {\n    leafColumns = columnManager.leafColumns();\n    if (expandIconAsCell) {\n      leafColumns = appendExpandIconColumn(leafColumns);\n    }\n  }\n\n  const FooterWrapper = components.footer.wrapper;\n\n  return (\n    <FooterWrapper className={`${prefixCls}-tfoot`}>\n      <TableFooterRow\n        prefixCls={prefixCls}\n        columns={leafColumns}\n        components={components}\n        fixed={fixed}\n        data={data}\n        onHover={columnManager.isAnyColumnsFixed() ? onHover : null}\n      />\n    </FooterWrapper>\n  );\n}\n\nTableFooter.propTypes = {\n  fixed: PropTypes.string,\n  columns: PropTypes.array.isRequired,\n  onHover: PropTypes.func,\n};\n\nTableFooter.contextTypes = {\n  table: PropTypes.any,\n};\n"]}