{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/table/TableCol.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;AACA;;IAQqB,Q;;;;;;;;;;;;6BAWb;AAAA,wBACwB,KAAK,KAD7B;AAAA,UACI,KADJ,eACI,KADJ;AAAA,UACW,QADX,eACW,QADX;AAEJ,aACE,kBAAA,aAAA,CAAA,KAAA,EAAA;AACE,QAAA,KAAK,EAAE;AAAE,UAAA,KAAK,EAAE,4BAAQ,KAAR,CAAT;AAAyB,UAAA,QAAQ,EAAE,4BAAQ,QAAR;AAAnC,SADT;AAEE,QAAA,eAAe,EAAE,KAAK;AAFxB,OAAA,CADF;AAMD;;;wCAEgB;AAAA,UACP,SADO,GACO,KAAK,KADZ,CACP,SADO;AAAA,UAIH,OAJG,GAMX,KAAK,OANM,CAGb,UAHa,CAIX,IAJW,CAIH,OAJG;;AAOf,UAAI,OAAO,IAAI,kCAAQ,OAAR,EAAiB,GAAjB,WAAwB,SAAxB,eAAf,EAA8D;AAC5D,aAAK,aAAL;AACD;AACF;;;uCAEkB,S,EAAS;AAAA,UAClB,KADkB,GACR,SADQ,CAClB,KADkB;;AAE1B,UAAI,CAAC,KAAD,IAAU,KAAK,CAAC,KAAD,CAAnB,EAA4B;AAC1B,aAAK,aAAL;AACD;AACF;;;0CAGkB;AACjB,WAAK,aAAL;AACD;;;oCAEY;AAAA,UACH,WADG,GACa,KAAK,KADlB,CACH,WADG;AAEX,MAAA,WAAW;AACZ;;;EAhDmC,oB;;;AAC7B,QAAA,CAAA,WAAA,GAAc,UAAd;AAEA,QAAA,CAAA,WAAA,GAAc,wBAAd;AAEA,QAAA,CAAA,SAAA,GAAY;AACjB,EAAA,KAAK,EAAE,sBAAU,SAAV,CAAoB,CAAC,sBAAU,MAAX,EAAmB,sBAAU,MAA7B,CAApB,CADU;AAEjB,EAAA,QAAQ,EAAE,sBAAU,SAAV,CAAoB,CAAC,sBAAU,MAAX,EAAmB,sBAAU,MAA7B,CAApB,CAFO;AAGjB,EAAA,WAAW,EAAE,sBAAU,IAAV,CAAe;AAHX,CAAZ;AAoCP,uBAAA,CADC,oBACD,CAAA,E,kBAAA,E,qBAAA,EAEC,IAFD","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport classes from 'component-classes';\nimport { pxToRem } from 'choerodon-ui/lib/_util/UnitConvertor';\nimport { ElementProps } from '../core/ViewComponent';\nimport TableContext from './TableContext';\nimport autobind from '../_util/autobind';\n\nexport interface TableColProps extends ElementProps {\n  width?: number | string;\n  minWidth?: number | string;\n  onResizeEnd: () => void;\n}\n\nexport default class TableCol extends PureComponent<TableColProps> {\n  static displayName = 'TableCol';\n\n  static contextType = TableContext;\n\n  static propTypes = {\n    width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    minWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    onResizeEnd: PropTypes.func.isRequired,\n  };\n\n  render() {\n    const { width, minWidth } = this.props;\n    return (\n      <col\n        style={{ width: pxToRem(width), minWidth: pxToRem(minWidth) }}\n        onTransitionEnd={this.handleTransitionEnd}\n      />\n    );\n  }\n\n  componentDidMount() {\n    const { prefixCls } = this.props;\n    const {\n      tableStore: {\n        node: { element },\n      },\n    } = this.context;\n    if (element && classes(element).has(`${prefixCls}-resizing`)) {\n      this.fireResizeEnd();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { width } = prevProps;\n    if (!width || isNaN(width)) {\n      this.fireResizeEnd();\n    }\n  }\n\n  @autobind\n  handleTransitionEnd() {\n    this.fireResizeEnd();\n  }\n\n  fireResizeEnd() {\n    const { onResizeEnd } = this.props;\n    onResizeEnd();\n  }\n}\n"]}