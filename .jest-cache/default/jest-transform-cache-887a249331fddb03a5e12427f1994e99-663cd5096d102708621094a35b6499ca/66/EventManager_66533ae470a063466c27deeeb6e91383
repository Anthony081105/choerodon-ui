83181da9d897d7c571288ad7b2985d41
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.preventDefault = preventDefault;
exports.stopPropagation = stopPropagation;
exports.stopEvent = stopEvent;
exports["default"] = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

function on(eventName, fn, el, useCapture) {
  if (el) {
    if (el.addEventListener) {
      el.addEventListener(eventName, fn, useCapture);
    } else if (el.attachEvent) {
      el.attachEvent("on".concat(eventName), fn);
    }
  }
}

function off(eventName, fn, el, useCapture) {
  if (el) {
    if (el.removeEventListener) {
      el.removeEventListener(eventName, fn, useCapture);
    } else if (el.attachEvent) {
      el.detachEvent("on".concat(eventName), fn);
    }
  }
}

var EventManager =
/*#__PURE__*/
function () {
  function EventManager(el) {
    (0, _classCallCheck2["default"])(this, EventManager);
    this.events = {};
    this.el = el;
  }

  (0, _createClass2["default"])(EventManager, [{
    key: "addEventListener",
    value: function addEventListener(eventName, fn) {
      var useCapture = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      eventName = eventName.toLowerCase();
      var events = this.events[eventName] || [];
      var index = events.findIndex(function (_ref) {
        var _ref2 = (0, _slicedToArray2["default"])(_ref, 1),
            event = _ref2[0];

        return event === fn;
      });

      if (index === -1) {
        events.push([fn, useCapture]);
        this.events[eventName] = events;
        on(eventName, fn, this.el, useCapture);
      }

      return this;
    }
  }, {
    key: "removeEventListener",
    value: function removeEventListener(eventName, fn) {
      var _this = this;

      var useCapture = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      eventName = eventName.toLowerCase();
      var events = this.events[eventName];

      if (events) {
        if (fn) {
          var index = events.findIndex(function (_ref3) {
            var _ref4 = (0, _slicedToArray2["default"])(_ref3, 1),
                event = _ref4[0];

            return event === fn;
          });

          if (index !== -1) {
            events.splice(index, 1);
          }

          off(eventName, fn, this.el, useCapture);
        } else {
          this.events[eventName] = this.el ? (this.events[eventName] || []).filter(function (_ref5) {
            var _ref6 = (0, _slicedToArray2["default"])(_ref5, 2),
                event = _ref6[0],
                capture = _ref6[1];

            off(eventName, event, _this.el, capture);
            return false;
          }) : [];
        }
      }

      return this;
    }
  }, {
    key: "fireEvent",
    value: function fireEvent(eventName) {
      for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        rest[_key - 1] = arguments[_key];
      }

      var events = this.events[eventName.toLowerCase()];
      return events ? Promise.all(events.map(function (_ref7) {
        var _ref8 = (0, _slicedToArray2["default"])(_ref7, 1),
            fn = _ref8[0];

        return fn.apply(void 0, rest);
      })).then(function (all) {
        return all.every(function (result) {
          return result !== false;
        });
      }) : Promise.resolve(true);
    }
  }, {
    key: "clear",
    value: function clear() {
      var _this2 = this;

      if (this.el) {
        Object.keys(this.events).forEach(function (eventName) {
          return _this2.removeEventListener(eventName);
        });
      }

      this.events = {};
      return this;
    }
  }]);
  return EventManager;
}();

exports["default"] = EventManager;

function preventDefault(e) {
  e.preventDefault();
}

function stopPropagation(e) {
  e.stopPropagation();
}

function stopEvent(e) {
  preventDefault(e);
  stopPropagation(e);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9odWlodWF3ay9Eb2N1bWVudHMvb3B0L2Nob2Vyb2Rvbi11aS9jb21wb25lbnRzL191dGlsL0V2ZW50TWFuYWdlci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsU0FBUyxFQUFULENBQVksU0FBWixFQUErQixFQUEvQixFQUE2QyxFQUE3QyxFQUF1RCxVQUF2RCxFQUEyRTtBQUN6RSxNQUFJLEVBQUosRUFBUTtBQUNOLFFBQUksRUFBRSxDQUFDLGdCQUFQLEVBQXlCO0FBQ3ZCLE1BQUEsRUFBRSxDQUFDLGdCQUFILENBQW9CLFNBQXBCLEVBQStCLEVBQS9CLEVBQW1DLFVBQW5DO0FBQ0QsS0FGRCxNQUVPLElBQUksRUFBRSxDQUFDLFdBQVAsRUFBb0I7QUFDekIsTUFBQSxFQUFFLENBQUMsV0FBSCxhQUFvQixTQUFwQixHQUFpQyxFQUFqQztBQUNEO0FBQ0Y7QUFDRjs7QUFFRCxTQUFTLEdBQVQsQ0FBYSxTQUFiLEVBQWdDLEVBQWhDLEVBQThDLEVBQTlDLEVBQXdELFVBQXhELEVBQTRFO0FBQzFFLE1BQUksRUFBSixFQUFRO0FBQ04sUUFBSSxFQUFFLENBQUMsbUJBQVAsRUFBNEI7QUFDMUIsTUFBQSxFQUFFLENBQUMsbUJBQUgsQ0FBdUIsU0FBdkIsRUFBa0MsRUFBbEMsRUFBc0MsVUFBdEM7QUFDRCxLQUZELE1BRU8sSUFBSSxFQUFFLENBQUMsV0FBUCxFQUFvQjtBQUN6QixNQUFBLEVBQUUsQ0FBQyxXQUFILGFBQW9CLFNBQXBCLEdBQWlDLEVBQWpDO0FBQ0Q7QUFDRjtBQUNGOztJQUlvQixZOzs7QUFLbkIsd0JBQVksRUFBWixFQUFvQjtBQUFBO0FBSnBCLFNBQUEsTUFBQSxHQUE2QyxFQUE3QztBQUtFLFNBQUssRUFBTCxHQUFVLEVBQVY7QUFDRDs7OztxQ0FFZ0IsUyxFQUFtQixFLEVBQXlDO0FBQUEsVUFBM0IsVUFBMkIsdUVBQUwsS0FBSztBQUMzRSxNQUFBLFNBQVMsR0FBRyxTQUFT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QUdHLFNBQVUsY0FBVixDQUF5QixDQUF6QixFQUEwQjtBQUM5QixFQUFBLENBQUMsQ0FBQyxjQUFGO0FBQ0Q7O0FBRUssU0FBVSxlQUFWLENBQTBCLENBQTFCLEVBQTJCO0FBQy9CLEVBQUEsQ0FBQyxDQUFDLGVBQUY7QUFDRDs7QUFFSyxTQUFVLFNBQVYsQ0FBb0IsQ0FBcEIsRUFBcUI7QUFDekIsRUFBQSxjQUFjLENBQUMsQ0FBRCxDQUFkO0FBQ0EsRUFBQSxlQUFlLENBQUMsQ0FBRCxDQUFmO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBvbihldmVudE5hbWU6IHN0cmluZywgZm46IEZ1bmN0aW9uLCBlbD86IGFueSwgdXNlQ2FwdHVyZT86IGJvb2xlYW4pOiB2b2lkIHtcbiAgaWYgKGVsKSB7XG4gICAgaWYgKGVsLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBmbiwgdXNlQ2FwdHVyZSk7XG4gICAgfSBlbHNlIGlmIChlbC5hdHRhY2hFdmVudCkge1xuICAgICAgZWwuYXR0YWNoRXZlbnQoYG9uJHtldmVudE5hbWV9YCwgZm4pO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBvZmYoZXZlbnROYW1lOiBzdHJpbmcsIGZuOiBGdW5jdGlvbiwgZWw/OiBhbnksIHVzZUNhcHR1cmU/OiBib29sZWFuKTogdm9pZCB7XG4gIGlmIChlbCkge1xuICAgIGlmIChlbC5yZW1vdmVFdmVudExpc3RlbmVyKSB7XG4gICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgZm4sIHVzZUNhcHR1cmUpO1xuICAgIH0gZWxzZSBpZiAoZWwuYXR0YWNoRXZlbnQpIHtcbiAgICAgIGVsLmRldGFjaEV2ZW50KGBvbiR7ZXZlbnROYW1lfWAsIGZuKTtcbiAgICB9XG4gIH1cbn1cblxudHlwZSBoYW5kbGVyID0gW0Z1bmN0aW9uLCBib29sZWFuXTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXZlbnRNYW5hZ2VyIHtcbiAgZXZlbnRzOiB7IFtldmVudE5hbWU6IHN0cmluZ106IGhhbmRsZXJbXSB9ID0ge307XG5cbiAgZWw/OiBhbnk7XG5cbiAgY29uc3RydWN0b3IoZWw/OiBhbnkpIHtcbiAgICB0aGlzLmVsID0gZWw7XG4gIH1cblxuICBhZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZTogc3RyaW5nLCBmbjogRnVuY3Rpb24sIHVzZUNhcHR1cmU6IGJvb2xlYW4gPSBmYWxzZSk6IEV2ZW50TWFuYWdlciB7XG4gICAgZXZlbnROYW1lID0gZXZlbnROYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgY29uc3QgZXZlbnRzOiBoYW5kbGVyW10gPSB0aGlzLmV2ZW50c1tldmVudE5hbWVdIHx8IFtdO1xuICAgIGNvbnN0IGluZGV4ID0gZXZlbnRzLmZpbmRJbmRleCgoW2V2ZW50XSkgPT4gZXZlbnQgPT09IGZuKTtcbiAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICBldmVudHMucHVzaChbZm4sIHVzZUNhcHR1cmVdKTtcbiAgICAgIHRoaXMuZXZlbnRzW2V2ZW50TmFtZV0gPSBldmVudHM7XG4gICAgICBvbihldmVudE5hbWUsIGZuLCB0aGlzLmVsLCB1c2VDYXB0dXJlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICByZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZTogc3RyaW5nLCBmbj86IEZ1bmN0aW9uLCB1c2VDYXB0dXJlOiBib29sZWFuID0gZmFsc2UpOiBFdmVudE1hbmFnZXIge1xuICAgIGV2ZW50TmFtZSA9IGV2ZW50TmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIGNvbnN0IGV2ZW50czogaGFuZGxlcltdID0gdGhpcy5ldmVudHNbZXZlbnROYW1lXTtcbiAgICBpZiAoZXZlbnRzKSB7XG4gICAgICBpZiAoZm4pIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBldmVudHMuZmluZEluZGV4KChbZXZlbnRdKSA9PiBldmVudCA9PT0gZm4pO1xuICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgZXZlbnRzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgb2ZmKGV2ZW50TmFtZSwgZm4sIHRoaXMuZWwsIHVzZUNhcHR1cmUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5ldmVudHNbZXZlbnROYW1lXSA9IHRoaXMuZWxcbiAgICAgICAgICA/ICh0aGlzLmV2ZW50c1tldmVudE5hbWVdIHx8IFtdKS5maWx0ZXIoKFtldmVudCwgY2FwdHVyZV0pID0+IHtcbiAgICAgICAgICAgICAgb2ZmKGV2ZW50TmFtZSwgZXZlbnQsIHRoaXMuZWwsIGNhcHR1cmUpO1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIDogW107XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZmlyZUV2ZW50KGV2ZW50TmFtZTogc3RyaW5nLCAuLi5yZXN0OiBhbnlbXSk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGNvbnN0IGV2ZW50czogaGFuZGxlcltdID0gdGhpcy5ldmVudHNbZXZlbnROYW1lLnRvTG93ZXJDYXNlKCldO1xuICAgIHJldHVybiBldmVudHNcbiAgICAgID8gUHJvbWlzZS5hbGwoZXZlbnRzLm1hcCgoW2ZuXSkgPT4gZm4oLi4ucmVzdCkpKS50aGVuKGFsbCA9PlxuICAgICAgICAgIGFsbC5ldmVyeShyZXN1bHQgPT4gcmVzdWx0ICE9PSBmYWxzZSksXG4gICAgICAgIClcbiAgICAgIDogUHJvbWlzZS5yZXNvbHZlKHRydWUpO1xuICB9XG5cbiAgY2xlYXIoKTogRXZlbnRNYW5hZ2VyIHtcbiAgICBpZiAodGhpcy5lbCkge1xuICAgICAgT2JqZWN0LmtleXModGhpcy5ldmVudHMpLmZvckVhY2goZXZlbnROYW1lID0+IHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUpKTtcbiAgICB9XG4gICAgdGhpcy5ldmVudHMgPSB7fTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJldmVudERlZmF1bHQoZSkge1xuICBlLnByZXZlbnREZWZhdWx0KCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdG9wUHJvcGFnYXRpb24oZSkge1xuICBlLnN0b3BQcm9wYWdhdGlvbigpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RvcEV2ZW50KGUpIHtcbiAgcHJldmVudERlZmF1bHQoZSk7XG4gIHN0b3BQcm9wYWdhdGlvbihlKTtcbn1cbiJdfQ==