{"version":3,"sources":["rc-components/tree/utils/treeUtil.js"],"names":["key","treeData","keys","path","list","children","treeNode","recordKey","String","dig","treeNodes","rest","dataNode","parsedChildren","treeNodeList","expandedKeys","expandedKeySet","flattenList","parent","pos","mergedKey","getKey","flattenNode","data","isStart","index","isEnd","node","parentPos","level","callback","processNode","initWrapper","processEntity","onProcessFinished","posEntities","keyEntities","wrapper","traverseDataNodes","item","entity","selectedKeys","loadedKeys","loadingKeys","checkedKeys","halfCheckedKeys","dragOverNodeKey","dropPosition","treeNodeProps","eventKey","expanded","selected","loaded","loading","checked","halfChecked","dragOver","dragOverGapTop","dragOverGapBottom","active","props","eventData","Object","get"],"mappings":"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","sourcesContent":["import toArray from 'rc-util/lib/Children/toArray';\nimport warning from 'rc-util/lib/warning';\n// @ts-ignore\nimport { getPosition, isTreeNode } from '../util';\nexport function getKey(key, pos) {\n    if (key !== null && key !== undefined) {\n        return key;\n    }\n    return pos;\n}\n/**\n * Warning if TreeNode do not provides key\n */\nexport function warningWithoutKey(treeData = []) {\n    const keys = new Map();\n    function dig(list, path = '') {\n        (list || []).forEach(treeNode => {\n            const { key, children } = treeNode;\n            warning(key !== null && key !== undefined, `Tree node must have a certain key: [${path}${key}]`);\n            const recordKey = String(key);\n            warning(!keys.has(recordKey) || key === null || key === undefined, `Same 'key' exist in the Tree: ${recordKey}`);\n            keys.set(recordKey, true);\n            dig(children, `${path}${recordKey} > `);\n        });\n    }\n    dig(treeData);\n}\n/**\n * Convert `children` of Tree into `treeData` structure.\n */\nexport function convertTreeToData(rootNodes) {\n    function dig(node) {\n        const treeNodes = toArray(node);\n        return treeNodes\n            .map(treeNode => {\n            // Filter invalidate node\n            if (!isTreeNode(treeNode)) {\n                warning(!treeNode, 'Tree/TreeNode can only accept TreeNode as children.');\n                return null;\n            }\n            const { key } = treeNode;\n            const { children, ...rest } = treeNode.props;\n            const dataNode = {\n                key,\n                ...rest,\n            };\n            const parsedChildren = dig(children);\n            if (parsedChildren.length) {\n                dataNode.children = parsedChildren;\n            }\n            return dataNode;\n        })\n            .filter((dataNode) => dataNode);\n    }\n    return dig(rootNodes);\n}\n/**\n * Flat nest tree data into flatten list. This is used for virtual list render.\n * @param treeNodeList Origin data node list\n * @param expandedKeys\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\n */\nexport function flattenTreeData(treeNodeList = [], expandedKeys = []) {\n    const expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\n    const flattenList = [];\n    function dig(list, parent = null) {\n        return list.map((treeNode, index) => {\n            const pos = getPosition(parent ? parent.pos : '0', index);\n            const mergedKey = getKey(treeNode.key, pos);\n            // Add FlattenDataNode into list\n            const flattenNode = {\n                ...treeNode,\n                parent,\n                pos,\n                children: null,\n                data: treeNode,\n                isStart: [...(parent ? parent.isStart : []), index === 0],\n                isEnd: [...(parent ? parent.isEnd : []), index === list.length - 1],\n            };\n            flattenList.push(flattenNode);\n            // Loop treeNode children\n            if (expandedKeys === true || expandedKeySet.has(mergedKey)) {\n                flattenNode.children = dig(treeNode.children || [], flattenNode);\n            }\n            else {\n                flattenNode.children = [];\n            }\n            return flattenNode;\n        });\n    }\n    dig(treeNodeList);\n    return flattenList;\n}\n/**\n * Traverse all the data by `treeData`.\n * Please not use it out of the `rc-tree` since we may refactor this code.\n */\nexport function traverseDataNodes(dataNodes, callback) {\n    function processNode(node, index, parent) {\n        const children = node ? node.children : dataNodes;\n        const pos = node ? getPosition(parent.pos, index) : '0';\n        // Process node if is not root\n        if (node) {\n            const data = {\n                node,\n                index,\n                pos,\n                key: node.key !== null ? node.key : pos,\n                parentPos: parent.node ? parent.pos : null,\n                level: parent.level + 1,\n            };\n            callback(data);\n        }\n        // Process children node\n        if (children) {\n            children.forEach((subNode, subIndex) => {\n                processNode(subNode, subIndex, {\n                    node,\n                    pos,\n                    level: parent ? parent.level + 1 : -1,\n                });\n            });\n        }\n    }\n    processNode(null);\n}\n/**\n * Convert `treeData` into entity records.\n */\nexport function convertDataToEntities(dataNodes, { initWrapper, processEntity, onProcessFinished, } = {}) {\n    const posEntities = {};\n    const keyEntities = {};\n    let wrapper = {\n        posEntities,\n        keyEntities,\n    };\n    if (initWrapper) {\n        wrapper = initWrapper(wrapper) || wrapper;\n    }\n    traverseDataNodes(dataNodes, item => {\n        const { node, index, pos, key, parentPos, level } = item;\n        const entity = { node, index, key, pos, level };\n        const mergedKey = getKey(key, pos);\n        posEntities[pos] = entity;\n        keyEntities[mergedKey] = entity;\n        // Fill children\n        entity.parent = posEntities[parentPos];\n        if (entity.parent) {\n            entity.parent.children = entity.parent.children || [];\n            entity.parent.children.push(entity);\n        }\n        if (processEntity) {\n            processEntity(entity, wrapper);\n        }\n    });\n    if (onProcessFinished) {\n        onProcessFinished(wrapper);\n    }\n    return wrapper;\n}\n/**\n * Get TreeNode props with Tree props.\n */\nexport function getTreeNodeProps(key, { expandedKeys, selectedKeys, loadedKeys, loadingKeys, checkedKeys, halfCheckedKeys, dragOverNodeKey, dropPosition, keyEntities, }) {\n    const entity = keyEntities[key];\n    const treeNodeProps = {\n        eventKey: key,\n        expanded: expandedKeys.indexOf(key) !== -1,\n        selected: selectedKeys.indexOf(key) !== -1,\n        loaded: loadedKeys.indexOf(key) !== -1,\n        loading: loadingKeys.indexOf(key) !== -1,\n        checked: checkedKeys.indexOf(key) !== -1,\n        halfChecked: halfCheckedKeys.indexOf(key) !== -1,\n        pos: String(entity ? entity.pos : ''),\n        // [Legacy] Drag props\n        dragOver: dragOverNodeKey === key && dropPosition === 0,\n        dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\n        dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1,\n    };\n    return treeNodeProps;\n}\nexport function convertNodePropsToEventData(props) {\n    const { data, expanded, selected, checked, loaded, loading, halfChecked, dragOver, dragOverGapTop, dragOverGapBottom, pos, active, } = props;\n    const eventData = {\n        ...data,\n        expanded,\n        selected,\n        checked,\n        loaded,\n        loading,\n        halfChecked,\n        dragOver,\n        dragOverGapTop,\n        dragOverGapBottom,\n        pos,\n        active,\n    };\n    if (!('props' in eventData)) {\n        Object.defineProperty(eventData, 'props', {\n            get() {\n                warning(false, 'Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`.');\n                return props;\n            },\n        });\n    }\n    return eventData;\n}\n"]}