3dc627218e5bdddcae06e3920f37f80e
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var React = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _CSSMotion = _interopRequireDefault(require("rc-animate/lib/CSSMotion"));

var _TreeNode = _interopRequireDefault(require("./TreeNode"));

var _treeUtil = require("./utils/treeUtil");

var _contextTypes = require("./contextTypes"); // @ts-ignore
// @ts-ignore
// @ts-ignore


var MotionTreeNode = function MotionTreeNode(_ref, ref) {
  var className = _ref.className,
      style = _ref.style,
      motion = _ref.motion,
      motionNodes = _ref.motionNodes,
      motionType = _ref.motionType,
      onMotionEnd = _ref.onMotionEnd,
      active = _ref.active,
      treeNodeRequiredProps = _ref.treeNodeRequiredProps,
      props = (0, _objectWithoutProperties2["default"])(_ref, ["className", "style", "motion", "motionNodes", "motionType", "onMotionEnd", "active", "treeNodeRequiredProps"]);

  var _React$useState = React.useState(true),
      _React$useState2 = (0, _slicedToArray2["default"])(_React$useState, 2),
      visible = _React$useState2[0],
      setVisible = _React$useState2[1]; // @ts-ignore


  var _React$useContext = React.useContext(_contextTypes.TreeContext),
      prefixCls = _React$useContext.prefixCls;

  React.useEffect(function () {
    if (motionNodes && motionType === 'hide' && visible) {
      setVisible(false);
    }
  }, [motionNodes]);

  if (motionNodes) {
    return React.createElement(_CSSMotion["default"], (0, _extends2["default"])({
      ref: ref,
      visible: visible
    }, motion, {
      motionAppear: motionType === 'show',
      onAppearEnd: onMotionEnd,
      onLeaveEnd: onMotionEnd
    }), function (_ref2, motionRef) {
      var motionClassName = _ref2.className,
          motionStyle = _ref2.style;
      return React.createElement("div", {
        ref: motionRef,
        className: (0, _classnames["default"])("".concat(prefixCls, "-treenode-motion"), motionClassName),
        style: motionStyle
      }, motionNodes.map(function (treeNode) {
        var _treeNode$data = treeNode.data,
            key = _treeNode$data.key,
            restProps = (0, _objectWithoutProperties2["default"])(_treeNode$data, ["key"]),
            isStart = treeNode.isStart,
            isEnd = treeNode.isEnd;
        delete restProps.children;
        var treeNodeProps = (0, _treeUtil.getTreeNodeProps)(key, treeNodeRequiredProps);
        return React.createElement(_TreeNode["default"], (0, _extends2["default"])({}, restProps, treeNodeProps, {
          active: active,
          data: treeNode.data,
          key: key,
          isStart: isStart,
          isEnd: isEnd
        }));
      }));
    });
  }

  return React.createElement(_TreeNode["default"], (0, _extends2["default"])({
    domRef: ref,
    className: className,
    style: style
  }, props, {
    active: active
  }));
};

MotionTreeNode.displayName = 'MotionTreeNode';
var RefMotionTreeNode = React.forwardRef(MotionTreeNode);
var _default = RefMotionTreeNode;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJjLWNvbXBvbmVudHMvdHJlZS9Nb3Rpb25UcmVlTm9kZS5qcyJdLCJuYW1lcyI6WyJNb3Rpb25UcmVlTm9kZSIsImNsYXNzTmFtZSIsInN0eWxlIiwibW90aW9uIiwibW90aW9uTm9kZXMiLCJtb3Rpb25UeXBlIiwib25Nb3Rpb25FbmQiLCJhY3RpdmUiLCJ0cmVlTm9kZVJlcXVpcmVkUHJvcHMiLCJwcm9wcyIsInZpc2libGUiLCJzZXRWaXNpYmxlIiwiUmVhY3QiLCJwcmVmaXhDbHMiLCJUcmVlQ29udGV4dCIsIkNTU01vdGlvbiIsInJlZiIsIm1vdGlvbkFwcGVhciIsIm9uQXBwZWFyRW5kIiwib25MZWF2ZUVuZCIsIm1vdGlvbkNsYXNzTmFtZSIsIm1vdGlvblN0eWxlIiwia2V5IiwicmVzdFByb3BzIiwiaXNTdGFydCIsImlzRW5kIiwidHJlZU5vZGUiLCJ0cmVlTm9kZVByb3BzIiwiVHJlZU5vZGUiLCJkYXRhIiwiZG9tUmVmIiwiUmVmTW90aW9uVHJlZU5vZGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQSxLQUFBLEdBQUEsdUJBQUEsQ0FBQSxPQUFBLENBQUEsT0FBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxXQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLENBQUEsWUFBQSxDQUFBLENBQUE7O0FBRUEsSUFBQSxVQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLENBQUEsMEJBQUEsQ0FBQSxDQUFBOztBQUVBLElBQUEsU0FBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLFlBQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsU0FBQSxHQUFBLE9BQUEsQ0FBQSxrQkFBQSxDQUFBOztBQUNBLElBQUEsYUFBQSxHQUFBLE9BQUEsQ0FBQSxnQkFBQSxDQUFBLEMsQ0FMQTtBQUVBO0FBSUE7OztBQUNBLElBQU1BLGNBQWMsR0FBRyxTQUFqQkEsY0FBaUIsQ0FBQSxJQUFBLEVBQUEsR0FBQSxFQUFzSDtBQUFBLE1BQW5IQyxTQUFtSCxH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VUFBQUEsQ0FBMUIsY0FBMEJBLENBQTFCO2VBQ2VtQixpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IENTU01vdGlvbiBmcm9tICdyYy1hbmltYXRlL2xpYi9DU1NNb3Rpb24nO1xuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IFRyZWVOb2RlIGZyb20gJy4vVHJlZU5vZGUnO1xuaW1wb3J0IHsgZ2V0VHJlZU5vZGVQcm9wcyB9IGZyb20gJy4vdXRpbHMvdHJlZVV0aWwnO1xuaW1wb3J0IHsgVHJlZUNvbnRleHQgfSBmcm9tICcuL2NvbnRleHRUeXBlcyc7XG4vLyBAdHMtaWdub3JlXG5jb25zdCBNb3Rpb25UcmVlTm9kZSA9ICh7IGNsYXNzTmFtZSwgc3R5bGUsIG1vdGlvbiwgbW90aW9uTm9kZXMsIG1vdGlvblR5cGUsIG9uTW90aW9uRW5kLCBhY3RpdmUsIHRyZWVOb2RlUmVxdWlyZWRQcm9wcywgLi4ucHJvcHMgfSwgcmVmKSA9PiB7XG4gICAgY29uc3QgW3Zpc2libGUsIHNldFZpc2libGVdID0gUmVhY3QudXNlU3RhdGUodHJ1ZSk7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGNvbnN0IHsgcHJlZml4Q2xzIH0gPSBSZWFjdC51c2VDb250ZXh0KFRyZWVDb250ZXh0KTtcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAobW90aW9uTm9kZXMgJiYgbW90aW9uVHlwZSA9PT0gJ2hpZGUnICYmIHZpc2libGUpIHtcbiAgICAgICAgICAgIHNldFZpc2libGUoZmFsc2UpO1xuICAgICAgICB9XG4gICAgfSwgW21vdGlvbk5vZGVzXSk7XG4gICAgaWYgKG1vdGlvbk5vZGVzKSB7XG4gICAgICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChDU1NNb3Rpb24sIE9iamVjdC5hc3NpZ24oeyByZWY6IHJlZiwgdmlzaWJsZTogdmlzaWJsZSB9LCBtb3Rpb24sIHsgbW90aW9uQXBwZWFyOiBtb3Rpb25UeXBlID09PSAnc2hvdycsIG9uQXBwZWFyRW5kOiBvbk1vdGlvbkVuZCwgb25MZWF2ZUVuZDogb25Nb3Rpb25FbmQgfSksICh7IGNsYXNzTmFtZTogbW90aW9uQ2xhc3NOYW1lLCBzdHlsZTogbW90aW9uU3R5bGUgfSwgbW90aW9uUmVmKSA9PiAoUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IHJlZjogbW90aW9uUmVmLCBjbGFzc05hbWU6IGNsYXNzTmFtZXMoYCR7cHJlZml4Q2xzfS10cmVlbm9kZS1tb3Rpb25gLCBtb3Rpb25DbGFzc05hbWUpLCBzdHlsZTogbW90aW9uU3R5bGUgfSwgbW90aW9uTm9kZXMubWFwKCh0cmVlTm9kZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBkYXRhOiB7IGtleSwgLi4ucmVzdFByb3BzIH0sIGlzU3RhcnQsIGlzRW5kLCB9ID0gdHJlZU5vZGU7XG4gICAgICAgICAgICBkZWxldGUgcmVzdFByb3BzLmNoaWxkcmVuO1xuICAgICAgICAgICAgY29uc3QgdHJlZU5vZGVQcm9wcyA9IGdldFRyZWVOb2RlUHJvcHMoa2V5LCB0cmVlTm9kZVJlcXVpcmVkUHJvcHMpO1xuICAgICAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFRyZWVOb2RlLCBPYmplY3QuYXNzaWduKHt9LCByZXN0UHJvcHMsIHRyZWVOb2RlUHJvcHMsIHsgYWN0aXZlOiBhY3RpdmUsIGRhdGE6IHRyZWVOb2RlLmRhdGEsIGtleToga2V5LCBpc1N0YXJ0OiBpc1N0YXJ0LCBpc0VuZDogaXNFbmQgfSkpKTtcbiAgICAgICAgfSkpKSkpO1xuICAgIH1cbiAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHJlZU5vZGUsIE9iamVjdC5hc3NpZ24oeyBkb21SZWY6IHJlZiwgY2xhc3NOYW1lOiBjbGFzc05hbWUsIHN0eWxlOiBzdHlsZSB9LCBwcm9wcywgeyBhY3RpdmU6IGFjdGl2ZSB9KSkpO1xufTtcbk1vdGlvblRyZWVOb2RlLmRpc3BsYXlOYW1lID0gJ01vdGlvblRyZWVOb2RlJztcbmNvbnN0IFJlZk1vdGlvblRyZWVOb2RlID0gUmVhY3QuZm9yd2FyZFJlZihNb3Rpb25UcmVlTm9kZSk7XG5leHBvcnQgZGVmYXVsdCBSZWZNb3Rpb25UcmVlTm9kZTtcbiJdfQ==