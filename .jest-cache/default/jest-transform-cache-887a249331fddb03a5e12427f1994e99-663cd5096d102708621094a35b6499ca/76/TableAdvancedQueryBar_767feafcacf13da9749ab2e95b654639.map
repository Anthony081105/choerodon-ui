{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/table/query-bar/TableAdvancedQueryBar.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { cloneElement, Component, CSSProperties, ReactElement, ReactNode } from 'react';\nimport { observer } from 'mobx-react';\nimport { pxToRem } from 'choerodon-ui/lib/_util/UnitConvertor';\nimport { getProPrefixCls } from 'choerodon-ui/lib/configure';\nimport Field from '../../data-set/Field';\nimport DataSet from '../../data-set';\nimport Button from '../../button';\nimport TableContext from '../TableContext';\nimport { ElementProps } from '../../core/ViewComponent';\nimport { ButtonColor, FuncType } from '../../button/enum';\nimport { ButtonProps } from '../../button/Button';\nimport { $l } from '../../locale-context';\nimport autobind from '../../_util/autobind';\nimport { PaginationProps } from '../../pagination/Pagination';\nimport TableButtons from './TableButtons';\nimport FilterSelect from './FilterSelect';\nimport Modal from '../../modal';\nimport Form from '../../form/Form';\nimport { LabelLayout } from '../../form/enum';\n\nexport interface TableAdvancedQueryBarProps extends ElementProps {\n  dataSet: DataSet;\n  queryDataSet?: DataSet;\n  queryFields: ReactElement<any>[];\n  queryFieldsLimit?: number;\n  buttons: ReactElement<ButtonProps>[];\n  pagination?: ReactElement<PaginationProps>;\n}\n\n@observer\nexport default class TableAdvancedQueryBar extends Component<TableAdvancedQueryBarProps> {\n  static contextType = TableContext;\n\n  static defaultProps = {\n    prefixCls: getProPrefixCls('table'),\n    queryFieldsLimit: 1,\n  };\n\n  moreFields: Field[];\n\n  modal;\n\n  componentWillUnmount() {\n    if (this.modal) {\n      this.modal.close(true);\n    }\n  }\n\n  @autobind\n  handleFieldEnter() {\n    this.handleQuery();\n    if (this.modal) {\n      this.modal.close();\n    }\n  }\n\n  @autobind\n  handleQuery() {\n    const { dataSet } = this.props;\n    dataSet.query();\n  }\n\n  @autobind\n  valueFilter(value: string): boolean {\n    const { queryFields, queryFieldsLimit } = this.props;\n    return queryFields.slice(0, queryFieldsLimit).every(element => element.props.name !== value);\n  }\n\n  getMoreFieldsButton(fields: ReactElement<any>[]) {\n    if (fields.length) {\n      return (\n        <Button\n          funcType={FuncType.raised}\n          color={ButtonColor.primary}\n          onClick={() => this.openMore(fields)}\n        >\n          {$l('Table', 'advanced_query')}\n        </Button>\n      );\n    }\n  }\n\n  openMore(children: ReactElement<any>[]) {\n    this.modal = Modal.open({\n      title: $l('Table', 'advanced_query'),\n      children: <Form labelLayout={LabelLayout.float}>{children}</Form>,\n      okText: $l('Table', 'query_button'),\n      onOk: this.handleQuery,\n      style: {\n        width: pxToRem(380),\n      },\n      drawer: true,\n    });\n  }\n\n  getResetButton() {\n    return (\n      <Button funcType={FuncType.raised} onClick={this.handleQueryReset}>\n        {$l('Table', 'reset_button')}\n      </Button>\n    );\n  }\n\n  getQueryBar(): ReactNode {\n    const { prefixCls, queryFieldsLimit, queryFields, buttons, queryDataSet } = this.props;\n    if (queryDataSet && queryFields.length) {\n      const currentFields = this.createFields(\n        queryFields.slice(0, queryFieldsLimit),\n        queryDataSet,\n        false,\n      );\n      const moreFields = this.createFields(queryFields.slice(queryFieldsLimit), queryDataSet, true);\n      const moreFieldsButton: ReactElement | undefined = this.getMoreFieldsButton(moreFields);\n      return (\n        <div key=\"toolbar\" className={`${prefixCls}-advanced-query-bar`}>\n          {currentFields}\n          <span className={`${prefixCls}-advanced-query-bar-button`}>\n            {this.getResetButton()}\n            {moreFieldsButton}\n            {buttons}\n          </span>\n        </div>\n      );\n    }\n  }\n\n  createFields(elements: ReactElement<any>[], dataSet: DataSet, isMore: boolean): ReactElement[] {\n    return elements.map(element => {\n      const { name, style } = element.props;\n      const newStyle: CSSProperties = {};\n      if (!isMore) {\n        newStyle.width = pxToRem(260);\n        newStyle.marginRight = pxToRem(10);\n      }\n      const props: any = {\n        onEnterDown: this.handleFieldEnter,\n        labelLayout: LabelLayout.float,\n        style: {\n          marginRight: !isMore ? pxToRem(10) : 0,\n          ...style,\n        },\n      };\n      const field = dataSet.getField(name);\n      if (field) {\n        const label = field.get('label');\n        if (label) {\n          if (isMore) {\n            props.label = label;\n          } else {\n            props.placeholder = label;\n          }\n        }\n      }\n      return cloneElement(element, props);\n    });\n  }\n\n  @autobind\n  handleQueryReset() {\n    const { queryDataSet } = this.props;\n    if (queryDataSet) {\n      const { current } = queryDataSet;\n      if (current) {\n        current.reset();\n      }\n      this.handleQuery();\n    }\n  }\n\n  getFilterSelect() {\n    const { prefixCls, dataSet, queryDataSet } = this.props;\n    return (\n      <FilterSelect\n        key=\"filter\"\n        prefixCls={`${prefixCls}-filter-select`}\n        className={`${prefixCls}-advanced-query-bar-options`}\n        optionDataSet={dataSet}\n        queryDataSet={queryDataSet}\n        prefix={`${$l('Table', 'advanced_query_conditions')}:`}\n        editable={false}\n        filter={this.valueFilter}\n        hiddenIfNone\n      />\n    );\n  }\n\n  render() {\n    const { buttons, prefixCls } = this.props;\n    const queryBar = this.getQueryBar();\n\n    if (queryBar) {\n      return [queryBar, this.getFilterSelect()];\n    }\n\n    return <TableButtons key=\"toolbar\" prefixCls={prefixCls} buttons={buttons} />;\n  }\n}\n"]}