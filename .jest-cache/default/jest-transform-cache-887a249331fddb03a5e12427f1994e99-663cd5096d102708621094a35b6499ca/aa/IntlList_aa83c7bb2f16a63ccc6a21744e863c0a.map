{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/intl-field/IntlList.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYA,IAAqB,QAArB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,oCAQe;AAAA,wBACwB,KAAK,KAD7B;AAAA,UACH,IADG,eACH,IADG;AAAA,UACG,IADH,eACG,IADH;AAAA,UACS,UADT,eACS,UADT;AAAA,UAEH,QAFG,GAEU,yBAFV,CAEH,QAFG;AAGX,UAAM,MAAM,GAAG,0BAAU,QAAV,CAAf;AACA,aAAO,MAAM,CAAC,IAAP,CAAY,QAAZ,EAAsB,GAAtB,CAA0B,UAAA,GAAG,EAAG;AACrC,YAAM,cAAc,GAAG,UAAU,IAAI,UAAU,CAAC,GAAD,CAAxB,GAAgC;AAAE,UAAA,SAAS,EAAE,UAAU,CAAC,GAAD;AAAvB,SAAhC,GAAiE,EAAxF;AACA,eACE,kBAAA,aAAA,CAAC,qBAAD,EAAkB,0BAAA,EAAA,EACZ,cADY,EACE;AAClB,UAAA,IAAI,EAAE,IAAI,aAAM,MAAN,cAAgB,IAAhB,cAAwB,GAAxB,IAAgC,GADxB;AAElB,UAAA,SAAS,EAAE,GAAG,KAAK,IAFD;AAGlB,UAAA,GAAG,EAAE;AAHa,SADF,CAAlB,CADF;AAQD,OAVM,CAAP;AAWD;AAvBH;AAAA;AAAA,6BAyBQ;AAAA,UACI,MADJ,GACe,KAAK,KADpB,CACI,MADJ;AAEJ,aAAO,kBAAA,aAAA,CAAC,gBAAD,EAAK;AAAC,QAAA,MAAM,EAAE;AAAT,OAAL,EAAuB,KAAK,aAAL,EAAvB,CAAP;AACD;AA5BH;AAAA;AAAA,EAAsC,gBAAtC,CAAA;;AACS,QAAA,CAAA,SAAA,GAAY;AACjB,EAAA,MAAM,EAAE,sBAAU,MADD;AAEjB,EAAA,IAAI,EAAE,sBAAU,MAFC;AAGjB,EAAA,IAAI,EAAE,sBAAU,MAHC;AAIjB,EAAA,UAAU,EAAE,sBAAU;AAJL,CAAZ;AADY,QAAQ,GAAA,uBAAA,CAD5B,mBAC4B,CAAA,EAAR,QAAQ,CAAR;eAAA,Q","sourcesContent":["import React, { Component } from 'react';\nimport { observer } from 'mobx-react';\nimport PropTypes from 'prop-types';\nimport { getConfig } from 'choerodon-ui/lib/configure';\nimport ObserverTextField from '../text-field/TextField';\nimport Form from '../form/Form';\nimport localeContext from '../locale-context';\nimport Record from '../data-set/Record';\nimport { Lang } from '../locale-context/enum';\n\nexport interface IntlListProps {\n  record?: Record;\n  name?: string;\n  lang: Lang;\n  maxLengths?: object;\n}\n\n@observer\nexport default class IntlList extends Component<IntlListProps> {\n  static propTypes = {\n    record: PropTypes.object,\n    name: PropTypes.string,\n    lang: PropTypes.string,\n    maxLengths: PropTypes.object,\n  };\n\n  renderOptions() {\n    const { name, lang, maxLengths } = this.props;\n    const { supports } = localeContext;\n    const tlsKey = getConfig('tlsKey');\n    return Object.keys(supports).map(key => {\n      const maxLengthProps = maxLengths && maxLengths[key] ? { maxLength: maxLengths[key] } : {};\n      return (\n        <ObserverTextField\n          {...maxLengthProps}\n          name={name ? `${tlsKey}.${name}.${key}` : key}\n          autoFocus={key === lang}\n          key={key}\n        />\n      );\n    });\n  }\n\n  render() {\n    const { record } = this.props;\n    return <Form record={record}>{this.renderOptions()}</Form>;\n  }\n}\n"]}