{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components/rc-components/tree/utils/conductUtil.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\n/* eslint-disable */\nimport warning from 'rc-util/lib/warning';\nimport { Key, DataEntity, DataNode } from '../interface';\n\ninterface ConductReturnType {\n  checkedKeys: Key[];\n  halfCheckedKeys: Key[];\n}\n\nfunction removeFromCheckedKeys(halfCheckedKeys: Set<Key>, checkedKeys: Set<Key>) {\n  const filteredKeys = new Set<Key>();\n  halfCheckedKeys.forEach(key => {\n    if (!checkedKeys.has(key)) {\n      filteredKeys.add(key);\n    }\n  });\n  return filteredKeys;\n}\n\nexport function isCheckDisabled(node: DataNode) {\n  const { disabled, disableCheckbox, checkable } = (node || {}) as DataNode;\n  return !!(disabled || disableCheckbox) || checkable === false;\n}\n\n// Fill miss keys\nfunction fillConductCheck(\n  keys: Set<Key>,\n  levelEntities: Map<number, Set<DataEntity>>,\n  maxLevel: number,\n): ConductReturnType {\n  const checkedKeys = new Set<Key>(keys);\n  const halfCheckedKeys = new Set<Key>();\n\n  // Add checked keys top to bottom\n  for (let level = 0; level <= maxLevel; level += 1) {\n    const entities = levelEntities.get(level) || new Set();\n    entities.forEach(entity => {\n      const { key, node, children = [] } = entity;\n\n      if (checkedKeys.has(key) && !isCheckDisabled(node)) {\n        children\n          .filter(childEntity => !isCheckDisabled(childEntity.node))\n          .forEach(childEntity => {\n            checkedKeys.add(childEntity.key);\n          });\n      }\n    });\n  }\n\n  // Add checked keys from bottom to top\n  const visitedKeys = new Set<Key>();\n  for (let level = maxLevel; level >= 0; level -= 1) {\n    const entities = levelEntities.get(level) || new Set();\n    entities.forEach(entity => {\n      const { parent, node } = entity;\n\n      // Skip if no need to check\n      if (isCheckDisabled(node) || !entity.parent || visitedKeys.has(entity.parent.key)) {\n        return;\n      }\n\n      // Skip if parent is disabled\n      if (isCheckDisabled(entity.parent.node)) {\n        visitedKeys.add(parent.key);\n        return;\n      }\n\n      let allChecked = true;\n      let partialChecked = false;\n\n      (parent.children || [])\n        .filter(childEntity => !isCheckDisabled(childEntity.node))\n        .forEach(({ key }) => {\n          const checked = checkedKeys.has(key);\n          if (allChecked && !checked) {\n            allChecked = false;\n          }\n          if (!partialChecked && (checked || halfCheckedKeys.has(key))) {\n            partialChecked = true;\n          }\n        });\n\n      if (allChecked) {\n        checkedKeys.add(parent.key);\n      }\n      if (partialChecked) {\n        halfCheckedKeys.add(parent.key);\n      }\n\n      visitedKeys.add(parent.key);\n    });\n  }\n\n  return {\n    checkedKeys: Array.from(checkedKeys),\n    halfCheckedKeys: Array.from(removeFromCheckedKeys(halfCheckedKeys, checkedKeys)),\n  };\n}\n\n// Remove useless key\nfunction cleanConductCheck(\n  keys: Set<Key>,\n  halfKeys: Key[],\n  levelEntities: Map<number, Set<DataEntity>>,\n  maxLevel: number,\n): ConductReturnType {\n  const checkedKeys = new Set<Key>(keys);\n  let halfCheckedKeys = new Set<Key>(halfKeys);\n\n  // Remove checked keys from top to bottom\n  for (let level = 0; level <= maxLevel; level += 1) {\n    const entities = levelEntities.get(level) || new Set();\n    entities.forEach(entity => {\n      const { key, node, children = [] } = entity;\n\n      if (!checkedKeys.has(key) && !halfCheckedKeys.has(key) && !isCheckDisabled(node)) {\n        children\n          .filter(childEntity => !isCheckDisabled(childEntity.node))\n          .forEach(childEntity => {\n            checkedKeys.delete(childEntity.key);\n          });\n      }\n    });\n  }\n\n  // Remove checked keys form bottom to top\n  halfCheckedKeys = new Set<Key>();\n  const visitedKeys = new Set<Key>();\n  for (let level = maxLevel; level >= 0; level -= 1) {\n    const entities = levelEntities.get(level) || new Set();\n\n    entities.forEach(entity => {\n      const { parent, node } = entity;\n\n      // Skip if no need to check\n      if (isCheckDisabled(node) || !entity.parent || visitedKeys.has(entity.parent.key)) {\n        return;\n      }\n\n      // Skip if parent is disabled\n      if (isCheckDisabled(entity.parent.node)) {\n        visitedKeys.add(parent.key);\n        return;\n      }\n\n      let allChecked = true;\n      let partialChecked = false;\n\n      (parent.children || [])\n        .filter(childEntity => !isCheckDisabled(childEntity.node))\n        .forEach(({ key }) => {\n          const checked = checkedKeys.has(key);\n          if (allChecked && !checked) {\n            allChecked = false;\n          }\n          if (!partialChecked && (checked || halfCheckedKeys.has(key))) {\n            partialChecked = true;\n          }\n        });\n\n      if (!allChecked) {\n        checkedKeys.delete(parent.key);\n      }\n      if (partialChecked) {\n        halfCheckedKeys.add(parent.key);\n      }\n\n      visitedKeys.add(parent.key);\n    });\n  }\n\n  return {\n    checkedKeys: Array.from(checkedKeys),\n    halfCheckedKeys: Array.from(removeFromCheckedKeys(halfCheckedKeys, checkedKeys)),\n  };\n}\n\n/**\n * Conduct with keys.\n * @param keyList current key list\n * @param keyEntities key - dataEntity map\n * @param mode `fill` to fill missing key, `clean` to remove useless key\n */\nexport function conductCheck(\n  keyList: Key[],\n  checked: true | { checked: false; halfCheckedKeys: Key[] },\n  keyEntities: Record<Key, DataEntity>,\n): ConductReturnType {\n  const warningMissKeys: Key[] = [];\n\n  // We only handle exist keys\n  const keys = new Set<Key>(\n    keyList.filter(key => {\n      const hasEntity = !!keyEntities[key];\n      if (!hasEntity) {\n        warningMissKeys.push(key);\n      }\n\n      return hasEntity;\n    }),\n  );\n  const levelEntities = new Map<number, Set<DataEntity>>();\n  let maxLevel = 0;\n\n  // Convert entities by level for calculation\n  Object.keys(keyEntities).forEach(key => {\n    const entity = keyEntities[key];\n    const { level } = entity;\n\n    let levelSet: Set<DataEntity> = levelEntities.get(level);\n    if (!levelSet) {\n      levelSet = new Set();\n      levelEntities.set(level, levelSet);\n    }\n\n    levelSet.add(entity);\n\n    maxLevel = Math.max(maxLevel, level);\n  });\n\n  warning(\n    !warningMissKeys.length,\n    `Tree missing follow keys: ${warningMissKeys\n      .slice(0, 100)\n      .map(key => `'${key}'`)\n      .join(', ')}`,\n  );\n\n  let result: ConductReturnType;\n  if (checked === true) {\n    result = fillConductCheck(keys, levelEntities, maxLevel);\n  } else {\n    result = cleanConductCheck(keys, checked.halfCheckedKeys, levelEntities, maxLevel);\n  }\n\n  return result;\n}\n"]}