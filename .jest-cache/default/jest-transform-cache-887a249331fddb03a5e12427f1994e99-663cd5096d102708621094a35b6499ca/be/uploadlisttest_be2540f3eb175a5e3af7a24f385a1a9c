4a277438586b8a7f6db7eb77eee06e43
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _ = _interopRequireDefault(require(".."));

var _form = _interopRequireDefault(require("../../form"));

var _requests = require("./requests");

function _createSuper(Derived) {
  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  return function () {
    var Super = (0, _getPrototypeOf2["default"])(Derived),
        result;

    if (isNativeReflectConstruct()) {
      var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return (0, _possibleConstructorReturn2["default"])(this, result);
  };
}

var delay = function delay(timeout) {
  return new Promise(function (resolve) {
    return setTimeout(resolve, timeout);
  });
};

var fileList = [{
  uid: -1,
  name: 'xxx.png',
  status: 'done',
  url: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',
  thumbUrl: 'https://zos.alipayobjects.com/rmsportal/IQKRngzUuFzJzGzRJXUs.png'
}, {
  uid: -2,
  name: 'yyy.png',
  status: 'done',
  url: 'https://zos.alipayobjects.com/rmsportal/IQKRngzUuFzJzGzRJXUs.png',
  thumbUrl: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png'
}];
describe('Upload List', function () {
  it('should use file.thumbUrl for <img /> in priority', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      defaultFileList: fileList,
      listType: "picture"
    }, _react["default"].createElement("button", {
      type: "button"
    }, "upload")));
    fileList.forEach(function (file, i) {
      var linkNode = wrapper.find('.c7n-upload-list-item-thumbnail').at(i);
      var imgNode = wrapper.find('.c7n-upload-list-item-thumbnail img').at(i);
      expect(linkNode.prop('href')).toBe(file.url);
      expect(imgNode.prop('src')).toBe(file.thumbUrl);
    });
  });
  it('should remove correct item when uid is 0',
  /*#__PURE__*/
  (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee() {
    var list, wrapper;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            list = [{
              uid: 0,
              name: 'xxx.png',
              status: 'done',
              url: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',
              thumbUrl: 'https://zos.alipayobjects.com/rmsportal/IQKRngzUuFzJzGzRJXUs.png'
            }, {
              uid: 1,
              name: 'xxx.png',
              status: 'done',
              url: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',
              thumbUrl: 'https://zos.alipayobjects.com/rmsportal/IQKRngzUuFzJzGzRJXUs.png'
            }];
            wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
              defaultFileList: list
            }, _react["default"].createElement("button", {
              type: "button"
            }, "upload")));
            expect(wrapper.find('.c7n-upload-list-item').length).toBe(2);
            wrapper.find('.c7n-upload-list-item').at(0).find('.icon-close').simulate('click');
            _context.next = 6;
            return delay(400);

          case 6:
            wrapper.update();
            expect(wrapper.find('.c7n-upload-list-item').hostNodes().length).toBe(1);

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
  it('should be uploading when upload a file', function (done) {
    var wrapper;

    var onChange = function onChange(_ref2) {
      var file = _ref2.file;

      if (file.status === 'uploading') {
        expect(wrapper.render()).toMatchSnapshot();
      }

      if (file.status === 'done') {
        expect(wrapper.render()).toMatchSnapshot();
        done();
      }
    };

    wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      action: "http://jsonplaceholder.typicode.com/posts/",
      onChange: onChange,
      customRequest: _requests.successRequest
    }, _react["default"].createElement("button", {
      type: "button"
    }, "upload")));
    wrapper.find('input').simulate('change', {
      target: {
        files: [{
          filename: 'foo.png'
        }]
      }
    });
  });
  it('handle error', function (done) {
    var wrapper;

    var onChange = function onChange(_ref3) {
      var file = _ref3.file;

      if (file.status !== 'uploading') {
        expect(wrapper.render()).toMatchSnapshot();
        done();
      }
    };

    wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      action: "http://jsonplaceholder.typicode.com/posts/",
      onChange: onChange,
      customRequest: _requests.errorRequest
    }, _react["default"].createElement("button", {
      type: "button"
    }, "upload")));
    wrapper.find('input').simulate('change', {
      target: {
        files: [{
          filename: 'foo.png'
        }]
      }
    });
  });
  it('does concat filelist when beforeUpload returns false', function () {
    var handleChange = jest.fn();
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      listType: "picture",
      defaultFileList: fileList,
      onChange: handleChange,
      beforeUpload: function beforeUpload() {
        return false;
      }
    }, _react["default"].createElement("button", {
      type: "button"
    }, "upload")));
    wrapper.find('input').simulate('change', {
      target: {
        files: [{
          filename: 'foo.png'
        }]
      }
    });
    expect(wrapper.state().fileList.length).toBe(fileList.length + 1);
    expect(handleChange.mock.calls[0][0].fileList).toHaveLength(3);
  });
  it('work with form validation', function () {
    var errors;

    var TestForm =
    /*#__PURE__*/
    function (_React$Component) {
      (0, _inherits2["default"])(TestForm, _React$Component);

      var _super = _createSuper(TestForm);

      function TestForm() {
        var _this;

        (0, _classCallCheck2["default"])(this, TestForm);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "handleSubmit", function () {
          var validateFields = _this.props.form.validateFields;
          validateFields(function (err) {
            errors = err;
          });
        });
        return _this;
      }

      (0, _createClass2["default"])(TestForm, [{
        key: "render",
        value: function render() {
          var getFieldDecorator = this.props.form.getFieldDecorator;
          return _react["default"].createElement(_form["default"], {
            onSubmit: this.handleSubmit
          }, _react["default"].createElement(_form["default"].Item, null, getFieldDecorator('file', {
            valuePropname: 'fileList',
            getValueFromEvent: function getValueFromEvent(e) {
              return e.fileList;
            },
            rules: [{
              required: true,
              validator: function validator(rule, value, callback) {
                if (!value || value.length === 0) {
                  callback('file required');
                } else {
                  callback();
                }
              }
            }]
          })(_react["default"].createElement(_["default"], {
            beforeUpload: function beforeUpload() {
              return false;
            }
          }, _react["default"].createElement("button", {
            type: "button"
          }, "upload")))));
        }
      }]);
      return TestForm;
    }(_react["default"].Component);

    var App = _form["default"].create()(TestForm);

    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(App, null));
    wrapper.find(_form["default"]).simulate('submit');
    expect(errors.file.errors).toEqual([{
      message: 'file required',
      field: 'file'
    }]);
    wrapper.find('input').simulate('change', {
      target: {
        files: [{
          filename: 'foo.png'
        }]
      }
    });
    wrapper.find(_form["default"]).simulate('submit');
    expect(errors).toBeNull();
  });
  it('should support onPreview', function () {
    var handlePreview = jest.fn();
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      listType: "picture-card",
      defaultFileList: fileList,
      onPreview: handlePreview
    }, _react["default"].createElement("button", {
      type: "button"
    }, "upload")));
    wrapper.find('.icon-visibility').at(0).simulate('click');
    expect(handlePreview).toHaveBeenCalledWith(fileList[0]);
    wrapper.find('.icon-visibility').at(1).simulate('click');
    expect(handlePreview).toHaveBeenCalledWith(fileList[1]);
  });
  it('should support onRemove',
  /*#__PURE__*/
  (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee2() {
    var handleRemove, handleChange, wrapper;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            handleRemove = jest.fn();
            handleChange = jest.fn();
            wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
              listType: "picture-card",
              defaultFileList: fileList,
              onRemove: handleRemove,
              onChange: handleChange
            }, _react["default"].createElement("button", {
              type: "button"
            }, "upload")));
            wrapper.find('.icon-delete').at(0).simulate('click');
            expect(handleRemove).toHaveBeenCalledWith(fileList[0]);
            wrapper.find('.icon-delete').at(1).simulate('click');
            expect(handleRemove).toHaveBeenCalledWith(fileList[1]);
            _context2.next = 9;
            return delay(0);

          case 9:
            expect(handleChange.mock.calls.length).toBe(2);

          case 10:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }))); // it('should generate thumbUrl from file', async () => {
  //   const handlePreview = jest.fn();
  //   const newFileList = [...fileList];
  //   const newFile = { ...fileList[0], uid: -3, originFileObj: new File([], 'xxx.png') };
  //   delete newFile.thumbUrl;
  //   newFileList.push(newFile);
  //   const wrapper = mount(
  //     <Upload listType="picture-card" defaultFileList={newFileList} onPreview={handlePreview}>
  //       <button type="button">upload</button>
  //     </Upload>,
  //   );
  //   wrapper.setState({});
  //   await delay(20);
  //   expect(wrapper.state().fileList[2].thumbUrl).not.toBeFalsy();
  // });

  it('should non-image format file preview', function () {
    var list = [(0, _objectSpread2["default"])({}, fileList[0], {
      uid: -3,
      url: 'https://cdn.xxx.com/aaa.zip',
      thumbUrl: 'data:application/zip;base64,UEsDBAoAAAAAADYZYkwAAAAAAAAAAAAAAAAdAAk',
      originFileObj: new File([], 'aaa.zip')
    })];
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      listType: "picture",
      defaultFileList: list
    }, _react["default"].createElement("button", {
      type: "button"
    }, "upload")));
    expect(wrapper.render()).toMatchSnapshot();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,