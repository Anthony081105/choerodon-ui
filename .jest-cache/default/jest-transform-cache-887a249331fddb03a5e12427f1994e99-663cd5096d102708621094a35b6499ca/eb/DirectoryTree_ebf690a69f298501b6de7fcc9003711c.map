{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components/tree/DirectoryTree.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\nimport omit from 'lodash/omit';\nimport debounce from 'lodash/debounce';\nimport Icon from '../icon';\nimport { conductExpandParent } from '../rc-components/tree/util';\nimport { EventDataNode, DataNode } from '../rc-components/tree/interface';\nimport { convertDataToEntities, convertTreeToData } from '../rc-components/tree/utils/treeUtil';\nimport { getPrefixCls } from '../configure';\n\nimport Tree, { TreeProps, C7ndTreeNodeAttribute } from './index';\nimport { calcRangeKeys, convertDirectoryKeysToNodes } from './utils/dictUtil';\n\nexport type ExpandAction = false | 'click' | 'doubleClick';\n\nexport interface DirectoryTreeProps extends TreeProps {\n  expandAction?: ExpandAction;\n}\n\nexport interface DirectoryTreeState {\n  expandedKeys?: string[];\n  selectedKeys?: string[];\n}\n\nfunction getIcon(props: C7ndTreeNodeAttribute): React.ReactNode {\n\n  const { isLeaf, expanded, prefixCls } = props;\n  const prefixCl = getPrefixCls('tree', prefixCls);\n  if (isLeaf) {\n    return <Icon type=\"insert_drive_file\" className={`${prefixCl}-switcher-line-icon`} />;\n  }\n  return expanded ? <Icon type=\"baseline-file_copy\" className={`${prefixCl}-switcher-line-icon`} />: <Icon type=\"library_books\" className={`${prefixCl}-switcher-line-icon`} />;\n}\n\nfunction getTreeData({ treeData, children }: DirectoryTreeProps) {\n  return treeData || convertTreeToData(children);\n}\n\nclass DirectoryTree extends React.Component<DirectoryTreeProps, DirectoryTreeState> {\n  static defaultProps = {\n    showIcon: true,\n    expandAction: 'click',\n  };\n\n  static getDerivedStateFromProps(nextProps: DirectoryTreeProps) {\n    const newState: DirectoryTreeState = {};\n    if ('expandedKeys' in nextProps) {\n      newState.expandedKeys = nextProps.expandedKeys;\n    }\n    if ('selectedKeys' in nextProps) {\n      newState.selectedKeys = nextProps.selectedKeys;\n    }\n    return newState;\n  }\n\n  state: DirectoryTreeState;\n  \n  tree: Tree;\n\n\n  onDebounceExpand: (event: React.MouseEvent<HTMLElement>, node: EventDataNode) => void;\n\n  // Shift click usage\n  lastSelectedKey?: string;\n\n  cachedSelectedKeys?: string[];\n\n  constructor(props: DirectoryTreeProps) {\n    super(props);\n\n    const { defaultExpandAll, defaultExpandParent, expandedKeys, defaultExpandedKeys } = props;\n    const { keyEntities } = convertDataToEntities(getTreeData(props));\n\n    // Selected keys\n    this.state = {\n      selectedKeys: props.selectedKeys || props.defaultSelectedKeys || [],\n    };\n\n    // Expanded keys\n    if (defaultExpandAll) {\n      this.state.expandedKeys = Object.keys(keyEntities);\n    } else if (defaultExpandParent) {\n      this.state.expandedKeys = conductExpandParent(\n        expandedKeys || defaultExpandedKeys|| [],\n        keyEntities,\n      );\n    } else {\n      this.state.expandedKeys = expandedKeys || defaultExpandedKeys;\n    }\n\n    this.onDebounceExpand = debounce(this.expandFolderNode, 200, {\n      leading: true,\n    });\n  }\n\n  onExpand = (\n    expandedKeys: string[],\n    info: {\n      node: EventDataNode;\n      expanded: boolean;\n      nativeEvent: MouseEvent;\n    },\n  ) => {\n    const { onExpand } = this.props;\n\n    this.setUncontrolledState({ expandedKeys });\n\n    // Call origin function\n    if (onExpand) {\n      return onExpand(expandedKeys, info);\n    }\n\n    return undefined;\n  };\n\n  onClick = (event: React.MouseEvent<HTMLElement>, node: EventDataNode) => {\n    const { onClick, expandAction } = this.props;\n\n    // Expand the tree\n    if (expandAction === 'click') {\n      this.onDebounceExpand(event, node);\n    }\n\n    if (onClick) {\n      onClick(event, node);\n    }\n  };\n\n  onDoubleClick = (event: React.MouseEvent<HTMLElement>, node: EventDataNode) => {\n    const { onDoubleClick, expandAction } = this.props;\n\n    // Expand the tree\n    if (expandAction === 'doubleClick') {\n      this.onDebounceExpand(event, node);\n    }\n\n    if (onDoubleClick) {\n      onDoubleClick(event, node);\n    }\n  };\n\n  onSelect = (\n    keys: string[],\n    event: {\n      event: 'select';\n      selected: boolean;\n      node: any;\n      selectedNodes: DataNode[];\n      nativeEvent: MouseEvent;\n    },\n  ) => {\n    const { onSelect, multiple } = this.props;\n    const { expandedKeys = [] } = this.state;\n    const { node, nativeEvent } = event;\n    const { key = '' } = node;\n\n    const treeData = getTreeData(this.props);\n    const newState: DirectoryTreeState = {};\n\n    // We need wrap this event since some value is not same\n    const newEvent: any = {\n      ...event,\n      selected: true, // Directory selected always true\n    };\n\n    // Windows / Mac single pick\n    const ctrlPick: boolean = nativeEvent.ctrlKey || nativeEvent.metaKey;\n    const shiftPick: boolean = nativeEvent.shiftKey;\n\n    // Generate new selected keys\n    let newSelectedKeys: string[];\n    if (multiple && ctrlPick) {\n      // Control click\n      newSelectedKeys = keys;\n      this.lastSelectedKey = key;\n      this.cachedSelectedKeys = newSelectedKeys;\n      newEvent.selectedNodes = convertDirectoryKeysToNodes(treeData, newSelectedKeys);\n    } else if (multiple && shiftPick) {\n      // Shift click\n      newSelectedKeys = Array.from(\n        new Set([\n          ...(this.cachedSelectedKeys || []),\n          ...calcRangeKeys(treeData, expandedKeys, key, this.lastSelectedKey),\n        ]),\n      );\n      newEvent.selectedNodes = convertDirectoryKeysToNodes(treeData, newSelectedKeys);\n    } else {\n      // Single click\n      newSelectedKeys = [key];\n      this.lastSelectedKey = key;\n      this.cachedSelectedKeys = newSelectedKeys;\n      newEvent.selectedNodes = convertDirectoryKeysToNodes(treeData, newSelectedKeys);\n    }\n    newState.selectedKeys = newSelectedKeys;\n\n    if (onSelect) {\n      onSelect(newSelectedKeys, newEvent);\n    }\n\n    this.setUncontrolledState(newState);\n  };\n\n  setTreeRef = (node: Tree) => {\n    this.tree = node;\n  };\n\n  expandFolderNode = (event: React.MouseEvent<HTMLElement>, node: any) => {\n    const { isLeaf } = node;\n\n    if (isLeaf || event.shiftKey || event.metaKey || event.ctrlKey) {\n      return;\n    }\n\n    // Get internal rc-tree\n    const internalTree = this.tree.tree;\n\n    // Call internal rc-tree expand function\n    // https://github.com/C7n-design/C7n-design/issues/12567\n    internalTree.onNodeExpand(event, node);\n  };\n\n  getPrefixCls() {\n    const { prefixCls } = this.props;\n    return getPrefixCls('tree', prefixCls);\n  }\n\n  setUncontrolledState = (state: DirectoryTreeState) => {\n    const newState = omit(state, Object.keys(this.props));\n    if (Object.keys(newState).length) {\n      this.setState(newState);\n    }\n  };\n\n  renderDirectoryTree = () => {\n    const { className, ...props } = this.props;\n    const { expandedKeys, selectedKeys } = this.state;\n\n    const prefixCls = this.getPrefixCls()\n    const connectClassName = classNames(`${prefixCls}-directory`, className, {\n      [`${prefixCls}-directory-rtl`]: true ,\n    });\n\n    return (\n      <Tree\n        icon={getIcon}\n        ref={this.setTreeRef}\n        blockNode\n        {...props}\n        prefixCls={prefixCls}\n        className={connectClassName}\n        expandedKeys={expandedKeys}\n        selectedKeys={selectedKeys}\n        onSelect={this.onSelect}\n        onClick={this.onClick}\n        onDoubleClick={this.onDoubleClick}\n        onExpand={this.onExpand}\n      />\n    );\n  };\n\n  render() {\n    return this.renderDirectoryTree();\n  }\n}\n\nexport default DirectoryTree;\n"]}