929851592c3c05522df2266fc1d44f22
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = uniqueError;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _isString = _interopRequireDefault(require("lodash/isString"));

var _ValidationResult = _interopRequireDefault(require("../ValidationResult"));

var _localeContext = require("../../locale-context");

var _isEmpty = _interopRequireDefault(require("../../_util/isEmpty"));

var _utils = require("../../data-set/utils");

function uniqueError(_x, _x2) {
  return _uniqueError.apply(this, arguments);
}

function _uniqueError() {
  _uniqueError = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(value, props) {
    var dataSet, record, unique, name, multiple, range, defaultValidationMessages, myField, dirty, fields, invalid, newConfig, results, ruleName, _defaultValidationMes, validationMessage;

    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            dataSet = props.dataSet, record = props.record, unique = props.unique, name = props.name, multiple = props.multiple, range = props.range, defaultValidationMessages = props.defaultValidationMessages;

            if (!(!(0, _isEmpty["default"])(value) && dataSet && record && unique && name && !multiple && !range)) {
              _context.next = 23;
              break;
            }

            myField = record.getField(name);

            if (myField && myField.get('type') === "object"
            /* object */
            ) {
                value = value[myField.get('valueField')];
              }

            if (!myField) {
              _context.next = 23;
              break;
            }

            dirty = myField.dirty;
            fields = (0, _defineProperty2["default"])({}, name, value);

            if (!((0, _isString["default"])(unique) && (0, _toConsumableArray2["default"])(record.fields.entries()).some(function (_ref) {
              var _ref2 = (0, _slicedToArray2["default"])(_ref, 2),
                  fieldName = _ref2[0],
                  field = _ref2[1];

              if (fieldName !== name && field && field.get('unique') === unique && !field.get('multiple') && !field.get('range')) {
                var otherValue = record.get(fieldName);

                if ((0, _isEmpty["default"])(otherValue)) {
                  return true;
                }

                if (!dirty && field.dirty) {
                  dirty = true;
                }

                fields[fieldName] = otherValue;
              }

              return false;
            }))) {
              _context.next = 9;
              break;
            }

            return _context.abrupt("return", true);

          case 9:
            if (dirty) {
              _context.next = 11;
              break;
            }

            return _context.abrupt("return", true);

          case 11:
            invalid = dataSet.data.some(function (item) {
              return item !== record && Object.keys(fields).every(function (field) {
                var dataSetField = record.getField(name);

                if (dataSetField && dataSetField.get('type') === "object"
                /* object */
                ) {
                    var valueField = dataSetField.get('valueField');
                    return fields[field] === item.get(field)[valueField];
                  }

                return fields[field] === item.get(field);
              });
            });

            if (invalid) {
              _context.next = 19;
              break;
            }

            newConfig = (0, _utils.axiosConfigAdapter)('validate', dataSet, {
              unique: [fields]
            });

            if (!newConfig.url) {
              _context.next = 19;
              break;
            }

            _context.next = 17;
            return dataSet.axios(newConfig);

          case 17:
            results = _context.sent;
            invalid = [].concat(results).some(function (result) {
              return !result;
            });

          case 19:
            if (!invalid) {
              _context.next = 23;
              break;
            }

            ruleName = 'uniqueError';
            _defaultValidationMes = defaultValidationMessages[ruleName], validationMessage = _defaultValidationMes === void 0 ? (0, _localeContext.$l)('Validator', 'unique') : _defaultValidationMes;
            return _context.abrupt("return", new _ValidationResult["default"]({
              validationMessage: validationMessage,
              value: value,
              ruleName: ruleName
            }));

          case 23:
            return _context.abrupt("return", true);

          case 24:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _uniqueError.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9odWlodWF3ay9Eb2N1bWVudHMvb3B0L2Nob2Vyb2Rvbi11aS9jb21wb25lbnRzLXByby92YWxpZGF0b3IvcnVsZXMvdW5pcXVlRXJyb3IudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7U0FHOEIsVzs7Ozs7OzsrQkFBZixpQkFDYixLQURhLEVBRWIsS0FGYTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBSUwsWUFBQSxPQUpLLEdBSXlFLEtBSnpFLENBSUwsT0FKSyxFQUlJLE1BSkosR0FJeUUsS0FKekUsQ0FJSSxNQUpKLEVBSVksTUFKWixHQUl5RSxLQUp6RSxDQUlZLE1BSlosRUFJb0IsSUFKcEIsR0FJeUUsS0FKekUsQ0FJb0IsSUFKcEIsRUFJMEIsUUFKMUIsR0FJeUUsS0FKekUsQ0FJMEIsUUFKMUIsRUFJb0MsS0FKcEMsR0FJeUUsS0FKekUsQ0FJb0MsS0FKcEMsRUFJMkMseUJBSjNDLEdBSXlFLEtBSnpFLENBSTJDLHlCQUozQzs7QUFBQSxrQkFLVCxDQUFDLHlCQUFRLEtBQVIsQ0FBRCxJQUFtQixPQUFuQixJQUE4QixNQUE5QixJQUF3QyxNQUF4QyxJQUFrRCxJQUFsRCxJQUEwRCxDQUFDLFFBQTNELElBQXVFLENBQUMsS0FML0Q7QUFBQTtBQUFBO0FBQUE7O0FBTUwsWUFBQSxPQU5LLEdBTUssTUFBTSxDQUFDLFFBQVAsQ0FBZ0IsSUFBaEIsQ0FOTDs7QUFPWCxnQkFBSSxPQUFPLElBQUksT0FBTyxDQUFDLEdBQVIsQ0FBWSxNQUFaLE1BQW1CO0FBQUE7QUFBbEMsY0FBeUQ7QUFDdkQsZ0JBQUEsS0FBSyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBUixDQUFZLFlBQVosQ0FBRCxDQUFiO0FBQ0Q7O0FBVFUsaUJBVVAsT0FWTztBQUFBO0FBQUE7QUFBQTs7QUFXSCxZQUFBLEtBWEcsR0FXTyxPQVhQLENBV0gsS0FYRztBQVlI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QUFLLEVBQUwsS0FGMEI7QUFHMUIsY0FBQSxRQUFRLEVBQVI7QUFIMEIsYUFBckIsQ0FoRUE7O0FBQUE7QUFBQSw2Q0F3RU4sSUF4RU07O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBpc1N0cmluZyBmcm9tICdsb2Rhc2gvaXNTdHJpbmcnO1xuaW1wb3J0IFZhbGlkYXRpb25SZXN1bHQgZnJvbSAnLi4vVmFsaWRhdGlvblJlc3VsdCc7XG5pbXBvcnQgeyAkbCB9IGZyb20gJy4uLy4uL2xvY2FsZS1jb250ZXh0JztcbmltcG9ydCBpc0VtcHR5IGZyb20gJy4uLy4uL191dGlsL2lzRW1wdHknO1xuaW1wb3J0IHsgbWV0aG9kUmV0dXJuLCBWYWxpZGF0b3JQcm9wcyB9IGZyb20gJy4nO1xuaW1wb3J0IHsgYXhpb3NDb25maWdBZGFwdGVyIH0gZnJvbSAnLi4vLi4vZGF0YS1zZXQvdXRpbHMnO1xuaW1wb3J0IHsgRmllbGRUeXBlIH0gZnJvbSAnLi4vLi4vZGF0YS1zZXQvZW51bSc7XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIHVuaXF1ZUVycm9yKFxuICB2YWx1ZTogYW55LFxuICBwcm9wczogVmFsaWRhdG9yUHJvcHMsXG4pOiBQcm9taXNlPG1ldGhvZFJldHVybj4ge1xuICBjb25zdCB7IGRhdGFTZXQsIHJlY29yZCwgdW5pcXVlLCBuYW1lLCBtdWx0aXBsZSwgcmFuZ2UsIGRlZmF1bHRWYWxpZGF0aW9uTWVzc2FnZXMgfSA9IHByb3BzO1xuICBpZiAoIWlzRW1wdHkodmFsdWUpICYmIGRhdGFTZXQgJiYgcmVjb3JkICYmIHVuaXF1ZSAmJiBuYW1lICYmICFtdWx0aXBsZSAmJiAhcmFuZ2UpIHtcbiAgICBjb25zdCBteUZpZWxkID0gcmVjb3JkLmdldEZpZWxkKG5hbWUpO1xuICAgIGlmIChteUZpZWxkICYmIG15RmllbGQuZ2V0KCd0eXBlJykgPT09IEZpZWxkVHlwZS5vYmplY3QpIHtcbiAgICAgIHZhbHVlID0gdmFsdWVbbXlGaWVsZC5nZXQoJ3ZhbHVlRmllbGQnKV07XG4gICAgfVxuICAgIGlmIChteUZpZWxkKSB7XG4gICAgICBsZXQgeyBkaXJ0eSB9ID0gbXlGaWVsZDtcbiAgICAgIGNvbnN0IGZpZWxkcyA9IHsgW25hbWVdOiB2YWx1ZSB9O1xuICAgICAgaWYgKFxuICAgICAgICBpc1N0cmluZyh1bmlxdWUpICYmXG4gICAgICAgIFsuLi5yZWNvcmQuZmllbGRzLmVudHJpZXMoKV0uc29tZSgoW2ZpZWxkTmFtZSwgZmllbGRdKSA9PiB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgZmllbGROYW1lICE9PSBuYW1lICYmXG4gICAgICAgICAgICBmaWVsZCAmJlxuICAgICAgICAgICAgZmllbGQuZ2V0KCd1bmlxdWUnKSA9PT0gdW5pcXVlICYmXG4gICAgICAgICAgICAhZmllbGQuZ2V0KCdtdWx0aXBsZScpICYmXG4gICAgICAgICAgICAhZmllbGQuZ2V0KCdyYW5nZScpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBjb25zdCBvdGhlclZhbHVlID0gcmVjb3JkLmdldChmaWVsZE5hbWUpO1xuICAgICAgICAgICAgaWYgKGlzRW1wdHkob3RoZXJWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWRpcnR5ICYmIGZpZWxkLmRpcnR5KSB7XG4gICAgICAgICAgICAgIGRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpZWxkc1tmaWVsZE5hbWVdID0gb3RoZXJWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKCFkaXJ0eSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGxldCBpbnZhbGlkID0gZGF0YVNldC5kYXRhLnNvbWUoXG4gICAgICAgIGl0ZW0gPT5cbiAgICAgICAgICBpdGVtICE9PSByZWNvcmQgJiZcbiAgICAgICAgICBPYmplY3Qua2V5cyhmaWVsZHMpLmV2ZXJ5KGZpZWxkID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGFTZXRGaWVsZCA9IHJlY29yZC5nZXRGaWVsZChuYW1lKTtcbiAgICAgICAgICAgIGlmIChkYXRhU2V0RmllbGQgJiYgZGF0YVNldEZpZWxkLmdldCgndHlwZScpID09PSBGaWVsZFR5cGUub2JqZWN0KSB7XG4gICAgICAgICAgICAgIGNvbnN0IHZhbHVlRmllbGQgPSBkYXRhU2V0RmllbGQuZ2V0KCd2YWx1ZUZpZWxkJyk7XG4gICAgICAgICAgICAgIHJldHVybiBmaWVsZHNbZmllbGRdID09PSBpdGVtLmdldChmaWVsZClbdmFsdWVGaWVsZF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmllbGRzW2ZpZWxkXSA9PT0gaXRlbS5nZXQoZmllbGQpO1xuICAgICAgICAgIH0pLFxuICAgICAgKTtcbiAgICAgIGlmICghaW52YWxpZCkge1xuICAgICAgICBjb25zdCBuZXdDb25maWcgPSBheGlvc0NvbmZpZ0FkYXB0ZXIoJ3ZhbGlkYXRlJywgZGF0YVNldCwgeyB1bmlxdWU6IFtmaWVsZHNdIH0pO1xuICAgICAgICBpZiAobmV3Q29uZmlnLnVybCkge1xuICAgICAgICAgIGNvbnN0IHJlc3VsdHM6IGFueSA9IGF3YWl0IGRhdGFTZXQuYXhpb3MobmV3Q29uZmlnKTtcbiAgICAgICAgICBpbnZhbGlkID0gW10uY29uY2F0KHJlc3VsdHMpLnNvbWUocmVzdWx0ID0+ICFyZXN1bHQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaW52YWxpZCkge1xuICAgICAgICBjb25zdCBydWxlTmFtZSA9ICd1bmlxdWVFcnJvcic7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICBbcnVsZU5hbWVdOiB2YWxpZGF0aW9uTWVzc2FnZSA9ICRsKCdWYWxpZGF0b3InLCAndW5pcXVlJyksXG4gICAgICAgIH0gPSBkZWZhdWx0VmFsaWRhdGlvbk1lc3NhZ2VzO1xuICAgICAgICByZXR1cm4gbmV3IFZhbGlkYXRpb25SZXN1bHQoe1xuICAgICAgICAgIHZhbGlkYXRpb25NZXNzYWdlLFxuICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgIHJ1bGVOYW1lLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG4iXX0=