{"version":3,"sources":["animate/ChildrenUtils.js"],"names":["ret","Children","child","children","same","c1","c2","child2","hiddenProp","nextChildrenPending","pendingChildren","prev","findChildInChildrenByKey","next"],"mappings":"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","sourcesContent":["import { Children, isValidElement } from 'react';\nexport function toArrayChildren(children) {\n    const ret = [];\n    Children.forEach(children, child => {\n        if (isValidElement(child)) {\n            ret.push(child);\n        }\n    });\n    return ret;\n}\nexport function findChildInChildrenByKey(children, key) {\n    if (children) {\n        return children.find(child => child && child.key === key);\n    }\n}\nexport function findShownChildInChildrenByKey(children, key, hiddenProp) {\n    let ret;\n    if (children) {\n        children.forEach(child => {\n            if (child && child.key === key && !child.props[hiddenProp]) {\n                if (ret) {\n                    throw new Error('two child with same key for animate children');\n                }\n                ret = child;\n            }\n        });\n    }\n    return ret;\n}\n// export function findHiddenChildInChildrenByKey(children, key, showProp):boolean {\n//   let found = false;\n//   if (children) {\n//     children.forEach(function (child) {\n//       if (found) {\n//         return;\n//       }\n//       found = child && child.key === key && !child.props[showProp];\n//     });\n//   }\n//   return found;\n// }\nexport function isSameChildren(c1, c2, hiddenProp) {\n    let same = c1.length === c2.length;\n    if (same) {\n        c1.forEach((child, index) => {\n            const child2 = c2[index];\n            if (child && child2) {\n                if ((child && !child2) || (!child && child2)) {\n                    same = false;\n                }\n                else if (child.key !== child2.key) {\n                    same = false;\n                }\n                else if (hiddenProp && child.props[hiddenProp] !== child2.props[hiddenProp]) {\n                    same = false;\n                }\n            }\n        });\n    }\n    return same;\n}\nexport function mergeChildren(prev, next) {\n    let ret = [];\n    const nextChildrenPending = {};\n    let pendingChildren = [];\n    prev.forEach(child => {\n        if (child && child.key && findChildInChildrenByKey(next, child.key)) {\n            if (pendingChildren.length) {\n                nextChildrenPending[child.key] = pendingChildren;\n                pendingChildren = [];\n            }\n        }\n        else {\n            pendingChildren.push(child);\n        }\n    });\n    next.forEach(child => {\n        if (child && child.key && {}.hasOwnProperty.call(nextChildrenPending, child.key)) {\n            ret = ret.concat(nextChildrenPending[child.key]);\n        }\n        ret.push(child);\n    });\n    return ret.concat(pendingChildren);\n}\n"]}