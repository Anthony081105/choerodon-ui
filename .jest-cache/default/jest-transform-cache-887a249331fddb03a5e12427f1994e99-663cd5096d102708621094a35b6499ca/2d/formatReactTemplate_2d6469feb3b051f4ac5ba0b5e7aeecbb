e209c389f0df70c845a3aa1980fa4add
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = formatReactTemplate;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _react = require("react");

var _stringTemplate = _interopRequireDefault(require("string-template"));

var _isString = _interopRequireDefault(require("lodash/isString"));

var _isNil = _interopRequireDefault(require("lodash/isNil"));

var _flatMap = _interopRequireDefault(require("lodash/flatMap"));

function formatReactTemplate(template, map) {
  var result = [template];
  Object.keys(map).forEach(function (key) {
    var node = map[key];

    if (!(0, _isNil["default"])(node)) {
      result = (0, _flatMap["default"])(result, function (text) {
        if ((0, _isString["default"])(text)) {
          var stringText = text;

          if ((0, _react.isValidElement)(node)) {
            var placeholder = "{".concat(key, "}");
            var length = placeholder.length;
            var textArr = [];
            var index = stringText.indexOf(placeholder);

            while (index > -1) {
              if (index > 0) {
                textArr.push(stringText.slice(0, index));
              }

              textArr.push(node);
              stringText = stringText.slice(index + length);
              index = stringText.indexOf(placeholder);
            }

            if (stringText) {
              textArr.push(stringText);
            }

            return textArr;
          }

          return (0, _stringTemplate["default"])(text, map);
        }

        return text;
      });
    }
  });

  if (result.every(_isString["default"])) {
    return result.join('');
  }

  return _react.createElement.apply(void 0, [_react.Fragment, {}].concat((0, _toConsumableArray2["default"])(result)));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZvcm1hdHRlci9mb3JtYXRSZWFjdFRlbXBsYXRlLmpzIl0sIm5hbWVzIjpbInJlc3VsdCIsIk9iamVjdCIsIm5vZGUiLCJtYXAiLCJzdHJpbmdUZXh0IiwicGxhY2Vob2xkZXIiLCJsZW5ndGgiLCJ0ZXh0QXJyIiwiaW5kZXgiLCJpc1N0cmluZyIsImNyZWF0ZUVsZW1lbnQiLCJGcmFnbWVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxJQUFBLE1BQUEsR0FBQSxPQUFBLENBQUEsT0FBQSxDQUFBOztBQUNBLElBQUEsZUFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLGlCQUFBLENBQUEsQ0FBQTs7QUFDQSxJQUFBLFNBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUEsQ0FBQSxpQkFBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxNQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLENBQUEsY0FBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxRQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLENBQUEsZ0JBQUEsQ0FBQSxDQUFBOztBQUNlLFNBQUEsbUJBQUEsQ0FBQSxRQUFBLEVBQUEsR0FBQSxFQUE0QztBQUN2RCxNQUFJQSxNQUFNLEdBQUcsQ0FBYixRQUFhLENBQWI7QUFDQUMsRUFBQUEsTUFBTSxDQUFOQSxJQUFBQSxDQUFBQSxHQUFBQSxFQUFBQSxPQUFBQSxDQUF5QixVQUFBLEdBQUEsRUFBTztBQUM1QixRQUFNQyxJQUFJLEdBQUdDLEdBQUcsQ0FBaEIsR0FBZ0IsQ0FBaEI7O0FBQ0EsUUFBSSxDQUFDLENBQUEsR0FBQSxNQUFBLENBQUEsU0FBQSxDQUFBLEVBQUwsSUFBSyxDQUFMLEVBQWtCO0FBQ2RILE1BQUFBLE1BQU0sR0FBRyxDQUFBLEdBQUEsUUFBQSxDQUFBLFNBQUEsQ0FBQSxFQUFBLE1BQUEsRUFBZ0IsVUFBQSxJQUFBLEVBQVE7QUFDN0IsWUFBSSxDQUFBLEdBQUEsU0FBQSxDQUFBLFNBQUEsQ0FBQSxFQUFKLElBQUksQ0FBSixFQUFvQjtBQUNoQixjQUFJSSxVQUFVLEdBQWQsSUFBQTs7QUFDQSxjQUFJLENBQUEsR0FBQSxNQUFBLENBQUEsY0FBQSxFQUFKLElBQUksQ0FBSixFQUEwQjtBQUN0QixnQkFBTUMsV0FBVyxHQUFBLElBQUEsTUFBQSxDQUFBLEdBQUEsRUFBakIsR0FBaUIsQ0FBakI7QUFEc0IsZ0JBRWRDLE1BRmMsR0FFSEQsV0FGRyxDQUFBLE1BQUE7QUFHdEIsZ0JBQU1FLE9BQU8sR0FBYixFQUFBO0FBQ0EsZ0JBQUlDLEtBQUssR0FBR0osVUFBVSxDQUFWQSxPQUFBQSxDQUFaLFdBQVlBLENBQVo7O0FBQ0EsbUJBQU9JLEtBQUssR0FBRyxDQUFmLENBQUEsRUFBbUI7QUFDZixrQkFBSUEsS0FBSyxHQUFULENBQUEsRUFBZTtBQUNYRCxnQkFBQUEsT0FBTyxDQUFQQSxJQUFBQSxDQUFhSCxVQUFVLENBQVZBLEtBQUFBLENBQUFBLENBQUFBLEVBQWJHLEtBQWFILENBQWJHO0FBQ0g7O0FBQ0RBLGNBQUFBLE9BQU8sQ0FBUEEsSUFBQUEsQ0FBQUEsSUFBQUE7QUFDQUgsY0FBQUEsVUFBVSxHQUFHQSxVQUFVLENBQVZBLEtBQUFBLENBQWlCSSxLQUFLLEdBQW5DSixNQUFhQSxDQUFiQTtBQUNBSSxjQUFBQSxLQUFLLEdBQUdKLFVBQVUsQ0FBVkEsT0FBQUEsQ0FBUkksV0FBUUosQ0FBUkk7QUFDSDs7QUFDRCxnQkFBQSxVQUFBLEVBQWdCO0FBQ1pELGNBQUFBLE9BQU8sQ0FBUEEsSUFBQUEsQ0FBQUEsVUFBQUE7QUFDSDs7QUFDRCxtQkFBQSxPQUFBO0FBQ0g7O0FBQ0QsaUJBQU8sQ0FBQSxHQUFBLGVBQUEsQ0FBQSxTQUFBLENBQUEsRUFBQSxJQUFBLEVBQVAsR0FBTyxDQUFQO0FBQ0g7O0FBQ0QsZUFBQSxJQUFBO0FBdkJKUCxPQUFTLENBQVRBO0FBeUJIO0FBNUJMQyxHQUFBQTs7QUE4QkEsTUFBSUQsTUFBTSxDQUFOQSxLQUFBQSxDQUFhUyxTQUFBQSxDQUFqQixTQUFpQkEsQ0FBYlQsQ0FBSixFQUE0QjtBQUN4QixXQUFPQSxNQUFNLENBQU5BLElBQUFBLENBQVAsRUFBT0EsQ0FBUDtBQUNIOztBQUNELFNBQU9VLE1BQUFBLENBQUFBLGFBQUFBLENBQUFBLEtBQUFBLENBQUFBLEtBQUFBLENBQUFBLEVBQUFBLENBQWNDLE1BQUFBLENBQWRELFFBQUFBLEVBQUFBLEVBQUFBLEVBQUFBLE1BQUFBLENBQUFBLENBQUFBLEdBQUFBLG1CQUFBQSxDQUFBQSxTQUFBQSxDQUFBQSxFQUFQLE1BQU9BLENBQUFBLENBQUFBLENBQVA7QUFDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUVsZW1lbnQsIEZyYWdtZW50LCBpc1ZhbGlkRWxlbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBmb3JtYXQgZnJvbSAnc3RyaW5nLXRlbXBsYXRlJztcbmltcG9ydCBpc1N0cmluZyBmcm9tICdsb2Rhc2gvaXNTdHJpbmcnO1xuaW1wb3J0IGlzTmlsIGZyb20gJ2xvZGFzaC9pc05pbCc7XG5pbXBvcnQgZmxhdE1hcCBmcm9tICdsb2Rhc2gvZmxhdE1hcCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRSZWFjdFRlbXBsYXRlKHRlbXBsYXRlLCBtYXApIHtcbiAgICBsZXQgcmVzdWx0ID0gW3RlbXBsYXRlXTtcbiAgICBPYmplY3Qua2V5cyhtYXApLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IG1hcFtrZXldO1xuICAgICAgICBpZiAoIWlzTmlsKG5vZGUpKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBmbGF0TWFwKHJlc3VsdCwgdGV4dCA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGlzU3RyaW5nKHRleHQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzdHJpbmdUZXh0ID0gdGV4dDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzVmFsaWRFbGVtZW50KG5vZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwbGFjZWhvbGRlciA9IGB7JHtrZXl9fWA7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGxlbmd0aCB9ID0gcGxhY2Vob2xkZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0QXJyID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSBzdHJpbmdUZXh0LmluZGV4T2YocGxhY2Vob2xkZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRBcnIucHVzaChzdHJpbmdUZXh0LnNsaWNlKDAsIGluZGV4KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRBcnIucHVzaChub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmdUZXh0ID0gc3RyaW5nVGV4dC5zbGljZShpbmRleCArIGxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBzdHJpbmdUZXh0LmluZGV4T2YocGxhY2Vob2xkZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0cmluZ1RleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0QXJyLnB1c2goc3RyaW5nVGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGV4dEFycjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0KHRleHQsIG1hcCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0ZXh0O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmV2ZXJ5KGlzU3RyaW5nKSkge1xuICAgICAgICByZXR1cm4gcmVzdWx0LmpvaW4oJycpO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlRWxlbWVudChGcmFnbWVudCwge30sIC4uLnJlc3VsdCk7XG59XG4iXX0=