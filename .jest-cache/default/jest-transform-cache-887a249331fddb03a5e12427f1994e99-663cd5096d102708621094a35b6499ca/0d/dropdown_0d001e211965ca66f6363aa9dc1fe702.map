{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components/dropdown/dropdown.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAiBqB,Q;;;;;;;;;;;;;;wCAWF;AAAA,wBAC4B,KAAK,KADjC;AAAA,8CACP,SADO;AAAA,UACP,SADO,sCACK,EADL;AAAA,UACS,cADT,eACS,cADT;;AAEf,UAAI,cAAc,KAAK,SAAvB,EAAkC;AAChC,eAAO,cAAP;AACD;;AACD,UAAI,SAAS,CAAC,OAAV,CAAkB,KAAlB,KAA4B,CAAhC,EAAmC;AACjC,eAAO,YAAP;AACD;;AACD,aAAO,UAAP;AACD;;;wCAEgB;AAAA,UACP,OADO,GACK,KAAK,KADV,CACP,OADO;AAEf,UAAM,YAAY,GAAI,OAAe,CAAC,KAAtC;AACA,+BACE,CAAC,YAAY,CAAC,IAAd,IAAsB,YAAY,CAAC,IAAb,KAAsB,UAD9C,mBAEW,YAAY,CAAC,IAFxB;AAID;;;6BAEK;AAAA,yBAOA,KAAK,KAPL;AAAA,UAEF,QAFE,gBAEF,QAFE;AAAA,UAGS,kBAHT,gBAGF,SAHE;AAAA,UAIO,eAJP,gBAIF,OAJE;AAAA,UAKF,OALE,gBAKF,OALE;AAAA,UAMF,QANE,gBAMF,QANE;AAQJ,UAAM,SAAS,GAAG,6BAAa,UAAb,EAAyB,kBAAzB,CAAlB;;AAEA,UAAM,KAAK,GAAG,gBAAS,IAAT,CAAc,QAAd,CAAd;;AACA,UAAM,OAAO,GAAG,gBAAS,IAAT,CAAc,eAAd,CAAhB;;AAEA,UAAM,eAAe,GAAG,yBAAa,KAAb,EAAoB;AAC1C,QAAA,SAAS,EAAE,4BAAW,KAAK,CAAC,KAAN,CAAY,SAAvB,YAAqC,SAArC,cAD+B;AAE1C,QAAA,QAAQ,EAAR;AAF0C,OAApB,CAAxB,CAbI,CAiBJ;;AACA,UAAM,UAAU,GAAG,OAAO,CAAC,KAAR,CAAc,UAAd,IAA4B,KAA/C;AACA,UAAM,gBAAgB,GAAG,yBAAa,OAAb,EAAsB;AAC7C,QAAA,IAAI,EAAE,UADuC;AAE7C,QAAA,UAAU,EAAV;AAF6C,OAAtB,CAAzB;AAIA,aACE,kBAAA,aAAA,CAAC,oBAAD,EAAW,0BAAA,EAAA,EACL,KAAK,KADA,EACK;AACd,QAAA,SAAS,EAAE,SADG;AAEd,QAAA,cAAc,EAAE,KAAK,iBAAL,EAFF;AAGd,QAAA,OAAO,EAAE,QAAQ,GAAG,EAAH,GAAQ,OAHX;AAId,QAAA,OAAO,EAAE;AAJK,OADL,CAAX,EAOG,eAPH,CADF;AAWD;;;EAjEmC,gB;;;AAC7B,QAAA,CAAA,WAAA,GAAc,UAAd;AAIA,QAAA,CAAA,YAAA,GAAe;AACpB,EAAA,eAAe,EAAE,IADG;AAEpB,EAAA,eAAe,EAAE,GAFG;AAGpB,EAAA,SAAS,EAAE;AAHS,CAAf","sourcesContent":["import React, { Children, cloneElement, Component, ReactElement, ReactNode } from 'react';\nimport classNames from 'classnames';\nimport DropdownButton from './dropdown-button';\nimport warning from '../_util/warning';\nimport RcDropdown from '../rc-components/dropdown';\nimport { getPrefixCls } from '../configure';\n\nexport interface DropDownProps {\n  trigger?: ('click' | 'hover' | 'contextMenu')[];\n  overlay: ReactNode;\n  onVisibleChange?: (visible?: boolean) => void;\n  visible?: boolean;\n  disabled?: boolean;\n  align?: Object;\n  getPopupContainer?: (triggerNode: Element) => HTMLElement;\n  prefixCls?: string;\n  className?: string;\n  transitionName?: string;\n  placement?: 'topLeft' | 'topCenter' | 'topRight' | 'bottomLeft' | 'bottomCenter' | 'bottomRight';\n  forceRender?: boolean;\n}\n\nexport default class Dropdown extends Component<DropDownProps, any> {\n  static displayName = 'Dropdown';\n\n  static Button: typeof DropdownButton;\n\n  static defaultProps = {\n    mouseEnterDelay: 0.15,\n    mouseLeaveDelay: 0.1,\n    placement: 'bottomLeft',\n  };\n\n  getTransitionName() {\n    const { placement = '', transitionName } = this.props;\n    if (transitionName !== undefined) {\n      return transitionName;\n    }\n    if (placement.indexOf('top') >= 0) {\n      return 'slide-down';\n    }\n    return 'slide-up';\n  }\n\n  componentDidMount() {\n    const { overlay } = this.props;\n    const overlayProps = (overlay as any).props as any;\n    warning(\n      !overlayProps.mode || overlayProps.mode === 'vertical',\n      `mode=\"${overlayProps.mode}\" is not supported for Dropdown's Menu.`,\n    );\n  }\n\n  render() {\n    const {\n      children,\n      prefixCls: customizePrefixCls,\n      overlay: overlayElements,\n      trigger,\n      disabled,\n    } = this.props;\n    const prefixCls = getPrefixCls('dropdown', customizePrefixCls);\n\n    const child = Children.only(children) as ReactElement<any>;\n    const overlay = Children.only(overlayElements) as ReactElement<any>;\n\n    const dropdownTrigger = cloneElement(child, {\n      className: classNames(child.props.className, `${prefixCls}-trigger`),\n      disabled,\n    });\n    // menu cannot be selectable in dropdown defaultly\n    const selectable = overlay.props.selectable || false;\n    const fixedModeOverlay = cloneElement(overlay, {\n      mode: 'vertical',\n      selectable,\n    });\n    return (\n      <RcDropdown\n        {...this.props}\n        prefixCls={prefixCls}\n        transitionName={this.getTransitionName()}\n        trigger={disabled ? [] : trigger}\n        overlay={fixedModeOverlay}\n      >\n        {dropdownTrigger}\n      </RcDropdown>\n    );\n  }\n}\n"]}