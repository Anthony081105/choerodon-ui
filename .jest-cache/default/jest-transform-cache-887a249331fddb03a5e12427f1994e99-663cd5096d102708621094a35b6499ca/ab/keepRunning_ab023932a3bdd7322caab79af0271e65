b1b378aeebcd6d26430534f192ef9930
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = keepRunning;

var _createDefaultSetter = _interopRequireDefault(require("./createDefaultSetter"));

var _EventManager = _interopRequireDefault(require("./EventManager"));

var _TaskRunner = _interopRequireDefault(require("./TaskRunner"));

function keep(fn, e) {
  var _this = this;

  if (e && e.target) {
    e.persist();
    var delayer = new _TaskRunner["default"]();
    var keeper = new _TaskRunner["default"]();
    var event = new _EventManager["default"](e.target);

    var delayFn = function delayFn() {
      keeper.run(40, fn.bind(_this, e));
    };

    var stopFn = function stopFn() {
      delayer.cancel();
      keeper.cancel();
      event.clear();
    };

    delayer.delay(500, delayFn);
    event.addEventListener('mouseleave', stopFn);
    event.addEventListener('mouseup', stopFn);
  }

  fn.call(this, e);
}

function keepRunning(target, key, descriptor) {
  var constructor = target.constructor;
  var fn = descriptor.value;
  return {
    configurable: true,
    get: function get() {
      if (this === target) {
        return fn;
      }

      if (this.constructor !== constructor && Object.getPrototypeOf(this).constructor === constructor) {
        return fn;
      }

      var boundFn = keep.bind(this, fn);
      Object.defineProperty(this, key, {
        value: boundFn,
        configurable: true,
        writable: true
      });
      return boundFn;
    },
    set: (0, _createDefaultSetter["default"])(key)
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9odWlodWF3ay9Eb2N1bWVudHMvb3B0L2Nob2Vyb2Rvbi11aS9jb21wb25lbnRzLXByby9fdXRpbC9rZWVwUnVubmluZy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBRUEsU0FBUyxJQUFULENBQWMsRUFBZCxFQUFrQixDQUFsQixFQUFtQjtBQUFBOztBQUNqQixNQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBWCxFQUFtQjtBQUNqQixJQUFBLENBQUMsQ0FBQyxPQUFGO0FBQ0EsUUFBTSxPQUFPLEdBQUcsSUFBSSxzQkFBSixFQUFoQjtBQUNBLFFBQU0sTUFBTSxHQUFHLElBQUksc0JBQUosRUFBZjtBQUNBLFFBQU0sS0FBSyxHQUFHLElBQUksd0JBQUosQ0FBaUIsQ0FBQyxDQUFDLE1BQW5CLENBQWQ7O0FBQ0EsUUFBTSxPQUFPLEdBQUcsU0FBVixPQUFVLEdBQUs7QUFDbkIsTUFBQSxNQUFNLENBQUMsR0FBUCxDQUFXLEVBQVgsRUFBZSxFQUFFLENBQUMsSUFBSCxDQUFRLEtBQVIsRUFBYyxDQUFkLENBQWY7QUFDRCxLQUZEOztBQUdBLFFBQU0sTUFBTSxHQUFHLFNBQVQsTUFBUyxHQUFLO0FBQ2xCLE1BQUEsT0FBTyxDQUFDLE1BQVI7QUFDQSxNQUFBLE1BQU0sQ0FBQyxNQUFQO0FBQ0EsTUFBQSxLQUFLLENBQUMsS0FBTjtBQUNELEtBSkQ7O0FBS0EsSUFBQSxPQUFPLENBQUMsS0FBUixDQUFjLEdBQWQsRUFBbUIsT0FBbkI7QUFDQSxJQUFBLEtBQUssQ0FBQyxnQkFBTixDQUF1QixZQUF2QixFQUFxQyxNQUFyQztBQUNBLElBQUEsS0FBSyxDQUFDLGdCQUFOLENBQXVCLFNBQXZCLEVBQWtDLE1BQWxDO0FBQ0Q7O0FBQ0QsRUFBQSxFQUFFLENBQUMsSUFBSCxDQUFRLElBQVIsRUFBYyxDQUFkO0FBQ0Q7O0FBRWEsU0FBVSxXQUFWLENBQXNCLE1BQXRCLEVBQThCLEdBQTlCLEVBQW1DLFVBQW5DLEVBQTZDO0FBQUEsTUFDakQsV0FEaUQsR0FDakMsTUFEaUMsQ0FDakQsV0FEaUQ7QUFBQSxNQUUxQyxFQUYwQyxHQUVuQyxVQUZtQyxDQUVqRCxLQUZpRDtBQUd6RCxTQUFPO0FBQ0wsSUFBQSxZQUFZLEVBQUUsSUFEVDtBQUVMLElBQUEsR0FGSyxpQkFFRjtBQUNELFVBQUksU0FBUyxNQUFiLEVBQXFCO0FBQ25CLGVBQU8sRUFBUDtBQUNEOztBQUVELFVBQUksS0FBSyxXQUFMLEtBQXFCLFdBQXJCLElBQW9DLE1BQU0sQ0FBQyxjQUFQLENBQXNCLElBQXRCLEVBQTRCLFdBQTVCLEtBQTRDLFdBQXBGLEVBQWlHO0FBQy9GLGVBQU8sRUFBUDtBQUNEOztBQUVELFVBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFMLENBQVUsSUFBVixFQUFnQixFQUFoQixDQUFoQjtBQUNBLE1BQUEsTUFBTSxDQUFDLGNBQVAsQ0FBc0IsSUFBdEIsRUFBNEIsR0FBNUIsRUFBaUM7QUFDL0IsUUFBQSxLQUFLLEVBQUUsT0FEd0I7QUFFL0IsUUFBQSxZQUFZLEVBQUUsSUFGaUI7QUFHL0IsUUFBQSxRQUFRLEVBQUU7QUFIcUIsT0FBakM7QUFLQSxhQUFPLE9BQVA7QUFDRCxLQWxCSTtBQW1CTCxJQUFBLEdBQUcsRUFBRSxxQ0FBb0IsR0FBcEI7QUFuQkEsR0FBUDtBQXFCRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcmVhdGVEZWZhdWx0U2V0dGVyIGZyb20gJy4vY3JlYXRlRGVmYXVsdFNldHRlcic7XG5pbXBvcnQgRXZlbnRNYW5hZ2VyIGZyb20gJy4vRXZlbnRNYW5hZ2VyJztcbmltcG9ydCBUYXNrUnVubmVyIGZyb20gJy4vVGFza1J1bm5lcic7XG5cbmZ1bmN0aW9uIGtlZXAoZm4sIGUpIHtcbiAgaWYgKGUgJiYgZS50YXJnZXQpIHtcbiAgICBlLnBlcnNpc3QoKTtcbiAgICBjb25zdCBkZWxheWVyID0gbmV3IFRhc2tSdW5uZXIoKTtcbiAgICBjb25zdCBrZWVwZXIgPSBuZXcgVGFza1J1bm5lcigpO1xuICAgIGNvbnN0IGV2ZW50ID0gbmV3IEV2ZW50TWFuYWdlcihlLnRhcmdldCk7XG4gICAgY29uc3QgZGVsYXlGbiA9ICgpID0+IHtcbiAgICAgIGtlZXBlci5ydW4oNDAsIGZuLmJpbmQodGhpcywgZSkpO1xuICAgIH07XG4gICAgY29uc3Qgc3RvcEZuID0gKCkgPT4ge1xuICAgICAgZGVsYXllci5jYW5jZWwoKTtcbiAgICAgIGtlZXBlci5jYW5jZWwoKTtcbiAgICAgIGV2ZW50LmNsZWFyKCk7XG4gICAgfTtcbiAgICBkZWxheWVyLmRlbGF5KDUwMCwgZGVsYXlGbik7XG4gICAgZXZlbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIHN0b3BGbik7XG4gICAgZXZlbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHN0b3BGbik7XG4gIH1cbiAgZm4uY2FsbCh0aGlzLCBlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ga2VlcFJ1bm5pbmcodGFyZ2V0LCBrZXksIGRlc2NyaXB0b3IpIHtcbiAgY29uc3QgeyBjb25zdHJ1Y3RvciB9ID0gdGFyZ2V0O1xuICBjb25zdCB7IHZhbHVlOiBmbiB9ID0gZGVzY3JpcHRvcjtcbiAgcmV0dXJuIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0KCkge1xuICAgICAgaWYgKHRoaXMgPT09IHRhcmdldCkge1xuICAgICAgICByZXR1cm4gZm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yICE9PSBjb25zdHJ1Y3RvciAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3IgPT09IGNvbnN0cnVjdG9yKSB7XG4gICAgICAgIHJldHVybiBmbjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgYm91bmRGbiA9IGtlZXAuYmluZCh0aGlzLCBmbik7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywga2V5LCB7XG4gICAgICAgIHZhbHVlOiBib3VuZEZuLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gYm91bmRGbjtcbiAgICB9LFxuICAgIHNldDogY3JlYXRlRGVmYXVsdFNldHRlcihrZXkpLFxuICB9O1xufVxuIl19