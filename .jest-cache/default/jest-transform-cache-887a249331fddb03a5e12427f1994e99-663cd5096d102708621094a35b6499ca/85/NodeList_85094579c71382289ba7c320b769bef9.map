{"version":3,"sources":["rc-components/tree/NodeList.js"],"names":["HIDDEN_STYLE","width","height","display","overflow","opacity","border","padding","margin","noop","MOTION_KEY","Math","MotionNode","key","MotionEntity","level","index","pos","node","MotionFlattenData","parent","children","data","isStart","isEnd","list","item","path","String","current","RefNodeList","prefixCls","selectable","expandedKeys","selectedKeys","checkedKeys","loadedKeys","loadingKeys","halfCheckedKeys","keyEntities","disabled","dragging","dragOverNodeKey","dropPosition","motion","itemHeight","virtual","focusable","activeItem","focused","tabIndex","onKeyDown","onFocus","onBlur","onActiveChange","domProps","props","listRef","React","scrollTo","disableVirtual","setDisableVirtual","prevExpandedKeys","setPrevExpandedKeys","prevData","setPrevData","transitionData","setTransitionData","transitionRange","setTransitionRange","motionType","setMotionType","diffExpanded","keyIndex","rangeNodes","getMinimumRangeTransitionRange","newTransitionData","onMotionEnd","mergedData","treeNodeRequiredProps","style","getAccessibilityPath","role","value","onChange","VirtualList","itemKey","fullHeight","onSkipRender","ref","restProps","treeNode","mergedKey","treeNodeProps","MotionTreeNode","active","motionNodes","onMouseMove","NodeList"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\n/**\n * Handle virtual list of the TreeNodes.\n */\nimport * as React from 'react';\nimport VirtualList from 'rc-virtual-list';\nimport MotionTreeNode from './MotionTreeNode';\nimport { findExpandedKeys, getExpandRange } from './utils/diffUtil';\nimport { getTreeNodeProps, getKey } from './utils/treeUtil';\nconst HIDDEN_STYLE = {\n    width: 0,\n    height: 0,\n    display: 'flex',\n    overflow: 'hidden',\n    opacity: 0,\n    border: 0,\n    padding: 0,\n    margin: 0,\n};\nconst noop = () => { };\nexport const MOTION_KEY = `RC_TREE_MOTION_${Math.random()}`;\nconst MotionNode = {\n    key: MOTION_KEY,\n};\nexport const MotionEntity = {\n    key: MOTION_KEY,\n    level: 0,\n    index: 0,\n    pos: '0',\n    node: MotionNode,\n};\nconst MotionFlattenData = {\n    parent: null,\n    children: [],\n    pos: MotionEntity.pos,\n    data: MotionNode,\n    /** Hold empty list here since we do not use it */\n    isStart: [],\n    isEnd: [],\n};\n/**\n * We only need get visible content items to play the animation.\n */\nexport function getMinimumRangeTransitionRange(list, height, itemHeight) {\n    if (!height) {\n        return list;\n    }\n    return list.slice(0, Math.ceil(height / itemHeight) + 1);\n}\nfunction itemKey(item) {\n    const { data: { key }, pos, } = item;\n    return getKey(key, pos);\n}\nfunction getAccessibilityPath(item) {\n    let path = String(item.data.key);\n    let current = item;\n    while (current.parent) {\n        current = current.parent;\n        path = `${current.data.key} > ${path}`;\n    }\n    return path;\n}\nconst RefNodeList = (props, ref) => {\n    const { prefixCls, data, \n    // eslint-disable-next-line no-unused-vars \n    selectable, \n    // eslint-disable-next-line no-unused-vars  \n    expandedKeys, selectedKeys, checkedKeys, loadedKeys, loadingKeys, halfCheckedKeys, keyEntities, disabled, dragging, dragOverNodeKey, dropPosition, motion, height, itemHeight, virtual, focusable, activeItem, focused, tabIndex, onKeyDown, onFocus, onBlur, onActiveChange, ...domProps } = props;\n    // =============================== Ref ================================\n    const listRef = React.useRef(null);\n    React.useImperativeHandle(ref, () => ({\n        scrollTo: scroll => {\n            listRef.current.scrollTo(scroll);\n        },\n    }));\n    // ============================== Motion ==============================\n    const [disableVirtual, setDisableVirtual] = React.useState(false);\n    const [prevExpandedKeys, setPrevExpandedKeys] = React.useState(expandedKeys);\n    const [prevData, setPrevData] = React.useState(data);\n    const [transitionData, setTransitionData] = React.useState(data);\n    const [transitionRange, setTransitionRange] = React.useState([]);\n    const [motionType, setMotionType] = React.useState(null);\n    function onMotionEnd() {\n        setPrevData(data);\n        setTransitionData(data);\n        setTransitionRange([]);\n        setMotionType(null);\n        setDisableVirtual(false);\n    }\n    // Do animation if expanded keys changed\n    React.useEffect(() => {\n        setPrevExpandedKeys(expandedKeys);\n        const diffExpanded = findExpandedKeys(prevExpandedKeys, expandedKeys);\n        if (diffExpanded.key !== null) {\n            if (diffExpanded.add) {\n                const keyIndex = prevData.findIndex(({ data: { key } }) => key === diffExpanded.key);\n                if (motion)\n                    setDisableVirtual(true);\n                const rangeNodes = getMinimumRangeTransitionRange(getExpandRange(prevData, data, diffExpanded.key), height, itemHeight);\n                const newTransitionData = prevData.slice();\n                newTransitionData.splice(keyIndex + 1, 0, MotionFlattenData);\n                setTransitionData(newTransitionData);\n                // @ts-ignore\n                setTransitionRange(rangeNodes);\n                setMotionType('show');\n            }\n            else {\n                const keyIndex = data.findIndex(({ data: { key } }) => key === diffExpanded.key);\n                if (motion)\n                    setDisableVirtual(true);\n                const rangeNodes = getMinimumRangeTransitionRange(getExpandRange(data, prevData, diffExpanded.key), height, itemHeight);\n                const newTransitionData = data.slice();\n                newTransitionData.splice(keyIndex + 1, 0, MotionFlattenData);\n                setTransitionData(newTransitionData);\n                // @ts-ignore\n                setTransitionRange(rangeNodes);\n                setMotionType('hide');\n            }\n        }\n        else if (prevData !== data) {\n            // If whole data changed, we just refresh the list\n            setPrevData(data);\n            setTransitionData(data);\n        }\n    }, [expandedKeys, data]);\n    // We should clean up motion if is changed by dragging\n    React.useEffect(() => {\n        if (!dragging) {\n            onMotionEnd();\n        }\n    }, [dragging]);\n    const mergedData = motion ? transitionData : data;\n    const treeNodeRequiredProps = {\n        expandedKeys,\n        selectedKeys,\n        loadedKeys,\n        loadingKeys,\n        checkedKeys,\n        halfCheckedKeys,\n        dragOverNodeKey,\n        dropPosition,\n        keyEntities,\n    };\n    return (React.createElement(React.Fragment, null,\n        focused && activeItem && (React.createElement(\"span\", { style: HIDDEN_STYLE, \"aria-live\": \"assertive\" }, getAccessibilityPath(activeItem))),\n        React.createElement(\"div\", { role: \"tree\" },\n            React.createElement(\"input\", { style: HIDDEN_STYLE, disabled: focusable === false || disabled, tabIndex: focusable !== false ? tabIndex : undefined, onKeyDown: onKeyDown, onFocus: onFocus, onBlur: onBlur, value: \"\", onChange: noop })),\n        React.createElement(VirtualList, Object.assign({}, domProps, { disabled: disableVirtual, data: mergedData, itemKey: itemKey, height: height, fullHeight: false, virtual: virtual, itemHeight: itemHeight, onSkipRender: onMotionEnd, prefixCls: `${prefixCls}-list`, ref: listRef }), (treeNode) => {\n            const { pos, data: { key, ...restProps }, isStart, isEnd, } = treeNode;\n            const mergedKey = getKey(key, pos);\n            delete restProps.children;\n            const treeNodeProps = getTreeNodeProps(mergedKey, treeNodeRequiredProps);\n            return (React.createElement(MotionTreeNode, Object.assign({}, restProps, treeNodeProps, { \n                // @ts-ignore\n                active: activeItem && key === activeItem.data.key, pos: pos, data: treeNode.data, isStart: isStart, isEnd: isEnd, motion: motion, motionNodes: key === MOTION_KEY ? transitionRange : null, motionType: motionType, onMotionEnd: onMotionEnd, treeNodeRequiredProps: treeNodeRequiredProps, onMouseMove: () => {\n                    // @ts-ignore\n                    onActiveChange(null);\n                } })));\n        })));\n};\nconst NodeList = React.forwardRef(RefNodeList);\nNodeList.displayName = 'NodeList';\nexport default NodeList;\n"]}