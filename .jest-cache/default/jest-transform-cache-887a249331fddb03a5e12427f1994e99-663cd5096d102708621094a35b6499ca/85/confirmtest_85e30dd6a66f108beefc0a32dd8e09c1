44206e796c79cc78fb4803e539945c61
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _ = _interopRequireDefault(require(".."));

var confirm = _["default"].confirm;
describe('Modal.confirm triggers callbacks correctly', function () {
  var errorSpy = jest.spyOn(console, 'error').mockImplementation(function () {});
  afterEach(function () {
    errorSpy.mockReset();
    document.body.innerHTML = '';
  });
  afterAll(function () {
    errorSpy.mockRestore();
  });

  function $$(className) {
    return document.body.querySelectorAll(className);
  }

  function open(args) {
    confirm((0, _objectSpread2["default"])({
      title: 'Want to delete these items?',
      content: 'some descriptions'
    }, args));
  }

  it('trigger onCancel once when click on cancel button', function () {
    var onCancel = jest.fn();
    var onOk = jest.fn();
    open({
      onCancel: onCancel,
      onOk: onOk
    }); // first Modal

    $$('.c7n-btn')[0].click();
    expect(onCancel.mock.calls.length).toBe(1);
    expect(onOk.mock.calls.length).toBe(0);
  });
  it('trigger onOk once when click on ok button', function () {
    var onCancel = jest.fn();
    var onOk = jest.fn();
    open({
      onCancel: onCancel,
      onOk: onOk
    }); // second Modal

    $$('.c7n-btn-primary')[0].click();
    expect(onCancel.mock.calls.length).toBe(0);
    expect(onOk.mock.calls.length).toBe(1);
  });
  it('should allow Modal.comfirm without onCancel been set', function () {
    open(); // Third Modal

    $$('.c7n-btn')[0].click();
    expect(errorSpy).not.toHaveBeenCalled();
  });
  it('should allow Modal.comfirm without onOk been set', function () {
    open(); // Fourth Modal

    $$('.c7n-btn-primary')[0].click();
    expect(errorSpy).not.toHaveBeenCalled();
  });

  if (process.env.REACT !== '15') {
    it('shows animation when close', function () {
      jest.useFakeTimers();
      open();
      $$('.c7n-btn')[0].click();
      expect($$('.c7n-confirm')).toHaveLength(1);
      jest.runAllTimers();
      expect($$('.c7n-confirm')).toHaveLength(0);
      jest.useRealTimers();
    });
  }

  it('ok only', function () {
    open({
      okCancel: false
    });
    expect($$('.c7n-btn')).toHaveLength(1);
    expect($$('.c7n-btn')[0].innerHTML).toContain('OK');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpcm0udGVzdC5qcyJdLCJuYW1lcyI6WyJjb25maXJtIiwiTW9kYWwiLCJkZXNjcmliZSIsImVycm9yU3B5IiwiamVzdCIsInNweU9uIiwiY29uc29sZSIsIm1vY2tJbXBsZW1lbnRhdGlvbiIsImFmdGVyRWFjaCIsIm1vY2tSZXNldCIsImRvY3VtZW50IiwiYm9keSIsImlubmVySFRNTCIsImFmdGVyQWxsIiwibW9ja1Jlc3RvcmUiLCIkJCIsImNsYXNzTmFtZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJvcGVuIiwiYXJncyIsInRpdGxlIiwiY29udGVudCIsIml0Iiwib25DYW5jZWwiLCJmbiIsIm9uT2siLCJjbGljayIsImV4cGVjdCIsIm1vY2siLCJjYWxscyIsImxlbmd0aCIsInRvQmUiLCJub3QiLCJ0b0hhdmVCZWVuQ2FsbGVkIiwicHJvY2VzcyIsImVudiIsIlJFQUNUIiwidXNlRmFrZVRpbWVycyIsInRvSGF2ZUxlbmd0aCIsInJ1bkFsbFRpbWVycyIsInVzZVJlYWxUaW1lcnMiLCJva0NhbmNlbCIsInRvQ29udGFpbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7O0lBRVFBLE8sR0FBWUMsWSxDQUFaRCxPO0FBRVJFLFFBQVEsQ0FBQyw0Q0FBRCxFQUErQyxZQUFNO0FBQzNELE1BQU1DLFFBQVEsR0FBR0MsSUFBSSxDQUFDQyxLQUFMLENBQVdDLE9BQVgsRUFBb0IsT0FBcEIsRUFBNkJDLGtCQUE3QixDQUFnRCxZQUFNLENBQUUsQ0FBeEQsQ0FBakI7QUFFQUMsRUFBQUEsU0FBUyxDQUFDLFlBQU07QUFDZEwsSUFBQUEsUUFBUSxDQUFDTSxTQUFUO0FBQ0FDLElBQUFBLFFBQVEsQ0FBQ0MsSUFBVCxDQUFjQyxTQUFkLEdBQTBCLEVBQTFCO0FBQ0QsR0FIUSxDQUFUO0FBS0FDLEVBQUFBLFFBQVEsQ0FBQyxZQUFNO0FBQ2JWLElBQUFBLFFBQVEsQ0FBQ1csV0FBVDtBQUNELEdBRk8sQ0FBUjs7QUFJQSxXQUFTQyxFQUFULENBQVlDLFNBQVos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QUFNLENBQUNaLEVBQUUsQ0FBQyxjQUFELENBQUgsQ0FBTixDQUEyQnVCLFlBQTNCLENBQXdDLENBQXhDO0FBQ0FsQyxNQUFBQSxJQUFJLENBQUNtQyxZQUFMO0FBQ0FaLE1BQUFBLE1BQU0sQ0FBQ1osRUFBRSxDQUFDLGNBQUQsQ0FBSCxDQUFOLENBQTJCdUIsWUFBM0IsQ0FBd0MsQ0FBeEM7QUFDQWxDLE1BQUFBLElBQUksQ0FBQ29DLGFBQUw7QUFDRCxLQVJDLENBQUY7QUFTRDs7QUFFRGxCLEVBQUFBLEVBQUUsQ0FBQyxTQUFELEVBQVksWUFBTTtBQUNsQkosSUFBQUEsSUFBSSxDQUFDO0FBQUV1QixNQUFBQSxRQUFRLEVBQUU7QUFBWixLQUFELENBQUo7QUFDQWQsSUFBQUEsTUFBTSxDQUFDWixFQUFFLENBQUMsVUFBRCxDQUFILENBQU4sQ0FBdUJ1QixZQUF2QixDQUFvQyxDQUFwQztBQUNBWCxJQUFBQSxNQUFNLENBQUNaLEVBQUUsQ0FBQyxVQUFELENBQUYsQ0FBZSxDQUFmLEVBQWtCSCxTQUFuQixDQUFOLENBQW9DOEIsU0FBcEMsQ0FBOEMsSUFBOUM7QUFDRCxHQUpDLENBQUY7QUFLRCxDQWpGTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE1vZGFsIGZyb20gJy4uJztcblxuY29uc3QgeyBjb25maXJtIH0gPSBNb2RhbDtcblxuZGVzY3JpYmUoJ01vZGFsLmNvbmZpcm0gdHJpZ2dlcnMgY2FsbGJhY2tzIGNvcnJlY3RseScsICgpID0+IHtcbiAgY29uc3QgZXJyb3JTcHkgPSBqZXN0LnNweU9uKGNvbnNvbGUsICdlcnJvcicpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7fSk7XG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBlcnJvclNweS5tb2NrUmVzZXQoKTtcbiAgICBkb2N1bWVudC5ib2R5LmlubmVySFRNTCA9ICcnO1xuICB9KTtcblxuICBhZnRlckFsbCgoKSA9PiB7XG4gICAgZXJyb3JTcHkubW9ja1Jlc3RvcmUoKTtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gJCQoY2xhc3NOYW1lKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvckFsbChjbGFzc05hbWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gb3BlbihhcmdzKSB7XG4gICAgY29uZmlybSh7XG4gICAgICB0aXRsZTogJ1dhbnQgdG8gZGVsZXRlIHRoZXNlIGl0ZW1zPycsXG4gICAgICBjb250ZW50OiAnc29tZSBkZXNjcmlwdGlvbnMnLFxuICAgICAgLi4uYXJncyxcbiAgICB9KTtcbiAgfVxuXG4gIGl0KCd0cmlnZ2VyIG9uQ2FuY2VsIG9uY2Ugd2hlbiBjbGljayBvbiBjYW5jZWwgYnV0dG9uJywgKCkgPT4ge1xuICAgIGNvbnN0IG9uQ2FuY2VsID0gamVzdC5mbigpO1xuICAgIGNvbnN0IG9uT2sgPSBqZXN0LmZuKCk7XG4gICAgb3Blbih7XG4gICAgICBvbkNhbmNlbCxcbiAgICAgIG9uT2ssXG4gICAgfSk7XG4gICAgLy8gZmlyc3QgTW9kYWxcbiAgICAkJCgnLmM3bi1idG4nKVswXS5jbGljaygpO1xuICAgIGV4cGVjdChvbkNhbmNlbC5tb2NrLmNhbGxzLmxlbmd0aCkudG9CZSgxKTtcbiAgICBleHBlY3Qob25Pay5tb2NrLmNhbGxzLmxlbmd0aCkudG9CZSgwKTtcbiAgfSk7XG5cbiAgaXQoJ3RyaWdnZXIgb25PayBvbmNlIHdoZW4gY2xpY2sgb24gb2sgYnV0dG9uJywgKCkgPT4ge1xuICAgIGNvbnN0IG9uQ2FuY2VsID0gamVzdC5mbigpO1xuICAgIGNvbnN0IG9uT2sgPSBqZXN0LmZuKCk7XG4gICAgb3Blbih7XG4gICAgICBvbkNhbmNlbCxcbiAgICAgIG9uT2ssXG4gICAgfSk7XG4gICAgLy8gc2Vjb25kIE1vZGFsXG4gICAgJCQoJy5jN24tYnRuLXByaW1hcnknKVswXS5jbGljaygpO1xuICAgIGV4cGVjdChvbkNhbmNlbC5tb2NrLmNhbGxzLmxlbmd0aCkudG9CZSgwKTtcbiAgICBleHBlY3Qob25Pay5tb2NrLmNhbGxzLmxlbmd0aCkudG9CZSgxKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBhbGxvdyBNb2RhbC5jb21maXJtIHdpdGhvdXQgb25DYW5jZWwgYmVlbiBzZXQnLCAoKSA9PiB7XG4gICAgb3BlbigpO1xuICAgIC8vIFRoaXJkIE1vZGFsXG4gICAgJCQoJy5jN24tYnRuJylbMF0uY2xpY2soKTtcbiAgICBleHBlY3QoZXJyb3JTcHkpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgYWxsb3cgTW9kYWwuY29tZmlybSB3aXRob3V0IG9uT2sgYmVlbiBzZXQnLCAoKSA9PiB7XG4gICAgb3BlbigpO1xuICAgIC8vIEZvdXJ0aCBNb2RhbFxuICAgICQkKCcuYzduLWJ0bi1wcmltYXJ5JylbMF0uY2xpY2soKTtcbiAgICBleHBlY3QoZXJyb3JTcHkpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gIH0pO1xuXG4gIGlmIChwcm9jZXNzLmVudi5SRUFDVCAhPT0gJzE1Jykge1xuICAgIGl0KCdzaG93cyBhbmltYXRpb24gd2hlbiBjbG9zZScsICgpID0+IHtcbiAgICAgIGplc3QudXNlRmFrZVRpbWVycygpO1xuICAgICAgb3BlbigpO1xuICAgICAgJCQoJy5jN24tYnRuJylbMF0uY2xpY2soKTtcbiAgICAgIGV4cGVjdCgkJCgnLmM3bi1jb25maXJtJykpLnRvSGF2ZUxlbmd0aCgxKTtcbiAgICAgIGplc3QucnVuQWxsVGltZXJzKCk7XG4gICAgICBleHBlY3QoJCQoJy5jN24tY29uZmlybScpKS50b0hhdmVMZW5ndGgoMCk7XG4gICAgICBqZXN0LnVzZVJlYWxUaW1lcnMoKTtcbiAgICB9KTtcbiAgfVxuXG4gIGl0KCdvayBvbmx5JywgKCkgPT4ge1xuICAgIG9wZW4oeyBva0NhbmNlbDogZmFsc2UgfSk7XG4gICAgZXhwZWN0KCQkKCcuYzduLWJ0bicpKS50b0hhdmVMZW5ndGgoMSk7XG4gICAgZXhwZWN0KCQkKCcuYzduLWJ0bicpWzBdLmlubmVySFRNTCkudG9Db250YWluKCdPSycpO1xuICB9KTtcbn0pO1xuIl19