{"version":3,"sources":["util/createChainedFunction.jsx"],"names":["args","i"],"mappings":";;;;;;AAAA;;;;;;;;;AAQe,SAAA,qBAAA,GAAiC;AAC9C,MAAMA,IAAI,GAAG,GAAA,KAAA,CAAA,IAAA,CAAA,SAAA,EAAb,CAAa,CAAb;;AACA,MAAIA,IAAI,CAAJA,MAAAA,KAAJ,CAAA,EAAuB;AACrB,WAAOA,IAAI,CAAX,CAAW,CAAX;AACD;;AAED,SAAO,SAAA,eAAA,GAA2B;AAChC,SAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGD,IAAI,CAAxB,MAAA,EAAiCC,CAAjC,EAAA,EAAsC;AACpC,UAAID,IAAI,CAAJA,CAAI,CAAJA,IAAWA,IAAI,CAAJA,CAAI,CAAJA,CAAf,KAAA,EAA8B;AAC5BA,QAAAA,IAAI,CAAJA,CAAI,CAAJA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA;AACD;AACF;AALH,GAAA;AAOD","sourcesContent":["/**\n * Safe chained function\n *\n * Will only create a new function if needed,\n * otherwise will pass back existing functions or null.\n *\n * @returns {function|null}\n */\nexport default function createChainedFunction() {\n  const args = [].slice.call(arguments, 0);\n  if (args.length === 1) {\n    return args[0];\n  }\n\n  return function chainedFunction() {\n    for (let i = 0; i < args.length; i++) {\n      if (args[i] && args[i].apply) {\n        args[i].apply(this, arguments);\n      }\n    }\n  };\n}\n"]}