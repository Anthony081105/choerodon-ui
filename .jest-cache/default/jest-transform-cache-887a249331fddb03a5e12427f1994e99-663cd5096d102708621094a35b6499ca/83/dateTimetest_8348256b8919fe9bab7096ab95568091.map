{"version":3,"sources":["dateTime.test.js"],"names":["describe","DateTimePicker","beforeEach","jest","useFakeTimers","afterEach","useRealTimers","it","wrapper","expect","find","at","prop","toBe","setProps","value","update","simulate","runAllTimers","props","name","toEqual"],"mappings":";;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEAA,QAAQ,CAAC,sBAAD,EAAyB,YAAM;AACrC,6BAAUC,0BAAV;AAEAC,EAAAA,UAAU,CAAC,YAAM;AACfC,IAAAA,IAAI,CAACC,aAAL;AACD,GAFS,CAAV;AAIAC,EAAAA,SAAS,CAAC,YAAM;AACdF,IAAAA,IAAI,CAACG,aAAL;AACD,GAFQ,CAAT;AAIAC,EAAAA,EAAE,CAAC,8CAAD,EAAiD,YAAM;AACvD,QAAMC,OAAO,GAAG,mBAAM,gCAAC,0BAAD;AAAgB,MAAA,KAAK,EAAE,wBAAO,YAAP;AAAvB,MAAN,CAAhB;AACAC,IAAAA,MAAM,CACJD,OAAO,CACJE,IADH,CACQ,OADR,EAEGC,EAFH,CAEM,CAFN,EAGGC,IAHH,CAGQ,OAHR,CADI,CAAN,CAKEC,IALF,CAKO,qBALP;AAMAL,IAAAA,OAAO,CAACM,QAAR,CAAiB;AAAEC,MAAAA,KAAK,EAAE,wBAAO,qBAAP;AAAT,KAAjB;AACAP,IAAAA,OAAO,CAACQ,MAAR;AACAP,IAAAA,MAAM,CACJD,OAAO,CACJE,IADH,CACQ,OADR,EAEGC,EAFH,CAEM,CAFN,EAGGC,IAHH,CAGQ,OAHR,CADI,CAAN,CAKEC,IALF,CAKO,qBALP;AAMD,GAhBC,CAAF;AAkBAN,EAAAA,EAAE,CAAC,kDAAD,EAAqD,YAAM;AAC3D,QAAMC,OAAO,GAAG,mBAAM,gCAAC,0BAAD,OAAN,CAAhB;AACA,+BAAeA,OAAf;AACD,GAHC,CAAF;AAKAD,EAAAA,EAAE,CAAC,6DAAD,EAAgE,YAAM;AACtE,QAAMC,OAAO,GAAG,mBAAM,gCAAC,0BAAD;AAAgB,MAAA,IAAI,EAAC;AAArB,MAAN,CAAhB;AACAA,IAAAA,OAAO,CAACE,IAAR,CAAa,OAAb,EAAsBO,QAAtB,CAA+B,OAA/B;AACAd,IAAAA,IAAI,CAACe,YAAL;AACAV,IAAAA,OAAO,CAACQ,MAAR;AACA,6BAAaR,OAAb,EAAsB,EAAtB;AACAA,IAAAA,OAAO,CAACQ,MAAR;AACD,GAPC,CAAF;AASAT,EAAAA,EAAE,CAAC,gDAAD,EAAmD,YAAM;AACzD,QAAMC,OAAO,GAAG,mBAAM,gCAAC,wBAAD,OAAN,CAAhB;AACAC,IAAAA,MAAM,CAACD,OAAO,CAACE,IAAR,CAAa,gBAAb,EAA+BS,KAA/B,GAAuCC,IAAxC,CAAN,CAAoDC,OAApD,CAA4D,cAA5D;AACAZ,IAAAA,MAAM,CACJD,OAAO,CACJE,IADH,CACQ,OADR,EAEGC,EAFH,CAEM,CAFN,EAGGC,IAHH,CAGQ,OAHR,CADI,CAAN,CAKEC,IALF,CAKO,qBALP;AAMD,GATC,CAAF;AAUD,CArDO,CAAR","sourcesContent":["import React from 'react';\nimport { mount } from 'enzyme';\nimport moment from 'moment';\nimport DateTimePicker from '../../date-time-picker';\nimport DateTimesTest from './DateTimeTest';\nimport focusTest from '../../../tests/shared/focusTest';\nimport { disableWrapper, simulateCode } from './utils';\n\ndescribe('dateTimes-picker-pro', () => {\n  focusTest(DateTimePicker);\n\n  beforeEach(() => {\n    jest.useFakeTimers();\n  });\n\n  afterEach(() => {\n    jest.useRealTimers();\n  });\n\n  it('the dateTime will be controlled by the value', () => {\n    const wrapper = mount(<DateTimePicker value={moment('2020-02-19')} />);\n    expect(\n      wrapper\n        .find('input')\n        .at(0)\n        .prop('value'),\n    ).toBe('2020-02-19 00:00:00');\n    wrapper.setProps({ value: moment('2021-01-01 19:19:19') });\n    wrapper.update();\n    expect(\n      wrapper\n        .find('input')\n        .at(0)\n        .prop('value'),\n    ).toBe('2021-01-01 19:19:19');\n  });\n\n  it('should has disabled property can not do anything', () => {\n    const wrapper = mount(<DateTimePicker />);\n    disableWrapper(wrapper);\n  });\n\n  it('the keyDown event { right } keyCode should render correctly', () => {\n    const wrapper = mount(<DateTimePicker mode=\"dateTime\" />);\n    wrapper.find('input').simulate('click');\n    jest.runAllTimers();\n    wrapper.update();\n    simulateCode(wrapper, 39);\n    wrapper.update();\n  });\n\n  it('should renders dataset default value correctly', () => {\n    const wrapper = mount(<DateTimesTest />);\n    expect(wrapper.find('DateTimePicker').props().name).toEqual('creationTime');\n    expect(\n      wrapper\n        .find('input')\n        .at(0)\n        .prop('value'),\n    ).toBe('2020-01-22 19:19:19');\n  });\n});\n"]}