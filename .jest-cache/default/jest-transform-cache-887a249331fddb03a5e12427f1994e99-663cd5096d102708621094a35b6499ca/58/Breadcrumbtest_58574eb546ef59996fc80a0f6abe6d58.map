{"version":3,"sources":["Breadcrumb.test.js"],"names":["describe","errorSpy","jest","spyOn","console","mockImplementation","afterEach","mockReset","afterAll","mockRestore","it","MyCom","expect","mock","calls","toHaveLength","toMatch","wrapper","undefined","not","toHaveBeenCalled","toMatchSnapshot"],"mappings":";;;;AAAA;;AACA;;AACA;;AAEAA,QAAQ,CAAC,YAAD,EAAe,YAAM;AAC3B,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWC,OAAX,EAAoB,OAApB,EAA6BC,kBAA7B,CAAgD,YAAM,CAAE,CAAxD,CAAjB;AAEAC,EAAAA,SAAS,CAAC,YAAM;AACdL,IAAAA,QAAQ,CAACM,SAAT;AACD,GAFQ,CAAT;AAIAC,EAAAA,QAAQ,CAAC,YAAM;AACbP,IAAAA,QAAQ,CAACQ,WAAT;AACD,GAFO,CAAR,CAP2B,CAW3B;;AACAC,EAAAA,EAAE,CAAC,uCAAD,EAA0C,YAAM;AAChD,QAAMC,KAAK,GAAG,SAARA,KAAQ;AAAA,aAAM,mDAAN;AAAA,KAAd;;AACA,uBACE,gCAAC,iBAAD,QACE,gCAAC,KAAD,OADF,CADF;AAKAC,IAAAA,MAAM,CAACX,QAAQ,CAACY,IAAT,CAAcC,KAAf,CAAN,CAA4BC,YAA5B,CAAyC,CAAzC;AACAH,IAAAA,MAAM,CAACX,QAAQ,CAACY,IAAT,CAAcC,KAAd,CAAoB,CAApB,EAAuB,CAAvB,CAAD,CAAN,CAAkCE,OAAlC,CACE,0DADF;AAGD,GAXC,CAAF;AAaAN,EAAAA,EAAE,CAAC,mDAAD,EAAsD,YAAM;AAC5D,QAAMO,OAAO,GAAG,oBACd,gCAAC,iBAAD,QACG,IADH,EAEE,gCAAC,iBAAD,CAAY,IAAZ,eAFF,EAGGC,SAHH,CADc,CAAhB;AAOAN,IAAAA,MAAM,CAACX,QAAD,CAAN,CAAiBkB,GAAjB,CAAqBC,gBAArB;AACAR,IAAAA,MAAM,CAACK,OAAD,CAAN,CAAgBI,eAAhB;AACD,GAVC,CAAF;AAYAX,EAAAA,EAAE,CAAC,+DAAD,EAAkE,YAAM;AACxE,QAAMO,OAAO,GAAG,oBACd,gCAAC,iBAAD,QACE,gCAAC,iBAAD,CAAY,IAAZ,OADF,EAEE,gCAAC,iBAAD,CAAY,IAAZ,cAFF,EAGE,gCAAC,iBAAD,CAAY,IAAZ,cAHF,CADc,CAAhB;AAOAL,IAAAA,MAAM,CAACK,OAAD,CAAN,CAAgBI,eAAhB;AACD,GATC,CAAF;AAUD,CA/CO,CAAR","sourcesContent":["import React from 'react';\nimport { mount, render } from 'enzyme';\nimport Breadcrumb from '../index';\n\ndescribe('Breadcrumb', () => {\n  const errorSpy = jest.spyOn(console, 'error').mockImplementation(() => {});\n\n  afterEach(() => {\n    errorSpy.mockReset();\n  });\n\n  afterAll(() => {\n    errorSpy.mockRestore();\n  });\n\n  // https://github.com/airbnb/enzyme/issues/875\n  it('warns on non-Breadcrumb.Item children', () => {\n    const MyCom = () => <div>foo</div>;\n    mount(\n      <Breadcrumb>\n        <MyCom />\n      </Breadcrumb>,\n    );\n    expect(errorSpy.mock.calls).toHaveLength(1);\n    expect(errorSpy.mock.calls[0][0]).toMatch(\n      \"Breadcrumb only accepts Breadcrumb.Item as it's children\",\n    );\n  });\n\n  it('should allow Breadcrumb.Item is null or undefined', () => {\n    const wrapper = render(\n      <Breadcrumb>\n        {null}\n        <Breadcrumb.Item>Home</Breadcrumb.Item>\n        {undefined}\n      </Breadcrumb>,\n    );\n    expect(errorSpy).not.toHaveBeenCalled();\n    expect(wrapper).toMatchSnapshot();\n  });\n\n  it('should not display Breadcrumb Item when its children is falsy', () => {\n    const wrapper = render(\n      <Breadcrumb>\n        <Breadcrumb.Item />\n        <Breadcrumb.Item>xxx</Breadcrumb.Item>\n        <Breadcrumb.Item>yyy</Breadcrumb.Item>\n      </Breadcrumb>,\n    );\n    expect(wrapper).toMatchSnapshot();\n  });\n});\n"]}