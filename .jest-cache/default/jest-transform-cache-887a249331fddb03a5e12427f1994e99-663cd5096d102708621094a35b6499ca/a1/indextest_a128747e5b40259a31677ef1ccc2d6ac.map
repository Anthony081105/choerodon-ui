{"version":3,"sources":["index.test.js"],"names":["options","ds","data","describe","beforeEach","user","DataSet","fields","name","type","value","meaning","textField","label","jest","useFakeTimers","afterEach","useRealTimers","it","wrapper","runAllTimers","expect","find","at","prop","toBe","simulate","length","target","get","handeInput","v","suffixList","indexOf","loadData","map","suffix"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { mount } from 'enzyme';\nimport AutoComplete from '..';\nimport DataSet from '../../data-set';\n\nlet options = null;\nlet ds = null;\nlet data = null;\n\ndescribe('AutoComplete', () => {\n  beforeEach(() => {\n    data = [\n      {\n        user: '1',\n      },\n    ];\n    options = new DataSet({\n      fields: [{\n        name: 'value', type: 'string',\n      }, {\n        name: 'meaning', type: 'string',\n      }],\n      data: [{\n        value: '1',\n        meaning: '1',\n      }, {\n        value: '12',\n        meaning: '12',\n      }, {\n        value: '123',\n        meaning: '123',\n      }],\n    });\n\n    ds = new DataSet({\n      data,\n      fields: [{ name: 'user', type: 'string', textField: 'text', label: '用户' }],\n    });\n    jest.useFakeTimers();\n  });\n\n  afterEach(() => {\n    jest.useRealTimers();\n  });\n\n  it('dataset set AutoComplete value', () => {\n    const wrapper = mount(\n      <AutoComplete dataSet={ds} options={options} name=\"user\" />,\n    );\n    jest.runAllTimers();\n    expect(\n      wrapper\n        .find('input')\n        .at(0)\n        .prop('value'),\n    ).toBe('1');\n  });\n\n\n  it('AutoComplete choose value to dataSet', () => {\n    const wrapper = mount(\n      <AutoComplete dataSet={ds} options={options} name=\"user\" />,\n    );\n    jest.runAllTimers();\n    wrapper.find('.c7n-pro-auto-complete').simulate('click');\n    expect(wrapper.find('MenuItem').length).toBe(3);\n    wrapper.find('.c7n-pro-auto-complete').simulate('change', { target: { value: '12' } });\n    expect(wrapper.find('MenuItem').length).toBe(2);\n    expect(wrapper.find('MenuItem').at(0).prop('value').get('value')).toBe('12');\n    expect(wrapper.find('MenuItem').at(1).prop('value').get('value')).toBe('123');\n  });\n\n\n  it('AutoComplete options change', () => {\n    options = new DataSet({\n      fields: [{\n        name: 'value', type: 'string',\n      }, {\n        name: 'meaning', type: 'string',\n      }],\n    });\n\n    const handeInput = (v) => {\n      const value = v.target.value;\n      const suffixList = ['@qq.com', '@163.com', '@hand-china.com'];\n      if (value.indexOf('@') !== -1) {\n        options.loadData([]);\n      } else {\n        options.loadData(suffixList.map(suffix => ({\n          value: `${value}${suffix}`,\n          meaning: `${value}${suffix}`,\n        })));\n      }\n    };\n\n    const wrapper = mount(\n      <AutoComplete dataSet={ds} options={options} name=\"user\" onInput={handeInput} />,\n    );\n    jest.runAllTimers();\n    wrapper.find('.c7n-pro-auto-complete').simulate('click');\n    wrapper.find('.c7n-pro-auto-complete').simulate('input', { target: { value: '12' } });\n    expect(wrapper.find('MenuItem').length).toBe(3);\n    expect(wrapper.find('MenuItem').at(0).prop('value').get('value')).toBe('12@qq.com');\n    expect(wrapper.find('MenuItem').at(1).prop('value').get('value')).toBe('12@163.com');\n  });\n\n});\n"]}