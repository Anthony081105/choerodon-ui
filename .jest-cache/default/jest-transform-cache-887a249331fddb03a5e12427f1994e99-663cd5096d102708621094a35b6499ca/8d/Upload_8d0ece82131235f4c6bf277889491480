df3f77470174c946a280737440e67455
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _uniqBy = _interopRequireDefault(require("lodash/uniqBy"));

var _LocaleReceiver = _interopRequireDefault(require("../locale-provider/LocaleReceiver"));

var _default = _interopRequireDefault(require("../locale-provider/default"));

var _UploadList = _interopRequireDefault(require("./UploadList"));

var _utils = require("./utils");

var _upload = _interopRequireDefault(require("../rc-components/upload"));

var _configure = require("../configure");

function _createSuper(Derived) {
  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  return function () {
    var Super = (0, _getPrototypeOf2["default"])(Derived),
        result;

    if (isNativeReflectConstruct()) {
      var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return (0, _possibleConstructorReturn2["default"])(this, result);
  };
}

var Upload =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(Upload, _Component);

  var _super = _createSuper(Upload);

  function Upload(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, Upload);
    _this = _super.call(this, props);

    _this.onStart = function (file) {
      var fileList = _this.state.fileList;
      var nextFileList = (0, _toConsumableArray2["default"])(fileList);
      var targetItem = (0, _utils.fileToObject)(file);
      targetItem.status = 'uploading';
      nextFileList.push(targetItem);

      _this.onChange({
        file: targetItem,
        fileList: nextFileList
      }); // fix ie progress


      if (!window.FormData) {
        _this.autoUpdateProgress(0, targetItem);
      }

      var onStart = _this.props.onStart;

      if (onStart) {
        onStart(file);
      }
    };

    _this.onSuccess = function (response, file) {
      _this.clearProgressTimer();

      try {
        if (typeof response === 'string') {
          response = JSON.parse(response);
        }
      } catch (e) {
        /* do nothing */
      }

      var fileList = _this.state.fileList;
      var targetItem = (0, _utils.getFileItem)(file, fileList); // removed

      if (targetItem) {
        targetItem.status = 'done';
        targetItem.response = response;

        _this.onChange({
          file: (0, _objectSpread2["default"])({}, targetItem),
          fileList: fileList
        });
      }

      var onSuccess = _this.props.onSuccess;

      if (onSuccess) {
        onSuccess(response, file);
      }
    };

    _this.onProgress = function (e, file) {
      var fileList = _this.state.fileList;
      var targetItem = (0, _utils.getFileItem)(file, fileList); // removed

      if (targetItem) {
        targetItem.percent = e.percent;

        _this.onChange({
          event: e,
          file: (0, _objectSpread2["default"])({}, targetItem),
          fileList: fileList
        });
      }

      var onProgress = _this.props.onProgress;

      if (onProgress) {
        onProgress(e, file);
      }
    };

    _this.onError = function (error, response, file) {
      _this.clearProgressTimer();

      var fileList = _this.state.fileList;
      var targetItem = (0, _utils.getFileItem)(file, fileList); // removed

      if (!targetItem) {
        return;
      }

      targetItem.error = error;
      targetItem.response = response;
      targetItem.status = 'error';

      _this.onChange({
        file: (0, _objectSpread2["default"])({}, targetItem),
        fileList: fileList
      });

      var onError = _this.props.onError;

      if (onError) {
        onError(error, response, file);
      }
    };

    _this.handleManualRemove = function (file) {
      _this.upload.abort(file);

      file.status = 'removed'; // eslint-disable-line

      _this.handleRemove(file);
    };

    _this.onChange = function (info) {
      if (!('fileList' in _this.props)) {
        _this.setState({
          fileList: info.fileList
        });
      }

      var onChange = _this.props.onChange;

      if (onChange) {
        onChange(info);
      }
    };

    _this.onFileDrop = function (e) {
      _this.setState({
        dragState: e.type
      });
    };

    _this.beforeUpload = function (file, uploadFiles) {
      var beforeUpload = _this.props.beforeUpload;

      if (beforeUpload) {
        var result = beforeUpload(file, uploadFiles);

        if (result === false) {
          var fileList = _this.state.fileList;

          _this.onChange({
            file: file,
            fileList: (0, _uniqBy["default"])(uploadFiles.concat(fileList), function (item) {
              return item.uid;
            })
          });

          return false;
        }

        if (result && result.then) {
          return result;
        }
      }

      return true;
    };

    _this.saveUpload = function (node) {
      _this.upload = node;
    };

    _this.renderUploadList = function (uploadLocale) {
      var _this$props = _this.props,
          showUploadList = _this$props.showUploadList,
          listType = _this$props.listType,
          onPreview = _this$props.onPreview,
          locale = _this$props.locale;
      var fileList = _this.state.fileList;
      var showRemoveIcon = showUploadList.showRemoveIcon,
          showPreviewIcon = showUploadList.showPreviewIcon;
      return _react["default"].createElement(_UploadList["default"], {
        listType: listType,
        items: fileList,
        onPreview: onPreview,
        onRemove: _this.handleManualRemove,
        showRemoveIcon: showRemoveIcon,
        showPreviewIcon: showPreviewIcon,
        locale: (0, _objectSpread2["default"])({}, uploadLocale, {}, locale)
      });
    };

    _this.state = {
      fileList: props.fileList || props.defaultFileList || [],
      dragState: 'drop'
    };
    return _this;
  }

  (0, _createClass2["default"])(Upload, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.clearProgressTimer();
    }
  }, {
    key: "autoUpdateProgress",
    value: function autoUpdateProgress(_, file) {
      var _this2 = this;

      var getPercent = (0, _utils.genPercentAdd)();
      var curPercent = 0;
      this.clearProgressTimer();
      this.progressTimer = setInterval(function () {
        curPercent = getPercent(curPercent);

        _this2.onProgress({
          percent: curPercent
        }, file);
      }, 200);
    }
  }, {
    key: "handleRemove",
    value: function handleRemove(file) {
      var _this3 = this;

      var onRemove = this.props.onRemove;
      Promise.resolve(typeof onRemove === 'function' ? onRemove(file) : onRemove).then(function (ret) {
        // Prevent removing file
        if (ret === false) {
          return;
        }

        var fileList = _this3.state.fileList;
        var removedFileList = (0, _utils.removeFileItem)(file, fileList);

        if (removedFileList) {
          _this3.onChange({
            file: file,
            fileList: removedFileList
          });
        }
      });
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if ('fileList' in nextProps) {
        this.setState({
          fileList: nextProps.fileList || []
        });
      }
    }
  }, {
    key: "clearProgressTimer",
    value: function clearProgressTimer() {
      clearInterval(this.progressTimer);
    }
  }, {
    key: "render",
    value: function render() {
      var _classNames2;

      var _this$props2 = this.props,
          customizePrefixCls = _this$props2.prefixCls,
          className = _this$props2.className,
          showUploadList = _this$props2.showUploadList,
          listType = _this$props2.listType,
          type = _this$props2.type,
          disabled = _this$props2.disabled,
          children = _this$props2.children;
      var _this$state = this.state,
          fileList = _this$state.fileList,
          dragState = _this$state.dragState;
      var prefixCls = (0, _configure.getPrefixCls)('upload', customizePrefixCls);
      var rcUploadProps = (0, _objectSpread2["default"])({}, this.props, {
        onStart: this.onStart,
        onError: this.onError,
        onProgress: this.onProgress,
        onSuccess: this.onSuccess,
        beforeUpload: this.beforeUpload,
        prefixCls: prefixCls
      });
      delete rcUploadProps.className;
      var uploadList = showUploadList ? _react["default"].createElement(_LocaleReceiver["default"], {
        componentName: "Upload",
        defaultLocale: _default["default"].Upload
      }, this.renderUploadList) : null;

      if (type === 'drag') {
        var _classNames;

        var dragCls = (0, _classnames["default"])(prefixCls, (_classNames = {}, (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-drag"), true), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-drag-uploading"), fileList.some(function (file) {
          return file.status === 'uploading';
        })), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-drag-hover"), dragState === 'dragover'), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-disabled"), disabled), _classNames));
        return _react["default"].createElement("span", {
          className: className
        }, _react["default"].createElement("div", {
          className: dragCls,
          onDrop: this.onFileDrop,
          onDragOver: this.onFileDrop,
          onDragLeave: this.onFileDrop
        }, _react["default"].createElement(_upload["default"], (0, _extends2["default"])({}, rcUploadProps, {
          ref: this.saveUpload,
          className: "".concat(prefixCls, "-btn")
        }), _react["default"].createElement("div", {
          className: "".concat(prefixCls, "-drag-container")
        }, children))), uploadList);
      }

      var uploadButtonCls = (0, _classnames["default"])(prefixCls, (_classNames2 = {}, (0, _defineProperty2["default"])(_classNames2, "".concat(prefixCls, "-select"), true), (0, _defineProperty2["default"])(_classNames2, "".concat(prefixCls, "-select-").concat(listType), true), (0, _defineProperty2["default"])(_classNames2, "".concat(prefixCls, "-disabled"), disabled), _classNames2));

      var uploadButton = _react["default"].createElement("div", {
        className: uploadButtonCls,
        style: {
          display: children ? '' : 'none'
        }
      }, _react["default"].createElement(_upload["default"], (0, _extends2["default"])({}, rcUploadProps, {
        ref: this.saveUpload
      })));

      if (listType === 'picture-card') {
        return _react["default"].createElement("span", {
          className: className
        }, uploadList, uploadButton);
      }

      return _react["default"].createElement("span", {
        className: className
      }, uploadButton, uploadList);
    }
  }]);
  return Upload;
}(_react.Component);

exports["default"] = Upload;
Upload.displayName = 'Upload';
Upload.defaultProps = {
  type: 'select',
  multiple: false,
  action: '',
  data: {},
  accept: '',
  beforeUpload: _utils.T,
  showUploadList: true,
  listType: 'text',
  className: '',
  disabled: false,
  supportServerRender: true
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,