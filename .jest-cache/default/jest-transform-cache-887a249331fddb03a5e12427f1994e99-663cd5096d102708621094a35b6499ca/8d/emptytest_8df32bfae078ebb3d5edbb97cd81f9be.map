{"version":3,"sources":["empty.test.js"],"names":["columns","title","dataIndex","key","columnsFixed","width","fixed","describe","it","wrapper","expect","toMatchSnapshot","emptyText"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { render } from 'enzyme';\nimport Table from '..';\n\nconst columns = [\n  { title: 'Column 1', dataIndex: 'address', key: '1' },\n  { title: 'Column 2', dataIndex: 'address', key: '2' },\n  { title: 'Column 3', dataIndex: 'address', key: '3' },\n  { title: 'Column 4', dataIndex: 'address', key: '4' },\n  { title: 'Column 5', dataIndex: 'address', key: '5' },\n  { title: 'Column 6', dataIndex: 'address', key: '6' },\n  { title: 'Column 7', dataIndex: 'address', key: '7' },\n  { title: 'Column 8', dataIndex: 'address', key: '8' },\n];\n\nconst columnsFixed = [\n  {\n    title: 'Full Name',\n    width: 100,\n    dataIndex: 'name',\n    key: 'name',\n    fixed: 'left',\n  },\n  {\n    title: 'Age',\n    width: 100,\n    dataIndex: 'age',\n    key: 'age',\n    fixed: 'left',\n  },\n  { title: 'Column 1', dataIndex: 'address', key: '1' },\n  { title: 'Column 2', dataIndex: 'address', key: '2' },\n  { title: 'Column 3', dataIndex: 'address', key: '3' },\n  { title: 'Column 4', dataIndex: 'address', key: '4' },\n  { title: 'Column 5', dataIndex: 'address', key: '5' },\n  { title: 'Column 6', dataIndex: 'address', key: '6' },\n  { title: 'Column 7', dataIndex: 'address', key: '7' },\n  { title: 'Column 8', dataIndex: 'address', key: '8' },\n  {\n    title: 'Action',\n    key: 'address',\n    fixed: 'right',\n    width: 100,\n  },\n];\n\ndescribe('Table', () => {\n  it('renders empty table', () => {\n    const wrapper = render(<Table dataSource={[]} columns={columns} pagination={false} />);\n    expect(wrapper).toMatchSnapshot();\n  });\n\n  it('renders empty table with fixed columns', () => {\n    const wrapper = render(<Table dataSource={[]} columns={columnsFixed} pagination={false} />);\n    expect(wrapper).toMatchSnapshot();\n  });\n\n  it('renders empty table with custom emptyText', () => {\n    const wrapper = render(\n      <Table\n        dataSource={[]}\n        columns={columns}\n        pagination={false}\n        locale={{ emptyText: 'custom empty text ' }}\n      />,\n    );\n    expect(wrapper).toMatchSnapshot();\n  });\n\n  it('renders empty table without emptyText when loading', () => {\n    const wrapper = render(<Table dataSource={[]} columns={columns} loading />);\n    expect(wrapper).toMatchSnapshot();\n  });\n});\n"]}