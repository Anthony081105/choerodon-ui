{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/code-area/CodeArea.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { ComponentClass, ReactNode } from 'react';\nimport PropTypes from 'prop-types';\nimport { action, observable, autorun } from 'mobx';\nimport { observer } from 'mobx-react';\nimport { EditorConfiguration } from 'codemirror';\nimport { IControlledCodeMirror as CodeMirrorProps, IInstance } from 'react-codemirror2';\nimport isString from 'lodash/isString';\nimport isEqual from 'lodash/isEqual';\nimport omit from 'lodash/omit';\nimport noop from 'lodash/noop';\nimport KeyCode from 'choerodon-ui/lib/_util/KeyCode';\nimport ObserverFormField from '../field';\nimport { FormFieldProps } from '../field/FormField';\nimport { CodeAreaFormatter } from './CodeAreaFormatter';\nimport autobind from '../_util/autobind';\n\nlet CodeMirror: ComponentClass<CodeMirrorProps>;\n\nif (typeof window !== 'undefined') {\n  // eslint-disable-next-line global-require\n  CodeMirror = require('react-codemirror2').Controlled;\n}\n\nexport interface CodeAreaProps extends FormFieldProps {\n  options?: EditorConfiguration;\n  formatHotKey?: string;\n  unFormatHotKey?: string;\n  formatter?: CodeAreaFormatter;\n}\n\nconst defaultCodeMirrorOptions: EditorConfiguration = {\n  theme: 'neat',\n  lineNumbers: true,\n  lint: true,\n  gutters: ['CodeMirror-lint-markers'],\n};\n\n@observer\nexport default class CodeArea extends ObserverFormField<CodeAreaProps> {\n  static displayName = 'CodeArea';\n\n  static propTypes = {\n    options: PropTypes.object,\n    formatHotKey: PropTypes.string,\n    unFormatHotKey: PropTypes.string,\n    formatter: PropTypes.object,\n    ...ObserverFormField.propTypes,\n  };\n\n  static defaultProps = {\n    ...ObserverFormField.defaultProps,\n    suffixCls: 'code-area',\n    formatHotKey: 'Alt-F',\n    unFormatHotKey: 'Alt-R',\n  };\n\n  cmOptions: EditorConfiguration = this.getCodeMirrorOptions();\n\n  @observable text?: string;\n\n  emptyValue?: any = '';\n\n  midText: string;\n\n  constructor(props, content) {\n    super(props, content)\n    autorun(() => {\n      // 在绑定dataSet的情况下\n      // 当手动修改过codeArea里面的值以后 再使用record.set去更新值 组件不会更新\n      // 原因在于此时 this.text 不为 undefined 因此 getTextNode 的计算值不会进行改变 导致组件不重新渲染\n      // 其他的组件会对 this.text 在blur的时候进行undefined的修改 但是这个组件不能这么做\n      // 原因在于 record 中的值为 raw的非格式化数据 blur后因为进行了一次record数据的修改 所以再次重新那数据必然导致\n      // 当数据存在错误的时候  codeArea去格式化 因为格式化失败了\n      // 当数据不存在存在错误的时候即使特地将其去格式化也依旧会被格式化\n      // 因此需要使用中间变量进行处理\n      const { formatter } = this.props;\n      const recordValue = this.getValue()\n      const value = formatter ? formatter.getFormatted(recordValue) : recordValue;\n      // 判断跟中间值是否一致 通过这个判断 数据的来源是 blur的时候设置的值 还是直接通过外部进行修改的值\n      if (recordValue !== this.midText) {\n        this.setText(value)\n      }\n    })\n  }\n\n  @autobind\n  handleBeforeChange(_editor, _data, value) {\n    this.setText(value);\n  }\n\n  @autobind\n  handleCodeMirrorKeyDown(cm, e) {\n    const { onKeyDown = noop, onEnterDown = noop } = this.props;\n    switch (e.keyCode) {\n      case KeyCode.ENTER:\n        onEnterDown(e);\n        break;\n      case KeyCode.ESC:\n        cm.getInputField().blur();\n        break;\n      default:\n    }\n    onKeyDown(e);\n  }\n\n  getCodeMirrorOptions(options: EditorConfiguration = this.props.options!): EditorConfiguration {\n    return { ...defaultCodeMirrorOptions, ...options };\n  }\n\n  getOtherProps() {\n    const otherProps = omit(super.getOtherProps(), ['onChange', 'formatHotKey', 'unFormatHotKey']);\n    otherProps.onKeyDown = this.handleCodeMirrorKeyDown;\n    return otherProps;\n  }\n\n  componentWillReceiveProps(nextProps, nextContext) {\n    const { options } = nextProps;\n    if (!isEqual(options, this.props.options)) {\n      this.cmOptions = this.getCodeMirrorOptions(options);\n    }\n    super.componentWillReceiveProps(nextProps, nextContext);\n  }\n\n  renderWrapper(): ReactNode {\n    if (CodeMirror) {\n      this.cmOptions.readOnly = this.isDisabled() ? 'nocursor' : this.isReadOnly();\n      const text = this.getTextNode();\n      return (\n        <div {...this.getWrapperProps()}>\n          <label>\n            <CodeMirror\n              {...this.getOtherProps()}\n              value={isString(text) ? text : this.getText(this.getValue())}\n              options={this.cmOptions}\n              onBeforeChange={this.handleBeforeChange}\n              onBlur={this.handleCodeMirrorBlur}\n              editorDidMount={this.handleCodeMirrorDidMount}\n            />\n            {this.renderFloatLabel()}\n          </label>\n        </div>\n      );\n    }\n  }\n\n  @action\n  setText(text?: string): void {\n    this.text = text;\n  }\n\n  getTextNode(): ReactNode {\n    return this.text === undefined ? (super.getTextNode() as string) || '' : this.text;\n  }\n\n  processValue(value: any): string {\n    const text = super.processValue(value);\n    const { formatter } = this.props;\n    return formatter ? formatter.getFormatted(text) : text;\n  }\n\n  /**\n   * 编辑器失去焦点时，调用父类方法，同步DataSet中的内容\n   *\n   * @memberof CodeArea\n   */\n  handleCodeMirrorBlur = (codeMirrorInstance: IInstance) => {\n    const { formatter } = this.props;\n    // 更新DataSet的值之前，先去拿到原始的raw格式\n    const codeMirrorText = codeMirrorInstance.getValue();\n    const value = formatter ? formatter.getRaw(codeMirrorText) : codeMirrorText\n    this.midText = value\n    this.setValue(value);\n  };\n\n  /**\n   * 在CodeMirror编辑器实例挂载前添加额外配置\n   *\n   * @memberof CodeArea\n   */\n  handleCodeMirrorDidMount = (editor: any) => {\n    const { formatter, style, formatHotKey, unFormatHotKey } = this.props;\n    const { width = '100%', height = 100 } = style || {};\n    const options = {\n      Tab(cm) {\n        if (cm.somethingSelected()) {\n          cm.indentSelection('add'); // 有选中内容时整体缩进\n        } else {\n          // 使用空格代替缩进\n          const spaces = Array(cm.getOption('indentUnit') + 1).join(' ');\n          cm.replaceSelection(spaces);\n        }\n      },\n    };\n    if (formatter) {\n      if (formatHotKey) {\n        // default: 'Alt-F'\n        options[formatHotKey] = cm => cm.setValue(formatter.getFormatted(cm.getValue()));\n      }\n      if (unFormatHotKey) {\n        // default: 'Alt-R'\n        options[unFormatHotKey] = cm => cm.setValue(formatter.getRaw(cm.getValue()));\n      }\n    }\n    editor.setSize(width, height); // default size: ('100%', 100)\n    editor.setOption('extraKeys', options);\n  };\n}\n"]}