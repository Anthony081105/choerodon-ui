e19318f80104eaecfc05e5b2999f18de
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _icon = _interopRequireDefault(require("../icon"));

var _progress = require("../rc-components/progress");

var _Loading = _interopRequireDefault(require("./Loading"));

var _configure = require("../configure");

function _createSuper(Derived) {
  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  return function () {
    var Super = (0, _getPrototypeOf2["default"])(Derived),
        result;

    if (isNativeReflectConstruct()) {
      var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return (0, _possibleConstructorReturn2["default"])(this, result);
  };
}

var Progress =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(Progress, _Component);

  var _super = _createSuper(Progress);

  function Progress() {
    (0, _classCallCheck2["default"])(this, Progress);
    return _super.apply(this, arguments);
  }

  (0, _createClass2["default"])(Progress, [{
    key: "render",
    value: function render() {
      var _classNames;

      var props = this.props;
      var customizePrefixCls = props.prefixCls,
          className = props.className,
          _props$percent = props.percent,
          percent = _props$percent === void 0 ? 0 : _props$percent,
          status = props.status,
          format = props.format,
          trailColor = props.trailColor,
          size = props.size,
          successPercent = props.successPercent,
          type = props.type,
          strokeWidth = props.strokeWidth,
          strokeColor = props.strokeColor,
          width = props.width,
          showInfo = props.showInfo,
          _props$gapDegree = props.gapDegree,
          gapDegree = _props$gapDegree === void 0 ? 0 : _props$gapDegree,
          gapPosition = props.gapPosition,
          restProps = (0, _objectWithoutProperties2["default"])(props, ["prefixCls", "className", "percent", "status", "format", "trailColor", "size", "successPercent", "type", "strokeWidth", "strokeColor", "width", "showInfo", "gapDegree", "gapPosition"]);
      var prefixCls = (0, _configure.getPrefixCls)('progress', customizePrefixCls);
      var progressStatus = parseInt(successPercent ? successPercent.toString() : percent.toString(), 10) >= 100 && !('status' in props) ? "success"
      /* success */
      : status || "normal"
      /* normal */
      ;
      var progressInfo;
      var progress;

      var textFormatter = format || function (percentNumber) {
        return "".concat(percentNumber, "%");
      };

      if (showInfo) {
        var text;
        var circleType = type === "circle"
        /* circle */
        || type === "dashboard"
        /* dashboard */
        ;

        if (progressStatus === "exception"
        /* exception */
        ) {
            text = format ? textFormatter(percent) : _react["default"].createElement(_icon["default"], {
              type: circleType ? 'close' : 'cancel'
            });
          } else if (progressStatus === "success"
        /* success */
        ) {
            text = format ? textFormatter(percent) : _react["default"].createElement(_icon["default"], {
              type: circleType ? 'check' : 'check_circle'
            });
          } else {
          text = textFormatter(percent);
        }

        progressInfo = _react["default"].createElement("span", {
          className: "".concat(prefixCls, "-text")
        }, text);
      }

      if (type === "line"
      /* line */
      ) {
          var percentStyle = {
            width: "".concat(percent, "%"),
            height: strokeWidth || (size === "small"
            /* small */
            ? 6 : 8),
            background: strokeColor
          };
          var successPercentStyle = {
            width: "".concat(successPercent, "%"),
            height: strokeWidth || (size === "small"
            /* small */
            ? 6 : 8)
          };
          var successSegment = successPercent !== undefined ? _react["default"].createElement("div", {
            className: "".concat(prefixCls, "-success-bg"),
            style: successPercentStyle
          }) : null;
          progress = _react["default"].createElement("div", null, _react["default"].createElement("div", {
            className: "".concat(prefixCls, "-outer")
          }, _react["default"].createElement("div", {
            className: "".concat(prefixCls, "-inner")
          }, _react["default"].createElement("div", {
            className: "".concat(prefixCls, "-bg"),
            style: percentStyle
          }), successSegment)), progressInfo);
        } else if (type === "circle"
      /* circle */
      || type === "dashboard"
      /* dashboard */
      ) {
          var circleSize = width || 120;
          var circleStyle = {
            width: circleSize,
            height: circleSize,
            fontSize: circleSize * 0.15 + 6
          };
          var circleWidth = strokeWidth || 6;
          var gapPos = gapPosition || type === "dashboard"
          /* dashboard */
          && "bottom"
          /* bottom */
          || "top"
          /* top */
          ;
          var gapDeg = gapDegree || type === "dashboard"
          /* dashboard */
          && 75;
          progress = _react["default"].createElement("div", {
            className: "".concat(prefixCls, "-inner"),
            style: circleStyle
          }, _react["default"].createElement(_progress.Circle, {
            percent: percent,
            strokeWidth: circleWidth,
            trailWidth: circleWidth,
            trailColor: trailColor,
            strokeColor: strokeColor,
            prefixCls: prefixCls,
            gapDegree: gapDeg,
            gapPosition: gapPos
          }), progressInfo);
        } else if (type === "loading"
      /* loading */
      ) {
          progress = _react["default"].createElement("div", {
            className: "".concat(prefixCls, "-inner")
          }, _react["default"].createElement(_Loading["default"], null));
        }

      var classString = (0, _classnames["default"])(prefixCls, (_classNames = {}, (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-").concat(type === "dashboard"
      /* dashboard */
      && "circle"
      /* circle */
      || type), true), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-status-").concat(progressStatus), true), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-show-info"), showInfo), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-").concat(size), size), _classNames), className);
      return _react["default"].createElement("div", (0, _extends2["default"])({}, restProps, {
        className: classString
      }), progress);
    }
  }]);
  return Progress;
}(_react.Component);

exports["default"] = Progress;
Progress.displayName = 'Progress';
Progress.defaultProps = {
  type: "line"
  /* line */
  ,
  percent: 0,
  showInfo: true,
  trailColor: '#f3f3f3',
  size: "default"
  /* default */

};
Progress.propTypes = {
  status: _propTypes["default"].oneOf(["normal"
  /* normal */
  , "exception"
  /* exception */
  , "active"
  /* active */
  , "success"
  /* success */
  ]),
  type: _propTypes["default"].oneOf(["line"
  /* line */
  , "circle"
  /* circle */
  , "dashboard"
  /* dashboard */
  , "loading"
  /* loading */
  ]),
  showInfo: _propTypes["default"].bool,
  percent: _propTypes["default"].number,
  width: _propTypes["default"].number,
  strokeWidth: _propTypes["default"].number,
  strokeColor: _propTypes["default"].string,
  trailColor: _propTypes["default"].string,
  format: _propTypes["default"].func,
  gapDegree: _propTypes["default"].number,
  size: _propTypes["default"].oneOf(["default"
  /* default */
  , "small"
  /* small */
  , "large"
  /* large */
  ])
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,