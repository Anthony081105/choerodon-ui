{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/table/TableHeader.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { observer } from 'mobx-react';\nimport classNames from 'classnames';\nimport { computed, get } from 'mobx';\nimport {\n  Droppable,\n  Draggable,\n  DraggableProvided,\n  DraggableStateSnapshot,\n  DroppableProvided,\n  DraggableRubric,\n} from 'react-beautiful-dnd';\nimport { pxToRem } from 'choerodon-ui/lib/_util/UnitConvertor';\nimport { isFunction } from 'lodash';\nimport { ColumnProps } from './Column';\nimport { ElementProps } from '../core/ViewComponent';\nimport TableHeaderCell, { TableHeaderCellProps } from './TableHeaderCell';\nimport TableContext from './TableContext';\nimport { ColumnLock, DragColumnAlign } from './enum';\nimport DataSet from '../data-set/DataSet';\nimport { getColumnKey } from './utils';\nimport ColumnGroup from './ColumnGroup';\nimport autobind from '../_util/autobind';\nimport { instance } from './Table';\nimport { DRAG_KEY } from './TableStore';\n\nexport interface TableHeaderProps extends ElementProps {\n  dataSet: DataSet;\n  lock?: ColumnLock | boolean;\n  dragColumnAlign?: DragColumnAlign;\n}\n\n@observer\nexport default class TableHeader extends Component<TableHeaderProps, any> {\n  static displayName = 'TableHeader';\n\n  static propTypes = {\n    prefixCls: PropTypes.string,\n    lock: PropTypes.oneOfType([\n      PropTypes.bool,\n      PropTypes.oneOf([ColumnLock.right, ColumnLock.left]),\n    ]),\n    dragColumnAlign: PropTypes.oneOf([DragColumnAlign.right, DragColumnAlign.left]),\n  };\n\n  static contextType = TableContext;\n\n  node: HTMLTableSectionElement | null;\n\n  columnDeep: number = 0;\n\n  @autobind\n  saveRef(node) {\n    this.node = node;\n  }\n\n  @autobind\n  getHeaderNode() {\n    return this.node;\n  }\n\n  render() {\n    const { prefixCls, lock, dataSet, dragColumnAlign } = this.props;\n    const { groupedColumns } = this;\n    const {\n      tableStore: { overflowY, columnMaxDeep, columnResizable, dragColumn, props: { columnsDragRender = {} } },\n    } = this.context;\n    const { droppableProps, draggableProps, renderClone } = columnsDragRender;\n    const { tableStore } = this.context;\n    const rows = this.getTableHeaderRows(groupedColumns);\n    const filterDrag = (columnItem: ColumnGroup): boolean => {\n      if (columnItem && columnItem.column && dragColumnAlign) {\n        return columnItem.column.key === DRAG_KEY;\n      }\n      return true;\n    };\n    tableStore.columnMaxDeep = (rows.length || 0);\n    const trs = rows.map((row, rowIndex) => {\n      if (row.length) {\n        let prevColumn: ColumnProps | undefined;\n        const tds = row.filter(filterDrag).map(({ hidden, column, rowSpan, colSpan, lastLeaf }, index) => {\n          if (!hidden) {\n            return (\n              <Draggable\n                draggableId={getColumnKey(column).toString()}\n                index={index}\n                key={getColumnKey(column)}\n                isDragDisabled={getColumnKey(column) === DRAG_KEY || (!dragColumn || columnMaxDeep > 1)}\n                {...draggableProps}\n              >\n                {(\n                  provided: DraggableProvided,\n                  snapshot: DraggableStateSnapshot,\n                ) => {\n                  const props: TableHeaderCellProps = {\n                    key: getColumnKey(column),\n                    prefixCls,\n                    dataSet,\n                    prevColumn,\n                    column,\n                    resizeColumn: lastLeaf,\n                    getHeaderNode: this.getHeaderNode,\n                    provided,\n                    snapshot,\n                  };\n                  if (rowSpan > 1) {\n                    props.rowSpan = rowSpan;\n                  }\n                  if (colSpan > 1) {\n                    props.colSpan = colSpan;\n                  }\n                  prevColumn = lastLeaf;\n                  return (\n                    <TableHeaderCell {...props} />\n                  );\n                }}\n              </Draggable>\n            )\n              ;\n          }\n          return undefined;\n        });\n        if (overflowY && lock !== ColumnLock.left && rowIndex === 0) {\n          tds.push(\n            <th key=\"fixed-column\" className={`${prefixCls}-cell`} rowSpan={rows.length}>\n              &nbsp;\n            </th>,\n          );\n        }\n        return (\n          <Droppable\n            droppableId=\"tableHeader\"\n            key={row.length > 1 ? `tableHeader${rowIndex}` : 'tableHeader'}\n            direction=\"horizontal\"\n            isDropDisabled={(!dragColumn || columnMaxDeep > 1)}\n            renderClone={(\n              provided: DraggableProvided,\n              snapshot: DraggableStateSnapshot,\n              rubric: DraggableRubric,\n            ) => {\n              const rowProps = row[rubric.source.index];\n              const { column, rowSpan, colSpan, lastLeaf } = rowProps;\n              const props: TableHeaderCellProps = {\n                key: getColumnKey(column),\n                prefixCls,\n                dataSet,\n                prevColumn,\n                column,\n                resizeColumn: lastLeaf,\n                getHeaderNode: this.getHeaderNode,\n                provided,\n                snapshot,\n              };\n              if (rowSpan > 1) {\n                props.rowSpan = rowSpan;\n              }\n              if (colSpan > 1) {\n                props.colSpan = colSpan;\n              }\n              if (renderClone && isFunction(renderClone)) {\n                return renderClone(props);\n              }\n              return (\n                <TableHeaderCell\n                  {...props} />\n              );\n            }}\n            getContainerForClone={() => instance().headtr}\n            {...droppableProps}\n          >\n            {(droppableProvided: DroppableProvided) => (\n              <tr\n                key={String(rowIndex)}\n                style={{\n                  height: lock ? this.getHeaderRowStyle(rows, rowIndex, columnResizable) : undefined,\n                }}\n                ref={(ref: HTMLTableRowElement | null) => {\n                  if (ref) {\n                    droppableProvided.innerRef(ref);\n                  }\n                }}\n                {...droppableProvided.droppableProps}\n              >\n                {tds}\n                {droppableProvided.placeholder}\n              </tr>\n            )}\n          </Droppable>\n        );\n      }\n      return undefined;\n    });\n    const classString = classNames(`${prefixCls}-thead`, {\n      [`${prefixCls}-column-resizable`]: columnResizable,\n    });\n    return (\n      <thead ref={this.saveRef} className={classString}>\n      {trs}\n      </thead>\n    );\n  }\n\n  getTableHeaderRows(\n    columns: ColumnGroup[],\n    currentRow: number = 0,\n    rows: ColumnGroup[][] = [],\n  ): ColumnGroup[][] {\n    rows[currentRow] = rows[currentRow] || [];\n    columns.forEach(column => {\n      const { hidden, rowSpan, colSpan, children } = column;\n      if (!hidden) {\n        if (rowSpan && rows.length < rowSpan) {\n          while (rows.length < rowSpan) {\n            rows.push([]);\n          }\n        }\n        if (children) {\n          this.getTableHeaderRows(children.columns, currentRow + rowSpan, rows);\n        }\n        if (colSpan !== 0) {\n          rows[currentRow].push(column);\n        }\n      }\n    });\n    return rows;\n  }\n\n  getHeaderRowStyle(\n    rows: ColumnGroup[][],\n    rowIndex: number,\n    columnResizable: boolean,\n  ): string | number | undefined {\n    const {\n      tableStore: { rowHeight },\n    } = this.context;\n    const height = rowHeight === 'auto' ? this.getRowHeight(rowIndex++) : rowHeight;\n    return pxToRem(\n      rows\n        .slice(rowIndex)\n        .reduce(\n          (total, r, index) =>\n            r.length\n              ? total\n              : total +\n              (rowHeight === 'auto'\n                ? this.getRowHeight(index + rowIndex)\n                : rowHeight + (columnResizable ? 4 : 3)),\n          height,\n        ),\n    );\n  }\n\n  getRowHeight(index): number {\n    const { tableStore } = this.context;\n    return get(tableStore.lockColumnsHeadRowsHeight, index) || 0;\n  }\n\n  @computed\n  get groupedColumns(): ColumnGroup[] {\n    const { tableStore } = this.context;\n    const { lock } = this.props;\n    switch (lock) {\n      case ColumnLock.left:\n      case true:\n        return tableStore.leftGroupedColumns;\n      case ColumnLock.right:\n        return tableStore.rightGroupedColumns;\n      default:\n        return tableStore.groupedColumns;\n    }\n  }\n}\n"]}