d2ec8117a582383d9671a7e4be3981d0
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _ = _interopRequireDefault(require(".."));

var _dataSet = _interopRequireDefault(require("../../data-set"));

describe('Currency', function () {
  it('should show US$ in a input value', function () {
    var handleDataSetChange = jest.fn();
    var ds = new _dataSet["default"]({
      autoCreate: true,
      fields: [{
        name: 'money',
        type: 'number',
        defaultValue: 100000000000000,
        required: true,
        currency: 'USD'
      }],
      events: {
        update: handleDataSetChange
      }
    });
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      dataSet: ds,
      name: "money"
    }));
    expect(wrapper.find('input').prop('value')).toEqual(expect.stringContaining('US$'));
  });
  it('should show ￥ in a input value', function () {
    var handleDataSetChange = jest.fn();
    var ds = new _dataSet["default"]({
      autoCreate: true,
      fields: [{
        name: 'money',
        type: 'number',
        defaultValue: 200,
        required: true,
        currency: 'CNY'
      }],
      events: {
        update: handleDataSetChange
      }
    });
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      dataSet: ds,
      name: "money"
    }));
    expect(wrapper.find('input').prop('value')).toEqual(expect.stringContaining('¥'));
    expect(wrapper.find('input').prop('value')).toEqual(expect.stringContaining('200'));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRlc3QuanMiXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJpdCIsImhhbmRsZURhdGFTZXRDaGFuZ2UiLCJqZXN0IiwiZm4iLCJkcyIsIkRhdGFTZXQiLCJhdXRvQ3JlYXRlIiwiZmllbGRzIiwibmFtZSIsInR5cGUiLCJkZWZhdWx0VmFsdWUiLCJyZXF1aXJlZCIsImN1cnJlbmN5IiwiZXZlbnRzIiwidXBkYXRlIiwid3JhcHBlciIsImV4cGVjdCIsImZpbmQiLCJwcm9wIiwidG9FcXVhbCIsInN0cmluZ0NvbnRhaW5pbmciXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQUEsUUFBUSxDQUFDLFVBQUQsRUFBYSxZQUFNO0FBQ3pCQyxFQUFBQSxFQUFFLENBQUMsa0NBQUQsRUFBcUMsWUFBTTtBQUMzQyxRQUFNQyxtQkFBbUIsR0FBR0MsSUFBSSxDQUFDQyxFQUFMLEVBQTVCO0FBQ0EsUUFBTUMsRUFBRSxHQUFHLElBQUlDLG1CQUFKLENBQVk7QUFDckJDLE1BQUFBLFVBQVUsRUFBRSxJQURTO0FBRXJCQyxNQUFBQSxNQUFNLEVBQUUsQ0FDTjtBQUNFQyxRQUFBQSxJQUFJLEVBQUUsT0FEUjtBQUVFQyxRQUFBQSxJQUFJLEVBQUUsUUFGUjtBQUdFQyxRQUFBQSxZQUFZLEVBQUUsZUFIaEI7QUFJRUMsUUFBQUEsUUFBUSxFQUFFLElBSlo7QUFLRUMsUUFBQUEsUUFBUSxFQUFFO0FBTFosT0FETSxDQUZhO0FBV3JCQyxNQUFBQSxNQUFNLEVBQUU7QUFDTkMsUUFBQUEsTUFBTSxFQUFFYjtBQURGO0FBWGEsS0FBWixDQUFYO0FBZUEsUUFBTWMsT0FBTyxHQUFHLG1CQUFNLGdDQUFDLFlBQUQ7QUFBVSxNQUFBLE9BQU8sRUFBRVgsRUFBbkI7QUFBdUIsTUFBQSxJQUFJLEVBQUM7QUFBNUIsTUFBTixDQUFoQjtBQUNBWSxJQUFBQSxNQUFNLENBQUNELE9BQU8sQ0FBQ0UsSUFBUixDQUFhLE9BQWIsRUFBc0JDLElBQXRCLENBQTJCLE9BQTNCLENBQUQsQ0FBTixDQUE0Q0MsT0FBNUMsQ0FBb0RILE1BQU0sQ0FBQ0ksZ0JBQVAsQ0FBd0IsS0FBeEIsQ0FBcEQ7QUFDRCxHQW5CQyxDQUFGO0FBb0JBcEIsRUFBQUEsRUFBRSxDQUFDLGdDQUFELEVBQW1DLFlBQU07QUFDekMsUUFBTUMsbUJBQW1CLEdBQUdDLElBQUksQ0FBQ0MsRUFBTCxFQUE1QjtBQUNBLFFBQU1DLEVBQUUsR0FBRyxJQUFJQyxtQkFBSixDQUFZO0FBQ3JCQyxNQUFBQSxVQUFVLEVBQUUsSUFEUztBQUVyQkMsTUFBQUEsTUFBTSxFQUFFLENBQ047QUFDRUMsUUFBQUEsSUFBSSxFQUFFLE9BRFI7QUFFRUMsUUFBQUEsSUFBSSxFQUFFLFFBRlI7QUFHRUMsUUFBQUEsWUFBWSxFQUFFLEdBSGhCO0FBSUVDLFFBQUFBLFFBQVEsRUFBRSxJQUpaO0FBS0VDLFFBQUFBLFFBQVEsRUFBRTtBQUxaLE9BRE0sQ0FGYTtBQVdyQkMsTUFBQUEsTUFBTSxFQUFFO0FBQ05DLFFBQUFBLE1BQU0sRUFBRWI7QUFERjtBQVhhLEtBQVosQ0FBWDtBQWVBLFFBQU1jLE9BQU8sR0FBRyxtQkFBTSxnQ0FBQyxZQUFEO0FBQVUsTUFBQSxPQUFPLEVBQUVYLEVBQW5CO0FBQXVCLE1BQUEsSUFBSSxFQUFDO0FBQTVCLE1BQU4sQ0FBaEI7QUFDQVksSUFBQUEsTUFBTSxDQUFDRCxPQUFPLENBQUNFLElBQVIsQ0FBYSxPQUFiLEVBQXNCQyxJQUF0QixDQUEyQixPQUEzQixDQUFELENBQU4sQ0FBNENDLE9BQTVDLENBQW9ESCxNQUFNLENBQUNJLGdCQUFQLENBQXdCLEdBQXhCLENBQXBEO0FBQ0FKLElBQUFBLE1BQU0sQ0FBQ0QsT0FBTyxDQUFDRSxJQUFSLENBQWEsT0FBYixFQUFzQkMsSUFBdEIsQ0FBMkIsT0FBM0IsQ0FBRCxDQUFOLENBQTRDQyxPQUE1QyxDQUFvREgsTUFBTSxDQUFDSSxnQkFBUCxDQUF3QixLQUF4QixDQUFwRDtBQUNELEdBcEJDLENBQUY7QUFxQkQsQ0ExQ08sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBtb3VudCB9IGZyb20gJ2VuenltZSc7XG5pbXBvcnQgQ3VycmVuY3kgZnJvbSAnLi4nO1xuaW1wb3J0IERhdGFTZXQgZnJvbSAnLi4vLi4vZGF0YS1zZXQnO1xuXG5kZXNjcmliZSgnQ3VycmVuY3knLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgc2hvdyBVUyQgaW4gYSBpbnB1dCB2YWx1ZScsICgpID0+IHtcbiAgICBjb25zdCBoYW5kbGVEYXRhU2V0Q2hhbmdlID0gamVzdC5mbigpO1xuICAgIGNvbnN0IGRzID0gbmV3IERhdGFTZXQoe1xuICAgICAgYXV0b0NyZWF0ZTogdHJ1ZSxcbiAgICAgIGZpZWxkczogW1xuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogJ21vbmV5JyxcbiAgICAgICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgICAgICBkZWZhdWx0VmFsdWU6IDEwMDAwMDAwMDAwMDAwMCxcbiAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICBjdXJyZW5jeTogJ1VTRCcsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgZXZlbnRzOiB7XG4gICAgICAgIHVwZGF0ZTogaGFuZGxlRGF0YVNldENoYW5nZSxcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgY29uc3Qgd3JhcHBlciA9IG1vdW50KDxDdXJyZW5jeSBkYXRhU2V0PXtkc30gbmFtZT1cIm1vbmV5XCIgLz4pO1xuICAgIGV4cGVjdCh3cmFwcGVyLmZpbmQoJ2lucHV0JykucHJvcCgndmFsdWUnKSkudG9FcXVhbChleHBlY3Quc3RyaW5nQ29udGFpbmluZygnVVMkJykpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBzaG93IO+/pSBpbiBhIGlucHV0IHZhbHVlJywgKCkgPT4ge1xuICAgIGNvbnN0IGhhbmRsZURhdGFTZXRDaGFuZ2UgPSBqZXN0LmZuKCk7XG4gICAgY29uc3QgZHMgPSBuZXcgRGF0YVNldCh7XG4gICAgICBhdXRvQ3JlYXRlOiB0cnVlLFxuICAgICAgZmllbGRzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAnbW9uZXknLFxuICAgICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgICAgIGRlZmF1bHRWYWx1ZTogMjAwLFxuICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgIGN1cnJlbmN5OiAnQ05ZJyxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICBldmVudHM6IHtcbiAgICAgICAgdXBkYXRlOiBoYW5kbGVEYXRhU2V0Q2hhbmdlLFxuICAgICAgfSxcbiAgICB9KTtcbiAgICBjb25zdCB3cmFwcGVyID0gbW91bnQoPEN1cnJlbmN5IGRhdGFTZXQ9e2RzfSBuYW1lPVwibW9uZXlcIiAvPik7XG4gICAgZXhwZWN0KHdyYXBwZXIuZmluZCgnaW5wdXQnKS5wcm9wKCd2YWx1ZScpKS50b0VxdWFsKGV4cGVjdC5zdHJpbmdDb250YWluaW5nKCfCpScpKTtcbiAgICBleHBlY3Qod3JhcHBlci5maW5kKCdpbnB1dCcpLnByb3AoJ3ZhbHVlJykpLnRvRXF1YWwoZXhwZWN0LnN0cmluZ0NvbnRhaW5pbmcoJzIwMCcpKTtcbiAgfSk7XG59KTtcbiJdfQ==