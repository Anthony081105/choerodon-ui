{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components/steps/index.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA4BqB,K;;;;;;;;;;;;;;6BAkBb;AAAA,UACI,KADJ,GACc,IADd,CACI,KADJ;AAEJ,aAAO,kBAAA,aAAA,CAAC,iBAAD,EAAQ,0BAAA,EAAA,EAAK,KAAL,EAAU;AAAE,QAAA,SAAS,EAAE,6BAAa,OAAb,EAAsB,KAAK,CAAC,SAA5B;AAAb,OAAV,CAAR,CAAP;AACD;;;EArBgC,gB;;;AAC1B,KAAA,CAAA,WAAA,GAAc,OAAd;AAEA,KAAA,CAAA,IAAA,GAAO,WAAP;AAEA,KAAA,CAAA,SAAA,GAAY,gBAAZ;AAEA,KAAA,CAAA,YAAA,GAAe;AACpB,EAAA,UAAU,EAAE,MADQ;AAEpB,EAAA,OAAO,EAAE;AAFW,CAAf;AAKA,KAAA,CAAA,SAAA,GAAY;AACjB,EAAA,SAAS,EAAE,sBAAU,MADJ;AAEjB,EAAA,UAAU,EAAE,sBAAU,MAFL;AAGjB,EAAA,OAAO,EAAE,sBAAU;AAHF,CAAZ","sourcesContent":["import React, { Component, CSSProperties } from 'react';\nimport PropTypes from 'prop-types';\nimport RcSteps, { Step, StepGroup } from '../rc-components/steps';\nimport { Size } from '../_util/enum';\nimport { getPrefixCls } from '../configure';\n\nexport interface StepsProps {\n  prefixCls?: string;\n  iconPrefix?: string;\n  current?: number;\n  status?: 'wait' | 'process' | 'finish' | 'error';\n  size?: Size;\n  direction?: 'horizontal' | 'vertical';\n  progressDot?: boolean | Function;\n  style?: CSSProperties;\n  headerRender?: () => React.ReactElement<any>;\n  headerIcon:string;\n  headerText:string;\n}\n\nexport interface StepProps {\n  className?: string;\n  description?: React.ReactNode;\n  icon?: React.ReactNode;\n  onClick?: React.MouseEventHandler<HTMLElement>;\n  status?: 'wait' | 'process' | 'finish' | 'error';\n  disabled?: boolean;\n  title?: React.ReactNode;\n  subTitle?: React.ReactNode;\n  style?: React.CSSProperties;\n}\n\nexport default class Steps extends Component<StepsProps, any> {\n  static displayName = 'Steps';\n\n  static Step = Step as React.ClassicComponentClass<StepProps>;\n\n  static StepGroup = StepGroup as React.ClassicComponentClass<StepProps>;\n\n  static defaultProps = {\n    iconPrefix: 'icon',\n    current: 0,\n  };\n\n  static propTypes = {\n    prefixCls: PropTypes.string,\n    iconPrefix: PropTypes.string,\n    current: PropTypes.number,\n  };\n\n  render() {\n    const { props } = this;\n    return <RcSteps {...props} prefixCls={getPrefixCls('steps', props.prefixCls)} />;\n  }\n}\n"]}