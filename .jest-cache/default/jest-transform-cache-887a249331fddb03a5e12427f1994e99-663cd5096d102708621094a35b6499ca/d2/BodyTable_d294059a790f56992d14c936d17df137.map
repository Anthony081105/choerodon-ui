{"version":3,"sources":["BodyTable.jsx"],"names":["BodyTable","props","table","prefixCls","scroll","columns","fixed","tableClassName","getRowKey","handleBodyScroll","expander","isAnyColumnsFixed","saveRef","columnManager","useFixedHeader","bodyStyle","innerBodyStyle","x","overflowX","WebkitTransform","y","maxHeight","overflowY","scrollbarWidth","marginBottom","paddingBottom","hasFoot","hasFooter","baseTable","length","refName","propTypes","PropTypes","oneOfType","string","bool","array","isRequired","func","object","contextTypes","any"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport measureScrollbar from '../../_util/measureScrollbar';\nimport BaseTable from './BaseTable';\n\nexport default function BodyTable(props, { table }) {\n  const { prefixCls, scroll } = table.props;\n  const {\n    columns,\n    fixed,\n    tableClassName,\n    getRowKey,\n    handleBodyScroll,\n    expander,\n    isAnyColumnsFixed,\n  } = props;\n  const { saveRef, columnManager } = table;\n  let { useFixedHeader } = table.props;\n  const bodyStyle = { ...table.props.bodyStyle };\n  const innerBodyStyle = {};\n\n  if (scroll.x || fixed) {\n    bodyStyle.overflowX = bodyStyle.overflowX || 'auto';\n    // Fix weired webkit render bug\n    bodyStyle.WebkitTransform = 'translate3d (0, 0, 0)';\n  }\n\n  if (scroll.y) {\n    // maxHeight will make fixed-Table scrolling not working\n    // so we only set maxHeight to body-Table here\n    if (fixed) {\n      innerBodyStyle.maxHeight = bodyStyle.maxHeight || scroll.y;\n      innerBodyStyle.overflowY = bodyStyle.overflowY || 'scroll';\n    } else {\n      bodyStyle.maxHeight = bodyStyle.maxHeight || scroll.y;\n    }\n    bodyStyle.overflowY = bodyStyle.overflowY || 'scroll';\n    useFixedHeader = true;\n\n    // Add negative margin bottom for scroll bar overflow bug\n    const scrollbarWidth = measureScrollbar();\n    if (scrollbarWidth > 0 && fixed) {\n      bodyStyle.marginBottom = `-${scrollbarWidth}px`;\n      bodyStyle.paddingBottom = '0px';\n    }\n  }\n\n  const hasFoot = !useFixedHeader && columnManager.hasFooter();\n\n  const baseTable = (\n    <BaseTable\n      tableClassName={tableClassName}\n      hasHead={!useFixedHeader}\n      hasBody\n      hasFoot={hasFoot}\n      fixed={fixed}\n      columns={columns}\n      expander={expander}\n      getRowKey={getRowKey}\n      isAnyColumnsFixed={isAnyColumnsFixed}\n    />\n  );\n\n  if (fixed && columns.length) {\n    let refName;\n    if (columns[0].fixed === 'left' || columns[0].fixed === true) {\n      refName = 'fixedColumnsBodyLeft';\n    } else if (columns[0].fixed === 'right') {\n      refName = 'fixedColumnsBodyRight';\n    }\n    delete bodyStyle.overflowX;\n    delete bodyStyle.overflowY;\n    return (\n      <div\n        key=\"bodyTable\"\n        className={`${prefixCls}-body-outer`}\n        style={{ ...bodyStyle }}\n      >\n        <div\n          className={`${prefixCls}-body-inner`}\n          style={innerBodyStyle}\n          ref={saveRef(refName)}\n          onScroll={handleBodyScroll}\n        >\n          {baseTable}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      key=\"bodyTable\"\n      className={`${prefixCls}-body`}\n      style={bodyStyle}\n      ref={saveRef('bodyTable')}\n      onScroll={handleBodyScroll}\n    >\n      {baseTable}\n    </div>\n  );\n}\n\nBodyTable.propTypes = {\n  fixed: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.bool,\n  ]),\n  columns: PropTypes.array.isRequired,\n  tableClassName: PropTypes.string.isRequired,\n  handleBodyScroll: PropTypes.func.isRequired,\n  getRowKey: PropTypes.func.isRequired,\n  expander: PropTypes.object.isRequired,\n  isAnyColumnsFixed: PropTypes.bool,\n};\n\nBodyTable.contextTypes = {\n  table: PropTypes.any,\n};\n"]}