ad85984dfbf014f99f48092565832181
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _ = _interopRequireDefault(require(".."));

var _mountTest = _interopRequireDefault(require("../../../tests/shared/mountTest"));

var _focusTest = _interopRequireDefault(require("../../../tests/shared/focusTest"));

var _triggerPopTest = _interopRequireDefault(require("../../../tests/shared/triggerPopTest"));

var _ColorPicker = _interopRequireDefault(require("./ColorPicker"));

(0, _mountTest["default"])(_["default"]);
(0, _focusTest["default"])(_["default"]);
(0, _triggerPopTest["default"])(_["default"]);
describe('color-picker-pro', function () {
  beforeEach(function () {
    jest.useFakeTimers();
  });
  afterEach(function () {
    jest.useRealTimers();
  });
  it('renders ColorPicker correctly', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], null));
    expect(wrapper).toMatchSnapshot();
  });
  it('ColorPicker has the defaultProps clearButton', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], null));
    expect(wrapper.props().clearButton).toEqual(false);
    expect(wrapper.props().triggerHiddenDelay).toEqual(50);
    expect(wrapper.props().triggerShowDelay).toEqual(150);
  });
  it('should has the defaultValue', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      defaultValue: "#f1c7f2"
    }));
    expect(wrapper.find('input').at(0).prop('value')).toBe('#f1c7f2');
  });
  it('the color will be controlled by the value', function () {
    var handleChange = jest.fn();
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      value: "#f1c7f2",
      onChange: handleChange
    }));
    expect(wrapper.find('input').at(0).prop('value')).toBe('#f1c7f2');
    wrapper.setProps({
      value: '#00ff00'
    });
    wrapper.update();
    expect(wrapper.find('input').at(0).prop('value')).toBe('#00ff00');
  });
  it('can not click or input when the readOnly true and default false', function () {
    var handleChange = jest.fn();
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      onChange: handleChange
    }));
    expect(wrapper.prop('readOnly')).toBe(false);
    wrapper.setProps({
      readOnly: true
    });
    wrapper.update();
    expect(wrapper.prop('readOnly')).toBe(true);
    wrapper.find('input').simulate('change');
    jest.runAllTimers();
    wrapper.update();
    expect(handleChange).not.toHaveBeenCalled();
  });
  it('should trigger dataset default value correctly', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], null));
    expect(wrapper.find('.c7n-pro-color-picker-popup').at(0).prop('hidden')).toEqual(true);
    wrapper.find('input').simulate('click');
    jest.runAllTimers();
    wrapper.update();
    expect(wrapper.find('.c7n-pro-color-picker-popup').at(0).prop('hidden')).toEqual(false);
  });
  it('footer-slider click event render correctly', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], null));
    wrapper.find('input').simulate('click');
    jest.runAllTimers();
    wrapper.find('.hue').simulate('click');
    jest.runAllTimers();
    expect(wrapper).toMatchSnapshot();
  });
  it('the change event trigger when the body popup clicked', function () {
    var handleChange = jest.fn();
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      onChange: handleChange
    }));
    wrapper.find('input').simulate('click');
    jest.runAllTimers();
    wrapper.find('.c7n-pro-color-picker-popup-body-gradient').simulate('click');
    jest.runAllTimers();
    expect(handleChange).toHaveBeenCalled();
  });
  it('the panel body click event render correctly', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], null));
    wrapper.find('input').simulate('click');
    jest.runAllTimers();
    wrapper.find('.c7n-pro-color-picker-popup-body-selector').simulate('mousedown');
    expect(wrapper).toMatchSnapshot();
  });
  it('the sliderPointer of footer click event render correctly', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], null));
    wrapper.find('input').simulate('click');
    jest.runAllTimers();
    wrapper.find('.c7n-pro-color-picker-popup-footer-slider-pointer').at(0).simulate('mousedown');
    jest.runAllTimers();
    wrapper.instance().setColor('#ff00ee');
    jest.runAllTimers();
    expect(wrapper).toMatchSnapshot();
  });
  it('should renders dataset default value correctly', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_ColorPicker["default"], null));
    expect(wrapper.find('ColorPicker').props().name).toEqual('color');
    expect(wrapper.find('input').prop('value')).toBe('#00ff12');
    expect(wrapper).toMatchSnapshot();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,