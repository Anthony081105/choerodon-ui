b1857bcebc624cbf0fdc9a43b58b5324
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getKey = getKey;
exports.getContainer = getContainer;
exports.open = open;
exports["default"] = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _react = _interopRequireWildcard(require("react"));

var _reactDom = require("react-dom");

var _classnames = _interopRequireDefault(require("classnames"));

var _findLast = _interopRequireDefault(require("lodash/findLast.js"));

var _noop = _interopRequireDefault(require("lodash/noop"));

var _measureScrollbar = _interopRequireDefault(require("choerodon-ui/lib/_util/measureScrollbar"));

var _UnitConvertor = require("choerodon-ui/lib/_util/UnitConvertor");

var _warning = _interopRequireDefault(require("choerodon-ui/lib/_util/warning"));

var _configure = require("choerodon-ui/lib/configure");

var _Modal = _interopRequireWildcard(require("../modal/Modal"));

var _animate = _interopRequireDefault(require("../animate"));

var _Mask = _interopRequireDefault(require("./Mask"));

var _EventManager = require("../_util/EventManager");

var _utils = require("../modal/utils");

var KeyGen =
/*#__PURE__*/
_regenerator["default"].mark(function _callee(id) {
  return _regenerator["default"].wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (!true) {
            _context.next = 6;
            break;
          }

          _context.next = 3;
          return "".concat((0, _configure.getProPrefixCls)(_utils.suffixCls), "-").concat(id);

        case 3:
          id += 1;
          _context.next = 0;
          break;

        case 6:
        case "end":
          return _context.stop();
      }
    }
  }, _callee);
})(1);

var containerInstanses = [];

function removeInstanse(instanse) {
  var index = containerInstanses.indexOf(instanse);

  if (index > -1) {
    containerInstanses.splice(index, 1);
  }
}

function addInstanse(instanse) {
  removeInstanse(instanse);
  containerInstanses.push(instanse);
}

function getKey() {
  return KeyGen.next().value;
}

var root;
var defaultBodyStyle;

function getRoot() {
  if (typeof window !== 'undefined') {
    var doc = window.document;

    if (root) {
      if (!root.parentNode) {
        doc.body.appendChild(root);
      }
    } else {
      root = doc.createElement('div');
      root.className = "".concat((0, _configure.getProPrefixCls)(_utils.suffixCls), "-container");
      doc.body.appendChild(root);
    }
  }

  return root;
}
/**
 * 判断body是否有滚动条
 *
 * @returns {boolean}
 */


function hasScrollBar() {
  var _document$body = document.body,
      scrollHeight = _document$body.scrollHeight,
      clientHeight = _document$body.clientHeight;
  return scrollHeight > clientHeight;
}

function hideBodyScrollBar() {
  var style = document.body.style;

  if (!defaultBodyStyle) {
    defaultBodyStyle = {
      overflow: style.overflow,
      paddingRight: style.paddingRight
    };
    style.overflow = 'hidden';

    if (hasScrollBar()) {
      style.paddingRight = (0, _UnitConvertor.pxToRem)((0, _measureScrollbar["default"])()) || '';
    }
  }
}

function showBodyScrollBar() {
  var style = document.body.style;

  if (defaultBodyStyle) {
    var _defaultBodyStyle = defaultBodyStyle,
        overflow = _defaultBodyStyle.overflow,
        paddingRight = _defaultBodyStyle.paddingRight;
    defaultBodyStyle = undefined;
    style.overflow = overflow;
    style.paddingRight = paddingRight;
  }
}

var ModalContainer =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(ModalContainer, _Component);

  function ModalContainer(props, context) {
    var _this;

    (0, _classCallCheck2["default"])(this, ModalContainer);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(ModalContainer).call(this, props, context));
    _this.state = {
      modals: []
    };

    _this.handleAnimationEnd = function (modalKey, isEnter) {
      if (!isEnter) {
        var modals = _this.state.modals;

        var index = _this.findIndex(modalKey);

        if (index !== -1) {
          var _props = modals[index];
          modals.splice(index, 1);

          if (!_props.destroyOnClose) {
            modals.unshift(_props);
          }

          if (_props.afterClose) {
            _props.afterClose();
          }

          _this.setState({
            modals: modals
          });
        }
      }
    };

    _this.handleMaskClick =
    /*#__PURE__*/
    (0, _asyncToGenerator2["default"])(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee2() {
      var modals, modal, _modal$close, close, _modal$onCancel, onCancel, maskClosable, ret;

      return _regenerator["default"].wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              modals = _this.state.modals;
              modal = (0, _findLast["default"])(modals, function (_ref2) {
                var hidden = _ref2.hidden;
                return !hidden;
              });

              if (!modal) {
                _context2.next = 9;
                break;
              }

              _modal$close = modal.close, close = _modal$close === void 0 ? _noop["default"] : _modal$close, _modal$onCancel = modal.onCancel, onCancel = _modal$onCancel === void 0 ? _noop["default"] : _modal$onCancel, maskClosable = modal.maskClosable;

              if (!maskClosable) {
                _context2.next = 9;
                break;
              }

              _context2.next = 7;
              return onCancel();

            case 7:
              ret = _context2.sent;

              if (ret !== false) {
                close();
              }

            case 9:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    _this.top();

    return _this;
  }

  (0, _createClass2["default"])(ModalContainer, [{
    key: "top",
    value: function top() {
      addInstanse(this);
      return this;
    }
  }, {
    key: "componentWillUpdate",
    value: function componentWillUpdate(nextProps) {
      var location = nextProps.location;
      var currentLocation = this.props.location;

      if (location && currentLocation && location.pathname !== currentLocation.pathname) {
        this.clear();
      }

      this.top();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      removeInstanse(this);
    }
  }, {
    key: "findIndex",
    value: function findIndex(modalKey) {
      var modals = this.state.modals;
      return modals.findIndex(function (_ref3) {
        var key = _ref3.key;
        return key === modalKey;
      });
    }
  }, {
    key: "open",
    value: function open(props) {
      var modals = this.state.modals;

      if (!props.key) {
        props.key = getKey();
        (0, _warning["default"])(!!props.destroyOnClose, "The modal which opened has no key, please provide a key or set the `destroyOnClose` as true.");
      } else {
        var index = this.findIndex(props.key);

        if (index !== -1) {
          modals.splice(index, 1);
        }
      }

      modals.push((0, _objectSpread2["default"])({}, props, {
        hidden: false
      }));
      this.setState({
        modals: modals
      });
    }
  }, {
    key: "close",
    value: function close(props) {
      var modals = this.state.modals;
      var target = modals.find(function (_ref4) {
        var key = _ref4.key;
        return key === props.key;
      });

      if (target) {
        (0, _extends2["default"])(target, props, {
          hidden: true
        });
        this.setState({
          modals: modals
        });
      }
    }
  }, {
    key: "update",
    value: function update(props) {
      var originModals = this.state.modals;
      var modals = (0, _toConsumableArray2["default"])(originModals);

      if (props.key) {
        var index = this.findIndex(props.key);

        if (index !== -1) {
          modals[index] = props;
          this.setState({
            modals: modals
          });
        }
      }
    }
  }, {
    key: "clear",
    value: function clear() {
      var _this2 = this;

      var modals = this.state.modals;
      modals.forEach(function (modal) {
        return _this2.close((0, _objectSpread2["default"])({}, modal, {
          destroyOnClose: true
        }));
      });
    }
  }, {
    key: "getOffset",
    value: function getOffset(modals, idx) {
      var MARGIN_RIGHT_ARRAY = [];
      var DEFAULT = 150;
      var drawers = modals.filter(function (modal) {
        return modal.drawer && !modal.hidden;
      });
      var indexInDrawers = drawers.findIndex(function (drawer) {
        return drawer.key === modals[idx].key;
      });

      if (indexInDrawers === -1) {
        return 0;
      }

      for (var i = drawers.length - 1; i >= indexInDrawers; i--) {
        if (i === drawers.length - 1) {
          MARGIN_RIGHT_ARRAY.push(0);
        } else {
          var CURRENT_WIDTH = this.getModalWidth(drawers[i]);
          var NEXT_WIDTH = this.getModalWidth(drawers[i + 1]);
          var NEXT_MARGIN = MARGIN_RIGHT_ARRAY[drawers.length - i - 2];

          if (CURRENT_WIDTH >= NEXT_MARGIN + NEXT_WIDTH + DEFAULT) {
            MARGIN_RIGHT_ARRAY.push(0);
          } else {
            MARGIN_RIGHT_ARRAY.push(NEXT_MARGIN + NEXT_WIDTH + DEFAULT - CURRENT_WIDTH);
          }
        }
      }

      return MARGIN_RIGHT_ARRAY[MARGIN_RIGHT_ARRAY.length - 1];
    }
  }, {
    key: "getModalWidth",
    value: function getModalWidth(modal) {
      return modal && modal.style && modal.style.width || 520;
    }
  }, {
    key: "getComponent",
    value: function getComponent() {
      var _this3 = this;

      var hidden = true;
      var modals = this.state.modals;
      var items = modals.map(function (props, index) {
        var thisHidden = props.hidden;
        var _props$drawerTransiti = props.drawerTransitionName,
            drawerTransitionName = _props$drawerTransiti === void 0 ? 'slide-right' : _props$drawerTransiti;

        if (hidden && !thisHidden) {
          hidden = false;
        }

        var newProps = {};

        if (props.drawer) {
          newProps.style = (0, _objectSpread2["default"])({
            marginRight: _this3.getOffset(modals, index)
          }, props.style);
        }

        if (index === modals.length - 1) {
          newProps.className = (0, _classnames["default"])(props.className, "".concat((0, _configure.getProPrefixCls)(_utils.suffixCls), "-active"));
        }

        return _react["default"].createElement(_animate["default"], {
          key: props.key,
          component: "div",
          transitionAppear: true,
          transitionName: props.drawer ? drawerTransitionName : 'zoom',
          hiddenProp: "hidden",
          onEnd: _this3.handleAnimationEnd
        }, _react["default"].createElement(_Modal["default"], (0, _extends2["default"])({
          key: props.key
        }, props, newProps)));
      });
      var animationProps = {};

      if (typeof window !== 'undefined') {
        if (hidden) {
          animationProps.onEnd = showBodyScrollBar;
        } else {
          hideBodyScrollBar();
        }
      }

      var modal = (0, _findLast["default"])(modals, function (_ref5) {
        var modalHidden = _ref5.hidden;
        return !modalHidden;
      });

      var _ref6 = modal || {},
          maskStyle = _ref6.maskStyle,
          mask = _ref6.mask,
          maskClassName = _ref6.maskClassName;

      return _react["default"].createElement(_react["default"].Fragment, null, _react["default"].createElement(_animate["default"], (0, _extends2["default"])({
        component: "",
        transitionAppear: true,
        transitionName: "fade",
        hiddenProp: "hidden"
      }, animationProps), mask && _react["default"].createElement(_Mask["default"], {
        style: maskStyle,
        className: maskClassName,
        hidden: hidden,
        onClick: this.handleMaskClick,
        onMouseDown: _EventManager.stopEvent
      })), items);
    }
  }, {
    key: "render",
    value: function render() {
      var mount = getRoot();

      if (mount) {
        return (0, _reactDom.createPortal)(this.getComponent(), mount);
      }

      return null;
    }
  }]);
  return ModalContainer;
}(_react.Component);

exports["default"] = ModalContainer;
ModalContainer.displayName = 'ModalContainer';

function getContainer(loop) {
  var length = containerInstanses.length;

  if (length) {
    return containerInstanses[length - 1];
  }

  if (loop !== true) {
    (0, _reactDom.render)(_react["default"].createElement(ModalContainer, null), getRoot());
    return getContainer(true);
  }
}

function open(props) {
  var container = getContainer();

  function close(_x) {
    return _close.apply(this, arguments);
  }

  function _close() {
    _close = (0, _asyncToGenerator2["default"])(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee3(destroy) {
      var _props2, _props2$onClose, onClose;

      return _regenerator["default"].wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _props2 = props, _props2$onClose = _props2.onClose, onClose = _props2$onClose === void 0 ? _noop["default"] : _props2$onClose;
              _context3.next = 3;
              return onClose();

            case 3:
              _context3.t0 = _context3.sent;

              if (!(_context3.t0 !== false)) {
                _context3.next = 6;
                break;
              }

              if (destroy) {
                container.close((0, _objectSpread2["default"])({}, props, {
                  destroyOnClose: true
                }));
              } else {
                container.close(props);
              }

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));
    return _close.apply(this, arguments);
  }

  function update(newProps) {
    container.update((0, _objectSpread2["default"])({}, props, {}, newProps));
  }

  props = (0, _objectSpread2["default"])({
    close: close,
    update: update
  }, _Modal["default"].defaultProps, {}, props);
  container.open(props);

  _Modal.destroyFns.push(close);

  function show(newProps) {
    container.open((0, _objectSpread2["default"])({}, props, {}, newProps));
  }

  return {
    close: close,
    open: show,
    update: update
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,