{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components/tree-select/index.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAGA;;AACA;;AACA;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAIqB,U;;;;;;;AAmBnB,sBAAY,KAAZ,EAAkC;AAAA;;AAAA;AAChC,8BAAM,KAAN;;AAgBF,UAAA,cAAA,GAAiB,UAAC,IAAD,EAA8B;AAC7C,YAAK,YAAL,GAAoB,IAApB;AACD,KAFD;;AAIA,UAAA,gBAAA,GAAmB,UAAC,MAAD,EAAyB;AAAA;;AAAA,wBAStC,MAAK,KATiC;AAAA,UAE7B,kBAF6B,eAExC,SAFwC;AAAA,UAGxC,SAHwC,eAGxC,SAHwC;AAAA,UAIxC,IAJwC,eAIxC,IAJwC;AAAA,UAKxC,eALwC,eAKxC,eALwC;AAAA,UAMxC,aANwC,eAMxC,aANwC;AAAA,UAOxC,iBAPwC,eAOxC,iBAPwC;AAAA,UAQrC,SARqC;AAW1C,UAAM,SAAS,GAAG,6BAAa,QAAb,EAAuB,kBAAvB,CAAlB;AACA,UAAM,GAAG,GAAG,uGAEJ,SAFI,UAEa,IAAI,KAAA,OAFjB,2DAGJ,SAHI,UAGa,IAAI,KAAA,OAHjB,iBAKV,SALU,CAAZ;AAQA,UAAI,SAAS,GAAG,SAAS,CAAC,aAA1B;;AACA,UAAI,SAAJ,EAAe;AACb,QAAA,SAAS,GAAG,kBAAA,aAAA,CAAA,MAAA,EAAA;AAAM,UAAA,SAAS,YAAK,SAAL;AAAf,SAAA,CAAZ;AACD;;AACD,aACE,kBAAA,aAAA,CAAC,sBAAD,EAAa,0BAAA,EAAA,EACP,SADO,EACE;AACb,QAAA,iBAAiB,EAAE,4BAAW,iBAAX,YAAiC,SAAjC,oBADN;AAEb,QAAA,SAAS,EAAE,SAFE;AAGb,QAAA,SAAS,EAAE,GAHE;AAIb,QAAA,aAAa;AAAI,UAAA,SAAS,EAAE,OAAf;AAAwB,UAAA,QAAQ,EAAE;AAAlC,WAA6C,aAA7C,CAJA;AAKb,QAAA,aAAa,EAAE,SALF;AAMb,QAAA,eAAe,EAAE,eAAe,IAAI,MAAM,CAAC,eAN9B;AAOb,QAAA,GAAG,EAAE,MAAK;AAPG,OADF,CAAb,CADF;AAYD,KApCD;;AAlBE,6BACE,KAAK,CAAC,QAAN,KAAmB,KAAnB,IAA4B,CAAC,KAAK,CAAC,aADrC,EAEE,8DAFF;AAHgC;AAOjC;;;;4BAEI;AACH,WAAK,YAAL,CAAkB,KAAlB;AACD;;;2BAEG;AACF,WAAK,YAAL,CAAkB,IAAlB;AACD;;;6BA4CK;AACJ,aACE,kBAAA,aAAA,CAAC,0BAAD,EAAe;AAAC,QAAA,aAAa,EAAC,QAAf;AAAwB,QAAA,aAAa,EAAE;AAAvC,OAAf,EACG,KAAK,gBADR,CADF;AAKD;;;EApFqC,gB;;;AAC/B,UAAA,CAAA,WAAA,GAAc,YAAd;AAEA,UAAA,CAAA,QAAA,GAAW,oBAAX;AAEA,UAAA,CAAA,QAAA,GAAW,oBAAX;AAEA,UAAA,CAAA,WAAA,GAAc,uBAAd;AAEA,UAAA,CAAA,UAAA,GAAa,sBAAb;AAEA,UAAA,CAAA,YAAA,GAAe;AACpB,EAAA,cAAc,EAAE,UADI;AAEpB,EAAA,oBAAoB,EAAE,MAFF;AAGpB,EAAA,UAAU,EAAE;AAHQ,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport { TreeSelectProps } from './interface';\nimport { SelectLocale } from '../select';\nimport LocaleReceiver from '../locale-provider/LocaleReceiver';\nimport warning from '../_util/warning';\nimport RcTreeSelect, {\n  SHOW_ALL,\n  SHOW_CHILD,\n  SHOW_PARENT,\n  TreeNode,\n} from '../rc-components/tree-select';\nimport { Size } from '../_util/enum';\nimport { getPrefixCls } from '../configure';\n\nexport { TreeData, TreeSelectProps } from './interface';\n\nexport default class TreeSelect extends Component<TreeSelectProps, any> {\n  static displayName = 'TreeSelect';\n\n  static TreeNode = TreeNode;\n\n  static SHOW_ALL = SHOW_ALL;\n\n  static SHOW_PARENT = SHOW_PARENT;\n\n  static SHOW_CHILD = SHOW_CHILD;\n\n  static defaultProps = {\n    transitionName: 'slide-up',\n    choiceTransitionName: 'zoom',\n    showSearch: false,\n  };\n\n  private rcTreeSelect: any;\n\n  constructor(props: TreeSelectProps) {\n    super(props);\n\n    warning(\n      props.multiple !== false || !props.treeCheckable,\n      '`multiple` will alway be `true` when `treeCheckable` is true',\n    );\n  }\n\n  focus() {\n    this.rcTreeSelect.focus();\n  }\n\n  blur() {\n    this.rcTreeSelect.blur();\n  }\n\n  saveTreeSelect = (node: RcTreeSelect | null) => {\n    this.rcTreeSelect = node;\n  };\n\n  renderTreeSelect = (locale: SelectLocale) => {\n    const {\n      prefixCls: customizePrefixCls,\n      className,\n      size,\n      notFoundContent,\n      dropdownStyle,\n      dropdownClassName,\n      ...restProps\n    } = this.props;\n\n    const prefixCls = getPrefixCls('select', customizePrefixCls);\n    const cls = classNames(\n      {\n        [`${prefixCls}-lg`]: size === Size.large,\n        [`${prefixCls}-sm`]: size === Size.small,\n      },\n      className,\n    );\n\n    let checkable = restProps.treeCheckable;\n    if (checkable) {\n      checkable = <span className={`${prefixCls}-tree-checkbox-inner`} />;\n    }\n    return (\n      <RcTreeSelect\n        {...restProps}\n        dropdownClassName={classNames(dropdownClassName, `${prefixCls}-tree-dropdown`)}\n        prefixCls={prefixCls}\n        className={cls}\n        dropdownStyle={{ maxHeight: '100vh', overflow: 'auto', ...dropdownStyle }}\n        treeCheckable={checkable}\n        notFoundContent={notFoundContent || locale.notFoundContent}\n        ref={this.saveTreeSelect}\n      />\n    );\n  };\n\n  render() {\n    return (\n      <LocaleReceiver componentName=\"Select\" defaultLocale={{}}>\n        {this.renderTreeSelect}\n      </LocaleReceiver>\n    );\n  }\n}\n"]}