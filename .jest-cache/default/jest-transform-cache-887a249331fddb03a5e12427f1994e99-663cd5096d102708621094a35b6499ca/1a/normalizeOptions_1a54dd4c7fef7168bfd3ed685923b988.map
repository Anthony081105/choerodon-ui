{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/option/normalizeOptions.tsx"],"names":[],"mappings":";;;;;;;;;;;AAAA;;AACA;;AAGA;;AACA;;AAEA,SAAS,sBAAT,CACE,QADF,EAEE,IAFF,EAGE,MAHF,EAIE,SAJF,EAKE,UALF,EAME,aANF,EAOuB;AAAA,MAArB,MAAqB,uEAAF,EAAE;;AAErB,MAAI,QAAJ,EAAc;AACZ,oBAAS,OAAT,CAAiB,QAAjB,EAA2B,UAAA,KAAK,EAAG;AACjC,UAAI,2BAAe,KAAf,CAAJ,EAA2B;AAAA,YACjB,IADiB,GACR,KADQ,CACjB,IADiB;;AAEzB,YAAI,IAAI,KAAK,oBAAb,EAAuB;AACrB,cAAM,KAAK,GAAG,KAAK,CAAC,KAApB;AACA,UAAA,sBAAsB,CACpB,KAAK,CAAC,QADc,EAEpB,IAFoB,EAGpB,MAHoB,EAIpB,SAJoB,EAKpB,UALoB,EAMpB,aANoB,EAOpB,MAAM,CAAC,MAAP,CAAc,KAAK,CAAC,KAAN,IAAe,EAA7B,CAPoB,CAAtB;AASD,SAXD,MAWO,IAAI,IAAI,KAAK,kBAAb,EAAqB;AAAA;;AAAA,6BACY,KAAK,CAAC,KADlB;AAAA,cAClB,KADkB,gBAClB,KADkB;AAAA,cACX,QADW,gBACX,QADW;AAAA,cACD,QADC,gBACD,QADC;AAE1B,UAAA,IAAI,CAAC,IAAL,CACE,MAAM,CAAC,MAAP,CACE,UAAC,GAAD,EAAM,KAAN,EAAa,KAAb,EAAsB;AACpB,gBAAM,IAAI,mBAAY,KAAZ,CAAV;AACA,YAAA,GAAG,CAAC,IAAD,CAAH,GAAY,KAAZ;;AACA,gBAAI,CAAC,MAAM,CAAC,IAAP,CAAY,UAAA,KAAK;AAAA,qBAAI,KAAK,CAAC,IAAN,KAAe,IAAnB;AAAA,aAAjB,CAAL,EAAgD;AAC9C,cAAA,MAAM,CAAC,IAAP,CAAY;AACV,gBAAA,IAAI,EAAJ,IADU;AAEV,gBAAA,IAAI,EAAA;AAAA;AAFM;AAGV,gBAAA,KAAK,EAAE,MAAM,CAAC,MAAP,GAAgB;AAHb,eAAZ;AAKD;;AACD,mBAAO,GAAP;AACD,WAZH,yEAcK,SAdL,EAciB,QAdjB,oDAeK,UAfL,EAekB,KAAK,KAAK,SAAV,IAAuB,2BAAe,QAAf,CAAvB,GAAkD,QAAlD,GAA6D,KAf/E,oDAgBK,aAhBL,EAgBqB,QAhBrB,mBADF;AAqBD;AACF;AACF,KAvCD;AAwCD;AACF;;AAEa,SAAU,gBAAV,OAMb;AAAA,MALC,SAKD,QALC,SAKD;AAAA,MAJC,UAID,QAJC,UAID;AAAA,MAHC,aAGD,QAHC,aAGD;AAAA,MAFC,QAED,QAFC,QAED;AAAA,MADC,QACD,QADC,QACD;AACC,MAAM,IAAI,GAAa,EAAvB;AACA,MAAM,MAAM,GAAG,CACb;AACE,IAAA,IAAI,EAAE,SADR;AAEE,IAAA,IAAI,EAAA;AAAA;;AAFN,GADa,EAKb;AACE,IAAA,IAAI,EAAE;AADR,GALa,EAQb;AACE,IAAA,IAAI,EAAE,aADR;AAEE,IAAA,IAAI,EAAA;AAAA;;AAFN,GARa,CAAf;;AAcA,MAAI,QAAJ,EAAc;AACZ,IAAA,sBAAsB,CAAC,QAAD,EAAW,IAAX,EAAiB,MAAjB,EAAyB,SAAzB,EAAoC,UAApC,EAAgD,aAAhD,CAAtB;AACD;;AACD,SAAO,IAAI,mBAAJ,CAAY;AACjB,IAAA,IAAI,EAAJ,IADiB;AAEjB,IAAA,MAAM,EAAN,MAFiB;AAGjB,IAAA,MAAM,EAAE,KAHS;AAIjB,IAAA,SAAS,EAAE,QAAQ,GAAE;AAAA;AAAF,MAA8B;AAAA;AAJhC;AAKjB,IAAA,eAAe,EAAE;AALA,GAAZ,CAAP;AAOD","sourcesContent":["import { Children, isValidElement, ReactNode } from 'react';\nimport DataSet from '../data-set/DataSet';\nimport { DataSetSelection, FieldType } from '../data-set/enum';\nimport { FieldProps } from '../data-set/Field';\nimport OptGroup, { OptGroupProps } from './OptGroup';\nimport Option, { OptionProps } from './Option';\n\nfunction getOptionsFromChildren(\n  elements: ReactNode[],\n  data: object[],\n  fields: FieldProps[],\n  textField: string,\n  valueField: string,\n  disabledField: string,\n  groups: string[] = [],\n) {\n  if (elements) {\n    Children.forEach(elements, child => {\n      if (isValidElement(child)) {\n        const { type } = child;\n        if (type === OptGroup) {\n          const props = child.props as OptGroupProps & { children };\n          getOptionsFromChildren(\n            props.children,\n            data,\n            fields,\n            textField,\n            valueField,\n            disabledField,\n            groups.concat(props.label || ''),\n          );\n        } else if (type === Option) {\n          const { value, children, disabled } = child.props as OptionProps & { children };\n          data.push(\n            groups.reduce(\n              (obj, group, index) => {\n                const name = `group-${index}`;\n                obj[name] = group;\n                if (!fields.find(field => field.name === name)) {\n                  fields.push({\n                    name,\n                    type: FieldType.reactNode,\n                    group: groups.length - 1,\n                  });\n                }\n                return obj;\n              },\n              {\n                [textField]: children,\n                [valueField]: value === undefined && isValidElement(children) ? children : value,\n                [disabledField]: disabled,\n              },\n            ),\n          );\n        }\n      }\n    });\n  }\n}\n\nexport default function normalizeOptions({\n  textField,\n  valueField,\n  disabledField,\n  multiple,\n  children,\n}) {\n  const data: object[] = [];\n  const fields = [\n    {\n      name: textField,\n      type: FieldType.reactNode,\n    },\n    {\n      name: valueField,\n    },\n    {\n      name: disabledField,\n      type: FieldType.boolean,\n    },\n  ];\n\n  if (children) {\n    getOptionsFromChildren(children, data, fields, textField, valueField, disabledField);\n  }\n  return new DataSet({\n    data,\n    fields,\n    paging: false,\n    selection: multiple ? DataSetSelection.multiple : DataSetSelection.single,\n    autoLocateFirst: false,\n  });\n}\n"]}