80eeb13ba1fad517600d12a13b140185
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _ = _interopRequireDefault(require(".."));

var _dataSet = _interopRequireDefault(require("../../data-set"));

describe('Select-Box-pro', function () {
  beforeEach(function () {
    jest.useFakeTimers();
  });
  afterEach(function () {
    jest.useRealTimers();
  });
  var optionData = [{
    text: 'Jack',
    value: 'jack'
  }, {
    text: 'Huazhen',
    value: 'huazhen'
  }, {
    text: 'Lucy',
    value: 'lucy'
  }, {
    text: 'Niu',
    value: 'jiaqin'
  }, {
    text: 'Shao',
    value: 'shao'
  }];
  var data = [{
    name: 'huazhen'
  }];
  var optionDs = new _dataSet["default"]({
    data: optionData,
    selection: 'single'
  });
  var ds = new _dataSet["default"]({
    data: data,
    fields: [{
      name: 'name',
      textField: 'text',
      valueField: 'value',
      options: optionDs
    }]
  });
  it('dataset set SelectBox dataSet render Huazhen radio onchecked', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      dataSet: ds,
      name: "name"
    }));
    jest.runAllTimers();
    expect(wrapper.find('input').length).toBe(5);
  });
  it('dataset set SelectBox only has one checked', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      dataSet: ds,
      name: "name"
    }));
    jest.runAllTimers();
    expect(wrapper.find('input').at(1).prop('checked')).toBe(true);
  });
  it('dataset set SelectBox disabled test', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      disabled: true,
      dataSet: ds,
      name: "name"
    }));
    jest.runAllTimers();
    expect(wrapper.find('.c7n-pro-radio-disabled').length).toBe(5);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRlc3QuanMiXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwiamVzdCIsInVzZUZha2VUaW1lcnMiLCJhZnRlckVhY2giLCJ1c2VSZWFsVGltZXJzIiwib3B0aW9uRGF0YSIsInRleHQiLCJ2YWx1ZSIsImRhdGEiLCJuYW1lIiwib3B0aW9uRHMiLCJEYXRhU2V0Iiwic2VsZWN0aW9uIiwiZHMiLCJmaWVsZHMiLCJ0ZXh0RmllbGQiLCJ2YWx1ZUZpZWxkIiwib3B0aW9ucyIsIml0Iiwid3JhcHBlciIsInJ1bkFsbFRpbWVycyIsImV4cGVjdCIsImZpbmQiLCJsZW5ndGgiLCJ0b0JlIiwiYXQiLCJwcm9wIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUFBLFFBQVEsQ0FBQyxnQkFBRCxFQUFtQixZQUFNO0FBQy9CQyxFQUFBQSxVQUFVLENBQUMsWUFBTTtBQUNmQyxJQUFBQSxJQUFJLENBQUNDLGFBQUw7QUFDRCxHQUZTLENBQVY7QUFJQUMsRUFBQUEsU0FBUyxDQUFDLFlBQU07QUFDZEYsSUFBQUEsSUFBSSxDQUFDRyxhQUFMO0FBQ0QsR0FGUSxDQUFUO0FBR0EsTUFBTUMsVUFBVSxHQUFHLENBQ2pCO0FBQUVDLElBQUFBLElBQUksRUFBRSxNQUFSO0FBQWdCQyxJQUFBQSxLQUFLLEVBQUU7QUFBdkIsR0FEaUIsRUFFakI7QUFBRUQsSUFBQUEsSUFBSSxFQUFFLFNBQVI7QUFBbUJDLElBQUFBLEtBQUssRUFBRTtBQUExQixHQUZpQixFQUdqQjtBQUFFRCxJQUFBQSxJQUFJLEVBQUUsTUFBUjtBQUFnQkMsSUFBQUEsS0FBSyxFQUFFO0FBQXZCLEdBSGlCLEVBSWpCO0FBQUVELElBQUFBLElBQUksRUFBRSxLQUFSO0FBQWVDLElBQUFBLEtBQUssRUFBRTtBQUF0QixHQUppQixFQUtqQjtBQUFFRCxJQUFBQSxJQUFJLEVBQUUsTUFBUjtBQUFnQkMsSUFBQUEsS0FBSyxFQUFFO0FBQXZCLEdBTGlCLENBQW5CO0FBUUEsTUFBTUMsSUFBSSxHQUFHLENBQ1g7QUFDRUMsSUFBQUEsSUFBSSxFQUFFO0FBRFIsR0FEVyxDQUFiO0FBS0EsTUFBTUMsUUFBUSxHQUFHLElBQUlDLG1CQUFKLENBQVk7QUFDM0JILElBQUFBLElBQUksRUFBRUgsVUFEcUI7QUFFM0JPLElBQUFBLFNBQVMsRUFBRTtBQUZnQixHQUFaLENBQWpCO0FBSUEsTUFBTUMsRUFBRSxHQUFHLElBQUlGLG1CQUFKLENBQVk7QUFDckJILElBQUFBLElBQUksRUFBSkEsSUFEcUI7QUFFckJNLElBQUFBLE1BQU0sRUFBRSxDQUFDO0FBQUVMLE1BQUFBLElBQUksRUFBRSxNQUFSO0FBQWdCTSxNQUFBQSxTQUFTLEVBQUUsTUFBM0I7QUFBbUNDLE1BQUFBLFVBQVUsRUFBRSxPQUEvQztBQUF3REMsTUFBQUEsT0FBTyxFQUFFUDtBQUFqRSxLQUFEO0FBRmEsR0FBWixDQUFYO0FBSUFRLEVBQUFBLEVBQUUsQ0FBQyw4REFBRCxFQUFpRSxZQUFNO0FBQ3ZFLFFBQU1DLE9BQU8sR0FBRyxtQkFBTSxnQ0FBQyxZQUFEO0FBQVcsTUFBQSxPQUFPLEVBQUVOLEVBQXBCO0FBQXdCLE1BQUEsSUFBSSxFQUFDO0FBQTdCLE1BQU4sQ0FBaEI7QUFDQVosSUFBQUEsSUFBSSxDQUFDbUIsWUFBTDtBQUNBQyxJQUFBQSxNQUFNLENBQUNGLE9BQU8sQ0FBQ0csSUFBUixDQUFhLE9BQWIsRUFBc0JDLE1BQXZCLENBQU4sQ0FBcUNDLElBQXJDLENBQTBDLENBQTFDO0FBQ0QsR0FKQyxDQUFGO0FBS0FOLEVBQUFBLEVBQUUsQ0FBQyw0Q0FBRCxFQUErQyxZQUFNO0FBQ3JELFFBQU1DLE9BQU8sR0FBRyxtQkFBTSxnQ0FBQyxZQUFEO0FBQVcsTUFBQSxPQUFPLEVBQUVOLEVBQXBCO0FBQXdCLE1BQUEsSUFBSSxFQUFDO0FBQTdCLE1BQU4sQ0FBaEI7QUFDQVosSUFBQUEsSUFBSSxDQUFDbUIsWUFBTDtBQUNBQyxJQUFBQSxNQUFNLENBQ0pGLE9BQU8sQ0FDSkcsSUFESCxDQUNRLE9BRFIsRUFFR0csRUFGSCxDQUVNLENBRk4sRUFHR0MsSUFISCxDQUdRLFNBSFIsQ0FESSxDQUFOLENBS0VGLElBTEYsQ0FLTyxJQUxQO0FBTUQsR0FUQyxDQUFGO0FBVUFOLEVBQUFBLEVBQUUsQ0FBQyxxQ0FBRCxFQUF3QyxZQUFNO0FBQzlDLFFBQU1DLE9BQU8sR0FBRyxtQkFBTSxnQ0FBQyxZQUFEO0FBQVcsTUFBQSxRQUFRLE1BQW5CO0FBQW9CLE1BQUEsT0FBTyxFQUFFTixFQUE3QjtBQUFpQyxNQUFBLElBQUksRUFBQztBQUF0QyxNQUFOLENBQWhCO0FBQ0FaLElBQUFBLElBQUksQ0FBQ21CLFlBQUw7QUFDQUMsSUFBQUEsTUFBTSxDQUFDRixPQUFPLENBQUNHLElBQVIsQ0FBYSx5QkFBYixFQUF3Q0MsTUFBekMsQ0FBTixDQUF1REMsSUFBdkQsQ0FBNEQsQ0FBNUQ7QUFDRCxHQUpDLENBQUY7QUFLRCxDQWpETyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IG1vdW50IH0gZnJvbSAnZW56eW1lJztcbmltcG9ydCBTZWxlY3RCb3ggZnJvbSAnLi4nO1xuaW1wb3J0IERhdGFTZXQgZnJvbSAnLi4vLi4vZGF0YS1zZXQnO1xuXG5kZXNjcmliZSgnU2VsZWN0LUJveC1wcm8nLCAoKSA9PiB7XG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGplc3QudXNlRmFrZVRpbWVycygpO1xuICB9KTtcblxuICBhZnRlckVhY2goKCkgPT4ge1xuICAgIGplc3QudXNlUmVhbFRpbWVycygpO1xuICB9KTtcbiAgY29uc3Qgb3B0aW9uRGF0YSA9IFtcbiAgICB7IHRleHQ6ICdKYWNrJywgdmFsdWU6ICdqYWNrJyB9LFxuICAgIHsgdGV4dDogJ0h1YXpoZW4nLCB2YWx1ZTogJ2h1YXpoZW4nIH0sXG4gICAgeyB0ZXh0OiAnTHVjeScsIHZhbHVlOiAnbHVjeScgfSxcbiAgICB7IHRleHQ6ICdOaXUnLCB2YWx1ZTogJ2ppYXFpbicgfSxcbiAgICB7IHRleHQ6ICdTaGFvJywgdmFsdWU6ICdzaGFvJyB9LFxuICBdO1xuXG4gIGNvbnN0IGRhdGEgPSBbXG4gICAge1xuICAgICAgbmFtZTogJ2h1YXpoZW4nLFxuICAgIH0sXG4gIF07XG4gIGNvbnN0IG9wdGlvbkRzID0gbmV3IERhdGFTZXQoe1xuICAgIGRhdGE6IG9wdGlvbkRhdGEsXG4gICAgc2VsZWN0aW9uOiAnc2luZ2xlJyxcbiAgfSk7XG4gIGNvbnN0IGRzID0gbmV3IERhdGFTZXQoe1xuICAgIGRhdGEsXG4gICAgZmllbGRzOiBbeyBuYW1lOiAnbmFtZScsIHRleHRGaWVsZDogJ3RleHQnLCB2YWx1ZUZpZWxkOiAndmFsdWUnLCBvcHRpb25zOiBvcHRpb25EcyB9XSxcbiAgfSk7XG4gIGl0KCdkYXRhc2V0IHNldCBTZWxlY3RCb3ggZGF0YVNldCByZW5kZXIgSHVhemhlbiByYWRpbyBvbmNoZWNrZWQnLCAoKSA9PiB7XG4gICAgY29uc3Qgd3JhcHBlciA9IG1vdW50KDxTZWxlY3RCb3ggZGF0YVNldD17ZHN9IG5hbWU9XCJuYW1lXCIgLz4pO1xuICAgIGplc3QucnVuQWxsVGltZXJzKCk7XG4gICAgZXhwZWN0KHdyYXBwZXIuZmluZCgnaW5wdXQnKS5sZW5ndGgpLnRvQmUoNSk7XG4gIH0pO1xuICBpdCgnZGF0YXNldCBzZXQgU2VsZWN0Qm94IG9ubHkgaGFzIG9uZSBjaGVja2VkJywgKCkgPT4ge1xuICAgIGNvbnN0IHdyYXBwZXIgPSBtb3VudCg8U2VsZWN0Qm94IGRhdGFTZXQ9e2RzfSBuYW1lPVwibmFtZVwiIC8+KTtcbiAgICBqZXN0LnJ1bkFsbFRpbWVycygpO1xuICAgIGV4cGVjdChcbiAgICAgIHdyYXBwZXJcbiAgICAgICAgLmZpbmQoJ2lucHV0JylcbiAgICAgICAgLmF0KDEpXG4gICAgICAgIC5wcm9wKCdjaGVja2VkJyksXG4gICAgKS50b0JlKHRydWUpO1xuICB9KTtcbiAgaXQoJ2RhdGFzZXQgc2V0IFNlbGVjdEJveCBkaXNhYmxlZCB0ZXN0JywgKCkgPT4ge1xuICAgIGNvbnN0IHdyYXBwZXIgPSBtb3VudCg8U2VsZWN0Qm94IGRpc2FibGVkIGRhdGFTZXQ9e2RzfSBuYW1lPVwibmFtZVwiIC8+KTtcbiAgICBqZXN0LnJ1bkFsbFRpbWVycygpO1xuICAgIGV4cGVjdCh3cmFwcGVyLmZpbmQoJy5jN24tcHJvLXJhZGlvLWRpc2FibGVkJykubGVuZ3RoKS50b0JlKDUpO1xuICB9KTtcbn0pO1xuIl19