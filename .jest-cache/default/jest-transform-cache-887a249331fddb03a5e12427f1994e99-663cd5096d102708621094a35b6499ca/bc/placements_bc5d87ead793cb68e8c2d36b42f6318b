557fd980302960e6954b1aca61f9e100
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getOverflowOptions = getOverflowOptions;
exports["default"] = getPlacements;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _placements = _interopRequireDefault(require("../rc-components/tooltip/placements"));

var autoAdjustOverflowEnabled = {
  adjustX: 1,
  adjustY: 1
};
var autoAdjustOverflowDisabled = {
  adjustX: 0,
  adjustY: 0
};
var targetOffset = [0, 0];

function getOverflowOptions(autoAdjustOverflow) {
  if (typeof autoAdjustOverflow === 'boolean') {
    return autoAdjustOverflow ? autoAdjustOverflowEnabled : autoAdjustOverflowDisabled;
  }

  return (0, _objectSpread2["default"])({}, autoAdjustOverflowDisabled, {}, autoAdjustOverflow);
}

function getPlacements() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _config$arrowWidth = config.arrowWidth,
      arrowWidth = _config$arrowWidth === void 0 ? 5 : _config$arrowWidth,
      _config$horizontalArr = config.horizontalArrowShift,
      horizontalArrowShift = _config$horizontalArr === void 0 ? 16 : _config$horizontalArr,
      _config$verticalArrow = config.verticalArrowShift,
      verticalArrowShift = _config$verticalArrow === void 0 ? 12 : _config$verticalArrow,
      _config$autoAdjustOve = config.autoAdjustOverflow,
      autoAdjustOverflow = _config$autoAdjustOve === void 0 ? true : _config$autoAdjustOve;
  var placementMap = {
    left: {
      points: ['cr', 'cl'],
      offset: [-4, 0]
    },
    right: {
      points: ['cl', 'cr'],
      offset: [4, 0]
    },
    top: {
      points: ['bc', 'tc'],
      offset: [0, -4]
    },
    bottom: {
      points: ['tc', 'bc'],
      offset: [0, 4]
    },
    topLeft: {
      points: ['bl', 'tc'],
      offset: [-(horizontalArrowShift + arrowWidth), -4]
    },
    leftTop: {
      points: ['tr', 'cl'],
      offset: [-4, -(verticalArrowShift + arrowWidth)]
    },
    topRight: {
      points: ['br', 'tc'],
      offset: [horizontalArrowShift + arrowWidth, -4]
    },
    rightTop: {
      points: ['tl', 'cr'],
      offset: [4, -(verticalArrowShift + arrowWidth)]
    },
    bottomRight: {
      points: ['tr', 'bc'],
      offset: [horizontalArrowShift + arrowWidth, 4]
    },
    rightBottom: {
      points: ['bl', 'cr'],
      offset: [4, verticalArrowShift + arrowWidth]
    },
    bottomLeft: {
      points: ['tl', 'bc'],
      offset: [-(horizontalArrowShift + arrowWidth), 4]
    },
    leftBottom: {
      points: ['br', 'cl'],
      offset: [-4, verticalArrowShift + arrowWidth]
    }
  };
  Object.keys(placementMap).forEach(function (key) {
    placementMap[key] = config.arrowPointAtCenter ? (0, _objectSpread2["default"])({}, placementMap[key], {
      overflow: getOverflowOptions(autoAdjustOverflow),
      targetOffset: targetOffset
    }) : (0, _objectSpread2["default"])({}, _placements["default"][key], {
      overflow: getOverflowOptions(autoAdjustOverflow)
    });
  });
  return placementMap;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9odWlodWF3ay9Eb2N1bWVudHMvb3B0L2Nob2Vyb2Rvbi11aS9jb21wb25lbnRzL3Rvb2x0aXAvcGxhY2VtZW50cy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7O0FBRUEsSUFBTSx5QkFBeUIsR0FBRztBQUNoQyxFQUFBLE9BQU8sRUFBRSxDQUR1QjtBQUVoQyxFQUFBLE9BQU8sRUFBRTtBQUZ1QixDQUFsQztBQUtBLElBQU0sMEJBQTBCLEdBQUc7QUFDakMsRUFBQSxPQUFPLEVBQUUsQ0FEd0I7QUFFakMsRUFBQSxPQUFPLEVBQUU7QUFGd0IsQ0FBbkM7QUFLQSxJQUFNLFlBQVksR0FBRyxDQUFDLENBQUQsRUFBSSxDQUFKLENBQXJCOztBQWVNLFNBQVUsa0JBQVYsQ0FBNkIsa0JBQTdCLEVBQW9EO0FBQ3hELE1BQUksT0FBTyxrQkFBUCxLQUE4QixTQUFsQyxFQUE2QztBQUMzQyxXQUFPLGtCQUFrQixHQUFHLHlCQUFILEdBQStCLDBCQUF4RDtBQUNEOztBQUNELDRDQUNLLDBCQURMLE1BRUssa0JBRkw7QUFJRDs7QUFFYSxTQUFVLGFBQVYsR0FBcUQ7QUFBQSxNQUE3QixNQUE2Qix1RUFBRixFQUFFO0FBQUEsMkJBQ3lDLE1BRHpDLENBQ3pELFVBRHlEO0FBQUEsTUFDekQsVUFEeUQsbUNBQzVDLENBRDRDO0FBQUEsOEJBQ3lDLE1BRHpDLENBQ3pDLG9CQUR5QztBQUFBLE1BQ3pDLG9CQUR5QyxzQ0FDbEIsRUFEa0I7QUFBQSw4QkFDeUMsTUFEekMsQ0FDZCxrQkFEYztBQUFBLE1BQ2Qsa0JBRGMsc0NBQ08sRUFEUDtBQUFBLDhCQUN5QyxNQUR6QyxDQUNXLGtCQURYO0FBQUEsTUFDVyxrQkFEWCxzQ0FDZ0MsSUFEaEM7QUFFakUsTUFBTSxZQUFZLEdBQVE7QUFDeEIsSUFBQSxJQUFJLEVBQUU7QUFDSixNQUFBLE1BQU0sRUFBRSxDQUFDLElBQUQsRUFBTyxJQUFQLENBREo7QUFFSixNQUFBLE1BQU0s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QU5WLE1BQXBCO0FBUUQsR0FURDtBQVVBLFNBQU8sWUFBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHJjUGxhY2VtZW50cyBmcm9tICcuLi9yYy1jb21wb25lbnRzL3Rvb2x0aXAvcGxhY2VtZW50cyc7XG5cbmNvbnN0IGF1dG9BZGp1c3RPdmVyZmxvd0VuYWJsZWQgPSB7XG4gIGFkanVzdFg6IDEsXG4gIGFkanVzdFk6IDEsXG59O1xuXG5jb25zdCBhdXRvQWRqdXN0T3ZlcmZsb3dEaXNhYmxlZCA9IHtcbiAgYWRqdXN0WDogMCxcbiAgYWRqdXN0WTogMCxcbn07XG5cbmNvbnN0IHRhcmdldE9mZnNldCA9IFswLCAwXTtcblxuZXhwb3J0IGludGVyZmFjZSBBZGp1c3RPdmVyZmxvdyB7XG4gIGFkanVzdFg/OiAwIHwgMTtcbiAgYWRqdXN0WT86IDAgfCAxO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBsYWNlbWVudHNDb25maWcge1xuICBhcnJvd1dpZHRoPzogbnVtYmVyO1xuICBob3Jpem9udGFsQXJyb3dTaGlmdD86IG51bWJlcjtcbiAgdmVydGljYWxBcnJvd1NoaWZ0PzogbnVtYmVyO1xuICBhcnJvd1BvaW50QXRDZW50ZXI/OiBib29sZWFuO1xuICBhdXRvQWRqdXN0T3ZlcmZsb3c/OiBhbnk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRPdmVyZmxvd09wdGlvbnMoYXV0b0FkanVzdE92ZXJmbG93OiBhbnkpIHtcbiAgaWYgKHR5cGVvZiBhdXRvQWRqdXN0T3ZlcmZsb3cgPT09ICdib29sZWFuJykge1xuICAgIHJldHVybiBhdXRvQWRqdXN0T3ZlcmZsb3cgPyBhdXRvQWRqdXN0T3ZlcmZsb3dFbmFibGVkIDogYXV0b0FkanVzdE92ZXJmbG93RGlzYWJsZWQ7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICAuLi5hdXRvQWRqdXN0T3ZlcmZsb3dEaXNhYmxlZCxcbiAgICAuLi5hdXRvQWRqdXN0T3ZlcmZsb3csXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFBsYWNlbWVudHMoY29uZmlnOiBQbGFjZW1lbnRzQ29uZmlnID0ge30pIHtcbiAgY29uc3QgeyBhcnJvd1dpZHRoID0gNSwgaG9yaXpvbnRhbEFycm93U2hpZnQgPSAxNiwgdmVydGljYWxBcnJvd1NoaWZ0ID0gMTIsIGF1dG9BZGp1c3RPdmVyZmxvdyA9IHRydWUgfSA9IGNvbmZpZztcbiAgY29uc3QgcGxhY2VtZW50TWFwOiBhbnkgPSB7XG4gICAgbGVmdDoge1xuICAgICAgcG9pbnRzOiBbJ2NyJywgJ2NsJ10sXG4gICAgICBvZmZzZXQ6IFstNCwgMF0sXG4gICAgfSxcbiAgICByaWdodDoge1xuICAgICAgcG9pbnRzOiBbJ2NsJywgJ2NyJ10sXG4gICAgICBvZmZzZXQ6IFs0LCAwXSxcbiAgICB9LFxuICAgIHRvcDoge1xuICAgICAgcG9pbnRzOiBbJ2JjJywgJ3RjJ10sXG4gICAgICBvZmZzZXQ6IFswLCAtNF0sXG4gICAgfSxcbiAgICBib3R0b206IHtcbiAgICAgIHBvaW50czogWyd0YycsICdiYyddLFxuICAgICAgb2Zmc2V0OiBbMCwgNF0sXG4gICAgfSxcbiAgICB0b3BMZWZ0OiB7XG4gICAgICBwb2ludHM6IFsnYmwnLCAndGMnXSxcbiAgICAgIG9mZnNldDogWy0oaG9yaXpvbnRhbEFycm93U2hpZnQgKyBhcnJvd1dpZHRoKSwgLTRdLFxuICAgIH0sXG4gICAgbGVmdFRvcDoge1xuICAgICAgcG9pbnRzOiBbJ3RyJywgJ2NsJ10sXG4gICAgICBvZmZzZXQ6IFstNCwgLSh2ZXJ0aWNhbEFycm93U2hpZnQgKyBhcnJvd1dpZHRoKV0sXG4gICAgfSxcbiAgICB0b3BSaWdodDoge1xuICAgICAgcG9pbnRzOiBbJ2JyJywgJ3RjJ10sXG4gICAgICBvZmZzZXQ6IFtob3Jpem9udGFsQXJyb3dTaGlmdCArIGFycm93V2lkdGgsIC00XSxcbiAgICB9LFxuICAgIHJpZ2h0VG9wOiB7XG4gICAgICBwb2ludHM6IFsndGwnLCAnY3InXSxcbiAgICAgIG9mZnNldDogWzQsIC0odmVydGljYWxBcnJvd1NoaWZ0ICsgYXJyb3dXaWR0aCldLFxuICAgIH0sXG4gICAgYm90dG9tUmlnaHQ6IHtcbiAgICAgIHBvaW50czogWyd0cicsICdiYyddLFxuICAgICAgb2Zmc2V0OiBbaG9yaXpvbnRhbEFycm93U2hpZnQgKyBhcnJvd1dpZHRoLCA0XSxcbiAgICB9LFxuICAgIHJpZ2h0Qm90dG9tOiB7XG4gICAgICBwb2ludHM6IFsnYmwnLCAnY3InXSxcbiAgICAgIG9mZnNldDogWzQsIHZlcnRpY2FsQXJyb3dTaGlmdCArIGFycm93V2lkdGhdLFxuICAgIH0sXG4gICAgYm90dG9tTGVmdDoge1xuICAgICAgcG9pbnRzOiBbJ3RsJywgJ2JjJ10sXG4gICAgICBvZmZzZXQ6IFstKGhvcml6b250YWxBcnJvd1NoaWZ0ICsgYXJyb3dXaWR0aCksIDRdLFxuICAgIH0sXG4gICAgbGVmdEJvdHRvbToge1xuICAgICAgcG9pbnRzOiBbJ2JyJywgJ2NsJ10sXG4gICAgICBvZmZzZXQ6IFstNCwgdmVydGljYWxBcnJvd1NoaWZ0ICsgYXJyb3dXaWR0aF0sXG4gICAgfSxcbiAgfTtcbiAgT2JqZWN0LmtleXMocGxhY2VtZW50TWFwKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgcGxhY2VtZW50TWFwW2tleV0gPSBjb25maWcuYXJyb3dQb2ludEF0Q2VudGVyID8ge1xuICAgICAgLi4ucGxhY2VtZW50TWFwW2tleV0sXG4gICAgICBvdmVyZmxvdzogZ2V0T3ZlcmZsb3dPcHRpb25zKGF1dG9BZGp1c3RPdmVyZmxvdyksXG4gICAgICB0YXJnZXRPZmZzZXQsXG4gICAgfSA6IHtcbiAgICAgIC4uLnJjUGxhY2VtZW50c1trZXldLFxuICAgICAgb3ZlcmZsb3c6IGdldE92ZXJmbG93T3B0aW9ucyhhdXRvQWRqdXN0T3ZlcmZsb3cpLFxuICAgIH07XG4gIH0pO1xuICByZXR1cm4gcGxhY2VtZW50TWFwO1xufVxuIl19