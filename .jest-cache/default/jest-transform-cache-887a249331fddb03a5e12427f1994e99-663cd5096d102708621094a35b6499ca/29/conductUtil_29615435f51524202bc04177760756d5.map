{"version":3,"sources":["rc-components/tree/utils/conductUtil.js"],"names":["filteredKeys","halfCheckedKeys","checkedKeys","disabled","disableCheckbox","checkable","node","level","entities","levelEntities","key","children","entity","isCheckDisabled","childEntity","visitedKeys","parent","allChecked","partialChecked","checked","Array","removeFromCheckedKeys","warningMissKeys","keys","hasEntity","keyEntities","maxLevel","Object","levelSet","Math","result","fillConductCheck","cleanConductCheck"],"mappings":"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","sourcesContent":["// @ts-nocheck\n/* eslint-disable */\nimport warning from 'rc-util/lib/warning';\nfunction removeFromCheckedKeys(halfCheckedKeys, checkedKeys) {\n    const filteredKeys = new Set();\n    halfCheckedKeys.forEach(key => {\n        if (!checkedKeys.has(key)) {\n            filteredKeys.add(key);\n        }\n    });\n    return filteredKeys;\n}\nexport function isCheckDisabled(node) {\n    const { disabled, disableCheckbox, checkable } = (node || {});\n    return !!(disabled || disableCheckbox) || checkable === false;\n}\n// Fill miss keys\nfunction fillConductCheck(keys, levelEntities, maxLevel) {\n    const checkedKeys = new Set(keys);\n    const halfCheckedKeys = new Set();\n    // Add checked keys top to bottom\n    for (let level = 0; level <= maxLevel; level += 1) {\n        const entities = levelEntities.get(level) || new Set();\n        entities.forEach(entity => {\n            const { key, node, children = [] } = entity;\n            if (checkedKeys.has(key) && !isCheckDisabled(node)) {\n                children\n                    .filter(childEntity => !isCheckDisabled(childEntity.node))\n                    .forEach(childEntity => {\n                    checkedKeys.add(childEntity.key);\n                });\n            }\n        });\n    }\n    // Add checked keys from bottom to top\n    const visitedKeys = new Set();\n    for (let level = maxLevel; level >= 0; level -= 1) {\n        const entities = levelEntities.get(level) || new Set();\n        entities.forEach(entity => {\n            const { parent, node } = entity;\n            // Skip if no need to check\n            if (isCheckDisabled(node) || !entity.parent || visitedKeys.has(entity.parent.key)) {\n                return;\n            }\n            // Skip if parent is disabled\n            if (isCheckDisabled(entity.parent.node)) {\n                visitedKeys.add(parent.key);\n                return;\n            }\n            let allChecked = true;\n            let partialChecked = false;\n            (parent.children || [])\n                .filter(childEntity => !isCheckDisabled(childEntity.node))\n                .forEach(({ key }) => {\n                const checked = checkedKeys.has(key);\n                if (allChecked && !checked) {\n                    allChecked = false;\n                }\n                if (!partialChecked && (checked || halfCheckedKeys.has(key))) {\n                    partialChecked = true;\n                }\n            });\n            if (allChecked) {\n                checkedKeys.add(parent.key);\n            }\n            if (partialChecked) {\n                halfCheckedKeys.add(parent.key);\n            }\n            visitedKeys.add(parent.key);\n        });\n    }\n    return {\n        checkedKeys: Array.from(checkedKeys),\n        halfCheckedKeys: Array.from(removeFromCheckedKeys(halfCheckedKeys, checkedKeys)),\n    };\n}\n// Remove useless key\nfunction cleanConductCheck(keys, halfKeys, levelEntities, maxLevel) {\n    const checkedKeys = new Set(keys);\n    let halfCheckedKeys = new Set(halfKeys);\n    // Remove checked keys from top to bottom\n    for (let level = 0; level <= maxLevel; level += 1) {\n        const entities = levelEntities.get(level) || new Set();\n        entities.forEach(entity => {\n            const { key, node, children = [] } = entity;\n            if (!checkedKeys.has(key) && !halfCheckedKeys.has(key) && !isCheckDisabled(node)) {\n                children\n                    .filter(childEntity => !isCheckDisabled(childEntity.node))\n                    .forEach(childEntity => {\n                    checkedKeys.delete(childEntity.key);\n                });\n            }\n        });\n    }\n    // Remove checked keys form bottom to top\n    halfCheckedKeys = new Set();\n    const visitedKeys = new Set();\n    for (let level = maxLevel; level >= 0; level -= 1) {\n        const entities = levelEntities.get(level) || new Set();\n        entities.forEach(entity => {\n            const { parent, node } = entity;\n            // Skip if no need to check\n            if (isCheckDisabled(node) || !entity.parent || visitedKeys.has(entity.parent.key)) {\n                return;\n            }\n            // Skip if parent is disabled\n            if (isCheckDisabled(entity.parent.node)) {\n                visitedKeys.add(parent.key);\n                return;\n            }\n            let allChecked = true;\n            let partialChecked = false;\n            (parent.children || [])\n                .filter(childEntity => !isCheckDisabled(childEntity.node))\n                .forEach(({ key }) => {\n                const checked = checkedKeys.has(key);\n                if (allChecked && !checked) {\n                    allChecked = false;\n                }\n                if (!partialChecked && (checked || halfCheckedKeys.has(key))) {\n                    partialChecked = true;\n                }\n            });\n            if (!allChecked) {\n                checkedKeys.delete(parent.key);\n            }\n            if (partialChecked) {\n                halfCheckedKeys.add(parent.key);\n            }\n            visitedKeys.add(parent.key);\n        });\n    }\n    return {\n        checkedKeys: Array.from(checkedKeys),\n        halfCheckedKeys: Array.from(removeFromCheckedKeys(halfCheckedKeys, checkedKeys)),\n    };\n}\n/**\n * Conduct with keys.\n * @param keyList current key list\n * @param keyEntities key - dataEntity map\n * @param mode `fill` to fill missing key, `clean` to remove useless key\n */\nexport function conductCheck(keyList, checked, keyEntities) {\n    const warningMissKeys = [];\n    // We only handle exist keys\n    const keys = new Set(keyList.filter(key => {\n        const hasEntity = !!keyEntities[key];\n        if (!hasEntity) {\n            warningMissKeys.push(key);\n        }\n        return hasEntity;\n    }));\n    const levelEntities = new Map();\n    let maxLevel = 0;\n    // Convert entities by level for calculation\n    Object.keys(keyEntities).forEach(key => {\n        const entity = keyEntities[key];\n        const { level } = entity;\n        let levelSet = levelEntities.get(level);\n        if (!levelSet) {\n            levelSet = new Set();\n            levelEntities.set(level, levelSet);\n        }\n        levelSet.add(entity);\n        maxLevel = Math.max(maxLevel, level);\n    });\n    warning(!warningMissKeys.length, `Tree missing follow keys: ${warningMissKeys\n        .slice(0, 100)\n        .map(key => `'${key}'`)\n        .join(', ')}`);\n    let result;\n    if (checked === true) {\n        result = fillConductCheck(keys, levelEntities, maxLevel);\n    }\n    else {\n        result = cleanConductCheck(keys, checked.halfCheckedKeys, levelEntities, maxLevel);\n    }\n    return result;\n}\n"]}