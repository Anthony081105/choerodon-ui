0297d7b4a1ac13a48c3631ef532fa8d3
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _configure = require("choerodon-ui/lib/configure");

var _Trigger = _interopRequireDefault(require("../trigger/Trigger"));

var _placements = _interopRequireDefault(require("./placements"));

var splitObject = function splitObject(obj, keys) {
  var picked = {};
  var ommitted = (0, _objectSpread2["default"])({}, obj);
  keys.forEach(function (key) {
    if (obj && key in obj) {
      picked[key] = obj[key];
      delete ommitted[key];
    }
  });
  return {
    picked: picked,
    ommitted: ommitted
  };
};
/**
 * Fix the tooltip won't hide when child element is button
 * @param element ReactElement
 */


function getDisabledCompatobleChildren(element) {
  var elementType = element.type;

  if ((elementType.__Pro_BUTTON === true || elementType.__Pro_SWITCH === true || elementType.__Pro_CHECKBOX === true || element.type.__ANT_BUTTON || element.type === 'button') && element.props.disabled) {
    var _splitObject = splitObject(element.props.style, ['position', 'left', 'right', 'top', 'bottom', 'float', 'display', 'zIndex']),
        picked = _splitObject.picked,
        ommitted = _splitObject.ommitted;

    var spanStyle = (0, _objectSpread2["default"])({
      display: 'inline-block'
    }, picked, {
      cursor: 'not-allowed',
      width: element.props.block ? '100%' : null
    });
    var buttonStyle = (0, _objectSpread2["default"])({}, ommitted, {
      pointerEvents: 'none'
    });

    var child = _react["default"].cloneElement(element, {
      style: buttonStyle,
      className: null
    });

    return _react["default"].createElement("span", {
      style: spanStyle,
      className: element.props.classNames
    }, child);
  }

  return element;
}

var Tooltip =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(Tooltip, _Component);

  function Tooltip() {
    (0, _classCallCheck2["default"])(this, Tooltip);
    return (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(Tooltip).apply(this, arguments));
  }

  (0, _createClass2["default"])(Tooltip, [{
    key: "render",
    value: function render() {
      var prefixCls = this.prefixCls,
          popupContent = this.popupContent,
          _this$props = this.props,
          children = _this$props.children,
          placement = _this$props.placement,
          onHiddenChange = _this$props.onHiddenChange,
          trigger = _this$props.trigger,
          defaultHidden = _this$props.defaultHidden,
          hidden = _this$props.hidden,
          restProps = (0, _objectWithoutProperties2["default"])(_this$props, ["children", "placement", "onHiddenChange", "trigger", "defaultHidden", "hidden"]);

      var child = _react.Children.map(children, function (node) {
        node = getDisabledCompatobleChildren((0, _react.isValidElement)(node) ? node : _react["default"].createElement("span", {
          key: "text-".concat(node)
        }, node));
        return node;
      });

      var extraProps = (0, _objectSpread2["default"])({}, restProps);

      if ('hidden' in this.props) {
        extraProps.popupHidden = hidden;
      }

      return _react["default"].createElement(_Trigger["default"], (0, _extends2["default"])({
        prefixCls: prefixCls,
        action: trigger,
        builtinPlacements: this.placements,
        popupPlacement: placement,
        popupContent: popupContent,
        onPopupHiddenChange: onHiddenChange,
        defaultPopupHidden: defaultHidden
      }, extraProps), child);
    }
  }, {
    key: "prefixCls",
    get: function get() {
      var _this$props2 = this.props,
          suffixCls = _this$props2.suffixCls,
          prefixCls = _this$props2.prefixCls;
      return (0, _configure.getProPrefixCls)(suffixCls, prefixCls);
    }
  }, {
    key: "popupContent",
    get: function get() {
      var title = this.props.title;

      if (!title) {
        return null;
      }

      var prefixCls = this.prefixCls,
          _this$props3 = this.props,
          overlay = _this$props3.overlay,
          theme = _this$props3.theme;
      var content = '';

      if (typeof overlay === 'function') {
        content = overlay();
      } else if (overlay) {
        content = overlay;
      } else {
        content = title || '';
      }

      var arrowCls = "".concat(prefixCls, "-popup-arrow");
      var contentCls = "".concat(prefixCls, "-popup-inner");
      return _react["default"].createElement("div", null, _react["default"].createElement("div", {
        className: "".concat(arrowCls, " ").concat(arrowCls, "-").concat(theme),
        key: "arrow"
      }), _react["default"].createElement("div", {
        className: "".concat(contentCls, " ").concat(contentCls, "-").concat(theme),
        key: "content"
      }, content));
    }
  }, {
    key: "placements",
    get: function get() {
      var _this$props4 = this.props,
          builtinPlacements = _this$props4.builtinPlacements,
          arrowPointAtCenter = _this$props4.arrowPointAtCenter,
          autoAdjustOverflow = _this$props4.autoAdjustOverflow;
      return builtinPlacements || (0, _placements["default"])({
        arrowPointAtCenter: arrowPointAtCenter,
        verticalArrowShift: 8,
        autoAdjustOverflow: autoAdjustOverflow
      });
    }
  }]);
  return Tooltip;
}(_react.Component);

exports["default"] = Tooltip;
Tooltip.displayName = 'Tooltip';
Tooltip.propTypes = {
  title: _propTypes["default"].any,
  arrowPointAtCenter: _propTypes["default"].bool,
  autoAdjustOverflow: _propTypes["default"].bool,
  defaultHidden: _propTypes["default"].bool,
  mouseEnterDelay: _propTypes["default"].number,
  mouseLeaveDelay: _propTypes["default"].number,
  placement: _propTypes["default"].oneOf(['top', 'topLeft', 'topRight', 'bottom', 'bottomLeft', 'bottomRight', 'left', 'leftTop', 'leftBottom', 'right', 'rightTop', 'rightBottom']),
  trigger: _propTypes["default"].arrayOf(_propTypes["default"].oneOf(["click"
  /* click */
  , "hover"
  /* hover */
  , "contextMenu"
  /* contextMenu */
  , "focus"
  /* focus */
  ])),
  hidden: _propTypes["default"].bool,
  onHiddenChange: _propTypes["default"].func,
  suffixCls: _propTypes["default"].string,
  transitionName: _propTypes["default"].string,
  theme: _propTypes["default"].oneOf(['light', 'dark'])
};
Tooltip.defaultProps = {
  suffixCls: 'tooltip',
  placement: 'bottom',
  transitionName: 'zoom-big-fast',
  mouseEnterDelay: 100,
  mouseLeaveDelay: 100,
  arrowPointAtCenter: false,
  autoAdjustOverflow: true,
  theme: 'dark',
  defaultHidden: true,
  trigger: ["hover"
  /* hover */
  ]
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,