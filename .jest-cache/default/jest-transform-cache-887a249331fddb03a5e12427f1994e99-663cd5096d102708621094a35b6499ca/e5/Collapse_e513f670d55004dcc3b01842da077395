f3dc379e2de6a8f58230ee0149cb0d0d
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _Panel = _interopRequireDefault(require("./Panel"));

var _openAnimationFactory = _interopRequireDefault(require("./openAnimationFactory"));

function toArray(activeKey) {
  var currentActiveKey = activeKey;

  if (!Array.isArray(currentActiveKey)) {
    currentActiveKey = currentActiveKey ? [currentActiveKey] : [];
  }

  return currentActiveKey;
}

var Collapse =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(Collapse, _Component);

  function Collapse(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, Collapse);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(Collapse).call(this, props));
    var _this$props = _this.props,
        activeKey = _this$props.activeKey,
        defaultActiveKey = _this$props.defaultActiveKey;
    var currentActiveKey = defaultActiveKey;

    if ('activeKey' in _this.props) {
      currentActiveKey = activeKey;
    }

    _this.state = {
      openAnimation: _this.props.openAnimation || (0, _openAnimationFactory["default"])(_this.props.prefixCls),
      activeKey: toArray(currentActiveKey)
    };
    return _this;
  }

  (0, _createClass2["default"])(Collapse, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if ('activeKey' in nextProps) {
        this.setState({
          activeKey: toArray(nextProps.activeKey)
        });
      }

      if ('openAnimation' in nextProps) {
        this.setState({
          openAnimation: nextProps.openAnimation
        });
      }
    }
  }, {
    key: "onClickItem",
    value: function onClickItem(key) {
      var activeKey = this.state.activeKey;

      if (this.props.accordion) {
        activeKey = activeKey[0] === key ? [] : [key];
      } else {
        activeKey = (0, _toConsumableArray2["default"])(activeKey);
        var index = activeKey.indexOf(key);
        var isActive = index > -1;

        if (isActive) {
          // remove active state
          activeKey.splice(index, 1);
        } else {
          activeKey.push(key);
        }
      }

      this.setActiveKey(activeKey);
    }
  }, {
    key: "getItems",
    value: function getItems() {
      var _this2 = this;

      var activeKey = this.state.activeKey;
      var _this$props2 = this.props,
          prefixCls = _this$props2.prefixCls,
          accordion = _this$props2.accordion,
          destroyInactivePanel = _this$props2.destroyInactivePanel;
      var newChildren = [];

      _react.Children.forEach(this.props.children, function (child, index) {
        if (!child) return; // If there is no key provide, use the panel order as default key

        var key = child.key || String(index);
        var _child$props = child.props,
            header = _child$props.header,
            headerClass = _child$props.headerClass,
            disabled = _child$props.disabled;
        var isActive = false;

        if (accordion) {
          isActive = activeKey[0] === key;
        } else {
          isActive = activeKey.indexOf(key) > -1;
        }

        var props = {
          key: key,
          header: header,
          headerClass: headerClass,
          isActive: isActive,
          prefixCls: prefixCls,
          destroyInactivePanel: destroyInactivePanel,
          openAnimation: _this2.state.openAnimation,
          children: child.props.children,
          onItemClick: disabled ? null : function () {
            return _this2.onClickItem(key);
          }
        };
        newChildren.push((0, _react.cloneElement)(child, props));
      });

      return newChildren;
    }
  }, {
    key: "setActiveKey",
    value: function setActiveKey(activeKey) {
      if (!('activeKey' in this.props)) {
        this.setState({
          activeKey: activeKey
        });
      }

      this.props.onChange(this.props.accordion ? activeKey[0] : activeKey);
    }
  }, {
    key: "render",
    value: function render() {
      var _classNames;

      var _this$props3 = this.props,
          prefixCls = _this$props3.prefixCls,
          className = _this$props3.className,
          style = _this$props3.style;
      var collapseClassName = (0, _classnames["default"])((_classNames = {}, (0, _defineProperty2["default"])(_classNames, prefixCls, true), (0, _defineProperty2["default"])(_classNames, className, !!className), _classNames));
      return _react["default"].createElement("div", {
        className: collapseClassName,
        style: style
      }, this.getItems());
    }
  }]);
  return Collapse;
}(_react.Component);

exports["default"] = Collapse;
(0, _defineProperty2["default"])(Collapse, "propTypes", {
  children: _propTypes["default"].any,
  prefixCls: _propTypes["default"].string,
  activeKey: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].arrayOf(_propTypes["default"].string)]),
  defaultActiveKey: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].arrayOf(_propTypes["default"].string)]),
  openAnimation: _propTypes["default"].object,
  onChange: _propTypes["default"].func,
  accordion: _propTypes["default"].bool,
  className: _propTypes["default"].string,
  style: _propTypes["default"].object,
  destroyInactivePanel: _propTypes["default"].bool
});
(0, _defineProperty2["default"])(Collapse, "defaultProps", {
  prefixCls: 'rc-collapse',
  onChange: function onChange() {},
  accordion: false,
  destroyInactivePanel: false
});
(0, _defineProperty2["default"])(Collapse, "Panel", _Panel["default"]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNvbGxhcHNlLmpzeCJdLCJuYW1lcyI6WyJ0b0FycmF5IiwiYWN0aXZlS2V5IiwiY3VycmVudEFjdGl2ZUtleSIsIkFycmF5IiwiaXNBcnJheSIsIkNvbGxhcHNlIiwicHJvcHMiLCJkZWZhdWx0QWN0aXZlS2V5Iiwic3RhdGUiLCJvcGVuQW5pbWF0aW9uIiwicHJlZml4Q2xzIiwibmV4dFByb3BzIiwic2V0U3RhdGUiLCJrZXkiLCJhY2NvcmRpb24iLCJpbmRleCIsImluZGV4T2YiLCJpc0FjdGl2ZSIsInNwbGljZSIsInB1c2giLCJzZXRBY3RpdmVLZXkiLCJkZXN0cm95SW5hY3RpdmVQYW5lbCIsIm5ld0NoaWxkcmVuIiwiQ2hpbGRyZW4iLCJmb3JFYWNoIiwiY2hpbGRyZW4iLCJjaGlsZCIsIlN0cmluZyIsImhlYWRlciIsImhlYWRlckNsYXNzIiwiZGlzYWJsZWQiLCJvbkl0ZW1DbGljayIsIm9uQ2xpY2tJdGVtIiwib25DaGFuZ2UiLCJjbGFzc05hbWUiLCJzdHlsZSIsImNvbGxhcHNlQ2xhc3NOYW1lIiwiZ2V0SXRlbXMiLCJDb21wb25lbnQiLCJQcm9wVHlwZXMiLCJhbnkiLCJzdHJpbmciLCJvbmVPZlR5cGUiLCJhcnJheU9mIiwib2JqZWN0IiwiZnVuYyIsImJvb2wiLCJDb2xsYXBzZVBhbmVsIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUEsU0FBU0EsT0FBVCxDQUFpQkMsU0FBakIsRUFBNEI7QUFDMUIsTUFBSUMsZ0JBQWdCLEdBQUdELFNBQXZCOztBQUNBLE1BQUksQ0FBQ0UsS0FBSyxDQUFDQyxPQUFOLENBQWNGLGdCQUFkLENBQUwsRUFBc0M7QUFDcENBLElBQUFBLGdCQUFnQixHQUFHQSxnQkFBZ0IsR0FBRyxDQUFDQSxnQkFBRCxDQUFILEdBQXdCLEVBQTNEO0FBQ0Q7O0FBQ0QsU0FBT0EsZ0JBQVA7QUFDRDs7SUFFb0JHLFE7Ozs7O0FBOEJuQixv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QUpTO0FBS3BCTyxFQUFBQSxvQkFBb0IsRUFBRTtBQUxGLEM7aUNBcEJIaEIsUSxXQTRCSjBDLGlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IENoaWxkcmVuLCBjbG9uZUVsZW1lbnQsIENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBDb2xsYXBzZVBhbmVsIGZyb20gJy4vUGFuZWwnO1xuaW1wb3J0IG9wZW5BbmltYXRpb25GYWN0b3J5IGZyb20gJy4vb3BlbkFuaW1hdGlvbkZhY3RvcnknO1xuXG5mdW5jdGlvbiB0b0FycmF5KGFjdGl2ZUtleSkge1xuICBsZXQgY3VycmVudEFjdGl2ZUtleSA9IGFjdGl2ZUtleTtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGN1cnJlbnRBY3RpdmVLZXkpKSB7XG4gICAgY3VycmVudEFjdGl2ZUtleSA9IGN1cnJlbnRBY3RpdmVLZXkgPyBbY3VycmVudEFjdGl2ZUtleV0gOiBbXTtcbiAgfVxuICByZXR1cm4gY3VycmVudEFjdGl2ZUtleTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29sbGFwc2UgZXh0ZW5kcyBDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMuYW55LFxuICAgIHByZWZpeENsczogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBhY3RpdmVLZXk6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgIFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpLFxuICAgIF0pLFxuICAgIGRlZmF1bHRBY3RpdmVLZXk6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgIFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpLFxuICAgIF0pLFxuICAgIG9wZW5BbmltYXRpb246IFByb3BUeXBlcy5vYmplY3QsXG4gICAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICAgIGFjY29yZGlvbjogUHJvcFR5cGVzLmJvb2wsXG4gICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGRlc3Ryb3lJbmFjdGl2ZVBhbmVsOiBQcm9wVHlwZXMuYm9vbCxcbiAgfTtcblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIHByZWZpeENsczogJ3JjLWNvbGxhcHNlJyxcbiAgICBvbkNoYW5nZSgpIHtcbiAgICB9LFxuICAgIGFjY29yZGlvbjogZmFsc2UsXG4gICAgZGVzdHJveUluYWN0aXZlUGFuZWw6IGZhbHNlLFxuICB9O1xuXG4gIHN0YXRpYyBQYW5lbCA9IENvbGxhcHNlUGFuZWw7XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICBjb25zdCB7IGFjdGl2ZUtleSwgZGVmYXVsdEFjdGl2ZUtleSB9ID0gdGhpcy5wcm9wcztcbiAgICBsZXQgY3VycmVudEFjdGl2ZUtleSA9IGRlZmF1bHRBY3RpdmVLZXk7XG4gICAgaWYgKCdhY3RpdmVLZXknIGluIHRoaXMucHJvcHMpIHtcbiAgICAgIGN1cnJlbnRBY3RpdmVLZXkgPSBhY3RpdmVLZXk7XG4gICAgfVxuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG9wZW5BbmltYXRpb246IHRoaXMucHJvcHMub3BlbkFuaW1hdGlvbiB8fCBvcGVuQW5pbWF0aW9uRmFjdG9yeSh0aGlzLnByb3BzLnByZWZpeENscyksXG4gICAgICBhY3RpdmVLZXk6IHRvQXJyYXkoY3VycmVudEFjdGl2ZUtleSksXG4gICAgfTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgaWYgKCdhY3RpdmVLZXknIGluIG5leHRQcm9wcykge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGFjdGl2ZUtleTogdG9BcnJheShuZXh0UHJvcHMuYWN0aXZlS2V5KSxcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoJ29wZW5BbmltYXRpb24nIGluIG5leHRQcm9wcykge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIG9wZW5BbmltYXRpb246IG5leHRQcm9wcy5vcGVuQW5pbWF0aW9uLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgb25DbGlja0l0ZW0oa2V5KSB7XG4gICAgbGV0IGFjdGl2ZUtleSA9IHRoaXMuc3RhdGUuYWN0aXZlS2V5O1xuICAgIGlmICh0aGlzLnByb3BzLmFjY29yZGlvbikge1xuICAgICAgYWN0aXZlS2V5ID0gYWN0aXZlS2V5WzBdID09PSBrZXkgPyBbXSA6IFtrZXldO1xuICAgIH0gZWxzZSB7XG4gICAgICBhY3RpdmVLZXkgPSBbLi4uYWN0aXZlS2V5XTtcbiAgICAgIGNvbnN0IGluZGV4ID0gYWN0aXZlS2V5LmluZGV4T2Yoa2V5KTtcbiAgICAgIGNvbnN0IGlzQWN0aXZlID0gaW5kZXggPiAtMTtcbiAgICAgIGlmIChpc0FjdGl2ZSkge1xuICAgICAgICAvLyByZW1vdmUgYWN0aXZlIHN0YXRlXG4gICAgICAgIGFjdGl2ZUtleS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWN0aXZlS2V5LnB1c2goa2V5KTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5zZXRBY3RpdmVLZXkoYWN0aXZlS2V5KTtcbiAgfVxuXG4gIGdldEl0ZW1zKCkge1xuICAgIGNvbnN0IGFjdGl2ZUtleSA9IHRoaXMuc3RhdGUuYWN0aXZlS2V5O1xuICAgIGNvbnN0IHsgcHJlZml4Q2xzLCBhY2NvcmRpb24sIGRlc3Ryb3lJbmFjdGl2ZVBhbmVsIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IG5ld0NoaWxkcmVuID0gW107XG5cbiAgICBDaGlsZHJlbi5mb3JFYWNoKHRoaXMucHJvcHMuY2hpbGRyZW4sIChjaGlsZCwgaW5kZXgpID0+IHtcbiAgICAgIGlmICghY2hpbGQpIHJldHVybjtcbiAgICAgIC8vIElmIHRoZXJlIGlzIG5vIGtleSBwcm92aWRlLCB1c2UgdGhlIHBhbmVsIG9yZGVyIGFzIGRlZmF1bHQga2V5XG4gICAgICBjb25zdCBrZXkgPSBjaGlsZC5rZXkgfHwgU3RyaW5nKGluZGV4KTtcbiAgICAgIGNvbnN0IHsgaGVhZGVyLCBoZWFkZXJDbGFzcywgZGlzYWJsZWQgfSA9IGNoaWxkLnByb3BzO1xuICAgICAgbGV0IGlzQWN0aXZlID0gZmFsc2U7XG4gICAgICBpZiAoYWNjb3JkaW9uKSB7XG4gICAgICAgIGlzQWN0aXZlID0gYWN0aXZlS2V5WzBdID09PSBrZXk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpc0FjdGl2ZSA9IGFjdGl2ZUtleS5pbmRleE9mKGtleSkgPiAtMTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcHJvcHMgPSB7XG4gICAgICAgIGtleSxcbiAgICAgICAgaGVhZGVyLFxuICAgICAgICBoZWFkZXJDbGFzcyxcbiAgICAgICAgaXNBY3RpdmUsXG4gICAgICAgIHByZWZpeENscyxcbiAgICAgICAgZGVzdHJveUluYWN0aXZlUGFuZWwsXG4gICAgICAgIG9wZW5BbmltYXRpb246IHRoaXMuc3RhdGUub3BlbkFuaW1hdGlvbixcbiAgICAgICAgY2hpbGRyZW46IGNoaWxkLnByb3BzLmNoaWxkcmVuLFxuICAgICAgICBvbkl0ZW1DbGljazogZGlzYWJsZWQgPyBudWxsIDogKCkgPT4gdGhpcy5vbkNsaWNrSXRlbShrZXkpLFxuICAgICAgfTtcblxuICAgICAgbmV3Q2hpbGRyZW4ucHVzaChjbG9uZUVsZW1lbnQoY2hpbGQsIHByb3BzKSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbmV3Q2hpbGRyZW47XG4gIH1cblxuICBzZXRBY3RpdmVLZXkoYWN0aXZlS2V5KSB7XG4gICAgaWYgKCEoJ2FjdGl2ZUtleScgaW4gdGhpcy5wcm9wcykpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBhY3RpdmVLZXkgfSk7XG4gICAgfVxuICAgIHRoaXMucHJvcHMub25DaGFuZ2UodGhpcy5wcm9wcy5hY2NvcmRpb24gPyBhY3RpdmVLZXlbMF0gOiBhY3RpdmVLZXkpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgcHJlZml4Q2xzLCBjbGFzc05hbWUsIHN0eWxlIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGNvbGxhcHNlQ2xhc3NOYW1lID0gY2xhc3NOYW1lcyh7XG4gICAgICBbcHJlZml4Q2xzXTogdHJ1ZSxcbiAgICAgIFtjbGFzc05hbWVdOiAhIWNsYXNzTmFtZSxcbiAgICB9KTtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9e2NvbGxhcHNlQ2xhc3NOYW1lfSBzdHlsZT17c3R5bGV9PlxuICAgICAgICB7dGhpcy5nZXRJdGVtcygpfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuIl19