{"version":3,"sources":["index.test.js"],"names":["FormTest","DataSet","data","phone","age","sex","email","homepage","fields","name","type","label","labelWidth","required","pattern","min","step","help","ds","current","getField","set","width","props","marginLeft","changeField","React","Component","describe","beforeEach","jest","useFakeTimers","afterEach","useRealTimers","it","wrapper","runAllTimers","expect","find","length","toBe","at","prop","undefined","toMatchSnapshot","toHaveLength"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEMA,Q;;;;;;;;;;;;;;;;;2FACC,IAAIC,mBAAJ,CAAY;AACfC,MAAAA,IAAI,EAAE,CACJ;AACEC,QAAAA,KAAK,EAAE,UADT;AAEEC,QAAAA,GAAG,EAAE,EAFP;AAGEC,QAAAA,GAAG,EAAE,GAHP;AAIEC,QAAAA,KAAK,EAAE,kBAJT;AAKEC,QAAAA,QAAQ,EAAE;AALZ,OADI,CADS;AAUfC,MAAAA,MAAM,EAAE,CACN;AACEC,QAAAA,IAAI,EAAE,OADR;AAEEC,QAAAA,IAAI,EAAE,QAFR;AAGEC,QAAAA,KAAK,EAAE,KAHT;AAIEC,QAAAA,UAAU,EAAE,GAJd;AAKEC,QAAAA,QAAQ,EAAE,IALZ;AAMEC,QAAAA,OAAO,EAAE;AANX,OADM,EAQH;AACH;AACEL,QAAAA,IAAI,EAAE,UADR;AAEEC,QAAAA,IAAI,EAAE,QAFR;AAGEC,QAAAA,KAAK,EAAE,IAHT;AAIEE,QAAAA,QAAQ,EAAE;AAJZ,OATM,EAeN;AACEJ,QAAAA,IAAI,EAAE,KADR;AAEEC,QAAAA,IAAI,EAAE,QAFR;AAGEC,QAAAA,KAAK,EAAE,IAHT;AAIEE,QAAAA,QAAQ,EAAE,IAJZ;AAKEE,QAAAA,GAAG,EAAE,EALP;AAMEC,QAAAA,IAAI,EAAE,CANR;AAOEC,QAAAA,IAAI,EAAE;AAPR,OAfM,EAwBN;AAAER,QAAAA,IAAI,EAAE,OAAR;AAAiBC,QAAAA,IAAI,EAAE,OAAvB;AAAgCC,QAAAA,KAAK,EAAE,IAAvC;AAA6CE,QAAAA,QAAQ,EAAE;AAAvD,OAxBM;AAVO,KAAZ,C;oGAsCS,YAAM;AAClB,YAAKK,EAAL,CAAQC,OAAR,CAAgBC,QAAhB,CAAyB,MAAzB,EAAiCC,GAAjC,CAAqC,WAArC,EAAkD,aAAlD;AACD,K;;;;;;6BAEQ;AACP,aACE,gCAAC,YAAD;AAAM,QAAA,OAAO,EAAE,KAAKH,EAApB;AAAwB,QAAA,KAAK,EAAE;AAAEI,UAAAA,KAAK,EAAE;AAAT;AAA/B,SAAwD,KAAKC,KAA7D,GACE,gCAAC,qBAAD;AAAW,QAAA,IAAI,EAAC;AAAhB,QADF,EAEE,gCAAC,oBAAD;AAAU,QAAA,IAAI,EAAC;AAAf,QAFF,EAGE,gCAAC,uBAAD;AAAa,QAAA,IAAI,EAAC,KAAlB;AAAwB,QAAA,UAAU,EAAC,cAAnC;AAAwC,QAAA,QAAQ,EAAC;AAAjD,QAHF,EAIE,gCAAC,sBAAD;AAAY,QAAA,IAAI,EAAC;AAAjB,QAJF,EAKE,6CACE,gCAAC,kBAAD;AAAQ,QAAA,IAAI,EAAC;AAAb,wBADF,EAEE,gCAAC,kBAAD;AAAQ,QAAA,IAAI,EAAC,OAAb;AAAqB,QAAA,KAAK,EAAE;AAAEC,UAAAA,UAAU,EAAE;AAAd;AAA5B,wBAFF,EAKE,gCAAC,kBAAD;AAAQ,QAAA,OAAO,EAAE,KAAKC,WAAtB;AAAmC,QAAA,KAAK,EAAE;AAAED,UAAAA,UAAU,EAAE;AAAd;AAA1C,+DALF,CALF,CADF;AAiBD;;;EA7DoBE,kBAAMC,S;;AAgE7BC,QAAQ,CAAC,QAAD,EAAW,YAAM;AACvBC,EAAAA,UAAU,CAAC,YAAM;AACfC,IAAAA,IAAI,CAACC,aAAL;AACD,GAFS,CAAV;AAIAC,EAAAA,SAAS,CAAC,YAAM;AACdF,IAAAA,IAAI,CAACG,aAAL;AACD,GAFQ,CAAT;AAIAC,EAAAA,EAAE,CAAC,sBAAD,EAAyB,YAAM;AAC/B,QAAMC,OAAO,GAAG,mBAAM,gCAAC,QAAD,OAAN,CAAhB;AACAL,IAAAA,IAAI,CAACM,YAAL;AACAC,IAAAA,MAAM,CAACF,OAAO,CAACG,IAAR,CAAa,OAAb,EAAsBC,MAAvB,CAAN,CAAqCC,IAArC,CAA0C,CAA1C;AACD,GAJC,CAAF;AAKAN,EAAAA,EAAE,CAAC,wBAAD,EAA2B,YAAM;AACjC,QAAMC,OAAO,GAAG,mBAAM,gCAAC,QAAD;AAAU,MAAA,QAAQ;AAAlB,MAAN,CAAhB;AACAE,IAAAA,MAAM,CACJF,OAAO,CACJG,IADH,CACQ,OADR,EAEGG,EAFH,CAEM,CAFN,EAGGC,IAHH,CAGQ,OAHR,CADI,CAAN,CAKEF,IALF,CAKO,YALP;AAMAH,IAAAA,MAAM,CACJF,OAAO,CACJG,IADH,CACQ,OADR,EAEGG,EAFH,CAEM,CAFN,EAGGC,IAHH,CAGQ,OAHR,CADI,CAAN,CAKEF,IALF,CAKOG,SALP;AAMAN,IAAAA,MAAM,CACJF,OAAO,CACJG,IADH,CACQ,OADR,EAEGG,EAFH,CAEM,CAFN,EAGGC,IAHH,CAGQ,OAHR,CADI,CAAN,CAKEF,IALF,CAKO,EALP;AAMAH,IAAAA,MAAM,CACJF,OAAO,CACJG,IADH,CACQ,OADR,EAEGG,EAFH,CAEM,CAFN,EAGGC,IAHH,CAGQ,OAHR,CADI,CAAN,CAKEF,IALF,CAKO,IALP;AAMAH,IAAAA,MAAM,CACJF,OAAO,CACJG,IADH,CACQ,OADR,EAEGG,EAFH,CAEM,CAFN,EAGGC,IAHH,CAGQ,OAHR,CADI,CAAN,CAKEF,IALF,CAKO,kBALP;AAMD,GAhCC,CAAF;AAiCAN,EAAAA,EAAE,CAAC,cAAD,EAAiB,YAAM;AACvB,QAAMC,OAAO,GAAG,mBAAM,gCAAC,QAAD;AAAU,MAAA,QAAQ;AAAlB,MAAN,CAAhB;AACAL,IAAAA,IAAI,CAACM,YAAL;AACAC,IAAAA,MAAM,CAACF,OAAD,CAAN,CAAgBS,eAAhB;AACD,GAJC,CAAF;AAMAV,EAAAA,EAAE,CAAC,eAAD,EAAkB,YAAM;AACxB,QAAMC,OAAO,GAAG,mBAAM,gCAAC,QAAD;AAAU,MAAA,QAAQ;AAAlB,MAAN,CAAhB;AACAL,IAAAA,IAAI,CAACM,YAAL;AACAC,IAAAA,MAAM,CAACF,OAAO,CAACG,IAAR,CAAa,+BAAb,CAAD,CAAN,CAAsDO,YAAtD,CAAmE,CAAnE;AACD,GAJC,CAAF;AAKD,CA1DO,CAAR","sourcesContent":["import React from 'react';\nimport { mount } from 'enzyme';\nimport Form from '..';\nimport DataSet from '../../data-set';\nimport TextField from '../../text-field';\nimport NumberField from '../../number-field';\nimport Password from '../../password';\nimport Button from '../../button';\nimport EmailField from '../../email-field';\n\nclass FormTest extends React.Component {\n  ds = new DataSet({\n    data: [\n      {\n        phone: 1800000000,\n        age: 18,\n        sex: 'F',\n        email: 'xxx@choerodon.io',\n        homepage: 'https://choerodon.io',\n      },\n    ],\n    fields: [\n      {\n        name: 'phone',\n        type: 'string',\n        label: '手机号',\n        labelWidth: 150,\n        required: true,\n        pattern: '^1[3-9]\\\\d{9}$',\n      }, // /^1[3-9]\\d{9}$/\n      {\n        name: 'password',\n        type: 'string',\n        label: '密码',\n        required: true,\n      },\n      {\n        name: 'age',\n        type: 'number',\n        label: '年龄',\n        required: true,\n        min: 18,\n        step: 1,\n        help: '我们需要确定你的年龄',\n      },\n      { name: 'email', type: 'email', label: '邮箱', required: true },\n    ],\n  });\n\n  changeField = () => {\n    this.ds.current.getField('code').set('textField', 'description');\n  };\n\n  render() {\n    return (\n      <Form dataSet={this.ds} style={{ width: '4.5rem' }} {...this.props}>\n        <TextField name=\"phone\" />\n        <Password name=\"password\" />\n        <NumberField name=\"age\" addonAfter=\"周岁\" showHelp=\"tooltip\" />\n        <EmailField name=\"email\" />\n        <div>\n          <Button type=\"submit\">注册</Button>\n          <Button type=\"reset\" style={{ marginLeft: 8 }}>\n            重置\n          </Button>\n          <Button onClick={this.changeField} style={{ marginLeft: 8 }}>\n            设置代码描述的textField\n          </Button>\n        </div>\n      </Form>\n    );\n  }\n}\n\ndescribe('Select', () => {\n  beforeEach(() => {\n    jest.useFakeTimers();\n  });\n\n  afterEach(() => {\n    jest.useRealTimers();\n  });\n\n  it('the form reder right', () => {\n    const wrapper = mount(<FormTest />);\n    jest.runAllTimers();\n    expect(wrapper.find('input').length).toBe(5);\n  });\n  it('dataset data form test', () => {\n    const wrapper = mount(<FormTest disabled />);\n    expect(\n      wrapper\n        .find('input')\n        .at(0)\n        .prop('value'),\n    ).toBe('1800000000');\n    expect(\n      wrapper\n        .find('input')\n        .at(1)\n        .prop('value'),\n    ).toBe(undefined);\n    expect(\n      wrapper\n        .find('input')\n        .at(2)\n        .prop('value'),\n    ).toBe('');\n    expect(\n      wrapper\n        .find('input')\n        .at(3)\n        .prop('value'),\n    ).toBe('18');\n    expect(\n      wrapper\n        .find('input')\n        .at(4)\n        .prop('value'),\n    ).toBe('xxx@choerodon.io');\n  });\n  it('disable test', () => {\n    const wrapper = mount(<FormTest disabled />);\n    jest.runAllTimers();\n    expect(wrapper).toMatchSnapshot();\n  });\n\n  it('useColon test', () => {\n    const wrapper = mount(<FormTest useColon />);\n    jest.runAllTimers();\n    expect(wrapper.find('.c7n-pro-field-label-useColon')).toHaveLength(4);\n  });\n});\n"]}