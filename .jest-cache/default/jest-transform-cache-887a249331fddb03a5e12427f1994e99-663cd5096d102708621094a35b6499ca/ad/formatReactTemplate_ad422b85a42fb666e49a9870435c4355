ec405e3742839ec65a9786d5e0d8761d
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = formatReactTemplate;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _react = require("react");

var _stringTemplate = _interopRequireDefault(require("string-template"));

var _isString = _interopRequireDefault(require("lodash/isString"));

var _isNil = _interopRequireDefault(require("lodash/isNil"));

var _flatMap = _interopRequireDefault(require("lodash/flatMap"));

function formatReactTemplate(template, map) {
  var result = [template];
  Object.keys(map).forEach(function (key) {
    var node = map[key];

    if (!(0, _isNil["default"])(node)) {
      result = (0, _flatMap["default"])(result, function (text) {
        if ((0, _isString["default"])(text)) {
          var stringText = text;

          if ((0, _react.isValidElement)(node)) {
            var placeholder = "{".concat(key, "}");
            var length = placeholder.length;
            var textArr = [];
            var index = stringText.indexOf(placeholder);

            while (index > -1) {
              if (index > 0) {
                textArr.push(stringText.slice(0, index));
              }

              textArr.push(node);
              stringText = stringText.slice(index + length);
              index = stringText.indexOf(placeholder);
            }

            if (stringText) {
              textArr.push(stringText);
            }

            return textArr;
          }

          return (0, _stringTemplate["default"])(text, map);
        }

        return text;
      });
    }
  });

  if (result.every(_isString["default"])) {
    return result.join('');
  }

  return _react.createElement.apply(void 0, [_react.Fragment, {}].concat((0, _toConsumableArray2["default"])(result)));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9odWlodWF3ay9Eb2N1bWVudHMvb3B0L2Nob2Vyb2Rvbi11aS9jb21wb25lbnRzLXByby9mb3JtYXR0ZXIvZm9ybWF0UmVhY3RUZW1wbGF0ZS50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFYyxTQUFVLG1CQUFWLENBQ1osUUFEWSxFQUVaLEdBRlksRUFFcUI7QUFFakMsTUFBSSxNQUFNLEdBQWdCLENBQUMsUUFBRCxDQUExQjtBQUNBLEVBQUEsTUFBTSxDQUFDLElBQVAsQ0FBWSxHQUFaLEVBQWlCLE9BQWpCLENBQXlCLFVBQUEsR0FBRyxFQUFHO0FBQzdCLFFBQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxHQUFELENBQWhCOztBQUNBLFFBQUksQ0FBQyx1QkFBTSxJQUFOLENBQUwsRUFBa0I7QUFDaEIsTUFBQSxNQUFNLEdBQUcseUJBQVEsTUFBUixFQUFnQixVQUFBLElBQUksRUFBRztBQUM5QixZQUFJLDBCQUFTLElBQVQsQ0FBSixFQUFvQjtBQUNsQixjQUFJLFVBQVUsR0FBRyxJQUFqQjs7QUFDQSxjQUFJLDJCQUFlLElBQWYsQ0FBSixFQUEwQjtBQUN4QixnQkFBTSxXQUFXLGNBQU8sR0FBUCxNQUFqQjtBQUR3QixnQkFFaEIsTUFGZ0IsR0FFTCxXQUZLLENBRWhCLE1BRmdCO0FBR3hCLGdCQUFNLE9BQU8sR0FBZ0IsRUFBN0I7QUFDQSxnQkFBSSxLQUFLLEdBQUcsVUFBVSxDQUFDLE9BQVgsQ0FBbUIsV0FBbkIsQ0FBWjs7QUFDQSxtQkFBTyxLQUFLLEdBQUcsQ0FBQyxDQUFoQixFQUFtQjtBQUNqQixrQkFBSSxLQUFLLEdBQUcsQ0FBWixFQUFlO0FBQ2IsZ0JBQUEsT0FBTyxDQUFDLElBQVIsQ0FBYSxVQUFVLENBQUMsS0FBWCxDQUFpQixDQUFqQixFQUFvQixLQUFwQixDQUFiO0FBQ0Q7O0FBQ0QsY0FBQSxPQUFPLENBQUMsSUFBUixDQUFhLElBQWI7QUFDQSxjQUFBLFVBQVUsR0FBRyxVQUFVLENBQUMsS0FBWCxDQUFpQixLQUFLLEdBQUcsTUFBekIsQ0FBYjtBQUNBLGNBQUEsS0FBSyxHQUFHLFVBQVUsQ0FBQyxPQUFYLENBQW1CLFdBQW5CLENBQVI7QUFDRDs7QUFDRCxnQkFBSSxVQUFKLEVBQWdCO0FBQ2QsY0FBQSxPQUFPLENBQUMsSUFBUixDQUFhLFVBQWI7QUFDRDs7QUFDRCxtQkFBTyxPQUFQO0FBQ0Q7O0FBQ0QsaUJBQU8sZ0NBQU8sSUFBUCxFQUFhLEdBQWIsQ0FBUDtBQUNEOztBQUNELGVBQU8sSUFBUDtBQUNELE9BeEJRLENBQVQ7QUF5QkQ7QUFDRixHQTdCRDs7QUE4QkEsTUFBSSxNQUFNLENBQUMsS0FBUCxDQUFhLG9CQUFiLENBQUosRUFBNEI7QUFDMUIsV0FBTyxNQUFNLENBQUMsSUFBUCxDQUFZLEVBQVosQ0FBUDtBQUNEOztBQUNELFNBQU8sb0NBQWMsZUFBZCxFQUF3QixFQUF4Qiw2Q0FBK0IsTUFBL0IsR0FBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlRWxlbWVudCwgRnJhZ21lbnQsIGlzVmFsaWRFbGVtZW50LCBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgZm9ybWF0IGZyb20gJ3N0cmluZy10ZW1wbGF0ZSc7XG5pbXBvcnQgaXNTdHJpbmcgZnJvbSAnbG9kYXNoL2lzU3RyaW5nJztcbmltcG9ydCBpc05pbCBmcm9tICdsb2Rhc2gvaXNOaWwnO1xuaW1wb3J0IGZsYXRNYXAgZnJvbSAnbG9kYXNoL2ZsYXRNYXAnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRSZWFjdFRlbXBsYXRlKFxuICB0ZW1wbGF0ZTogc3RyaW5nLFxuICBtYXA6IHsgW2tleTogc3RyaW5nXTogUmVhY3ROb2RlIH0sXG4pOiBSZWFjdE5vZGUge1xuICBsZXQgcmVzdWx0OiBSZWFjdE5vZGVbXSA9IFt0ZW1wbGF0ZV07XG4gIE9iamVjdC5rZXlzKG1hcCkuZm9yRWFjaChrZXkgPT4ge1xuICAgIGNvbnN0IG5vZGUgPSBtYXBba2V5XTtcbiAgICBpZiAoIWlzTmlsKG5vZGUpKSB7XG4gICAgICByZXN1bHQgPSBmbGF0TWFwKHJlc3VsdCwgdGV4dCA9PiB7XG4gICAgICAgIGlmIChpc1N0cmluZyh0ZXh0KSkge1xuICAgICAgICAgIGxldCBzdHJpbmdUZXh0ID0gdGV4dDtcbiAgICAgICAgICBpZiAoaXNWYWxpZEVsZW1lbnQobm9kZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHBsYWNlaG9sZGVyID0gYHske2tleX19YDtcbiAgICAgICAgICAgIGNvbnN0IHsgbGVuZ3RoIH0gPSBwbGFjZWhvbGRlcjtcbiAgICAgICAgICAgIGNvbnN0IHRleHRBcnI6IFJlYWN0Tm9kZVtdID0gW107XG4gICAgICAgICAgICBsZXQgaW5kZXggPSBzdHJpbmdUZXh0LmluZGV4T2YocGxhY2Vob2xkZXIpO1xuICAgICAgICAgICAgd2hpbGUgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgICAgaWYgKGluZGV4ID4gMCkge1xuICAgICAgICAgICAgICAgIHRleHRBcnIucHVzaChzdHJpbmdUZXh0LnNsaWNlKDAsIGluZGV4KSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdGV4dEFyci5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgICBzdHJpbmdUZXh0ID0gc3RyaW5nVGV4dC5zbGljZShpbmRleCArIGxlbmd0aCk7XG4gICAgICAgICAgICAgIGluZGV4ID0gc3RyaW5nVGV4dC5pbmRleE9mKHBsYWNlaG9sZGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdHJpbmdUZXh0KSB7XG4gICAgICAgICAgICAgIHRleHRBcnIucHVzaChzdHJpbmdUZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0ZXh0QXJyO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZm9ybWF0KHRleHQsIG1hcCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuICBpZiAocmVzdWx0LmV2ZXJ5KGlzU3RyaW5nKSkge1xuICAgIHJldHVybiByZXN1bHQuam9pbignJyk7XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoRnJhZ21lbnQsIHt9LCAuLi5yZXN1bHQpO1xufVxuIl19