{"version":3,"sources":["modalProviderTest.js"],"names":["Context","injectModal","ModalProvider","useModal","ModalContent","context","openModal","modal","title","open","children","onOk","Modal","confirm","InnerModal","handleClick","ModalProviderTest","props","React","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEA,IAAMA,OAAO,GAAG,0BAAc,EAAd,CAAhB;IAEQC,W,GAA0BC,Y,CAA1BD,W;IAAaE,Q,GAAaD,Y,CAAbC,Q;;AAErB,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzB,MAAMC,OAAO,GAAG,uBAAWL,OAAX,CAAhB;AACA,SAAOK,OAAO,gCAAyBA,OAAzB,SAAsC,uBAApD;AACD,CAHD;;AAKA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAQC,KAAR,EAAkB;AAClCD,EAAAA,KAAK,CAACE,IAAN,CAAW;AACTD,IAAAA,KAAK,EAALA,KADS;AAETE,IAAAA,QAAQ,EAAE,gCAAC,YAAD,OAFD;AAGTC,IAAAA,IAAI,EAAE;AAAA,aAAMC,kBAAMC,OAAN,CAAc,8BAAd,CAAN;AAAA;AAHG,GAAX;AAKD,CAND;;AAQA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvB,MAAMP,KAAK,GAAGJ,QAAQ,EAAtB;AACA,MAAMY,WAAW,GAAG,wBAAY;AAAA,WAAMT,SAAS,CAACC,KAAD,EAAQ,OAAR,CAAf;AAAA,GAAZ,EAA6C,EAA7C,CAApB;AACA,SAAO,gCAAC,kBAAD;AAAQ,IAAA,OAAO,EAAEQ;AAAjB,wBAAP;AACD,CAJD;;IAOMC,iB,GADLf,W;;;;;;;;;;;;;;;;;oGAEe,YAAM;AAAA,UACHM,KADG,GACO,MAAKU,KADZ,CACVL,KADU;AAElBN,MAAAA,SAAS,CAACC,KAAD,EAAQ,OAAR,CAAT;AACD,K;;;;;;6BAEQ;AACP,aACE,gCAAC,iBAAD,CAAO,QAAP,QACE,gCAAC,kBAAD;AAAQ,QAAA,OAAO,EAAE,KAAKQ;AAAtB,4BADF,EAEE,gCAAC,OAAD,CAAS,QAAT;AAAkB,QAAA,KAAK,EAAC;AAAxB,SACE,gCAAC,YAAD,QACE,gCAAC,UAAD,OADF,CADF,CAFF,CADF;AAUD;;;EAjB6BG,kBAAMC,S;;eAoBvBH,iB","sourcesContent":["import React, { createContext, useContext, useCallback } from 'react';\nimport ModalProvider from '..';\nimport Modal from '../../modal';\nimport Button from '../../button';\n\nconst Context = createContext('');\n\nconst { injectModal, useModal } = ModalProvider;\n\nconst ModalContent = () => {\n  const context = useContext(Context);\n  return context ? `Modal with context<${context}>` : 'Modal without context';\n};\n\nconst openModal = (modal, title) => {\n  modal.open({\n    title,\n    children: <ModalContent />,\n    onOk: () => Modal.confirm('This is normal Modal confirm'),\n  });\n};\n\nconst InnerModal = () => {\n  const modal = useModal();\n  const handleClick = useCallback(() => openModal(modal, 'Inner'), []);\n  return <Button onClick={handleClick}>Open inner modal</Button>;\n};\n\n@injectModal\nclass ModalProviderTest extends React.Component {\n  handleClick = () => {\n    const { Modal: modal } = this.props;\n    openModal(modal, 'Outer');\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <Button onClick={this.handleClick}>Open outer modal</Button>\n        <Context.Provider value=\"provider\">\n          <ModalProvider>\n            <InnerModal />\n          </ModalProvider>\n        </Context.Provider>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default ModalProviderTest;\n"]}