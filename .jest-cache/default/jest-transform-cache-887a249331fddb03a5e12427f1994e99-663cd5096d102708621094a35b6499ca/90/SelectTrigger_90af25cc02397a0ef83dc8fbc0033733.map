{"version":3,"sources":["SelectTrigger.jsx"],"names":["BUILT_IN_PLACEMENTS","bottomLeft","points","offset","overflow","adjustX","adjustY","topLeft","SelectTrigger","_expandedKeys","fireOnExpand","dropdownWidth","expandedKeys","setState","trigger","forcePopupAlign","treeNode","props","filterVal","treeNodeFilterProp","inputValue","indexOf","input","child","filterTreeNode","disabled","call","setDropdownWidth","nextProps","width","ReactDOM","findDOMNode","offsetWidth","state","popupEle","getPopupDomNode","transitionName","animation","getDropdownPrefixCls","prefixCls","treeNodes","filterPoss","index","pos","push","key","processedPoss","forEach","arr","split","reduce","pre","cur","res","filterNodesPositions","node","hierarchyNodes","recursive","children","map","keys","halfCheckedKeys","newTreeNodes","multiple","trProps","showIcon","treeIcon","showLine","treeLine","defaultExpandAll","treeDefaultExpandAll","defaultExpandedKeys","treeDefaultExpandedKeys","highlightTreeNode","treeCheckable","selectable","checkable","onCheck","onSelect","checkStrictly","treeCheckStrictly","_treeNodesStates","length","checkedKeys","checked","halfChecked","selectedKeys","loadData","autoExpandParent","onExpand","dropdownPrefixCls","popupClassName","dropdownClassName","visible","search","showSearch","inputElement","handler","_cachetreeData","treeData","processTreeNode","value","some","item","halfCheckedValues","notFoundContent","popupElement","renderTree","popupStyle","dropdownStyle","widthProp","dropdownMatchSelectWidth","dropdownPopupAlign","getDropdownTransitionName","onDropdownVisibleChange","getPopupContainer","Component","PropTypes","bool","object","any","string"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA,IAAMA,mBAAmB,GAAG;AAC1BC,EAAAA,UAAU,EAAE;AACVC,IAAAA,MAAM,EAAE,CAAC,IAAD,EAAO,IAAP,CADE;AAEVC,IAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,CAFE;AAGVC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,OAAO,EAAE,CADD;AAERC,MAAAA,OAAO,EAAE;AAFD;AAHA,GADc;AAS1BC,EAAAA,OAAO,EAAE;AACPL,IAAAA,MAAM,EAAE,CAAC,IAAD,EAAO,IAAP,CADD;AAEPC,IAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAC,CAAL,CAFD;AAGPC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,OAAO,EAAE,CADD;AAERC,MAAAA,OAAO,EAAE;AAFD;AAHH;AATiB,CAA5B;;IAmBME,a;;;;;;;;;;;;;;;;;8FAaI;AACNC,MAAAA,aAAa,EAAE,EADT;AAENC,MAAAA,YAAY,EAAE,KAFR;AAGNC,MAAAA,aAAa,EAAE;AAHT,K;iGAwBG,UAACC,YAAD,EAAkB;AAC3B;AACA,YAAKC,QAAL,CAAc;AACZJ,QAAAA,aAAa,EAAEG,YADH;AAEZF,QAAAA,YAAY,EAAE;AAFF,OAAd,EAGG,YAAM;AACP,YAAI,MAAKI,OAAL,IAAgB,MAAKA,OAAL,CAAaC,eAAjC,EAAkD;AAChD,gBAAKD,OAAL,CAAaC,eAAb;AACD;AACF,OAPD;AAQD,K;0GA8BmB,UAACC,QAAD,EAAc;AAChC,UAAMC,KAAK,GAAG,MAAKA,KAAnB;AACA,UAAMC,SAAS,GAAGF,QAAQ,CAACC,KAAT,CAAe,2BAAgBA,KAAK,CAACE,kBAAtB,CAAf,CAAlB;;AACA,UAAI,OAAOD,SAAP,KAAqB,QAAzB,EAAmC;AACjC,eAAOD,KAAK,CAACG,UAAN,IAAoBF,SAAS,CAACG,OAAV,CAAkBJ,KAAK,CAACG,UAAxB,IAAsC,CAAC,CAAlE;AACD;;AACD,aAAO,KAAP;AACD,K;uGAEgB,UAACE,KAAD,EAAQC,KAAR,EAAkB;AACjC,UAAI,CAACD,KAAL,EAAY;AACV,eAAO,IAAP;AACD;;AACD,UAAME,cAAc,GAAG,MAAKP,KAAL,CAAWO,cAAlC;;AACA,UAAI,CAACA,cAAL,EAAqB;AACnB,eAAO,IAAP;AACD;;AACD,UAAID,KAAK,CAACN,KAAN,CAAYQ,QAAhB,EAA0B;AACxB,eAAO,KAAP;AACD;;AACD,aAAOD,cAAc,CAACE,IAAf,iDAA0BJ,KAA1B,EAAiCC,KAAjC,CAAP;AACD,K;;;;;;wCA/EmB;AAClB,WAAKI,gBAAL;AACD;;;8CAEyBC,S,EAAW;AACnC,UAAIA,SAAS,CAACR,UAAV,IAAwBQ,SAAS,CAACR,UAAV,KAAyB,KAAKH,KAAL,CAAWG,UAAhE,EAA4E;AAC1E;AACA,aAAKP,QAAL,CAAc;AACZJ,UAAAA,aAAa,EAAE,EADH;AAEZC,UAAAA,YAAY,EAAE;AAFF,SAAd;AAID;AACF;;;yCAEoB;AACnB,WAAKiB,gBAAL;AACD;;;uCAckB;AACjB,UAAME,KAAK,GAAGC,qBAASC,WAAT,CAAqB,IAArB,EAA2BC,WAAzC;;AACA,UAAIH,KAAK,KAAK,KAAKI,KAAL,CAAWtB,aAAzB,EAAwC;AACtC,aAAKE,QAAL,CAAc;AAAEF,UAAAA,aAAa,EAAEkB;AAAjB,SAAd;AACD;AACF;;;sCAEiB;AAChB,aAAO,KAAKK,QAAZ;AACD;;;sCAEiB;AAChB,aAAO,KAAKpB,OAAL,CAAaqB,eAAb,EAAP;AACD;;;gDAE2B;AAC1B,UAAMlB,KAAK,GAAG,KAAKA,KAAnB;AACA,UAAImB,cAAc,GAAGnB,KAAK,CAACmB,cAA3B;;AACA,UAAI,CAACA,cAAD,IAAmBnB,KAAK,CAACoB,SAA7B,EAAwC;AACtCD,QAAAA,cAAc,aAAM,KAAKE,oBAAL,EAAN,cAAqCrB,KAAK,CAACoB,SAA3C,CAAd;AACD;;AACD,aAAOD,cAAP;AACD;;;2CAEsB;AACrB,uBAAU,KAAKnB,KAAL,CAAWsB,SAArB;AACD;;;oCAyBeC,S,EAAW;AAAA;;AACzB,UAAMC,UAAU,GAAG,EAAnB;AACA,WAAKhC,aAAL,GAAqB,EAArB;AACA,iCAAgB+B,SAAhB,EAA2B,UAACjB,KAAD,EAAQmB,KAAR,EAAeC,GAAf,EAAuB;AAChD,YAAI,MAAI,CAACnB,cAAL,CAAoB,MAAI,CAACP,KAAL,CAAWG,UAA/B,EAA2CG,KAA3C,CAAJ,EAAuD;AACrDkB,UAAAA,UAAU,CAACG,IAAX,CAAgBD,GAAhB;;AACA,UAAA,MAAI,CAAClC,aAAL,CAAmBmC,IAAnB,CAAwBrB,KAAK,CAACsB,GAA9B;AACD;AACF,OALD,EAHyB,CAUzB;;AACA,UAAMC,aAAa,GAAG,EAAtB;AACAL,MAAAA,UAAU,CAACM,OAAX,CAAmB,UAAAJ,GAAG,EAAI;AACxB,YAAMK,GAAG,GAAGL,GAAG,CAACM,KAAJ,CAAU,GAAV,CAAZ;AACAD,QAAAA,GAAG,CAACE,MAAJ,CAAW,UAACC,GAAD,EAAMC,GAAN,EAAc;AACvB,cAAMC,GAAG,aAAMF,GAAN,cAAaC,GAAb,CAAT;;AACA,cAAIN,aAAa,CAACzB,OAAd,CAAsBgC,GAAtB,IAA6B,CAAjC,EAAoC;AAClCP,YAAAA,aAAa,CAACF,IAAd,CAAmBS,GAAnB;AACD;;AACD,iBAAOA,GAAP;AACD,SAND;AAOD,OATD;AAUA,UAAMC,oBAAoB,GAAG,EAA7B;AACA,iCAAgBd,SAAhB,EAA2B,UAACjB,KAAD,EAAQmB,KAAR,EAAeC,GAAf,EAAuB;AAChD,YAAIG,aAAa,CAACzB,OAAd,CAAsBsB,GAAtB,IAA6B,CAAC,CAAlC,EAAqC;AACnCW,UAAAA,oBAAoB,CAACV,IAArB,CAA0B;AAAEW,YAAAA,IAAI,EAAEhC,KAAR;AAAeoB,YAAAA,GAAG,EAAHA;AAAf,WAA1B;AACD;AACF,OAJD;AAMA,UAAMa,cAAc,GAAG,2BAAgBF,oBAAhB,CAAvB;;AAEA,UAAMG,SAAS,GAAG,SAAZA,SAAY,CAAAC,QAAQ,EAAI;AAC5B,eAAOA,QAAQ,CAACC,GAAT,CAAa,UAAApC,KAAK,EAAI;AAC3B,cAAIA,KAAK,CAACmC,QAAV,EAAoB;AAClB,mBAAO,yBAAanC,KAAK,CAACgC,IAAnB,EAAyB,EAAzB,EAA6BE,SAAS,CAAClC,KAAK,CAACmC,QAAP,CAAtC,CAAP;AACD;;AACD,iBAAOnC,KAAK,CAACgC,IAAb;AACD,SALM,CAAP;AAMD,OAPD;;AAQA,aAAOE,SAAS,CAACD,cAAD,CAAhB;AACD;;;+BAEUI,I,EAAMC,e,EAAiBC,Y,EAAcC,Q,EAAU;AACxD,UAAM9C,KAAK,GAAG,KAAKA,KAAnB;AAEA,UAAM+C,OAAO,GAAG;AACdD,QAAAA,QAAQ,EAARA,QADc;AAEdxB,QAAAA,SAAS,YAAKtB,KAAK,CAACsB,SAAX,UAFK;AAGd0B,QAAAA,QAAQ,EAAEhD,KAAK,CAACiD,QAHF;AAIdC,QAAAA,QAAQ,EAAElD,KAAK,CAACmD,QAJF;AAKdC,QAAAA,gBAAgB,EAAEpD,KAAK,CAACqD,oBALV;AAMdC,QAAAA,mBAAmB,EAAEtD,KAAK,CAACuD,uBANb;AAOdhD,QAAAA,cAAc,EAAE,KAAKiD;AAPP,OAAhB;;AAUA,UAAIxD,KAAK,CAACyD,aAAV,EAAyB;AACvBV,QAAAA,OAAO,CAACW,UAAR,GAAqB,KAArB;AACAX,QAAAA,OAAO,CAACY,SAAR,GAAoB3D,KAAK,CAACyD,aAA1B;AACAV,QAAAA,OAAO,CAACa,OAAR,GAAkB5D,KAAK,CAAC6D,QAAxB;AACAd,QAAAA,OAAO,CAACe,aAAR,GAAwB9D,KAAK,CAAC+D,iBAA9B;;AACA,YAAI/D,KAAK,CAACG,UAAV,EAAsB;AACpB;AACA4C,UAAAA,OAAO,CAACe,aAAR,GAAwB,IAAxB;AACD,SAHD,MAGO;AACLf,UAAAA,OAAO,CAACiB,gBAAR,GAA2BhE,KAAK,CAACgE,gBAAjC;AACD;;AACD,YAAIjB,OAAO,CAACgB,iBAAR,IAA6BnB,eAAe,CAACqB,MAAjD,EAAyD;AACvDlB,UAAAA,OAAO,CAACmB,WAAR,GAAsB;AAAEC,YAAAA,OAAO,EAAExB,IAAX;AAAiByB,YAAAA,WAAW,EAAExB;AAA9B,WAAtB;AACD,SAFD,MAEO;AACLG,UAAAA,OAAO,CAACmB,WAAR,GAAsBvB,IAAtB;AACD;AACF,OAhBD,MAgBO;AACLI,QAAAA,OAAO,CAACsB,YAAR,GAAuB1B,IAAvB;AACAI,QAAAA,OAAO,CAACc,QAAR,GAAmB7D,KAAK,CAAC6D,QAAzB;AACD,OAhCuD,CAkCxD;;;AACA,UAAI,CAACd,OAAO,CAACK,gBAAT,IAA6B,CAACL,OAAO,CAACO,mBAAtC,IAA6D,CAACtD,KAAK,CAACsE,QAAxE,EAAkF;AAChFvB,QAAAA,OAAO,CAACpD,YAAR,GAAuBgD,IAAvB;AACD;;AACDI,MAAAA,OAAO,CAACwB,gBAAR,GAA2B,IAA3B;AACAxB,MAAAA,OAAO,CAACyB,QAAR,GAAmB,KAAKA,QAAxB;;AACA,UAAI,KAAKhF,aAAL,IAAsB,KAAKA,aAAL,CAAmByE,MAA7C,EAAqD;AACnDlB,QAAAA,OAAO,CAACpD,YAAR,GAAuB,KAAKH,aAA5B;AACD;;AACD,UAAI,KAAKwB,KAAL,CAAWvB,YAAf,EAA6B;AAC3BsD,QAAAA,OAAO,CAACpD,YAAR,GAAuB,KAAKqB,KAAL,CAAWxB,aAAlC;AACAuD,QAAAA,OAAO,CAACwB,gBAAR,GAA2B,KAA3B;AACD,OA9CuD,CAgDxD;;;AACA,UAAIvE,KAAK,CAACsE,QAAV,EAAoB;AAClBvB,QAAAA,OAAO,CAACuB,QAAR,GAAmBtE,KAAK,CAACsE,QAAzB;AACD;;AAED,aACE,gCAAC,gBAAD;AAAM,QAAA,GAAG,EAAE,mBAAQ,IAAR,EAAc,UAAd;AAAX,SAA0CvB,OAA1C,GACGF,YADH,CADF;AAKD;;;6BAEQ;AAAA;;AACP,UAAM7C,KAAK,GAAG,KAAKA,KAAnB;AACA,UAAM8C,QAAQ,GAAG9C,KAAK,CAAC8C,QAAvB;AACA,UAAM2B,iBAAiB,GAAG,KAAKpD,oBAAL,EAA1B;AACA,UAAMqD,cAAc,4EACjB1E,KAAK,CAAC2E,iBADW,EACS,CAAC,CAAC3E,KAAK,CAAC2E,iBADjB,+DAEdF,iBAFc,eAEQ3B,QAAQ,GAAG,UAAH,GAAgB,QAFhC,GAE6C,CAF7C,mBAApB;AAIA,UAAI8B,OAAO,GAAG5E,KAAK,CAAC4E,OAApB;AACA,UAAMC,MAAM,GAAG/B,QAAQ,IAAI,CAAC9C,KAAK,CAAC8E,UAAnB,GAAgC,IAAhC,GACb;AAAM,QAAA,SAAS,YAAKL,iBAAL;AAAf,SAAiDzE,KAAK,CAAC+E,YAAvD,CADF;;AAIA,UAAMvC,SAAS,GAAG,SAAZA,SAAY,CAAAC,QAAQ,EAAI;AAC5B;AACA,eAAO,yBAAQA,QAAR,EAAkBC,GAAlB,CAAsB,SAASsC,OAAT,CAAiB1E,KAAjB,EAAwB;AAAE;AACrD,cAAI,CAACA,KAAL,EAAY;AACV,mBAAO,IAAP;AACD;;AACD,cAAIA,KAAK,IAAIA,KAAK,CAACN,KAAN,CAAYyC,QAAzB,EAAmC;AACjC;AACA,mBACE,gCAAC,cAAD,gCAAcnC,KAAK,CAACN,KAApB;AAA2B,cAAA,GAAG,EAAEM,KAAK,CAACsB;AAAtC,gBACGY,SAAS,CAAClC,KAAK,CAACN,KAAN,CAAYyC,QAAb,CADZ,CADF;AAKD;;AACD,iBAAO,gCAAC,cAAD,gCAAcnC,KAAK,CAACN,KAApB;AAA2B,YAAA,GAAG,EAAEM,KAAK,CAACsB;AAAtC,aAAP;AACD,SAbM,CAAP;AAcD,OAhBD,CAbO,CA8BP;;;AACA,UAAIL,SAAJ;;AACA,UAAIvB,KAAK,CAACiF,cAAN,IAAwB,KAAK1D,SAAjC,EAA4C;AAC1CA,QAAAA,SAAS,GAAG,KAAKA,SAAjB;AACD,OAFD,MAEO;AACLA,QAAAA,SAAS,GAAGiB,SAAS,CAACxC,KAAK,CAACkF,QAAN,IAAkBlF,KAAK,CAACuB,SAAzB,CAArB;AACA,aAAKA,SAAL,GAAiBA,SAAjB;AACD,OArCM,CAsCP;;;AAEA,UAAIvB,KAAK,CAACG,UAAV,EAAsB;AACpBoB,QAAAA,SAAS,GAAG,KAAK4D,eAAL,CAAqB5D,SAArB,CAAZ;AACD;;AAED,UAAMoB,IAAI,GAAG,EAAb;AACA,UAAMC,eAAe,GAAG,EAAxB;AACA,iCAAgBrB,SAAhB,EAA2B,UAACjB,KAAD,EAAW;AACpC,YAAIN,KAAK,CAACoF,KAAN,CAAYC,IAAZ,CAAiB,UAAAC,IAAI;AAAA,iBAAIA,IAAI,CAACF,KAAL,KAAe,6BAAkB9E,KAAlB,CAAnB;AAAA,SAArB,CAAJ,EAAuE;AACrEqC,UAAAA,IAAI,CAAChB,IAAL,CAAUrB,KAAK,CAACsB,GAAhB;AACD;;AACD,YAAI5B,KAAK,CAACuF,iBAAN,IACFvF,KAAK,CAACuF,iBAAN,CAAwBF,IAAxB,CAA6B,UAAAC,IAAI;AAAA,iBAAIA,IAAI,CAACF,KAAL,KAAe,6BAAkB9E,KAAlB,CAAnB;AAAA,SAAjC,CADF,EACiF;AAC/EsC,UAAAA,eAAe,CAACjB,IAAhB,CAAqBrB,KAAK,CAACsB,GAA3B;AACD;AACF,OARD;AAUA,UAAI4D,eAAJ;;AACA,UAAI,CAACjE,SAAS,CAAC0C,MAAf,EAAuB;AACrB,YAAIjE,KAAK,CAACwF,eAAV,EAA2B;AACzBA,UAAAA,eAAe,GACb;AAAM,YAAA,SAAS,YAAKxF,KAAK,CAACsB,SAAX;AAAf,aACGtB,KAAK,CAACwF,eADT,CADF;AAKD,SAND,MAMO,IAAI,CAACX,MAAL,EAAa;AAClBD,UAAAA,OAAO,GAAG,KAAV;AACD;AACF;;AACD,UAAMa,YAAY,GAChB,6CACGZ,MADH,EAEGW,eAAe,IAAI,KAAKE,UAAL,CAAgB/C,IAAhB,EAAsBC,eAAtB,EAAuCrB,SAAvC,EAAkDuB,QAAlD,CAFtB,CADF;;AAOA,UAAM6C,UAAU,sCAAQ3F,KAAK,CAAC4F,aAAd,CAAhB;AACA,UAAMC,SAAS,GAAG7F,KAAK,CAAC8F,wBAAN,GAAiC,OAAjC,GAA2C,UAA7D;;AACA,UAAI,KAAK9E,KAAL,CAAWtB,aAAf,EAA8B;AAC5BiG,QAAAA,UAAU,CAACE,SAAD,CAAV,aAA2B,KAAK7E,KAAL,CAAWtB,aAAtC;AACD;;AAED,aACE,gCAAC,mBAAD;AACE,QAAA,MAAM,EAAEM,KAAK,CAACQ,QAAN,GAAiB,EAAjB,GAAsB,CAAC,OAAD,CADhC;AAEE,QAAA,GAAG,EAAE,mBAAQ,IAAR,EAAc,SAAd,CAFP;AAGE,QAAA,cAAc,EAAC,YAHjB;AAIE,QAAA,iBAAiB,EAAEzB,mBAJrB;AAKE,QAAA,UAAU,EAAEiB,KAAK,CAAC+F,kBALpB;AAME,QAAA,SAAS,EAAEtB,iBANb;AAOE,QAAA,mBAAmB,EAAE,KAAKuB,yBAAL,EAPvB;AAQE,QAAA,oBAAoB,EAAEhG,KAAK,CAACiG,uBAR9B;AASE,QAAA,KAAK,EAAER,YATT;AAUE,QAAA,YAAY,EAAEb,OAVhB;AAWE,QAAA,iBAAiB,EAAE5E,KAAK,CAACkG,iBAX3B;AAYE,QAAA,cAAc,EAAE,4BAAWxB,cAAX,CAZlB;AAaE,QAAA,UAAU,EAAEiB;AAbd,SAeG,KAAK3F,KAAL,CAAWyC,QAfd,CADF;AAmBD;;;EA9SyB0D,gB;;iCAAtB5G,a,eACe;AACjBuG,EAAAA,wBAAwB,EAAEM,sBAAUC,IADnB;AAEjBN,EAAAA,kBAAkB,EAAEK,sBAAUE,MAFb;AAGjB1B,EAAAA,OAAO,EAAEwB,sBAAUC,IAHF;AAIjB9F,EAAAA,cAAc,EAAE6F,sBAAUG,GAJT;AAKjBhF,EAAAA,SAAS,EAAE6E,sBAAUG,GALJ;AAMjBpG,EAAAA,UAAU,EAAEiG,sBAAUI,MANL;AAOjBlF,EAAAA,SAAS,EAAE8E,sBAAUI,MAPJ;AAQjB9B,EAAAA,cAAc,EAAE0B,sBAAUI,MART;AASjB/D,EAAAA,QAAQ,EAAE2D,sBAAUG;AATH,C;eAgTNhH,a","sourcesContent":["import React, { cloneElement, Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport classnames from 'classnames';\nimport Trigger from '../trigger';\nimport Tree, { TreeNode } from '../../tree';\nimport { flatToHierarchy, getValuePropValue, labelCompatible, loopAllChildren, saveRef, } from './util';\nimport toArray from '../util/Children/toArray';\n\nconst BUILT_IN_PLACEMENTS = {\n  bottomLeft: {\n    points: ['tl', 'bl'],\n    offset: [0, 4],\n    overflow: {\n      adjustX: 0,\n      adjustY: 1,\n    },\n  },\n  topLeft: {\n    points: ['bl', 'tl'],\n    offset: [0, -4],\n    overflow: {\n      adjustX: 0,\n      adjustY: 1,\n    },\n  },\n};\n\nclass SelectTrigger extends Component {\n  static propTypes = {\n    dropdownMatchSelectWidth: PropTypes.bool,\n    dropdownPopupAlign: PropTypes.object,\n    visible: PropTypes.bool,\n    filterTreeNode: PropTypes.any,\n    treeNodes: PropTypes.any,\n    inputValue: PropTypes.string,\n    prefixCls: PropTypes.string,\n    popupClassName: PropTypes.string,\n    children: PropTypes.any,\n  };\n\n  state = {\n    _expandedKeys: [],\n    fireOnExpand: false,\n    dropdownWidth: null,\n  };\n\n  componentDidMount() {\n    this.setDropdownWidth();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.inputValue && nextProps.inputValue !== this.props.inputValue) {\n      // set autoExpandParent to true\n      this.setState({\n        _expandedKeys: [],\n        fireOnExpand: false,\n      });\n    }\n  }\n\n  componentDidUpdate() {\n    this.setDropdownWidth();\n  }\n\n  onExpand = (expandedKeys) => {\n    // rerender\n    this.setState({\n      _expandedKeys: expandedKeys,\n      fireOnExpand: true,\n    }, () => {\n      if (this.trigger && this.trigger.forcePopupAlign) {\n        this.trigger.forcePopupAlign();\n      }\n    });\n  };\n\n  setDropdownWidth() {\n    const width = ReactDOM.findDOMNode(this).offsetWidth;\n    if (width !== this.state.dropdownWidth) {\n      this.setState({ dropdownWidth: width });\n    }\n  }\n\n  getPopupEleRefs() {\n    return this.popupEle;\n  }\n\n  getPopupDOMNode() {\n    return this.trigger.getPopupDomNode();\n  }\n\n  getDropdownTransitionName() {\n    const props = this.props;\n    let transitionName = props.transitionName;\n    if (!transitionName && props.animation) {\n      transitionName = `${this.getDropdownPrefixCls()}-${props.animation}`;\n    }\n    return transitionName;\n  }\n\n  getDropdownPrefixCls() {\n    return `${this.props.prefixCls}-dropdown`;\n  }\n\n  highlightTreeNode = (treeNode) => {\n    const props = this.props;\n    const filterVal = treeNode.props[labelCompatible(props.treeNodeFilterProp)];\n    if (typeof filterVal === 'string') {\n      return props.inputValue && filterVal.indexOf(props.inputValue) > -1;\n    }\n    return false;\n  };\n\n  filterTreeNode = (input, child) => {\n    if (!input) {\n      return true;\n    }\n    const filterTreeNode = this.props.filterTreeNode;\n    if (!filterTreeNode) {\n      return true;\n    }\n    if (child.props.disabled) {\n      return false;\n    }\n    return filterTreeNode.call(this, input, child);\n  };\n\n  processTreeNode(treeNodes) {\n    const filterPoss = [];\n    this._expandedKeys = [];\n    loopAllChildren(treeNodes, (child, index, pos) => {\n      if (this.filterTreeNode(this.props.inputValue, child)) {\n        filterPoss.push(pos);\n        this._expandedKeys.push(child.key);\n      }\n    });\n\n    // Include the filtered nodes's ancestral nodes.\n    const processedPoss = [];\n    filterPoss.forEach(pos => {\n      const arr = pos.split('-');\n      arr.reduce((pre, cur) => {\n        const res = `${pre}-${cur}`;\n        if (processedPoss.indexOf(res) < 0) {\n          processedPoss.push(res);\n        }\n        return res;\n      });\n    });\n    const filterNodesPositions = [];\n    loopAllChildren(treeNodes, (child, index, pos) => {\n      if (processedPoss.indexOf(pos) > -1) {\n        filterNodesPositions.push({ node: child, pos });\n      }\n    });\n\n    const hierarchyNodes = flatToHierarchy(filterNodesPositions);\n\n    const recursive = children => {\n      return children.map(child => {\n        if (child.children) {\n          return cloneElement(child.node, {}, recursive(child.children));\n        }\n        return child.node;\n      });\n    };\n    return recursive(hierarchyNodes);\n  }\n\n  renderTree(keys, halfCheckedKeys, newTreeNodes, multiple) {\n    const props = this.props;\n\n    const trProps = {\n      multiple,\n      prefixCls: `${props.prefixCls}-tree`,\n      showIcon: props.treeIcon,\n      showLine: props.treeLine,\n      defaultExpandAll: props.treeDefaultExpandAll,\n      defaultExpandedKeys: props.treeDefaultExpandedKeys,\n      filterTreeNode: this.highlightTreeNode,\n    };\n\n    if (props.treeCheckable) {\n      trProps.selectable = false;\n      trProps.checkable = props.treeCheckable;\n      trProps.onCheck = props.onSelect;\n      trProps.checkStrictly = props.treeCheckStrictly;\n      if (props.inputValue) {\n        // enable checkStrictly when search tree.\n        trProps.checkStrictly = true;\n      } else {\n        trProps._treeNodesStates = props._treeNodesStates;\n      }\n      if (trProps.treeCheckStrictly && halfCheckedKeys.length) {\n        trProps.checkedKeys = { checked: keys, halfChecked: halfCheckedKeys };\n      } else {\n        trProps.checkedKeys = keys;\n      }\n    } else {\n      trProps.selectedKeys = keys;\n      trProps.onSelect = props.onSelect;\n    }\n\n    // expand keys\n    if (!trProps.defaultExpandAll && !trProps.defaultExpandedKeys && !props.loadData) {\n      trProps.expandedKeys = keys;\n    }\n    trProps.autoExpandParent = true;\n    trProps.onExpand = this.onExpand;\n    if (this._expandedKeys && this._expandedKeys.length) {\n      trProps.expandedKeys = this._expandedKeys;\n    }\n    if (this.state.fireOnExpand) {\n      trProps.expandedKeys = this.state._expandedKeys;\n      trProps.autoExpandParent = false;\n    }\n\n    // async loadData\n    if (props.loadData) {\n      trProps.loadData = props.loadData;\n    }\n\n    return (\n      <Tree ref={saveRef(this, 'popupEle')} {...trProps}>\n        {newTreeNodes}\n      </Tree>\n    );\n  }\n\n  render() {\n    const props = this.props;\n    const multiple = props.multiple;\n    const dropdownPrefixCls = this.getDropdownPrefixCls();\n    const popupClassName = {\n      [props.dropdownClassName]: !!props.dropdownClassName,\n      [`${dropdownPrefixCls}--${multiple ? 'multiple' : 'single'}`]: 1,\n    };\n    let visible = props.visible;\n    const search = multiple || !props.showSearch ? null : (\n      <span className={`${dropdownPrefixCls}-search`}>{props.inputElement}</span>\n    );\n\n    const recursive = children => {\n      // Note: if use `React.Children.map`, the node's key will be modified.\n      return toArray(children).map(function handler(child) { // eslint-disable-line\n        if (!child) {\n          return null;\n        }\n        if (child && child.props.children) {\n          // null or String has no Prop\n          return (\n            <TreeNode {...child.props} key={child.key}>\n              {recursive(child.props.children)}\n            </TreeNode>\n          );\n        }\n        return <TreeNode {...child.props} key={child.key} />;\n      });\n    };\n    // const s = Date.now();\n    let treeNodes;\n    if (props._cachetreeData && this.treeNodes) {\n      treeNodes = this.treeNodes;\n    } else {\n      treeNodes = recursive(props.treeData || props.treeNodes);\n      this.treeNodes = treeNodes;\n    }\n    // console.log(Date.now()-s);\n\n    if (props.inputValue) {\n      treeNodes = this.processTreeNode(treeNodes);\n    }\n\n    const keys = [];\n    const halfCheckedKeys = [];\n    loopAllChildren(treeNodes, (child) => {\n      if (props.value.some(item => item.value === getValuePropValue(child))) {\n        keys.push(child.key);\n      }\n      if (props.halfCheckedValues &&\n        props.halfCheckedValues.some(item => item.value === getValuePropValue(child))) {\n        halfCheckedKeys.push(child.key);\n      }\n    });\n\n    let notFoundContent;\n    if (!treeNodes.length) {\n      if (props.notFoundContent) {\n        notFoundContent = (\n          <span className={`${props.prefixCls}-not-found`}>\n            {props.notFoundContent}\n          </span>\n        );\n      } else if (!search) {\n        visible = false;\n      }\n    }\n    const popupElement = (\n      <div>\n        {search}\n        {notFoundContent || this.renderTree(keys, halfCheckedKeys, treeNodes, multiple)}\n      </div>\n    );\n\n    const popupStyle = { ...props.dropdownStyle };\n    const widthProp = props.dropdownMatchSelectWidth ? 'width' : 'minWidth';\n    if (this.state.dropdownWidth) {\n      popupStyle[widthProp] = `${this.state.dropdownWidth}px`;\n    }\n\n    return (\n      <Trigger\n        action={props.disabled ? [] : ['click']}\n        ref={saveRef(this, 'trigger')}\n        popupPlacement=\"bottomLeft\"\n        builtinPlacements={BUILT_IN_PLACEMENTS}\n        popupAlign={props.dropdownPopupAlign}\n        prefixCls={dropdownPrefixCls}\n        popupTransitionName={this.getDropdownTransitionName()}\n        onPopupVisibleChange={props.onDropdownVisibleChange}\n        popup={popupElement}\n        popupVisible={visible}\n        getPopupContainer={props.getPopupContainer}\n        popupClassName={classnames(popupClassName)}\n        popupStyle={popupStyle}\n      >\n        {this.props.children}\n      </Trigger>\n    );\n  }\n}\n\nexport default SelectTrigger;\n"]}