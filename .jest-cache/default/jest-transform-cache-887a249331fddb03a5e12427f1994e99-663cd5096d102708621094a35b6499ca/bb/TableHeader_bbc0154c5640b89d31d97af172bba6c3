61acd64bbd5bc945baf7136eec283aaa
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = TableHeader;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _TableHeaderRow = _interopRequireDefault(require("./TableHeaderRow"));

function getHeaderRows(columns) {
  var currentRow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var rows = arguments.length > 2 ? arguments[2] : undefined;
  rows = rows || [];
  rows[currentRow] = rows[currentRow] || [];
  columns.forEach(function (column) {
    if (column.rowSpan && rows.length < column.rowSpan) {
      while (rows.length < column.rowSpan) {
        rows.push([]);
      }
    }

    var cell = {
      key: column.key,
      className: column.className || '',
      children: column.title,
      tabIndex: -1,
      column: column
    };

    if (column.children) {
      getHeaderRows(column.children, currentRow + 1, rows);
    }

    if ('colSpan' in column) {
      cell.colSpan = column.colSpan;
    }

    if ('rowSpan' in column) {
      cell.rowSpan = column.rowSpan;
    }

    if (cell.colSpan !== 0) {
      rows[currentRow].push(cell);
    }
  });
  return rows.filter(function (row) {
    return row.length > 0;
  });
}

function TableHeader(props, _ref) {
  var table = _ref.table;
  var components = table.components;
  var _table$props = table.props,
      prefixCls = _table$props.prefixCls,
      showHeader = _table$props.showHeader,
      onHeaderRow = _table$props.onHeaderRow;
  var expander = props.expander,
      columns = props.columns,
      fixed = props.fixed;

  if (!showHeader) {
    return null;
  }

  var rows = getHeaderRows(columns);
  expander.renderExpandIndentCell(rows, fixed);
  var HeaderWrapper = components.header.wrapper;
  return _react["default"].createElement(HeaderWrapper, {
    className: "".concat(prefixCls, "-thead")
  }, rows.map(function (row, index) {
    return _react["default"].createElement(_TableHeaderRow["default"], {
      key: index,
      index: index,
      fixed: fixed,
      columns: columns,
      rows: rows,
      row: row,
      components: components,
      onHeaderRow: onHeaderRow
    });
  }));
}

TableHeader.propTypes = {
  fixed: _propTypes["default"].string,
  columns: _propTypes["default"].array.isRequired,
  expander: _propTypes["default"].object.isRequired,
  onHeaderRow: _propTypes["default"].func
};
TableHeader.contextTypes = {
  table: _propTypes["default"].any
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRhYmxlSGVhZGVyLmpzeCJdLCJuYW1lcyI6WyJnZXRIZWFkZXJSb3dzIiwiY29sdW1ucyIsImN1cnJlbnRSb3ciLCJyb3dzIiwiZm9yRWFjaCIsImNvbHVtbiIsInJvd1NwYW4iLCJsZW5ndGgiLCJwdXNoIiwiY2VsbCIsImtleSIsImNsYXNzTmFtZSIsImNoaWxkcmVuIiwidGl0bGUiLCJ0YWJJbmRleCIsImNvbFNwYW4iLCJmaWx0ZXIiLCJyb3ciLCJUYWJsZUhlYWRlciIsInByb3BzIiwidGFibGUiLCJjb21wb25lbnRzIiwicHJlZml4Q2xzIiwic2hvd0hlYWRlciIsIm9uSGVhZGVyUm93IiwiZXhwYW5kZXIiLCJmaXhlZCIsInJlbmRlckV4cGFuZEluZGVudENlbGwiLCJIZWFkZXJXcmFwcGVyIiwiaGVhZGVyIiwid3JhcHBlciIsIm1hcCIsImluZGV4IiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwic3RyaW5nIiwiYXJyYXkiLCJpc1JlcXVpcmVkIiwib2JqZWN0IiwiZnVuYyIsImNvbnRleHRUeXBlcyIsImFueSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBRUEsU0FBU0EsYUFBVCxDQUF1QkMsT0FBdkIsRUFBc0Q7QUFBQSxNQUF0QkMsVUFBc0IsdUVBQVQsQ0FBUztBQUFBLE1BQU5DLElBQU07QUFDcERBLEVBQUFBLElBQUksR0FBR0EsSUFBSSxJQUFJLEVBQWY7QUFDQUEsRUFBQUEsSUFBSSxDQUFDRCxVQUFELENBQUosR0FBbUJDLElBQUksQ0FBQ0QsVUFBRCxDQUFKLElBQW9CLEVBQXZDO0FBRUFELEVBQUFBLE9BQU8sQ0FBQ0csT0FBUixDQUFnQixVQUFBQyxNQUFNLEVBQUk7QUFDeEIsUUFBSUEsTUFBTSxDQUFDQyxPQUFQLElBQWtCSCxJQUFJLENBQUNJLE1BQUwsR0FBY0YsTUFBTSxDQUFDQyxPQUEzQyxFQUFvRDtBQUNsRCxhQUFPSCxJQUFJLENBQUNJLE1BQUwsR0FBY0YsTUFBTSxDQUFDQyxPQUE1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QUFPLEVBQUVpQyxzQkFBVUUsS0FBVixDQUFnQkMsVUFGSDtBQUd0QlosRUFBQUEsUUFBUSxFQUFFUyxzQkFBVUksTUFBVixDQUFpQkQsVUFITDtBQUl0QmIsRUFBQUEsV0FBVyxFQUFFVSxzQkFBVUs7QUFKRCxDQUF4QjtBQU9BckIsV0FBVyxDQUFDc0IsWUFBWixHQUEyQjtBQUN6QnBCLEVBQUFBLEtBQUssRUFBRWMsc0JBQVVPO0FBRFEsQ0FBM0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBUYWJsZUhlYWRlclJvdyBmcm9tICcuL1RhYmxlSGVhZGVyUm93JztcblxuZnVuY3Rpb24gZ2V0SGVhZGVyUm93cyhjb2x1bW5zLCBjdXJyZW50Um93ID0gMCwgcm93cykge1xuICByb3dzID0gcm93cyB8fCBbXTtcbiAgcm93c1tjdXJyZW50Um93XSA9IHJvd3NbY3VycmVudFJvd10gfHwgW107XG5cbiAgY29sdW1ucy5mb3JFYWNoKGNvbHVtbiA9PiB7XG4gICAgaWYgKGNvbHVtbi5yb3dTcGFuICYmIHJvd3MubGVuZ3RoIDwgY29sdW1uLnJvd1NwYW4pIHtcbiAgICAgIHdoaWxlIChyb3dzLmxlbmd0aCA8IGNvbHVtbi5yb3dTcGFuKSB7XG4gICAgICAgIHJvd3MucHVzaChbXSk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGNlbGwgPSB7XG4gICAgICBrZXk6IGNvbHVtbi5rZXksXG4gICAgICBjbGFzc05hbWU6IGNvbHVtbi5jbGFzc05hbWUgfHwgJycsXG4gICAgICBjaGlsZHJlbjogY29sdW1uLnRpdGxlLFxuICAgICAgdGFiSW5kZXg6IC0xLFxuICAgICAgY29sdW1uLFxuICAgIH07XG4gICAgaWYgKGNvbHVtbi5jaGlsZHJlbikge1xuICAgICAgZ2V0SGVhZGVyUm93cyhjb2x1bW4uY2hpbGRyZW4sIGN1cnJlbnRSb3cgKyAxLCByb3dzKTtcbiAgICB9XG4gICAgaWYgKCdjb2xTcGFuJyBpbiBjb2x1bW4pIHtcbiAgICAgIGNlbGwuY29sU3BhbiA9IGNvbHVtbi5jb2xTcGFuO1xuICAgIH1cbiAgICBpZiAoJ3Jvd1NwYW4nIGluIGNvbHVtbikge1xuICAgICAgY2VsbC5yb3dTcGFuID0gY29sdW1uLnJvd1NwYW47XG4gICAgfVxuICAgIGlmIChjZWxsLmNvbFNwYW4gIT09IDApIHtcbiAgICAgIHJvd3NbY3VycmVudFJvd10ucHVzaChjZWxsKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcm93cy5maWx0ZXIocm93ID0+IHJvdy5sZW5ndGggPiAwKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gVGFibGVIZWFkZXIocHJvcHMsIHsgdGFibGUgfSkge1xuICBjb25zdCB7IGNvbXBvbmVudHMgfSA9IHRhYmxlO1xuICBjb25zdCB7IHByZWZpeENscywgc2hvd0hlYWRlciwgb25IZWFkZXJSb3cgfSA9IHRhYmxlLnByb3BzO1xuICBjb25zdCB7IGV4cGFuZGVyLCBjb2x1bW5zLCBmaXhlZCB9ID0gcHJvcHM7XG5cbiAgaWYgKCFzaG93SGVhZGVyKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCByb3dzID0gZ2V0SGVhZGVyUm93cyhjb2x1bW5zKTtcblxuICBleHBhbmRlci5yZW5kZXJFeHBhbmRJbmRlbnRDZWxsKHJvd3MsIGZpeGVkKTtcblxuICBjb25zdCBIZWFkZXJXcmFwcGVyID0gY29tcG9uZW50cy5oZWFkZXIud3JhcHBlcjtcblxuICByZXR1cm4gKFxuICAgIDxIZWFkZXJXcmFwcGVyIGNsYXNzTmFtZT17YCR7cHJlZml4Q2xzfS10aGVhZGB9PlxuICAgICAge1xuICAgICAgICByb3dzLm1hcCgocm93LCBpbmRleCkgPT4gKFxuICAgICAgICAgIDxUYWJsZUhlYWRlclJvd1xuICAgICAgICAgICAga2V5PXtpbmRleH1cbiAgICAgICAgICAgIGluZGV4PXtpbmRleH1cbiAgICAgICAgICAgIGZpeGVkPXtmaXhlZH1cbiAgICAgICAgICAgIGNvbHVtbnM9e2NvbHVtbnN9XG4gICAgICAgICAgICByb3dzPXtyb3dzfVxuICAgICAgICAgICAgcm93PXtyb3d9XG4gICAgICAgICAgICBjb21wb25lbnRzPXtjb21wb25lbnRzfVxuICAgICAgICAgICAgb25IZWFkZXJSb3c9e29uSGVhZGVyUm93fVxuICAgICAgICAgIC8+XG4gICAgICAgICkpXG4gICAgICB9XG4gICAgPC9IZWFkZXJXcmFwcGVyPlxuICApO1xufVxuXG5UYWJsZUhlYWRlci5wcm9wVHlwZXMgPSB7XG4gIGZpeGVkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjb2x1bW5zOiBQcm9wVHlwZXMuYXJyYXkuaXNSZXF1aXJlZCxcbiAgZXhwYW5kZXI6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgb25IZWFkZXJSb3c6IFByb3BUeXBlcy5mdW5jLFxufTtcblxuVGFibGVIZWFkZXIuY29udGV4dFR5cGVzID0ge1xuICB0YWJsZTogUHJvcFR5cGVzLmFueSxcbn07XG4iXX0=