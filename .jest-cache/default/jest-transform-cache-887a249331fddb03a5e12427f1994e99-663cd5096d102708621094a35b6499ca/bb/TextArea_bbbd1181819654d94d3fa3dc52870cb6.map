{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/text-area/TextArea.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { ReactNode } from 'react';\nimport { observer } from 'mobx-react';\nimport { action as mobxAction, observable, runInAction } from 'mobx';\nimport isString from 'lodash/isString';\nimport omit from 'lodash/omit';\nimport PropTypes from 'prop-types';\nimport { TextField, TextFieldProps } from '../text-field/TextField';\nimport { ResizeType, AutoSizeType } from './enum';\nimport calculateNodeHeight from './calculateNodeHeight';\n\nfunction onNextFrame(cb: () => void) {\n  if (window.requestAnimationFrame) {\n    return window.requestAnimationFrame(cb);\n  }\n  return window.setTimeout(cb, 1);\n}\n\nfunction clearNextFrameAction(nextFrameId: number) {\n  if (window.cancelAnimationFrame) {\n    window.cancelAnimationFrame(nextFrameId);\n  } else {\n    window.clearTimeout(nextFrameId);\n  }\n}\n\nexport interface TextAreaProps extends TextFieldProps {\n  cols?: number;\n  rows?: number;\n  resize?: ResizeType;\n  autoSize?: boolean | AutoSizeType;\n  placeholder?: string;\n}\n\n@observer\nexport default class TextArea<T extends TextAreaProps> extends TextField<T> {\n  static displayName = 'TextArea';\n\n  static propTypes = {\n    cols: PropTypes.number,\n    rows: PropTypes.number,\n    resize: PropTypes.oneOf([\n      ResizeType.vertical,\n      ResizeType.horizontal,\n      ResizeType.none,\n      ResizeType.both,\n    ]),\n    autoSize: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n    ...TextField.propTypes,\n  };\n\n  static defaultProps = {\n    ...TextField.defaultProps,\n    suffixCls: 'textarea',\n    resize: ResizeType.none,\n    rows: 4,\n    autoSize: false,\n    placeholder: '',\n  };\n\n  nextFrameActionId: number;\n\n  textArea: HTMLTextAreaElement;\n\n  saveTextArea = (textArea: HTMLTextAreaElement) => {\n    this.textArea = textArea;\n  };\n\n  @observable textareaStyles: {};\n\n  textStatus: boolean;\n\n  constructor(props, context) {\n    super(props, context);\n    this.textStatus = false;\n    runInAction(() => {\n      this.textareaStyles = props.autoSize || {};\n    });\n  }\n\n  componentDidMount() {\n    this.resizeTextarea();\n  }\n\n  componentWillReceiveProps(nextProps: TextAreaProps) {\n    const { value } = this.props;\n    if (value !== nextProps.value) {\n      if (this.nextFrameActionId) {\n        clearNextFrameAction(this.nextFrameActionId);\n      }\n      this.nextFrameActionId = onNextFrame(this.resizeTextarea);\n    }\n  }\n\n  getOtherProps() {\n    const { resize } = this.props;\n    const otherProps = omit(super.getOtherProps(), ['resize', 'autoSize']);\n    const { style = {} } = otherProps;\n    style.resize = resize;\n    if (resize !== ResizeType.none) {\n      style.transition = 'none';\n    }\n    otherProps.style = style;\n    return otherProps;\n  }\n\n  @mobxAction\n  resizeTextarea = () => {\n    const { autoSize } = this.props;\n    if (!autoSize || !this.textArea) {\n      return;\n    }\n    const minRows = autoSize ? (autoSize as AutoSizeType).minRows : null;\n    const maxRows = autoSize ? (autoSize as AutoSizeType).maxRows : null;\n    const minCols = autoSize ? (autoSize as AutoSizeType).minCols : null;\n    const maxCols = autoSize ? (autoSize as AutoSizeType).maxCols : null;\n    const textareaStyles = calculateNodeHeight(this.textArea, false, minRows, maxRows, minCols, maxCols);\n    if (minCols || maxCols) {\n      this.textStatus = true;\n    }\n    this.textareaStyles = textareaStyles;\n  };\n\n  renderWrapper(): ReactNode {\n    const text = this.getTextNode();\n    const { style, resize, placeholder, autoSize } = this.props;\n\n    const PropStyle = {\n      ...style,\n      ...this.textareaStyles,\n      resize,\n    };\n\n    if (autoSize) {\n      PropStyle.resize = ResizeType.vertical;\n    }\n    \n    if ( this.textStatus && resize === 'both') {\n      PropStyle.resize = ResizeType.both;\n    }\n\n    return (\n      <div key=\"wrapper\" {...this.getWrapperProps()}>\n        {this.renderPlaceHolder()}\n        <label>\n          <textarea\n            {...this.getOtherProps()}\n            style={PropStyle}\n            readOnly={!this.editable}\n            value={isString(text) ? text : this.getText(this.getValue())}\n            placeholder={placeholder}\n            ref={this.saveTextArea}\n          />\n          {this.renderFloatLabel()}\n        </label>\n      </div>\n    );\n  }\n\n  handleEnterDown() {}\n}\n"]}