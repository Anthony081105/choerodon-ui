{"version":3,"sources":["TableCell.jsx"],"names":["TableCell","e","props","record","onCellClick","column","text","Object","prototype","toString","call","indentSize","prefixCls","indent","index","expandIcon","BodyCell","component","dataIndex","render","className","length","tdProps","tabIndex","colSpan","rowSpan","isInvalidRenderCellText","children","onCell","indentText","paddingLeft","align","style","textAlign","handleClick","Component","PropTypes","object","string","number","node","any"],"mappings":"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","sourcesContent":["import React, { Component, isValidElement } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\n\nexport default class TableCell extends Component {\n  static propTypes = {\n    record: PropTypes.object,\n    prefixCls: PropTypes.string,\n    index: PropTypes.number,\n    indent: PropTypes.number,\n    indentSize: PropTypes.number,\n    column: PropTypes.object,\n    expandIcon: PropTypes.node,\n    component: PropTypes.any,\n  };\n\n  isInvalidRenderCellText(text) {\n    return text && !isValidElement(text) &&\n      Object.prototype.toString.call(text) === '[object Object]';\n  }\n\n  handleClick = (e) => {\n    const { record, column: { onCellClick } } = this.props;\n    if (onCellClick) {\n      onCellClick(record, e);\n    }\n  };\n\n  render() {\n    const {\n      record,\n      indentSize,\n      prefixCls,\n      indent,\n      index,\n      expandIcon,\n      column,\n      component: BodyCell,\n    } = this.props;\n    const { dataIndex, render, className = '' } = column;\n\n    // We should return undefined if no dataIndex is specified, but in order to\n    // be compatible with object-path's behavior, we return the record object instead.\n    let text;\n    if (typeof dataIndex === 'number') {\n      text = get(record, dataIndex);\n    } else if (!dataIndex || dataIndex.length === 0) {\n      text = record;\n    } else {\n      text = get(record, dataIndex);\n    }\n    let tdProps = {\n      tabIndex: -1,\n    };\n    let colSpan;\n    let rowSpan;\n\n    if (render) {\n      text = render(text, record, index);\n      if (this.isInvalidRenderCellText(text)) {\n        tdProps = text.props || tdProps;\n        colSpan = tdProps.colSpan;\n        rowSpan = tdProps.rowSpan;\n        text = text.children;\n      }\n    }\n\n    if (column.onCell) {\n      tdProps = { ...tdProps, ...column.onCell(record) };\n    }\n    if (this.isInvalidRenderCellText(text)) {\n      text = null;\n    }\n\n    const indentText = expandIcon ? (\n      <span\n        style={{ paddingLeft: `${indentSize * indent}px` }}\n        className={`${prefixCls}-indent indent-level-${indent}`}\n      />\n    ) : null;\n\n    if (rowSpan === 0 || colSpan === 0) {\n      return null;\n    }\n\n    if (column.align) {\n      tdProps.style = { textAlign: column.align };\n    }\n\n    return (\n      <BodyCell\n        className={className}\n        onClick={this.handleClick}\n        {...tdProps}\n      >\n        {indentText}\n        {expandIcon}\n        {text}\n      </BodyCell>\n    );\n  }\n}\n"]}