{"version":3,"sources":["ExpandableTable.jsx"],"names":["ExpandableTable","props","expanded","record","event","rowKey","destroy","preventDefault","stopPropagation","onExpandedRowsChange","onExpand","store","getState","expandedRowKeys","expandedRowIndex","indexOf","splice","setState","rows","fixed","prefixCls","expandIconAsCell","length","iconColumn","key","className","title","rowSpan","unshift","column","renderRows","index","indent","parentKey","ancestorKeys","expandedRowClassName","expandedRowRender","childrenColumnName","childrenData","nextAncestorKeys","nextIndent","push","renderExpandedRow","data","defaultExpandAllRows","defaultExpandedRowKeys","getRowKey","finnalExpandedRowKeys","i","row","concat","columnManager","expandedRowsHeight","nextProps","render","indentSize","colCount","leftLeafColumns","rightLeafColumns","leafColumns","columns","colSpan","children","components","body","cell","needIndentSpaced","some","handleExpandChange","renderExpandIndentCell","Component","PropTypes","bool","array","func","expandIconColumnIndex","number","string","object","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'mini-store';\nimport TableRow from './TableRow';\n\nclass ExpandableTable extends Component {\n  static propTypes = {\n    expandIconAsCell: PropTypes.bool,\n    expandedRowKeys: PropTypes.array,\n    expandedRowClassName: PropTypes.func,\n    defaultExpandAllRows: PropTypes.bool,\n    defaultExpandedRowKeys: PropTypes.array,\n    expandIconColumnIndex: PropTypes.number,\n    expandedRowRender: PropTypes.func,\n    childrenColumnName: PropTypes.string,\n    indentSize: PropTypes.number,\n    onExpand: PropTypes.func,\n    onExpandedRowsChange: PropTypes.func,\n    columnManager: PropTypes.object.isRequired,\n    store: PropTypes.object.isRequired,\n    prefixCls: PropTypes.string.isRequired,\n    data: PropTypes.array,\n    children: PropTypes.func.isRequired,\n  };\n\n  static defaultProps = {\n    expandIconAsCell: false,\n    expandedRowClassName: () => '',\n    expandIconColumnIndex: 0,\n    defaultExpandAllRows: false,\n    defaultExpandedRowKeys: [],\n    childrenColumnName: 'children',\n    indentSize: 15,\n    onExpand() {\n    },\n    onExpandedRowsChange() {\n    },\n  };\n\n  constructor(props) {\n    super(props);\n\n    const {\n      data,\n      childrenColumnName,\n      defaultExpandAllRows,\n      expandedRowKeys,\n      defaultExpandedRowKeys,\n      getRowKey,\n    } = props;\n\n    let finnalExpandedRowKeys = [];\n    let rows = [...data];\n\n    if (defaultExpandAllRows) {\n      for (let i = 0; i < rows.length; i++) {\n        const row = rows[i];\n        finnalExpandedRowKeys.push(getRowKey(row, i));\n        rows = rows.concat(row[childrenColumnName] || []);\n      }\n    } else {\n      finnalExpandedRowKeys = expandedRowKeys || defaultExpandedRowKeys;\n    }\n\n    this.columnManager = props.columnManager;\n    this.store = props.store;\n\n    this.store.setState({\n      expandedRowsHeight: {},\n      expandedRowKeys: finnalExpandedRowKeys,\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if ('expandedRowKeys' in nextProps) {\n      this.store.setState({\n        expandedRowKeys: nextProps.expandedRowKeys,\n      });\n    }\n  }\n\n  handleExpandChange = (expanded, record, event, rowKey, destroy = false) => {\n    if (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    const { onExpandedRowsChange, onExpand } = this.props;\n    let { expandedRowKeys } = this.store.getState();\n\n    if (expanded) {\n      // row was expaned\n      expandedRowKeys = [...expandedRowKeys, rowKey];\n    } else {\n      // row was collapse\n      const expandedRowIndex = expandedRowKeys.indexOf(rowKey);\n      if (expandedRowIndex !== -1) {\n        expandedRowKeys.splice(expandedRowIndex, 1);\n      }\n    }\n\n    if (!this.props.expandedRowKeys) {\n      this.store.setState({ expandedRowKeys });\n    }\n\n    onExpandedRowsChange(expandedRowKeys);\n    if (!destroy) {\n      onExpand(expanded, record);\n    }\n  };\n\n  renderExpandIndentCell = (rows, fixed) => {\n    const { prefixCls, expandIconAsCell } = this.props;\n    if (!expandIconAsCell || fixed === 'right' || !rows.length) {\n      return;\n    }\n\n    const iconColumn = {\n      key: 'rc-table-expand-icon-cell',\n      className: `${prefixCls}-expand-icon-th`,\n      title: '',\n      rowSpan: rows.length,\n    };\n\n    rows[0].unshift({ ...iconColumn, column: iconColumn });\n  };\n\n  renderExpandedRow(record, index, render, className, ancestorKeys, indent, fixed) {\n    const { prefixCls, expandIconAsCell, indentSize } = this.props;\n    let colCount;\n    if (fixed === 'left') {\n      colCount = this.columnManager.leftLeafColumns().length;\n    } else if (fixed === 'right') {\n      colCount = this.columnManager.rightLeafColumns().length;\n    } else {\n      colCount = this.columnManager.leafColumns().length;\n    }\n    const columns = [{\n      key: 'extra-row',\n      render: () => ({\n        props: {\n          colSpan: colCount,\n        },\n        children: fixed !== 'right' ? render(record, index, indent) : '&nbsp;',\n      }),\n    }];\n    if (expandIconAsCell && fixed !== 'right') {\n      columns.unshift({\n        key: 'expand-icon-placeholder',\n        render: () => null,\n      });\n    }\n    const parentKey = ancestorKeys[ancestorKeys.length - 1];\n    const rowKey = `${parentKey}-extra-row`;\n    const components = {\n      body: {\n        row: 'tr',\n        cell: 'td',\n      },\n    };\n\n    return (\n      <TableRow\n        key={rowKey}\n        columns={columns}\n        className={className}\n        rowKey={rowKey}\n        ancestorKeys={ancestorKeys}\n        prefixCls={`${prefixCls}-expanded-row`}\n        indentSize={indentSize}\n        indent={indent}\n        fixed={fixed}\n        components={components}\n        expandedRow\n      />\n    );\n  }\n\n  renderRows = (renderRows, rows, record, index, indent, fixed, parentKey, ancestorKeys) => {\n    const { expandedRowClassName, expandedRowRender, childrenColumnName } = this.props;\n    const childrenData = record[childrenColumnName];\n    const nextAncestorKeys = [...ancestorKeys, parentKey];\n    const nextIndent = indent + 1;\n\n    if (expandedRowRender) {\n      rows.push(\n        this.renderExpandedRow(\n          record,\n          index,\n          expandedRowRender,\n          expandedRowClassName(record, index, indent),\n          nextAncestorKeys,\n          nextIndent,\n          fixed,\n        ),\n      );\n    }\n\n    if (childrenData) {\n      rows.push(\n        ...renderRows(\n          childrenData,\n          nextIndent,\n          nextAncestorKeys,\n        )\n      );\n    }\n  };\n\n  render() {\n    const { data, childrenColumnName, children } = this.props;\n    const needIndentSpaced = data.some(record => record[childrenColumnName]);\n\n    return children({\n      props: this.props,\n      needIndentSpaced,\n      renderRows: this.renderRows,\n      handleExpandChange: this.handleExpandChange,\n      renderExpandIndentCell: this.renderExpandIndentCell,\n    });\n  }\n}\n\nexport default connect()(ExpandableTable);\n"]}