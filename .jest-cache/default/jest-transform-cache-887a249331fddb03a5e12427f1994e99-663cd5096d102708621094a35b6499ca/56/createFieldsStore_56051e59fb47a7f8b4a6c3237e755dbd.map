{"version":3,"sources":["createFieldsStore.jsx"],"names":["partOf","a","b","indexOf","length","FieldsStore","fields","initialValues","flattenedInitialValues","flattenRegisteredFields","fieldsMeta","Object","keys","forEach","name","setFieldMeta","getFieldMeta","initialValue","reduce","acc","getValueFromFields","names","getNestedFields","getFieldValue","getNestedField","fullName","getFieldError","getFieldMember","ns","getValidFieldsName","some","n","isFieldValidating","isFieldTouched","value","fieldMeta","i","fieldNames","getValidFieldsFullName","Array","isArray","isModifiedField","flattenFields","_","node","validFieldsName","getAllFieldsName","path","nowFields","nowValues","f","normalize","nowValue","field","meta","filter","hidden","maybePartialName","maybePartialNames","partialName","getValueProps","valuePropName","getField","fieldValue","map","dirty","getNotCollectedFields","member","getter","fullNames","isArrayValue","suffixNameStartIndex","slice","every","createFieldsStore"],"mappings":"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","sourcesContent":["import set from 'lodash/set';\nimport isEqual from 'lodash/isEqual';\nimport createFormField, { isFormField } from './createFormField';\nimport { flattenFields, getErrorStrs, startsWith, } from './utils';\n\nfunction partOf(a, b) {\n  return b.indexOf(a) === 0 && ['.', '['].indexOf(b[a.length]) !== -1;\n}\n\nclass FieldsStore {\n  constructor(fields) {\n    this.fields = this.flattenFields(fields);\n    this.fieldsMeta = {};\n  }\n\n  updateFields(fields) {\n    this.fields = this.flattenFields(fields);\n  }\n\n  flattenFields(fields) {\n    return flattenFields(\n      fields,\n      (_, node) => isFormField(node),\n      'You must wrap field data with `createFormField`.'\n    );\n  }\n\n  flattenRegisteredFields(fields) {\n    const validFieldsName = this.getAllFieldsName();\n    return flattenFields(\n      fields,\n      path => validFieldsName.indexOf(path) >= 0,\n      'You cannot set field before registering it.'\n    );\n  }\n\n  setFieldsInitialValue = (initialValues) => {\n    const flattenedInitialValues = this.flattenRegisteredFields(initialValues);\n    const fieldsMeta = this.fieldsMeta;\n    Object.keys(flattenedInitialValues).forEach(name => {\n      if (fieldsMeta[name]) {\n        this.setFieldMeta(name, {\n          ...this.getFieldMeta(name),\n          initialValue: flattenedInitialValues[name],\n        });\n      }\n    });\n  }\n\n  setFields(fields) {\n    const fieldsMeta = this.fieldsMeta;\n    const nowFields = {\n      ...this.fields,\n      ...fields,\n    };\n    const nowValues = {};\n    Object.keys(fieldsMeta)\n      .forEach((f) => nowValues[f] = this.getValueFromFields(f, nowFields));\n    Object.keys(nowValues).forEach((f) => {\n      const value = nowValues[f];\n      const fieldMeta = this.getFieldMeta(f);\n      if (fieldMeta && fieldMeta.normalize) {\n        const nowValue =\n                fieldMeta.normalize(value, this.getValueFromFields(f, this.fields), nowValues);\n        if (nowValue !== value) {\n          nowFields[f] = {\n            ...nowFields[f],\n            value: nowValue,\n          };\n        }\n      }\n    });\n    this.fields = nowFields;\n  }\n\n  resetFields(ns) {\n    const { fields } = this;\n    const names = ns ?\n      this.getValidFieldsFullName(ns) :\n      this.getAllFieldsName();\n    return names.reduce((acc, name) => {\n      const field = fields[name];\n      if (field && 'value' in field) {\n        acc[name] = {};\n      }\n      return acc;\n    }, {});\n  }\n\n  setFieldMeta(name, meta) {\n    this.fieldsMeta[name] = meta;\n  }\n\n  getFieldMeta(name) {\n    this.fieldsMeta[name] = this.fieldsMeta[name] || {};\n    return this.fieldsMeta[name];\n  }\n\n  getValueFromFields(name, fields) {\n    const field = fields[name];\n    if (field && 'value' in field) {\n      return field.value;\n    }\n    const fieldMeta = this.getFieldMeta(name);\n    return fieldMeta && fieldMeta.initialValue;\n  }\n\n  getAllValues = () => {\n    const { fieldsMeta, fields } = this;\n    return Object.keys(fieldsMeta)\n      .reduce((acc, name) => set(acc, name, this.getValueFromFields(name, fields)), {});\n  }\n\n  getValidFieldsName() {\n    const { fieldsMeta } = this;\n    return fieldsMeta ?\n      Object.keys(fieldsMeta).filter(name => !this.getFieldMeta(name).hidden) :\n      [];\n  }\n\n  getAllFieldsName() {\n    const { fieldsMeta } = this;\n    return fieldsMeta ? Object.keys(fieldsMeta) : [];\n  }\n\n  getValidFieldsFullName(maybePartialName) {\n    const maybePartialNames = Array.isArray(maybePartialName) ?\n      maybePartialName : [maybePartialName];\n    return this.getValidFieldsName()\n      .filter(fullName => maybePartialNames.some(partialName => (\n        fullName === partialName || (\n          startsWith(fullName, partialName) &&\n          ['.', '['].indexOf(fullName[partialName.length]) >= 0\n        )\n      )));\n  }\n\n  getFieldValuePropValue(fieldMeta) {\n    const { name, getValueProps, valuePropName } = fieldMeta;\n    const field = this.getField(name);\n    const fieldValue = 'value' in field ?\n      field.value : fieldMeta.initialValue;\n    if (getValueProps) {\n      return getValueProps(fieldValue);\n    }\n    return { [valuePropName]: fieldValue };\n  }\n\n  getField(name) {\n    return {\n      ...this.fields[name],\n      name,\n    };\n  }\n\n  getNotCollectedFields() {\n    return this.getValidFieldsName()\n      .filter(name => !this.fields[name])\n      .map(name => ({\n        name,\n        dirty: false,\n        value: this.getFieldMeta(name).initialValue,\n      }))\n      .reduce((acc, field) => set(acc, field.name, createFormField(field)), {});\n  }\n\n  getNestedAllFields() {\n    return Object.keys(this.fields)\n      .reduce(\n        (acc, name) => set(acc, name, createFormField(this.fields[name])),\n        this.getNotCollectedFields()\n      );\n  }\n\n  getFieldMember(name, member) {\n    return this.getField(name)[member];\n  }\n\n  getNestedFields(names, getter) {\n    const fields = names || this.getValidFieldsName();\n    return fields.reduce((acc, f) => set(acc, f, getter(f)), {});\n  }\n\n  getNestedField(name, getter) {\n    const fullNames = this.getValidFieldsFullName(name);\n    if (\n      fullNames.length === 0 || // Not registered\n        (fullNames.length === 1 && fullNames[0] === name) // Name already is full name.\n    ) {\n      return getter(name);\n    }\n    const isArrayValue = fullNames[0][name.length] === '[';\n    const suffixNameStartIndex = isArrayValue ? name.length : name.length + 1;\n    return fullNames\n      .reduce(\n        (acc, fullName) => set(\n          acc,\n          fullName.slice(suffixNameStartIndex),\n          getter(fullName)\n        ),\n        isArrayValue ? [] : {}\n      );\n  }\n\n  getFieldsValue = (names) => {\n    return this.getNestedFields(names, this.getFieldValue);\n  }\n\n  getFieldValue = (name) => {\n    const { fields } = this;\n    return this.getNestedField(name, (fullName) => this.getValueFromFields(fullName, fields));\n  }\n\n  getFieldsError = (names) => {\n    return this.getNestedFields(names, this.getFieldError);\n  }\n\n  getFieldError = (name) => {\n    return this.getNestedField(\n      name,\n      (fullName) => getErrorStrs(this.getFieldMember(fullName, 'errors'))\n    );\n  }\n\n  isFieldValidating = (name) => {\n    return this.getFieldMember(name, 'validating');\n  }\n\n  isFieldsValidating = (ns) => {\n    const names = ns || this.getValidFieldsName();\n    return names.some((n) => this.isFieldValidating(n));\n  }\n\n  isFieldTouched = (name) => {\n    return this.getFieldMember(name, 'touched');\n  }\n\n  isFieldsTouched = (ns) => {\n    const names = ns || this.getValidFieldsName();\n    return names.some((n) => this.isFieldTouched(n));\n  }\n\n  // @private\n  // BG: `a` and `a.b` cannot be use in the same form\n  isValidNestedFieldName(name) {\n    const names = this.getAllFieldsName();\n    return names.every(n => !partOf(n, name) && !partOf(name, n));\n  }\n\n  clearField(name) {\n    delete this.fields[name];\n    delete this.fieldsMeta[name];\n  }\n\n  isModifiedField = (name) => {\n    const value = this.getFieldValue(name);\n    const fieldMeta = this.getFieldMeta(name);\n    const initialValue =  fieldMeta && fieldMeta.initialValue;\n    if (!value && !initialValue) {\n      return false;\n    }\n    if (!isEqual(value, initialValue)) {\n      return true;\n    }\n    return false;\n  }\n\n  isModifiedFields = (names) => {\n    let i;\n    let length;\n    const fieldNames = names ?\n          this.getValidFieldsFullName(names) :\n          this.getValidFieldsName();\n    if (fieldNames && Array.isArray(fieldNames)) {\n      for (i = 0, length = fieldNames.length; i < length; i++) {\n        if (this.isModifiedField(fieldNames[i])) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n}\n\nexport default function createFieldsStore(fields) {\n  return new FieldsStore(fields);\n}\n"]}