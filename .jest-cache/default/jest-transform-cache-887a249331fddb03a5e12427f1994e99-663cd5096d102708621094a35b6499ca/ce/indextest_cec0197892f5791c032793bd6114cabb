218224b27304b56275a117c9905a1bab
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _moment = _interopRequireDefault(require("moment"));

var _enzyme = require("enzyme");

var _ = _interopRequireDefault(require(".."));

describe('Calendar', function () {
  it('Calendar should be selectable', function () {
    var onSelect = jest.fn();
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      onSelect: onSelect
    }));
    wrapper.find('.c7n-fullcalendar-cell').at(0).simulate('click');
    expect(onSelect).toHaveBeenCalledWith(expect.anything());
    var value = onSelect.mock.calls[0][0];
    expect(_moment["default"].isMoment(value)).toBe(true);
  });
  it('only Valid range should be selectable', function () {
    var onSelect = jest.fn();
    var validRange = [(0, _moment["default"])('2018-02-02'), (0, _moment["default"])('2018-02-18')];
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      onSelect: onSelect,
      validRange: validRange,
      defaultValue: (0, _moment["default"])('2018-02-02')
    }));
    wrapper.find('[title="February 1, 2018"]').at(0).simulate('click');
    wrapper.find('[title="February 2, 2018"]').at(0).simulate('click');
    expect(onSelect.mock.calls.length).toBe(1);
  });
  it('dates other than in valid range should be disabled', function () {
    var onSelect = jest.fn();
    var validRange = [(0, _moment["default"])('2018-02-02'), (0, _moment["default"])('2018-02-18')];
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      onSelect: onSelect,
      validRange: validRange,
      defaultValue: (0, _moment["default"])('2018-02-02')
    }));
    wrapper.find('[title="February 20, 2018"]').at(0).simulate('click');
    var elem = wrapper.find('[title="February 20, 2018"]').hasClass('c7n-fullcalendar-disabled-cell');
    expect(elem).toEqual(true);
    expect(onSelect.mock.calls.length).toBe(0);
  });
  it('months other than in valid range should be disabled', function () {
    var onSelect = jest.fn();
    var validRange = [(0, _moment["default"])('2018-02-02'), (0, _moment["default"])('2018-05-18')];
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      onSelect: onSelect,
      validRange: validRange,
      defaultValue: (0, _moment["default"])('2018-02-02'),
      mode: "year"
    }));
    expect(wrapper.find('[title="Jan"]').at(0).hasClass('c7n-fullcalendar-month-panel-cell-disabled')).toBe(true);
    expect(wrapper.find('[title="Feb"]').at(0).hasClass('c7n-fullcalendar-month-panel-cell-disabled')).toBe(false);
    expect(wrapper.find('[title="Jun"]').at(0).hasClass('c7n-fullcalendar-month-panel-cell-disabled')).toBe(true);
    wrapper.find('[title="Jan"]').at(0).simulate('click');
    wrapper.find('[title="Mar"]').at(0).simulate('click');
    expect(onSelect.mock.calls.length).toBe(1);
  });
  it('months other than in valid range should not be shown in header', function () {
    var validRange = [(0, _moment["default"])('2017-02-02'), (0, _moment["default"])('2018-05-18')];
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      validRange: validRange
    }));
    wrapper.find('.c7n-fullcalendar-year-select').hostNodes().simulate('click');
    wrapper.find('.c7n-select-dropdown-menu-item').first().simulate('click');
    wrapper.find('.c7n-fullcalendar-month-select').hostNodes().simulate('click'); // 2 years and 11 months

    expect(wrapper.find('.c7n-select-dropdown-menu-item').length).toBe(13);
  });
  it('getDateRange should returns a disabledDate function', function () {
    var validRange = [(0, _moment["default"])('2018-02-02'), (0, _moment["default"])('2018-05-18')];
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      validRange: validRange,
      defaultValue: (0, _moment["default"])('2018-02-02')
    }));
    var instance = wrapper.instance();
    var disabledDate = instance.getDateRange(validRange);
    expect(disabledDate((0, _moment["default"])('2018-06-02'))).toBe(true);
    expect(disabledDate((0, _moment["default"])('2018-04-02'))).toBe(false);
  });
  it('Calendar should change mode by prop', function () {
    var monthMode = 'month';
    var yearMode = 'year';
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], null));
    expect(wrapper.state().mode).toEqual(monthMode);
    wrapper.setProps({
      mode: 'year'
    });
    expect(wrapper.state().mode).toEqual(yearMode);
  });
  it('Calendar should switch mode', function () {
    var monthMode = 'month';
    var yearMode = 'year';
    var onPanelChangeStub = jest.fn();
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      mode: yearMode,
      onPanelChange: onPanelChangeStub
    }));
    expect(wrapper.state().mode).toEqual(yearMode);
    wrapper.instance().setType('date');
    expect(wrapper.state().mode).toEqual(monthMode);
    expect(onPanelChangeStub).toHaveBeenCalledTimes(1);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,