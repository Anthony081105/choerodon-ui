{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/field/utils.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAIM,SAAU,YAAV,CAAuB,KAAvB,EAAmC,KAAnC,EAAqE;AACzE,MAAI,uBAAY,KAAZ,CAAJ,EAAwB;AACtB,QAAI,0BAAS,KAAT,CAAJ,EAAqB;AAAA,mDACE,KADF;AAAA,UACZ,KADY;AAAA,UACL,GADK;;AAEnB,aAAO,CAAC,KAAK,CAAC,KAAD,CAAN,EAAe,KAAK,CAAC,GAAD,CAApB,CAAP;AACD;AACF,GALD,MAKO,IAAI,uBAAY,KAAZ,CAAJ,EAAwB;AAC7B,WAAO,KAAK,CAAC,KAAN,CAAY,CAAZ,EAAe,CAAf,CAAP;AACD;;AACD,SAAO,CAAC,SAAD,EAAY,SAAZ,CAAP;AACD;;AAEK,SAAU,cAAV,CAAyB,KAAzB,EAAuC,KAAvC,EAAyE;AAC7E,MAAI,uBAAY,KAAZ,CAAJ,EAAwB;AAAA;;AAAA,kDACD,KADC;AAAA,QACf,KADe;AAAA,QACR,GADQ;;AAEtB,6DACG,KADH,EACW,KAAK,CAAC,CAAD,CADhB,0CAEG,GAFH,EAES,KAAK,CAAC,CAAD,CAFd;AAID;;AACD,SAAO,KAAP;AACD;;AAEK,SAAU,eAAV,CAA0B,KAA1B,EAAsC,KAAtC,EAAwE;AAC5E,MAAI,CAAC,uBAAM,KAAN,CAAL,EAAmB;AACjB,QAAM,aAAa,GAAG,uBAAY,KAAZ,IAAqB,KAAK,CAAC,KAAN,EAArB,GAAqC,CAAC,KAAD,CAA3D;;AACA,QAAI,KAAJ,EAAW;AACT,aAAO,aAAa,CAAC,GAAd,CAAkB,UAAA,IAAI;AAAA,eAAI,YAAY,CAAC,IAAD,EAAO,KAAP,CAAhB;AAAA,OAAtB,CAAP;AACD;;AACD,WAAO,aAAP;AACD;;AACD,SAAO,EAAP;AACD;;AAEK,SAAU,wBAAV,CAAmC,IAAnC,EAAkD;AACtD,MAAM,SAAS,GAAG,0BAAU,WAAV,CAAlB;;AACA,UAAQ,IAAR;AACE,SAAA;AAAA;AAAA;AACE,aAAO,SAAS,CAAC,IAAjB;;AACF,SAAA;AAAA;AAAA;AACE,aAAO,SAAS,CAAC,QAAjB;;AACF,SAAA;AAAA;AAAA;AACE,aAAO,SAAS,CAAC,IAAjB;;AACF,SAAA;AAAA;AAAA;AACE,aAAO,SAAS,CAAC,KAAjB;;AACF,SAAA;AAAA;AAAA;AACE,aAAO,SAAS,CAAC,IAAjB;;AACF,SAAA;AAAA;AAAA;AACE,aAAO,SAAS,CAAC,IAAjB;;AACF;AACE,aAAO,SAAS,CAAC,IAAjB;AAdJ;AAgBD;;AAEK,SAAU,oBAAV,CAA+B,KAA/B,EAA8C,IAA9C,EAA8D;AAClE,MAAI,KAAJ,EAAW;AACT,WAAO,KAAK,CAAC,GAAN,CAAU,QAAV,KAAuB,wBAAwB,CAAC,IAAI,IAAI,KAAK,CAAC,IAAf,CAAtD;AACD;;AACD,MAAI,IAAJ,EAAU;AACR,WAAO,wBAAwB,CAAC,IAAD,CAA/B;AACD;;AACD,SAAO,0BAAU,WAAV,EAAuB,QAAvB,IAAmC,mBAAO,aAAjD;AACD","sourcesContent":["import isObject from 'lodash/isObject';\nimport isNil from 'lodash/isNil';\nimport { isArrayLike } from 'mobx';\nimport moment from 'moment';\nimport { getConfig } from 'choerodon-ui/lib/configure';\nimport { FieldType } from '../data-set/enum';\nimport Field from '../data-set/Field';\n\nexport function toRangeValue(value: any, range?: boolean | [string, string]): [any, any] {\n  if (isArrayLike(range)) {\n    if (isObject(value)) {\n      const [start, end] = range;\n      return [value[start], value[end]];\n    }\n  } else if (isArrayLike(value)) {\n    return value.slice(0, 2) as [any, any];\n  }\n  return [undefined, undefined];\n}\n\nexport function fromRangeValue(value: any[], range?: boolean | [string, string]): any {\n  if (isArrayLike(range)) {\n    const [start, end] = range;\n    return {\n      [start]: value[0],\n      [end]: value[1],\n    };\n  }\n  return value;\n}\n\nexport function toMultipleValue(value: any, range?: boolean | [string, string]) {\n  if (!isNil(value)) {\n    const multipleValue = isArrayLike(value) ? value.slice() : [value];\n    if (range) {\n      return multipleValue.map(item => toRangeValue(item, range));\n    }\n    return multipleValue;\n  }\n  return [];\n}\n\nexport function getDateFormatByFieldType(type: FieldType) {\n  const formatter = getConfig('formatter');\n  switch (type) {\n    case FieldType.date:\n      return formatter.date;\n    case FieldType.dateTime:\n      return formatter.dateTime;\n    case FieldType.week:\n      return formatter.week;\n    case FieldType.month:\n      return formatter.month;\n    case FieldType.year:\n      return formatter.year;\n    case FieldType.time:\n      return formatter.time;\n    default:\n      return formatter.date;\n  }\n}\n\nexport function getDateFormatByField(field?: Field, type?: FieldType): string {\n  if (field) {\n    return field.get('format') || getDateFormatByFieldType(type || field.type);\n  }\n  if (type) {\n    return getDateFormatByFieldType(type);\n  }\n  return getConfig('formatter').jsonDate || moment.defaultFormat;\n}\n"]}