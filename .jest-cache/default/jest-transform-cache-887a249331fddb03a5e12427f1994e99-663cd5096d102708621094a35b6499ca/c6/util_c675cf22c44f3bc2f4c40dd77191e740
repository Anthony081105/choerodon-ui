5de529d2c0afa2c4c94d1beb6479ebbc
"use strict";

/* istanbul ignore next */
function cov_1jteonn4pc() {
  var path = "/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/tree/util.tsx";
  var hash = "7fc5bb53f95c784989610df4ed03bfe667053003";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/tree/util.tsx",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 29
        },
        end: {
          line: 3,
          column: 84
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 7,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 24
        }
      },
      "3": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 36
        }
      },
      "4": {
        start: {
          line: 11,
          column: 21
        },
        end: {
          line: 11,
          column: 92
        }
      },
      "5": {
        start: {
          line: 14,
          column: 2
        },
        end: {
          line: 14,
          column: 59
        }
      },
      "6": {
        start: {
          line: 18,
          column: 12
        },
        end: {
          line: 18,
          column: 35
        }
      },
      "7": {
        start: {
          line: 19,
          column: 2
        },
        end: {
          line: 27,
          column: 5
        }
      },
      "8": {
        start: {
          line: 31,
          column: 16
        },
        end: {
          line: 31,
          column: 86
        }
      },
      "9": {
        start: {
          line: 32,
          column: 24
        },
        end: {
          line: 32,
          column: 71
        }
      },
      "10": {
        start: {
          line: 33,
          column: 17
        },
        end: {
          line: 33,
          column: 64
        }
      },
      "11": {
        start: {
          line: 34,
          column: 25
        },
        end: {
          line: 34,
          column: 72
        }
      },
      "12": {
        start: {
          line: 35,
          column: 17
        },
        end: {
          line: 35,
          column: 64
        }
      },
      "13": {
        start: {
          line: 36,
          column: 19
        },
        end: {
          line: 36,
          column: 66
        }
      },
      "14": {
        start: {
          line: 37,
          column: 16
        },
        end: {
          line: 37,
          column: 37
        }
      },
      "15": {
        start: {
          line: 38,
          column: 2
        },
        end: {
          line: 52,
          column: 5
        }
      },
      "16": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 49,
          column: 5
        }
      },
      "17": {
        start: {
          line: 40,
          column: 21
        },
        end: {
          line: 40,
          column: 179
        }
      },
      "18": {
        start: {
          line: 41,
          column: 6
        },
        end: {
          line: 48,
          column: 20
        }
      },
      "19": {
        start: {
          line: 51,
          column: 4
        },
        end: {
          line: 51,
          column: 16
        }
      }
    },
    fnMap: {
      "0": {
        name: "getKey",
        decl: {
          start: {
            line: 13,
            column: 9
          },
          end: {
            line: 13,
            column: 15
          }
        },
        loc: {
          start: {
            line: 13,
            column: 33
          },
          end: {
            line: 15,
            column: 1
          }
        },
        line: 13
      },
      "1": {
        name: "getTreeNode",
        decl: {
          start: {
            line: 17,
            column: 9
          },
          end: {
            line: 17,
            column: 20
          }
        },
        loc: {
          start: {
            line: 17,
            column: 87
          },
          end: {
            line: 28,
            column: 1
          }
        },
        line: 17
      },
      "2": {
        name: "getTreeNodes",
        decl: {
          start: {
            line: 30,
            column: 9
          },
          end: {
            line: 30,
            column: 21
          }
        },
        loc: {
          start: {
            line: 30,
            column: 31
          },
          end: {
            line: 53,
            column: 1
          }
        },
        line: 30
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 38,
            column: 21
          },
          end: {
            line: 38,
            column: 22
          }
        },
        loc: {
          start: {
            line: 38,
            column: 39
          },
          end: {
            line: 52,
            column: 3
          }
        },
        line: 38
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 14,
            column: 16
          },
          end: {
            line: 14,
            column: 57
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 14,
            column: 26
          },
          end: {
            line: 14,
            column: 45
          }
        }, {
          start: {
            line: 14,
            column: 48
          },
          end: {
            line: 14,
            column: 57
          }
        }],
        line: 14
      },
      "1": {
        loc: {
          start: {
            line: 21,
            column: 12
          },
          end: {
            line: 21,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 21,
            column: 12
          },
          end: {
            line: 21,
            column: 21
          }
        }, {
          start: {
            line: 21,
            column: 25
          },
          end: {
            line: 21,
            column: 41
          }
        }],
        line: 21
      },
      "2": {
        loc: {
          start: {
            line: 24,
            column: 19
          },
          end: {
            line: 24,
            column: 71
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 24,
            column: 46
          },
          end: {
            line: 24,
            column: 63
          }
        }, {
          start: {
            line: 24,
            column: 66
          },
          end: {
            line: 24,
            column: 71
          }
        }],
        line: 24
      },
      "3": {
        loc: {
          start: {
            line: 31,
            column: 16
          },
          end: {
            line: 31,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 31,
            column: 69
          },
          end: {
            line: 31,
            column: 81
          }
        }, {
          start: {
            line: 31,
            column: 84
          },
          end: {
            line: 31,
            column: 86
          }
        }],
        line: 31
      },
      "4": {
        loc: {
          start: {
            line: 31,
            column: 16
          },
          end: {
            line: 31,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 31,
            column: 16
          },
          end: {
            line: 31,
            column: 36
          }
        }, {
          start: {
            line: 31,
            column: 40
          },
          end: {
            line: 31,
            column: 66
          }
        }],
        line: 31
      },
      "5": {
        loc: {
          start: {
            line: 32,
            column: 24
          },
          end: {
            line: 32,
            column: 71
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 32,
            column: 47
          },
          end: {
            line: 32,
            column: 59
          }
        }, {
          start: {
            line: 32,
            column: 62
          },
          end: {
            line: 32,
            column: 71
          }
        }],
        line: 32
      },
      "6": {
        loc: {
          start: {
            line: 33,
            column: 17
          },
          end: {
            line: 33,
            column: 64
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 33,
            column: 40
          },
          end: {
            line: 33,
            column: 52
          }
        }, {
          start: {
            line: 33,
            column: 55
          },
          end: {
            line: 33,
            column: 64
          }
        }],
        line: 33
      },
      "7": {
        loc: {
          start: {
            line: 34,
            column: 25
          },
          end: {
            line: 34,
            column: 72
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 34,
            column: 48
          },
          end: {
            line: 34,
            column: 60
          }
        }, {
          start: {
            line: 34,
            column: 63
          },
          end: {
            line: 34,
            column: 72
          }
        }],
        line: 34
      },
      "8": {
        loc: {
          start: {
            line: 35,
            column: 17
          },
          end: {
            line: 35,
            column: 64
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 35,
            column: 40
          },
          end: {
            line: 35,
            column: 52
          }
        }, {
          start: {
            line: 35,
            column: 55
          },
          end: {
            line: 35,
            column: 64
          }
        }],
        line: 35
      },
      "9": {
        loc: {
          start: {
            line: 36,
            column: 19
          },
          end: {
            line: 36,
            column: 66
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 36,
            column: 42
          },
          end: {
            line: 36,
            column: 54
          }
        }, {
          start: {
            line: 36,
            column: 57
          },
          end: {
            line: 36,
            column: 66
          }
        }],
        line: 36
      },
      "10": {
        loc: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 49,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 49,
            column: 5
          }
        }, {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 49,
            column: 5
          }
        }],
        line: 39
      },
      "11": {
        loc: {
          start: {
            line: 40,
            column: 21
          },
          end: {
            line: 40,
            column: 179
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 40,
            column: 79
          },
          end: {
            line: 40,
            column: 172
          }
        }, {
          start: {
            line: 40,
            column: 175
          },
          end: {
            line: 40,
            column: 179
          }
        }],
        line: 40
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "7fc5bb53f95c784989610df4ed03bfe667053003"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];

  cov_1jteonn4pc = function () {
    return actualCoverage;
  };

  return actualCoverage;
}

cov_1jteonn4pc();

var _interopRequireDefault =
/* istanbul ignore next */
(cov_1jteonn4pc().s[0]++, require("@babel/runtime/helpers/interopRequireDefault"));

/* istanbul ignore next */
cov_1jteonn4pc().s[1]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});

/* istanbul ignore next */
cov_1jteonn4pc().s[2]++;
exports.getKey = getKey;

/* istanbul ignore next */
cov_1jteonn4pc().s[3]++;
exports.getTreeNodes = getTreeNodes;

var _objectSpread2 =
/* istanbul ignore next */
(cov_1jteonn4pc().s[4]++, _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2")));

function getKey(record, idField) {
  /* istanbul ignore next */
  cov_1jteonn4pc().f[0]++;
  cov_1jteonn4pc().s[5]++;
  return String(idField ?
  /* istanbul ignore next */
  (cov_1jteonn4pc().b[0][0]++, record.get(idField)) :
  /* istanbul ignore next */
  (cov_1jteonn4pc().b[0][1]++, record.id));
}

function getTreeNode(record, children, idField, text, treeNodeRendererProps, loadData) {
  /* istanbul ignore next */
  cov_1jteonn4pc().f[1]++;
  var key =
  /* istanbul ignore next */
  (cov_1jteonn4pc().s[6]++, getKey(record, idField));

  /* istanbul ignore next */
  cov_1jteonn4pc().s[7]++;
  return (0, _objectSpread2["default"])({
    title: text,
    isLeaf:
    /* istanbul ignore next */
    (cov_1jteonn4pc().b[1][0]++, !loadData) &&
    /* istanbul ignore next */
    (cov_1jteonn4pc().b[1][1]++, !record.children),
    children: children
  }, treeNodeRendererProps, {
    selectable: !!(record.dataSet.selection ?
    /* istanbul ignore next */
    (cov_1jteonn4pc().b[2][0]++, record.selectable) :
    /* istanbul ignore next */
    (cov_1jteonn4pc().b[2][1]++, false)),
    eventKey: key,
    key: key
  });
}

function getTreeNodes(dataSet) {
  /* istanbul ignore next */
  cov_1jteonn4pc().f[2]++;
  var records =
  /* istanbul ignore next */
  (cov_1jteonn4pc().s[8]++,
  /* istanbul ignore next */
  (cov_1jteonn4pc().b[4][0]++, arguments.length > 1) &&
  /* istanbul ignore next */
  (cov_1jteonn4pc().b[4][1]++, arguments[1] !== undefined) ?
  /* istanbul ignore next */
  (cov_1jteonn4pc().b[3][0]++, arguments[1]) :
  /* istanbul ignore next */
  (cov_1jteonn4pc().b[3][1]++, []));
  var forceRenderKeys =
  /* istanbul ignore next */
  (cov_1jteonn4pc().s[9]++, arguments.length > 2 ?
  /* istanbul ignore next */
  (cov_1jteonn4pc().b[5][0]++, arguments[2]) :
  /* istanbul ignore next */
  (cov_1jteonn4pc().b[5][1]++, undefined));
  var renderer =
  /* istanbul ignore next */
  (cov_1jteonn4pc().s[10]++, arguments.length > 3 ?
  /* istanbul ignore next */
  (cov_1jteonn4pc().b[6][0]++, arguments[3]) :
  /* istanbul ignore next */
  (cov_1jteonn4pc().b[6][1]++, undefined));
  var treeNodeRenderer =
  /* istanbul ignore next */
  (cov_1jteonn4pc().s[11]++, arguments.length > 4 ?
  /* istanbul ignore next */
  (cov_1jteonn4pc().b[7][0]++, arguments[4]) :
  /* istanbul ignore next */
  (cov_1jteonn4pc().b[7][1]++, undefined));
  var loadData =
  /* istanbul ignore next */
  (cov_1jteonn4pc().s[12]++, arguments.length > 5 ?
  /* istanbul ignore next */
  (cov_1jteonn4pc().b[8][0]++, arguments[5]) :
  /* istanbul ignore next */
  (cov_1jteonn4pc().b[8][1]++, undefined));
  var titleField =
  /* istanbul ignore next */
  (cov_1jteonn4pc().s[13]++, arguments.length > 6 ?
  /* istanbul ignore next */
  (cov_1jteonn4pc().b[9][0]++, arguments[6]) :
  /* istanbul ignore next */
  (cov_1jteonn4pc().b[9][1]++, undefined));
  var idField =
  /* istanbul ignore next */
  (cov_1jteonn4pc().s[14]++, dataSet.props.idField);

  /* istanbul ignore next */
  cov_1jteonn4pc().s[15]++;
  return records.map(function (record) {
    /* istanbul ignore next */
    cov_1jteonn4pc().f[3]++;
    cov_1jteonn4pc().s[16]++;

    if (record.status !== 'delete') {
      /* istanbul ignore next */
      cov_1jteonn4pc().b[10][0]++;
      var children =
      /* istanbul ignore next */
      (cov_1jteonn4pc().s[17]++, forceRenderKeys.indexOf(getKey(record, idField)) !== -1 ?
      /* istanbul ignore next */
      (cov_1jteonn4pc().b[11][0]++, getTreeNodes(dataSet, record.children, forceRenderKeys, renderer, treeNodeRenderer, loadData)) :
      /* istanbul ignore next */
      (cov_1jteonn4pc().b[11][1]++, null));

      /* istanbul ignore next */
      cov_1jteonn4pc().s[18]++;
      return getTreeNode(record, children, idField, renderer({
        dataSet: dataSet,
        record: record,
        text: record.get(titleField)
      }), treeNodeRenderer({
        dataSet: dataSet,
        record: record
      }), loadData);
    } else
    /* istanbul ignore next */
    {
      cov_1jteonn4pc().b[10][1]++;
    }

    cov_1jteonn4pc().s[19]++;
    return null;
  });
}