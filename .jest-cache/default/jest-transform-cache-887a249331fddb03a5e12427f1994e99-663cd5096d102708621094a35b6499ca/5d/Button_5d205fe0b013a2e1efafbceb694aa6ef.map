{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/button/Button.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { Children } from 'react';\nimport PropTypes from 'prop-types';\nimport { Cancelable, DebounceSettings } from 'lodash';\nimport omit from 'lodash/omit';\nimport debounce from 'lodash/debounce';\nimport isString from 'lodash/isString';\nimport { computed, runInAction } from 'mobx';\nimport { observer } from 'mobx-react';\nimport { ProgressType } from 'choerodon-ui/lib/progress/enum';\nimport { getConfig } from 'choerodon-ui/lib/configure';\nimport Icon from '../icon';\nimport FormContext from '../form/FormContext';\nimport Progress from '../progress';\nimport Ripple from '../ripple';\nimport { ButtonColor, ButtonType, ButtonWaitType, FuncType } from './enum';\nimport { DataSetStatus } from '../data-set/enum';\nimport { Size } from '../core/enum';\nimport DataSetComponent, { DataSetComponentProps } from '../data-set/DataSetComponent';\nimport autobind from '../_util/autobind';\n\nexport interface ButtonProps extends DataSetComponentProps {\n  /**\n   * 按钮展现形式\n   * @default 'raised'\n   */\n  funcType?: FuncType;\n  /**\n   * 按钮颜色风格\n   * @default 'default'\n   */\n  color?: ButtonColor;\n  /**\n   * 按钮类型\n   * @default 'button'\n   */\n  type?: ButtonType;\n  /**\n   * 按钮是否是加载状态\n   */\n  loading?: boolean;\n  /**\n   * 按钮图标\n   */\n  icon?: string;\n  /**\n   * 点击跳转的地址，指定此属性 button 的行为和 a 链接一致\n   */\n  href?: string;\n  /**\n   * 相当于 a 链接的 target 属性，href 存在时生效\n   */\n  target?: string;\n  /**\n   * 点击间隔时间\n   */\n  wait?: number;\n  /**\n   * 点击间隔类型，可选值：throttle | debounce\n   * @default throttle\n   */\n  waitType?: ButtonWaitType;\n}\n\n@observer\nexport default class Button extends DataSetComponent<ButtonProps> {\n  static displayName = 'Button';\n\n  // eslint-disable-next-line camelcase\n  static __Pro_BUTTON = true;\n\n  static contextType = FormContext;\n\n  static propTypes = {\n    /**\n     * 按钮展现模式\n     * 可选值：'flat' | 'raised'\n     * @default raised\n     */\n    funcType: PropTypes.oneOf([FuncType.flat, FuncType.raised]),\n    /**\n     * 按钮颜色风格\n     * 可选值：'default' | 'primary' | 'gray' | 'blue' | 'red' | 'green' | 'yellow' | 'purple' | 'dark'\n     * @default 'default'\n     */\n    color: PropTypes.oneOf([\n      ButtonColor.default,\n      ButtonColor.primary,\n      ButtonColor.gray,\n      ButtonColor.blue,\n      ButtonColor.red,\n      ButtonColor.green,\n      ButtonColor.yellow,\n      ButtonColor.purple,\n      ButtonColor.dark,\n    ]),\n    /**\n     * 按钮类型\n     * 可选值：'button' | 'submit' | 'reset'\n     * @default 'button'\n     */\n    type: PropTypes.oneOf([ButtonType.button, ButtonType.submit, ButtonType.reset]),\n    /**\n     * 按钮是否是加载状态\n     */\n    loading: PropTypes.bool,\n    /**\n     * 点击跳转的地址，指定此属性 button 的行为和 a 链接一致\n     */\n    href: PropTypes.string,\n    /**\n     * 相当于 a 链接的 target 属性，href 存在时生效\n     */\n    target: PropTypes.string,\n    /**\n     * 点击等待时间\n     */\n    wait: PropTypes.number,\n    /**\n     * 点击间隔类型，可选值：throttle | debounce\n     * @default throttle\n     */\n    waitType: PropTypes.oneOf([ButtonWaitType.throttle, ButtonWaitType.debounce]),\n    ...DataSetComponent.propTypes,\n  };\n\n  static defaultProps = {\n    suffixCls: 'btn',\n    type: ButtonType.button,\n    loading: false,\n    waitType: ButtonWaitType.throttle,\n  };\n\n  @computed\n  get loading(): boolean {\n    const { type, dataSet, loading } = this.observableProps;\n    return (\n      loading ||\n      (type === ButtonType.submit && !!dataSet && dataSet.status === DataSetStatus.submitting)\n    );\n  }\n\n  set loading(loading: boolean) {\n    runInAction(() => {\n      this.observableProps.loading = loading;\n    });\n  }\n\n  handleClickWait: Function & Cancelable;\n\n  constructor(props, context) {\n    super(props, context);\n    this.handleClickWait = this.getHandleClick(props);\n  }\n\n  getObservableProps(props, context) {\n    return {\n      dataSet: 'dataSet' in props ? props.dataSet : context.dataSet,\n      loading: props.loading,\n      type: props.type,\n    };\n  }\n\n  componentWillReceiveProps(nextProps, nextContext) {\n    super.componentWillReceiveProps(nextProps, nextContext);\n    const { wait, waitType } = this.props;\n    if (wait !== nextProps.wait || waitType !== nextProps.waitType) {\n      this.handleClickWait = this.getHandleClick(nextProps);\n    }\n  }\n\n  componentWillUnmount() {\n    this.handleClickWait.cancel();\n  }\n\n  getHandleClick(props): Function & Cancelable {\n    const { wait, waitType } = props;\n    if (wait && waitType) {\n      const options: DebounceSettings = { leading: true, trailing: true };\n      if (waitType === ButtonWaitType.throttle) {\n        options.trailing = false;\n        options.maxWait = wait;\n      } else if (waitType === ButtonWaitType.debounce) {\n        options.leading = false;\n      }\n      return debounce(this.handleClick, wait, options);\n    }\n    return debounce(this.handleClick, 0);\n  }\n\n  @autobind\n  handleClickIfBubble(e) {\n    const { wait, waitType } = this.props;\n    if (wait && waitType) {\n      e.stopPropagation();\n      this.handleClickWait(e);\n    } else {\n      this.handleClick(e);\n    }\n  }\n\n  @autobind\n  async handleClick(e) {\n    const { onClick } = this.props;\n    if (onClick) {\n      const afterClick: any = onClick(e);\n      if (afterClick && afterClick instanceof Promise) {\n        try {\n          this.loading = true;\n          await afterClick;\n        } finally {\n          this.loading = false;\n        }\n      }\n    }\n  }\n\n  isDisabled() {\n    const { disabled } = this.context;\n    return disabled || super.isDisabled() || this.loading;\n  }\n\n  getOtherProps() {\n    const otherProps = omit(super.getOtherProps(), [\n      'icon',\n      'funcType',\n      'color',\n      'loading',\n      'wait',\n      'waitType',\n    ]);\n    if (!this.isDisabled()) {\n      otherProps.onClick = this.handleClickIfBubble;\n    }\n    return otherProps;\n  }\n\n  getClassName(...props): string | undefined {\n    const {\n      prefixCls,\n      props: {\n        color = getConfig('buttonColor'),\n        funcType = getConfig('buttonFuncType'),\n        children,\n        icon,\n      },\n    } = this;\n    const childrenCount = Children.count(children);\n    return super.getClassName(\n      {\n        [`${prefixCls}-${funcType}`]: funcType,\n        [`${prefixCls}-${color}`]: color,\n        [`${prefixCls}-icon-only`]: icon\n          ? childrenCount === 0 || children === false\n          : childrenCount === 1 && (children as any).type === Icon,\n      },\n      ...props,\n    );\n  }\n\n  render() {\n    const { children, icon, href } = this.props;\n    const buttonIcon: any = this.loading ? (\n      <Progress key=\"loading\" type={ProgressType.loading} size={Size.small} />\n    ) : (\n      icon && <Icon type={icon} />\n    );\n    const hasString = Children.toArray(children).some(child => isString(child));\n    const Cmp = href ? 'a' : 'button';\n    const props = this.getMergedProps();\n    return (\n      <Ripple disabled={this.isDisabled()}>\n        <Cmp {...(href ? omit(props, ['type']) : props)}>\n          {buttonIcon}\n          {hasString ? <span>{children}</span> : children}\n        </Cmp>\n      </Ripple>\n    );\n  }\n}\n"]}