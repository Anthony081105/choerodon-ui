{"version":3,"sources":["Table.test.js"],"names":["Column","Table","ColumnGroup","describe","it","data","key","firstName","lastName","age","wrapper","expect","toMatchSnapshot","columns","title","dataIndex","newColumns","setProps","instance","toBe","loading","spinning","delay","find","toHaveLength","text","not","toEqual","Promise","resolve","setTimeout","update"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { render, shallow, mount } from 'enzyme';\nimport Table from '..';\n\nconst { Column, ColumnGroup } = Table;\n\ndescribe('Table', () => {\n  it('renders JSX correctly', () => {\n    const data = [\n      {\n        key: '1',\n        firstName: 'John',\n        lastName: 'Brown',\n        age: 32,\n      },\n      {\n        key: '2',\n        firstName: 'Jim',\n        lastName: 'Green',\n        age: 42,\n      },\n    ];\n\n    const wrapper = render(\n      <Table dataSource={data} pagination={false}>\n        <ColumnGroup title=\"Name\">\n          <Column title=\"First Name\" dataIndex=\"firstName\" key=\"firstName\" />\n          <Column title=\"Last Name\" dataIndex=\"lastName\" key=\"lastName\" />\n        </ColumnGroup>\n        <Column title=\"Age\" dataIndex=\"age\" key=\"age\" />\n      </Table>,\n    );\n\n    expect(wrapper).toMatchSnapshot();\n  });\n\n  it('updates columns when receiving props', () => {\n    const columns = [\n      {\n        title: 'Name',\n        key: 'name',\n        dataIndex: 'name',\n      },\n    ];\n    const wrapper = shallow(<Table columns={columns} />);\n    const newColumns = [\n      {\n        title: 'Title',\n        key: 'title',\n        dataIndex: 'title',\n      },\n    ];\n    wrapper.setProps({ columns: newColumns });\n\n    expect(wrapper.instance().columns).toBe(newColumns);\n  });\n\n  it('loading with Spin', async () => {\n    const loading = {\n      spinning: false,\n      delay: 500,\n    };\n    const wrapper = mount(<Table loading={loading} />);\n    expect(wrapper.find('.c7n-spin')).toHaveLength(0);\n    expect(wrapper.find('.c7n-table-placeholder').text()).not.toEqual('');\n\n    loading.spinning = true;\n    wrapper.setProps({ loading });\n    expect(wrapper.find('.c7n-spin')).toHaveLength(0);\n\n    await new Promise(resolve => setTimeout(resolve, 500));\n    wrapper.update();\n    expect(wrapper.find('.c7n-spin')).toHaveLength(1);\n  });\n});\n"]}