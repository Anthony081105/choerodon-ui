41219417d2209bbae8a4373abf58dd4a
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _icon = _interopRequireDefault(require("../icon"));

var _tooltip = _interopRequireDefault(require("../tooltip"));

var _progress = _interopRequireDefault(require("../progress"));

var _animate = _interopRequireDefault(require("../animate"));

var _configure = require("../configure");

function _createSuper(Derived) {
  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  return function () {
    var Super = (0, _getPrototypeOf2["default"])(Derived),
        result;

    if (isNativeReflectConstruct()) {
      var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return (0, _possibleConstructorReturn2["default"])(this, result);
  };
}

// https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL
var previewFile = function previewFile(file, callback) {
  var reader = new FileReader();

  reader.onloadend = function () {
    return callback(reader.result);
  };

  reader.readAsDataURL(file);
};

var isImageUrl = function isImageUrl(url) {
  return /^data:image\//.test(url) || /\.(webp|svg|png|gif|jpg|jpeg)$/.test(url);
};

var UploadList =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(UploadList, _Component);

  var _super = _createSuper(UploadList);

  function UploadList() {
    var _this;

    (0, _classCallCheck2["default"])(this, UploadList);
    _this = _super.apply(this, arguments);

    _this.handleClose = function (file) {
      var onRemove = _this.props.onRemove;

      if (onRemove) {
        onRemove(file);
      }
    };

    _this.handlePreview = function (file, e) {
      var onPreview = _this.props.onPreview;

      if (!onPreview) {
        return;
      }

      e.preventDefault();
      return onPreview(file);
    };

    return _this;
  }

  (0, _createClass2["default"])(UploadList, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      var _this2 = this;

      var _this$props = this.props,
          listType = _this$props.listType,
          items = _this$props.items;

      if (listType !== 'picture' && listType !== 'picture-card') {
        return;
      }

      (items || []).forEach(function (file) {
        if (typeof document === 'undefined' || typeof window === 'undefined' || !window.FileReader || !window.File || !(file.originFileObj instanceof File) || file.thumbUrl !== undefined) {
          return;
        }
        /* eslint-disable-next-line */


        file.thumbUrl = '';
        previewFile(file.originFileObj, function (previewDataUrl) {
          /* eslint-disable-next-line */
          file.thumbUrl = previewDataUrl;

          _this2.forceUpdate();
        });
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this,
          _classNames2;

      var _this$props2 = this.props,
          customizePrefixCls = _this$props2.prefixCls,
          _this$props2$items = _this$props2.items,
          items = _this$props2$items === void 0 ? [] : _this$props2$items,
          listType = _this$props2.listType,
          showPreviewIcon = _this$props2.showPreviewIcon,
          showRemoveIcon = _this$props2.showRemoveIcon,
          locale = _this$props2.locale;
      var prefixCls = (0, _configure.getPrefixCls)('upload', customizePrefixCls);
      var list = items.map(function (file) {
        var _classNames;

        var progress;

        var icon = _react["default"].createElement(_icon["default"], {
          type: file.status === 'uploading' ? 'loading' : 'attach_file'
        });

        if (listType === 'picture' || listType === 'picture-card') {
          if (listType === 'picture-card' && file.status === 'uploading') {
            icon = _react["default"].createElement("div", {
              className: "".concat(prefixCls, "-list-item-uploading-text")
            }, locale.uploading);
          } else if (!file.thumbUrl && !file.url) {
            icon = _react["default"].createElement(_icon["default"], {
              className: "".concat(prefixCls, "-list-item-thumbnail"),
              type: "picture"
            });
          } else {
            var thumbnail = isImageUrl(file.thumbUrl || file.url) ? _react["default"].createElement("img", {
              src: file.thumbUrl || file.url,
              alt: file.name
            }) : _react["default"].createElement(_icon["default"], {
              type: "file",
              style: {
                fontSize: 48,
                color: 'rgba(0,0,0,0.5)'
              }
            });
            icon = _react["default"].createElement("a", {
              className: "".concat(prefixCls, "-list-item-thumbnail"),
              onClick: function onClick(e) {
                return _this3.handlePreview(file, e);
              },
              href: file.url || file.thumbUrl,
              target: "_blank",
              rel: "noopener noreferrer"
            }, thumbnail);
          }
        }

        if (file.status === 'uploading') {
          var progressAttr = _this3.props.progressAttr; // show loading icon if upload progress listener is disabled

          var loadingProgress = 'percent' in file ? _react["default"].createElement(_progress["default"], (0, _extends2["default"])({
            type: "line"
            /* line */

          }, progressAttr, {
            percent: file.percent
          })) : null;
          progress = _react["default"].createElement("div", {
            className: "".concat(prefixCls, "-list-item-progress"),
            key: "progress"
          }, loadingProgress);
        }

        var infoUploadingClass = (0, _classnames["default"])((_classNames = {}, (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-list-item"), true), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-list-item-").concat(file.status), true), _classNames));
        var preview = file.url ? _react["default"].createElement("a", (0, _extends2["default"])({}, file.linkProps, {
          href: file.url,
          target: "_blank",
          rel: "noopener noreferrer",
          className: "".concat(prefixCls, "-list-item-name"),
          onClick: function onClick(e) {
            return _this3.handlePreview(file, e);
          },
          title: file.name
        }), file.name) : _react["default"].createElement("span", {
          className: "".concat(prefixCls, "-list-item-name"),
          onClick: function onClick(e) {
            return _this3.handlePreview(file, e);
          },
          title: file.name
        }, file.name);
        var style = file.url || file.thumbUrl ? undefined : {
          pointerEvents: 'none',
          opacity: 0.5
        };
        var previewIcon = showPreviewIcon ? _react["default"].createElement("a", {
          href: file.url || file.thumbUrl,
          target: "_blank",
          rel: "noopener noreferrer",
          style: style,
          onClick: function onClick(e) {
            return _this3.handlePreview(file, e);
          },
          title: locale.previewFile
        }, _react["default"].createElement(_icon["default"], {
          type: "visibility"
        })) : null;
        var removeIcon = showRemoveIcon ? _react["default"].createElement(_icon["default"], {
          type: "delete",
          title: locale.removeFile,
          onClick: function onClick() {
            return _this3.handleClose(file);
          }
        }) : null;
        var removeIconCross = showRemoveIcon ? _react["default"].createElement(_icon["default"], {
          type: "close",
          title: locale.removeFile,
          onClick: function onClick() {
            return _this3.handleClose(file);
          }
        }) : null;
        var actions = listType === 'picture-card' && file.status !== 'uploading' ? _react["default"].createElement("span", {
          className: "".concat(prefixCls, "-list-item-actions")
        }, previewIcon, removeIcon) : removeIconCross;
        var message;

        if (file.response && typeof file.response === 'string') {
          message = file.response;
        } else {
          message = file.error && file.error.statusText || locale.uploadError;
        }

        var iconAndPreview = file.status === 'error' ? _react["default"].createElement(_tooltip["default"], {
          title: message
        }, icon, preview) : _react["default"].createElement("span", null, icon, preview);
        return _react["default"].createElement("div", {
          className: infoUploadingClass,
          key: file.uid
        }, _react["default"].createElement("div", {
          className: "".concat(prefixCls, "-list-item-info")
        }, iconAndPreview), actions, _react["default"].createElement(_animate["default"], {
          transitionName: "fade",
          component: ""
        }, progress));
      });
      var listClassNames = (0, _classnames["default"])((_classNames2 = {}, (0, _defineProperty2["default"])(_classNames2, "".concat(prefixCls, "-list"), true), (0, _defineProperty2["default"])(_classNames2, "".concat(prefixCls, "-list-").concat(listType), true), _classNames2));
      var animationDirection = listType === 'picture-card' ? 'animate-inline' : 'animate';
      return _react["default"].createElement(_animate["default"], {
        transitionName: "".concat(prefixCls, "-").concat(animationDirection),
        component: "div",
        className: listClassNames
      }, list);
    }
  }]);
  return UploadList;
}(_react.Component);

exports["default"] = UploadList;
UploadList.displayName = 'UploadList';
UploadList.defaultProps = {
  listType: 'text',
  progressAttr: {
    strokeWidth: 2,
    showInfo: false
  },
  showRemoveIcon: true,
  showPreviewIcon: true
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,