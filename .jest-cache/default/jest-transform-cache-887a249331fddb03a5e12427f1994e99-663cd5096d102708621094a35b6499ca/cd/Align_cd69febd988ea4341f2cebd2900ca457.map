{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components/align/Align.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,SAAS,QAAT,CAAkB,GAAlB,EAAqB;AACnB,SAAO,GAAG,IAAI,IAAP,IAAe,GAAG,KAAK,GAAG,CAAC,MAAlC;AACD;;IAiBoB,K;;;;;;;;;;;;;;iCAwBT;AAAA,wBACyD,KAAK,KAD9D;AAAA,UACA,MADA,eACA,MADA;AAAA,4CACQ,OADR;AAAA,UACQ,OADR,oCACkB,gBADlB;AAAA,2CACwB,MADxB;AAAA,UACwB,MADxB,mCACiC;AAAA,eAAM,MAAN;AAAA,OADjC;AAAA,UAC+C,KAD/C,eAC+C,KAD/C;;AAER,UAAI,CAAC,MAAL,EAAa;AACX,YAAM,MAAM,GAAG,2BAAY,IAAZ,CAAf;AACA,YAAM,GAAG,GAAG,MAAM,EAAlB;AACA,QAAA,OAAO,CAAC,MAAD,EAAS,0BAAS,MAAT,EAAiB,GAAjB,EAAsB,KAAtB,CAAT,EAAuC,GAAvC,CAAP;AACD;AACF;;;wCAEgB;AAAA,yBACyB,KAAK,KAD9B;AAAA,UACP,MADO,gBACP,MADO;AAAA,UACC,mBADD,gBACC,mBADD;AAEf,WAAK,UAAL;;AACA,UAAI,CAAC,MAAD,IAAW,mBAAf,EAAoC;AAClC,aAAK,wBAAL;AACD;AACF;;;uCAEkB,S,EAAS;AAAA,yBAC4C,KAAK,KADjD;AAAA,UAClB,MADkB,gBAClB,MADkB;AAAA,UACV,KADU,gBACV,KADU;AAAA,6CACH,MADG;AAAA,UACH,MADG,oCACM;AAAA,eAAM,MAAN;AAAA,OADN;AAAA,UACoB,mBADpB,gBACoB,mBADpB;AAAA,UAEV,SAFU,GAEwC,SAFxC,CAElB,MAFkB;AAAA,UAEQ,QAFR,GAEwC,SAFxC,CAEC,KAFD;AAAA,UAE0B,SAF1B,GAEwC,SAFxC,CAEkB,MAFlB;AAG1B,UAAI,OAAO,GAAG,KAAd;;AAEA,UAAI,CAAC,MAAL,EAAa;AACX,YAAI,SAAS,IAAI,QAAQ,KAAK,KAA9B,EAAqC;AACnC,UAAA,OAAO,GAAG,IAAV;AACD,SAFD,MAEO;AACL,cAAM,UAAU,GAAG,SAAS,EAA5B;AACA,cAAM,aAAa,GAAG,MAAM,EAA5B;;AACA,cAAI,QAAQ,CAAC,UAAD,CAAR,IAAwB,QAAQ,CAAC,aAAD,CAApC,EAAqD;AACnD,YAAA,OAAO,GAAG,KAAV;AACD,WAFD,MAEO,IAAI,UAAU,KAAK,aAAnB,EAAkC;AACvC,YAAA,OAAO,GAAG,IAAV;AACD;AACF;AACF;;AAED,UAAI,OAAJ,EAAa;AACX,aAAK,UAAL;AACD;;AAED,UAAI,mBAAmB,IAAI,CAAC,MAA5B,EAAoC;AAClC,aAAK,wBAAL;AACD,OAFD,MAEO;AACL,aAAK,uBAAL;AACD;AACF;;;2CAEmB;AAClB,WAAK,uBAAL;AACD;;;+CAEuB;AAAA,UACd,iBADc,GACQ,KAAK,KADb,CACd,iBADc;;AAEtB,UAAI,CAAC,KAAK,aAAV,EAAyB;AACvB,aAAK,aAAL,GAAqB,IAAI,wBAAJ,CAAiB,MAAjB,CAArB;AACA,aAAK,aAAL,GAAqB,IAAI,sBAAJ,EAArB;AACA,aAAK,aAAL,CAAmB,gBAAnB,CACE,QADF,EAEE,KAAK,aAAL,CAAmB,KAAnB,CAAyB,IAAzB,CACE,KAAK,aADP,EAEE,iBAFF,EAGE,KAAK,UAAL,CAAgB,IAAhB,CAAqB,IAArB,CAHF,CAFF;AAQD;AACF;;;8CAEsB;AACrB,UAAI,KAAK,aAAT,EAAwB;AACtB,YAAI,KAAK,aAAT,EAAwB;AACtB,eAAK,aAAL,CAAmB,MAAnB;AACD;;AACD,aAAK,aAAL,CAAmB,KAAnB;AACA,aAAK,aAAL,GAAqB,IAArB;AACD;AACF;;;6BAEK;AAAA,UACI,KADJ,GACc,IADd,CACI,KADJ;AAAA,UAEI,aAFJ,GAEgC,KAFhC,CAEI,aAFJ;AAAA,UAEmB,QAFnB,GAEgC,KAFhC,CAEmB,QAFnB;;AAGJ,UAAI,aAAJ,EAAmB;AACjB,YAAM,QAAQ,GAAG,EAAjB;AACA,QAAA,MAAM,CAAC,IAAP,CAAY,aAAZ,EAA2B,OAA3B,CAAmC,UAAA,IAAI,EAAG;AACxC,cAAI,GAAG,cAAH,CAAkB,IAAlB,CAAuB,aAAvB,EAAsC,IAAtC,CAAJ,EAAiD;AAC/C,YAAA,QAAQ,CAAC,IAAD,CAAR,GAAiB,KAAK,CAAC,aAAa,CAAC,IAAD,CAAd,CAAtB;AACD;AACF,SAJD;AAKA,eAAO,yBAAa,gBAAS,IAAT,CAAc,QAAd,CAAb,EAAsC,QAAtC,CAAP;AACD;;AACD,aAAO,QAAP;AACD;;;EAlHgC,gB;;;AAC1B,KAAA,CAAA,WAAA,GAAc,OAAd;AAEA,KAAA,CAAA,SAAA,GAAY;AACjB,EAAA,aAAa,EAAE,sBAAU,MADR;AAEjB,EAAA,KAAK,EAAE,sBAAU,MAAV,CAAiB,UAFP;AAGjB,EAAA,MAAM,EAAE,sBAAU,IAHD;AAIjB,EAAA,OAAO,EAAE,sBAAU,IAJF;AAKjB,EAAA,iBAAiB,EAAE,sBAAU,MALZ;AAMjB,EAAA,mBAAmB,EAAE,sBAAU,IANd;AAOjB,EAAA,MAAM,EAAE,sBAAU,IAPD;AAQjB,EAAA,QAAQ,EAAE,sBAAU;AARH,CAAZ;AAWA,KAAA,CAAA,YAAA,GAAe;AACpB,EAAA,iBAAiB,EAAE,EADC;AAEpB,EAAA,mBAAmB,EAAE,KAFD;AAGpB,EAAA,MAAM,EAAE;AAHY,CAAf","sourcesContent":["import { Children, cloneElement, Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { findDOMNode } from 'react-dom';\nimport noop from 'lodash/noop';\nimport domAlign from 'dom-align';\nimport EventManager from '../_util/EventManager';\nimport TaskRunner from '../_util/TaskRunner';\n\nfunction isWindow(obj) {\n  return obj != null && obj === obj.window;\n}\n\ntype FirstParam<T extends (...args: any) => any> = T extends (arg1: infer A, ...rest: any) => any\n  ? A\n  : never;\n\nexport interface AlignProps {\n  childrenProps?: object;\n  align: object;\n  target?: () => Node | Window;\n  onAlign?: (source: Element | Text | null, align: object, target: Node | Window) => void;\n  monitorBufferTime?: number;\n  monitorWindowResize?: boolean;\n  hidden?: boolean;\n  children: FirstParam<typeof cloneElement>;\n}\n\nexport default class Align extends Component<AlignProps, any> {\n  static displayName = 'Align';\n\n  static propTypes = {\n    childrenProps: PropTypes.object,\n    align: PropTypes.object.isRequired,\n    target: PropTypes.func,\n    onAlign: PropTypes.func,\n    monitorBufferTime: PropTypes.number,\n    monitorWindowResize: PropTypes.bool,\n    hidden: PropTypes.bool,\n    children: PropTypes.any,\n  };\n\n  static defaultProps = {\n    monitorBufferTime: 50,\n    monitorWindowResize: false,\n    hidden: true,\n  };\n\n  resizeHandler: EventManager | null;\n\n  bufferMonitor: TaskRunner | null;\n\n  forceAlign() {\n    const { hidden, onAlign = noop, target = () => window, align } = this.props;\n    if (!hidden) {\n      const source = findDOMNode(this);\n      const ref = target();\n      onAlign(source, domAlign(source, ref, align), ref);\n    }\n  }\n\n  componentDidMount() {\n    const { hidden, monitorWindowResize } = this.props;\n    this.forceAlign();\n    if (!hidden && monitorWindowResize) {\n      this.startMonitorWindowResize();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { hidden, align, target = () => window, monitorWindowResize } = this.props;\n    const { hidden: preHidden, align: preAlign, target: preTarget } = prevProps;\n    let reAlign = false;\n\n    if (!hidden) {\n      if (preHidden || preAlign !== align) {\n        reAlign = true;\n      } else {\n        const lastTarget = preTarget();\n        const currentTarget = target();\n        if (isWindow(lastTarget) && isWindow(currentTarget)) {\n          reAlign = false;\n        } else if (lastTarget !== currentTarget) {\n          reAlign = true;\n        }\n      }\n    }\n\n    if (reAlign) {\n      this.forceAlign();\n    }\n\n    if (monitorWindowResize && !hidden) {\n      this.startMonitorWindowResize();\n    } else {\n      this.stopMonitorWindowResize();\n    }\n  }\n\n  componentWillUnmount() {\n    this.stopMonitorWindowResize();\n  }\n\n  startMonitorWindowResize() {\n    const { monitorBufferTime } = this.props;\n    if (!this.resizeHandler) {\n      this.resizeHandler = new EventManager(window);\n      this.bufferMonitor = new TaskRunner();\n      this.resizeHandler.addEventListener(\n        'resize',\n        this.bufferMonitor.delay.bind(\n          this.bufferMonitor,\n          monitorBufferTime,\n          this.forceAlign.bind(this),\n        ),\n      );\n    }\n  }\n\n  stopMonitorWindowResize() {\n    if (this.resizeHandler) {\n      if (this.bufferMonitor) {\n        this.bufferMonitor.cancel();\n      }\n      this.resizeHandler.clear();\n      this.resizeHandler = null;\n    }\n  }\n\n  render() {\n    const { props } = this;\n    const { childrenProps, children } = props;\n    if (childrenProps) {\n      const newProps = {};\n      Object.keys(childrenProps).forEach(prop => {\n        if ({}.hasOwnProperty.call(childrenProps, prop)) {\n          newProps[prop] = props[childrenProps[prop]];\n        }\n      });\n      return cloneElement(Children.only(children), newProps);\n    }\n    return children;\n  }\n}\n"]}