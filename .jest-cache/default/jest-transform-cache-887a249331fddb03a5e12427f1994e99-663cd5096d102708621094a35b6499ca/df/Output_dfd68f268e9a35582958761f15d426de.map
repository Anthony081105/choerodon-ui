{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/output/Output.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { ReactNode } from 'react';\nimport { observer } from 'mobx-react';\nimport { computed, isArrayLike } from 'mobx';\nimport isPlainObject from 'lodash/isPlainObject';\nimport isNil from 'lodash/isNil';\nimport omit from 'lodash/omit';\nimport { FormField, FormFieldProps, RenderProps } from '../field/FormField';\nimport autobind from '../_util/autobind';\nimport { BooleanValue, FieldType } from '../data-set/enum';\nimport ObserverCheckBox from '../check-box/CheckBox';\nimport { processFieldValue } from '../data-set/utils';\n\nexport interface OutputProps extends FormFieldProps {}\n\n@observer\nexport default class Output extends FormField<OutputProps> {\n  static displayName = 'Output';\n\n  static defaultProps = {\n    ...FormField.defaultProps,\n    suffixCls: 'output',\n  };\n\n  @computed\n  get editable(): boolean {\n    return false;\n  }\n\n  @autobind\n  handleChange() {}\n\n  getOtherProps() {\n    return omit(super.getOtherProps(), ['name']);\n  }\n\n  getValueKey(value) {\n    if (isArrayLike(value)) {\n      return value.map(this.getValueKey, this).join(',');\n    }\n    return this.processValue(value);\n  }\n\n  processValue(value: any): string {\n    if (!isNil(value)) {\n      const text = isPlainObject(value) ? value : super.processValue(value);\n      const { field, lang } = this;\n      if (field) {\n        return processFieldValue(text, field, lang, true);\n      }\n      return text;\n    }\n    return '';\n  }\n\n  @autobind\n  defaultRenderer({ value, text, repeat, maxTagTextLength }: RenderProps): ReactNode {\n    const { field } = this;\n    if (field && field.type === FieldType.boolean) {\n      return <ObserverCheckBox disabled checked={value === field.get(BooleanValue.trueValue)} />;\n    }\n    return super.defaultRenderer({ text, repeat, maxTagTextLength });\n  }\n\n  getRenderedValue(): ReactNode {\n    const { multiple, range } = this;\n    if (multiple) {\n      return this.renderMultipleValues(true);\n    }\n    if (range) {\n      return this.renderRangeValue(true);\n    }\n    return this.getTextNode();\n  }\n\n  renderWrapper(): ReactNode {\n    return <span {...this.getMergedProps()}>{this.getRenderedValue()}</span>;\n  }\n}\n"]}