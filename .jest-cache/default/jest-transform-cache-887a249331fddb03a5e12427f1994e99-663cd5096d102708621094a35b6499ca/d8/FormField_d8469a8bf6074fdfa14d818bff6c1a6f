2ba520a8dc67115836b9ec1c9ddc8dc8
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFieldsById = getFieldsById;
exports["default"] = exports.FormField = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _get3 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _tslib = require("tslib");

var _map = _interopRequireDefault(require("core-js/library/fn/map"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _mobx = require("mobx");

var _classnames = _interopRequireDefault(require("classnames"));

var _omit = _interopRequireDefault(require("lodash/omit"));

var _isNumber = _interopRequireDefault(require("lodash/isNumber"));

var _isString = _interopRequireDefault(require("lodash/isString"));

var _isNil = _interopRequireDefault(require("lodash/isNil"));

var _defaultTo = _interopRequireDefault(require("lodash/defaultTo"));

var _moment = require("moment");

var _mobxReact = require("mobx-react");

var _noop = _interopRequireDefault(require("lodash/noop"));

var _KeyCode = _interopRequireDefault(require("choerodon-ui/lib/_util/KeyCode"));

var _warning = _interopRequireDefault(require("choerodon-ui/lib/_util/warning"));

var _configure = require("choerodon-ui/lib/configure");

var _autobind = _interopRequireDefault(require("../_util/autobind"));

var _Validator = _interopRequireDefault(require("../validator/Validator"));

var _FormContext = _interopRequireDefault(require("../form/FormContext"));

var _DataSetComponent2 = _interopRequireDefault(require("../data-set/DataSetComponent"));

var _icon = _interopRequireDefault(require("../icon"));

var _tooltip = _interopRequireDefault(require("../tooltip"));

var _isEmpty2 = _interopRequireDefault(require("../_util/isEmpty"));

var _utils = require("../form/utils");

var _animate = _interopRequireDefault(require("../animate"));

var _CloseButton = _interopRequireDefault(require("./CloseButton"));

var _utils2 = require("./utils");

var _isSame = _interopRequireDefault(require("../_util/isSame"));

var _formatString = _interopRequireDefault(require("../formatter/formatString"));

var map = {};

function getFieldsById(id) {
  if (!map[id]) {
    map[id] = [];
  }

  return map[id];
}

var FormField =
/*#__PURE__*/
function (_DataSetComponent) {
  (0, _inherits2["default"])(FormField, _DataSetComponent);

  function FormField() {
    var _this;

    (0, _classCallCheck2["default"])(this, FormField);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(FormField).apply(this, arguments));
    _this.emptyValue = null;
    return _this;
  }

  (0, _createClass2["default"])(FormField, [{
    key: "defaultRenderer",
    value: function defaultRenderer(_ref) {
      var text = _ref.text,
          repeat = _ref.repeat,
          maxTagTextLength = _ref.maxTagTextLength;
      return repeat !== undefined && maxTagTextLength && (0, _isString["default"])(text) && text.length > maxTagTextLength ? "".concat(text.slice(0, maxTagTextLength), "...") : text;
    }
    /**
     * 判断是否应该显示验证信息, 作为属性传给Tooltip
     *
     * @readonly
     * @type {(undefined | boolean)}
     * @memberof FormField
     */

  }, {
    key: "isValidationMessageHidden",
    value: function isValidationMessageHidden(message) {
      var _this$props = this.props,
          hidden = _this$props.hidden,
          noValidate = _this$props.noValidate;

      if (hidden || this.pristine || !this.record && noValidate || !message) {
        return true;
      }
    }
  }, {
    key: "isEmpty",
    value: function isEmpty() {
      var value = this.getValue();
      return (0, _mobx.isArrayLike)(value) ? !value.length : (0, _isEmpty2["default"])(value);
    }
  }, {
    key: "getObservableProps",
    value: function getObservableProps(props, context) {
      return {
        name: props.name,
        record: 'record' in props ? props.record : context.record,
        dataSet: 'dataSet' in props ? props.dataSet : context.dataSet,
        dataIndex: (0, _defaultTo["default"])(props.dataIndex, context.dataIndex),
        value: this.observableProps || 'value' in props ? props.value : props.defaultValue
      };
    }
  }, {
    key: "getOtherProps",
    value: function getOtherProps() {
      var otherProps = (0, _omit["default"])((0, _get3["default"])((0, _getPrototypeOf2["default"])(FormField.prototype), "getOtherProps", this).call(this), ['record', 'defaultValue', 'dataIndex', 'onEnterDown', 'onClear', 'readOnly', 'validator', 'validationRenderer', 'help', 'showHelp', 'renderer', 'maxTagPlaceholder', 'maxTagCount', 'maxTagTextLength', 'rowIndex', 'colIndex', 'labelLayout', 'labelWidth', 'pristine', 'range', 'trim']);
      otherProps.onChange = !this.isDisabled() && !this.isReadOnly() ? this.handleChange : _noop["default"];
      otherProps.onKeyDown = this.handleKeyDown;
      return otherProps;
    }
  }, {
    key: "getWrapperClassNames",
    value: function getWrapperClassNames() {
      var _get2, _ref2;

      var prefixCls = this.prefixCls;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return (_get2 = (0, _get3["default"])((0, _getPrototypeOf2["default"])(FormField.prototype), "getWrapperClassNames", this)).call.apply(_get2, [this, (_ref2 = {}, (0, _defineProperty2["default"])(_ref2, "".concat(prefixCls, "-invalid"), !this.isValid), (0, _defineProperty2["default"])(_ref2, "".concat(prefixCls, "-float-label"), this.hasFloatLabel), (0, _defineProperty2["default"])(_ref2, "".concat(prefixCls, "-required"), this.getProp('required')), _ref2)].concat(args));
    }
  }, {
    key: "renderWrapper",
    value: function renderWrapper() {
      return undefined;
    }
  }, {
    key: "renderHelpMessage",
    value: function renderHelpMessage() {
      var showHelp = this.props.showHelp;
      var help = this.getProp('help');

      if (showHelp === "newLine"
      /* newLine */
      && help) {
        return _react["default"].createElement("div", {
          key: "help",
          className: "".concat((0, _configure.getProPrefixCls)(_utils.FIELD_SUFFIX), "-help")
        }, help);
      }
    }
  }, {
    key: "getLabel",
    value: function getLabel() {
      return this.getProp('label');
    }
  }, {
    key: "renderFloatLabel",
    value: function renderFloatLabel() {
      if (this.hasFloatLabel) {
        var label = this.getLabel();

        if (label) {
          var prefixCls = (0, _configure.getProPrefixCls)(_utils.FIELD_SUFFIX);
          var required = this.getProp('required');
          var classString = (0, _classnames["default"])("".concat(prefixCls, "-label"), (0, _defineProperty2["default"])({}, "".concat(prefixCls, "-required"), required));
          return _react["default"].createElement("div", {
            className: "".concat(prefixCls, "-label-wrapper")
          }, _react["default"].createElement("div", {
            className: classString
          }, label));
        }
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.addToForm(this.props, this.context);
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps, nextContext) {
      (0, _get3["default"])((0, _getPrototypeOf2["default"])(FormField.prototype), "componentWillReceiveProps", this).call(this, nextProps, nextContext);
      this.removeFromForm(this.props, this.context);
      this.addToForm(nextProps, nextContext);

      if (!this.record && this.props.value !== nextProps.value) {
        this.validate(nextProps.value);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.removeFromForm(this.props, this.context);
    }
  }, {
    key: "addToForm",
    value: function addToForm(props, context) {
      var form = props.form;
      var formNode = context.formNode;

      if (form) {
        var fields = map[form];

        if (!fields) {
          fields = [];
          map[form] = fields;
        }

        fields.push(this);
      } else if (formNode) {
        formNode.addField(this);
      }
    }
  }, {
    key: "removeFromForm",
    value: function removeFromForm(props, context) {
      var form = props.form;
      var formNode = context.formNode;

      if (form) {
        var fields = map[form];

        if (fields) {
          var index = fields.indexOf(this);

          if (index !== -1) {
            fields.splice(index, 1);
          }
        }
      } else if (formNode) {
        formNode.removeField(this);
      }
    }
  }, {
    key: "renderValidationMessage",
    value: function renderValidationMessage(validationResult) {
      var validationMessage = this.getValidationMessage(validationResult);

      if (validationMessage) {
        return _react["default"].createElement("div", {
          className: (0, _configure.getProPrefixCls)('validation-message')
        }, this.context.labelLayout !== "float"
        /* float */
        && _react["default"].createElement(_icon["default"], {
          type: "error"
        }), _react["default"].createElement("span", null, validationMessage));
      }
    }
  }, {
    key: "getValidatorProps",
    value: function getValidatorProps() {
      var name = this.name,
          range = this.range,
          multiple = this.multiple,
          defaultValidationMessages = this.defaultValidationMessages;
      var type = this.getFieldType();
      var required = this.getProp('required');
      var customValidator = this.getProp('validator');
      var label = this.getProp('label');
      return {
        type: type,
        required: required,
        customValidator: customValidator,
        name: name,
        label: label,
        range: range,
        multiple: multiple,
        defaultValidationMessages: defaultValidationMessages,
        form: this.context.formNode
      };
    }
  }, {
    key: "getValidationMessage",
    value: function getValidationMessage() {
      var validationResult = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.validator.currentValidationResult;
      var validator = this.validator,
          validationRenderer = this.props.validationRenderer;

      if (validationResult) {
        if (validationRenderer) {
          var validationMessage = validationRenderer(validationResult, validator.props);

          if (validationMessage) {
            return validationMessage;
          }
        }

        return validationResult.validationMessage;
      }
    }
  }, {
    key: "handleFocus",
    value: function handleFocus(e) {
      (0, _get3["default"])((0, _getPrototypeOf2["default"])(FormField.prototype), "handleFocus", this).call(this, e);

      if (this.range) {
        this.beginRange();
      }
    }
  }, {
    key: "handleBlur",
    value: function handleBlur(e) {
      (0, _get3["default"])((0, _getPrototypeOf2["default"])(FormField.prototype), "handleBlur", this).call(this, e);

      if (this.range) {
        this.endRange();
      }
    }
  }, {
    key: "handleChange",
    value: function handleChange(e) {
      e.preventDefault();
      e.stopPropagation();
    }
  }, {
    key: "handleKeyDown",
    value: function handleKeyDown(e) {
      var _this$props2 = this.props,
          _this$props2$onKeyDow = _this$props2.onKeyDown,
          onKeyDown = _this$props2$onKeyDow === void 0 ? _noop["default"] : _this$props2$onKeyDow,
          _this$props2$onEnterD = _this$props2.onEnterDown,
          onEnterDown = _this$props2$onEnterD === void 0 ? _noop["default"] : _this$props2$onEnterD;
      onKeyDown(e);

      if (!e.isDefaultPrevented()) {
        switch (e.keyCode) {
          case _KeyCode["default"].ENTER:
            this.handleEnterDown(e);
            onEnterDown(e);
            break;

          case _KeyCode["default"].ESC:
            this.blur();
            break;

          default:
        }
      }
    }
  }, {
    key: "handleEnterDown",
    value: function handleEnterDown(e) {
      if (this.multiple) {
        if (this.range) {
          this.endRange();
          e.preventDefault();
        } else {
          var value = e.target.value;

          if (value !== '') {
            this.syncValueOnBlur(value);
            e.preventDefault();
          }
        }
      } else {
        this.blur();
      }
    }
  }, {
    key: "syncValueOnBlur",
    value: function syncValueOnBlur(value) {
      this.prepareSetValue(value);
    }
  }, {
    key: "handleMutipleValueRemove",
    value: function handleMutipleValueRemove(e, value, index) {
      this.removeValue(value, index);
      e.stopPropagation();
    }
  }, {
    key: "getDateFormat",
    value: function getDateFormat() {
      return (0, _utils2.getDateFormatByField)(this.field, this.getFieldType());
    }
  }, {
    key: "processValue",
    value: function processValue(value) {
      if (!(0, _isNil["default"])(value)) {
        if ((0, _moment.isMoment)(value)) {
          return value.format(this.getDateFormat());
        }

        return value.toString();
      }

      return '';
    }
  }, {
    key: "isReadOnly",
    value: function isReadOnly() {
      return this.getProp('readOnly') || this.pristine || this.isControlled && !this.props.onChange;
    }
  }, {
    key: "getDataSetValue",
    value: function getDataSetValue() {
      var record = this.record,
          pristine = this.pristine,
          name = this.name;

      if (record) {
        return pristine ? record.getPristineValue(name) : record.get(name);
      }
    }
  }, {
    key: "getTextNode",
    value: function getTextNode() {
      var text = this.isFocused && this.editable ? this.processValue(this.getValue()) : this.processRenderer(this.getValue());
      return text;
    }
  }, {
    key: "getText",
    value: function getText(value) {
      return this.processValue(value);
    }
  }, {
    key: "processText",
    value: function processText(value) {
      return value;
    }
  }, {
    key: "processRenderer",
    value: function processRenderer(value, repeat) {
      var record = this.record,
          dataSet = this.dataSet,
          _this$props3 = this.props,
          _this$props3$renderer = _this$props3.renderer,
          renderer = _this$props3$renderer === void 0 ? this.defaultRenderer : _this$props3$renderer,
          name = _this$props3.name,
          maxTagTextLength = _this$props3.maxTagTextLength;
      var text = this.processText(this.getText(value));
      return renderer ? renderer({
        value: value,
        text: text,
        record: record,
        dataSet: dataSet,
        name: name,
        repeat: repeat,
        maxTagTextLength: maxTagTextLength
      }) : text;
    }
  }, {
    key: "processRangeValue",
    value: function processRangeValue(value, repeat) {
      var _this2 = this;

      if (repeat === undefined) {
        value = this.rangeValue;
      }

      if (value === undefined && !this.multiple) {
        value = (0, _utils2.toRangeValue)(this.getValue(), this.range);
      }

      return (value || []).map(function (item) {
        return _this2.processRenderer(item, repeat);
      });
    }
  }, {
    key: "getOldValue",
    value: function getOldValue() {
      return this.getValue();
    }
  }, {
    key: "getValue",
    value: function getValue() {
      var name = this.name;

      if (this.dataSet && name) {
        return this.getDataSetValue();
      }

      return this.value;
    }
  }, {
    key: "getValues",
    value: function getValues() {
      return (0, _utils2.toMultipleValue)(this.getValue(), this.range);
    }
  }, {
    key: "addValue",
    value: function addValue() {
      for (var _len2 = arguments.length, values = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        values[_key2] = arguments[_key2];
      }

      if (this.multiple) {
        var oldValues = this.getValues();

        if (values.length) {
          this.setValue([].concat((0, _toConsumableArray2["default"])(oldValues), values));
        } else if (!oldValues.length) {
          this.setValue(this.emptyValue);
        }
      } else {
        this.setValue(values.pop());
      }
    }
  }, {
    key: "isLowerRange",
    value: function isLowerRange(_value1, _value2) {
      return false;
    }
  }, {
    key: "prepareSetValue",
    value: function prepareSetValue() {
      var rangeTarget = this.rangeTarget,
          range = this.range,
          rangeValue = this.rangeValue;

      for (var _len3 = arguments.length, value = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        value[_key3] = arguments[_key3];
      }

      var values = value.filter(function (item) {
        return !(0, _isEmpty2["default"])(item);
      });

      if (range) {
        if (rangeTarget !== undefined && rangeValue) {
          var _rangeValue = (0, _slicedToArray2["default"])(rangeValue, 2),
              start = _rangeValue[0],
              end = _rangeValue[1];

          var newValue = values.pop();
          rangeValue[rangeTarget] = newValue;

          if (rangeTarget === 0 && newValue && end && this.isLowerRange(end, newValue)) {
            rangeValue[rangeTarget] = end;
            rangeValue[1] = newValue;
          }

          if (rangeTarget === 1 && newValue && start && this.isLowerRange(newValue, start)) {
            rangeValue[rangeTarget] = start;
            rangeValue[0] = newValue;
          }
        }
      } else {
        this.addValue.apply(this, (0, _toConsumableArray2["default"])(values));
      }
    }
  }, {
    key: "removeValues",
    value: function removeValues(values) {
      var _this3 = this;

      var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var repeat;
      this.setValue(values.reduce(function (oldValues, value) {
        repeat = 0;
        return oldValues.filter(function (v) {
          if (_this3.getValueKey(v) === _this3.getValueKey(value)) {
            if (index === -1 || repeat === index) {
              _this3.afterRemoveValue(value, repeat++);

              return false;
            }

            repeat++;
          }

          return true;
        });
      }, this.getValues()));
    }
  }, {
    key: "removeValue",
    value: function removeValue(value) {
      var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      this.removeValues([value], index);
    }
  }, {
    key: "afterRemoveValue",
    value: function afterRemoveValue(_value, _repeat) {}
  }, {
    key: "beginRange",
    value: function beginRange() {
      this.setRangeTarget(this.rangeTarget || 0);
      this.rangeValue = this.multiple ? [undefined, undefined] : (0, _utils2.toRangeValue)(this.getValue(), this.range);
    }
  }, {
    key: "endRange",
    value: function endRange() {
      if (this.rangeValue) {
        var values = this.rangeValue.slice();
        this.rangeValue = undefined;

        if (!this.multiple || !values.every(_isNil["default"])) {
          this.addValue((0, _utils2.fromRangeValue)(values, this.range));
        }
      }
    }
  }, {
    key: "setRangeTarget",
    value: function setRangeTarget(target) {
      this.rangeTarget = target;
    }
  }, {
    key: "setValue",
    value: function setValue(value) {
      if (!this.isReadOnly()) {
        if (this.multiple || this.range ? (0, _mobx.isArrayLike)(value) && !value.length : (0, _isNil["default"])(value) || value === '') {
          value = this.emptyValue;
        }

        var name = this.name,
            dataSet = this.dataSet,
            trim = this.trim,
            format = this.format,
            dataIndex = this.observableProps.dataIndex;
        var _this$props$onChange = this.props.onChange,
            onChange = _this$props$onChange === void 0 ? _noop["default"] : _this$props$onChange;
        var formNode = this.context.formNode;
        var old = this.getOldValue();

        if (dataSet && name) {
          (this.record || dataSet.create({}, dataIndex)).set(name, value);
        } else {
          value = (0, _formatString["default"])(value, {
            trim: trim,
            format: format
          });
          this.validate(value);
        }

        if (!(0, _isSame["default"])(old, value)) {
          onChange(value, (0, _mobx.toJS)(old), formNode);
        }

        this.value = value;
      }
    }
  }, {
    key: "renderRangeValue",
    value: function renderRangeValue(readOnly, value, repeat) {
      var rangeValue = this.processRangeValue(value, repeat);

      if (readOnly) {
        if (rangeValue.length) {
          return _react["default"].createElement(_react["default"].Fragment, null, rangeValue[0], "~", rangeValue[1]);
        }
      }
    }
  }, {
    key: "getValueKey",
    value: function getValueKey(v) {
      if ((0, _mobx.isArrayLike)(v)) {
        return v.join(',');
      }

      return v;
    }
  }, {
    key: "renderMultipleValues",
    value: function renderMultipleValues(readOnly) {
      var _this4 = this;

      var values = this.getValues();
      var valueLength = values.length;
      var prefixCls = this.prefixCls,
          range = this.range,
          _this$props4 = this.props,
          _this$props4$maxTagCo = _this$props4.maxTagCount,
          maxTagCount = _this$props4$maxTagCo === void 0 ? valueLength : _this$props4$maxTagCo,
          maxTagPlaceholder = _this$props4.maxTagPlaceholder;
      var validationResults = this.validator.validationResults;
      var repeats = new _map["default"]();
      var blockClassName = (0, _classnames["default"])((0, _defineProperty2["default"])({}, "".concat(prefixCls, "-multiple-block-disabled"), this.isDisabled()), "".concat(prefixCls, "-multiple-block"));
      var tags = values.slice(0, maxTagCount).map(function (v) {
        var key = _this4.getValueKey(v);

        var repeat = repeats.get(key) || 0;
        var text = range ? _this4.renderRangeValue(true, v, repeat) : _this4.processRenderer(v, repeat);
        repeats.set(key, repeat + 1);

        if (!(0, _isNil["default"])(text)) {
          var validationResult = validationResults.find(function (error) {
            return error.value === v;
          });
          var className = (0, _classnames["default"])((0, _defineProperty2["default"])({}, "".concat(prefixCls, "-multiple-block-invalid"), validationResult), blockClassName);

          var validationMessage = validationResult && _this4.renderValidationMessage(validationResult);

          var closeBtn = !_this4.isDisabled() && !_this4.isReadOnly() && _react["default"].createElement(_CloseButton["default"], {
            onClose: _this4.handleMutipleValueRemove,
            value: v,
            index: repeat
          });

          var inner = readOnly ? _react["default"].createElement("span", {
            className: className
          }, text) : _react["default"].createElement("li", {
            className: className
          }, _react["default"].createElement("div", null, text), closeBtn);
          return _react["default"].createElement(_tooltip["default"], {
            suffixCls: "form-tooltip ".concat((0, _configure.getConfig)('proPrefixCls'), "-tooltip"),
            key: "".concat(key, "-").concat(repeat),
            title: validationMessage,
            theme: "light",
            placement: "bottomLeft",
            hidden: _this4.isValidationMessageHidden(validationMessage)
          }, inner);
        }

        return undefined;
      });

      if (valueLength > maxTagCount) {
        var content = "+ ".concat(valueLength - maxTagCount, " ...");

        if (maxTagPlaceholder) {
          var omittedValues = values.slice(maxTagCount, valueLength);
          content = typeof maxTagPlaceholder === 'function' ? maxTagPlaceholder(omittedValues) : maxTagPlaceholder;
        }

        tags.push(_react["default"].createElement("li", {
          key: "maxTagPlaceholder",
          className: blockClassName
        }, _react["default"].createElement("div", null, content)));
      }

      return tags;
    }
  }, {
    key: "clear",
    value: function clear() {
      var _this$props$onClear = this.props.onClear,
          onClear = _this$props$onClear === void 0 ? _noop["default"] : _this$props$onClear;
      this.setValue(this.emptyValue);
      this.rangeValue = this.isFocused ? [undefined, undefined] : undefined;
      onClear();
    }
  }, {
    key: "checkValidity",
    value: function () {
      var _checkValidity = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee() {
        var name, valid, _this$props$onInvalid, onInvalid, _this$validator, validationResults, validity;

        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                name = this.name;
                _context.next = 3;
                return this.validate();

              case 3:
                valid = _context.sent;
                _this$props$onInvalid = this.props.onInvalid, onInvalid = _this$props$onInvalid === void 0 ? _noop["default"] : _this$props$onInvalid;

                if (!valid) {
                  _this$validator = this.validator, validationResults = _this$validator.validationResults, validity = _this$validator.validity;
                  onInvalid(validationResults, validity, name);
                }

                return _context.abrupt("return", valid);

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function checkValidity() {
        return _checkValidity.apply(this, arguments);
      }

      return checkValidity;
    }()
  }, {
    key: "validate",
    value: function () {
      var _validate = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee2(value) {
        var invalid, validator;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                invalid = false;

                if (this.props.noValidate) {
                  _context2.next = 8;
                  break;
                }

                if (value === undefined) {
                  value = this.multiple ? this.getValues() : this.getValue();
                }

                validator = this.validator;
                validator.reset();
                _context2.next = 7;
                return validator.checkValidity(value);

              case 7:
                invalid = !_context2.sent;

              case 8:
                return _context2.abrupt("return", !invalid);

              case 9:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function validate(_x) {
        return _validate.apply(this, arguments);
      }

      return validate;
    }()
  }, {
    key: "isDisabled",
    value: function isDisabled() {
      var disabled = this.context.disabled;

      if (disabled || this.getProp('disabled')) {
        return true;
      }

      var field = this.field,
          record = this.record;

      if (field) {
        var cascadeMap = field.get('cascadeMap');

        if (cascadeMap && (!record || Object.keys(cascadeMap).some(function (cascade) {
          return (0, _isNil["default"])(record.get(cascadeMap[cascade]));
        }))) {
          return true;
        }
      }

      return (0, _get3["default"])((0, _getPrototypeOf2["default"])(FormField.prototype), "isDisabled", this).call(this);
    }
  }, {
    key: "reset",
    value: function reset() {
      if (!this.isControlled && !this.dataSet) {
        this.setValue(this.props.defaultValue);
      }

      this.validator.reset();
    }
  }, {
    key: "getFieldType",
    value: function getFieldType() {
      var field = this.field;
      return field && field.get('type') || "string"
      /* string */
      ;
    }
  }, {
    key: "getProp",
    value: function getProp(propName) {
      var field = this.field;
      return (0, _defaultTo["default"])(field && field.get(propName), this.props[propName]);
    }
  }, {
    key: "render",
    value: function render() {
      var validationMessage = this.renderValidationMessage();
      var wrapper = this.renderWrapper();
      var help = this.renderHelpMessage();
      return this.hasFloatLabel ? [(0, _react.isValidElement)(wrapper) && (0, _react.cloneElement)(wrapper, {
        key: 'wrapper'
      }), _react["default"].createElement(_animate["default"], {
        transitionName: "show-error",
        component: "",
        transitionAppear: true,
        key: "validation-message"
      }, validationMessage), help] : _react["default"].createElement(_tooltip["default"], {
        suffixCls: "form-tooltip ".concat((0, _configure.getConfig)('proPrefixCls'), "-tooltip"),
        title: !!(this.multiple && this.getValues().length) || this.isValidationMessageHidden(validationMessage) ? null : validationMessage,
        theme: "light",
        placement: "bottomLeft"
      }, wrapper, help);
    }
  }, {
    key: "validator",
    get: function get() {
      var field = this.field;

      if (field) {
        return field.validator;
      }

      return new _Validator["default"](undefined, this);
    }
  }, {
    key: "name",
    get: function get() {
      return this.observableProps.name;
    }
  }, {
    key: "value",
    get: function get() {
      return this.observableProps.value;
    },
    set: function set(value) {
      var _this5 = this;

      (0, _mobx.runInAction)(function () {
        _this5.observableProps.value = value;
      });
    }
  }, {
    key: "labelLayout",
    get: function get() {
      return this.props.labelLayout || this.context.labelLayout;
    }
  }, {
    key: "hasFloatLabel",
    get: function get() {
      var labelLayout = this.labelLayout;
      return labelLayout === "float"
      /* float */
      ;
    }
  }, {
    key: "isControlled",
    get: function get() {
      return this.props.value !== undefined;
    }
  }, {
    key: "pristine",
    get: function get() {
      return this.props.pristine || this.context.pristine;
    }
  }, {
    key: "defaultValidationMessages",
    get: function get() {
      return {};
    }
  }, {
    key: "editable",
    get: function get() {
      return !this.isDisabled() && !this.isReadOnly();
    }
  }, {
    key: "dataSet",
    get: function get() {
      var record = this.record;

      if (record) {
        return record.dataSet;
      }

      return this.observableProps.dataSet;
    }
  }, {
    key: "record",
    get: function get() {
      var _this$observableProps = this.observableProps,
          record = _this$observableProps.record,
          dataSet = _this$observableProps.dataSet,
          dataIndex = _this$observableProps.dataIndex;

      if (record) {
        return record;
      }

      if (dataSet) {
        if ((0, _isNumber["default"])(dataIndex)) {
          return dataSet.get(dataIndex);
        }

        return dataSet.current;
      }

      return undefined;
    }
  }, {
    key: "field",
    get: function get() {
      var record = this.record,
          dataSet = this.dataSet,
          name = this.name,
          observableProps = this.observableProps;
      var displayName = this.constructor.displayName;

      if (displayName !== 'Output' && !name) {
        (0, _warning["default"])(!observableProps.dataSet, "".concat(displayName, " with binding DataSet need property name."));
        (0, _warning["default"])(!observableProps.record, "".concat(displayName, " with binding Record need property name."));
      }

      if (name) {
        var recordField = record ? record.getField(name) : undefined;
        var dsField = dataSet ? dataSet.getField(name) : undefined;

        if (recordField) {
          return recordField;
        }

        return dsField;
      }

      return undefined;
    }
  }, {
    key: "isValid",
    get: function get() {
      return this.pristine || (this.field ? this.field.valid : this.validator.validity.valid);
    }
  }, {
    key: "multiple",
    get: function get() {
      return this.getProp('multiple');
    }
  }, {
    key: "trim",
    get: function get() {
      return this.getProp('trim');
    }
  }, {
    key: "format",
    get: function get() {
      return this.getProp('format');
    }
  }, {
    key: "range",
    get: function get() {
      return this.getProp('range');
    }
  }]);
  return FormField;
}(_DataSetComponent2["default"]);

exports.FormField = FormField;
FormField.contextType = _FormContext["default"];
FormField.propTypes = (0, _objectSpread2["default"])({
  type: _propTypes["default"].string,

  /**
   * 字段名
   */
  name: _propTypes["default"].string,

  /**
   * <受控>当前值
   */
  value: _propTypes["default"].any,

  /**
   * 默认值
   */
  defaultValue: _propTypes["default"].any,

  /**
   * 是否必输
   */
  required: _propTypes["default"].bool,

  /**
   * 是否只读
   */
  readOnly: _propTypes["default"].bool,

  /**
   * 是否禁用
   */
  disabled: _propTypes["default"].bool,

  /**
   * 对照表单id
   */
  form: _propTypes["default"].string,

  /**
   * 对照record在DataSet中的index
   * @default dataSet.currentIndex
   */
  dataIndex: _propTypes["default"].number,

  /**
   * 是否是多值
   * @default false
   */
  multiple: _propTypes["default"].bool,

  /**
   * 表单下控件跨越的行数
   */
  rowSpan: _propTypes["default"].number,

  /**
   * 表单下控件跨越的列数
   */
  colSpan: _propTypes["default"].number,

  /**
   * 校验器
   * (value: any, name?: string, form?: ReactInstance) => string | boolean | Promise<string | boolean>
   */
  validator: _propTypes["default"].func,

  /**
   * 校验失败回调
   * (validationMessage: ReactNode, validity: Validity, name?: string) => void
   */
  onInvalid: _propTypes["default"].func,

  /**
   * 额外信息，常用作提示
   */
  help: _propTypes["default"].string,

  /**
   * 显示提示信息的方式
   */
  showHelp: _propTypes["default"].oneOf(["tooltip"
  /* tooltip */
  , "newLine"
  /* newLine */
  , "none"
  /* none */
  ]),

  /**
   * 渲染器
   */
  renderer: _propTypes["default"].func,

  /**
   * 校验信息渲染器
   */
  validationRenderer: _propTypes["default"].func,

  /**
   * 多值标签超出最大数量时的占位描述
   */
  maxTagPlaceholder: _propTypes["default"].oneOfType([_propTypes["default"].node, _propTypes["default"].func]),

  /**
   * 多值标签最大数量
   */
  maxTagCount: _propTypes["default"].number,

  /**
   * 多值标签文案最大长度
   */
  maxTagTextLength: _propTypes["default"].number,

  /**
   * 显示原始值
   */
  pristine: _propTypes["default"].bool,

  /**
   * 字符串值是否去掉首尾空格
   * 可选值: both left right none
   * @default: both
   */
  trim: _propTypes["default"].oneOf(["both"
  /* both */
  , "left"
  /* left */
  , "right"
  /* right */
  , "none"
  /* none */
  ]),

  /**
   * 值变化回调
   * (value: any, oldValue: any, form?: ReactInstance) => void
   */
  onChange: _propTypes["default"].func,

  /**
   * 输入回调
   */
  onInput: _propTypes["default"].func,

  /**
   * 键盘回车回调
   */
  onEnterDown: _propTypes["default"].func
}, _DataSetComponent2["default"].propTypes);
FormField.defaultProps = {
  readOnly: false,
  disabled: false,
  noValidate: false,
  showHelp: 'newLine',
  trim: "both"
  /* both */

};
(0, _tslib.__decorate)([_mobx.observable], FormField.prototype, "rangeTarget", void 0);
(0, _tslib.__decorate)([_mobx.observable], FormField.prototype, "rangeValue", void 0);
(0, _tslib.__decorate)([_mobx.computed], FormField.prototype, "validator", null);
(0, _tslib.__decorate)([_mobx.computed], FormField.prototype, "name", null);
(0, _tslib.__decorate)([_mobx.computed], FormField.prototype, "value", null);
(0, _tslib.__decorate)([_mobx.computed], FormField.prototype, "defaultValidationMessages", null);
(0, _tslib.__decorate)([_mobx.computed], FormField.prototype, "editable", null);
(0, _tslib.__decorate)([_mobx.computed], FormField.prototype, "dataSet", null);
(0, _tslib.__decorate)([_mobx.computed], FormField.prototype, "record", null);
(0, _tslib.__decorate)([_mobx.computed], FormField.prototype, "field", null);
(0, _tslib.__decorate)([_mobx.computed], FormField.prototype, "isValid", null);
(0, _tslib.__decorate)([_mobx.computed], FormField.prototype, "multiple", null);
(0, _tslib.__decorate)([_mobx.computed], FormField.prototype, "trim", null);
(0, _tslib.__decorate)([_mobx.computed], FormField.prototype, "format", null);
(0, _tslib.__decorate)([_mobx.computed], FormField.prototype, "range", null);
(0, _tslib.__decorate)([_autobind["default"]], FormField.prototype, "defaultRenderer", null);
(0, _tslib.__decorate)([_autobind["default"]], FormField.prototype, "handleFocus", null);
(0, _tslib.__decorate)([_autobind["default"]], FormField.prototype, "handleBlur", null);
(0, _tslib.__decorate)([_autobind["default"]], FormField.prototype, "handleChange", null);
(0, _tslib.__decorate)([_autobind["default"]], FormField.prototype, "handleKeyDown", null);
(0, _tslib.__decorate)([_autobind["default"]], FormField.prototype, "handleMutipleValueRemove", null);
(0, _tslib.__decorate)([_mobx.action], FormField.prototype, "prepareSetValue", null);
(0, _tslib.__decorate)([_mobx.action], FormField.prototype, "beginRange", null);
(0, _tslib.__decorate)([_mobx.action], FormField.prototype, "endRange", null);
(0, _tslib.__decorate)([_mobx.action], FormField.prototype, "setRangeTarget", null);
(0, _tslib.__decorate)([_mobx.action], FormField.prototype, "setValue", null);
(0, _tslib.__decorate)([_mobx.action], FormField.prototype, "clear", null);
(0, _tslib.__decorate)([_autobind["default"]], FormField.prototype, "reset", null);

var ObserverFormField =
/*#__PURE__*/
function (_FormField) {
  (0, _inherits2["default"])(ObserverFormField, _FormField);

  function ObserverFormField() {
    (0, _classCallCheck2["default"])(this, ObserverFormField);
    return (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(ObserverFormField).apply(this, arguments));
  }

  return ObserverFormField;
}(FormField);

ObserverFormField.defaultProps = FormField.defaultProps;
ObserverFormField = (0, _tslib.__decorate)([_mobxReact.observer], ObserverFormField);
var _default = ObserverFormField;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,