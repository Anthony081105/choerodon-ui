{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components/statistic/Countdown.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA,IAAM,gBAAgB,GAAG,OAAO,EAAhC;;AAQA,SAAS,OAAT,CAAiB,KAAjB,EAA2C;AACzC,SAAO,IAAI,IAAJ,CAAS,KAAT,EAAuB,OAAvB,EAAP;AACD;;AAED,IAAM,SAAS,GAA6B,SAAtC,SAAsC,CAAC,KAAD,EAAU;AAAA,MAC5C,KAD4C,GAChB,KADgB,CAC5C,KAD4C;AAAA,MACrC,MADqC,GAChB,KADgB,CACrC,MADqC;AAAA,MAC7B,QAD6B,GAChB,KADgB,CAC7B,QAD6B,EAEpD;;AAFoD,oBAG5B,uBAAW,UAAA,CAAC;AAAA,WAAI,CAAC,GAAG,CAAR;AAAA,GAAZ,EAAuB,CAAvB,CAH4B;AAAA;AAAA,MAG3C,WAH2C;;AAIpD,MAAM,SAAS,GAAG,OAAO,CAAC,KAAD,CAAzB;AACA,MAAM,YAAY,GAAG,oBAArB;AACA,MAAM,KAAK,GAAG,oBAAd,CANoD,CAQpD;;AACA,EAAA,YAAY,CAAC,OAAb,GAAuB,YAAK;AAC1B,IAAA,WAAW;;AACX,QAAI,SAAS,IAAI,IAAI,CAAC,GAAL,EAAjB,EAA6B;AAC3B,MAAA,aAAa,CAAC,MAAM,CAAC,KAAK,CAAC,OAAP,CAAP,CAAb;;AACA,UAAI,QAAQ,IAAI,SAAS,GAAG,IAAI,CAAC,GAAL,EAA5B,EAAwC;AACtC,QAAA,QAAQ;AACT;AACF;AACF,GARD,CAToD,CAmBpD;;;AACA,wBAAU,YAAK;AACb,QAAI,SAAS,IAAI,IAAI,CAAC,GAAL,EAAjB,EAA6B;AAC3B,UAAI,CAAC,KAAK,CAAC,OAAX,EAAoB;AAClB,QAAA,KAAK,CAAC,OAAN,GAAgB,WAAW,CAAC,YAAK;AAC9B,UAAA,YAAoB,CAAC,OAArB;AACF,SAF0B,EAExB,gBAFwB,CAA3B;AAGD;AACF,KAND,MAMO;AACL,MAAA,aAAa,CAAC,MAAM,CAAC,KAAK,CAAC,OAAP,CAAP,CAAb;AACD;;AACD,WAAO;AAAA,aAAM,aAAa,CAAC,MAAM,CAAC,KAAK,CAAC,OAAP,CAAP,CAAnB;AAAA,KAAP;AACD,GAXD,EAWG,CAAC,MAAD,EAAS,KAAT,CAXH,EApBoD,CAiCpD;;AACA,MAAM,WAAW,GAAG,SAAd,WAAc,CAAC,IAAD;AAAA,WAClB,6BAAa,IAAb,EAAmB;AACjB,MAAA,KAAK,EAAE;AADU,KAAnB,CADkB;AAAA,GAApB;;AAKA,SACE,kBAAA,aAAA,CAAC,qBAAD,EAAU,0BAAA;AAAC,IAAA,WAAW,EAAE;AAAd,GAAA,EAA+B,KAA/B,EAAoC;AAAE,IAAA,SAAS,EAAE,mBAAC,cAAD,EAAqC,MAArC;AAAA,aAA8D,4BAAgB,cAAhB,qCAAqC,MAArC;AAA6C,QAAA,MAAM,EAAN;AAA7C,SAA9D;AAAA;AAAb,GAApC,CAAV,CADF;AAGD,CA1CD;;AA4CA,SAAS,CAAC,YAAV,GAAyB;AACvB,EAAA,MAAM,EAAE;AADe,CAAzB;eAIe,S","sourcesContent":["import React, { useEffect, useRef, useReducer } from 'react';\nimport Statistic, { StatisticProps } from './Statistic';\nimport { formatCountdown, countdownValueType, FormatConfig } from './utils';\nimport { cloneElement } from '../_util/reactNode';\n\nconst REFRESH_INTERVAL = 1000 / 30;\n\ninterface CountdownProps extends StatisticProps {\n  value?: countdownValueType;\n  format?: string;\n  onFinish?: () => void;\n}\n\nfunction getTime(value?: countdownValueType) {\n  return new Date(value as any).getTime();\n}\n\nconst Countdown: React.FC<CountdownProps> = (props) => {\n  const { value, format, onFinish } = props;\n  // 强制渲染界面\n  const [, forceUpdate] = useReducer(x => x + 1, 0);\n  const timeStamp = getTime(value);\n  const countdownRef = useRef<() => void>();\n  const idRef = useRef<NodeJS.Timeout | null>();\n\n  // 触发渲染界面，如果达到目标位置不执行\n  countdownRef.current = () => {\n    forceUpdate();\n    if (timeStamp <= Date.now()) {\n      clearInterval(Number(idRef.current))\n      if (onFinish && timeStamp < Date.now()) {\n        onFinish();\n      }\n    }\n  };\n\n  // 启动计时器\n  useEffect(() => {\n    if (timeStamp >= Date.now()) {\n      if (!idRef.current) {\n        idRef.current = setInterval(() => {\n          (countdownRef as any).current();\n        }, REFRESH_INTERVAL);\n      }\n    } else {\n      clearInterval(Number(idRef.current))\n    }\n    return () => clearInterval(Number(idRef.current));\n  }, [format, value]);\n\n  // Countdown do not need display the timeStamp\n  const valueRender = (node: React.ReactElement<HTMLDivElement>) =>\n    cloneElement(node, {\n      title: undefined,\n    });\n\n  return (\n    <Statistic valueRender={valueRender} {...props} formatter={(valueFormatter: countdownValueType, config: FormatConfig) => formatCountdown(valueFormatter, { ...config, format })} />\n  );\n}\n\nCountdown.defaultProps = {\n  format: 'HH:mm:ss',\n};\n\nexport default Countdown;\n"]}