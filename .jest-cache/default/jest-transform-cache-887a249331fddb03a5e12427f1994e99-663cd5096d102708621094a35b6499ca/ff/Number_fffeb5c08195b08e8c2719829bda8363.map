{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components/statistic/Number.tsx"],"names":[],"mappings":";;;;;;;;;;;AAAA;;AACA;;AAOA,IAAM,eAAe,GAA0B,SAAzC,eAAyC,CAAA,KAAK,EAAG;AAAA,MAC7C,KAD6C,GACqC,KADrC,CAC7C,KAD6C;AAAA,MACtC,SADsC,GACqC,KADrC,CACtC,SADsC;AAAA,MAC3B,SAD2B,GACqC,KADrC,CAC3B,SAD2B;AAAA,MAChB,gBADgB,GACqC,KADrC,CAChB,gBADgB;AAAA,8BACqC,KADrC,CACE,cADF;AAAA,MACE,cADF,sCACmB,EADnB;AAAA,MACuB,SADvB,GACqC,KADrC,CACuB,SADvB;AAGrD,MAAI,SAAJ;;AAEA,MAAI,OAAO,SAAP,KAAqB,UAAzB,EAAqC;AACnC;AACA,IAAA,SAAS,GAAG,SAAS,CAAC,KAAD,CAArB;AACD,GAHD,MAGO;AACL;AACA,QAAM,GAAG,GAAW,MAAM,CAAC,KAAD,CAA1B;AACA,QAAM,KAAK,GAAG,GAAG,CAAC,KAAJ,CAAU,uBAAV,CAAd,CAHK,CAKL;;AACA,QAAI,CAAC,KAAD,IAAU,GAAG,KAAK,GAAtB,EAA2B;AACzB,MAAA,SAAS,GAAG,GAAZ;AACD,KAFD,MAEO;AACL,UAAM,QAAQ,GAAG,KAAK,CAAC,CAAD,CAAtB;;AACA,UAAI,IAAG,GAAG,KAAK,CAAC,CAAD,CAAL,IAAY,GAAtB;;AACA,UAAI,OAAO,GAAG,KAAK,CAAC,CAAD,CAAL,IAAY,EAA1B;AAEA,MAAA,IAAG,GAAG,IAAG,CAAC,OAAJ,CAAY,uBAAZ,EAAqC,cAArC,CAAN;;AAEA,UAAI,OAAO,SAAP,KAAqB,QAAzB,EAAmC;AACjC,QAAA,OAAO,GAAG,wBAAO,OAAP,EAAgB,SAAhB,EAA2B,GAA3B,EAAgC,KAAhC,CAAsC,CAAtC,EAAyC,SAAzC,CAAV;AACD;;AAED,UAAI,OAAJ,EAAa;AACX,QAAA,OAAO,aAAM,gBAAN,SAAyB,OAAzB,CAAP;AACD;;AAED,MAAA,SAAS,GAAG,CACV,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,QAAA,GAAG,EAAC,KAAV;AAAgB,QAAA,SAAS,YAAK,SAAL;AAAzB,OAAA,EACG,QADH,EAEG,IAFH,CADU,EAKV,OAAO,IACL,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,QAAA,GAAG,EAAC,SAAV;AAAoB,QAAA,SAAS,YAAK,SAAL;AAA7B,OAAA,EACG,OADH,CANQ,CAAZ;AAWD;AACF;;AAED,SAAO,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,IAAA,SAAS,YAAK,SAAL;AAAf,GAAA,EAAgD,SAAhD,CAAP;AACD,CA9CD;;eAgDe,e","sourcesContent":["import * as React from 'react';\nimport padEnd from 'lodash/padEnd';\nimport { valueType, FormatConfig } from './utils';\n\ninterface NumberProps extends FormatConfig {\n  value: valueType;\n}\n\nconst StatisticNumber: React.FC<NumberProps> = props => {\n  const { value, formatter, precision, decimalSeparator, groupSeparator = '', prefixCls } = props;\n\n  let valueNode: React.ReactNode;\n\n  if (typeof formatter === 'function') {\n    // Customize formatter\n    valueNode = formatter(value);\n  } else {\n    // Internal formatter\n    const val: string = String(value);\n    const cells = val.match(/^(-?)(\\d*)(\\.(\\d+))?$/);\n\n    // Process if illegal number\n    if (!cells || val === '-') {\n      valueNode = val;\n    } else {\n      const negative = cells[1];\n      let int = cells[2] || '0';\n      let decimal = cells[4] || '';\n\n      int = int.replace(/\\B(?=(\\d{3})+(?!\\d))/g, groupSeparator);\n\n      if (typeof precision === 'number') {\n        decimal = padEnd(decimal, precision, '0').slice(0, precision);\n      }\n\n      if (decimal) {\n        decimal = `${decimalSeparator}${decimal}`;\n      }\n\n      valueNode = [\n        <span key=\"int\" className={`${prefixCls}-content-value-int`}>\n          {negative}\n          {int}\n        </span>,\n        decimal && (\n          <span key=\"decimal\" className={`${prefixCls}-content-value-decimal`}>\n            {decimal}\n          </span>\n        ),\n      ];\n    }\n  }\n\n  return <span className={`${prefixCls}-content-value`}>{valueNode}</span>;\n};\n\nexport default StatisticNumber;\n"]}