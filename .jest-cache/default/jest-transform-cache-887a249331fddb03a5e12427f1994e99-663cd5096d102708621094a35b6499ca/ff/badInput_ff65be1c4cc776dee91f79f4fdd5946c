d7c1f766a5fcbd4df670ae670ed18d4a
"use strict";

/* istanbul ignore next */
function cov_1xappu679a() {
  var path = "/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/validator/rules/badInput.tsx";
  var hash = "a6581c9713d052b56531846d33ee878039125d64";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/validator/rules/badInput.tsx",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 29
        },
        end: {
          line: 3,
          column: 84
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 7,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 30
        }
      },
      "3": {
        start: {
          line: 10,
          column: 15
        },
        end: {
          line: 10,
          column: 69
        }
      },
      "4": {
        start: {
          line: 12,
          column: 24
        },
        end: {
          line: 12,
          column: 78
        }
      },
      "5": {
        start: {
          line: 14,
          column: 21
        },
        end: {
          line: 14,
          column: 52
        }
      },
      "6": {
        start: {
          line: 16,
          column: 13
        },
        end: {
          line: 16,
          column: 41
        }
      },
      "7": {
        start: {
          line: 18,
          column: 17
        },
        end: {
          line: 26,
          column: 1
        }
      },
      "8": {
        start: {
          line: 19,
          column: 2
        },
        end: {
          line: 23,
          column: 3
        }
      },
      "9": {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 22,
          column: 7
        }
      },
      "10": {
        start: {
          line: 21,
          column: 6
        },
        end: {
          line: 21,
          column: 60
        }
      },
      "11": {
        start: {
          line: 25,
          column: 2
        },
        end: {
          line: 25,
          column: 58
        }
      },
      "12": {
        start: {
          line: 29,
          column: 13
        },
        end: {
          line: 29,
          column: 23
        }
      },
      "13": {
        start: {
          line: 30,
          column: 34
        },
        end: {
          line: 30,
          column: 65
        }
      },
      "14": {
        start: {
          line: 31,
          column: 14
        },
        end: {
          line: 31,
          column: 25
        }
      },
      "15": {
        start: {
          line: 33,
          column: 2
        },
        end: {
          line: 44,
          column: 3
        }
      },
      "16": {
        start: {
          line: 36,
          column: 19
        },
        end: {
          line: 36,
          column: 29
        }
      },
      "17": {
        start: {
          line: 37,
          column: 32
        },
        end: {
          line: 37,
          column: 67
        }
      },
      "18": {
        start: {
          line: 38,
          column: 28
        },
        end: {
          line: 38,
          column: 135
        }
      },
      "19": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 43,
          column: 7
        }
      },
      "20": {
        start: {
          line: 46,
          column: 2
        },
        end: {
          line: 46,
          column: 14
        }
      }
    },
    fnMap: {
      "0": {
        name: "isBadInput",
        decl: {
          start: {
            line: 18,
            column: 26
          },
          end: {
            line: 18,
            column: 36
          }
        },
        loc: {
          start: {
            line: 18,
            column: 51
          },
          end: {
            line: 26,
            column: 1
          }
        },
        line: 18
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 20,
            column: 55
          },
          end: {
            line: 20,
            column: 56
          }
        },
        loc: {
          start: {
            line: 20,
            column: 71
          },
          end: {
            line: 22,
            column: 5
          }
        },
        line: 20
      },
      "2": {
        name: "badInput",
        decl: {
          start: {
            line: 28,
            column: 9
          },
          end: {
            line: 28,
            column: 17
          }
        },
        loc: {
          start: {
            line: 28,
            column: 32
          },
          end: {
            line: 47,
            column: 1
          }
        },
        line: 28
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 19,
            column: 2
          },
          end: {
            line: 23,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 19,
            column: 2
          },
          end: {
            line: 23,
            column: 3
          }
        }, {
          start: {
            line: 19,
            column: 2
          },
          end: {
            line: 23,
            column: 3
          }
        }],
        line: 19
      },
      "1": {
        loc: {
          start: {
            line: 21,
            column: 13
          },
          end: {
            line: 21,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 21,
            column: 13
          },
          end: {
            line: 21,
            column: 44
          }
        }, {
          start: {
            line: 21,
            column: 48
          },
          end: {
            line: 21,
            column: 59
          }
        }],
        line: 21
      },
      "2": {
        loc: {
          start: {
            line: 25,
            column: 9
          },
          end: {
            line: 25,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 9
          },
          end: {
            line: 25,
            column: 41
          }
        }, {
          start: {
            line: 25,
            column: 45
          },
          end: {
            line: 25,
            column: 57
          }
        }],
        line: 25
      },
      "3": {
        loc: {
          start: {
            line: 33,
            column: 2
          },
          end: {
            line: 44,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 2
          },
          end: {
            line: 44,
            column: 3
          }
        }, {
          start: {
            line: 33,
            column: 2
          },
          end: {
            line: 44,
            column: 3
          }
        }],
        line: 33
      },
      "4": {
        loc: {
          start: {
            line: 33,
            column: 6
          },
          end: {
            line: 35,
            column: 29
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 33,
            column: 6
          },
          end: {
            line: 33,
            column: 23
          }
        }, {
          start: {
            line: 35,
            column: 5
          },
          end: {
            line: 35,
            column: 29
          }
        }],
        line: 33
      },
      "5": {
        loc: {
          start: {
            line: 38,
            column: 28
          },
          end: {
            line: 38,
            column: 135
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 38,
            column: 63
          },
          end: {
            line: 38,
            column: 111
          }
        }, {
          start: {
            line: 38,
            column: 114
          },
          end: {
            line: 38,
            column: 135
          }
        }],
        line: 38
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a6581c9713d052b56531846d33ee878039125d64"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];

  cov_1xappu679a = function () {
    return actualCoverage;
  };

  return actualCoverage;
}

cov_1xappu679a();

var _interopRequireDefault =
/* istanbul ignore next */
(cov_1xappu679a().s[0]++, require("@babel/runtime/helpers/interopRequireDefault"));

/* istanbul ignore next */
cov_1xappu679a().s[1]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});

/* istanbul ignore next */
cov_1xappu679a().s[2]++;
exports["default"] = badInput;

var _isEmpty =
/* istanbul ignore next */
(cov_1xappu679a().s[3]++, _interopRequireDefault(require("../../_util/isEmpty")));

var _ValidationResult =
/* istanbul ignore next */
(cov_1xappu679a().s[4]++, _interopRequireDefault(require("../ValidationResult")));

var _localeContext =
/* istanbul ignore next */
(cov_1xappu679a().s[5]++, require("../../locale-context"));

var _utils =
/* istanbul ignore next */
(cov_1xappu679a().s[6]++, require("../../field/utils"));

/* istanbul ignore next */
cov_1xappu679a().s[7]++;

var isBadInput = function isBadInput(value, range) {
  /* istanbul ignore next */
  cov_1xappu679a().f[0]++;
  cov_1xappu679a().s[8]++;

  if (range) {
    /* istanbul ignore next */
    cov_1xappu679a().b[0][0]++;
    cov_1xappu679a().s[9]++;
    return (0, _utils.toRangeValue)(value, range).some(function (item) {
      /* istanbul ignore next */
      cov_1xappu679a().f[1]++;
      cov_1xappu679a().s[10]++;
      return (
        /* istanbul ignore next */
        (cov_1xappu679a().b[1][0]++, !(0, _isEmpty["default"])(item)) &&
        /* istanbul ignore next */
        (cov_1xappu679a().b[1][1]++, isNaN(item))
      );
    });
  } else
  /* istanbul ignore next */
  {
    cov_1xappu679a().b[0][1]++;
  }

  cov_1xappu679a().s[11]++;
  return (
    /* istanbul ignore next */
    (cov_1xappu679a().b[2][0]++, !(0, _isEmpty["default"])(value)) &&
    /* istanbul ignore next */
    (cov_1xappu679a().b[2][1]++, isNaN(value))
  );
};

function badInput(value, props) {
  /* istanbul ignore next */
  cov_1xappu679a().f[2]++;
  var type =
  /* istanbul ignore next */
  (cov_1xappu679a().s[12]++, props.type),
      defaultValidationMessages =
  /* istanbul ignore next */
  (cov_1xappu679a().s[13]++, props.defaultValidationMessages),
      range =
  /* istanbul ignore next */
  (cov_1xappu679a().s[14]++, props.range);

  /* istanbul ignore next */
  cov_1xappu679a().s[15]++;

  if (
  /* istanbul ignore next */
  (cov_1xappu679a().b[4][0]++, type === "number"
  /* number */
  ) &&
  /* istanbul ignore next */
  (cov_1xappu679a().b[4][1]++, isBadInput(value, range))) {
    /* istanbul ignore next */
    cov_1xappu679a().b[3][0]++;
    var ruleName =
    /* istanbul ignore next */
    (cov_1xappu679a().s[16]++, 'badInput');

    var _defaultValidationMes =
    /* istanbul ignore next */
    (cov_1xappu679a().s[17]++, defaultValidationMessages[ruleName]),
        validationMessage =
    /* istanbul ignore next */
    (cov_1xappu679a().s[18]++, _defaultValidationMes === void 0 ?
    /* istanbul ignore next */
    (cov_1xappu679a().b[5][0]++, (0, _localeContext.$l)('Validator', 'bad_input')) :
    /* istanbul ignore next */
    (cov_1xappu679a().b[5][1]++, _defaultValidationMes));

    /* istanbul ignore next */
    cov_1xappu679a().s[19]++;
    return new _ValidationResult["default"]({
      validationMessage: validationMessage,
      value: value,
      ruleName: ruleName
    });
  } else
  /* istanbul ignore next */
  {
    cov_1xappu679a().b[3][1]++;
  }

  cov_1xappu679a().s[20]++;
  return true;
}