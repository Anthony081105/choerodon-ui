{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/intl-field/IntlList.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAWA,IAAqB,QAArB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,oCAOe;AAAA,wBACY,KAAK,KADjB;AAAA,UACH,IADG,eACH,IADG;AAAA,UACG,IADH,eACG,IADH;AAAA,UAEH,QAFG,GAEU,yBAFV,CAEH,QAFG;AAGX,UAAM,MAAM,GAAG,0BAAU,QAAV,CAAf;AACA,aAAO,MAAM,CAAC,IAAP,CAAY,QAAZ,EAAsB,GAAtB,CAA0B,UAAA,GAAG;AAAA,eAClC,kBAAA,aAAA,CAAC,qBAAD,EAAkB;AAChB,UAAA,IAAI,EAAE,IAAI,aAAM,MAAN,cAAgB,IAAhB,cAAwB,GAAxB,IAAgC,GAD1B;AAEhB,UAAA,SAAS,EAAE,GAAG,KAAK,IAFH;AAGhB,UAAA,GAAG,EAAE;AAHW,SAAlB,CADkC;AAAA,OAA7B,CAAP;AAOD;AAlBH;AAAA;AAAA,6BAoBQ;AAAA,UACI,MADJ,GACe,KAAK,KADpB,CACI,MADJ;AAEJ,aAAO,kBAAA,aAAA,CAAC,gBAAD,EAAK;AAAC,QAAA,MAAM,EAAE;AAAT,OAAL,EAAuB,KAAK,aAAL,EAAvB,CAAP;AACD;AAvBH;AAAA;AAAA,EAAsC,gBAAtC,CAAA;;AACS,QAAA,CAAA,SAAA,GAAY;AACjB,EAAA,MAAM,EAAE,sBAAU,MADD;AAEjB,EAAA,IAAI,EAAE,sBAAU,MAFC;AAGjB,EAAA,IAAI,EAAE,sBAAU;AAHC,CAAZ;AADY,QAAQ,GAAA,uBAAA,CAD5B,mBAC4B,CAAA,EAAR,QAAQ,CAAR;eAAA,Q","sourcesContent":["import React, { Component } from 'react';\nimport { observer } from 'mobx-react';\nimport PropTypes from 'prop-types';\nimport { getConfig } from 'choerodon-ui/lib/configure';\nimport ObserverTextField from '../text-field/TextField';\nimport Form from '../form/Form';\nimport localeContext from '../locale-context';\nimport Record from '../data-set/Record';\nimport { Lang } from '../locale-context/enum';\n\nexport interface IntlListProps {\n  record?: Record;\n  name?: string;\n  lang: Lang;\n}\n\n@observer\nexport default class IntlList extends Component<IntlListProps> {\n  static propTypes = {\n    record: PropTypes.object,\n    name: PropTypes.string,\n    lang: PropTypes.string,\n  };\n\n  renderOptions() {\n    const { name, lang } = this.props;\n    const { supports } = localeContext;\n    const tlsKey = getConfig('tlsKey');\n    return Object.keys(supports).map(key => (\n      <ObserverTextField\n        name={name ? `${tlsKey}.${name}.${key}` : key}\n        autoFocus={key === lang}\n        key={key}\n      />\n    ));\n  }\n\n  render() {\n    const { record } = this.props;\n    return <Form record={record}>{this.renderOptions()}</Form>;\n  }\n}\n"]}