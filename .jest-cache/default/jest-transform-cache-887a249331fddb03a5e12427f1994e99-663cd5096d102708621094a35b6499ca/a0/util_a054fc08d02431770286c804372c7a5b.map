{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/tree/util.tsx"],"names":[],"mappings":";;;;;;;;;;;;AAmDM,SAAU,MAAV,CAAiB,MAAjB,EAAyB,OAAzB,EAAgC;AACpC,SAAO,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC,GAAP,CAAW,OAAX,CAAH,GAAyB,MAAM,CAAC,EAAxC,CAAb;AACD;;AAED,SAAS,WAAT,CAAqB,MAArB,EAA6B,QAA7B,EAAuC,OAAvC,EAAgD,IAAhD,EAAqD,qBAArD,EAA2E,QAA3E,EAAmF;AACjF,MAAM,GAAG,GAAG,MAAM,CAAC,MAAD,EAAS,OAAT,CAAlB;AACA;AAEI,IAAA,KAAK,EAAC,IAFV;AAGI,IAAA,MAAM,EAAC,CAAC,QAAD,IAAa,CAAC,MAAM,CAAC,QAHhC;AAII,IAAA,QAAQ,EAAR;AAJJ,KAKO,qBALP;AAMI,IAAA,UAAU,EAAC,CAAC,EAAE,MAAM,CAAC,OAAP,CAAe,SAAf,GAAyB,MAAM,CAAC,UAAhC,GAA2C,KAA7C,CANhB;AAOI,IAAA,QAAQ,EAAC,GAPb;AAQI,IAAA,GAAG,EAAH;AARJ;AAWD;;AAEK,SAAU,YAAV,CACJ,OADI,EAOe;AAAA,MALnB,OAKmB,uEALC,EAKD;AAAA,MAJnB,eAImB;AAAA,MAHnB,QAGmB;AAAA,MAFnB,gBAEmB;AAAA,MADnB,QACmB;AAAA,MAAnB,UAAmB;AAAA,MAEX,OAFW,GAEC,OAAO,CAAC,KAFT,CAEX,OAFW;AAGnB,SAAO,OAAO,CAAC,GAAR,CAAY,UAAA,MAAM,EAAG;AAC1B,QAAG,MAAM,CAAC,MAAP,KAAkB,QAArB,EAA8B;AAC1B,UAAM,QAAQ,GACd,eAAe,CAAC,OAAhB,CAAwB,MAAM,CAAC,MAAD,EAAS,OAAT,CAA9B,MAAqD,CAAC,CAAtD,GACI,YAAY,CAAC,OAAD,EAAU,MAAM,CAAC,QAAjB,EAA2B,eAA3B,EAA4C,QAA5C,EAAqD,gBAArD,EAAsE,QAAtE,CADhB,GAEI,IAHJ;AAIF,aAAO,WAAW,CAChB,MADgB,EAEhB,QAFgB,EAGhB,OAHgB,EAIhB,QAAQ,CAAC;AAAE,QAAA,OAAO,EAAP,OAAF;AAAW,QAAA,MAAM,EAAN,MAAX;AAAmB,QAAA,IAAI,EAAE,MAAM,CAAC,GAAP,CAAW,UAAX;AAAzB,OAAD,CAJQ,EAKhB,gBAAgB,CAAC;AAAE,QAAA,OAAO,EAAP,OAAF;AAAW,QAAA,MAAM,EAAN;AAAX,OAAD,CALA,EAMhB,QANgB,CAAlB;AAQD;;AACD,WAAO,IAAP;AACD,GAhBM,CAAP;AAiBD","sourcesContent":["import React, { ReactNode } from 'react';\nimport { TreeNodeProps,EventDataNode } from 'choerodon-ui/lib/tree';\nimport Record from '../data-set/Record';\nimport DataSet from '../data-set/DataSet';\n\nexport type IconType = React.ReactNode | ((props: TreeNodeProps) => React.ReactNode);\nexport interface DataNode {\n  children?: DataNode[];\n  key: string | number;\n  eventKey: string | number;\n  title?: React.ReactNode;\n  selectable?: boolean;\n  isLeaf?: boolean;\n  switcherIcon?: IconType;\n  checkable?: boolean;\n  disabled?: boolean;\n  icon?: IconType;\n  disableCheckbox?: boolean;\n\n  /** Set style of TreeNode. This is not recommend if you don't have any force requirement */\n  className?: string;\n  style?: React.CSSProperties;\n}\n\nexport interface TreeNodeRendererProps {\n  children?: TreeNodeRendererProps[];\n  title?: React.ReactNode;\n  isLeaf?: boolean;\n  switcherIcon?: IconType;\n  checkable?: boolean;\n  disabled?: boolean;\n  icon?: IconType;\n  disableCheckbox?: boolean;\n  /** Set style of TreeNode. This is not recommend if you don't have any force requirement */\n  className?: string;\n  style?: React.CSSProperties;\n}\n\n\nexport type NodeRenderer = (props: {\n  record?: Record | null;\n  dataSet?: DataSet | null;\n  text?: string;\n}) => ReactNode;\n\nexport type TreeNodeRenderer = ((props: {\n  record?: Record | null;\n  dataSet?: DataSet | null;\n}) => TreeNodeRendererProps ) | (((props:{record?: Record | null;\n  dataSet?: DataSet | null;}) => {})) | (() => ({}))\n\nexport function getKey(record, idField) {\n  return String(idField ? record.get(idField) : record.id);\n}\n\nfunction getTreeNode(record, children, idField, text,treeNodeRendererProps,loadData):DataNode {\n  const key = getKey(record, idField);\n  return (\n    {\n      title:text,\n      isLeaf:!loadData && !record.children,\n      children,\n      ...treeNodeRendererProps,\n      selectable:!!(record.dataSet.selection?record.selectable:false),\n      eventKey:key,\n      key,\n    }\n  );\n}\n\nexport function getTreeNodes(\n  dataSet: DataSet,\n  records: Record[] = [],\n  forceRenderKeys: string[],\n  renderer: NodeRenderer,\n  treeNodeRenderer:TreeNodeRenderer,\n  loadData?:(treeNode: EventDataNode) => Promise<void>,\n  titleField?: string,\n) {\n  const { idField } = dataSet.props;\n  return records.map(record => {\n    if(record.status !== 'delete'){\n        const children =\n        forceRenderKeys.indexOf(getKey(record, idField)) !== -1\n          ? getTreeNodes(dataSet, record.children, forceRenderKeys, renderer,treeNodeRenderer,loadData)\n          : null;\n      return getTreeNode(\n        record,\n        children,\n        idField,\n        renderer({ dataSet, record, text: record.get(titleField) }),\n        treeNodeRenderer({ dataSet, record}),\n        loadData,\n      );\n    }\n    return null\n  });\n}\n"]}