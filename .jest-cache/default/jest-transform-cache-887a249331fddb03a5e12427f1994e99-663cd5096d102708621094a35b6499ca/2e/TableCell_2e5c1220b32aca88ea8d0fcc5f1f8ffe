89bad52f242d380650723301587ec418
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _get = _interopRequireDefault(require("lodash/get"));

var TableCell =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(TableCell, _Component);

  function TableCell() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2["default"])(this, TableCell);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2["default"])(this, (_getPrototypeOf2 = (0, _getPrototypeOf3["default"])(TableCell)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "handleClick", function (e) {
      var _this$props = _this.props,
          record = _this$props.record,
          onCellClick = _this$props.column.onCellClick;

      if (onCellClick) {
        onCellClick(record, e);
      }
    });
    return _this;
  }

  (0, _createClass2["default"])(TableCell, [{
    key: "isInvalidRenderCellText",
    value: function isInvalidRenderCellText(text) {
      return text && !(0, _react.isValidElement)(text) && Object.prototype.toString.call(text) === '[object Object]';
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          record = _this$props2.record,
          indentSize = _this$props2.indentSize,
          prefixCls = _this$props2.prefixCls,
          indent = _this$props2.indent,
          index = _this$props2.index,
          expandIcon = _this$props2.expandIcon,
          column = _this$props2.column,
          BodyCell = _this$props2.component;
      var dataIndex = column.dataIndex,
          render = column.render,
          _column$className = column.className,
          className = _column$className === void 0 ? '' : _column$className; // We should return undefined if no dataIndex is specified, but in order to
      // be compatible with object-path's behavior, we return the record object instead.

      var text;

      if (typeof dataIndex === 'number') {
        text = (0, _get["default"])(record, dataIndex);
      } else if (!dataIndex || dataIndex.length === 0) {
        text = record;
      } else {
        text = (0, _get["default"])(record, dataIndex);
      }

      var tdProps = {
        tabIndex: -1
      };
      var colSpan;
      var rowSpan;

      if (render) {
        text = render(text, record, index);

        if (this.isInvalidRenderCellText(text)) {
          tdProps = text.props || tdProps;
          colSpan = tdProps.colSpan;
          rowSpan = tdProps.rowSpan;
          text = text.children;
        }
      }

      if (column.onCell) {
        tdProps = (0, _objectSpread2["default"])({}, tdProps, {}, column.onCell(record));
      }

      if (this.isInvalidRenderCellText(text)) {
        text = null;
      }

      var indentText = expandIcon ? _react["default"].createElement("span", {
        style: {
          paddingLeft: "".concat(indentSize * indent, "px")
        },
        className: "".concat(prefixCls, "-indent indent-level-").concat(indent)
      }) : null;

      if (rowSpan === 0 || colSpan === 0) {
        return null;
      }

      if (column.align) {
        tdProps.style = {
          textAlign: column.align
        };
      }

      return _react["default"].createElement(BodyCell, (0, _extends2["default"])({
        className: className,
        onClick: this.handleClick
      }, tdProps), indentText, expandIcon, text);
    }
  }]);
  return TableCell;
}(_react.Component);

exports["default"] = TableCell;
(0, _defineProperty2["default"])(TableCell, "propTypes", {
  record: _propTypes["default"].object,
  prefixCls: _propTypes["default"].string,
  index: _propTypes["default"].number,
  indent: _propTypes["default"].number,
  indentSize: _propTypes["default"].number,
  column: _propTypes["default"].object,
  expandIcon: _propTypes["default"].node,
  component: _propTypes["default"].any
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRhYmxlQ2VsbC5qc3giXSwibmFtZXMiOlsiVGFibGVDZWxsIiwiZSIsInByb3BzIiwicmVjb3JkIiwib25DZWxsQ2xpY2siLCJjb2x1bW4iLCJ0ZXh0IiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwiaW5kZW50U2l6ZSIsInByZWZpeENscyIsImluZGVudCIsImluZGV4IiwiZXhwYW5kSWNvbiIsIkJvZHlDZWxsIiwiY29tcG9uZW50IiwiZGF0YUluZGV4IiwicmVuZGVyIiwiY2xhc3NOYW1lIiwibGVuZ3RoIiwidGRQcm9wcyIsInRhYkluZGV4IiwiY29sU3BhbiIsInJvd1NwYW4iLCJpc0ludmFsaWRSZW5kZXJDZWxsVGV4dCIsImNoaWxkcmVuIiwib25DZWxsIiwiaW5kZW50VGV4dCIsInBhZGRpbmdMZWZ0IiwiYWxpZ24iLCJzdHlsZSIsInRleHRBbGlnbiIsImhhbmRsZUNsaWNrIiwiQ29tcG9uZW50IiwiUHJvcFR5cGVzIiwib2JqZWN0Iiwic3RyaW5nIiwibnVtYmVyIiwibm9kZSIsImFueSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7SUFFcUJBLFM7Ozs7Ozs7Ozs7Ozs7Ozs7O29HQWlCTCxVQUFDQyxDQUFELEVBQU87QUFBQSx3QkFDeUIsTUFBS0MsS0FEOUI7QUFBQSxVQUNYQyxNQURXLGVBQ1hBLE1BRFc7QUFBQSxVQUNPQyxXQURQLGVBQ0hDLE1BREcsQ0FDT0QsV0FEUDs7QUFFbkIsVUFBSUEsV0FBSixFQUFpQjtBQUNmQSxRQUFBQSxXQUFXLENBQUNELE1BQUQsRUFBU0YsQ0FBVCxDQUFYO0FBQ0Q7QUFDRixLOzs7Ozs7NENBVnVCSyxJLEVBQU07QUFDNUIsYUFBT0EsSUFBSSxJQUFJLENBQUMsMkJBQWVBLElBQWYsQ0FBVCxJQUNMQyxNQUFNLENBQUNDLFNBQVAsQ0FBaUJDLFFBQWpCLENBQTBCQyxJQUExQixDQUErQkosSUFBL0IsTUFBeUMs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SUFQSCxDQURGO0FBV0Q7OztFQWhHb0M2QixnQjs7O2lDQUFsQm5DLFMsZUFDQTtBQUNqQkcsRUFBQUEsTUFBTSxFQUFFaUMsc0JBQVVDLE1BREQ7QUFFakJ6QixFQUFBQSxTQUFTLEVBQUV3QixzQkFBVUUsTUFGSjtBQUdqQnhCLEVBQUFBLEtBQUssRUFBRXNCLHNCQUFVRyxNQUhBO0FBSWpCMUIsRUFBQUEsTUFBTSxFQUFFdUIsc0JBQVVHLE1BSkQ7QUFLakI1QixFQUFBQSxVQUFVLEVBQUV5QixzQkFBVUcsTUFMTDtBQU1qQmxDLEVBQUFBLE1BQU0sRUFBRStCLHNCQUFVQyxNQU5EO0FBT2pCdEIsRUFBQUEsVUFBVSxFQUFFcUIsc0JBQVVJLElBUEw7QUFRakJ2QixFQUFBQSxTQUFTLEVBQUVtQixzQkFBVUs7QUFSSixDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCwgaXNWYWxpZEVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGdldCBmcm9tICdsb2Rhc2gvZ2V0JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGFibGVDZWxsIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICByZWNvcmQ6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcHJlZml4Q2xzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGluZGVudDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBpbmRlbnRTaXplOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGNvbHVtbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBleHBhbmRJY29uOiBQcm9wVHlwZXMubm9kZSxcbiAgICBjb21wb25lbnQ6IFByb3BUeXBlcy5hbnksXG4gIH07XG5cbiAgaXNJbnZhbGlkUmVuZGVyQ2VsbFRleHQodGV4dCkge1xuICAgIHJldHVybiB0ZXh0ICYmICFpc1ZhbGlkRWxlbWVudCh0ZXh0KSAmJlxuICAgICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHRleHQpID09PSAnW29iamVjdCBPYmplY3RdJztcbiAgfVxuXG4gIGhhbmRsZUNsaWNrID0gKGUpID0+IHtcbiAgICBjb25zdCB7IHJlY29yZCwgY29sdW1uOiB7IG9uQ2VsbENsaWNrIH0gfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKG9uQ2VsbENsaWNrKSB7XG4gICAgICBvbkNlbGxDbGljayhyZWNvcmQsIGUpO1xuICAgIH1cbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgcmVjb3JkLFxuICAgICAgaW5kZW50U2l6ZSxcbiAgICAgIHByZWZpeENscyxcbiAgICAgIGluZGVudCxcbiAgICAgIGluZGV4LFxuICAgICAgZXhwYW5kSWNvbixcbiAgICAgIGNvbHVtbixcbiAgICAgIGNvbXBvbmVudDogQm9keUNlbGwsXG4gICAgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBkYXRhSW5kZXgsIHJlbmRlciwgY2xhc3NOYW1lID0gJycgfSA9IGNvbHVtbjtcblxuICAgIC8vIFdlIHNob3VsZCByZXR1cm4gdW5kZWZpbmVkIGlmIG5vIGRhdGFJbmRleCBpcyBzcGVjaWZpZWQsIGJ1dCBpbiBvcmRlciB0b1xuICAgIC8vIGJlIGNvbXBhdGlibGUgd2l0aCBvYmplY3QtcGF0aCdzIGJlaGF2aW9yLCB3ZSByZXR1cm4gdGhlIHJlY29yZCBvYmplY3QgaW5zdGVhZC5cbiAgICBsZXQgdGV4dDtcbiAgICBpZiAodHlwZW9mIGRhdGFJbmRleCA9PT0gJ251bWJlcicpIHtcbiAgICAgIHRleHQgPSBnZXQocmVjb3JkLCBkYXRhSW5kZXgpO1xuICAgIH0gZWxzZSBpZiAoIWRhdGFJbmRleCB8fCBkYXRhSW5kZXgubGVuZ3RoID09PSAwKSB7XG4gICAgICB0ZXh0ID0gcmVjb3JkO1xuICAgIH0gZWxzZSB7XG4gICAgICB0ZXh0ID0gZ2V0KHJlY29yZCwgZGF0YUluZGV4KTtcbiAgICB9XG4gICAgbGV0IHRkUHJvcHMgPSB7XG4gICAgICB0YWJJbmRleDogLTEsXG4gICAgfTtcbiAgICBsZXQgY29sU3BhbjtcbiAgICBsZXQgcm93U3BhbjtcblxuICAgIGlmIChyZW5kZXIpIHtcbiAgICAgIHRleHQgPSByZW5kZXIodGV4dCwgcmVjb3JkLCBpbmRleCk7XG4gICAgICBpZiAodGhpcy5pc0ludmFsaWRSZW5kZXJDZWxsVGV4dCh0ZXh0KSkge1xuICAgICAgICB0ZFByb3BzID0gdGV4dC5wcm9wcyB8fCB0ZFByb3BzO1xuICAgICAgICBjb2xTcGFuID0gdGRQcm9wcy5jb2xTcGFuO1xuICAgICAgICByb3dTcGFuID0gdGRQcm9wcy5yb3dTcGFuO1xuICAgICAgICB0ZXh0ID0gdGV4dC5jaGlsZHJlbjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29sdW1uLm9uQ2VsbCkge1xuICAgICAgdGRQcm9wcyA9IHsgLi4udGRQcm9wcywgLi4uY29sdW1uLm9uQ2VsbChyZWNvcmQpIH07XG4gICAgfVxuICAgIGlmICh0aGlzLmlzSW52YWxpZFJlbmRlckNlbGxUZXh0KHRleHQpKSB7XG4gICAgICB0ZXh0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBpbmRlbnRUZXh0ID0gZXhwYW5kSWNvbiA/IChcbiAgICAgIDxzcGFuXG4gICAgICAgIHN0eWxlPXt7IHBhZGRpbmdMZWZ0OiBgJHtpbmRlbnRTaXplICogaW5kZW50fXB4YCB9fVxuICAgICAgICBjbGFzc05hbWU9e2Ake3ByZWZpeENsc30taW5kZW50IGluZGVudC1sZXZlbC0ke2luZGVudH1gfVxuICAgICAgLz5cbiAgICApIDogbnVsbDtcblxuICAgIGlmIChyb3dTcGFuID09PSAwIHx8IGNvbFNwYW4gPT09IDApIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmIChjb2x1bW4uYWxpZ24pIHtcbiAgICAgIHRkUHJvcHMuc3R5bGUgPSB7IHRleHRBbGlnbjogY29sdW1uLmFsaWduIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxCb2R5Q2VsbFxuICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZX1cbiAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVDbGlja31cbiAgICAgICAgey4uLnRkUHJvcHN9XG4gICAgICA+XG4gICAgICAgIHtpbmRlbnRUZXh0fVxuICAgICAgICB7ZXhwYW5kSWNvbn1cbiAgICAgICAge3RleHR9XG4gICAgICA8L0JvZHlDZWxsPlxuICAgICk7XG4gIH1cbn1cbiJdfQ==