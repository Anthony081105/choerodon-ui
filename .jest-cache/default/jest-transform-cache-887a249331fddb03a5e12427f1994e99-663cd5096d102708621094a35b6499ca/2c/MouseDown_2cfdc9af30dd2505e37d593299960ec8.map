{"version":3,"sources":["ripple/MouseDown.js"],"names":["originalEvent","element","callback","MouseDown","PureComponent","currentTarget","e","pos","size","x","y","width","height","position","document","undefined","children","rippleChild","newProps","onMouseDown","wrapEvent","onMouseUp","onMouseLeave","onDragEnd","PropTypes","node"],"mappings":"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","sourcesContent":["import { cloneElement, PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nfunction wrapEvent(element, eventName, callback) {\n    return e => {\n        const originalEvent = element.props[eventName];\n        if (originalEvent) {\n            originalEvent(e);\n        }\n        callback(e);\n    };\n}\nexport default class MouseDown extends PureComponent {\n    constructor() {\n        super(...arguments);\n        this.state = {};\n        this.show = e => {\n            const { currentTarget } = e;\n            const pos = currentTarget.getBoundingClientRect();\n            this.setState({\n                size: {\n                    x: e.clientX - pos.left,\n                    y: e.clientY - pos.top,\n                    width: currentTarget.clientWidth,\n                    height: currentTarget.clientHeight,\n                    position: document.defaultView && document.defaultView.getComputedStyle(currentTarget).position,\n                },\n            });\n        };\n        this.hide = () => {\n            this.setState({\n                size: undefined,\n            });\n        };\n    }\n    render() {\n        const { children, rippleChild } = this.props;\n        const { size } = this.state;\n        const element = children(rippleChild, size);\n        const newProps = {\n            onMouseDown: wrapEvent(element, 'onMouseDown', this.show),\n        };\n        if (size) {\n            Object.assign(newProps, {\n                onMouseUp: wrapEvent(element, 'onMouseUp', this.hide),\n                onMouseLeave: wrapEvent(element, 'onMouseLeave', this.hide),\n                onDragEnd: wrapEvent(element, 'onDragEnd', this.hide),\n            });\n        }\n        return cloneElement(element, newProps);\n    }\n}\nMouseDown.displayName = 'MouseDown';\nMouseDown.propTypes = { rippleChild: PropTypes.node };\n"]}