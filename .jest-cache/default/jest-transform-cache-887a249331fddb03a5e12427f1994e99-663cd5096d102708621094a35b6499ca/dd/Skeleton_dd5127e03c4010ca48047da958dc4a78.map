{"version":3,"sources":["skeleton/Skeleton.js"],"names":["prop","hasTitle","size","shape","width","hasAvatar","basicProps","Skeleton","React","Component","customizePrefixCls","loading","className","children","avatar","title","paragraph","active","prefixCls","hasParagraph","avatarProps","getAvatarBasicProps","getComponentProps","avatarNode","Element","titleProps","getTitleBasicProps","$title","Title","paragraphProps","getParagraphBasicProps","paragraphNode","Paragraph","contentNode","cls"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\nimport Title from './Title';\nimport Paragraph from './Paragraph';\nimport { getPrefixCls } from '../configure';\nimport Element from './Element';\nfunction getComponentProps(prop) {\n    if (prop && typeof prop === 'object') {\n        return prop;\n    }\n    return {};\n}\nfunction getAvatarBasicProps(hasTitle, hasParagraph) {\n    if (hasTitle && !hasParagraph) {\n        // Square avatar\n        return { size: 'large', shape: 'square' };\n    }\n    return { size: 'large', shape: 'circle' };\n}\nfunction getTitleBasicProps(hasAvatar, hasParagraph) {\n    if (!hasAvatar && hasParagraph) {\n        return { width: '38%' };\n    }\n    if (hasAvatar && hasParagraph) {\n        return { width: '50%' };\n    }\n    return {};\n}\nfunction getParagraphBasicProps(hasAvatar, hasTitle) {\n    const basicProps = {};\n    // Width\n    if (!hasAvatar || !hasTitle) {\n        basicProps.width = '61%';\n    }\n    // Rows\n    if (!hasAvatar && hasTitle) {\n        basicProps.rows = 3;\n    }\n    else {\n        basicProps.rows = 2;\n    }\n    return basicProps;\n}\nclass Skeleton extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.renderSkeleton = () => {\n            const { prefixCls: customizePrefixCls, loading, className, children, avatar, title, paragraph, active, } = this.props;\n            const prefixCls = getPrefixCls('skeleton', customizePrefixCls);\n            if (loading || !('loading' in this.props)) {\n                const hasAvatar = !!avatar;\n                const hasTitle = !!title;\n                const hasParagraph = !!paragraph;\n                // Avatar\n                let avatarNode;\n                if (hasAvatar) {\n                    const avatarProps = {\n                        prefixCls: `${prefixCls}-avatar`,\n                        ...getAvatarBasicProps(hasTitle, hasParagraph),\n                        ...getComponentProps(avatar),\n                    };\n                    // We direct use SkeletonElement as avatar in skeleton internal.\n                    avatarNode = (React.createElement(\"div\", { className: `${prefixCls}-header` },\n                        React.createElement(Element, Object.assign({}, avatarProps))));\n                }\n                let contentNode;\n                if (hasTitle || hasParagraph) {\n                    // Title\n                    let $title;\n                    if (hasTitle) {\n                        const titleProps = {\n                            prefixCls: `${prefixCls}-title`,\n                            ...getTitleBasicProps(hasAvatar, hasParagraph),\n                            ...getComponentProps(title),\n                        };\n                        $title = React.createElement(Title, Object.assign({}, titleProps));\n                    }\n                    // Paragraph\n                    let paragraphNode;\n                    if (hasParagraph) {\n                        const paragraphProps = {\n                            prefixCls: `${prefixCls}-paragraph`,\n                            ...getParagraphBasicProps(hasAvatar, hasTitle),\n                            ...getComponentProps(paragraph),\n                        };\n                        paragraphNode = React.createElement(Paragraph, Object.assign({}, paragraphProps));\n                    }\n                    contentNode = (React.createElement(\"div\", { className: `${prefixCls}-content` },\n                        $title,\n                        paragraphNode));\n                }\n                const cls = classNames(prefixCls, className, {\n                    [`${prefixCls}-with-avatar`]: hasAvatar,\n                    [`${prefixCls}-active`]: active,\n                    [`${prefixCls}-rtl`]: false,\n                });\n                return (React.createElement(\"div\", { className: cls },\n                    avatarNode,\n                    contentNode));\n            }\n            return children;\n        };\n    }\n    render() {\n        return React.createElement(React.Fragment, null, this.renderSkeleton());\n    }\n}\nSkeleton.defaultProps = {\n    avatar: false,\n    title: true,\n    paragraph: true,\n};\nexport default Skeleton;\n"]}