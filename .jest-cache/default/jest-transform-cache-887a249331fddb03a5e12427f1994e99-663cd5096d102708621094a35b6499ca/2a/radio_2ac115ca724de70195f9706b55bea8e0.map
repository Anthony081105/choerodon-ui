{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components/radio/radio.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport shallowEqual from 'lodash/isEqual';\nimport RadioGroup from './group';\nimport RadioButton from './radioButton';\nimport { RadioChangeEvent, RadioGroupContext, RadioProps } from './interface';\nimport RcCheckbox from '../rc-components/checkbox';\nimport { getPrefixCls } from '../configure';\n\nexport default class Radio extends Component<RadioProps, {}> {\n  static displayName = 'Radio';\n\n  static Group: typeof RadioGroup;\n\n  static Button: typeof RadioButton;\n\n  static defaultProps = {\n    type: 'radio',\n  };\n\n  static contextTypes = {\n    radioGroup: PropTypes.any,\n  };\n\n  private rcCheckbox: any;\n\n  shouldComponentUpdate(nextProps: RadioProps, nextState: {}, nextContext: RadioGroupContext) {\n    const { radioGroup } = this.context;\n    return (\n      !shallowEqual(this.props, nextProps) ||\n      !shallowEqual(this.state, nextState) ||\n      !shallowEqual(radioGroup, nextContext.radioGroup)\n    );\n  }\n\n  saveCheckbox = (node: any) => {\n    this.rcCheckbox = node;\n  };\n\n  onChange = (e: RadioChangeEvent) => {\n    const { onChange } = this.props;\n    const { radioGroup } = this.context;\n    if (onChange) {\n      onChange(e);\n    }\n    if (radioGroup && radioGroup.onChange) {\n      radioGroup.onChange(e);\n    }\n  };\n\n  focus() {\n    this.rcCheckbox.focus();\n  }\n\n  blur() {\n    this.rcCheckbox.blur();\n  }\n\n  render() {\n    const { props, context } = this;\n    const { prefixCls: customizePrefixCls, className, children, style, ...restProps } = props;\n    const prefixCls = getPrefixCls('radio', customizePrefixCls);\n    const { radioGroup } = context;\n    const radioProps: RadioProps = { ...restProps };\n    if (radioGroup) {\n      radioProps.name = radioGroup.name;\n      radioProps.onChange = this.onChange;\n      radioProps.checked = props.value === radioGroup.value;\n      radioProps.disabled = props.disabled || radioGroup.disabled;\n    }\n    const wrapperClassString = classNames(className, {\n      [`${prefixCls}-wrapper`]: true,\n      [`${prefixCls}-wrapper-checked`]: radioProps.checked,\n      [`${prefixCls}-wrapper-disabled`]: radioProps.disabled,\n    });\n\n    return (\n      <label\n        className={wrapperClassString}\n        style={style}\n        onMouseEnter={props.onMouseEnter}\n        onMouseLeave={props.onMouseLeave}\n      >\n        <RcCheckbox {...radioProps} prefixCls={prefixCls} ref={this.saveCheckbox} />\n        {children !== undefined ? <span>{children}</span> : null}\n      </label>\n    );\n  }\n}\n"]}