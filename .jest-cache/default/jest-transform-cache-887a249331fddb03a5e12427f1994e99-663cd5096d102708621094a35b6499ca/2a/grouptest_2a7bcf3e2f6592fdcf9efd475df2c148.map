{"version":3,"sources":["group.test.js"],"names":["describe","createRadioGroup","props","createRadioGroupByOption","options","label","value","it","onMouseEnter","jest","fn","onMouseLeave","wrapper","find","simulate","expect","toHaveBeenCalled","onChange","radios","setState","at","mock","calls","length","toBe","setProps","GROUP_NAME","name","forEach","el","toEqual"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { shallow, mount } from 'enzyme';\nimport Radio from '../radio';\nimport RadioGroup from '../group';\n\ndescribe('Radio', () => {\n  function createRadioGroup(props) {\n    return (\n      <RadioGroup {...props}>\n        <Radio value=\"A\">A</Radio>\n        <Radio value=\"B\">B</Radio>\n        <Radio value=\"C\">C</Radio>\n      </RadioGroup>\n    );\n  }\n\n  function createRadioGroupByOption(props) {\n    const options = [\n      { label: 'A', value: 'A' },\n      { label: 'B', value: 'B' },\n      { label: 'C', value: 'C' },\n    ];\n\n    return <RadioGroup {...props} options={options} />;\n  }\n\n  it('responses hover events', () => {\n    const onMouseEnter = jest.fn();\n    const onMouseLeave = jest.fn();\n\n    const wrapper = shallow(\n      <RadioGroup className=\"radiogroup\" onMouseEnter={onMouseEnter} onMouseLeave={onMouseLeave}>\n        <Radio />\n      </RadioGroup>,\n    );\n    wrapper.find('.radiogroup').simulate('mouseenter');\n    expect(onMouseEnter).toHaveBeenCalled();\n\n    wrapper.find('.radiogroup').simulate('mouseleave');\n    expect(onMouseLeave).toHaveBeenCalled();\n  });\n\n  it('fire change events when value changes', () => {\n    const onChange = jest.fn();\n\n    const wrapper = mount(\n      createRadioGroup({\n        onChange,\n      }),\n    );\n    const radios = wrapper.find('input');\n\n    // uncontrolled component\n    wrapper.setState({ value: 'B' });\n    radios.at(0).simulate('change');\n    expect(onChange.mock.calls.length).toBe(1);\n\n    // controlled component\n    wrapper.setProps({ value: 'A' });\n    radios.at(1).simulate('change');\n    expect(onChange.mock.calls.length).toBe(2);\n  });\n\n  it(\"won't fire change events when value not changes\", () => {\n    const onChange = jest.fn();\n\n    const wrapper = mount(\n      createRadioGroup({\n        onChange,\n      }),\n    );\n    const radios = wrapper.find('input');\n\n    // uncontrolled component\n    wrapper.setState({ value: 'B' });\n    radios.at(1).simulate('change');\n    expect(onChange.mock.calls.length).toBe(0);\n\n    // controlled component\n    wrapper.setProps({ value: 'A' });\n    radios.at(0).simulate('change');\n    expect(onChange.mock.calls.length).toBe(0);\n  });\n\n  it('optional should correct render', () => {\n    const wrapper = mount(createRadioGroupByOption());\n    const radios = wrapper.find('input');\n\n    expect(radios.length).toBe(3);\n  });\n\n  it('all children should have a name property', () => {\n    const GROUP_NAME = 'radiogroup';\n    const wrapper = mount(createRadioGroup({ name: GROUP_NAME }));\n\n    wrapper.find('input[type=\"radio\"]').forEach(el => {\n      expect(el.props().name).toEqual(GROUP_NAME);\n    });\n  });\n});\n"]}