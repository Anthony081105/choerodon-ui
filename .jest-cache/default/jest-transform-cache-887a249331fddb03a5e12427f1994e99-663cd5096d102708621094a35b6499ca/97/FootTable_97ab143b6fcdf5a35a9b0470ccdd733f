7534cec5a05eee767d48eea993c6fd63
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = FootTable;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _measureScrollbar = _interopRequireDefault(require("../../_util/measureScrollbar"));

var _BaseTable = _interopRequireDefault(require("./BaseTable"));

function FootTable(props, _ref) {
  var table = _ref.table;
  var _table$props = table.props,
      prefixCls = _table$props.prefixCls,
      scroll = _table$props.scroll;
  var columns = props.columns,
      fixed = props.fixed,
      tableClassName = props.tableClassName,
      handleBodyScrollLeft = props.handleBodyScrollLeft,
      expander = props.expander;
  var saveRef = table.saveRef,
      columnManager = table.columnManager;
  var useFixedHeader = table.props.useFixedHeader;
  var footStyle = {};

  if (scroll.y) {
    useFixedHeader = true; // Add negative margin bottom for scroll bar overflow bug

    var scrollbarWidth = (0, _measureScrollbar["default"])('horizontal');

    if (scrollbarWidth > 0 && !fixed) {
      footStyle.marginBottom = "-".concat(scrollbarWidth, "px");
      footStyle.paddingBottom = '0px';
    }
  }

  if (!useFixedHeader || !columnManager.hasFooter()) {
    return null;
  }

  return _react["default"].createElement("div", {
    key: "footTable",
    ref: fixed ? null : saveRef('footTable'),
    className: "".concat(prefixCls, "-column-footer"),
    style: footStyle,
    onScroll: handleBodyScrollLeft
  }, _react["default"].createElement(_BaseTable["default"], {
    tableClassName: tableClassName,
    hasHead: false,
    hasBody: false,
    hasFoot: true,
    fixed: fixed,
    columns: columns,
    expander: expander
  }));
}

FootTable.propTypes = {
  fixed: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].bool]),
  columns: _propTypes["default"].array.isRequired,
  tableClassName: _propTypes["default"].string.isRequired,
  handleBodyScrollLeft: _propTypes["default"].func.isRequired,
  expander: _propTypes["default"].object.isRequired
};
FootTable.contextTypes = {
  table: _propTypes["default"].any
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkZvb3RUYWJsZS5qc3giXSwibmFtZXMiOlsiRm9vdFRhYmxlIiwicHJvcHMiLCJ0YWJsZSIsInByZWZpeENscyIsInNjcm9sbCIsImNvbHVtbnMiLCJmaXhlZCIsInRhYmxlQ2xhc3NOYW1lIiwiaGFuZGxlQm9keVNjcm9sbExlZnQiLCJleHBhbmRlciIsInNhdmVSZWYiLCJjb2x1bW5NYW5hZ2VyIiwidXNlRml4ZWRIZWFkZXIiLCJmb290U3R5bGUiLCJ5Iiwic2Nyb2xsYmFyV2lkdGgiLCJtYXJnaW5Cb3R0b20iLCJwYWRkaW5nQm90dG9tIiwiaGFzRm9vdGVyIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwib25lT2ZUeXBlIiwic3RyaW5nIiwiYm9vbCIsImFycmF5IiwiaXNSZXF1aXJlZCIsImZ1bmMiLCJvYmplY3QiLCJjb250ZXh0VHlwZXMiLCJhbnkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUVlLFNBQVNBLFNBQVQsQ0FBbUJDLEtBQW5CLFFBQXFDO0FBQUEsTUFBVEMsS0FBUyxRQUFUQSxLQUFTO0FBQUEscUJBQ3BCQSxLQUFLLENBQUNELEtBRGM7QUFBQSxNQUMxQ0UsU0FEMEMsZ0JBQzFDQSxTQUQwQztBQUFBLE1BQy9CQyxNQUQrQixnQkFDL0JBLE1BRCtCO0FBQUEsTUFFMUNDLE9BRjBDLEdBRXlCSixLQUZ6QixDQUUxQ0ksT0FGMEM7QUFBQSxNQUVqQ0MsS0FGaUMsR0FFeUJMLEtBRnpCLENBRWpDSyxLQUZpQztBQUFBLE1BRTFCQyxjQUYwQixHQUV5Qk4sS0FGekIsQ0FFMUJNLGNBRjBCO0FBQUEsTUFFVkMsb0JBRlUsR0FFeUJQLEtBRnpCLENBRVZPLG9CQUZVO0FBQUEsTUFFWUMsUUFGWixHQUV5QlIsS0FGekIsQ0FFWVEsUUFGWjtBQUFBLE1BRzFDQyxPQUgwQyxHQUdmUixLQUhlLENBRzFDUSxPQUgwQztBQUFBLE1BR2pDQyxhQUhpQyxHQUdmVCxLQUhlLENBR2pDUyxhQUhpQztBQUFBLE1BSTVDQyxjQUo0QyxHQUl6QlYsS0FBSyxDQUFDRCxLQUptQixDQUk1Q1csY0FKNEM7QUFLbEQsTUFBTUMsU0FBUyxHQUFHLEVBQWxCOztBQUVBLE1BQUlULE1BQU0sQ0FBQ1UsQ0FBWCxFQUFjO0FBQ1pGLElBQUFBLGNBQWMsR0FBRyxJQUFqQixDQURZLENBRVo7O0FBQ0EsUUFBTUcsY0FBYyxHQUFHLGtDQUFpQixZQUFqQixDQUF2Qjs7QUFDQSxRQUFJQSxjQUFjLEdBQUcsQ0FBakIsSUFBc0IsQ0FBQ1QsS0FBM0IsRUFBa0M7QUFDaENPLE1BQUFBLFNBQVMsQ0FBQ0csWUFBVixjQUE2QkQsY0FBN0I7QUFDQUYsTUFBQUEsU0FBUyxDQUFDSSxhQUFWLEdBQTBCLEtBQTFCO0FBQ0Q7QUFDRjs7QUFFRCxNQUFJLENBQUNMLGNBQUQsSUFBbUIsQ0FBQ0QsYUFBYSxDQUFDTyxTQUFkLEVBQXhCLEVBQW1EO0FBQ2pELFdBQU8sSUFBUDtBQUNEOztBQUVELFNBQ0U7QUFDRSxJQUFBLEdBQUcsRUFBQyxXQUROO0FBRUUsSUFBQSxHQUFHLEVBQUVaLEtBQUssR0FBRyxJQUFILEdBQVVJLE9BQU8sQ0FBQyxXQUFELENBRjdCO0FBR0UsSUFBQSxTQUFTLFlBQUtQLFNBQUwsbUJBSFg7QUFJRSxJQUFBLEtBQUssRUFBRVUsU0FKVDtBQUtFLElBQUEsUUFBUSxFQUFFTDtBQUxaLEtBT0UsZ0NBQUMscUJBQUQ7QUFDRSxJQUFBLGNBQWMsRUFBRUQsY0FEbEI7QUFFRSxJQUFBLE9BQU8sRUFBRSxLQUZYO0FBR0UsSUFBQSxPQUFPLEVBQUUsS0FIWDtBQUlFLElBQUEsT0FBTyxNQUpUO0FBS0UsSUFBQSxLQUFLLEVBQUVELEtBTFQ7QUFNRSxJQUFBLE9BQU8sRUFBRUQsT0FOWDtBQU9FLElBQUEsUUFBUSxFQUFFSTtBQVBaLElBUEYsQ0FERjtBQW1CRDs7QUFFRFQsU0FBUyxDQUFDbUIsU0FBVixHQUFzQjtBQUNwQmIsRUFBQUEsS0FBSyxFQUFFYyxzQkFBVUMsU0FBVixDQUFvQixDQUN6QkQsc0JBQVVFLE1BRGUsRUFFekJGLHNCQUFVRyxJQUZlLENBQXBCLENBRGE7QUFLcEJsQixFQUFBQSxPQUFPLEVBQUVlLHNCQUFVSSxLQUFWLENBQWdCQyxVQUxMO0FBTXBCbEIsRUFBQUEsY0FBYyxFQUFFYSxzQkFBVUUsTUFBVixDQUFpQkcsVUFOYjtBQU9wQmpCLEVBQUFBLG9CQUFvQixFQUFFWSxzQkFBVU0sSUFBVixDQUFlRCxVQVBqQjtBQVFwQmhCLEVBQUFBLFFBQVEsRUFBRVcsc0JBQVVPLE1BQVYsQ0FBaUJGO0FBUlAsQ0FBdEI7QUFXQXpCLFNBQVMsQ0FBQzRCLFlBQVYsR0FBeUI7QUFDdkIxQixFQUFBQSxLQUFLLEVBQUVrQixzQkFBVVM7QUFETSxDQUF6QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IG1lYXN1cmVTY3JvbGxiYXIgZnJvbSAnLi4vLi4vX3V0aWwvbWVhc3VyZVNjcm9sbGJhcic7XG5pbXBvcnQgQmFzZVRhYmxlIGZyb20gJy4vQmFzZVRhYmxlJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRm9vdFRhYmxlKHByb3BzLCB7IHRhYmxlIH0pIHtcbiAgY29uc3QgeyBwcmVmaXhDbHMsIHNjcm9sbCB9ID0gdGFibGUucHJvcHM7XG4gIGNvbnN0IHsgY29sdW1ucywgZml4ZWQsIHRhYmxlQ2xhc3NOYW1lLCBoYW5kbGVCb2R5U2Nyb2xsTGVmdCwgZXhwYW5kZXIgfSA9IHByb3BzO1xuICBjb25zdCB7IHNhdmVSZWYsIGNvbHVtbk1hbmFnZXIgfSA9IHRhYmxlO1xuICBsZXQgeyB1c2VGaXhlZEhlYWRlciB9ID0gdGFibGUucHJvcHM7XG4gIGNvbnN0IGZvb3RTdHlsZSA9IHt9O1xuXG4gIGlmIChzY3JvbGwueSkge1xuICAgIHVzZUZpeGVkSGVhZGVyID0gdHJ1ZTtcbiAgICAvLyBBZGQgbmVnYXRpdmUgbWFyZ2luIGJvdHRvbSBmb3Igc2Nyb2xsIGJhciBvdmVyZmxvdyBidWdcbiAgICBjb25zdCBzY3JvbGxiYXJXaWR0aCA9IG1lYXN1cmVTY3JvbGxiYXIoJ2hvcml6b250YWwnKTtcbiAgICBpZiAoc2Nyb2xsYmFyV2lkdGggPiAwICYmICFmaXhlZCkge1xuICAgICAgZm9vdFN0eWxlLm1hcmdpbkJvdHRvbSA9IGAtJHtzY3JvbGxiYXJXaWR0aH1weGA7XG4gICAgICBmb290U3R5bGUucGFkZGluZ0JvdHRvbSA9ICcwcHgnO1xuICAgIH1cbiAgfVxuXG4gIGlmICghdXNlRml4ZWRIZWFkZXIgfHwgIWNvbHVtbk1hbmFnZXIuaGFzRm9vdGVyKCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAga2V5PVwiZm9vdFRhYmxlXCJcbiAgICAgIHJlZj17Zml4ZWQgPyBudWxsIDogc2F2ZVJlZignZm9vdFRhYmxlJyl9XG4gICAgICBjbGFzc05hbWU9e2Ake3ByZWZpeENsc30tY29sdW1uLWZvb3RlcmB9XG4gICAgICBzdHlsZT17Zm9vdFN0eWxlfVxuICAgICAgb25TY3JvbGw9e2hhbmRsZUJvZHlTY3JvbGxMZWZ0fVxuICAgID5cbiAgICAgIDxCYXNlVGFibGVcbiAgICAgICAgdGFibGVDbGFzc05hbWU9e3RhYmxlQ2xhc3NOYW1lfVxuICAgICAgICBoYXNIZWFkPXtmYWxzZX1cbiAgICAgICAgaGFzQm9keT17ZmFsc2V9XG4gICAgICAgIGhhc0Zvb3RcbiAgICAgICAgZml4ZWQ9e2ZpeGVkfVxuICAgICAgICBjb2x1bW5zPXtjb2x1bW5zfVxuICAgICAgICBleHBhbmRlcj17ZXhwYW5kZXJ9XG4gICAgICAvPlxuICAgIDwvZGl2PlxuICApO1xufVxuXG5Gb290VGFibGUucHJvcFR5cGVzID0ge1xuICBmaXhlZDogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICBQcm9wVHlwZXMuYm9vbCxcbiAgXSksXG4gIGNvbHVtbnM6IFByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkLFxuICB0YWJsZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBoYW5kbGVCb2R5U2Nyb2xsTGVmdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgZXhwYW5kZXI6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbn07XG5cbkZvb3RUYWJsZS5jb250ZXh0VHlwZXMgPSB7XG4gIHRhYmxlOiBQcm9wVHlwZXMuYW55LFxufTtcbiJdfQ==