{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/validator/rules/typeMismatch.tsx"],"names":[],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAGA;;;;AAEA;AACA,IAAM,QAAQ,GAAG,ggBAAjB;AACA,IAAM,MAAM,GAAG,0bAAf;AACA,IAAM,YAAY,GAAG,oJAArB;AACA,IAAM,WAAW,GAAG,oCAApB;AACA;;AAEA,IAAM,SAAS,GAAG,SAAZ,SAAY,CAAC,KAAD,EAAQ,KAAR,EAAiB;AACjC,MAAI,KAAJ,EAAW;AACT,WAAO,yBAAa,KAAb,EAAoB,KAApB,EAA2B,IAA3B,CACL,UAAA,IAAI;AAAA,aAAI,CAAC,yBAAQ,IAAR,CAAD,KAAmB,CAAC,sBAAS,IAAT,CAAD,IAAmB,CAAC,IAAI,CAAC,OAAL,EAAvC,CAAJ;AAAA,KADC,CAAP;AAGD;;AACD,SAAO,CAAC,sBAAS,KAAT,CAAD,IAAoB,CAAC,KAAK,CAAC,OAAN,EAA5B;AACD,CAPD;;AASA,IAAM,KAAK,0DAGT;AAAA;AAHS,EAGU,CAAC,UAAA,KAAK;AAAA,SAAI,CAAC,QAAQ,CAAC,IAAT,CAAc,KAAd,CAAL;AAAA,CAAN,EAAiC,YAAjC,CAHV,4CAIT;AAAA;AAJS,EAIQ,CAAC,UAAA,KAAK;AAAA,SAAI,CAAC,MAAM,CAAC,IAAP,CAAY,KAAZ,CAAL;AAAA,CAAN,EAA+B,UAA/B,CAJR,4CAKT;AAAA;AALS,EAKU,CACjB,UAAA,KAAK;AAAA,SAAI,EAAE,YAAY,CAAC,IAAb,CAAkB,KAAlB,KAA4B,WAAW,CAAC,IAAZ,CAAiB,KAAjB,CAA9B,CAAJ;AAAA,CADY,EAEjB,aAFiB,CALV,4CAST;AAAA;AATS,EASS,CAAC,SAAD,EAAY,YAAZ,CATT,4CAUT;AAAA;AAVS,EAUa,CAAC,SAAD,EAAY,YAAZ,CAVb,4CAWT;AAAA;AAXS,EAWS,CAAC,SAAD,EAAY,YAAZ,CAXT,4CAYT;AAAA;AAZS,EAYU,CAAC,SAAD,EAAY,YAAZ,CAZV,4CAaT;AAAA;AAbS,EAaS,CAAC,SAAD,EAAY,YAAZ,CAbT,4CAcT;AAAA;AAdS,EAcS,CAAC,SAAD,EAAY,YAAZ,CAdT,UAAX;;AAiBc,SAAU,YAAV,CAAuB,KAAvB,EAAmC,KAAnC,EAAwD;AAAA,MAC5D,IAD4D,GACjB,KADiB,CAC5D,IAD4D;AAAA,MACtD,yBADsD,GACjB,KADiB,CACtD,yBADsD;AAAA,MAC3B,KAD2B,GACjB,KADiB,CAC3B,KAD2B;;AAEpE,MAAI,CAAC,yBAAQ,KAAR,CAAD,IAAmB,IAAvB,EAA6B;AAC3B,QAAM,YAAY,GAAG,KAAK,CAAC,IAAD,CAA1B;;AACA,QAAI,YAAJ,EAAkB;AAAA,0DACc,YADd;AAAA,UACT,QADS;AAAA,UACC,SADD;;AAEhB,UAAI,QAAQ,CAAC,KAAD,EAAQ,KAAR,CAAZ,EAA4B;AAC1B,YAAM,QAAQ,GAAG,cAAjB;AAD0B,oCAItB,yBAJsB,CAGvB,QAHuB;AAAA,YAGZ,iBAHY,sCAGQ,uBAAG,SAAH,EAAc,eAAd,CAHR;AAK1B,eAAO,IAAI,4BAAJ,CAAqB;AAC1B,UAAA,iBAAiB,EAAjB,iBAD0B;AAE1B,UAAA,KAAK,EAAL,KAF0B;AAG1B,UAAA,QAAQ,EAAR;AAH0B,SAArB,CAAP;AAKD;AACF;AACF;;AACD,SAAO,IAAP;AACD","sourcesContent":["import { isMoment } from 'moment';\nimport isEmpty from '../../_util/isEmpty';\nimport ValidationResult from '../ValidationResult';\nimport { $l } from '../../locale-context';\nimport { FieldType } from '../../data-set/enum';\nimport { methodReturn, ValidatorProps } from '.';\nimport { toRangeValue } from '../../field/utils';\n\n/* eslint-disable */\nconst emailReg = /^([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x22([^\\x0d\\x22\\x5c\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x22)(\\x2e([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x22([^\\x0d\\x22\\x5c\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x22))*\\x40([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x5b([^\\x0d\\x5b-\\x5d\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x5d)(\\x2e([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x5b([^\\x0d\\x5b-\\x5d\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x5d))*$/;\nconst urlReg = /^(?:(?:https?|HTTPS?|ftp|FTP):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-zA-Z\\u00a1-\\uffff0-9]-*)*[a-zA-Z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-zA-Z\\u00a1-\\uffff0-9]-*)*[a-zA-Z\\u00a1-\\uffff0-9]+)*)(?::\\d{2,5})?(?:[\\/?#]\\S*)?$/;\nconst colorRgbaReg = /^[rR][gG][Bb][Aa]?\\((\\s*(2[0-4][0-9]|25[0-5]|[01]?[0-9][0-9]?)\\s*,){2}\\s*(2[0-4][0-9]|25[0-5]|[01]?[0-9][0-9]?)\\s*,?\\s*(0?\\.\\d{1,2}|1|0)?\\s*\\){1}$/;\nconst colorHexReg = /^#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})$/;\n/* eslint-enable */\n\nconst isNotDate = (value, range) => {\n  if (range) {\n    return toRangeValue(value, range).some(\n      item => !isEmpty(item) && (!isMoment(item) || !item.isValid()),\n    );\n  }\n  return !isMoment(value) || !value.isValid();\n};\n\nconst types: {\n  [key: string]: [((value: any, range?: boolean | [string, string]) => boolean), string];\n} = {\n  [FieldType.email]: [value => !emailReg.test(value), 'EmailField'],\n  [FieldType.url]: [value => !urlReg.test(value), 'UrlField'],\n  [FieldType.color]: [\n    value => !(colorRgbaReg.test(value) || colorHexReg.test(value)),\n    'ColorPicker',\n  ],\n  [FieldType.date]: [isNotDate, 'DatePicker'],\n  [FieldType.dateTime]: [isNotDate, 'DatePicker'],\n  [FieldType.week]: [isNotDate, 'DatePicker'],\n  [FieldType.month]: [isNotDate, 'DatePicker'],\n  [FieldType.year]: [isNotDate, 'DatePicker'],\n  [FieldType.time]: [isNotDate, 'DatePicker'],\n};\n\nexport default function typeMismatch(value: any, props: ValidatorProps): methodReturn {\n  const { type, defaultValidationMessages, range } = props;\n  if (!isEmpty(value) && type) {\n    const validateType = types[type];\n    if (validateType) {\n      const [validate, component] = validateType;\n      if (validate(value, range)) {\n        const ruleName = 'typeMismatch';\n        const {\n          [ruleName]: validationMessage = $l(component, 'type_mismatch'),\n        } = defaultValidationMessages;\n        return new ValidationResult({\n          validationMessage,\n          value,\n          ruleName,\n        });\n      }\n    }\n  }\n  return true;\n}\n"]}