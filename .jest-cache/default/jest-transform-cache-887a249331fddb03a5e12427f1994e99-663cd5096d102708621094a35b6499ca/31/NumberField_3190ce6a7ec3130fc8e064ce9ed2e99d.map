{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/number-field/NumberField.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { ReactNode } from 'react';\nimport PropTypes from 'prop-types';\nimport { action, computed, isArrayLike, runInAction } from 'mobx';\nimport { observer } from 'mobx-react';\nimport isString from 'lodash/isString';\nimport isNumber from 'lodash/isNumber';\nimport isPlainObject from 'lodash/isPlainObject';\nimport defaultTo from 'lodash/defaultTo';\nimport isNil from 'lodash/isNil';\nimport KeyCode from 'choerodon-ui/lib/_util/KeyCode';\nimport { TextField, TextFieldProps } from '../text-field/TextField';\nimport autobind from '../_util/autobind';\nimport keepRunning from '../_util/keepRunning';\nimport Icon from '../icon';\nimport { getNearStepValues, getPrecision, MAX_SAFE_INTEGER, plus } from './utils';\nimport { ValidationMessages } from '../validator/Validator';\nimport isEmpty from '../_util/isEmpty';\nimport { $l } from '../locale-context';\nimport { FieldType } from '../data-set/enum';\nimport { ValidatorProps } from '../validator/rules';\nimport formatNumber from '../formatter/formatNumber';\n\nfunction getCurrentValidValue(value: string): number {\n  return Number(value.replace(/\\.$/, '')) || 0;\n}\n\nexport interface NumberFieldProps extends TextFieldProps {\n  /**\n   * 最小值\n   */\n  min?: number | null;\n  /**\n   * 最大值\n   */\n  max?: number | null;\n  /**\n   * 步距\n   */\n  step?: number;\n}\n\nexport class NumberField<T extends NumberFieldProps> extends TextField<T & NumberFieldProps> {\n  static displayName = 'NumberField';\n\n  static propTypes = {\n    /**\n     * 最小值\n     */\n    min: PropTypes.number,\n    /**\n     * 最大值\n     */\n    max: PropTypes.number,\n    /**\n     * 步距\n     */\n    step: PropTypes.number,\n    ...TextField.propTypes,\n  };\n\n  static defaultProps = {\n    ...TextField.defaultProps,\n    suffixCls: 'input-number',\n  };\n\n  static format = formatNumber;\n\n  @computed\n  get defaultValidationMessages(): ValidationMessages {\n    const label = this.getProp('label');\n    return {\n      valueMissing: $l('NumberField', label ? 'value_missing' : 'value_missing_no_label', {\n        label,\n      }),\n    };\n  }\n\n  @computed\n  get allowDecimal(): boolean {\n    const { min } = this;\n    const step = this.getProp('step');\n    return !step || (step as number) % 1 !== 0 || (!!min && (min as number) % 1 !== 0);\n  }\n\n  @computed\n  get allowNegative(): boolean {\n    const { min } = this;\n    return isNil(min) || min < 0;\n  }\n\n  @computed\n  get min(): number | undefined | null {\n    return this.getLimit('min');\n  }\n\n  @computed\n  get max(): number | undefined | null {\n    return this.getLimit('max');\n  }\n\n  @computed\n  get value(): any | undefined {\n    const { value } = this.observableProps;\n    if (isArrayLike(value)) {\n      return value;\n    }\n    const { range } = this;\n    if (isArrayLike(range)) {\n      if (isPlainObject(value)) {\n        const [start, end] = range;\n        return {\n          [start]: value[start],\n          [end]: value[end],\n        };\n      }\n    }\n    return value;\n  }\n\n  set value(value: any | undefined) {\n    runInAction(() => {\n      this.observableProps.value = value;\n    });\n  }\n\n  isLowerRange(value1: number, value2: number): boolean {\n    return value1 < value2;\n  }\n\n  getFieldType(): FieldType {\n    return FieldType.number;\n  }\n\n  getLimit(type: string): number | undefined | null {\n    const { record } = this;\n    const limit = this.getProp(type);\n    if (record && isString(limit)) {\n      const num = record.get(limit);\n      if (num !== undefined) {\n        return num;\n      }\n    }\n    return limit;\n  }\n\n  getValidatorProps(): ValidatorProps {\n    const { min, max } = this;\n    const step = this.getProp('step');\n    return {\n      ...super.getValidatorProps(),\n      min,\n      max,\n      step,\n    };\n  }\n\n  getInnerSpanButton(): ReactNode {\n    const { prefixCls, range } = this;\n    const step = this.getProp('step');\n    if (step && !range && !this.isReadOnly()) {\n      return this.wrapperInnerSpanButton(\n        <div>\n          <Icon\n            key=\"plus\"\n            type=\"keyboard_arrow_up\"\n            className={`${prefixCls}-plus`}\n            onMouseDown={this.handlePlus}\n          />\n          <Icon\n            key=\"minus\"\n            type=\"keyboard_arrow_down\"\n            className={`${prefixCls}-minus`}\n            onMouseDown={this.handleMinus}\n          />\n        </div>,\n      );\n    }\n  }\n\n  @action\n  handleEnterDown(e) {\n    if (this.multiple && this.range && this.text) {\n      this.prepareSetValue(this.text);\n    }\n    super.handleEnterDown(e);\n    if (this.multiple && this.range) {\n      this.setRangeTarget(0);\n      this.beginRange();\n    }\n  }\n\n  @autobind\n  handleKeyDown(e) {\n    if (!this.props.disabled && !this.isReadOnly()) {\n      switch (e.keyCode) {\n        case KeyCode.UP:\n          this.handleKeyDownUp(e);\n          break;\n        case KeyCode.DOWN:\n          this.handleKeyDownDown(e);\n          break;\n        default:\n      }\n    }\n    super.handleKeyDown(e);\n  }\n\n  handleKeyDownUp(e) {\n    e.preventDefault();\n    if (this.getProp('step')) {\n      this.step(true);\n    }\n  }\n\n  handleKeyDownDown(e) {\n    e.preventDefault();\n    if (this.getProp('step')) {\n      this.step(false);\n    }\n  }\n\n  @keepRunning\n  handlePlus() {\n    this.step(true);\n  }\n\n  @keepRunning\n  handleMinus() {\n    this.step(false);\n  }\n\n  step(isPlus: boolean) {\n    const min = defaultTo(this.min, -MAX_SAFE_INTEGER);\n    const max = defaultTo(this.max, MAX_SAFE_INTEGER);\n    const step = defaultTo(this.getProp('step'), 1);\n    let newValue;\n    const value =\n      this.multiple || this.isFocused ? Number(this.text || this.getValue()) : this.getValue();\n    if (!isNumber(value)) {\n      newValue = defaultTo(this.min, 0);\n    } else {\n      const currentValue = getCurrentValidValue(String(value));\n      newValue = currentValue;\n      const nearStep = getNearStepValues(currentValue, step as number, min, max);\n      if (nearStep) {\n        switch (nearStep.length) {\n          case 1:\n            newValue = nearStep[0];\n            break;\n          case 2:\n            newValue = nearStep[isPlus ? 1 : 0];\n            break;\n          default:\n        }\n      } else {\n        const nextValue = plus(currentValue, (isPlus ? step : -step) as number);\n        if (nextValue < min) {\n          newValue = min;\n        } else if (nextValue > max) {\n          const nearMaxStep = getNearStepValues(max as number, step as number, min, max as number);\n          if (nearMaxStep) {\n            newValue = nearMaxStep[0];\n          } else {\n            newValue = max;\n          }\n        } else {\n          newValue = nextValue;\n        }\n      }\n    }\n    if (this.value !== newValue) {\n      if (this.multiple) {\n        this.setText(String(newValue));\n      } else {\n        this.prepareSetValue(newValue);\n      }\n    }\n  }\n\n  prepareSetValue(value: any): void {\n    super.prepareSetValue(isNaN(value) || isEmpty(value) ? null : Number(value));\n  }\n\n  restrictInput(value: string): string {\n    if (value) {\n      let restrict = '0-9';\n      if (this.allowDecimal) {\n        restrict += '.';\n      }\n      const isNegative = this.allowNegative && /^-/.test(value);\n      value = super.restrictInput(value.replace(new RegExp(`[^${restrict}]+`, 'g'), ''));\n      const values = value.split('.');\n      if (values.length > 2) {\n        value = `${values.shift()}.${values.join('')}`;\n      }\n      if (isNegative) {\n        value = `-${value}`;\n      }\n    }\n    return value;\n  }\n\n  getFormatOptions(value?: number): Intl.NumberFormatOptions | undefined {\n    const precision = getPrecision(isNil(value) ? this.getValue() || 0 : value);\n    return {\n      minimumFractionDigits: precision,\n      maximumFractionDigits: precision,\n    };\n  }\n\n  getFormatter() {\n    return formatNumber;\n  }\n\n  processText(value: string): string {\n    return this.getFormatter()(value, this.lang, this.getFormatOptions(Number(value)));\n  }\n}\n\n@observer\nexport default class ObserverNumberField extends NumberField<NumberFieldProps> {\n  static defaultProps = NumberField.defaultProps;\n\n  static format = formatNumber;\n}\n"]}