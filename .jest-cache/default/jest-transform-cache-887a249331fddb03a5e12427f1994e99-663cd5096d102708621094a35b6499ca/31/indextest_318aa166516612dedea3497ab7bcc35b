acf554c30d95f83f2a8942aca124e352
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _ = _interopRequireDefault(require(".."));

var _dataSet = _interopRequireDefault(require("../../data-set"));

var options = null;
var ds = null;
var data = null;
describe('AutoComplete', function () {
  beforeEach(function () {
    data = [{
      user: '1'
    }];
    options = new _dataSet["default"]({
      fields: [{
        name: 'value',
        type: 'string'
      }, {
        name: 'meaning',
        type: 'string'
      }],
      data: [{
        value: '1',
        meaning: '1'
      }, {
        value: '12',
        meaning: '12'
      }, {
        value: '123',
        meaning: '123'
      }]
    });
    ds = new _dataSet["default"]({
      data: data,
      fields: [{
        name: 'user',
        type: 'string',
        textField: 'text',
        label: '用户'
      }]
    });
    jest.useFakeTimers();
  });
  afterEach(function () {
    jest.useRealTimers();
  });
  it('dataset set AutoComplete value', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      dataSet: ds,
      options: options,
      name: "user"
    }));
    jest.runAllTimers();
    expect(wrapper.find('input').at(0).prop('value')).toBe('1');
  });
  it('AutoComplete choose value to dataSet', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      dataSet: ds,
      options: options,
      name: "user"
    }));
    jest.runAllTimers();
    wrapper.find('.c7n-pro-auto-complete').simulate('click');
    expect(wrapper.find('MenuItem').length).toBe(3);
    wrapper.find('.c7n-pro-auto-complete').simulate('change', {
      target: {
        value: '12'
      }
    });
    expect(wrapper.find('MenuItem').length).toBe(2);
    expect(wrapper.find('MenuItem').at(0).prop('value').get('value')).toBe('12');
    expect(wrapper.find('MenuItem').at(1).prop('value').get('value')).toBe('123');
  });
  it('AutoComplete options change', function () {
    options = new _dataSet["default"]({
      fields: [{
        name: 'value',
        type: 'string'
      }, {
        name: 'meaning',
        type: 'string'
      }]
    });

    var handeInput = function handeInput(v) {
      var value = v.target.value;
      var suffixList = ['@qq.com', '@163.com', '@hand-china.com'];

      if (value.indexOf('@') !== -1) {
        options.loadData([]);
      } else {
        options.loadData(suffixList.map(function (suffix) {
          return {
            value: "".concat(value).concat(suffix),
            meaning: "".concat(value).concat(suffix)
          };
        }));
      }
    };

    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      dataSet: ds,
      options: options,
      name: "user",
      onInput: handeInput
    }));
    jest.runAllTimers();
    wrapper.find('.c7n-pro-auto-complete').simulate('click');
    wrapper.find('.c7n-pro-auto-complete').simulate('input', {
      target: {
        value: '12'
      }
    });
    expect(wrapper.find('MenuItem').length).toBe(3);
    expect(wrapper.find('MenuItem').at(0).prop('value').get('value')).toBe('12@qq.com');
    expect(wrapper.find('MenuItem').at(1).prop('value').get('value')).toBe('12@163.com');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRlc3QuanMiXSwibmFtZXMiOlsib3B0aW9ucyIsImRzIiwiZGF0YSIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsInVzZXIiLCJEYXRhU2V0IiwiZmllbGRzIiwibmFtZSIsInR5cGUiLCJ2YWx1ZSIsIm1lYW5pbmciLCJ0ZXh0RmllbGQiLCJsYWJlbCIsImplc3QiLCJ1c2VGYWtlVGltZXJzIiwiYWZ0ZXJFYWNoIiwidXNlUmVhbFRpbWVycyIsIml0Iiwid3JhcHBlciIsInJ1bkFsbFRpbWVycyIsImV4cGVjdCIsImZpbmQiLCJhdCIsInByb3AiLCJ0b0JlIiwic2ltdWxhdGUiLCJsZW5ndGgiLCJ0YXJnZXQiLCJnZXQiLCJoYW5kZUlucHV0IiwidiIsInN1ZmZpeExpc3QiLCJpbmRleE9mIiwibG9hZERhdGEiLCJtYXAiLCJzdWZmaXgiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQSxJQUFJQSxPQUFPLEdBQUcsSUFBZDtBQUNBLElBQUlDLEVBQUUsR0FBRyxJQUFUO0FBQ0EsSUFBSUMsSUFBSSxHQUFHLElBQVg7QUFFQUMsUUFBUSxDQUFDLGNBQUQsRUFBaUIsWUFBTTtBQUM3QkMsRUFBQUEsVUFBVSxDQUFDLFlBQU07QUFDZkYsSUFBQUEsSUFBSSxHQUFHLENBQ0w7QUFDRUcsTUFBQUEsSUFBSSxFQUFFO0FBRFIsS0FESyxDQUFQO0FBS0FMLElBQUFBLE9BQU8sR0FBRyxJQUFJTSxtQkFBSixDQUFZO0FBQ3BCQyxNQUFBQSxNQUFNLEVBQUUsQ0FBQztBQUNQQyxRQUFBQSxJQUFJLEVBQUUsT0FEQztBQUNRQyxRQUFBQSxJQUFJLEVBQUU7QUFEZCxPQUFELEVBRUw7QUFDREQsUUFBQUEsSUFBSSxFQUFFLFNBREw7QUFDZ0JDLFFBQUFBLElBQUksRUFBRTtBQUR0QixPQUZLLENBRFk7QUFNcEJQLE1BQUFBLElBQUksRUFBRSxDQUFDO0FBQ0xRLFFBQUFBLEtBQUssRUFBRSxHQURGO0FBRUxDLFFBQUFBLE9B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QUFBQSxPQUFPLENBQUNHLElBQVIsQ0FBYSx3QkFBYixFQUF1Q0ksUUFBdkMsQ0FBZ0QsT0FBaEQ7QUFDQVAsSUFBQUEsT0FBTyxDQUFDRyxJQUFSLENBQWEsd0JBQWIsRUFBdUNJLFFBQXZDLENBQWdELE9BQWhELEVBQXlEO0FBQUVFLE1BQUFBLE1BQU0sRUFBRTtBQUFFbEIsUUFBQUEsS0FBSyxFQUFFO0FBQVQ7QUFBVixLQUF6RDtBQUNBVyxJQUFBQSxNQUFNLENBQUNGLE9BQU8sQ0FBQ0csSUFBUixDQUFhLFVBQWIsRUFBeUJLLE1BQTFCLENBQU4sQ0FBd0NGLElBQXhDLENBQTZDLENBQTdDO0FBQ0FKLElBQUFBLE1BQU0sQ0FBQ0YsT0FBTyxDQUFDRyxJQUFSLENBQWEsVUFBYixFQUF5QkMsRUFBekIsQ0FBNEIsQ0FBNUIsRUFBK0JDLElBQS9CLENBQW9DLE9BQXBDLEVBQTZDSyxHQUE3QyxDQUFpRCxPQUFqRCxDQUFELENBQU4sQ0FBa0VKLElBQWxFLENBQXVFLFdBQXZFO0FBQ0FKLElBQUFBLE1BQU0sQ0FBQ0YsT0FBTyxDQUFDRyxJQUFSLENBQWEsVUFBYixFQUF5QkMsRUFBekIsQ0FBNEIsQ0FBNUIsRUFBK0JDLElBQS9CLENBQW9DLE9BQXBDLEVBQTZDSyxHQUE3QyxDQUFpRCxPQUFqRCxDQUFELENBQU4sQ0FBa0VKLElBQWxFLENBQXVFLFlBQXZFO0FBQ0QsR0EvQkMsQ0FBRjtBQWlDRCxDQWpHTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IG1vdW50IH0gZnJvbSAnZW56eW1lJztcbmltcG9ydCBBdXRvQ29tcGxldGUgZnJvbSAnLi4nO1xuaW1wb3J0IERhdGFTZXQgZnJvbSAnLi4vLi4vZGF0YS1zZXQnO1xuXG5sZXQgb3B0aW9ucyA9IG51bGw7XG5sZXQgZHMgPSBudWxsO1xubGV0IGRhdGEgPSBudWxsO1xuXG5kZXNjcmliZSgnQXV0b0NvbXBsZXRlJywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBkYXRhID0gW1xuICAgICAge1xuICAgICAgICB1c2VyOiAnMScsXG4gICAgICB9LFxuICAgIF07XG4gICAgb3B0aW9ucyA9IG5ldyBEYXRhU2V0KHtcbiAgICAgIGZpZWxkczogW3tcbiAgICAgICAgbmFtZTogJ3ZhbHVlJywgdHlwZTogJ3N0cmluZycsXG4gICAgICB9LCB7XG4gICAgICAgIG5hbWU6ICdtZWFuaW5nJywgdHlwZTogJ3N0cmluZycsXG4gICAgICB9XSxcbiAgICAgIGRhdGE6IFt7XG4gICAgICAgIHZhbHVlOiAnMScsXG4gICAgICAgIG1lYW5pbmc6ICcxJyxcbiAgICAgIH0sIHtcbiAgICAgICAgdmFsdWU6ICcxMicsXG4gICAgICAgIG1lYW5pbmc6ICcxMicsXG4gICAgICB9LCB7XG4gICAgICAgIHZhbHVlOiAnMTIzJyxcbiAgICAgICAgbWVhbmluZzogJzEyMycsXG4gICAgICB9XSxcbiAgICB9KTtcblxuICAgIGRzID0gbmV3IERhdGFTZXQoe1xuICAgICAgZGF0YSxcbiAgICAgIGZpZWxkczogW3sgbmFtZTogJ3VzZXInLCB0eXBlOiAnc3RyaW5nJywgdGV4dEZpZWxkOiAndGV4dCcsIGxhYmVsOiAn55So5oi3JyB9XSxcbiAgICB9KTtcbiAgICBqZXN0LnVzZUZha2VUaW1lcnMoKTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBqZXN0LnVzZVJlYWxUaW1lcnMoKTtcbiAgfSk7XG5cbiAgaXQoJ2RhdGFzZXQgc2V0IEF1dG9Db21wbGV0ZSB2YWx1ZScsICgpID0+IHtcbiAgICBjb25zdCB3cmFwcGVyID0gbW91bnQoXG4gICAgICA8QXV0b0NvbXBsZXRlIGRhdGFTZXQ9e2RzfSBvcHRpb25zPXtvcHRpb25zfSBuYW1lPVwidXNlclwiIC8+LFxuICAgICk7XG4gICAgamVzdC5ydW5BbGxUaW1lcnMoKTtcbiAgICBleHBlY3QoXG4gICAgICB3cmFwcGVyXG4gICAgICAgIC5maW5kKCdpbnB1dCcpXG4gICAgICAgIC5hdCgwKVxuICAgICAgICAucHJvcCgndmFsdWUnKSxcbiAgICApLnRvQmUoJzEnKTtcbiAgfSk7XG5cblxuICBpdCgnQXV0b0NvbXBsZXRlIGNob29zZSB2YWx1ZSB0byBkYXRhU2V0JywgKCkgPT4ge1xuICAgIGNvbnN0IHdyYXBwZXIgPSBtb3VudChcbiAgICAgIDxBdXRvQ29tcGxldGUgZGF0YVNldD17ZHN9IG9wdGlvbnM9e29wdGlvbnN9IG5hbWU9XCJ1c2VyXCIgLz4sXG4gICAgKTtcbiAgICBqZXN0LnJ1bkFsbFRpbWVycygpO1xuICAgIHdyYXBwZXIuZmluZCgnLmM3bi1wcm8tYXV0by1jb21wbGV0ZScpLnNpbXVsYXRlKCdjbGljaycpO1xuICAgIGV4cGVjdCh3cmFwcGVyLmZpbmQoJ01lbnVJdGVtJykubGVuZ3RoKS50b0JlKDMpO1xuICAgIHdyYXBwZXIuZmluZCgnLmM3bi1wcm8tYXV0by1jb21wbGV0ZScpLnNpbXVsYXRlKCdjaGFuZ2UnLCB7IHRhcmdldDogeyB2YWx1ZTogJzEyJyB9IH0pO1xuICAgIGV4cGVjdCh3cmFwcGVyLmZpbmQoJ01lbnVJdGVtJykubGVuZ3RoKS50b0JlKDIpO1xuICAgIGV4cGVjdCh3cmFwcGVyLmZpbmQoJ01lbnVJdGVtJykuYXQoMCkucHJvcCgndmFsdWUnKS5nZXQoJ3ZhbHVlJykpLnRvQmUoJzEyJyk7XG4gICAgZXhwZWN0KHdyYXBwZXIuZmluZCgnTWVudUl0ZW0nKS5hdCgxKS5wcm9wKCd2YWx1ZScpLmdldCgndmFsdWUnKSkudG9CZSgnMTIzJyk7XG4gIH0pO1xuXG5cbiAgaXQoJ0F1dG9Db21wbGV0ZSBvcHRpb25zIGNoYW5nZScsICgpID0+IHtcbiAgICBvcHRpb25zID0gbmV3IERhdGFTZXQoe1xuICAgICAgZmllbGRzOiBbe1xuICAgICAgICBuYW1lOiAndmFsdWUnLCB0eXBlOiAnc3RyaW5nJyxcbiAgICAgIH0sIHtcbiAgICAgICAgbmFtZTogJ21lYW5pbmcnLCB0eXBlOiAnc3RyaW5nJyxcbiAgICAgIH1dLFxuICAgIH0pO1xuXG4gICAgY29uc3QgaGFuZGVJbnB1dCA9ICh2KSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHYudGFyZ2V0LnZhbHVlO1xuICAgICAgY29uc3Qgc3VmZml4TGlzdCA9IFsnQHFxLmNvbScsICdAMTYzLmNvbScsICdAaGFuZC1jaGluYS5jb20nXTtcbiAgICAgIGlmICh2YWx1ZS5pbmRleE9mKCdAJykgIT09IC0xKSB7XG4gICAgICAgIG9wdGlvbnMubG9hZERhdGEoW10pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3B0aW9ucy5sb2FkRGF0YShzdWZmaXhMaXN0Lm1hcChzdWZmaXggPT4gKHtcbiAgICAgICAgICB2YWx1ZTogYCR7dmFsdWV9JHtzdWZmaXh9YCxcbiAgICAgICAgICBtZWFuaW5nOiBgJHt2YWx1ZX0ke3N1ZmZpeH1gLFxuICAgICAgICB9KSkpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCB3cmFwcGVyID0gbW91bnQoXG4gICAgICA8QXV0b0NvbXBsZXRlIGRhdGFTZXQ9e2RzfSBvcHRpb25zPXtvcHRpb25zfSBuYW1lPVwidXNlclwiIG9uSW5wdXQ9e2hhbmRlSW5wdXR9IC8+LFxuICAgICk7XG4gICAgamVzdC5ydW5BbGxUaW1lcnMoKTtcbiAgICB3cmFwcGVyLmZpbmQoJy5jN24tcHJvLWF1dG8tY29tcGxldGUnKS5zaW11bGF0ZSgnY2xpY2snKTtcbiAgICB3cmFwcGVyLmZpbmQoJy5jN24tcHJvLWF1dG8tY29tcGxldGUnKS5zaW11bGF0ZSgnaW5wdXQnLCB7IHRhcmdldDogeyB2YWx1ZTogJzEyJyB9IH0pO1xuICAgIGV4cGVjdCh3cmFwcGVyLmZpbmQoJ01lbnVJdGVtJykubGVuZ3RoKS50b0JlKDMpO1xuICAgIGV4cGVjdCh3cmFwcGVyLmZpbmQoJ01lbnVJdGVtJykuYXQoMCkucHJvcCgndmFsdWUnKS5nZXQoJ3ZhbHVlJykpLnRvQmUoJzEyQHFxLmNvbScpO1xuICAgIGV4cGVjdCh3cmFwcGVyLmZpbmQoJ01lbnVJdGVtJykuYXQoMSkucHJvcCgndmFsdWUnKS5nZXQoJ3ZhbHVlJykpLnRvQmUoJzEyQDE2My5jb20nKTtcbiAgfSk7XG5cbn0pO1xuIl19