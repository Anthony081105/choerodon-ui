dfd2a7cf92239d85a2fe3469ae2d9497
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _ = _interopRequireDefault(require(".."));

var _list = _interopRequireDefault(require("../list"));

var _operation = _interopRequireDefault(require("../operation"));

var _search = _interopRequireDefault(require("../search"));

var _item = _interopRequireDefault(require("../item"));

var _button = _interopRequireDefault(require("../../button"));

var _checkbox = _interopRequireDefault(require("../../checkbox"));

/* eslint no-use-before-define: "off" */
var listCommonProps = {
  dataSource: [{
    key: 'a',
    title: 'a'
  }, {
    key: 'b',
    title: 'b'
  }, {
    key: 'c',
    title: 'c',
    disabled: true
  }],
  selectedKeys: ['a'],
  targetKeys: ['b'],
  lazy: false
};
var listDisabledProps = {
  dataSource: [{
    key: 'a',
    title: 'a',
    disabled: true
  }, {
    key: 'b',
    title: 'b'
  }],
  selectedKeys: ['a', 'b'],
  targetKeys: [],
  lazy: false
};
var searchTransferProps = {
  dataSource: [{
    key: '0',
    title: 'content1',
    description: 'description of content1',
    chosen: false
  }, {
    key: '1',
    title: 'content2',
    description: 'description of content2',
    chosen: false
  }, {
    key: '2',
    title: 'content3',
    description: 'description of content3',
    chosen: false
  }, {
    key: '3',
    title: 'content4',
    description: 'description of content4',
    chosen: false
  }, {
    key: '4',
    title: 'content5',
    description: 'description of content5',
    chosen: false
  }, {
    key: '5',
    title: 'content6',
    description: 'description of content6',
    chosen: false
  }],
  selectedKeys: [],
  targetKeys: ['3', '4'],
  lazy: false
};
describe('Transfer', function () {
  it('should render correctly', function () {
    var wrapper = (0, _enzyme.render)(_react["default"].createElement(_["default"], listCommonProps));
    expect(wrapper).toMatchSnapshot();
  });
  it('should move selected keys to corresponding list', function () {
    var handleChange = jest.fn();
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], (0, _extends2["default"])({}, listCommonProps, {
      onChange: handleChange
    })));
    wrapper.find(_operation["default"]).find(_button["default"]).at(1).simulate('click'); // move selected keys to right list

    expect(handleChange).toHaveBeenCalledWith(['a', 'b'], 'right', ['a']);
  });
  it('should move selected keys expect disabled to corresponding list', function () {
    var handleChange = jest.fn();
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], (0, _extends2["default"])({}, listDisabledProps, {
      onChange: handleChange
    })));
    wrapper.find(_operation["default"]).find(_button["default"]).at(1).simulate('click'); // move selected keys to right list

    expect(handleChange).toHaveBeenCalledWith(['b'], 'right', ['b']);
  });
  it('should uncheck checkbox when click on checked item', function () {
    var handleSelectChange = jest.fn();
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], (0, _extends2["default"])({}, listCommonProps, {
      onSelectChange: handleSelectChange
    })));
    wrapper.find(_item["default"]).filterWhere(function (n) {
      return n.prop('item').key === 'a';
    }).simulate('click');
    expect(handleSelectChange).toHaveBeenLastCalledWith([], []);
  });
  it('should check checkbox when click on unchecked item', function () {
    var handleSelectChange = jest.fn();
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], (0, _extends2["default"])({}, listCommonProps, {
      onSelectChange: handleSelectChange
    })));
    wrapper.find(_item["default"]).filterWhere(function (n) {
      return n.prop('item').key === 'b';
    }).simulate('click');
    expect(handleSelectChange).toHaveBeenLastCalledWith(['a'], ['b']);
  });
  it('should not check checkbox when click on disabled item', function () {
    var handleSelectChange = jest.fn();
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], (0, _extends2["default"])({}, listCommonProps, {
      onSelectChange: handleSelectChange
    })));
    wrapper.find(_item["default"]).filterWhere(function (n) {
      return n.prop('item').key === 'c';
    }).simulate('click');
    expect(handleSelectChange).not.toHaveBeenCalled();
  });
  it('should check all item when click on check all', function () {
    var handleSelectChange = jest.fn();
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], (0, _extends2["default"])({}, listCommonProps, {
      onSelectChange: handleSelectChange
    })));
    wrapper.find('.c7n-transfer-list-header input[type="checkbox"]').filterWhere(function (n) {
      return !n.prop('checked');
    }).simulate('change');
    expect(handleSelectChange).toHaveBeenCalledWith(['a'], ['b']);
  });
  it('should uncheck all item when click on uncheck all', function () {
    var handleSelectChange = jest.fn();
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], (0, _extends2["default"])({}, listCommonProps, {
      onSelectChange: handleSelectChange
    })));
    wrapper.find('.c7n-transfer-list-header input[type="checkbox"]').filterWhere(function (n) {
      return n.prop('checked');
    }).simulate('change');
    expect(handleSelectChange).toHaveBeenCalledWith([], []);
  });
  it('should call `filterOption` when use input in search box', function () {
    var filterOption = function filterOption(inputValue, option) {
      return inputValue === option.title;
    };

    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], (0, _extends2["default"])({}, listCommonProps, {
      showSearch: true,
      filterOption: filterOption
    })));
    wrapper.find(_search["default"]).at(0).find('input').simulate('change', {
      target: {
        value: 'a'
      }
    });
    expect(wrapper.find(_list["default"]).at(0).find(_item["default"]).find(_checkbox["default"])).toHaveLength(1);
  });
  it('should display the correct count of items when filter by input', function () {
    var filterOption = function filterOption(inputValue, option) {
      return option.description.indexOf(inputValue) > -1;
    };

    var renderFunc = function renderFunc(item) {
      return item.title;
    };

    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], (0, _extends2["default"])({}, searchTransferProps, {
      showSearch: true,
      filterOption: filterOption,
      render: renderFunc
    })));
    wrapper.find(_search["default"]).at(0).find('input').simulate('change', {
      target: {
        value: 'content2'
      }
    });
    expect(wrapper.find(_list["default"]).at(0).find('.c7n-transfer-list-header-selected > span').at(0).first().text().trim()).toEqual('1 items');
  });
  it('should just check the filtered item when click on check all after search by input', function () {
    var filterOption = function filterOption(inputValue, option) {
      return option.description.indexOf(inputValue) > -1;
    };

    var renderFunc = function renderFunc(item) {
      return item.title;
    };

    var handleSelectChange = jest.fn();
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], (0, _extends2["default"])({}, searchTransferProps, {
      showSearch: true,
      filterOption: filterOption,
      render: renderFunc,
      onSelectChange: handleSelectChange
    })));
    wrapper.find(_search["default"]).at(0).find('input').simulate('change', {
      target: {
        value: 'content2'
      }
    });
    wrapper.find(_list["default"]).at(0).find('.c7n-transfer-list-header input[type="checkbox"]').filterWhere(function (n) {
      return !n.prop('checked');
    }).simulate('change');
    expect(handleSelectChange).toHaveBeenCalledWith(['1'], []);
  });
  it('should transfer just the filtered item after search by input', function () {
    var filterOption = function filterOption(inputValue, option) {
      return option.description.indexOf(inputValue) > -1;
    };

    var renderFunc = function renderFunc(item) {
      return item.title;
    };

    var handleChange = jest.fn();

    var handleSelectChange = function handleSelectChange(sourceSelectedKeys, targetSelectedKeys) {
      wrapper.setProps({
        selectedKeys: [].concat((0, _toConsumableArray2["default"])(sourceSelectedKeys), (0, _toConsumableArray2["default"])(targetSelectedKeys))
      });
    };

    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], (0, _extends2["default"])({}, searchTransferProps, {
      showSearch: true,
      filterOption: filterOption,
      render: renderFunc,
      onSelectChange: handleSelectChange,
      onChange: handleChange
    })));
    wrapper.find(_search["default"]).at(0).find('input').simulate('change', {
      target: {
        value: 'content2'
      }
    });
    wrapper.find(_list["default"]).at(0).find('.c7n-transfer-list-header input[type="checkbox"]').filterWhere(function (n) {
      return !n.prop('checked');
    }).simulate('change');
    wrapper.find(_operation["default"]).find(_button["default"]).at(1).simulate('click');
    expect(handleChange).toHaveBeenCalledWith(['1', '3', '4'], 'right', ['1']);
  });
  it('should check correctly when there is a search text', function () {
    var newProps = (0, _objectSpread2["default"])({}, listCommonProps);
    delete newProps.targetKeys;
    delete newProps.selectedKeys;
    var handleSelectChange = jest.fn();
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], (0, _extends2["default"])({}, newProps, {
      showSearch: true,
      onSelectChange: handleSelectChange,
      render: function render(item) {
        return item.title;
      }
    })));
    wrapper.find(_item["default"]).filterWhere(function (n) {
      return n.prop('item').key === 'b';
    }).simulate('click');
    expect(handleSelectChange).toHaveBeenLastCalledWith(['b'], []);
    wrapper.find(_search["default"]).at(0).find('input').simulate('change', {
      target: {
        value: 'a'
      }
    });
    wrapper.find(_list["default"]).at(0).find('.c7n-transfer-list-header input[type="checkbox"]').simulate('change');
    expect(handleSelectChange).toHaveBeenLastCalledWith(['b', 'a'], []);
    wrapper.find(_list["default"]).at(0).find('.c7n-transfer-list-header input[type="checkbox"]').simulate('change');
    expect(handleSelectChange).toHaveBeenLastCalledWith(['b'], []);
  });
  it('should show sorted targetkey', function () {
    var sortedTargetKeyProps = {
      dataSource: [{
        key: 'a',
        title: 'a'
      }, {
        key: 'b',
        title: 'b'
      }, {
        key: 'c',
        title: 'c'
      }],
      targetKeys: ['c', 'b'],
      lazy: false
    };
    var wrapper = (0, _enzyme.render)(_react["default"].createElement(_["default"], (0, _extends2["default"])({}, sortedTargetKeyProps, {
      render: function render(item) {
        return item.title;
      }
    })));
    expect(wrapper).toMatchSnapshot();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,