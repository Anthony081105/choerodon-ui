8a35c027d729a9312dba238f8f60b9d6
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _reactDom = require("react-dom");

var _classnames = _interopRequireDefault(require("classnames"));

var _omit = _interopRequireDefault(require("lodash/omit"));

var _icon = _interopRequireDefault(require("../icon"));

var _CheckableTag = _interopRequireDefault(require("./CheckableTag"));

var _animate = _interopRequireDefault(require("../animate"));

var _configure = require("../configure");

function _createSuper(Derived) {
  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  return function () {
    var Super = (0, _getPrototypeOf2["default"])(Derived),
        result;

    if (isNativeReflectConstruct()) {
      var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return (0, _possibleConstructorReturn2["default"])(this, result);
  };
}

var Tag =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(Tag, _Component);

  var _super = _createSuper(Tag);

  function Tag() {
    var _this;

    (0, _classCallCheck2["default"])(this, Tag);
    _this = _super.apply(this, arguments);
    _this.state = {
      closing: false,
      closed: false
    };

    _this.close = function (e) {
      var onClose = _this.props.onClose;

      if (onClose) {
        onClose(e);
      }

      if (e.defaultPrevented) {
        return;
      }

      var dom = (0, _reactDom.findDOMNode)((0, _assertThisInitialized2["default"])(_this));
      dom.style.width = "".concat(dom.getBoundingClientRect().width, "px"); // It's Magic Code, don't know why

      dom.style.width = "".concat(dom.getBoundingClientRect().width, "px");

      _this.setState({
        closing: true
      });
    };

    _this.animationEnd = function (_, existed) {
      var closed = _this.state.closed;

      if (!existed && !closed) {
        _this.setState({
          closed: true,
          closing: false
        });

        var afterClose = _this.props.afterClose;

        if (afterClose) {
          afterClose();
        }
      }
    };

    return _this;
  }

  (0, _createClass2["default"])(Tag, [{
    key: "isPresetColor",
    value: function isPresetColor(color) {
      if (!color) {
        return false;
      }

      return /^(pink|red|yellow|orange|cyan|green|blue|purple|geekblue|magenta|volcano|gold|lime)(-inverse)?$/.test(color);
    }
  }, {
    key: "render",
    value: function render() {
      var _classNames;

      var _this$props = this.props,
          customizePrefixCls = _this$props.prefixCls,
          closable = _this$props.closable,
          color = _this$props.color,
          className = _this$props.className,
          children = _this$props.children,
          style = _this$props.style,
          otherProps = (0, _objectWithoutProperties2["default"])(_this$props, ["prefixCls", "closable", "color", "className", "children", "style"]);
      var prefixCls = (0, _configure.getPrefixCls)('tag', customizePrefixCls);
      var _this$state = this.state,
          closing = _this$state.closing,
          closed = _this$state.closed;
      var closeIcon = closable ? _react["default"].createElement(_icon["default"], {
        type: "close",
        onClick: this.close
      }) : '';
      var isPresetColor = this.isPresetColor(color);
      var classString = (0, _classnames["default"])(prefixCls, (_classNames = {}, (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-").concat(color), isPresetColor), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-has-color"), color && !isPresetColor), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-close"), closing), _classNames), className); // fix https://fb.me/react-unknown-prop

      var divProps = (0, _omit["default"])(otherProps, ['onClose', 'afterClose']);
      var tagStyle = (0, _objectSpread2["default"])({}, style);

      if (color && !isPresetColor) {
        tagStyle.backgroundColor = color;
      }

      var tag = closed ? null : _react["default"].createElement("div", (0, _extends2["default"])({
        hidden: closing
      }, divProps, {
        className: classString,
        style: tagStyle
      }), children, closeIcon);
      return _react["default"].createElement(_animate["default"], {
        component: "",
        hiddenProp: "hidden",
        transitionName: "".concat(prefixCls, "-zoom"),
        transitionAppear: true,
        onEnd: this.animationEnd
      }, tag);
    }
  }]);
  return Tag;
}(_react.Component);

exports["default"] = Tag;
Tag.displayName = 'Tag';
Tag.CheckableTag = _CheckableTag["default"];
Tag.defaultProps = {
  closable: false
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRhZy9pbmRleC5qcyJdLCJuYW1lcyI6WyJUYWciLCJDb21wb25lbnQiLCJjbG9zaW5nIiwiY2xvc2VkIiwib25DbG9zZSIsImUiLCJkb20iLCJhZnRlckNsb3NlIiwiY29sb3IiLCJjdXN0b21pemVQcmVmaXhDbHMiLCJjbG9zYWJsZSIsImNsYXNzTmFtZSIsImNoaWxkcmVuIiwic3R5bGUiLCJvdGhlclByb3BzIiwicHJlZml4Q2xzIiwiY2xvc2VJY29uIiwiSWNvbiIsInR5cGUiLCJvbkNsaWNrIiwiY2xvc2UiLCJpc1ByZXNldENvbG9yIiwiY2xhc3NTdHJpbmciLCJkaXZQcm9wcyIsInRhZ1N0eWxlIiwidGFnIiwiaGlkZGVuIiwiQW5pbWF0ZSIsImNvbXBvbmVudCIsImhpZGRlblByb3AiLCJ0cmFuc2l0aW9uTmFtZSIsInRyYW5zaXRpb25BcHBlYXIiLCJvbkVuZCIsImFuaW1hdGlvbkVuZCIsIkNoZWNrYWJsZVRhZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUEsTUFBQSxHQUFBLHVCQUFBLENBQUEsT0FBQSxDQUFBLE9BQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsU0FBQSxHQUFBLE9BQUEsQ0FBQSxXQUFBLENBQUE7O0FBQ0EsSUFBQSxXQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLENBQUEsWUFBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxLQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxLQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLENBQUEsU0FBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxhQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLENBQUEsZ0JBQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsUUFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLFlBQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsVUFBQSxHQUFBLE9BQUEsQ0FBQSxjQUFBLENB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bkJsQyxTQUFtQmtDLENBQW5CbEM7QUFDQUEsR0FBRyxDQUFIQSxZQUFBQSxHQUFtQjtBQUNmVSxFQUFBQSxRQUFRLEVBQUU7QUFESyxDQUFuQlYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZmluZERPTU5vZGUgfSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgb21pdCBmcm9tICdsb2Rhc2gvb21pdCc7XG5pbXBvcnQgSWNvbiBmcm9tICcuLi9pY29uJztcbmltcG9ydCBDaGVja2FibGVUYWcgZnJvbSAnLi9DaGVja2FibGVUYWcnO1xuaW1wb3J0IEFuaW1hdGUgZnJvbSAnLi4vYW5pbWF0ZSc7XG5pbXBvcnQgeyBnZXRQcmVmaXhDbHMgfSBmcm9tICcuLi9jb25maWd1cmUnO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGFnIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGNsb3Npbmc6IGZhbHNlLFxuICAgICAgICAgICAgY2xvc2VkOiBmYWxzZSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5jbG9zZSA9IGUgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBvbkNsb3NlIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICAgICAgaWYgKG9uQ2xvc2UpIHtcbiAgICAgICAgICAgICAgICBvbkNsb3NlKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGUuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGRvbSA9IGZpbmRET01Ob2RlKHRoaXMpO1xuICAgICAgICAgICAgZG9tLnN0eWxlLndpZHRoID0gYCR7ZG9tLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRofXB4YDtcbiAgICAgICAgICAgIC8vIEl0J3MgTWFnaWMgQ29kZSwgZG9uJ3Qga25vdyB3aHlcbiAgICAgICAgICAgIGRvbS5zdHlsZS53aWR0aCA9IGAke2RvbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aH1weGA7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBjbG9zaW5nOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuYW5pbWF0aW9uRW5kID0gKF8sIGV4aXN0ZWQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgY2xvc2VkIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICAgICAgaWYgKCFleGlzdGVkICYmICFjbG9zZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgY2xvc2VkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBjbG9zaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGFmdGVyQ2xvc2UgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgICAgICAgICAgaWYgKGFmdGVyQ2xvc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgYWZ0ZXJDbG9zZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgaXNQcmVzZXRDb2xvcihjb2xvcikge1xuICAgICAgICBpZiAoIWNvbG9yKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC9eKHBpbmt8cmVkfHllbGxvd3xvcmFuZ2V8Y3lhbnxncmVlbnxibHVlfHB1cnBsZXxnZWVrYmx1ZXxtYWdlbnRhfHZvbGNhbm98Z29sZHxsaW1lKSgtaW52ZXJzZSk/JC8udGVzdChjb2xvcik7XG4gICAgfVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyBwcmVmaXhDbHM6IGN1c3RvbWl6ZVByZWZpeENscywgY2xvc2FibGUsIGNvbG9yLCBjbGFzc05hbWUsIGNoaWxkcmVuLCBzdHlsZSwgLi4ub3RoZXJQcm9wcyB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgY29uc3QgcHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCd0YWcnLCBjdXN0b21pemVQcmVmaXhDbHMpO1xuICAgICAgICBjb25zdCB7IGNsb3NpbmcsIGNsb3NlZCB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgY29uc3QgY2xvc2VJY29uID0gY2xvc2FibGUgPyBSZWFjdC5jcmVhdGVFbGVtZW50KEljb24sIHsgdHlwZTogXCJjbG9zZVwiLCBvbkNsaWNrOiB0aGlzLmNsb3NlIH0pIDogJyc7XG4gICAgICAgIGNvbnN0IGlzUHJlc2V0Q29sb3IgPSB0aGlzLmlzUHJlc2V0Q29sb3IoY29sb3IpO1xuICAgICAgICBjb25zdCBjbGFzc1N0cmluZyA9IGNsYXNzTmFtZXMocHJlZml4Q2xzLCB7XG4gICAgICAgICAgICBbYCR7cHJlZml4Q2xzfS0ke2NvbG9yfWBdOiBpc1ByZXNldENvbG9yLFxuICAgICAgICAgICAgW2Ake3ByZWZpeENsc30taGFzLWNvbG9yYF06IGNvbG9yICYmICFpc1ByZXNldENvbG9yLFxuICAgICAgICAgICAgW2Ake3ByZWZpeENsc30tY2xvc2VgXTogY2xvc2luZyxcbiAgICAgICAgfSwgY2xhc3NOYW1lKTtcbiAgICAgICAgLy8gZml4IGh0dHBzOi8vZmIubWUvcmVhY3QtdW5rbm93bi1wcm9wXG4gICAgICAgIGNvbnN0IGRpdlByb3BzID0gb21pdChvdGhlclByb3BzLCBbJ29uQ2xvc2UnLCAnYWZ0ZXJDbG9zZSddKTtcbiAgICAgICAgY29uc3QgdGFnU3R5bGUgPSB7XG4gICAgICAgICAgICAuLi5zdHlsZSxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGNvbG9yICYmICFpc1ByZXNldENvbG9yKSB7XG4gICAgICAgICAgICB0YWdTdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBjb2xvcjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0YWcgPSBjbG9zZWQgPyBudWxsIDogKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgT2JqZWN0LmFzc2lnbih7IGhpZGRlbjogY2xvc2luZyB9LCBkaXZQcm9wcywgeyBjbGFzc05hbWU6IGNsYXNzU3RyaW5nLCBzdHlsZTogdGFnU3R5bGUgfSksXG4gICAgICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgICAgIGNsb3NlSWNvbikpO1xuICAgICAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoQW5pbWF0ZSwgeyBjb21wb25lbnQ6IFwiXCIsIGhpZGRlblByb3A6IFwiaGlkZGVuXCIsIHRyYW5zaXRpb25OYW1lOiBgJHtwcmVmaXhDbHN9LXpvb21gLCB0cmFuc2l0aW9uQXBwZWFyOiB0cnVlLCBvbkVuZDogdGhpcy5hbmltYXRpb25FbmQgfSwgdGFnKSk7XG4gICAgfVxufVxuVGFnLmRpc3BsYXlOYW1lID0gJ1RhZyc7XG5UYWcuQ2hlY2thYmxlVGFnID0gQ2hlY2thYmxlVGFnO1xuVGFnLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBjbG9zYWJsZTogZmFsc2UsXG59O1xuIl19