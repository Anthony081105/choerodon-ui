{"version":3,"sources":["index.test.js"],"names":["describe","handleDataSetChange","jest","fn","optionData","text","value","data","optionDs","DataSet","selection","ds","fields","name","type","label","textField","valueField","options","events","update","it","wrapper","expect","find","length","toBe","at","simulate","prop"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { mount } from 'enzyme';\nimport Transfer from '..';\nimport DataSet from '../../data-set';\nimport TransferTest from './transferTest';\n\ndescribe('Transfer', () => {\n  const handleDataSetChange = jest.fn();\n  const optionData = [\n    { text: 'Jack', value: 'jack' },\n    { text: 'Huazhen', value: 'huazhen' },\n    { text: 'Lucy', value: 'lucy' },\n    { text: 'Niu', value: 'jiaqin' },\n    { text: 'Shao', value: 'shao' },\n  ];\n  const data = [\n    {\n      'first-name': 'huazhen',\n    },\n  ];\n  const optionDs = new DataSet({\n    data: optionData,\n    selection: 'single',\n  });\n  const ds = new DataSet({\n    data,\n    fields: [\n      {\n        name: 'first-name',\n        type: 'string',\n        label: '名',\n        textField: 'text',\n        valueField: 'value',\n        options: optionDs,\n      },\n    ],\n    events: {\n      update: handleDataSetChange,\n    },\n  });\n  it('Transfer render right Dom structure', () => {\n    const wrapper = mount(<Transfer dataSet={ds} name=\"first-name\" />);\n    expect(wrapper.find('Select').length).toBe(2);\n    expect(wrapper.find('TransferOperation').length).toBe(1);\n  });\n\n  it('basic test render 6 input item ', () => {\n    const wrapper = mount(<TransferTest />);\n    expect(wrapper.find('input').length).toBe(6);\n  });\n\n  it('check all test  ', () => {\n    const wrapper = mount(<Transfer dataSet={ds} name=\"first-name\" />);\n    wrapper\n      .find('Checkbox')\n      .at(0)\n      .simulate('click');\n    expect(\n      wrapper\n        .find('Checkbox')\n        .at(1)\n        .prop('checked'),\n    ).toBe(true);\n  });\n\n  it('click option button ', () => {\n    const wrapper = mount(<Transfer dataSet={ds} name=\"first-name\" />);\n    wrapper\n      .find('Checkbox')\n      .at(0)\n      .simulate('click');\n    expect(\n      wrapper\n        .find('Select')\n        .at(1)\n        .find('Checkbox').length,\n    ).toBe(2);\n    wrapper\n      .find('Button')\n      .at(1)\n      .simulate('click');\n    expect(\n      wrapper\n        .find('Select')\n        .at(1)\n        .find('Checkbox').length,\n    ).toBe(4);\n  });\n});\n"]}