2dbeb8648186286f1e440f39da0dedc4
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _ = _interopRequireDefault(require(".."));

describe('Table.rowSelection', function () {
  var columns = [{
    title: 'Name',
    dataIndex: 'name'
  }];
  var data = [{
    key: 0,
    name: 'Jack'
  }, {
    key: 1,
    name: 'Lucy'
  }, {
    key: 2,
    name: 'Tom'
  }, {
    key: 3,
    name: 'Jerry'
  }];

  function createTable() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return _react["default"].createElement(_["default"], (0, _extends2["default"])({
      columns: columns,
      dataSource: data,
      rowSelection: {}
    }, props));
  }

  function renderedNames(wrapper) {
    return wrapper.find('TableRow').map(function (row) {
      return row.props().record.name;
    });
  }

  it('select by checkbox', function () {
    var wrapper = (0, _enzyme.mount)(createTable());
    var checkboxes = wrapper.find('.c7n-checkbox-input');
    var checkboxAll = checkboxes.first();
    checkboxAll.simulate('change', {
      target: {
        checked: true
      }
    });
    expect(wrapper.instance().store.getState()).toEqual({
      selectedRowKeys: [0, 1, 2, 3],
      selectionDirty: true
    });
    checkboxes.at(1).simulate('change', {
      target: {
        checked: false
      }
    });
    expect(wrapper.instance().store.getState()).toEqual({
      selectedRowKeys: [1, 2, 3],
      selectionDirty: true
    });
    checkboxes.at(1).simulate('change', {
      target: {
        checked: true
      }
    });
    expect(wrapper.instance().store.getState()).toEqual({
      selectedRowKeys: [1, 2, 3, 0],
      selectionDirty: true
    });
  });
  it('select by radio', function () {
    var wrapper = (0, _enzyme.mount)(createTable({
      rowSelection: {
        type: 'radio'
      }
    }));
    var radios = wrapper.find('.c7n-radio-input');
    expect(radios.length).toBe(4);
    radios.first().simulate('change', {
      target: {
        checked: true
      }
    });
    expect(wrapper.instance().store.getState()).toEqual({
      selectedRowKeys: [0],
      selectionDirty: true
    });
    radios.last().simulate('change', {
      target: {
        checked: true
      }
    });
    expect(wrapper.instance().store.getState()).toEqual({
      selectedRowKeys: [3],
      selectionDirty: true
    });
  });
  it('pass getCheckboxProps to checkbox', function () {
    var rowSelection = {
      getCheckboxProps: function getCheckboxProps(record) {
        return {
          disabled: record.name === 'Lucy',
          name: record.name
        };
      }
    };
    var wrapper = (0, _enzyme.mount)(createTable({
      rowSelection: rowSelection
    }));
    var checkboxes = wrapper.find('.c7n-checkbox-input');
    expect(checkboxes.at(1).props().disabled).toBe(false);
    expect(checkboxes.at(1).props().name).toEqual(data[0].name);
    expect(checkboxes.at(2).props().disabled).toBe(true);
    expect(checkboxes.at(2).props().name).toEqual(data[1].name);
  });
  it('works with pagination', function () {
    var wrapper = (0, _enzyme.mount)(createTable({
      pagination: {
        pageSize: 2
      }
    }));
    var checkboxAll = wrapper.find('SelectionCheckboxAll');
    checkboxAll.find('input').simulate('change', {
      target: {
        checked: true
      }
    });
    expect(checkboxAll.instance().state).toEqual({
      checked: true,
      indeterminate: false
    });
    wrapper.find('.c7n-pagination-next').simulate('click');
    expect(checkboxAll.instance().state).toEqual({
      checked: false,
      indeterminate: false
    });
    wrapper.find('.c7n-pagination-prev').simulate('click');
    expect(checkboxAll.instance().state).toEqual({
      checked: true,
      indeterminate: false
    });
  });
  it('handles defaultChecked', function () {
    var rowSelection = {
      getCheckboxProps: function getCheckboxProps(record) {
        return {
          defaultChecked: record.key === 0
        };
      }
    };
    var wrapper = (0, _enzyme.mount)(createTable({
      rowSelection: rowSelection
    }));
    var checkboxs = wrapper.find('.c7n-checkbox-input');
    expect(checkboxs.at(1).props().checked).toBe(true);
    expect(checkboxs.at(2).props().checked).toBe(false);
    checkboxs.at(2).simulate('change', {
      target: {
        checked: true
      }
    });
    checkboxs = wrapper.find('.c7n-checkbox-input');
    expect(checkboxs.at(1).props().checked).toBe(true);
    expect(checkboxs.at(2).props().checked).toBe(true);
  });
  it('can be controlled', function () {
    var wrapper = (0, _enzyme.mount)(createTable({
      rowSelection: {
        selectedRowKeys: [0]
      }
    }));
    expect(wrapper.instance().store.getState()).toEqual({
      selectedRowKeys: [0],
      selectionDirty: false
    });
    wrapper.setProps({
      rowSelection: {
        selectedRowKeys: [1]
      }
    });
    expect(wrapper.instance().store.getState()).toEqual({
      selectedRowKeys: [1],
      selectionDirty: false
    });
  });
  it('fires change & select events', function () {
    var handleChange = jest.fn();
    var handleSelect = jest.fn();
    var rowSelection = {
      onChange: handleChange,
      onSelect: handleSelect
    };
    var wrapper = (0, _enzyme.mount)(createTable({
      rowSelection: rowSelection
    }));
    wrapper.find('input').last().simulate('change', {
      target: {
        checked: true
      }
    });
    expect(handleChange).toHaveBeenCalledWith([3], [{
      key: 3,
      name: 'Jerry'
    }]);
    expect(handleSelect.mock.calls.length).toBe(1);
    expect(handleSelect.mock.calls[0][0]).toEqual({
      key: 3,
      name: 'Jerry'
    });
    expect(handleSelect.mock.calls[0][1]).toEqual(true);
    expect(handleSelect.mock.calls[0][2]).toEqual([{
      key: 3,
      name: 'Jerry'
    }]);
    expect(handleSelect.mock.calls[0][3].type).toBe('change');
  });
  it('fires selectAll event', function () {
    var handleSelectAll = jest.fn();
    var rowSelection = {
      onSelectAll: handleSelectAll
    };
    var wrapper = (0, _enzyme.mount)(createTable({
      rowSelection: rowSelection
    }));
    wrapper.find('.c7n-checkbox-input').first().simulate('change', {
      target: {
        checked: true
      }
    });
    expect(handleSelectAll).toHaveBeenCalledWith(true, data, data);
    wrapper.find('.c7n-checkbox-input').first().simulate('change', {
      target: {
        checked: false
      }
    });
    expect(handleSelectAll).toHaveBeenCalledWith(false, [], data);
  });
  it('render with default selection correctly', function () {
    var rowSelection = {
      selections: true
    };
    var wrapper = (0, _enzyme.mount)(createTable({
      rowSelection: rowSelection
    }));
    var dropdownWrapper = (0, _enzyme.render)(wrapper.find('Trigger').at(2).instance().getComponent());
    expect(dropdownWrapper).toMatchSnapshot();
  });
  it('click select all selection', function () {
    var handleSelectAll = jest.fn();
    var rowSelection = {
      onSelectAll: handleSelectAll,
      selections: true
    };
    var wrapper = (0, _enzyme.mount)(createTable({
      rowSelection: rowSelection
    }));
    var dropdownWrapper = (0, _enzyme.mount)(wrapper.find('Trigger').at(2).instance().getComponent());
    dropdownWrapper.find('.c7n-dropdown-menu-item > div').first().simulate('click');
    expect(handleSelectAll).toHaveBeenCalledWith(true, data, data);
  });
  it('fires selectInvert event', function () {
    var handleSelectInvert = jest.fn();
    var rowSelection = {
      onSelectInvert: handleSelectInvert,
      selections: true
    };
    var wrapper = (0, _enzyme.mount)(createTable({
      rowSelection: rowSelection
    }));
    var checkboxes = wrapper.find('.c7n-checkbox-input');
    checkboxes.at(1).simulate('change', {
      target: {
        checked: true
      }
    });
    var dropdownWrapper = (0, _enzyme.mount)(wrapper.find('Trigger').at(2).instance().getComponent());
    dropdownWrapper.find('.c7n-dropdown-menu-item > div').at(1).simulate('click');
    expect(handleSelectInvert).toHaveBeenCalledWith([1, 2, 3]);
  });
  it('fires selection event', function () {
    var handleSelectOdd = jest.fn();
    var handleSelectEven = jest.fn();
    var rowSelection = {
      selections: [{
        key: 'odd',
        text: '奇数项',
        onSelect: handleSelectOdd
      }, {
        key: 'even',
        text: '偶数项',
        onSelect: handleSelectEven
      }]
    };
    var wrapper = (0, _enzyme.mount)(createTable({
      rowSelection: rowSelection
    }));
    var dropdownWrapper = (0, _enzyme.mount)(wrapper.find('Trigger').at(2).instance().getComponent());
    expect(dropdownWrapper.find('.c7n-dropdown-menu-item').length).toBe(4);
    dropdownWrapper.find('.c7n-dropdown-menu-item > div').at(2).simulate('click');
    expect(handleSelectOdd).toHaveBeenCalledWith([0, 1, 2, 3]);
    dropdownWrapper.find('.c7n-dropdown-menu-item > div').at(3).simulate('click');
    expect(handleSelectEven).toHaveBeenCalledWith([0, 1, 2, 3]);
  });
  it('could hide default selection options', function () {
    var rowSelection = {
      hideDefaultSelections: true,
      selections: [{
        key: 'odd',
        text: '奇数项'
      }, {
        key: 'even',
        text: '偶数项'
      }]
    };
    var wrapper = (0, _enzyme.mount)(createTable({
      rowSelection: rowSelection
    }));
    var dropdownWrapper = (0, _enzyme.mount)(wrapper.find('Trigger').at(2).instance().getComponent());
    expect(dropdownWrapper.find('.c7n-dropdown-menu-item').length).toBe(2);
  });
  it('handle custom selection onSelect correctly when hide default selection options', function () {
    var handleSelectOdd = jest.fn();
    var handleSelectEven = jest.fn();
    var rowSelection = {
      hideDefaultSelections: true,
      selections: [{
        key: 'odd',
        text: '奇数项',
        onSelect: handleSelectOdd
      }, {
        key: 'even',
        text: '偶数项',
        onSelect: handleSelectEven
      }]
    };
    var wrapper = (0, _enzyme.mount)(createTable({
      rowSelection: rowSelection
    }));
    var dropdownWrapper = (0, _enzyme.mount)(wrapper.find('Trigger').at(2).instance().getComponent());
    expect(dropdownWrapper.find('.c7n-dropdown-menu-item').length).toBe(2);
    dropdownWrapper.find('.c7n-dropdown-menu-item > div').at(0).simulate('click');
    expect(handleSelectOdd).toHaveBeenCalledWith([0, 1, 2, 3]);
    dropdownWrapper.find('.c7n-dropdown-menu-item > div').at(1).simulate('click');
    expect(handleSelectEven).toHaveBeenCalledWith([0, 1, 2, 3]);
  });
  it('handles disabled checkbox correctly when dataSource changes', function () {
    var rowSelection = {
      getCheckboxProps: function getCheckboxProps(record) {
        return {
          disabled: record.disabled
        };
      }
    };
    var wrapper = (0, _enzyme.mount)(createTable({
      rowSelection: rowSelection
    }));
    var newData = [{
      key: 0,
      name: 'Jack',
      disabled: true
    }, {
      key: 1,
      name: 'Lucy',
      disabled: true
    }];
    wrapper.setProps({
      dataSource: newData
    });
    wrapper.find('.c7n-checkbox-input').forEach(function (checkbox) {
      expect(checkbox.props().disabled).toBe(true);
    });
  });
  it('should not switch pagination when select record', function () {
    var newData = [];

    for (var i = 0; i < 20; i += 1) {
      newData.push({
        key: i.toString(),
        name: i.toString()
      });
    }

    var wrapper = (0, _enzyme.mount)(createTable({
      rowSelection: {},
      dataSource: newData
    }));
    wrapper.find('.c7n-pagination-next').simulate('click'); // switch to second page

    wrapper.find('input').first().simulate('change', {
      target: {
        checked: true
      }
    });
    wrapper.update();
    expect(renderedNames(wrapper)).toEqual(['10', '11', '12', '13', '14', '15', '16', '17', '18', '19']);
  });
  it('highlight selected row', function () {
    var wrapper = (0, _enzyme.mount)(createTable());
    wrapper.find('input').at(1).simulate('change', {
      target: {
        checked: true
      }
    });
    expect(wrapper.find('tbody tr').at(0).hasClass('c7n-table-row-selected')).toBe(true);
  });
  it('fix selection column on the left', function () {
    var wrapper = (0, _enzyme.render)(createTable({
      rowSelection: {
        fixed: true
      }
    }));
    expect(wrapper).toMatchSnapshot();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,