{"version":3,"sources":["checkbox/Group.js"],"names":["CheckboxGroup","Component","state","optionIndex","option","value","onChange","props","disabled","checkboxGroup","toggleOption","nextProps","nextState","options","label","customizePrefixCls","className","style","prefixCls","children","Checkbox","key","checked","classString","wrapperClassString","labelClassString","defaultValue","PropTypes","func","any"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport shallowEqual from 'lodash/isEqual';\nimport Checkbox from './Checkbox';\nimport { getPrefixCls } from '../configure';\nexport default class CheckboxGroup extends Component {\n    constructor(props) {\n        super(props);\n        this.toggleOption = (option) => {\n            const { state } = this;\n            const optionIndex = state.value.indexOf(option.value);\n            const value = [...state.value];\n            if (optionIndex === -1) {\n                value.push(option.value);\n            }\n            else {\n                value.splice(optionIndex, 1);\n            }\n            if (!('value' in this.props)) {\n                this.setState({ value });\n            }\n            const { onChange } = this.props;\n            if (onChange) {\n                onChange(value);\n            }\n        };\n        this.state = {\n            value: props.value || props.defaultValue || [],\n        };\n    }\n    getChildContext() {\n        const { disabled } = this.props;\n        const { value } = this.state;\n        return {\n            checkboxGroup: {\n                toggleOption: this.toggleOption,\n                value,\n                disabled,\n            },\n        };\n    }\n    componentWillReceiveProps(nextProps) {\n        if ('value' in nextProps) {\n            this.setState({\n                value: nextProps.value || [],\n            });\n        }\n    }\n    shouldComponentUpdate(nextProps, nextState) {\n        return !shallowEqual(this.props, nextProps) || !shallowEqual(this.state, nextState);\n    }\n    getOptions() {\n        const { options } = this.props;\n        // https://github.com/Microsoft/TypeScript/issues/7960\n        return options.map(option => {\n            if (typeof option === 'string') {\n                return {\n                    label: option,\n                    value: option,\n                };\n            }\n            return option;\n        });\n    }\n    render() {\n        const { props, state } = this;\n        const { prefixCls: customizePrefixCls, className, style, options } = props;\n        const prefixCls = getPrefixCls('checkbox-group', customizePrefixCls);\n        let children = props.children;\n        if (options && options.length > 0) {\n            children = this.getOptions().map(option => (React.createElement(Checkbox, { key: option.value, disabled: 'disabled' in option ? option.disabled : props.disabled, value: option.value, checked: state.value.indexOf(option.value) !== -1, onChange: () => this.toggleOption(option), className: `${prefixCls}-item` }, option.label)));\n        }\n        const classString = classNames(prefixCls, className);\n        const wrapperClassString = classNames({\n            [`${prefixCls}-wrapper`]: true,\n            [`${prefixCls}-has-label`]: props.label,\n        });\n        const labelClassString = classNames(`${prefixCls}-label`, {\n            'label-disabled': props.disabled,\n        });\n        return (React.createElement(\"div\", { className: wrapperClassString },\n            props.label ? React.createElement(\"span\", { className: labelClassString }, props.label) : null,\n            React.createElement(\"div\", { className: classString, style: style }, children)));\n    }\n}\nCheckboxGroup.displayName = 'CheckboxGroup';\nCheckboxGroup.defaultProps = {\n    options: [],\n};\nCheckboxGroup.propTypes = {\n    defaultValue: PropTypes.array,\n    value: PropTypes.array,\n    options: PropTypes.array,\n    onChange: PropTypes.func,\n};\nCheckboxGroup.childContextTypes = {\n    checkboxGroup: PropTypes.any,\n};\n"]}