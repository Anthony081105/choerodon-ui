{"version":3,"sources":["index.test.js"],"names":["describe","genSkeleton","props","genSkeletonButton","genSkeletonAvatar","genSkeletonInput","Skeleton","it","wrapperSmall","avatar","paragraph","expect","render","toMatchSnapshot","size","wrapperDefault","wrapperLarge","wrapperNumber","wrapperCircle","shape","wrapperSquare","wrapper","title","width","rows","wrapperPure","wrapperList","active","wrapperRound"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { mount } from 'enzyme';\nimport Skeleton from '..';\nimport mountTest from '../../../tests/shared/mountTest';\n\ndescribe('Skeleton', () => {\n  const genSkeleton = props =>\n    mount(\n      <Skeleton loading {...props}>\n        Bamboo\n      </Skeleton>,\n    );\n  const genSkeletonButton = props => mount(<Skeleton.Button {...props} />);\n  const genSkeletonAvatar = props => mount(<Skeleton.Avatar {...props} />);\n  const genSkeletonInput = props => mount(<Skeleton.Input {...props} />);\n\n  mountTest(Skeleton);\n\n  it('should without avatar and paragraph', () => {\n    const wrapperSmall = genSkeleton({ avatar: false, paragraph: false });\n    expect(wrapperSmall.render()).toMatchSnapshot();\n  });\n\n  it('should square avatar', () => {\n    const wrapperSmall = genSkeleton({ avatar: true, paragraph: false });\n    expect(wrapperSmall.render()).toMatchSnapshot();\n  });\n\n  describe('avatar', () => {\n    it('size', () => {\n      const wrapperSmall = genSkeleton({ avatar: { size: 'small' } });\n      expect(wrapperSmall.render()).toMatchSnapshot();\n      const wrapperDefault = genSkeleton({ avatar: { size: 'default' } });\n      expect(wrapperDefault.render()).toMatchSnapshot();\n      const wrapperLarge = genSkeleton({ avatar: { size: 'large' } });\n      expect(wrapperLarge.render()).toMatchSnapshot();\n      const wrapperNumber = genSkeleton({ avatar: { size: 20 } });\n      expect(wrapperNumber.render()).toMatchSnapshot();\n    });\n\n    it('shape', () => {\n      const wrapperCircle = genSkeleton({ avatar: { shape: 'circle' } });\n      expect(wrapperCircle.render()).toMatchSnapshot();\n      const wrapperSquare = genSkeleton({ avatar: { shape: 'square' } });\n      expect(wrapperSquare.render()).toMatchSnapshot();\n    });\n  });\n\n  describe('title', () => {\n    it('width', () => {\n      const wrapper = genSkeleton({ title: { width: '93%' } });\n      expect(wrapper.render()).toMatchSnapshot();\n    });\n  });\n\n  describe('paragraph', () => {\n    it('rows', () => {\n      const wrapper = genSkeleton({ paragraph: { rows: 5 } });\n      expect(wrapper.render()).toMatchSnapshot();\n    });\n\n    it('width', () => {\n      const wrapperPure = genSkeleton({ paragraph: { width: '93%' } });\n      expect(wrapperPure.render()).toMatchSnapshot();\n      const wrapperList = genSkeleton({ paragraph: { width: ['28%', '93%'] } });\n      expect(wrapperList.render()).toMatchSnapshot();\n    });\n  });\n\n  describe('button element', () => {\n    it('active', () => {\n      const wrapper = genSkeletonButton({ active: true });\n      expect(wrapper.render()).toMatchSnapshot();\n    });\n    it('size', () => {\n      const wrapperDefault = genSkeletonButton({ size: 'default' });\n      expect(wrapperDefault.render()).toMatchSnapshot();\n      const wrapperLarge = genSkeletonButton({ size: 'large' });\n      expect(wrapperLarge.render()).toMatchSnapshot();\n      const wrapperSmall = genSkeletonButton({ size: 'small' });\n      expect(wrapperSmall.render()).toMatchSnapshot();\n    });\n    it('shape', () => {\n      const wrapperDefault = genSkeletonButton({ shape: 'default' });\n      expect(wrapperDefault.render()).toMatchSnapshot();\n      const wrapperRound = genSkeletonButton({ shape: 'round' });\n      expect(wrapperRound.render()).toMatchSnapshot();\n      const wrapperCircle = genSkeletonButton({ shape: 'circle' });\n      expect(wrapperCircle.render()).toMatchSnapshot();\n    });\n  });\n\n  describe('avatar element', () => {\n    it('active', () => {\n      const wrapper = genSkeletonAvatar({ active: true });\n      expect(wrapper.render()).toMatchSnapshot();\n    });\n    it('size', () => {\n      const wrapperSmall = genSkeletonAvatar({ size: 'small' });\n      expect(wrapperSmall.render()).toMatchSnapshot();\n      const wrapperDefault = genSkeletonAvatar({ size: 'default' });\n      expect(wrapperDefault.render()).toMatchSnapshot();\n      const wrapperLarge = genSkeletonAvatar({ size: 'large' });\n      expect(wrapperLarge.render()).toMatchSnapshot();\n      const wrapperNumber = genSkeletonAvatar({ size: 20 });\n      expect(wrapperNumber.render()).toMatchSnapshot();\n    });\n\n    it('shape', () => {\n      const wrapperCircle = genSkeletonAvatar({ shape: 'circle' });\n      expect(wrapperCircle.render()).toMatchSnapshot();\n      const wrapperSquare = genSkeletonAvatar({ shape: 'square' });\n      expect(wrapperSquare.render()).toMatchSnapshot();\n    });\n  });\n\n  describe('input element', () => {\n    it('active', () => {\n      const wrapper = genSkeletonInput({ active: true });\n      expect(wrapper.render()).toMatchSnapshot();\n    });\n    it('size', () => {\n      const wrapperSmall = genSkeletonInput({ size: 'small' });\n      expect(wrapperSmall.render()).toMatchSnapshot();\n      const wrapperDefault = genSkeletonInput({ size: 'default' });\n      expect(wrapperDefault.render()).toMatchSnapshot();\n      const wrapperLarge = genSkeletonInput({ size: 'large' });\n      expect(wrapperLarge.render()).toMatchSnapshot();\n    });\n  });\n});\n"]}