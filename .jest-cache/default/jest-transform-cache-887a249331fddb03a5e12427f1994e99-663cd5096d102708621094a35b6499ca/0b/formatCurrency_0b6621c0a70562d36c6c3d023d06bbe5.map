{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/formatter/formatCurrency.tsx"],"names":[],"mappings":";;;;;;;;;;;AAAA;;AAKA;;AAGc,SAAU,cAAV,CAAyB,KAAzB,EAAgC,IAAhC,EAA8C,OAA9C,EAAgF;AAC5F,MAAM,CAAC,GAAG,UAAU,CAAC,KAAD,CAApB;;AACA,MAAI,CAAC,KAAK,CAAC,CAAD,CAAV,EAAe;AACb,QAAI,2CAAJ,EAAqC;AACnC,aAAO,CAAC,CAAC,cAAF,CAAiB,mCAAkB,IAAlB,CAAjB,qCACF,mCAAsB;AAAA;AAAtB,QAA2C,OAA3C,CADE,MAEF,OAFE,EAAP;AAID;;AACD,WAAO,mCAAuB,CAAvB,EAAwB;AAAA;AAAxB,MAA8C,OAA9C,CAAP;AACD;;AACD,SAAO,KAAP;AACD","sourcesContent":["import {\n  getNumberFormatOptions,\n  toLocaleStringPolyfill,\n  toLocaleStringSupportsLocales,\n} from './utils';\nimport normalizeLanguage from '../_util/normalizeLanguage';\nimport { FieldType } from '../data-set/enum';\n\nexport default function formatCurrency(value, lang: string, options?: Intl.NumberFormatOptions) {\n  const v = parseFloat(value);\n  if (!isNaN(v)) {\n    if (toLocaleStringSupportsLocales()) {\n      return v.toLocaleString(normalizeLanguage(lang), {\n        ...getNumberFormatOptions(FieldType.currency, options),\n        ...options,\n      });\n    }\n    return toLocaleStringPolyfill(v, FieldType.currency, options);\n  }\n  return value;\n}\n"]}