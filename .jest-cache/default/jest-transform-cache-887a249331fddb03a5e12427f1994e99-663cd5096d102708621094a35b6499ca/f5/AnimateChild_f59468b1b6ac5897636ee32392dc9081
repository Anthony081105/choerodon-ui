c9233ed98005a975b3ef816fcb565ef8
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = require("react");

var _reactDom = require("react-dom");

var _omit = _interopRequireDefault(require("lodash/omit"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _cssAnimation = _interopRequireWildcard(require("css-animation"));

var _util = _interopRequireDefault(require("./util"));

function _createSuper(Derived) {
  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  return function () {
    var Super = (0, _getPrototypeOf2["default"])(Derived),
        result;

    if (isNativeReflectConstruct()) {
      var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return (0, _possibleConstructorReturn2["default"])(this, result);
  };
}

var transitionMap = {
  enter: 'transitionEnter',
  appear: 'transitionAppear',
  leave: 'transitionLeave'
};

var AnimateChild =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(AnimateChild, _Component);

  var _super = _createSuper(AnimateChild);

  function AnimateChild() {
    (0, _classCallCheck2["default"])(this, AnimateChild);
    return _super.apply(this, arguments);
  }

  (0, _createClass2["default"])(AnimateChild, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.stop();
    }
  }, {
    key: "componentWillEnter",
    value: function componentWillEnter(done) {
      if (_util["default"].isEnterSupported(this.props)) {
        this.transition('enter', done);
      } else {
        done(this);
      }
    }
  }, {
    key: "componentWillAppear",
    value: function componentWillAppear(done) {
      if (_util["default"].isAppearSupported(this.props)) {
        this.transition('appear', done);
      } else {
        done(this);
      }
    }
  }, {
    key: "componentWillLeave",
    value: function componentWillLeave(done) {
      if (_util["default"].isLeaveSupported(this.props)) {
        this.transition('leave', done);
      } else {
        done(this);
      }
    }
  }, {
    key: "transition",
    value: function transition(animationType, finishCallback) {
      var _this = this;

      var node = (0, _reactDom.findDOMNode)(this);

      if (node) {
        var props = this.props;
        var transitionName = props.transitionName,
            _props$animation = props.animation,
            animation = _props$animation === void 0 ? {} : _props$animation;
        var nameIsObj = (0, _typeof2["default"])(transitionName) === 'object';
        this.stop();

        var end = function end() {
          _this.stopper = null;
          finishCallback(_this);
        };

        if ((_cssAnimation.isCssAnimationSupported || !animation[animationType]) && transitionName && props[transitionMap[animationType]]) {
          var name = nameIsObj ? transitionName[animationType] : "".concat(transitionName, "-").concat(animationType);
          var activeName = "".concat(name, "-active");

          if (nameIsObj && transitionName["".concat(animationType, "Active")]) {
            activeName = transitionName["".concat(animationType, "Active")];
          }

          this.stopper = (0, _cssAnimation["default"])(node, {
            name: name,
            active: activeName
          }, end);
        } else {
          this.stopper = animation[animationType](node, end);
        }
      }
    }
  }, {
    key: "stop",
    value: function stop() {
      var stopper = this.stopper;

      if (stopper) {
        this.stopper = null;
        stopper.stop();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          otherProps = (0, _objectWithoutProperties2["default"])(_this$props, ["children"]);

      if ((0, _react.isValidElement)(children)) {
        var props = (0, _omit["default"])(otherProps, ['animation', 'transitionName', 'transitionEnter', 'transitionAppear', 'transitionLeave']);
        var style = children.props.style;
        return (0, _react.cloneElement)(children, (0, _objectSpread2["default"])({}, props, {
          style: (0, _objectSpread2["default"])({}, props.style, {}, style)
        }));
      }

      return children;
    }
  }]);
  return AnimateChild;
}(_react.Component);

exports["default"] = AnimateChild;
AnimateChild.displayName = 'AnimateChild';
AnimateChild.propTypes = {
  children: _propTypes["default"].any,
  transitionName: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object]),
  animation: _propTypes["default"].any
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9odWlodWF3ay9Eb2N1bWVudHMvb3B0L2Nob2Vyb2Rvbi11aS9jb21wb25lbnRzL2FuaW1hdGUvQW5pbWF0ZUNoaWxkLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBLElBQU0sYUFBYSxHQUFHO0FBQ3BCLEVBQUEsS0FBSyxFQUFFLGlCQURhO0FBRXBCLEVBQUEsTUFBTSxFQUFFLGtCQUZZO0FBR3BCLEVBQUEsS0FBSyxFQUFFO0FBSGEsQ0FBdEI7O0lBWXFCLFk7Ozs7Ozs7Ozs7Ozs7OzJDQVdDO0FBQ2xCLFdBQUssSUFBTDtBQUNEOzs7dUNBRWtCLEksRUFBbUM7QUFDcEQsVUFBSSxpQkFBUyxnQkFBVCxDQUEwQixLQUFLLEtBQS9CLENBQUosRUFBMkM7QUFDekMsYUFBSyxVQUFMLENBQWdCLE9BQWhCLEVBQXlCLElBQXpCO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsUUFBQSxJQUFJLENBQUMsSUFBRCxDQUFKO0FBQ0Q7QUFDRjs7O3dDQUVtQixJLEVBQW1DO0FBQ3JELFVBQUksaUJBQVMsaUJBQVQsQ0FBMkIsS0FBSyxLQUFoQyxDQUFKLEVBQTRDO0FBQzFDLGFBQUssVUFBTCxDQUFnQixRQUFoQixFQUEwQixJQUExQjtBQUNELE9BRkQsTUFFTztBQUNMLFFBQUEsSUFBSSxDQUFDLElBQUQsQ0FBSjtBQUNEO0FBQ0Y7Ozt1Q0FFa0IsSSxFQUFtQztBQUNwRCxVQUFJLGlCQUFTLGdCQUFULENBQTBCLEtBQUssS0FBL0IsQ0FBSixFQUEyQztBQUN6QyxhQUFLLFVBQUwsQ0FBZ0IsT0FBaEIsRUFBeUIsSUFBekI7QUFDRCxPQUZELE1BRU87QUFDTCxRQUFBLElBQUksQ0FBQyxJQUFELENBQUo7QUFDRDtBQUNGOzs7K0JBRVUsYSxFQUF1QixjLEVBQTZDO0FBQUE7O0FBQzdFLFVBQU0sSUFBSSxHQUFHLDJCQUFZLElBQVosQ0FBYjs7QUFDQSxVQUFJLElBQUosRUFBVTtBQUFBLFlBQ0EsS0FEQSxHQUNVLElBRFYsQ0FDQSxLQURBO0FBQUEsWUFFQSxjQUZBLEdBRW1DLEtBRm5DLENBRUEsY0FGQTtBQUFBLCtCQUVtQyxLQUZuQyxDQUVnQixTQUZoQjtBQUFBLFlBRWdCLFNBRmhCLGlDQUU0QixFQUY1QjtBQUdSLFlBQU0sU0FBUyxHQUFHLHlCQUFPLGNBQVAsTUFBMEIsUUFBNUM7QUFDQSxhQUFLLElBQUw7O0FBQ0EsWUFBTSxHQUFHLEdBQUcsU0FBTixHQUFNLEdBQUs7QUFDZixVQUFBLEtBQUksQ0FBQyxPQUFMLEdBQWUsSUFBZjtBQUNBLFVBQUEsY0FBYyxDQUFDLEtBQUQsQ0FBZDtBQUNELFNBSEQ7O0FBSUEsWUFDRSxDQUFDLHlDQUEyQixDQUFDLFNBQVMsQ0FBQyxhQUFELENBQXRDLEtBQ0EsY0FEQSxJQUVBLEtBQUssQ0FBQyxhQUFhLENBQUMsYUFBRCxDQUFkLENBSFAsRUFJRTtBQUNBLGNBQU0sSUFBSSxHQUFHLFNBQVMsR0FDbEIsY0FBYyxDQUFDLGFBQUQsQ0FESSxhQUVmLGNBRmUsY0FFRyxhQUZILENBQXRCO0FBR0EsY0FBSSxVQUFVLGFBQU0sSUFBTixZQUFkOztBQUNBLGNBQUksU0FBUyxJQUFJLGNBQWMsV0FBSSxhQUFKLFlBQS9CLEVBQTJEO0FBQ3pELFlBQUEsVUFBVSxHQUFHLGNBQWMsV0FBSSxhQUFKLFlBQTNCO0FBQ0Q7O0FBQ0QsZUFBSyxPQUFMLEdBQWUsOEJBQ2IsSUFEYSxFQUViO0FBQ0UsWUFBQSxJQUFJLEVBQUosSUFERjtBQUVFLFlBQUEsTUFBTSxFQUFFO0FBRlYsV0FGYSxFQU1iLEdBTmEsQ0FBZjtBQVFELFNBcEJELE1Bb0JPO0FBQ0wsZUFBSyxPQUFMLEdBQWUsU0FBUyxDQUFDLGFBQUQsQ0FBVCxDQUF5QixJQUF6QixFQUErQixHQUEvQixDQUFmO0FBQ0Q7QUFDRjtBQUNGOzs7MkJBRUc7QUFBQSxVQUNNLE9BRE4sR0FDa0IsSUFEbEIsQ0FDTSxPQUROOztBQUVGLFVBQUksT0FBSixFQUFhO0FBQ1gsYUFBSyxPQUFMLEdBQWUsSUFBZjtBQUNBLFFBQUEsT0FBTyxDQUFDLElBQVI7QUFDRDtBQUNGOzs7NkJBRUs7QUFBQSx3QkFDZ0MsS0FBSyxLQURyQztBQUFBLFVBQ0ksUUFESixlQUNJLFFBREo7QUFBQSxVQUNpQixVQURqQjs7QUFFSixVQUFJLDJCQUFlLFFBQWYsQ0FBSixFQUE4QjtBQUM1QixZQUFNLEtBQUssR0FBRyxzQkFBSyxVQUFMLEVBQWlCLENBQzdCLFdBRDZCLEVBRTdCLGdCQUY2QixFQUc3QixpQkFINkIsRUFJN0Isa0JBSjZCLEVBSzdCLGlCQUw2QixDQUFqQixDQUFkO0FBRDRCLFlBUXBCLEtBUm9CLEdBUVYsUUFBUSxDQUFDLEtBUkMsQ0FRcEIsS0FSb0I7QUFTNUIsZUFBTyx5QkFBYSxRQUFiLHFDQUE0QixLQUE1QjtBQUFtQyxVQUFBLEtBQUsscUNBQU8sS0FBSyxDQUFDLEtBQWIsTUFBdUIsS0FBdkI7QUFBeEMsV0FBUDtBQUNEOztBQUNELGFBQU8sUUFBUDtBQUNEOzs7RUFsR3VDLGdCOzs7QUFDakMsWUFBQSxDQUFBLFdBQUEsR0FBYyxjQUFkO0FBRUEsWUFBQSxDQUFBLFNBQUEsR0FBWTtBQUNqQixFQUFBLFFBQVEsRUFBRSxzQkFBVSxHQURIO0FBRWpCLEVBQUEsY0FBYyxFQUFFLHNCQUFVLFNBQVYsQ0FBb0IsQ0FBQyxzQkFBVSxNQUFYLEVBQW1CLHNCQUFVLE1BQTdCLENBQXBCLENBRkM7QUFHakIsRUFBQSxTQUFTLEVBQUUsc0JBQVU7QUFISixDQUFaIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2xvbmVFbGVtZW50LCBDb21wb25lbnQsIENTU1Byb3BlcnRpZXMsIGlzVmFsaWRFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZmluZERPTU5vZGUgfSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IG9taXQgZnJvbSAnbG9kYXNoL29taXQnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjc3NBbmltYXRlLCB7IGlzQ3NzQW5pbWF0aW9uU3VwcG9ydGVkIH0gZnJvbSAnY3NzLWFuaW1hdGlvbic7XG5pbXBvcnQgYW5pbVV0aWwgZnJvbSAnLi91dGlsJztcblxuY29uc3QgdHJhbnNpdGlvbk1hcCA9IHtcbiAgZW50ZXI6ICd0cmFuc2l0aW9uRW50ZXInLFxuICBhcHBlYXI6ICd0cmFuc2l0aW9uQXBwZWFyJyxcbiAgbGVhdmU6ICd0cmFuc2l0aW9uTGVhdmUnLFxufTtcblxuZXhwb3J0IGludGVyZmFjZSBBbmltYXRlQ2hpbGRQcm9wcyB7XG4gIHRyYW5zaXRpb25OYW1lPzogc3RyaW5nIHwgb2JqZWN0O1xuICBhbmltYXRpb24/OiB7IFtrZXk6IHN0cmluZ106IChub2RlOiBFbGVtZW50IHwgVGV4dCwgZW5kOiAoKSA9PiB2b2lkKSA9PiB2b2lkIH07XG4gIHN0eWxlPzogQ1NTUHJvcGVydGllcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQW5pbWF0ZUNoaWxkIGV4dGVuZHMgQ29tcG9uZW50PEFuaW1hdGVDaGlsZFByb3BzLCBhbnk+IHtcbiAgc3RhdGljIGRpc3BsYXlOYW1lID0gJ0FuaW1hdGVDaGlsZCc7XG5cbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLmFueSxcbiAgICB0cmFuc2l0aW9uTmFtZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAgIGFuaW1hdGlvbjogUHJvcFR5cGVzLmFueSxcbiAgfTtcblxuICBzdG9wcGVyO1xuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuc3RvcCgpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbEVudGVyKGRvbmU6IChjaGlsZDogQW5pbWF0ZUNoaWxkKSA9PiB2b2lkKSB7XG4gICAgaWYgKGFuaW1VdGlsLmlzRW50ZXJTdXBwb3J0ZWQodGhpcy5wcm9wcykpIHtcbiAgICAgIHRoaXMudHJhbnNpdGlvbignZW50ZXInLCBkb25lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZG9uZSh0aGlzKTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnRXaWxsQXBwZWFyKGRvbmU6IChjaGlsZDogQW5pbWF0ZUNoaWxkKSA9PiB2b2lkKSB7XG4gICAgaWYgKGFuaW1VdGlsLmlzQXBwZWFyU3VwcG9ydGVkKHRoaXMucHJvcHMpKSB7XG4gICAgICB0aGlzLnRyYW5zaXRpb24oJ2FwcGVhcicsIGRvbmUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkb25lKHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxMZWF2ZShkb25lOiAoY2hpbGQ6IEFuaW1hdGVDaGlsZCkgPT4gdm9pZCkge1xuICAgIGlmIChhbmltVXRpbC5pc0xlYXZlU3VwcG9ydGVkKHRoaXMucHJvcHMpKSB7XG4gICAgICB0aGlzLnRyYW5zaXRpb24oJ2xlYXZlJywgZG9uZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRvbmUodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgdHJhbnNpdGlvbihhbmltYXRpb25UeXBlOiBzdHJpbmcsIGZpbmlzaENhbGxiYWNrOiAoY2hpbGQ6IEFuaW1hdGVDaGlsZCkgPT4gdm9pZCkge1xuICAgIGNvbnN0IG5vZGUgPSBmaW5kRE9NTm9kZSh0aGlzKTtcbiAgICBpZiAobm9kZSkge1xuICAgICAgY29uc3QgeyBwcm9wcyB9ID0gdGhpcztcbiAgICAgIGNvbnN0IHsgdHJhbnNpdGlvbk5hbWUsIGFuaW1hdGlvbiA9IHt9IH0gPSBwcm9wcztcbiAgICAgIGNvbnN0IG5hbWVJc09iaiA9IHR5cGVvZiB0cmFuc2l0aW9uTmFtZSA9PT0gJ29iamVjdCc7XG4gICAgICB0aGlzLnN0b3AoKTtcbiAgICAgIGNvbnN0IGVuZCA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5zdG9wcGVyID0gbnVsbDtcbiAgICAgICAgZmluaXNoQ2FsbGJhY2sodGhpcyk7XG4gICAgICB9O1xuICAgICAgaWYgKFxuICAgICAgICAoaXNDc3NBbmltYXRpb25TdXBwb3J0ZWQgfHwgIWFuaW1hdGlvblthbmltYXRpb25UeXBlXSkgJiZcbiAgICAgICAgdHJhbnNpdGlvbk5hbWUgJiZcbiAgICAgICAgcHJvcHNbdHJhbnNpdGlvbk1hcFthbmltYXRpb25UeXBlXV1cbiAgICAgICkge1xuICAgICAgICBjb25zdCBuYW1lID0gbmFtZUlzT2JqXG4gICAgICAgICAgPyB0cmFuc2l0aW9uTmFtZVthbmltYXRpb25UeXBlXVxuICAgICAgICAgIDogYCR7dHJhbnNpdGlvbk5hbWV9LSR7YW5pbWF0aW9uVHlwZX1gO1xuICAgICAgICBsZXQgYWN0aXZlTmFtZSA9IGAke25hbWV9LWFjdGl2ZWA7XG4gICAgICAgIGlmIChuYW1lSXNPYmogJiYgdHJhbnNpdGlvbk5hbWVbYCR7YW5pbWF0aW9uVHlwZX1BY3RpdmVgXSkge1xuICAgICAgICAgIGFjdGl2ZU5hbWUgPSB0cmFuc2l0aW9uTmFtZVtgJHthbmltYXRpb25UeXBlfUFjdGl2ZWBdO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RvcHBlciA9IGNzc0FuaW1hdGUoXG4gICAgICAgICAgbm9kZSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgYWN0aXZlOiBhY3RpdmVOYW1lLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgZW5kLFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zdG9wcGVyID0gYW5pbWF0aW9uW2FuaW1hdGlvblR5cGVdKG5vZGUsIGVuZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3RvcCgpIHtcbiAgICBjb25zdCB7IHN0b3BwZXIgfSA9IHRoaXM7XG4gICAgaWYgKHN0b3BwZXIpIHtcbiAgICAgIHRoaXMuc3RvcHBlciA9IG51bGw7XG4gICAgICBzdG9wcGVyLnN0b3AoKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBjaGlsZHJlbiwgLi4ub3RoZXJQcm9wcyB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAoaXNWYWxpZEVsZW1lbnQoY2hpbGRyZW4pKSB7XG4gICAgICBjb25zdCBwcm9wcyA9IG9taXQob3RoZXJQcm9wcywgW1xuICAgICAgICAnYW5pbWF0aW9uJyxcbiAgICAgICAgJ3RyYW5zaXRpb25OYW1lJyxcbiAgICAgICAgJ3RyYW5zaXRpb25FbnRlcicsXG4gICAgICAgICd0cmFuc2l0aW9uQXBwZWFyJyxcbiAgICAgICAgJ3RyYW5zaXRpb25MZWF2ZScsXG4gICAgICBdKTtcbiAgICAgIGNvbnN0IHsgc3R5bGUgfSA9IGNoaWxkcmVuLnByb3BzIGFzIGFueTtcbiAgICAgIHJldHVybiBjbG9uZUVsZW1lbnQoY2hpbGRyZW4sIHsgLi4ucHJvcHMsIHN0eWxlOiB7IC4uLnByb3BzLnN0eWxlLCAuLi5zdHlsZSB9IH0gYXMgYW55KTtcbiAgICB9XG4gICAgcmV0dXJuIGNoaWxkcmVuO1xuICB9XG59XG4iXX0=