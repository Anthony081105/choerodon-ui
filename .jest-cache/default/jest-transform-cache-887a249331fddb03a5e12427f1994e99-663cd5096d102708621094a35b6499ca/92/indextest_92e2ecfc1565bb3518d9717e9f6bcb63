0cb33b31f748ffd746857127364f3d86
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _ = _interopRequireDefault(require(".."));

var _dataSet = _interopRequireDefault(require("../../data-set"));

describe('Range', function () {
  it('should show tooltip when hovering range handler', function () {
    var mockFn = jest.fn();
    var ds = new _dataSet["default"]({
      autoCreate: true,
      fields: [{
        name: 'range',
        defaultValue: 50,
        min: 0,
        max: 100,
        step: 1
      }],
      events: {
        update: mockFn
      }
    });
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      dataSet: ds
    }));
    expect(wrapper).toMatchSnapshot();
    wrapper.find('.c7n-pro-range-draghandle').at(0).simulate('mouseEnter');
    expect(wrapper).toMatchSnapshot();
  });
  it('the range drag test ', function () {
    var mockFn = jest.fn();
    var ds = new _dataSet["default"]({
      autoCreate: true,
      fields: [{
        name: 'range',
        defaultValue: 0,
        min: 0,
        max: 100,
        step: 1
      }],
      events: {
        update: mockFn
      }
    });
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      dataSet: ds
    }));
    wrapper.find('.c7n-pro-range-track').simulate('mouseDown', {
      clientX: 0,
      clientY: 0
    }).simulate('mouseMove', {
      clientX: 0,
      clientY: 100
    }).simulate('mouseUp');
    expect(wrapper).toMatchSnapshot();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRlc3QuanMiXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJpdCIsIm1vY2tGbiIsImplc3QiLCJmbiIsImRzIiwiRGF0YVNldCIsImF1dG9DcmVhdGUiLCJmaWVsZHMiLCJuYW1lIiwiZGVmYXVsdFZhbHVlIiwibWluIiwibWF4Iiwic3RlcCIsImV2ZW50cyIsInVwZGF0ZSIsIndyYXBwZXIiLCJleHBlY3QiLCJ0b01hdGNoU25hcHNob3QiLCJmaW5kIiwiYXQiLCJzaW11bGF0ZSIsImNsaWVudFgiLCJjbGllbnRZIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUFBLFFBQVEsQ0FBQyxPQUFELEVBQVUsWUFBTTtBQUN0QkMsRUFBQUEsRUFBRSxDQUFDLGlEQUFELEVBQW9ELFlBQU07QUFDMUQsUUFBTUMsTUFBTSxHQUFHQyxJQUFJLENBQUNDLEVBQUwsRUFBZjtBQUNBLFFBQU1DLEVBQUUsR0FBRyxJQUFJQyxtQkFBSixDQUFZO0FBQ3JCQyxNQUFBQSxVQUFVLEVBQUUsSUFEUztBQUVyQkMsTUFBQUEsTUFBTSxFQUFFLENBQUM7QUFBRUMsUUFBQUEsSUFBSSxFQUFFLE9BQVI7QUFBaUJDLFFBQUFBLFlBQVksRUFBRSxFQUEvQjtBQUFtQ0MsUUFBQUEsR0FBRyxFQUFFLENBQXhDO0FBQTJDQyxRQUFBQSxHQUFHLEVBQUUsR0FBaEQ7QUFBcURDLFFBQUFBLElBQUksRUFBRTtBQUEzRCxPQUFELENBRmE7QUFHckJDLE1BQUFBLE1BQU0sRUFBRTtBQUNOQyxRQUFBQSxNQUFNLEVBQUViO0FBREY7QUFIYSxLQUFaLENBQVg7QUFPQSxRQUFNYyxPQUFPLEdBQUcsbUJBQU0sZ0NBQUMsWUFBRDtBQUFPLE1BQUEsT0FBTyxFQUFFWDtBQUFoQixNQUFOLENBQWhCO0FBQ0FZLElBQUFBLE1BQU0sQ0FBQ0QsT0FBRCxDQUFOLENBQWdCRSxlQUFoQjtBQUNBRixJQUFBQSxPQUFPLENBQ0pHLElBREgsQ0FDUSwyQkFEUixFQUVHQyxFQUZILENBRU0sQ0FGTixFQUdHQyxRQUhILENBR1ksWUFIWjtBQUlBSixJQUFBQSxNQUFNLENBQUNELE9BQUQsQ0FBTixDQUFnQkUsZUFBaEI7QUFDRCxHQWhCQyxDQUFGO0FBaUJBakIsRUFBQUEsRUFBRSxDQUFDLHNCQUFELEVBQXlCLFlBQU07QUFDL0IsUUFBTUMsTUFBTSxHQUFHQyxJQUFJLENBQUNDLEVBQUwsRUFBZjtBQUNBLFFBQU1DLEVBQUUsR0FBRyxJQUFJQyxtQkFBSixDQUFZO0FBQ3JCQyxNQUFBQSxVQUFVLEVBQUUsSUFEUztBQUVyQkMsTUFBQUEsTUFBTSxFQUFFLENBQUM7QUFBRUMsUUFBQUEsSUFBSSxFQUFFLE9BQVI7QUFBaUJDLFFBQUFBLFlBQVksRUFBRSxDQUEvQjtBQUFrQ0MsUUFBQUEsR0FBRyxFQUFFLENBQXZDO0FBQTBDQyxRQUFBQSxHQUFHLEVBQUUsR0FBL0M7QUFBb0RDLFFBQUFBLElBQUksRUFBRTtBQUExRCxPQUFELENBRmE7QUFHckJDLE1BQUFBLE1BQU0sRUFBRTtBQUNOQyxRQUFBQSxNQUFNLEVBQUViO0FBREY7QUFIYSxLQUFaLENBQVg7QUFPQSxRQUFNYyxPQUFPLEdBQUcsbUJBQU0sZ0NBQUMsWUFBRDtBQUFPLE1BQUEsT0FBTyxFQUFFWDtBQUFoQixNQUFOLENBQWhCO0FBQ0FXLElBQUFBLE9BQU8sQ0FDSkcsSUFESCxDQUNRLHNCQURSLEVBRUdFLFFBRkgsQ0FFWSxXQUZaLEVBRXlCO0FBQUVDLE1BQUFBLE9BQU8sRUFBRSxDQUFYO0FBQWNDLE1BQUFBLE9BQU8sRUFBRTtBQUF2QixLQUZ6QixFQUdHRixRQUhILENBR1ksV0FIWixFQUd5QjtBQUFFQyxNQUFBQSxPQUFPLEVBQUUsQ0FBWDtBQUFjQyxNQUFBQSxPQUFPLEVBQUU7QUFBdkIsS0FIekIsRUFJR0YsUUFKSCxDQUlZLFNBSlo7QUFLQUosSUFBQUEsTUFBTSxDQUFDRCxPQUFELENBQU4sQ0FBZ0JFLGVBQWhCO0FBQ0QsR0FoQkMsQ0FBRjtBQWlCRCxDQW5DTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IG1vdW50IH0gZnJvbSAnZW56eW1lJztcbmltcG9ydCBSYW5nZSBmcm9tICcuLic7XG5pbXBvcnQgRGF0YVNldCBmcm9tICcuLi8uLi9kYXRhLXNldCc7XG5cbmRlc2NyaWJlKCdSYW5nZScsICgpID0+IHtcbiAgaXQoJ3Nob3VsZCBzaG93IHRvb2x0aXAgd2hlbiBob3ZlcmluZyByYW5nZSBoYW5kbGVyJywgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tGbiA9IGplc3QuZm4oKTtcbiAgICBjb25zdCBkcyA9IG5ldyBEYXRhU2V0KHtcbiAgICAgIGF1dG9DcmVhdGU6IHRydWUsXG4gICAgICBmaWVsZHM6IFt7IG5hbWU6ICdyYW5nZScsIGRlZmF1bHRWYWx1ZTogNTAsIG1pbjogMCwgbWF4OiAxMDAsIHN0ZXA6IDEgfV0sXG4gICAgICBldmVudHM6IHtcbiAgICAgICAgdXBkYXRlOiBtb2NrRm4sXG4gICAgICB9LFxuICAgIH0pO1xuICAgIGNvbnN0IHdyYXBwZXIgPSBtb3VudCg8UmFuZ2UgZGF0YVNldD17ZHN9IC8+KTtcbiAgICBleHBlY3Qod3JhcHBlcikudG9NYXRjaFNuYXBzaG90KCk7XG4gICAgd3JhcHBlclxuICAgICAgLmZpbmQoJy5jN24tcHJvLXJhbmdlLWRyYWdoYW5kbGUnKVxuICAgICAgLmF0KDApXG4gICAgICAuc2ltdWxhdGUoJ21vdXNlRW50ZXInKTtcbiAgICBleHBlY3Qod3JhcHBlcikudG9NYXRjaFNuYXBzaG90KCk7XG4gIH0pO1xuICBpdCgndGhlIHJhbmdlIGRyYWcgdGVzdCAnLCAoKSA9PiB7XG4gICAgY29uc3QgbW9ja0ZuID0gamVzdC5mbigpO1xuICAgIGNvbnN0IGRzID0gbmV3IERhdGFTZXQoe1xuICAgICAgYXV0b0NyZWF0ZTogdHJ1ZSxcbiAgICAgIGZpZWxkczogW3sgbmFtZTogJ3JhbmdlJywgZGVmYXVsdFZhbHVlOiAwLCBtaW46IDAsIG1heDogMTAwLCBzdGVwOiAxIH1dLFxuICAgICAgZXZlbnRzOiB7XG4gICAgICAgIHVwZGF0ZTogbW9ja0ZuLFxuICAgICAgfSxcbiAgICB9KTtcbiAgICBjb25zdCB3cmFwcGVyID0gbW91bnQoPFJhbmdlIGRhdGFTZXQ9e2RzfSAvPik7XG4gICAgd3JhcHBlclxuICAgICAgLmZpbmQoJy5jN24tcHJvLXJhbmdlLXRyYWNrJylcbiAgICAgIC5zaW11bGF0ZSgnbW91c2VEb3duJywgeyBjbGllbnRYOiAwLCBjbGllbnRZOiAwIH0pXG4gICAgICAuc2ltdWxhdGUoJ21vdXNlTW92ZScsIHsgY2xpZW50WDogMCwgY2xpZW50WTogMTAwIH0pXG4gICAgICAuc2ltdWxhdGUoJ21vdXNlVXAnKTtcbiAgICBleHBlY3Qod3JhcHBlcikudG9NYXRjaFNuYXBzaG90KCk7XG4gIH0pO1xufSk7XG4iXX0=