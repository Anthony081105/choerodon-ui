{"version":3,"sources":["SelectionBox.test.js"],"names":["getDefaultStore","selectedRowKeys","selectionDirty","describe","it","wrapper","expect","state","toEqual","checked","store","setState","checkboxProps","name","id","find","forEach","box","props","radioProps","radio"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { mount } from 'enzyme';\nimport createStore from '../createStore';\nimport SelectionBox from '../SelectionBox';\n\nconst getDefaultStore = selectedRowKeys => {\n  return createStore({\n    selectedRowKeys: selectedRowKeys || [],\n    selectionDirty: false,\n  });\n};\n\ndescribe('SelectionBox', () => {\n  it('unchecked by selectedRowKeys ', () => {\n    const wrapper = mount(\n      <SelectionBox\n        store={getDefaultStore()}\n        rowIndex=\"1\"\n        disabled={false}\n        onChange={() => {}}\n        defaultSelection={[]}\n      />,\n    );\n\n    expect(wrapper.state()).toEqual({ checked: false });\n  });\n\n  it('checked by selectedRowKeys ', () => {\n    const wrapper = mount(\n      <SelectionBox\n        store={getDefaultStore(['1'])}\n        rowIndex=\"1\"\n        disabled={false}\n        onChange={() => {}}\n        defaultSelection={[]}\n      />,\n    );\n\n    expect(wrapper.state()).toEqual({ checked: true });\n  });\n\n  it('checked by defaultSelection', () => {\n    const wrapper = mount(\n      <SelectionBox\n        store={getDefaultStore()}\n        rowIndex=\"1\"\n        disabled={false}\n        onChange={() => {}}\n        defaultSelection={['1']}\n      />,\n    );\n\n    expect(wrapper.state()).toEqual({ checked: true });\n  });\n\n  it('checked when store change', () => {\n    const store = getDefaultStore();\n    const wrapper = mount(\n      <SelectionBox\n        store={store}\n        rowIndex=\"1\"\n        disabled={false}\n        onChange={() => {}}\n        defaultSelection={[]}\n      />,\n    );\n\n    store.setState({\n      selectedRowKeys: ['1'],\n      selectionDirty: true,\n    });\n\n    expect(wrapper.state()).toEqual({ checked: true });\n  });\n\n  it('passes props to Checkbox', () => {\n    const checkboxProps = {\n      name: 'testName',\n      id: 'testId',\n    };\n    const wrapper = mount(\n      <SelectionBox\n        store={getDefaultStore()}\n        rowIndex=\"1\"\n        disabled={false}\n        onChange={() => {}}\n        defaultSelection={['1']}\n        {...checkboxProps}\n      />,\n    );\n    wrapper.find('Checkbox').forEach(box => {\n      expect(box.props().name).toEqual(checkboxProps.name);\n      expect(box.props().id).toEqual(checkboxProps.id);\n    });\n  });\n\n  it('passes props to Radios', () => {\n    const radioProps = {\n      name: 'testName',\n      id: 'testId',\n    };\n    const wrapper = mount(\n      <SelectionBox\n        store={getDefaultStore()}\n        rowIndex=\"1\"\n        disabled={false}\n        onChange={() => {}}\n        defaultSelection={['1']}\n        type=\"radio\"\n        {...radioProps}\n      />,\n    );\n    wrapper.find('Radio').forEach(radio => {\n      expect(radio.props().name).toEqual(radioProps.name);\n      expect(radio.props().id).toEqual(radioProps.id);\n    });\n  });\n});\n"]}