c6cfc147111bc3e3a8b3127c38d2dd93
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _ = _interopRequireDefault(require(".."));

var _icon = _interopRequireDefault(require("../../icon"));

var SubMenu = _["default"].SubMenu;
describe('Menu', function () {
  beforeEach(function () {
    jest.useFakeTimers();
  });
  afterEach(function () {
    jest.useRealTimers();
  });
  it('should accept defaultOpenKeys in mode horizontal', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      defaultOpenKeys: ['1'],
      mode: "horizontal"
    }, _react["default"].createElement(SubMenu, {
      key: "1",
      title: "submenu1"
    }, _react["default"].createElement(_["default"].Item, {
      key: "submenu1"
    }, "Option 1"), _react["default"].createElement(_["default"].Item, {
      key: "submenu2"
    }, "Option 2")), _react["default"].createElement(_["default"].Item, {
      key: "2"
    }, "menu2")));
    expect(wrapper.find('.c7n-menu-sub').at(0).hasClass('c7n-menu-hidden')).not.toBe(true);
  });
  it('should accept defaultOpenKeys in mode inline', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      defaultOpenKeys: ['1'],
      mode: "inline"
    }, _react["default"].createElement(SubMenu, {
      key: "1",
      title: "submenu1"
    }, _react["default"].createElement(_["default"].Item, {
      key: "submenu1"
    }, "Option 1"), _react["default"].createElement(_["default"].Item, {
      key: "submenu2"
    }, "Option 2")), _react["default"].createElement(_["default"].Item, {
      key: "2"
    }, "menu2")));
    expect(wrapper.find('.c7n-menu-sub').at(0).hasClass('c7n-menu-hidden')).not.toBe(true);
  });
  it('should accept defaultOpenKeys in mode vertical', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      defaultOpenKeys: ['1'],
      mode: "vertical"
    }, _react["default"].createElement(SubMenu, {
      key: "1",
      title: "submenu1"
    }, _react["default"].createElement(_["default"].Item, {
      key: "submenu1"
    }, "Option 1"), _react["default"].createElement(_["default"].Item, {
      key: "submenu2"
    }, "Option 2")), _react["default"].createElement(_["default"].Item, {
      key: "2"
    }, "menu2")));
    expect(wrapper.find('.c7n-menu-sub').at(0).hasClass('c7n-menu-hidden')).not.toBe(true);
  });
  it('horizontal', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      openKeys: ['1'],
      mode: "horizontal",
      openTransitionName: ""
    }, _react["default"].createElement(SubMenu, {
      key: "1",
      title: "submenu1"
    }, _react["default"].createElement(_["default"].Item, {
      key: "submenu1"
    }, "Option 1"), _react["default"].createElement(_["default"].Item, {
      key: "submenu2"
    }, "Option 2")), _react["default"].createElement(_["default"].Item, {
      key: "2"
    }, "menu2")));
    expect(wrapper.find('.c7n-menu-sub').hostNodes().at(0).hasClass('c7n-menu-hidden')).not.toBe(true);
    wrapper.setProps({
      openKeys: []
    });
    wrapper.update();
    expect(wrapper.find('.c7n-menu-sub').hostNodes().at(0).hasClass('c7n-menu-hidden')).toBe(true);
    wrapper.setProps({
      openKeys: ['1']
    });
    wrapper.update();
    expect(wrapper.find('.c7n-menu-sub').hostNodes().at(0).hasClass('c7n-menu-hidden')).not.toBe(true);
  });
  it('inline', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      openKeys: ['1'],
      mode: "inline",
      openAnimation: ""
    }, _react["default"].createElement(SubMenu, {
      key: "1",
      title: "submenu1"
    }, _react["default"].createElement(_["default"].Item, {
      key: "submenu1"
    }, "Option 1"), _react["default"].createElement(_["default"].Item, {
      key: "submenu2"
    }, "Option 2")), _react["default"].createElement(_["default"].Item, {
      key: "2"
    }, "menu2")));
    expect(wrapper.find('.c7n-menu-sub').hostNodes().at(0).hasClass('c7n-menu-hidden')).not.toBe(true);
    wrapper.setProps({
      openKeys: []
    });
    wrapper.update();
    expect(wrapper.find('.c7n-menu-sub').hostNodes().at(0).hasClass('c7n-menu-hidden')).toBe(true);
    wrapper.setProps({
      openKeys: ['1']
    });
    wrapper.update();
    expect(wrapper.find('.c7n-menu-sub').hostNodes().at(0).hasClass('c7n-menu-hidden')).not.toBe(true);
  });
  it('vertical', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      openKeys: ['1'],
      mode: "vertical",
      openTransitionName: ""
    }, _react["default"].createElement(SubMenu, {
      key: "1",
      title: "submenu1"
    }, _react["default"].createElement(_["default"].Item, {
      key: "submenu1"
    }, "Option 1"), _react["default"].createElement(_["default"].Item, {
      key: "submenu2"
    }, "Option 2")), _react["default"].createElement(_["default"].Item, {
      key: "2"
    }, "menu2")));
    expect(wrapper.find('.c7n-menu-sub').hostNodes().at(0).hasClass('c7n-menu-hidden')).not.toBe(true);
    wrapper.setProps({
      openKeys: []
    });
    wrapper.update();
    expect(wrapper.find('.c7n-menu-sub').hostNodes().at(0).hasClass('c7n-menu-hidden')).toBe(true);
    wrapper.setProps({
      openKeys: ['1']
    });
    wrapper.update();
    expect(wrapper.find('.c7n-menu-sub').hostNodes().at(0).hasClass('c7n-menu-hidden')).not.toBe(true);
  }); // TypeError: Cannot read property 'indexOf' of undefined

  it('pr #4677 and issue #4692', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      mode: "horizontal"
    }, _react["default"].createElement(SubMenu, {
      title: "submenu"
    }, _react["default"].createElement(_["default"].Item, {
      key: "1"
    }, "menu1"), _react["default"].createElement(_["default"].Item, {
      key: "2"
    }, "menu2"))));
    wrapper.update(); // just expect no error emit
  });
  it('should always follow openKeys when mode is switched', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      openKeys: ['1'],
      mode: "inline"
    }, _react["default"].createElement(SubMenu, {
      key: "1",
      title: "submenu1"
    }, _react["default"].createElement(_["default"].Item, {
      key: "submenu1"
    }, "Option 1"), _react["default"].createElement(_["default"].Item, {
      key: "submenu2"
    }, "Option 2")), _react["default"].createElement(_["default"].Item, {
      key: "2"
    }, "menu2")));
    expect(wrapper.find('ul.c7n-menu-sub').at(0).hasClass('c7n-menu-hidden')).not.toBe(true);
    wrapper.setProps({
      mode: 'vertical'
    });
    wrapper.update();
    expect(wrapper.find('ul.c7n-menu-sub').at(0).hasClass('c7n-menu-hidden')).not.toBe(true);
    wrapper.setProps({
      mode: 'inline'
    });
    wrapper.update();
    expect(wrapper.find('ul.c7n-menu-sub').at(0).hasClass('c7n-menu-hidden')).not.toBe(true);
  });
  it('inlineCollapsed should works well when specify a not existed default openKeys', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      defaultOpenKeys: ['not-existed'],
      mode: "inline"
    }, _react["default"].createElement(_["default"].Item, {
      key: "menu1"
    }, _react["default"].createElement(_icon["default"], {
      type: "inbox"
    }), _react["default"].createElement("span", null, "Option")), _react["default"].createElement(SubMenu, {
      key: "1",
      title: "submenu1"
    }, _react["default"].createElement(_["default"].Item, {
      key: "submenu1"
    }, "Option"), _react["default"].createElement(_["default"].Item, {
      key: "submenu2"
    }, "Option"))));
    expect(wrapper.find('.c7n-menu-sub').length).toBe(0);
    wrapper.setProps({
      inlineCollapsed: true
    });
    jest.advanceTimersByTime(1000);
    wrapper.update();
    wrapper.simulate('transitionEnd', {
      propertyName: 'width'
    });
    wrapper.find('.c7n-menu-submenu-title').at(0).simulate('mouseEnter');
    jest.advanceTimersByTime(1000);
    wrapper.update();
    expect(wrapper.find('.c7n-menu-submenu').at(0).hasClass('c7n-menu-submenu-vertical')).toBe(true);
    expect(wrapper.find('.c7n-menu-submenu').at(0).hasClass('c7n-menu-submenu-open')).toBe(true);
    expect(wrapper.find('ul.c7n-menu-sub').at(0).hasClass('c7n-menu-vertical')).toBe(true);
    expect(wrapper.find('ul.c7n-menu-sub').at(0).hasClass('c7n-menu-hidden')).toBe(false);
  });
  describe('open submenu when click submenu title', function () {
    beforeEach(function () {
      jest.useFakeTimers();
    });
    afterEach(function () {
      jest.useRealTimers();
    });

    var toggleMenu = function toggleMenu(wrapper, index, event) {
      wrapper.find('.c7n-menu-submenu-title').at(index).simulate(event);
      jest.advanceTimersByTime(1000);
      wrapper.update();
    };

    it('inline', function () {
      var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
        mode: "inline"
      }, _react["default"].createElement(SubMenu, {
        key: "1",
        title: "submenu1"
      }, _react["default"].createElement(_["default"].Item, {
        key: "submenu1"
      }, "Option 1"), _react["default"].createElement(_["default"].Item, {
        key: "submenu2"
      }, "Option 2")), _react["default"].createElement(_["default"].Item, {
        key: "2"
      }, "menu2")));
      expect(wrapper.find('.c7n-menu-sub').length).toBe(0);
      toggleMenu(wrapper, 0, 'click');
      expect(wrapper.find('.c7n-menu-sub').hostNodes().length).toBe(1);
      expect(wrapper.find('.c7n-menu-sub').hostNodes().at(0).hasClass('c7n-menu-hidden')).not.toBe(true);
      toggleMenu(wrapper, 0, 'click');
      expect(wrapper.find('.c7n-menu-sub').hostNodes().at(0).hasClass('c7n-menu-hidden')).toBe(true);
    });
    it('vertical', function () {
      var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
        mode: "vertical"
      }, _react["default"].createElement(SubMenu, {
        key: "1",
        title: "submenu1"
      }, _react["default"].createElement(_["default"].Item, {
        key: "submenu1"
      }, "Option 1"), _react["default"].createElement(_["default"].Item, {
        key: "submenu2"
      }, "Option 2")), _react["default"].createElement(_["default"].Item, {
        key: "2"
      }, "menu2")));
      expect(wrapper.find('.c7n-menu-sub').length).toBe(0);
      toggleMenu(wrapper, 0, 'mouseenter');
      expect(wrapper.find('.c7n-menu-sub').hostNodes().length).toBe(1);
      expect(wrapper.find('.c7n-menu-sub').hostNodes().at(0).hasClass('c7n-menu-hidden')).not.toBe(true);
      toggleMenu(wrapper, 0, 'mouseleave');
      expect(wrapper.find('.c7n-menu-sub').hostNodes().at(0).hasClass('c7n-menu-hidden')).toBe(true);
    });
    it('horizontal', function () {
      jest.useFakeTimers();
      var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
        mode: "horizontal"
      }, _react["default"].createElement(SubMenu, {
        key: "1",
        title: "submenu1"
      }, _react["default"].createElement(_["default"].Item, {
        key: "submenu1"
      }, "Option 1"), _react["default"].createElement(_["default"].Item, {
        key: "submenu2"
      }, "Option 2")), _react["default"].createElement(_["default"].Item, {
        key: "2"
      }, "menu2")));
      expect(wrapper.find('.c7n-menu-sub').length).toBe(0);
      toggleMenu(wrapper, 0, 'mouseenter');
      expect(wrapper.find('.c7n-menu-sub').hostNodes().length).toBe(1);
      expect(wrapper.find('.c7n-menu-sub').hostNodes().at(0).hasClass('c7n-menu-hidden')).not.toBe(true);
      toggleMenu(wrapper, 0, 'mouseleave');
      expect(wrapper.find('.c7n-menu-sub').hostNodes().at(0).hasClass('c7n-menu-hidden')).toBe(true);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,