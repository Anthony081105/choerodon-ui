f2cd9a2bf5570be01ed8aa37db785437
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toArrayChildren = toArrayChildren;
exports.findChildInChildrenByKey = findChildInChildrenByKey;
exports.findShownChildInChildrenByKey = findShownChildInChildrenByKey;
exports.isSameChildren = isSameChildren;
exports.mergeChildren = mergeChildren;

var _react = require("react");

function toArrayChildren(children) {
  var ret = [];

  _react.Children.forEach(children, function (child) {
    if ((0, _react.isValidElement)(child)) {
      ret.push(child);
    }
  });

  return ret;
}

function findChildInChildrenByKey(children, key) {
  if (children) {
    return children.find(function (child) {
      return child && child.key === key;
    });
  }
}

function findShownChildInChildrenByKey(children, key, hiddenProp) {
  var ret;

  if (children) {
    children.forEach(function (child) {
      if (child && child.key === key && !child.props[hiddenProp]) {
        if (ret) {
          throw new Error('two child with same key for animate children');
        }

        ret = child;
      }
    });
  }

  return ret;
} // export function findHiddenChildInChildrenByKey(children, key, showProp):boolean {
//   let found = false;
//   if (children) {
//     children.forEach(function (child) {
//       if (found) {
//         return;
//       }
//       found = child && child.key === key && !child.props[showProp];
//     });
//   }
//   return found;
// }


function isSameChildren(c1, c2, hiddenProp) {
  var same = c1.length === c2.length;

  if (same) {
    c1.forEach(function (child, index) {
      var child2 = c2[index];

      if (child && child2) {
        if (child && !child2 || !child && child2) {
          same = false;
        } else if (child.key !== child2.key) {
          same = false;
        } else if (hiddenProp && child.props[hiddenProp] !== child2.props[hiddenProp]) {
          same = false;
        }
      }
    });
  }

  return same;
}

function mergeChildren(prev, next) {
  var ret = [];
  var nextChildrenPending = {};
  var pendingChildren = [];
  prev.forEach(function (child) {
    if (child && child.key && findChildInChildrenByKey(next, child.key)) {
      if (pendingChildren.length) {
        nextChildrenPending[child.key] = pendingChildren;
        pendingChildren = [];
      }
    } else {
      pendingChildren.push(child);
    }
  });
  next.forEach(function (child) {
    if (child && child.key && {}.hasOwnProperty.call(nextChildrenPending, child.key)) {
      ret = ret.concat(nextChildrenPending[child.key]);
    }

    ret.push(child);
  });
  return ret.concat(pendingChildren);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFuaW1hdGUvQ2hpbGRyZW5VdGlscy5qcyJdLCJuYW1lcyI6WyJyZXQiLCJDaGlsZHJlbiIsImNoaWxkIiwiY2hpbGRyZW4iLCJzYW1lIiwiYzEiLCJjMiIsImNoaWxkMiIsImhpZGRlblByb3AiLCJuZXh0Q2hpbGRyZW5QZW5kaW5nIiwicGVuZGluZ0NoaWxkcmVuIiwicHJldiIsImZpbmRDaGlsZEluQ2hpbGRyZW5CeUtleSIsIm5leHQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEsSUFBQSxNQUFBLEdBQUEsT0FBQSxDQUFBLE9BQUEsQ0FBQTs7QUFDTyxTQUFBLGVBQUEsQ0FBQSxRQUFBLEVBQW1DO0FBQ3RDLE1BQU1BLEdBQUcsR0FBVCxFQUFBOztBQUNBQyxFQUFBQSxNQUFBQSxDQUFBQSxRQUFBQSxDQUFBQSxPQUFBQSxDQUFBQSxRQUFBQSxFQUEyQixVQUFBLEtBQUEsRUFBUztBQUNoQyxRQUFJLENBQUEsR0FBQSxNQUFBLENBQUEsY0FBQSxFQUFKLEtBQUksQ0FBSixFQUEyQjtBQUN2QkQsTUFBQUEsR0FBRyxDQUFIQSxJQUFBQSxDQUFBQSxLQUFBQTtBQUNIO0FBSExDLEdBQUFBOztBQUtBLFNBQUEsR0FBQTtBQUNIOztBQUNNLFNBQUEsd0JBQUEsQ0FBQSxRQUFBLEVBQUEsR0FBQSxFQUFpRDtBQUNwRCxNQUFBLFFBQUEsRUFBYztBQUNWLFdBQU8sUUFBUSxDQUFSLElBQUEsQ0FBYyxVQUFBLEtBQUEsRUFBSztBQUFBLGFBQUlDLEtBQUssSUFBSUEsS0FBSyxDQUFMQSxHQUFBQSxLQUFiLEdBQUE7QUFBMUIsS0FBTyxDQUFQO0FBQ0g7QUFDSjs7QUFDTSxTQUFBLDZCQUFBLENBQUEsUUFBQSxFQUFBLEdBQUEsRUFBQSxVQUFBLEVBQWtFO0FBQ3JFLE1BQUEsR0FBQTs7QUFDQSxNQUFBLFFBQUEsRUFBYztBQUNWQyxJQUFBQSxRQUFRLENBQVJBLE9BQUFBLENBQWlCLFVBQUEsS0FBQSxFQUFTO0FBQ3RCLFVBQUlELEtBQUssSUFBSUEs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ZHJlbiwgaXNWYWxpZEVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG5leHBvcnQgZnVuY3Rpb24gdG9BcnJheUNoaWxkcmVuKGNoaWxkcmVuKSB7XG4gICAgY29uc3QgcmV0ID0gW107XG4gICAgQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgY2hpbGQgPT4ge1xuICAgICAgICBpZiAoaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICAgICAgICByZXQucHVzaChjaGlsZCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmV0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRDaGlsZEluQ2hpbGRyZW5CeUtleShjaGlsZHJlbiwga2V5KSB7XG4gICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICAgIHJldHVybiBjaGlsZHJlbi5maW5kKGNoaWxkID0+IGNoaWxkICYmIGNoaWxkLmtleSA9PT0ga2V5KTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gZmluZFNob3duQ2hpbGRJbkNoaWxkcmVuQnlLZXkoY2hpbGRyZW4sIGtleSwgaGlkZGVuUHJvcCkge1xuICAgIGxldCByZXQ7XG4gICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICAgIGNoaWxkcmVuLmZvckVhY2goY2hpbGQgPT4ge1xuICAgICAgICAgICAgaWYgKGNoaWxkICYmIGNoaWxkLmtleSA9PT0ga2V5ICYmICFjaGlsZC5wcm9wc1toaWRkZW5Qcm9wXSkge1xuICAgICAgICAgICAgICAgIGlmIChyZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd0d28gY2hpbGQgd2l0aCBzYW1lIGtleSBmb3IgYW5pbWF0ZSBjaGlsZHJlbicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXQgPSBjaGlsZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59XG4vLyBleHBvcnQgZnVuY3Rpb24gZmluZEhpZGRlbkNoaWxkSW5DaGlsZHJlbkJ5S2V5KGNoaWxkcmVuLCBrZXksIHNob3dQcm9wKTpib29sZWFuIHtcbi8vICAgbGV0IGZvdW5kID0gZmFsc2U7XG4vLyAgIGlmIChjaGlsZHJlbikge1xuLy8gICAgIGNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4vLyAgICAgICBpZiAoZm91bmQpIHtcbi8vICAgICAgICAgcmV0dXJuO1xuLy8gICAgICAgfVxuLy8gICAgICAgZm91bmQgPSBjaGlsZCAmJiBjaGlsZC5rZXkgPT09IGtleSAmJiAhY2hpbGQucHJvcHNbc2hvd1Byb3BdO1xuLy8gICAgIH0pO1xuLy8gICB9XG4vLyAgIHJldHVybiBmb3VuZDtcbi8vIH1cbmV4cG9ydCBmdW5jdGlvbiBpc1NhbWVDaGlsZHJlbihjMSwgYzIsIGhpZGRlblByb3ApIHtcbiAgICBsZXQgc2FtZSA9IGMxLmxlbmd0aCA9PT0gYzIubGVuZ3RoO1xuICAgIGlmIChzYW1lKSB7XG4gICAgICAgIGMxLmZvckVhY2goKGNoaWxkLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2hpbGQyID0gYzJbaW5kZXhdO1xuICAgICAgICAgICAgaWYgKGNoaWxkICYmIGNoaWxkMikge1xuICAgICAgICAgICAgICAgIGlmICgoY2hpbGQgJiYgIWNoaWxkMikgfHwgKCFjaGlsZCAmJiBjaGlsZDIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHNhbWUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY2hpbGQua2V5ICE9PSBjaGlsZDIua2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIHNhbWUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaGlkZGVuUHJvcCAmJiBjaGlsZC5wcm9wc1toaWRkZW5Qcm9wXSAhPT0gY2hpbGQyLnByb3BzW2hpZGRlblByb3BdKSB7XG4gICAgICAgICAgICAgICAgICAgIHNhbWUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gc2FtZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZUNoaWxkcmVuKHByZXYsIG5leHQpIHtcbiAgICBsZXQgcmV0ID0gW107XG4gICAgY29uc3QgbmV4dENoaWxkcmVuUGVuZGluZyA9IHt9O1xuICAgIGxldCBwZW5kaW5nQ2hpbGRyZW4gPSBbXTtcbiAgICBwcmV2LmZvckVhY2goY2hpbGQgPT4ge1xuICAgICAgICBpZiAoY2hpbGQgJiYgY2hpbGQua2V5ICYmIGZpbmRDaGlsZEluQ2hpbGRyZW5CeUtleShuZXh0LCBjaGlsZC5rZXkpKSB7XG4gICAgICAgICAgICBpZiAocGVuZGluZ0NoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIG5leHRDaGlsZHJlblBlbmRpbmdbY2hpbGQua2V5XSA9IHBlbmRpbmdDaGlsZHJlbjtcbiAgICAgICAgICAgICAgICBwZW5kaW5nQ2hpbGRyZW4gPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHBlbmRpbmdDaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIG5leHQuZm9yRWFjaChjaGlsZCA9PiB7XG4gICAgICAgIGlmIChjaGlsZCAmJiBjaGlsZC5rZXkgJiYge30uaGFzT3duUHJvcGVydHkuY2FsbChuZXh0Q2hpbGRyZW5QZW5kaW5nLCBjaGlsZC5rZXkpKSB7XG4gICAgICAgICAgICByZXQgPSByZXQuY29uY2F0KG5leHRDaGlsZHJlblBlbmRpbmdbY2hpbGQua2V5XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0LnB1c2goY2hpbGQpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXQuY29uY2F0KHBlbmRpbmdDaGlsZHJlbik7XG59XG4iXX0=