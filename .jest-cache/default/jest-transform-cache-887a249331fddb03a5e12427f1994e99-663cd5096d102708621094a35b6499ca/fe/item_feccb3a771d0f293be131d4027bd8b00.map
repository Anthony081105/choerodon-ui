{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components/transfer/item.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEqB,I;;;;;;;;;;;;;;4CACiB;AAAA,wCAAX,IAAW;AAAX,QAAA,IAAW;AAAA;;AAClC,aAAO,4BAAgB,qBAAhB,CAAsC,KAAtC,CAA4C,IAA5C,EAAkD,IAAlD,CAAP;AACD;;;6BAEK;AAAA;;AAAA,wBAC0E,KAAK,KAD/E;AAAA,UACI,YADJ,eACI,YADJ;AAAA,UACkB,UADlB,eACkB,UADlB;AAAA,UAC8B,IAD9B,eAC8B,IAD9B;AAAA,UACoC,IADpC,eACoC,IADpC;AAAA,UAC0C,OAD1C,eAC0C,OAD1C;AAAA,UACmD,SADnD,eACmD,SADnD;AAAA,UAC8D,OAD9D,eAC8D,OAD9D;AAGJ,UAAM,SAAS,GAAG,uGACZ,SADY,oBACe,IADf,2DAEZ,SAFY,6BAEwB,IAAI,CAAC,QAF7B,gBAAlB;;AAKA,UAAM,QAAQ,GACZ,kBAAA,aAAA,CAAA,IAAA,EAAA;AACE,QAAA,SAAS,EAAE,SADb;AAEE,QAAA,KAAK,EAAE,YAFT;AAGE,QAAA,OAAO,EAAE,IAAI,CAAC,QAAL,GAAgB,SAAhB,GAA4B;AAAA,iBAAM,OAAO,CAAC,IAAD,CAAb;AAAA;AAHvC,OAAA,EAKE,kBAAA,aAAA,CAAC,oBAAD,EAAS;AAAC,QAAA,OAAO,EAAE,OAAV;AAAmB,QAAA,QAAQ,EAAE,IAAI,CAAC;AAAlC,OAAT,CALF,EAME,kBAAA,aAAA,CAAA,MAAA,EAAA,IAAA,EAAO,UAAP,CANF,CADF;;AAUA,UAAI,QAAQ,GAAuB,IAAnC;;AACA,UAAI,IAAJ,EAAU;AACR,YAAM,SAAS;AACb,UAAA,MAAM,EAAE,EADK;AAEb,UAAA,MAAM,EAAE,GAFK;AAGb,UAAA,QAAQ,EAAE,CAHG;AAIb,UAAA,QAAQ,EAAE;AAJG,WAKV,IALU,CAAf;AAOA,QAAA,QAAQ,GAAG,kBAAA,aAAA,CAAC,yBAAD,EAAS,0BAAA,EAAA,EAAK,SAAL,CAAT,EAA0B,QAA1B,CAAX;AACD,OATD,MASO;AACL,QAAA,QAAQ,GAAG,QAAX;AACD;;AAED,aAAO,QAAP;AACD;;;EAtC+B,gB","sourcesContent":["import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport Lazyload from 'react-lazy-load';\nimport Checkbox from '../checkbox';\nimport PureRenderMixin from '../rc-components/util/PureRenderMixin';\n\nexport default class Item extends Component<any, any> {\n  shouldComponentUpdate(...args: any[]) {\n    return PureRenderMixin.shouldComponentUpdate.apply(this, args);\n  }\n\n  render() {\n    const { renderedText, renderedEl, item, lazy, checked, prefixCls, onClick } = this.props;\n\n    const className = classNames({\n      [`${prefixCls}-content-item`]: true,\n      [`${prefixCls}-content-item-disabled`]: item.disabled,\n    });\n\n    const listItem = (\n      <li\n        className={className}\n        title={renderedText}\n        onClick={item.disabled ? undefined : () => onClick(item)}\n      >\n        <Checkbox checked={checked} disabled={item.disabled} />\n        <span>{renderedEl}</span>\n      </li>\n    );\n    let children: JSX.Element | null = null;\n    if (lazy) {\n      const lazyProps = {\n        height: 32,\n        offset: 500,\n        throttle: 0,\n        debounce: false,\n        ...lazy,\n      };\n      children = <Lazyload {...lazyProps}>{listItem}</Lazyload>;\n    } else {\n      children = listItem;\n    }\n\n    return children;\n  }\n}\n"]}