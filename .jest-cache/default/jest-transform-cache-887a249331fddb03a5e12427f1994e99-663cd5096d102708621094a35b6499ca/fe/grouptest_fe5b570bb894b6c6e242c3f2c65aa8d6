938a453de9df8436600dae128d9483ed
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _index = _interopRequireDefault(require("../index"));

describe('CheckboxGroup', function () {
  it('should work basically', function () {
    var onChange = jest.fn();
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_index["default"].Group, {
      options: ['Apple', 'Pear', 'Orange'],
      onChange: onChange
    }));
    wrapper.find('.c7n-checkbox-input').at(0).simulate('change');
    expect(onChange).toHaveBeenCalledWith(['Apple']);
    wrapper.find('.c7n-checkbox-input').at(1).simulate('change');
    expect(onChange).toHaveBeenCalledWith(['Apple', 'Pear']);
    wrapper.find('.c7n-checkbox-input').at(2).simulate('change');
    expect(onChange).toHaveBeenCalledWith(['Apple', 'Pear', 'Orange']);
    wrapper.find('.c7n-checkbox-input').at(1).simulate('change');
    expect(onChange).toHaveBeenCalledWith(['Apple', 'Orange']);
  });
  it('does not trigger onChange callback of both Checkbox and CheckboxGroup when CheckboxGroup is disabled', function () {
    var onChangeGroup = jest.fn();
    var options = [{
      label: 'Apple',
      value: 'Apple'
    }, {
      label: 'Pear',
      value: 'Pear'
    }];
    var groupWrapper = (0, _enzyme.mount)(_react["default"].createElement(_index["default"].Group, {
      options: options,
      onChange: onChangeGroup,
      disabled: true
    }));
    groupWrapper.find('.c7n-checkbox-input').at(0).simulate('change');
    expect(onChangeGroup).not.toHaveBeenCalled();
    groupWrapper.find('.c7n-checkbox-input').at(1).simulate('change');
    expect(onChangeGroup).not.toHaveBeenCalled();
  });
  it('does not prevent onChange callback from Checkbox when CheckboxGroup is not disabled', function () {
    var onChangeGroup = jest.fn();
    var options = [{
      label: 'Apple',
      value: 'Apple'
    }, {
      label: 'Orange',
      value: 'Orange',
      disabled: true
    }];
    var groupWrapper = (0, _enzyme.mount)(_react["default"].createElement(_index["default"].Group, {
      options: options,
      onChange: onChangeGroup
    }));
    groupWrapper.find('.c7n-checkbox-input').at(0).simulate('change');
    expect(onChangeGroup).toHaveBeenCalledWith(['Apple']);
    groupWrapper.find('.c7n-checkbox-input').at(1).simulate('change');
    expect(onChangeGroup).toHaveBeenCalledWith(['Apple']);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3VwLnRlc3QuanMiXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJpdCIsIm9uQ2hhbmdlIiwiamVzdCIsImZuIiwid3JhcHBlciIsImZpbmQiLCJhdCIsInNpbXVsYXRlIiwiZXhwZWN0IiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJvbkNoYW5nZUdyb3VwIiwib3B0aW9ucyIsImxhYmVsIiwidmFsdWUiLCJncm91cFdyYXBwZXIiLCJub3QiLCJ0b0hhdmVCZWVuQ2FsbGVkIiwiZGlzYWJsZWQiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFFQUEsUUFBUSxDQUFDLGVBQUQsRUFBa0IsWUFBTTtBQUM5QkMsRUFBQUEsRUFBRSxDQUFDLHVCQUFELEVBQTBCLFlBQU07QUFDaEMsUUFBTUMsUUFBUSxHQUFHQyxJQUFJLENBQUNDLEVBQUwsRUFBakI7QUFDQSxRQUFNQyxPQUFPLEdBQUcsbUJBQ2QsZ0NBQUMsaUJBQUQsQ0FBVSxLQUFWO0FBQWdCLE1BQUEsT0FBTyxFQUFFLENBQUMsT0FBRCxFQUFVLE1BQVYsRUFBa0IsUUFBbEIsQ0FBekI7QUFBc0QsTUFBQSxRQUFRLEVBQUVIO0FBQWhFLE1BRGMsQ0FBaEI7QUFHQUcsSUFBQUEsT0FBTyxDQUNKQyxJQURILENBQ1EscUJBRFIsRUFFR0MsRUFGSCxDQUVNLENBRk4sRUFHR0MsUUFISCxDQUdZLFFBSFo7QUFJQUMsSUFBQUEsTUFBTSxDQUFDUCxRQUFELENBQU4sQ0FBaUJRLG9CQUFqQixDQUFzQyxDQUFDLE9BQUQsQ0FBdEM7QUFDQUwsSUFBQUEsT0FBTyxDQUNKQyxJQURILENBQ1EscUJBRFIsRUFFR0MsRUFGSCxDQUVNLENBRk4sRUFHR0MsUUFISCxDQUdZLFFBSFo7QUFJQUMsSUFBQUEsTUFBTSxDQUFDUCxRQUFELENBQU4sQ0FBaUJRLG9CQUFqQixDQUFzQyxDQUFDLE9BQUQsRUFBVSxNQUFWLENBQXRDO0FBQ0FMLElBQUFBLE9BQU8sQ0FDSkMsSUFESCxDQUNRLHFCQURSLEVBRUdDLEVBRkgsQ0FFTSxDQUZOLEVBR0dDLFFBSEgsQ0FHWSxRQUhaO0FBSUFDLElBQUFBLE1BQU0sQ0FBQ1AsUUFBRCxDQUFOLENBQWlCUSxvQkFBakIsQ0FBc0MsQ0FBQyxPQUFELEVBQVUsTUFBVixFQUFrQixRQUFsQixDQUF0QztBQUNBTCxJQUFBQSxPQUFPLENBQ0pDLElBREgsQ0FDUSxxQkFEUixFQUVHQyxFQUZILENBRU0sQ0FGTixFQUdHQyxRQUhILENBR1ksUUFIWjtBQUlBQyxJQUFBQSxNQUFNLENBQUNQLFFBQUQsQ0FBTixDQUFpQlEsb0JBQWpCLENBQXNDLENBQUMsT0FBRCxFQUFVLFFBQVYsQ0FBdEM7QUFDRCxHQXpCQyxDQUFGO0FBMkJBVCxFQUFBQSxFQUFFLENBQUMsc0dBQUQsRUFBeUcsWUFBTTtBQUMvRyxRQUFNVSxhQUFhLEdBQUdSLElBQUksQ0FBQ0MsRUFBTCxFQUF0QjtBQUVBLFFBQU1RLE9BQU8sR0FBRyxDQUFDO0FBQUVDLE1BQUFBLEtBQUssRUFBRSxPQUFUO0FBQWtCQyxNQUFBQSxLQUFLLEVBQUU7QUFBekIsS0FBRCxFQUFxQztBQUFFRCxNQUFBQSxLQUFLLEVBQUUsTUFBVDtBQUFpQkMsTUFBQUEsS0FBSyxFQUFFO0FBQXhCLEtBQXJDLENBQWhCO0FBRUEsUUFBTUMsWUFBWSxHQUFHLG1CQUNuQixnQ0FBQyxpQkFBRCxDQUFVLEtBQVY7QUFBZ0IsTUFBQSxPQUFPLEVBQUVILE9BQXpCO0FBQWtDLE1BQUEsUUFBUSxFQUFFRCxhQUE1QztBQUEyRCxNQUFBLFFBQVE7QUFBbkUsTUFEbUIsQ0FBckI7QUFHQUksSUFBQUEsWUFBWSxDQUNUVCxJQURILENBQ1EscUJBRFIsRUFFR0MsRUFGSCxDQUVNLENBRk4sRUFHR0MsUUFISCxDQUdZLFFBSFo7QUFJQUMsSUFBQUEsTUFBTSxDQUFDRSxhQUFELENBQU4sQ0FBc0JLLEdBQXRCLENBQTBCQyxnQkFBMUI7QUFDQUYsSUFBQUEsWUFBWSxDQUNUVCxJQURILENBQ1EscUJBRFIsRUFFR0MsRUFGSCxDQUVNLENBRk4sRUFHR0MsUUFISCxDQUdZLFFBSFo7QUFJQUMsSUFBQUEsTUFBTSxDQUFDRSxhQUFELENBQU4sQ0FBc0JLLEdBQXRCLENBQTBCQyxnQkFBMUI7QUFDRCxHQWxCQyxDQUFGO0FBb0JBaEIsRUFBQUEsRUFBRSxDQUFDLHFGQUFELEVBQXdGLFlBQU07QUFDOUYsUUFBTVUsYUFBYSxHQUFHUixJQUFJLENBQUNDLEVBQUwsRUFBdEI7QUFFQSxRQUFNUSxPQUFPLEdBQUcsQ0FDZDtBQUFFQyxNQUFBQSxLQUFLLEVBQUUsT0FBVDtBQUFrQkMsTUFBQUEsS0FBSyxFQUFFO0FBQXpCLEtBRGMsRUFFZDtBQUFFRCxNQUFBQSxLQUFLLEVBQUUsUUFBVDtBQUFtQkMsTUFBQUEsS0FBSyxFQUFFLFFBQTFCO0FBQW9DSSxNQUFBQSxRQUFRLEVBQUU7QUFBOUMsS0FGYyxDQUFoQjtBQUtBLFFBQU1ILFlBQVksR0FBRyxtQkFBTSxnQ0FBQyxpQkFBRCxDQUFVLEtBQVY7QUFBZ0IsTUFBQSxPQUFPLEVBQUVILE9BQXpCO0FBQWtDLE1BQUEsUUFBUSxFQUFFRDtBQUE1QyxNQUFOLENBQXJCO0FBQ0FJLElBQUFBLFlBQVksQ0FDVFQsSUFESCxDQUNRLHFCQURSLEVBRUdDLEVBRkgsQ0FFTSxDQUZOLEVBR0dDLFFBSEgsQ0FHWSxRQUhaO0FBSUFDLElBQUFBLE1BQU0sQ0FBQ0UsYUFBRCxDQUFOLENBQXNCRCxvQkFBdEIsQ0FBMkMsQ0FBQyxPQUFELENBQTNDO0FBQ0FLLElBQUFBLFlBQVksQ0FDVFQsSUFESCxDQUNRLHFCQURSLEVBRUdDLEVBRkgsQ0FFTSxDQUZOLEVBR0dDLFFBSEgsQ0FHWSxRQUhaO0FBSUFDLElBQUFBLE1BQU0sQ0FBQ0UsYUFBRCxDQUFOLENBQXNCRCxvQkFBdEIsQ0FBMkMsQ0FBQyxPQUFELENBQTNDO0FBQ0QsR0FuQkMsQ0FBRjtBQW9CRCxDQXBFTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IG1vdW50IH0gZnJvbSAnZW56eW1lJztcbmltcG9ydCBDaGVja2JveCBmcm9tICcuLi9pbmRleCc7XG5cbmRlc2NyaWJlKCdDaGVja2JveEdyb3VwJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIHdvcmsgYmFzaWNhbGx5JywgKCkgPT4ge1xuICAgIGNvbnN0IG9uQ2hhbmdlID0gamVzdC5mbigpO1xuICAgIGNvbnN0IHdyYXBwZXIgPSBtb3VudChcbiAgICAgIDxDaGVja2JveC5Hcm91cCBvcHRpb25zPXtbJ0FwcGxlJywgJ1BlYXInLCAnT3JhbmdlJ119IG9uQ2hhbmdlPXtvbkNoYW5nZX0gLz4sXG4gICAgKTtcbiAgICB3cmFwcGVyXG4gICAgICAuZmluZCgnLmM3bi1jaGVja2JveC1pbnB1dCcpXG4gICAgICAuYXQoMClcbiAgICAgIC5zaW11bGF0ZSgnY2hhbmdlJyk7XG4gICAgZXhwZWN0KG9uQ2hhbmdlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChbJ0FwcGxlJ10pO1xuICAgIHdyYXBwZXJcbiAgICAgIC5maW5kKCcuYzduLWNoZWNrYm94LWlucHV0JylcbiAgICAgIC5hdCgxKVxuICAgICAgLnNpbXVsYXRlKCdjaGFuZ2UnKTtcbiAgICBleHBlY3Qob25DaGFuZ2UpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFsnQXBwbGUnLCAnUGVhciddKTtcbiAgICB3cmFwcGVyXG4gICAgICAuZmluZCgnLmM3bi1jaGVja2JveC1pbnB1dCcpXG4gICAgICAuYXQoMilcbiAgICAgIC5zaW11bGF0ZSgnY2hhbmdlJyk7XG4gICAgZXhwZWN0KG9uQ2hhbmdlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChbJ0FwcGxlJywgJ1BlYXInLCAnT3JhbmdlJ10pO1xuICAgIHdyYXBwZXJcbiAgICAgIC5maW5kKCcuYzduLWNoZWNrYm94LWlucHV0JylcbiAgICAgIC5hdCgxKVxuICAgICAgLnNpbXVsYXRlKCdjaGFuZ2UnKTtcbiAgICBleHBlY3Qob25DaGFuZ2UpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFsnQXBwbGUnLCAnT3JhbmdlJ10pO1xuICB9KTtcblxuICBpdCgnZG9lcyBub3QgdHJpZ2dlciBvbkNoYW5nZSBjYWxsYmFjayBvZiBib3RoIENoZWNrYm94IGFuZCBDaGVja2JveEdyb3VwIHdoZW4gQ2hlY2tib3hHcm91cCBpcyBkaXNhYmxlZCcsICgpID0+IHtcbiAgICBjb25zdCBvbkNoYW5nZUdyb3VwID0gamVzdC5mbigpO1xuXG4gICAgY29uc3Qgb3B0aW9ucyA9IFt7IGxhYmVsOiAnQXBwbGUnLCB2YWx1ZTogJ0FwcGxlJyB9LCB7IGxhYmVsOiAnUGVhcicsIHZhbHVlOiAnUGVhcicgfV07XG5cbiAgICBjb25zdCBncm91cFdyYXBwZXIgPSBtb3VudChcbiAgICAgIDxDaGVja2JveC5Hcm91cCBvcHRpb25zPXtvcHRpb25zfSBvbkNoYW5nZT17b25DaGFuZ2VHcm91cH0gZGlzYWJsZWQgLz4sXG4gICAgKTtcbiAgICBncm91cFdyYXBwZXJcbiAgICAgIC5maW5kKCcuYzduLWNoZWNrYm94LWlucHV0JylcbiAgICAgIC5hdCgwKVxuICAgICAgLnNpbXVsYXRlKCdjaGFuZ2UnKTtcbiAgICBleHBlY3Qob25DaGFuZ2VHcm91cCkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICBncm91cFdyYXBwZXJcbiAgICAgIC5maW5kKCcuYzduLWNoZWNrYm94LWlucHV0JylcbiAgICAgIC5hdCgxKVxuICAgICAgLnNpbXVsYXRlKCdjaGFuZ2UnKTtcbiAgICBleHBlY3Qob25DaGFuZ2VHcm91cCkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgfSk7XG5cbiAgaXQoJ2RvZXMgbm90IHByZXZlbnQgb25DaGFuZ2UgY2FsbGJhY2sgZnJvbSBDaGVja2JveCB3aGVuIENoZWNrYm94R3JvdXAgaXMgbm90IGRpc2FibGVkJywgKCkgPT4ge1xuICAgIGNvbnN0IG9uQ2hhbmdlR3JvdXAgPSBqZXN0LmZuKCk7XG5cbiAgICBjb25zdCBvcHRpb25zID0gW1xuICAgICAgeyBsYWJlbDogJ0FwcGxlJywgdmFsdWU6ICdBcHBsZScgfSxcbiAgICAgIHsgbGFiZWw6ICdPcmFuZ2UnLCB2YWx1ZTogJ09yYW5nZScsIGRpc2FibGVkOiB0cnVlIH0sXG4gICAgXTtcblxuICAgIGNvbnN0IGdyb3VwV3JhcHBlciA9IG1vdW50KDxDaGVja2JveC5Hcm91cCBvcHRpb25zPXtvcHRpb25zfSBvbkNoYW5nZT17b25DaGFuZ2VHcm91cH0gLz4pO1xuICAgIGdyb3VwV3JhcHBlclxuICAgICAgLmZpbmQoJy5jN24tY2hlY2tib3gtaW5wdXQnKVxuICAgICAgLmF0KDApXG4gICAgICAuc2ltdWxhdGUoJ2NoYW5nZScpO1xuICAgIGV4cGVjdChvbkNoYW5nZUdyb3VwKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChbJ0FwcGxlJ10pO1xuICAgIGdyb3VwV3JhcHBlclxuICAgICAgLmZpbmQoJy5jN24tY2hlY2tib3gtaW5wdXQnKVxuICAgICAgLmF0KDEpXG4gICAgICAuc2ltdWxhdGUoJ2NoYW5nZScpO1xuICAgIGV4cGVjdChvbkNoYW5nZUdyb3VwKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChbJ0FwcGxlJ10pO1xuICB9KTtcbn0pO1xuIl19