8929063b8fe5a1fe77a0115de75e0be5
"use strict";

/* istanbul ignore next */
function cov_2pr1df5aox() {
  var path = "/Users/huihuawk/Documents/opt/choerodon-ui/components/_util/reactNode.tsx";
  var hash = "53618655f243b041f9b8245d4b586bf1d3280db9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/huihuawk/Documents/opt/choerodon-ui/components/_util/reactNode.tsx",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 30
        },
        end: {
          line: 3,
          column: 86
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 7,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 40
        }
      },
      "3": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 36
        }
      },
      "4": {
        start: {
          line: 10,
          column: 0
        },
        end: {
          line: 10,
          column: 32
        }
      },
      "5": {
        start: {
          line: 12,
          column: 12
        },
        end: {
          line: 12,
          column: 53
        }
      },
      "6": {
        start: {
          line: 14,
          column: 21
        },
        end: {
          line: 14,
          column: 41
        }
      },
      "7": {
        start: {
          line: 15,
          column: 0
        },
        end: {
          line: 15,
          column: 40
        }
      },
      "8": {
        start: {
          line: 18,
          column: 2
        },
        end: {
          line: 18,
          column: 51
        }
      },
      "9": {
        start: {
          line: 18,
          column: 32
        },
        end: {
          line: 18,
          column: 51
        }
      },
      "10": {
        start: {
          line: 19,
          column: 2
        },
        end: {
          line: 19,
          column: 84
        }
      },
      "11": {
        start: {
          line: 23,
          column: 2
        },
        end: {
          line: 23,
          column: 49
        }
      }
    },
    fnMap: {
      "0": {
        name: "replaceElement",
        decl: {
          start: {
            line: 17,
            column: 9
          },
          end: {
            line: 17,
            column: 23
          }
        },
        loc: {
          start: {
            line: 17,
            column: 53
          },
          end: {
            line: 20,
            column: 1
          }
        },
        line: 17
      },
      "1": {
        name: "cloneElement",
        decl: {
          start: {
            line: 22,
            column: 9
          },
          end: {
            line: 22,
            column: 21
          }
        },
        loc: {
          start: {
            line: 22,
            column: 38
          },
          end: {
            line: 24,
            column: 1
          }
        },
        line: 22
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 18,
            column: 2
          },
          end: {
            line: 18,
            column: 51
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 18,
            column: 2
          },
          end: {
            line: 18,
            column: 51
          }
        }, {
          start: {
            line: 18,
            column: 2
          },
          end: {
            line: 18,
            column: 51
          }
        }],
        line: 18
      },
      "1": {
        loc: {
          start: {
            line: 19,
            column: 37
          },
          end: {
            line: 19,
            column: 82
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 19,
            column: 67
          },
          end: {
            line: 19,
            column: 74
          }
        }, {
          start: {
            line: 19,
            column: 77
          },
          end: {
            line: 19,
            column: 82
          }
        }],
        line: 19
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "53618655f243b041f9b8245d4b586bf1d3280db9"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];

  cov_2pr1df5aox = function () {
    return actualCoverage;
  };

  return actualCoverage;
}

cov_2pr1df5aox();

var _interopRequireWildcard =
/* istanbul ignore next */
(cov_2pr1df5aox().s[0]++, require("@babel/runtime/helpers/interopRequireWildcard"));

/* istanbul ignore next */
cov_2pr1df5aox().s[1]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});

/* istanbul ignore next */
cov_2pr1df5aox().s[2]++;
exports.replaceElement = replaceElement;

/* istanbul ignore next */
cov_2pr1df5aox().s[3]++;
exports.cloneElement = cloneElement;

/* istanbul ignore next */
cov_2pr1df5aox().s[4]++;
exports.isValidElement = void 0;
var React =
/* istanbul ignore next */
(cov_2pr1df5aox().s[5]++, _interopRequireWildcard(require("react")));
var isValidElement =
/* istanbul ignore next */
(cov_2pr1df5aox().s[6]++, React.isValidElement);

/* istanbul ignore next */
cov_2pr1df5aox().s[7]++;
exports.isValidElement = isValidElement;

function replaceElement(element, replacement, props) {
  /* istanbul ignore next */
  cov_2pr1df5aox().f[0]++;
  cov_2pr1df5aox().s[8]++;

  if (!isValidElement(element)) {
    /* istanbul ignore next */
    cov_2pr1df5aox().b[0][0]++;
    cov_2pr1df5aox().s[9]++;
    return replacement;
  } else
  /* istanbul ignore next */
  {
    cov_2pr1df5aox().b[0][1]++;
  }

  cov_2pr1df5aox().s[10]++;
  return React.cloneElement(element, typeof props === 'function' ?
  /* istanbul ignore next */
  (cov_2pr1df5aox().b[1][0]++, props()) :
  /* istanbul ignore next */
  (cov_2pr1df5aox().b[1][1]++, props));
}

function cloneElement(element, props) {
  /* istanbul ignore next */
  cov_2pr1df5aox().f[1]++;
  cov_2pr1df5aox().s[11]++;
  return replaceElement(element, element, props);
}