{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/table/TableBody.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA,IAAqB,SAArB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,4BAMU,IANV,EAMqC;AAAA,UACzB,MADyB,GACd,KAAK,KADS,CACzB,MADyB;;AAEjC,UAAI,MAAJ,EAAY;AACV,QAAA,MAAM,CAAC,IAAD,CAAN;AACD;AACF;AAXH;AAAA;AAAA,6BAaQ;AAAA,wBACoD,KAAK,KADzD;AAAA,UACI,QADJ,eACI,QADJ;AAAA,UACc,IADd,eACc,IADd;AAAA,UACoB,SADpB,eACoB,SADpB;AAAA,UAC+B,MAD/B,eAC+B,MAD/B;AAAA,UACuC,QADvC,eACuC,QADvC;AAAA,kCAIA,KAAK,OAJL,CAGF,UAHE;AAAA,UAGY,oBAHZ,yBAGY,oBAHZ;AAAA,UAGkC,SAHlC,yBAGkC,SAHlC;AAKJ,UAAM,SAAS,GAAG,IAAI,KAAK,IAAT,IAAiB,IAAI,KAAA;AAAA;AAAvC;AACA,UAAM,SAAS,GAAG,mCAAlB;AACA,UAAM,mBAAmB,GAAG,CAAC,IAAD,IAAS,SAAT,IAAsB,SAAlD;;AACA,UAAM,SAAS,GACb,kBAAA,aAAA,CAAA,KAAA,EAAA;AACE,QAAA,GAAG,EAAE,KAAK,OADZ;AAEE,QAAA,SAAS,YAAK,SAAL,UAFX;AAGE,QAAA,KAAK,EAAE;AACL,UAAA,MAAM,EAAE,4BACN,mBAAmB,IAAI,MAAM,KAAK,SAAlC,GAA8C,MAAM,GAAG,SAAvD,GAAmE,MAD7D,CADH;AAIL,UAAA,YAAY,EAAE,mBAAmB,GAAG,4BAAQ,CAAC,SAAT,CAAH,GAAyB,SAJrD;AAKL,UAAA,KAAK,EAAE,SAAS,GAAG,4BAAQ,oBAAoB,IAAI,SAAS,IAAI,EAAjB,CAA5B,CAAH,GAAuD;AALlE,SAHT;AAUE,QAAA,QAAQ,EAAE;AAVZ,OAAA,EAYG,QAZH,CADF;;AAgBA,UAAI,SAAJ,EAAe;AACb,eACE,kBAAA,aAAA,CAAA,KAAA,EAAA;AAAK,UAAA,KAAK,EAAE;AAAE,YAAA,KAAK,EAAE,4BAAQ,oBAAR,CAAT;AAAwC,YAAA,QAAQ,EAAE;AAAlD;AAAZ,SAAA,EAA2E,SAA3E,CADF;AAGD;;AAED,aAAO,SAAP;AACD;AA5CH;AAAA;AAAA,EAAuC,gBAAvC,CAAA;;AACS,SAAA,CAAA,WAAA,GAAc,WAAd;AAEA,SAAA,CAAA,WAAA,GAAc,wBAAd;AAGP,uBAAA,CADC,oBACD,CAAA,E,mBAAA,E,SAAA,EAKC,IALD;AANmB,SAAS,GAAA,uBAAA,CAD7B,mBAC6B,CAAA,EAAT,SAAS,CAAT;eAAA,S","sourcesContent":["import React, { Component } from 'react';\nimport { observer } from 'mobx-react';\nimport { pxToRem } from 'choerodon-ui/lib/_util/UnitConvertor';\nimport measureScrollbar from 'choerodon-ui/lib/_util/measureScrollbar';\nimport autobind from '../_util/autobind';\nimport { ColumnLock } from './enum';\nimport TableContext from './TableContext';\n\nexport interface TableBodyProps {\n  prefixCls?: string;\n  lock?: ColumnLock | boolean;\n  height?: number;\n  getRef?: (node: HTMLDivElement | null) => void;\n  onScroll?: (e) => void;\n}\n\n@observer\nexport default class TableBody extends Component<TableBodyProps> {\n  static displayName = 'TableBody';\n\n  static contextType = TableContext;\n\n  @autobind\n  saveRef(node: HTMLDivElement | null) {\n    const { getRef } = this.props;\n    if (getRef) {\n      getRef(node);\n    }\n  }\n\n  render() {\n    const { children, lock, prefixCls, height, onScroll } = this.props;\n    const {\n      tableStore: { leftLeafColumnsWidth, hasFooter },\n    } = this.context;\n    const fixedLeft = lock === true || lock === ColumnLock.left;\n    const scrollbar = measureScrollbar();\n    const hasFooterAndNotLock = !lock && hasFooter && scrollbar;\n    const tableBody = (\n      <div\n        ref={this.saveRef}\n        className={`${prefixCls}-body`}\n        style={{\n          height: pxToRem(\n            hasFooterAndNotLock && height !== undefined ? height + scrollbar : height,\n          ),\n          marginBottom: hasFooterAndNotLock ? pxToRem(-scrollbar) : undefined,\n          width: fixedLeft ? pxToRem(leftLeafColumnsWidth + (scrollbar || 20)) : undefined,\n        }}\n        onScroll={onScroll}\n      >\n        {children}\n      </div>\n    );\n    if (fixedLeft) {\n      return (\n        <div style={{ width: pxToRem(leftLeafColumnsWidth), overflow: 'hidden' }}>{tableBody}</div>\n      );\n    }\n\n    return tableBody;\n  }\n}\n"]}