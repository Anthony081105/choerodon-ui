8d21e96295867408798f62a2919cb370
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactDom = require("react-dom");

var _classnames = _interopRequireDefault(require("classnames"));

var _debounce = _interopRequireDefault(require("lodash/debounce"));

var _utils = require("./utils");

function _createSuper(Derived) {
  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  return function () {
    var Super = (0, _getPrototypeOf2["default"])(Derived),
        result;

    if (isNativeReflectConstruct()) {
      var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return (0, _possibleConstructorReturn2["default"])(this, result);
  };
}

var Steps =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(Steps, _Component);

  var _super = _createSuper(Steps);

  function Steps(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, Steps);
    _this = _super.call(this, props);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "calcStepOffsetWidth", function () {
      if ((0, _utils.isFlexSupported)()) {
        return;
      } // Just for IE9


      var domNode = (0, _reactDom.findDOMNode)((0, _assertThisInitialized2["default"])(_this));

      if (domNode.children.length > 0) {
        if (_this.calcTimeout) {
          clearTimeout(_this.calcTimeout);
        }

        _this.calcTimeout = setTimeout(function () {
          // +1 for fit edge bug of digit width, like 35.4px
          var lastStepOffsetWidth = (domNode.lastChild.offsetWidth || 0) + 1; // Reduce shake bug

          if (_this.state.lastStepOffsetWidth === lastStepOffsetWidth || Math.abs(_this.state.lastStepOffsetWidth - lastStepOffsetWidth) <= 3) {
            return;
          }

          _this.setState({
            lastStepOffsetWidth: lastStepOffsetWidth
          });
        });
      }
    });
    _this.state = {
      flexSupported: true,
      lastStepOffsetWidth: 0
    };
    _this.calcStepOffsetWidth = (0, _debounce["default"])(_this.calcStepOffsetWidth, 150);
    return _this;
  }

  (0, _createClass2["default"])(Steps, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.calcStepOffsetWidth();

      if (!(0, _utils.isFlexSupported)()) {
        this.setState({
          flexSupported: false
        });
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.calcStepOffsetWidth();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.calcTimeout) {
        clearTimeout(this.calcTimeout);
      }

      if (this.calcStepOffsetWidth && this.calcStepOffsetWidth.cancel) {
        this.calcStepOffsetWidth.cancel();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _classNames;

      var _this$props = this.props,
          prefixCls = _this$props.prefixCls,
          _this$props$style = _this$props.style,
          style = _this$props$style === void 0 ? {} : _this$props$style,
          className = _this$props.className,
          children = _this$props.children,
          direction = _this$props.direction,
          labelPlacement = _this$props.labelPlacement,
          iconPrefix = _this$props.iconPrefix,
          status = _this$props.status,
          size = _this$props.size,
          current = _this$props.current,
          progressDot = _this$props.progressDot,
          restProps = (0, _objectWithoutProperties2["default"])(_this$props, ["prefixCls", "style", "className", "children", "direction", "labelPlacement", "iconPrefix", "status", "size", "current", "progressDot"]);
      var _this$state = this.state,
          lastStepOffsetWidth = _this$state.lastStepOffsetWidth,
          flexSupported = _this$state.flexSupported;

      var filteredChildren = _react.Children.toArray(children).filter(function (c) {
        return !!c;
      });

      var lastIndex = filteredChildren.length - 1;
      var adjustedlabelPlacement = !!progressDot ? 'vertical' : labelPlacement;
      var classString = (0, _classnames["default"])(prefixCls, "".concat(prefixCls, "-").concat(direction), className, (_classNames = {}, (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-").concat(size), size), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-label-").concat(adjustedlabelPlacement), direction === 'horizontal'), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-dot"), !!progressDot), _classNames));
      return _react["default"].createElement("div", (0, _extends2["default"])({
        className: classString,
        style: style
      }, restProps), _react.Children.map(filteredChildren, function (child, index) {
        if (!child) {
          return null;
        }

        var childProps = (0, _objectSpread2["default"])({
          stepNumber: "".concat(index + 1),
          prefixCls: prefixCls,
          iconPrefix: iconPrefix,
          wrapperStyle: style,
          progressDot: progressDot
        }, child.props);

        if (!flexSupported && direction !== 'vertical' && index !== lastIndex) {
          childProps.itemWidth = "".concat(100 / lastIndex, "%");
          childProps.adjustMarginRight = -Math.round(lastStepOffsetWidth / lastIndex + 1);
        } // fix tail color


        if (status === 'error' && index === current - 1) {
          childProps.className = "".concat(prefixCls, "-next-error");
        }

        if (!child.props.status) {
          if (index === current) {
            childProps.status = status;
          } else if (index < current) {
            childProps.status = 'finish';
          } else {
            childProps.status = 'wait';
          }
        }

        return (0, _react.cloneElement)(child, childProps);
      }));
    }
  }]);
  return Steps;
}(_react.Component);

exports["default"] = Steps;
(0, _defineProperty2["default"])(Steps, "propTypes", {
  prefixCls: _propTypes["default"].string,
  className: _propTypes["default"].string,
  iconPrefix: _propTypes["default"].string,
  direction: _propTypes["default"].string,
  labelPlacement: _propTypes["default"].string,
  children: _propTypes["default"].any,
  status: _propTypes["default"].string,
  size: _propTypes["default"].string,
  progressDot: _propTypes["default"].oneOfType([_propTypes["default"].bool, _propTypes["default"].func]),
  style: _propTypes["default"].object,
  current: _propTypes["default"].number
});
(0, _defineProperty2["default"])(Steps, "defaultProps", {
  prefixCls: 'rc-steps',
  iconPrefix: 'rc',
  direction: 'horizontal',
  labelPlacement: 'horizontal',
  current: 0,
  status: 'process',
  size: '',
  progressDot: false
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlN0ZXBzLmpzeCJdLCJuYW1lcyI6WyJTdGVwcyIsInByb3BzIiwiZG9tTm9kZSIsImNoaWxkcmVuIiwibGVuZ3RoIiwiY2FsY1RpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwibGFzdFN0ZXBPZmZzZXRXaWR0aCIsImxhc3RDaGlsZCIsIm9mZnNldFdpZHRoIiwic3RhdGUiLCJNYXRoIiwiYWJzIiwic2V0U3RhdGUiLCJmbGV4U3VwcG9ydGVkIiwiY2FsY1N0ZXBPZmZzZXRXaWR0aCIsImNhbmNlbCIsInByZWZpeENscyIsInN0eWxlIiwiY2xhc3NOYW1lIiwiZGlyZWN0aW9uIiwibGFiZWxQbGFjZW1lbnQiLCJpY29uUHJlZml4Iiwic3RhdHVzIiwic2l6ZSIsImN1cnJlbnQiLCJwcm9ncmVzc0RvdCIsInJlc3RQcm9wcyIsImZpbHRlcmVkQ2hpbGRyZW4iLCJDaGlsZHJlbiIsInRvQXJyYXkiLCJmaWx0ZXIiLCJjIiwibGFzdEluZGV4IiwiYWRqdXN0ZWRsYWJlbFBsYWNlbWVudCIsImNsYXNzU3RyaW5nIiwibWFwIiwiY2hpbGQiLCJpbmRleCIsImNoaWxkUHJvcHMiLCJzdGVwTnVtYmVyIiwid3JhcHBlclN0eWxlIiwiaXRlbVdpZHRoIiwiYWRqdXN0TWFyZ2luUmlnaHQiLCJyb3VuZCIsIkNvbXBvbmVudCIsIlByb3BUeXBlcyIsInN0cmluZyIsImFueSIsIm9uZU9mVHlwZSIsImJvb2wiLCJmdW5jIiwib2JqZWN0IiwibnVtYmVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFFcUJBLEs7Ozs7Ozs7QUF5Qm5CLGlCQUFZQyxLQUFaLEVBQW1CO0FBQUE7O0FBQUE7QUFDakIsOEJBQU1BLEtBQU47QUFEaUIsNEdBK0JHLFlBQU07QUFDMUIsVUFBSSw2QkFBSixFQUF1QjtBQUNy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LEVBQUFBLFVBQVUsRUFBRSxJQUZRO0FBR3BCRixFQUFBQSxTQUFTLEVBQUUsWUFIUztBQUlwQkMsRUFBQUEsY0FBYyxFQUFFLFlBSkk7QUFLcEJJLEVBQUFBLE9BQU8sRUFBRSxDQUxXO0FBTXBCRixFQUFBQSxNQUFNLEVBQUUsU0FOWTtBQU9wQkMsRUFBQUEsSUFBSSxFQUFFLEVBUGM7QUFRcEJFLEVBQUFBLFdBQVcsRUFBRTtBQVJPLEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQgcmVhY3Qvbm8tZGlkLW1vdW50LXNldC1zdGF0ZTogMCAqL1xuaW1wb3J0IFJlYWN0LCB7IENoaWxkcmVuLCBjbG9uZUVsZW1lbnQsIENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBmaW5kRE9NTm9kZSB9IGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBkZWJvdW5jZSBmcm9tICdsb2Rhc2gvZGVib3VuY2UnO1xuaW1wb3J0IHsgaXNGbGV4U3VwcG9ydGVkIH0gZnJvbSAnLi91dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0ZXBzIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBwcmVmaXhDbHM6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGljb25QcmVmaXg6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZGlyZWN0aW9uOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGxhYmVsUGxhY2VtZW50OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMuYW55LFxuICAgIHN0YXR1czogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBzaXplOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHByb2dyZXNzRG90OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYm9vbCwgUHJvcFR5cGVzLmZ1bmNdKSxcbiAgICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBjdXJyZW50OiBQcm9wVHlwZXMubnVtYmVyLFxuICB9O1xuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIHByZWZpeENsczogJ3JjLXN0ZXBzJyxcbiAgICBpY29uUHJlZml4OiAncmMnLFxuICAgIGRpcmVjdGlvbjogJ2hvcml6b250YWwnLFxuICAgIGxhYmVsUGxhY2VtZW50OiAnaG9yaXpvbnRhbCcsXG4gICAgY3VycmVudDogMCxcbiAgICBzdGF0dXM6ICdwcm9jZXNzJyxcbiAgICBzaXplOiAnJyxcbiAgICBwcm9ncmVzc0RvdDogZmFsc2UsXG4gIH07XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGZsZXhTdXBwb3J0ZWQ6IHRydWUsXG4gICAgICBsYXN0U3RlcE9mZnNldFdpZHRoOiAwLFxuICAgIH07XG4gICAgdGhpcy5jYWxjU3RlcE9mZnNldFdpZHRoID0gZGVib3VuY2UodGhpcy5jYWxjU3RlcE9mZnNldFdpZHRoLCAxNTApO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5jYWxjU3RlcE9mZnNldFdpZHRoKCk7XG4gICAgaWYgKCFpc0ZsZXhTdXBwb3J0ZWQoKSkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGZsZXhTdXBwb3J0ZWQ6IGZhbHNlLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIHRoaXMuY2FsY1N0ZXBPZmZzZXRXaWR0aCgpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMuY2FsY1RpbWVvdXQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLmNhbGNUaW1lb3V0KTtcbiAgICB9XG4gICAgaWYgKHRoaXMuY2FsY1N0ZXBPZmZzZXRXaWR0aCAmJiB0aGlzLmNhbGNTdGVwT2Zmc2V0V2lkdGguY2FuY2VsKSB7XG4gICAgICB0aGlzLmNhbGNTdGVwT2Zmc2V0V2lkdGguY2FuY2VsKCk7XG4gICAgfVxuICB9XG5cbiAgY2FsY1N0ZXBPZmZzZXRXaWR0aCA9ICgpID0+IHtcbiAgICBpZiAoaXNGbGV4U3VwcG9ydGVkKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gSnVzdCBmb3IgSUU5XG4gICAgY29uc3QgZG9tTm9kZSA9IGZpbmRET01Ob2RlKHRoaXMpO1xuICAgIGlmIChkb21Ob2RlLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmICh0aGlzLmNhbGNUaW1lb3V0KSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmNhbGNUaW1lb3V0KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuY2FsY1RpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgLy8gKzEgZm9yIGZpdCBlZGdlIGJ1ZyBvZiBkaWdpdCB3aWR0aCwgbGlrZSAzNS40cHhcbiAgICAgICAgY29uc3QgbGFzdFN0ZXBPZmZzZXRXaWR0aCA9IChkb21Ob2RlLmxhc3RDaGlsZC5vZmZzZXRXaWR0aCB8fCAwKSArIDE7XG4gICAgICAgIC8vIFJlZHVjZSBzaGFrZSBidWdcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHRoaXMuc3RhdGUubGFzdFN0ZXBPZmZzZXRXaWR0aCA9PT0gbGFzdFN0ZXBPZmZzZXRXaWR0aCB8fFxuICAgICAgICAgIE1hdGguYWJzKHRoaXMuc3RhdGUubGFzdFN0ZXBPZmZzZXRXaWR0aCAtIGxhc3RTdGVwT2Zmc2V0V2lkdGgpIDw9IDNcbiAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBsYXN0U3RlcE9mZnNldFdpZHRoIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBwcmVmaXhDbHMsXG4gICAgICBzdHlsZSA9IHt9LFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBkaXJlY3Rpb24sXG4gICAgICBsYWJlbFBsYWNlbWVudCxcbiAgICAgIGljb25QcmVmaXgsXG4gICAgICBzdGF0dXMsXG4gICAgICBzaXplLFxuICAgICAgY3VycmVudCxcbiAgICAgIHByb2dyZXNzRG90LFxuICAgICAgLi4ucmVzdFByb3BzXG4gICAgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBsYXN0U3RlcE9mZnNldFdpZHRoLCBmbGV4U3VwcG9ydGVkIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IGZpbHRlcmVkQ2hpbGRyZW4gPSBDaGlsZHJlbi50b0FycmF5KGNoaWxkcmVuKS5maWx0ZXIoYyA9PiAhIWMpO1xuICAgIGNvbnN0IGxhc3RJbmRleCA9IGZpbHRlcmVkQ2hpbGRyZW4ubGVuZ3RoIC0gMTtcbiAgICBjb25zdCBhZGp1c3RlZGxhYmVsUGxhY2VtZW50ID0gISFwcm9ncmVzc0RvdCA/ICd2ZXJ0aWNhbCcgOiBsYWJlbFBsYWNlbWVudDtcbiAgICBjb25zdCBjbGFzc1N0cmluZyA9IGNsYXNzTmFtZXMocHJlZml4Q2xzLCBgJHtwcmVmaXhDbHN9LSR7ZGlyZWN0aW9ufWAsIGNsYXNzTmFtZSwge1xuICAgICAgW2Ake3ByZWZpeENsc30tJHtzaXplfWBdOiBzaXplLFxuICAgICAgW2Ake3ByZWZpeENsc30tbGFiZWwtJHthZGp1c3RlZGxhYmVsUGxhY2VtZW50fWBdOiBkaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyxcbiAgICAgIFtgJHtwcmVmaXhDbHN9LWRvdGBdOiAhIXByb2dyZXNzRG90LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc1N0cmluZ30gc3R5bGU9e3N0eWxlfSB7Li4ucmVzdFByb3BzfT5cbiAgICAgICAge0NoaWxkcmVuLm1hcChmaWx0ZXJlZENoaWxkcmVuLCAoY2hpbGQsIGluZGV4KSA9PiB7XG4gICAgICAgICAgaWYgKCFjaGlsZCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IGNoaWxkUHJvcHMgPSB7XG4gICAgICAgICAgICBzdGVwTnVtYmVyOiBgJHtpbmRleCArIDF9YCxcbiAgICAgICAgICAgIHByZWZpeENscyxcbiAgICAgICAgICAgIGljb25QcmVmaXgsXG4gICAgICAgICAgICB3cmFwcGVyU3R5bGU6IHN0eWxlLFxuICAgICAgICAgICAgcHJvZ3Jlc3NEb3QsXG4gICAgICAgICAgICAuLi5jaGlsZC5wcm9wcyxcbiAgICAgICAgICB9O1xuICAgICAgICAgIGlmICghZmxleFN1cHBvcnRlZCAmJiBkaXJlY3Rpb24gIT09ICd2ZXJ0aWNhbCcgJiYgaW5kZXggIT09IGxhc3RJbmRleCkge1xuICAgICAgICAgICAgY2hpbGRQcm9wcy5pdGVtV2lkdGggPSBgJHsxMDAgLyBsYXN0SW5kZXh9JWA7XG4gICAgICAgICAgICBjaGlsZFByb3BzLmFkanVzdE1hcmdpblJpZ2h0ID0gLU1hdGgucm91bmQobGFzdFN0ZXBPZmZzZXRXaWR0aCAvIGxhc3RJbmRleCArIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBmaXggdGFpbCBjb2xvclxuICAgICAgICAgIGlmIChzdGF0dXMgPT09ICdlcnJvcicgJiYgaW5kZXggPT09IGN1cnJlbnQgLSAxKSB7XG4gICAgICAgICAgICBjaGlsZFByb3BzLmNsYXNzTmFtZSA9IGAke3ByZWZpeENsc30tbmV4dC1lcnJvcmA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghY2hpbGQucHJvcHMuc3RhdHVzKSB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IGN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgY2hpbGRQcm9wcy5zdGF0dXMgPSBzdGF0dXM7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGluZGV4IDwgY3VycmVudCkge1xuICAgICAgICAgICAgICBjaGlsZFByb3BzLnN0YXR1cyA9ICdmaW5pc2gnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY2hpbGRQcm9wcy5zdGF0dXMgPSAnd2FpdCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBjbG9uZUVsZW1lbnQoY2hpbGQsIGNoaWxkUHJvcHMpO1xuICAgICAgICB9KX1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cbiJdfQ==