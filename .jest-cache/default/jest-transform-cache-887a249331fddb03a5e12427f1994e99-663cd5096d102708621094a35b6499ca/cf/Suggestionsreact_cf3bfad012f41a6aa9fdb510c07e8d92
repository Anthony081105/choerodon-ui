92c97a5911054bad0de3ef21fd7ea1cb
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _objectSpread3 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _DraftOffsetKey = require("draft-js/lib/DraftOffsetKey");

var _classnames = _interopRequireDefault(require("classnames"));

var _domScrollIntoView = _interopRequireDefault(require("dom-scroll-into-view"));

var _animate = _interopRequireDefault(require("../../../animate"));

var _Nav = _interopRequireDefault(require("./Nav.react"));

var _SuggestionWrapper = _interopRequireDefault(require("./SuggestionWrapper.react"));

var _insertMention = _interopRequireDefault(require("../utils/insertMention"));

var _clearMention = _interopRequireDefault(require("../utils/clearMention"));

var _getOffset = _interopRequireDefault(require("../utils/getOffset"));

var _getMentions = _interopRequireDefault(require("../utils/getMentions"));

var _getSearchWord2 = _interopRequireDefault(require("../utils/getSearchWord"));

var isNotFalse = function isNotFalse(i) {
  return i !== false;
};

var Suggestions =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(Suggestions, _Component);

  function Suggestions(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, Suggestions);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(Suggestions).call(this, props));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onEditorStateChange", function (editorState) {
      var offset = _this.props.store.getOffset();

      if (offset.size === 0) {
        _this.closeDropDown();

        return editorState;
      }

      var selection = editorState.getSelection(); // 修复: 焦点移出再移入时, dropdown 会闪动一下
      // 原因: https://github.com/facebook/draft-js/blob/67c5e69499e3b0c149ce83b004872afdf4180463/src/component/handlers/edit/editOnFocus.js#L33
      // 此处强制 update 了一下,因此 onEditorStateChange 会 call 两次

      if (!_this.props.callbacks.getEditorState().getSelection().getHasFocus() && selection.getHasFocus()) {
        return editorState;
      }

      var _getSearchWord = (0, _getSearchWord2["default"])(editorState, selection),
          word = _getSearchWord.word;

      if (!word) {
        _this.closeDropDown();

        return editorState;
      }

      var selectionInsideMention = offset.map(function (_ref) {
        var offsetKey = _ref.offsetKey;

        var _decode = (0, _DraftOffsetKey.decode)(offsetKey),
            blockKey = _decode.blockKey,
            decoratorKey = _decode.decoratorKey,
            leafKey = _decode.leafKey;

        if (blockKey !== selection.anchorKey) {
          return false;
        }

        var leaf = editorState.getBlockTree(blockKey).getIn([decoratorKey, 'leaves', leafKey]);

        if (!leaf) {
          return false;
        }

        var startKey = leaf.get('start');
        var endKey = leaf.get('end'); // 处理只有一个 `@` 符号时的情况

        if (!word) {
          return false;
        }

        if (startKey === endKey - 1) {
          return selection.anchorOffset >= startKey + 1 && selection.anchorOffset <= endKey ? offsetKey : false;
        }

        return selection.anchorOffset > startKey + 1 && selection.anchorOffset <= endKey ? offsetKey : false;
      });
      var selectionInText = selectionInsideMention.some(isNotFalse);
      _this.activeOffsetKey = selectionInsideMention.find(isNotFalse);

      var trigger = _this.props.store.getTrigger(_this.activeOffsetKey);

      if (!selectionInText || !selection.getHasFocus()) {
        _this.closeDropDown();

        return editorState;
      }

      var searchValue = word.substring(trigger.length, word.length);

      if (_this.lastSearchValue !== searchValue || _this.lastTrigger !== trigger) {
        _this.lastSearchValue = searchValue;
        _this.lastTrigger = trigger;

        _this.props.onSearchChange(searchValue, trigger);
      }

      if (!_this.state.active) {
        // 暂时没有更优雅的方法
        if (!trigger || word.indexOf(trigger) !== -1) {
          _this.openDropDown();
        }
      }

      return editorState;
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onUpArrow", function (ev) {
      ev.preventDefault();

      if (_this.props.suggestions.length > 0) {
        var newIndex = _this.state.focusedIndex - 1;

        _this.setState({
          focusedIndex: Math.max(newIndex, 0)
        });
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onBlur", function (ev) {
      ev.preventDefault();

      _this.closeDropDown();
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onDownArrow", function (ev) {
      ev.preventDefault();
      var newIndex = _this.state.focusedIndex + 1;

      _this.setState({
        focusedIndex: newIndex >= _this.props.suggestions.length ? 0 : newIndex
      });
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "getContainer", function () {
      var popupContainer = document.createElement('div');
      var mountNode;

      if (_this.props.getSuggestionContainer) {
        mountNode = _this.props.getSuggestionContainer();
        popupContainer.style.position = 'relative';
      } else {
        mountNode = document.body;
      }

      mountNode.appendChild(popupContainer);
      return popupContainer;
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "handleKeyBinding", function (command) {
      return command === 'split-block';
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "handleReturn", function (ev) {
      ev.preventDefault();
      var selectedSuggestion = _this.props.suggestions[_this.state.focusedIndex];

      if (selectedSuggestion) {
        if ((0, _react.isValidElement)(selectedSuggestion)) {
          _this.onMentionSelect(selectedSuggestion.props.value, selectedSuggestion.props.data);
        } else {
          _this.onMentionSelect(selectedSuggestion);
        }

        _this.lastSearchValue = null;
        _this.lastTrigger = null;
        return true;
      }

      return false;
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "renderReady", function () {
      var container = _this.dropdownContainer;

      if (!container) {
        return;
      }

      var active = _this.state.active;

      var _assertThisInitialize = (0, _assertThisInitialized2["default"])(_this),
          activeOffsetKey = _assertThisInitialize.activeOffsetKey;

      var offset = _this.props.store.getOffset();

      var dropDownPosition = offset.get(activeOffsetKey);

      if (active && dropDownPosition) {
        var placement = _this.props.placement;

        var dropDownStyle = _this.getPositionStyle(true, dropDownPosition.position()); // Check if the above space is crowded


        var isTopCrowded = parseFloat(dropDownStyle.top) - window.scrollY - container.offsetHeight < 0; // Check if the under space is crowded

        var isBottomCrowded = (window.innerHeight || document.documentElement.clientHeight) - (parseFloat(dropDownStyle.top) - window.scrollY) - container.offsetHeight < 0;

        if (placement === 'top' && !isTopCrowded) {
          // The above space isn't crowded
          dropDownStyle.top = "".concat(parseFloat(dropDownStyle.top) - container.offsetHeight || 0, "px");
        }

        if (placement === 'bottom' && isBottomCrowded && !isTopCrowded) {
          // The above space isn't crowded and the under space is crowded.
          dropDownStyle.top = "".concat(parseFloat(dropDownStyle.top) - container.offsetHeight || 0, "px");
        }

        Object.keys(dropDownStyle).forEach(function (key) {
          container.style[key] = dropDownStyle[key];
        });
      }

      if (!_this.focusItem) {
        return;
      }

      (0, _domScrollIntoView["default"])(_reactDom["default"].findDOMNode(_this.focusItem), container, {
        onlyScrollIfNeeded: true
      });
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "getNavigations", function () {
      var _this$props = _this.props,
          prefixCls = _this$props.prefixCls,
          suggestions = _this$props.suggestions;
      var focusedIndex = _this.state.focusedIndex;
      return suggestions.length ? _react.Children.map(suggestions, function (element, index) {
        var focusItem = index === focusedIndex;
        var ref = focusItem ? function (node) {
          _this.focusItem = node;
        } : null;
        var mentionClass = (0, _classnames["default"])("".concat(prefixCls, "-dropdown-item"), {
          focus: focusItem
        });

        if ((0, _react.isValidElement)(element)) {
          return (0, _react.cloneElement)(element, {
            className: mentionClass,
            onMouseDown: function onMouseDown() {
              return _this.onMentionSelect(element.props.value, element.props.data);
            },
            ref: ref
          });
        }

        return _react["default"].createElement(_Nav["default"], {
          ref: ref,
          className: mentionClass,
          onMouseDown: function onMouseDown() {
            return _this.onMentionSelect(element);
          }
        }, element);
      }, (0, _assertThisInitialized2["default"])(_this)) : _react["default"].createElement("div", {
        className: "".concat(prefixCls, "-dropdown-notfound ").concat(prefixCls, "-dropdown-item")
      }, _this.props.notFoundContent);
    });
    _this.state = {
      isActive: false,
      focusedIndex: 0,
      container: false
    };
    return _this;
  }

  (0, _createClass2["default"])(Suggestions, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.props.callbacks.onChange = this.onEditorStateChange;
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.suggestions.length !== this.props.suggestions.length) {
        this.setState({
          focusedIndex: 0
        });
      }
    }
  }, {
    key: "onMentionSelect",
    value: function onMentionSelect(mention, data) {
      var editorState = this.props.callbacks.getEditorState();
      var _this$props2 = this.props,
          store = _this$props2.store,
          onSelect = _this$props2.onSelect;
      var trigger = store.getTrigger(this.activeOffsetKey);

      if (onSelect) {
        onSelect(mention, data || mention);
      }

      if (this.props.noRedup) {
        var mentions = (0, _getMentions["default"])(editorState.getCurrentContent(), trigger);

        if (mentions.indexOf("".concat(trigger).concat(mention)) !== -1) {
          // eslint-disable-next-line
          console.warn('you have specified `noRedup` props but have duplicated mentions.');
          this.closeDropDown();
          this.props.callbacks.setEditorState((0, _clearMention["default"])(editorState));
          return;
        }
      }

      this.props.callbacks.setEditorState((0, _insertMention["default"])(editorState, "".concat(trigger).concat(mention), data, this.props.mode), true);
      this.closeDropDown();
    }
  }, {
    key: "getPositionStyle",
    value: function getPositionStyle(isActive, position) {
      if (this.props.getSuggestionStyle) {
        return this.props.getSuggestionStyle(isActive, position);
      }

      var container = this.props.getSuggestionContainer ? this.state.container : document.body;
      var offset = (0, _getOffset["default"])(container);
      return position ? (0, _objectSpread3["default"])({
        position: 'absolute',
        left: "".concat(position.left - offset.left, "px"),
        top: "".concat(position.top - offset.top, "px")
      }, this.props.style) : {};
    }
  }, {
    key: "openDropDown",
    value: function openDropDown() {
      this.props.callbacks.onUpArrow = this.onUpArrow;
      this.props.callbacks.handleReturn = this.handleReturn;
      this.props.callbacks.handleKeyBinding = this.handleKeyBinding;
      this.props.callbacks.onDownArrow = this.onDownArrow;
      this.props.callbacks.onBlur = this.onBlur;
      this.setState({
        active: true,
        container: this.state.container || this.getContainer()
      });
    }
  }, {
    key: "closeDropDown",
    value: function closeDropDown() {
      this.props.callbacks.onUpArrow = null;
      this.props.callbacks.handleReturn = null;
      this.props.callbacks.handleKeyBinding = null;
      this.props.callbacks.onDownArrow = null;
      this.props.callbacks.onBlur = null;
      this.setState({
        active: false
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _objectSpread2,
          _this2 = this;

      var _this$props3 = this.props,
          prefixCls = _this$props3.prefixCls,
          className = _this$props3.className,
          placement = _this$props3.placement;
      var _this$state = this.state,
          container = _this$state.container,
          active = _this$state.active;
      var cls = (0, _classnames["default"])((0, _objectSpread3["default"])((_objectSpread2 = {}, (0, _defineProperty2["default"])(_objectSpread2, "".concat(prefixCls, "-dropdown"), true), (0, _defineProperty2["default"])(_objectSpread2, "".concat(prefixCls, "-dropdown-placement-").concat(placement), true), _objectSpread2), className));
      var transitionName = placement === 'top' ? 'slide-down' : 'slide-up';
      var navigations = this.getNavigations();
      return container ? _react["default"].createElement(_SuggestionWrapper["default"], {
        renderReady: this.renderReady,
        container: container
      }, _react["default"].createElement(_animate["default"], {
        transitionName: transitionName
      }, active ? _react["default"].createElement("div", {
        className: cls,
        ref: function ref(node) {
          _this2.dropdownContainer = node;
        }
      }, navigations) : null)) : null;
    }
  }]);
  return Suggestions;
}(_react.Component);

exports["default"] = Suggestions;
(0, _defineProperty2["default"])(Suggestions, "propTypes", {
  callbacks: _propTypes["default"].object,
  suggestions: _propTypes["default"].array,
  store: _propTypes["default"].object,
  onSearchChange: _propTypes["default"].func,
  prefixCls: _propTypes["default"].string,
  mode: _propTypes["default"].string,
  style: _propTypes["default"].object,
  onSelect: _propTypes["default"].func,
  getSuggestionContainer: _propTypes["default"].func,
  notFoundContent: _propTypes["default"].any,
  getSuggestionStyle: _propTypes["default"].func,
  className: _propTypes["default"].string,
  noRedup: _propTypes["default"].bool,
  placement: _propTypes["default"].string
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlN1Z2dlc3Rpb25zLnJlYWN0LmpzeCJdLCJuYW1lcyI6WyJpc05vdEZhbHNlIiwiaSIsIlN1Z2dlc3Rpb25zIiwicHJvcHMiLCJlZGl0b3JTdGF0ZSIsIm9mZnNldCIsInN0b3JlIiwiZ2V0T2Zmc2V0Iiwic2l6ZSIsImNsb3NlRHJvcERvd24iLCJzZWxlY3Rpb24iLCJnZXRTZWxlY3Rpb24iLCJjYWxsYmFja3MiLCJnZXRFZGl0b3JTdGF0ZSIsImdldEhhc0ZvY3VzIiwid29yZCIsInNlbGVjdGlvbkluc2lkZU1lbnRpb24iLCJtYXAiLCJvZmZzZXRLZXkiLCJibG9ja0tleSIsImRlY29yYXRvcktleSIsImxlYWZLZXkiLCJhbmNob3JLZXkiLCJsZWFmIiwiZ2V0QmxvY2tUcmVlIiwiZ2V0SW4iLCJzdGFydEtleSIsImdldCIsImVuZEtleSIsImFuY2hvck9mZnNldCIsInNlbGVjdGlvbkluVGV4dCIsInNvbWUiLCJhY3RpdmVPZmZzZXRLZXkiLCJmaW5kIiwidHJpZ2dlciIsImdldFRyaWdnZXIiLCJzZWFyY2hWYWx1ZSIsInN1YnN0cmluZyIsImxlbmd0aCIsImxhc3RTZWFyY2hWYWx1ZSIsImxhc3RUcmlnZ2VyIiwib25TZWFyY2hDaGFuZ2UiLCJzdGF0ZSIsImFjdGl2ZSIsImluZGV4T2YiLCJvcGVuRHJvcERvd24iLCJldiIsInByZXZlbnREZWZhdWx0Iiwic3VnZ2VzdGlvbnMiLCJuZXdJbmRleCIsImZvY3VzZWRJbmRleCIsInNldFN0YXRlIiwiTWF0aCIsIm1heCIsInBvcHVwQ29udGFpbmVyIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwibW91bnROb2RlIiwiZ2V0U3VnZ2VzdGlvbkNvbnRhaW5lciIsInN0eWxlIiwicG9zaXRpb24iLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJjb21tYW5kIiwic2VsZWN0ZWRTdWdnZXN0aW9uIiwib25NZW50aW9uU2VsZWN0IiwidmFsdWUiLCJkYXRhIiwiY29udGFpbmVyIiwiZHJvcGRvd25Db250YWluZXIiLCJkcm9wRG93blBvc2l0aW9uIiwicGxhY2VtZW50IiwiZHJvcERvd25TdHlsZSIsImdldFBvc2l0aW9uU3R5bGUiLCJpc1RvcENyb3dkZWQiLCJwYXJzZUZsb2F0IiwidG9wIiwid2luZG93Iiwic2Nyb2xsWSIsIm9mZnNldEhlaWdodCIsImlzQm90dG9tQ3Jvd2RlZCIsImlubmVySGVpZ2h0IiwiZG9jdW1lbnRFbGVtZW50IiwiY2xpZW50SGVpZ2h0IiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJmb2N1c0l0ZW0iLCJSZWFjdERPTSIsImZpbmRET01Ob2RlIiwib25seVNjcm9sbElmTmVlZGVkIiwicHJlZml4Q2xzIiwiQ2hpbGRyZW4iLCJlbGVtZW50IiwiaW5kZXgiLCJyZWYiLCJub2RlIiwibWVudGlvbkNsYXNzIiwiZm9jdXMiLCJjbGFzc05hbWUiLCJvbk1vdXNlRG93biIsIm5vdEZvdW5kQ29udGVudCIsImlzQWN0aXZlIiwib25DaGFuZ2UiLCJvbkVkaXRvclN0YXRlQ2hhbmdlIiwibmV4dFByb3BzIiwibWVudGlvbiIsIm9uU2VsZWN0Iiwibm9SZWR1cCIsIm1lbnRpb25zIiwiZ2V0Q3VycmVudENvbnRlbnQiLCJjb25zb2xlIiwid2FybiIsInNldEVkaXRvclN0YXRlIiwibW9kZSIsImdldFN1Z2dlc3Rpb25TdHlsZSIsImxlZnQiLCJvblVwQXJyb3ciLCJoYW5kbGVSZXR1cm4iLCJoYW5kbGVLZXlCaW5kaW5nIiwib25Eb3duQXJyb3ciLCJvbkJsdXIiLCJnZXRDb250YWluZXIiLCJjbHMiLCJ0cmFuc2l0aW9uTmFtZSIsIm5hdmlnYXRpb25zIiwiZ2V0TmF2aWdhdGlvbnMiLCJyZW5kZXJSZWFkeSIsIkNvbXBvbmVudCIsIlByb3BUeXBlcyIsIm9iamVjdCIsImFycmF5IiwiZnVuYyIsInN0cmluZyIsImFueSIsImJvb2wiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztB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QVVJLE1BTkM7QUFPakIzRSxFQUFBQSxLQUFLLEVBQUV1RSxzQkFBVUMsTUFQQTtBQVFqQnZCLEVBQUFBLFFBQVEsRUFBRXNCLHNCQUFVRyxJQVJIO0FBU2pCM0UsRUFBQUEsc0JBQXNCLEVBQUV3RSxzQkFBVUcsSUFUakI7QUFVakIvQixFQUFBQSxlQUFlLEVBQUU0QixzQkFBVUssR0FWVjtBQVdqQm5CLEVBQUFBLGtCQUFrQixFQUFFYyxzQkFBVUcsSUFYYjtBQVlqQmpDLEVBQUFBLFNBQVMsRUFBRThCLHNCQUFVSSxNQVpKO0FBYWpCekIsRUFBQUEsT0FBTyxFQUFFcUIsc0JBQVVNLElBYkY7QUFjakJqRSxFQUFBQSxTQUFTLEVBQUUyRCxzQkFBVUk7QUFkSixDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IENoaWxkcmVuLCBjbG9uZUVsZW1lbnQsIENvbXBvbmVudCwgaXNWYWxpZEVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBkZWNvZGUgfSBmcm9tICdkcmFmdC1qcy9saWIvRHJhZnRPZmZzZXRLZXknO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHNjcm9sbEludG9WaWV3IGZyb20gJ2RvbS1zY3JvbGwtaW50by12aWV3JztcbmltcG9ydCBBbmltYXRlIGZyb20gJy4uLy4uLy4uL2FuaW1hdGUnO1xuaW1wb3J0IE5hdiBmcm9tICcuL05hdi5yZWFjdCc7XG5pbXBvcnQgU3VnZ2V0aW9uV3JhcHBlciBmcm9tICcuL1N1Z2dlc3Rpb25XcmFwcGVyLnJlYWN0JztcbmltcG9ydCBpbnNlcnRNZW50aW9uIGZyb20gJy4uL3V0aWxzL2luc2VydE1lbnRpb24nO1xuaW1wb3J0IGNsZWFyTWVudGlvbiBmcm9tICcuLi91dGlscy9jbGVhck1lbnRpb24nO1xuaW1wb3J0IGdldE9mZnNldCBmcm9tICcuLi91dGlscy9nZXRPZmZzZXQnO1xuaW1wb3J0IGdldE1lbnRpb25zIGZyb20gJy4uL3V0aWxzL2dldE1lbnRpb25zJztcbmltcG9ydCBnZXRTZWFyY2hXb3JkIGZyb20gJy4uL3V0aWxzL2dldFNlYXJjaFdvcmQnO1xuXG5jb25zdCBpc05vdEZhbHNlID0gaSA9PiBpICE9PSBmYWxzZTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3VnZ2VzdGlvbnMgZXh0ZW5kcyBDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGNhbGxiYWNrczogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBzdWdnZXN0aW9uczogUHJvcFR5cGVzLmFycmF5LFxuICAgIHN0b3JlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIG9uU2VhcmNoQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBwcmVmaXhDbHM6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgbW9kZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBvblNlbGVjdDogUHJvcFR5cGVzLmZ1bmMsXG4gICAgZ2V0U3VnZ2VzdGlvbkNvbnRhaW5lcjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgbm90Rm91bmRDb250ZW50OiBQcm9wVHlwZXMuYW55LFxuICAgIGdldFN1Z2dlc3Rpb25TdHlsZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG5vUmVkdXA6IFByb3BUeXBlcy5ib29sLFxuICAgIHBsYWNlbWVudDogUHJvcFR5cGVzLnN0cmluZyxcbiAgfTtcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgaXNBY3RpdmU6IGZhbHNlLFxuICAgICAgZm9jdXNlZEluZGV4OiAwLFxuICAgICAgY29udGFpbmVyOiBmYWxzZSxcbiAgICB9O1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5wcm9wcy5jYWxsYmFja3Mub25DaGFuZ2UgPSB0aGlzLm9uRWRpdG9yU3RhdGVDaGFuZ2U7XG4gIH1cblxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIGlmIChuZXh0UHJvcHMuc3VnZ2VzdGlvbnMubGVuZ3RoICE9PSB0aGlzLnByb3BzLnN1Z2dlc3Rpb25zLmxlbmd0aCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGZvY3VzZWRJbmRleDogMCxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIG9uRWRpdG9yU3RhdGVDaGFuZ2UgPSAoZWRpdG9yU3RhdGUpID0+IHtcbiAgICBjb25zdCBvZmZzZXQgPSB0aGlzLnByb3BzLnN0b3JlLmdldE9mZnNldCgpO1xuICAgIGlmIChvZmZzZXQuc2l6ZSA9PT0gMCkge1xuICAgICAgdGhpcy5jbG9zZURyb3BEb3duKCk7XG4gICAgICByZXR1cm4gZWRpdG9yU3RhdGU7XG4gICAgfVxuICAgIGNvbnN0IHNlbGVjdGlvbiA9IGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpO1xuXG4gICAgLy8g5L+u5aSNOiDnhKbngrnnp7vlh7rlho3np7vlhaXml7YsIGRyb3Bkb3duIOS8mumXquWKqOS4gOS4i1xuICAgIC8vIOWOn+WboDogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2RyYWZ0LWpzL2Jsb2IvNjdjNWU2OTQ5OWUzYjBjMTQ5Y2U4M2IwMDQ4NzJhZmRmNDE4MDQ2My9zcmMvY29tcG9uZW50L2hhbmRsZXJzL2VkaXQvZWRpdE9uRm9jdXMuanMjTDMzXG4gICAgLy8g5q2k5aSE5by65Yi2IHVwZGF0ZSDkuobkuIDkuIss5Zug5q2kIG9uRWRpdG9yU3RhdGVDaGFuZ2Ug5LyaIGNhbGwg5Lik5qyhXG4gICAgaWYgKCF0aGlzLnByb3BzLmNhbGxiYWNrcy5nZXRFZGl0b3JTdGF0ZSgpLmdldFNlbGVjdGlvbigpLmdldEhhc0ZvY3VzKClcbiAgICAgICYmIHNlbGVjdGlvbi5nZXRIYXNGb2N1cygpKSB7XG4gICAgICByZXR1cm4gZWRpdG9yU3RhdGU7XG4gICAgfVxuXG4gICAgY29uc3QgeyB3b3JkIH0gPSBnZXRTZWFyY2hXb3JkKGVkaXRvclN0YXRlLCBzZWxlY3Rpb24pO1xuICAgIGlmICghd29yZCkge1xuICAgICAgdGhpcy5jbG9zZURyb3BEb3duKCk7XG4gICAgICByZXR1cm4gZWRpdG9yU3RhdGU7XG4gICAgfVxuICAgIGNvbnN0IHNlbGVjdGlvbkluc2lkZU1lbnRpb24gPSBvZmZzZXQubWFwKCh7IG9mZnNldEtleSB9KSA9PiB7XG4gICAgICBjb25zdCB7IGJsb2NrS2V5LCBkZWNvcmF0b3JLZXksIGxlYWZLZXkgfSA9IGRlY29kZShvZmZzZXRLZXkpO1xuICAgICAgaWYgKGJsb2NrS2V5ICE9PSBzZWxlY3Rpb24uYW5jaG9yS2V5KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGxlYWYgPSBlZGl0b3JTdGF0ZS5nZXRCbG9ja1RyZWUoYmxvY2tLZXkpLmdldEluKFtkZWNvcmF0b3JLZXksICdsZWF2ZXMnLCBsZWFmS2V5XSk7XG4gICAgICBpZiAoIWxlYWYpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgY29uc3Qgc3RhcnRLZXkgPSBsZWFmLmdldCgnc3RhcnQnKTtcbiAgICAgIGNvbnN0IGVuZEtleSA9IGxlYWYuZ2V0KCdlbmQnKTtcbiAgICAgIC8vIOWkhOeQhuWPquacieS4gOS4qiBgQGAg56ym5Y+35pe255qE5oOF5Ya1XG4gICAgICBpZiAoIXdvcmQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXJ0S2V5ID09PSBlbmRLZXkgLSAxKSB7XG4gICAgICAgIHJldHVybiBzZWxlY3Rpb24uYW5jaG9yT2Zmc2V0ID49IHN0YXJ0S2V5ICsgMSAmJiBzZWxlY3Rpb24uYW5jaG9yT2Zmc2V0IDw9IGVuZEtleVxuICAgICAgICAgID8gb2Zmc2V0S2V5XG4gICAgICAgICAgOiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzZWxlY3Rpb24uYW5jaG9yT2Zmc2V0ID4gc3RhcnRLZXkgKyAxICYmIHNlbGVjdGlvbi5hbmNob3JPZmZzZXQgPD0gZW5kS2V5XG4gICAgICAgID8gb2Zmc2V0S2V5XG4gICAgICAgIDogZmFsc2U7XG4gICAgfSk7XG5cbiAgICBjb25zdCBzZWxlY3Rpb25JblRleHQgPSBzZWxlY3Rpb25JbnNpZGVNZW50aW9uLnNvbWUoaXNOb3RGYWxzZSk7XG4gICAgdGhpcy5hY3RpdmVPZmZzZXRLZXkgPSBzZWxlY3Rpb25JbnNpZGVNZW50aW9uLmZpbmQoaXNOb3RGYWxzZSk7XG4gICAgY29uc3QgdHJpZ2dlciA9IHRoaXMucHJvcHMuc3RvcmUuZ2V0VHJpZ2dlcih0aGlzLmFjdGl2ZU9mZnNldEtleSk7XG5cbiAgICBpZiAoIXNlbGVjdGlvbkluVGV4dCB8fCAhc2VsZWN0aW9uLmdldEhhc0ZvY3VzKCkpIHtcbiAgICAgIHRoaXMuY2xvc2VEcm9wRG93bigpO1xuICAgICAgcmV0dXJuIGVkaXRvclN0YXRlO1xuICAgIH1cbiAgICBjb25zdCBzZWFyY2hWYWx1ZSA9IHdvcmQuc3Vic3RyaW5nKHRyaWdnZXIubGVuZ3RoLCB3b3JkLmxlbmd0aCk7XG4gICAgaWYgKHRoaXMubGFzdFNlYXJjaFZhbHVlICE9PSBzZWFyY2hWYWx1ZSB8fCB0aGlzLmxhc3RUcmlnZ2VyICE9PSB0cmlnZ2VyKSB7XG4gICAgICB0aGlzLmxhc3RTZWFyY2hWYWx1ZSA9IHNlYXJjaFZhbHVlO1xuICAgICAgdGhpcy5sYXN0VHJpZ2dlciA9IHRyaWdnZXI7XG4gICAgICB0aGlzLnByb3BzLm9uU2VhcmNoQ2hhbmdlKHNlYXJjaFZhbHVlLCB0cmlnZ2VyKTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLnN0YXRlLmFjdGl2ZSkge1xuICAgICAgLy8g5pqC5pe25rKh5pyJ5pu05LyY6ZuF55qE5pa55rOVXG4gICAgICBpZiAoIXRyaWdnZXIgfHwgd29yZC5pbmRleE9mKHRyaWdnZXIpICE9PSAtMSkge1xuICAgICAgICB0aGlzLm9wZW5Ecm9wRG93bigpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZWRpdG9yU3RhdGU7XG4gIH07XG5cbiAgb25NZW50aW9uU2VsZWN0KG1lbnRpb24sIGRhdGEpIHtcbiAgICBjb25zdCBlZGl0b3JTdGF0ZSA9IHRoaXMucHJvcHMuY2FsbGJhY2tzLmdldEVkaXRvclN0YXRlKCk7XG4gICAgY29uc3QgeyBzdG9yZSwgb25TZWxlY3QgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgdHJpZ2dlciA9IHN0b3JlLmdldFRyaWdnZXIodGhpcy5hY3RpdmVPZmZzZXRLZXkpO1xuICAgIGlmIChvblNlbGVjdCkge1xuICAgICAgb25TZWxlY3QobWVudGlvbiwgZGF0YSB8fCBtZW50aW9uKTtcbiAgICB9XG4gICAgaWYgKHRoaXMucHJvcHMubm9SZWR1cCkge1xuICAgICAgY29uc3QgbWVudGlvbnMgPSBnZXRNZW50aW9ucyhlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpLCB0cmlnZ2VyKTtcbiAgICAgIGlmIChtZW50aW9ucy5pbmRleE9mKGAke3RyaWdnZXJ9JHttZW50aW9ufWApICE9PSAtMSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgY29uc29sZS53YXJuKCd5b3UgaGF2ZSBzcGVjaWZpZWQgYG5vUmVkdXBgIHByb3BzIGJ1dCBoYXZlIGR1cGxpY2F0ZWQgbWVudGlvbnMuJyk7XG4gICAgICAgIHRoaXMuY2xvc2VEcm9wRG93bigpO1xuICAgICAgICB0aGlzLnByb3BzLmNhbGxiYWNrcy5zZXRFZGl0b3JTdGF0ZShcbiAgICAgICAgICBjbGVhck1lbnRpb24oZWRpdG9yU3RhdGUpLFxuICAgICAgICApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMucHJvcHMuY2FsbGJhY2tzLnNldEVkaXRvclN0YXRlKFxuICAgICAgaW5zZXJ0TWVudGlvbihlZGl0b3JTdGF0ZSwgYCR7dHJpZ2dlcn0ke21lbnRpb259YCwgZGF0YSwgdGhpcy5wcm9wcy5tb2RlKVxuICAgICAgLCB0cnVlKTtcbiAgICB0aGlzLmNsb3NlRHJvcERvd24oKTtcbiAgfVxuXG4gIG9uVXBBcnJvdyA9IChldikgPT4ge1xuICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKHRoaXMucHJvcHMuc3VnZ2VzdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgbmV3SW5kZXggPSB0aGlzLnN0YXRlLmZvY3VzZWRJbmRleCAtIDE7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZm9jdXNlZEluZGV4OiBNYXRoLm1heChuZXdJbmRleCwgMCksXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG4gIG9uQmx1ciA9IChldikgPT4ge1xuICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgdGhpcy5jbG9zZURyb3BEb3duKCk7XG4gIH07XG4gIG9uRG93bkFycm93ID0gKGV2KSA9PiB7XG4gICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCBuZXdJbmRleCA9IHRoaXMuc3RhdGUuZm9jdXNlZEluZGV4ICsgMTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGZvY3VzZWRJbmRleDogbmV3SW5kZXggPj0gdGhpcy5wcm9wcy5zdWdnZXN0aW9ucy5sZW5ndGggPyAwIDogbmV3SW5kZXgsXG4gICAgfSk7XG4gIH07XG5cbiAgZ2V0UG9zaXRpb25TdHlsZShpc0FjdGl2ZSwgcG9zaXRpb24pIHtcbiAgICBpZiAodGhpcy5wcm9wcy5nZXRTdWdnZXN0aW9uU3R5bGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmdldFN1Z2dlc3Rpb25TdHlsZShpc0FjdGl2ZSwgcG9zaXRpb24pO1xuICAgIH1cbiAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLnByb3BzLmdldFN1Z2dlc3Rpb25Db250YWluZXIgPyB0aGlzLnN0YXRlLmNvbnRhaW5lciA6IGRvY3VtZW50LmJvZHk7XG4gICAgY29uc3Qgb2Zmc2V0ID0gZ2V0T2Zmc2V0KGNvbnRhaW5lcik7XG4gICAgcmV0dXJuIHBvc2l0aW9uID8ge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBsZWZ0OiBgJHtwb3NpdGlvbi5sZWZ0IC0gb2Zmc2V0LmxlZnR9cHhgLFxuICAgICAgdG9wOiBgJHtwb3NpdGlvbi50b3AgLSBvZmZzZXQudG9wfXB4YCxcbiAgICAgIC4uLnRoaXMucHJvcHMuc3R5bGUsXG4gICAgfSA6IHt9O1xuICB9XG5cbiAgZ2V0Q29udGFpbmVyID0gKCkgPT4ge1xuICAgIGNvbnN0IHBvcHVwQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgbGV0IG1vdW50Tm9kZTtcbiAgICBpZiAodGhpcy5wcm9wcy5nZXRTdWdnZXN0aW9uQ29udGFpbmVyKSB7XG4gICAgICBtb3VudE5vZGUgPSB0aGlzLnByb3BzLmdldFN1Z2dlc3Rpb25Db250YWluZXIoKTtcbiAgICAgIHBvcHVwQ29udGFpbmVyLnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcbiAgICB9IGVsc2Uge1xuICAgICAgbW91bnROb2RlID0gZG9jdW1lbnQuYm9keTtcbiAgICB9XG4gICAgbW91bnROb2RlLmFwcGVuZENoaWxkKHBvcHVwQ29udGFpbmVyKTtcbiAgICByZXR1cm4gcG9wdXBDb250YWluZXI7XG4gIH07XG4gIGhhbmRsZUtleUJpbmRpbmcgPSAoY29tbWFuZCkgPT4ge1xuICAgIHJldHVybiBjb21tYW5kID09PSAnc3BsaXQtYmxvY2snO1xuICB9O1xuICBoYW5kbGVSZXR1cm4gPSAoZXYpID0+IHtcbiAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IHNlbGVjdGVkU3VnZ2VzdGlvbiA9IHRoaXMucHJvcHMuc3VnZ2VzdGlvbnNbdGhpcy5zdGF0ZS5mb2N1c2VkSW5kZXhdO1xuICAgIGlmIChzZWxlY3RlZFN1Z2dlc3Rpb24pIHtcbiAgICAgIGlmIChpc1ZhbGlkRWxlbWVudChzZWxlY3RlZFN1Z2dlc3Rpb24pKSB7XG4gICAgICAgIHRoaXMub25NZW50aW9uU2VsZWN0KHNlbGVjdGVkU3VnZ2VzdGlvbi5wcm9wcy52YWx1ZSwgc2VsZWN0ZWRTdWdnZXN0aW9uLnByb3BzLmRhdGEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5vbk1lbnRpb25TZWxlY3Qoc2VsZWN0ZWRTdWdnZXN0aW9uKTtcbiAgICAgIH1cbiAgICAgIHRoaXMubGFzdFNlYXJjaFZhbHVlID0gbnVsbDtcbiAgICAgIHRoaXMubGFzdFRyaWdnZXIgPSBudWxsO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICBvcGVuRHJvcERvd24oKSB7XG4gICAgdGhpcy5wcm9wcy5jYWxsYmFja3Mub25VcEFycm93ID0gdGhpcy5vblVwQXJyb3c7XG4gICAgdGhpcy5wcm9wcy5jYWxsYmFja3MuaGFuZGxlUmV0dXJuID0gdGhpcy5oYW5kbGVSZXR1cm47XG4gICAgdGhpcy5wcm9wcy5jYWxsYmFja3MuaGFuZGxlS2V5QmluZGluZyA9IHRoaXMuaGFuZGxlS2V5QmluZGluZztcbiAgICB0aGlzLnByb3BzLmNhbGxiYWNrcy5vbkRvd25BcnJvdyA9IHRoaXMub25Eb3duQXJyb3c7XG4gICAgdGhpcy5wcm9wcy5jYWxsYmFja3Mub25CbHVyID0gdGhpcy5vbkJsdXI7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBhY3RpdmU6IHRydWUsXG4gICAgICBjb250YWluZXI6IHRoaXMuc3RhdGUuY29udGFpbmVyIHx8IHRoaXMuZ2V0Q29udGFpbmVyKCksXG4gICAgfSk7XG4gIH1cblxuICBjbG9zZURyb3BEb3duKCkge1xuICAgIHRoaXMucHJvcHMuY2FsbGJhY2tzLm9uVXBBcnJvdyA9IG51bGw7XG4gICAgdGhpcy5wcm9wcy5jYWxsYmFja3MuaGFuZGxlUmV0dXJuID0gbnVsbDtcbiAgICB0aGlzLnByb3BzLmNhbGxiYWNrcy5oYW5kbGVLZXlCaW5kaW5nID0gbnVsbDtcbiAgICB0aGlzLnByb3BzLmNhbGxiYWNrcy5vbkRvd25BcnJvdyA9IG51bGw7XG4gICAgdGhpcy5wcm9wcy5jYWxsYmFja3Mub25CbHVyID0gbnVsbDtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGFjdGl2ZTogZmFsc2UsXG4gICAgfSk7XG4gIH1cblxuICByZW5kZXJSZWFkeSA9ICgpID0+IHtcbiAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmRyb3Bkb3duQ29udGFpbmVyO1xuICAgIGlmICghY29udGFpbmVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHsgYWN0aXZlIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHsgYWN0aXZlT2Zmc2V0S2V5IH0gPSB0aGlzO1xuICAgIGNvbnN0IG9mZnNldCA9IHRoaXMucHJvcHMuc3RvcmUuZ2V0T2Zmc2V0KCk7XG4gICAgY29uc3QgZHJvcERvd25Qb3NpdGlvbiA9IG9mZnNldC5nZXQoYWN0aXZlT2Zmc2V0S2V5KTtcblxuICAgIGlmIChhY3RpdmUgJiYgZHJvcERvd25Qb3NpdGlvbikge1xuICAgICAgY29uc3QgcGxhY2VtZW50ID0gdGhpcy5wcm9wcy5wbGFjZW1lbnQ7XG4gICAgICBjb25zdCBkcm9wRG93blN0eWxlID0gdGhpcy5nZXRQb3NpdGlvblN0eWxlKHRydWUsIGRyb3BEb3duUG9zaXRpb24ucG9zaXRpb24oKSk7XG5cbiAgICAgIC8vIENoZWNrIGlmIHRoZSBhYm92ZSBzcGFjZSBpcyBjcm93ZGVkXG4gICAgICBjb25zdCBpc1RvcENyb3dkZWQgPSBwYXJzZUZsb2F0KGRyb3BEb3duU3R5bGUudG9wKSAtIHdpbmRvdy5zY3JvbGxZIC0gY29udGFpbmVyLm9mZnNldEhlaWdodCA8IDA7XG4gICAgICAvLyBDaGVjayBpZiB0aGUgdW5kZXIgc3BhY2UgaXMgY3Jvd2RlZFxuICAgICAgY29uc3QgaXNCb3R0b21Dcm93ZGVkID0gKHdpbmRvdy5pbm5lckhlaWdodCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0KSAtIChwYXJzZUZsb2F0KGRyb3BEb3duU3R5bGUudG9wKSAtIHdpbmRvdy5zY3JvbGxZKSAtIGNvbnRhaW5lci5vZmZzZXRIZWlnaHQgPCAwO1xuXG4gICAgICBpZiAocGxhY2VtZW50ID09PSAndG9wJyAmJiAhaXNUb3BDcm93ZGVkKSB7XG4gICAgICAgIC8vIFRoZSBhYm92ZSBzcGFjZSBpc24ndCBjcm93ZGVkXG4gICAgICAgIGRyb3BEb3duU3R5bGUudG9wID0gYCR7cGFyc2VGbG9hdChkcm9wRG93blN0eWxlLnRvcCkgLSBjb250YWluZXIub2Zmc2V0SGVpZ2h0IHx8IDB9cHhgO1xuICAgICAgfVxuXG4gICAgICBpZiAocGxhY2VtZW50ID09PSAnYm90dG9tJyAmJiBpc0JvdHRvbUNyb3dkZWQgJiYgIWlzVG9wQ3Jvd2RlZCkge1xuICAgICAgICAvLyBUaGUgYWJvdmUgc3BhY2UgaXNuJ3QgY3Jvd2RlZCBhbmQgdGhlIHVuZGVyIHNwYWNlIGlzIGNyb3dkZWQuXG4gICAgICAgIGRyb3BEb3duU3R5bGUudG9wID0gYCR7cGFyc2VGbG9hdChkcm9wRG93blN0eWxlLnRvcCkgLSBjb250YWluZXIub2Zmc2V0SGVpZ2h0IHx8IDB9cHhgO1xuICAgICAgfVxuXG4gICAgICBPYmplY3Qua2V5cyhkcm9wRG93blN0eWxlKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgY29udGFpbmVyLnN0eWxlW2tleV0gPSBkcm9wRG93blN0eWxlW2tleV07XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuZm9jdXNJdGVtKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHNjcm9sbEludG9WaWV3KFxuICAgICAgUmVhY3RET00uZmluZERPTU5vZGUodGhpcy5mb2N1c0l0ZW0pLFxuICAgICAgY29udGFpbmVyLCB7XG4gICAgICAgIG9ubHlTY3JvbGxJZk5lZWRlZDogdHJ1ZSxcbiAgICAgIH0sXG4gICAgKTtcbiAgfTtcbiAgZ2V0TmF2aWdhdGlvbnMgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBwcmVmaXhDbHMsIHN1Z2dlc3Rpb25zIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgZm9jdXNlZEluZGV4IH0gPSB0aGlzLnN0YXRlO1xuICAgIHJldHVybiBzdWdnZXN0aW9ucy5sZW5ndGggPyBDaGlsZHJlbi5tYXAoc3VnZ2VzdGlvbnMsIChlbGVtZW50LCBpbmRleCkgPT4ge1xuICAgICAgY29uc3QgZm9jdXNJdGVtID0gaW5kZXggPT09IGZvY3VzZWRJbmRleDtcbiAgICAgIGNvbnN0IHJlZiA9IGZvY3VzSXRlbSA/IChub2RlKSA9PiB7XG4gICAgICAgIHRoaXMuZm9jdXNJdGVtID0gbm9kZTtcbiAgICAgIH0gOiBudWxsO1xuICAgICAgY29uc3QgbWVudGlvbkNsYXNzID0gY3goYCR7cHJlZml4Q2xzfS1kcm9wZG93bi1pdGVtYCwge1xuICAgICAgICBmb2N1czogZm9jdXNJdGVtLFxuICAgICAgfSk7XG4gICAgICBpZiAoaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkpIHtcbiAgICAgICAgcmV0dXJuIGNsb25lRWxlbWVudChlbGVtZW50LCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBtZW50aW9uQ2xhc3MsXG4gICAgICAgICAgb25Nb3VzZURvd246ICgpID0+IHRoaXMub25NZW50aW9uU2VsZWN0KGVsZW1lbnQucHJvcHMudmFsdWUsIGVsZW1lbnQucHJvcHMuZGF0YSksXG4gICAgICAgICAgcmVmLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxOYXZcbiAgICAgICAgICByZWY9e3JlZn1cbiAgICAgICAgICBjbGFzc05hbWU9e21lbnRpb25DbGFzc31cbiAgICAgICAgICBvbk1vdXNlRG93bj17KCkgPT4gdGhpcy5vbk1lbnRpb25TZWxlY3QoZWxlbWVudCl9XG4gICAgICAgID5cbiAgICAgICAgICB7ZWxlbWVudH1cbiAgICAgICAgPC9OYXY+XG4gICAgICApO1xuICAgIH0sIHRoaXMpIDogKFxuICAgICAgPGRpdiBjbGFzc05hbWU9e2Ake3ByZWZpeENsc30tZHJvcGRvd24tbm90Zm91bmQgJHtwcmVmaXhDbHN9LWRyb3Bkb3duLWl0ZW1gfT5cbiAgICAgICAge3RoaXMucHJvcHMubm90Rm91bmRDb250ZW50fVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBwcmVmaXhDbHMsIGNsYXNzTmFtZSwgcGxhY2VtZW50IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgY29udGFpbmVyLCBhY3RpdmUgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgY2xzID0gY3goe1xuICAgICAgW2Ake3ByZWZpeENsc30tZHJvcGRvd25gXTogdHJ1ZSxcbiAgICAgIFtgJHtwcmVmaXhDbHN9LWRyb3Bkb3duLXBsYWNlbWVudC0ke3BsYWNlbWVudH1gXTogdHJ1ZSxcbiAgICAgIC4uLmNsYXNzTmFtZSxcbiAgICB9KTtcbiAgICBjb25zdCB0cmFuc2l0aW9uTmFtZSA9IHBsYWNlbWVudCA9PT0gJ3RvcCcgPyAnc2xpZGUtZG93bicgOiAnc2xpZGUtdXAnO1xuXG4gICAgY29uc3QgbmF2aWdhdGlvbnMgPSB0aGlzLmdldE5hdmlnYXRpb25zKCk7XG5cbiAgICByZXR1cm4gY29udGFpbmVyID8gKFxuICAgICAgPFN1Z2dldGlvbldyYXBwZXIgcmVuZGVyUmVhZHk9e3RoaXMucmVuZGVyUmVhZHl9IGNvbnRhaW5lcj17Y29udGFpbmVyfT5cbiAgICAgICAgPEFuaW1hdGUgdHJhbnNpdGlvbk5hbWU9e3RyYW5zaXRpb25OYW1lfT5cbiAgICAgICAgICB7YWN0aXZlID8gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2Nsc30gcmVmPXsobm9kZSkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLmRyb3Bkb3duQ29udGFpbmVyID0gbm9kZTtcbiAgICAgICAgICAgIH19PlxuICAgICAgICAgICAgICB7bmF2aWdhdGlvbnN9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgPC9BbmltYXRlPlxuICAgICAgPC9TdWdnZXRpb25XcmFwcGVyPlxuICAgICkgOiBudWxsO1xuICB9XG59XG4iXX0=