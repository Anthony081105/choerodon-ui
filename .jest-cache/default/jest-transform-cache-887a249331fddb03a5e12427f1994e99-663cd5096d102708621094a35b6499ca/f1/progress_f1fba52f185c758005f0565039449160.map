{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components/progress/progress.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { Component, CSSProperties } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Icon from '../icon';\nimport { Circle } from '../rc-components/progress';\nimport Loading from './Loading';\nimport { Size } from '../_util/enum';\nimport { ProgressPosition, ProgressStatus, ProgressType } from './enum';\nimport { getPrefixCls } from '../configure';\n\nconst statusColorMap = {\n  normal: '#108ee9',\n  exception: '#ff5500',\n  success: '#87d068',\n};\n\nexport interface ProgressProps {\n  prefixCls?: string;\n  className?: string;\n  type?: ProgressType;\n  percent?: number;\n  successPercent?: number;\n  format?: (percent: number) => string;\n  status?: ProgressStatus;\n  showInfo?: boolean;\n  strokeWidth?: number;\n  trailColor?: string;\n  strokeColor?: string;\n  width?: number;\n  style?: CSSProperties;\n  gapDegree?: number;\n  gapPosition?: ProgressPosition;\n  size?: Size;\n}\n\nexport default class Progress extends Component<ProgressProps, {}> {\n  static displayName = 'Progress';\n\n  static Line: any;\n\n  static Circle: any;\n\n  static Loading: any;\n\n  static defaultProps = {\n    type: ProgressType.line,\n    percent: 0,\n    showInfo: true,\n    trailColor: '#f3f3f3',\n    size: Size.default,\n  };\n\n  static propTypes = {\n    status: PropTypes.oneOf([\n      ProgressStatus.normal,\n      ProgressStatus.exception,\n      ProgressStatus.active,\n      ProgressStatus.success,\n    ]),\n    type: PropTypes.oneOf([\n      ProgressType.line,\n      ProgressType.circle,\n      ProgressType.dashboard,\n      ProgressType.loading,\n    ]),\n    showInfo: PropTypes.bool,\n    percent: PropTypes.number,\n    width: PropTypes.number,\n    strokeWidth: PropTypes.number,\n    strokeColor: PropTypes.string,\n    trailColor: PropTypes.string,\n    format: PropTypes.func,\n    gapDegree: PropTypes.number,\n    size: PropTypes.oneOf([Size.default, Size.small, Size.large]),\n  };\n\n  render() {\n    const props = this.props;\n    const {\n      prefixCls: customizePrefixCls,\n      className,\n      percent = 0,\n      status,\n      format,\n      trailColor,\n      size,\n      successPercent,\n      type,\n      strokeWidth,\n      strokeColor,\n      width,\n      showInfo,\n      gapDegree = 0,\n      gapPosition,\n      ...restProps\n    } = props;\n    const prefixCls = getPrefixCls('progress', customizePrefixCls);\n    const progressStatus =\n      parseInt(successPercent ? successPercent.toString() : percent.toString(), 10) >= 100 &&\n      !('status' in props)\n        ? ProgressStatus.success\n        : status || ProgressStatus.normal;\n    let progressInfo;\n    let progress;\n    const textFormatter = format || (percentNumber => `${percentNumber}%`);\n\n    if (showInfo) {\n      let text;\n      const circleType = type === ProgressType.circle || type === ProgressType.dashboard;\n      if (progressStatus === ProgressStatus.exception) {\n        text = format ? textFormatter(percent) : <Icon type={circleType ? 'close' : 'cancel'} />;\n      } else if (progressStatus === ProgressStatus.success) {\n        text = format ? (\n          textFormatter(percent)\n        ) : (\n          <Icon type={circleType ? 'check' : 'check_circle'} />\n        );\n      } else {\n        text = textFormatter(percent);\n      }\n      progressInfo = <span className={`${prefixCls}-text`}>{text}</span>;\n    }\n\n    if (type === ProgressType.line) {\n      const percentStyle = {\n        width: `${percent}%`,\n        height: strokeWidth || (size === Size.small ? 6 : 8),\n        background: strokeColor,\n      };\n      const successPercentStyle = {\n        width: `${successPercent}%`,\n        height: strokeWidth || (size === Size.small ? 6 : 8),\n      };\n      const successSegment =\n        successPercent !== undefined ? (\n          <div className={`${prefixCls}-success-bg`} style={successPercentStyle} />\n        ) : null;\n      progress = (\n        <div>\n          <div className={`${prefixCls}-outer`}>\n            <div className={`${prefixCls}-inner`}>\n              <div className={`${prefixCls}-bg`} style={percentStyle} />\n              {successSegment}\n            </div>\n          </div>\n          {progressInfo}\n        </div>\n      );\n    } else if (type === ProgressType.circle || type === ProgressType.dashboard) {\n      const circleSize = width || 120;\n      const circleStyle = {\n        width: circleSize,\n        height: circleSize,\n        fontSize: circleSize * 0.15 + 6,\n      };\n      const circleWidth = strokeWidth || 6;\n      const gapPos =\n        gapPosition ||\n        (type === ProgressType.dashboard && ProgressPosition.bottom) ||\n        ProgressPosition.top;\n      const gapDeg = gapDegree || (type === ProgressType.dashboard && 75);\n      progress = (\n        <div className={`${prefixCls}-inner`} style={circleStyle}>\n          <Circle\n            percent={percent}\n            strokeWidth={circleWidth}\n            trailWidth={circleWidth}\n            trailColor={trailColor}\n            strokeColor={(statusColorMap as any)[progressStatus]}\n            prefixCls={prefixCls}\n            gapDegree={gapDeg}\n            gapPosition={gapPos}\n          />\n          {progressInfo}\n        </div>\n      );\n    } else if (type === ProgressType.loading) {\n      progress = (\n        <div className={`${prefixCls}-inner`}>\n          <Loading />\n        </div>\n      );\n    }\n\n    const classString = classNames(\n      prefixCls,\n      {\n        [`${prefixCls}-${(type === ProgressType.dashboard && ProgressType.circle) || type}`]: true,\n        [`${prefixCls}-status-${progressStatus}`]: true,\n        [`${prefixCls}-show-info`]: showInfo,\n        [`${prefixCls}-${size}`]: size,\n      },\n      className,\n    );\n\n    return (\n      <div {...restProps} className={classString}>\n        {progress}\n      </div>\n    );\n  }\n}\n"]}