c2d77b1aa7b16a763a2d946eab109566
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _jsdom = _interopRequireDefault(require("jsdom"));

var _enzyme = require("enzyme");

var _JSFormatter = _interopRequireDefault(require("choerodon-ui/pro/lib/code-area/formatters/JSFormatter"));

var _ = _interopRequireDefault(require(".."));

var _dataSet = _interopRequireDefault(require("../../data-set"));

var _JSONFormatter = _interopRequireDefault(require("../formatters/JSONFormatter"));

require("choerodon-ui/pro/lib/code-area/lint/json");

// eslint-disable-next-line import/no-named-as-default
if (typeof window !== 'undefined') {
  // eslint-disable-next-line global-require
  require('codemirror/mode/javascript/javascript');
}

describe('CodeArea-pro', function () {
  beforeEach(function () {
    jest.useFakeTimers();
    var JSDOM = _jsdom["default"].JSDOM;
    var doc = new JSDOM('<!doctype html><html><body></body></html>');
    global.document = doc;
    global.window = doc.defaultView;

    global.document.body.createTextRange = function () {
      return {
        setEnd: function setEnd() {},
        setStart: function setStart() {},
        getBoundingClientRect: function getBoundingClientRect() {
          return {
            right: 0
          };
        },
        getClientRects: function getClientRects() {
          return {
            length: 0,
            left: 0,
            right: 0
          };
        }
      };
    };
  });
  afterEach(function () {
    jest.useRealTimers();
  });
  it('the codeArea json formatter and lint test', function () {
    var options = {
      mode: {
        name: 'javascript',
        json: true
      }
    };
    var jsonText = "{\n      \"compilerOptions\": {\n        \"strictNullChecks\": true,\n        \"moduleResolution\": \"node\",\n        \"allowSyntheticDefaultImports\": true,\n        \"experimentalDecorators\": true,\n        \"jsx\": \"preserve\",\n        \"noUnusedParameters\": true,\n        \"noUnusedLocals\": true,\n        \"declaration\": true,\n        \"target\": \"es6\",\n        \"lib\": [\n          \"dom\",\n          \"dom.iterable\",\n          \"es7\",\n          \"es2017.object\"\n        ]\n      },\n      \"exclude\": [\n        \"node_modules\",\n        \"lib\",\n        \"es\"\n      ]\n    }\n    ";
    var jsonStyle = {
      height: 500
    };
    var ds = new _dataSet["default"]({
      autoCreate: true,
      fields: [{
        name: 'content',
        type: 'string',
        defaultValue: jsonText,
        required: true
      }]
    });
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      dataSet: ds,
      name: "content",
      style: jsonStyle,
      formatter: _JSONFormatter["default"],
      options: options,
      formatHotKey: "Home",
      unFormatHotKey: "End"
    }));
    wrapper.find('CodeArea').simulate('focus');
    wrapper.find('CodeArea').simulate('keydown', {
      key: 'Home'
    });
    wrapper.find('CodeArea').simulate('keydown', {
      key: 'End'
    });
    expect(wrapper).toMatchSnapshot();
  });
  it('the codeArea javascript formatter and lint test', function () {
    var options = {
      mode: 'javascript'
    };
    var jsText = "function getOptions() {\n      var options = {\n        \"compilerOptions\": {\n          \"strictNullChecks\": true,\n          \"moduleResolution\": \"node\",\n          \"allowSyntheticDefaultImports\": true,\n          \"experimentalDecorators\": true,\n          \"jsx\": \"preserve\",\n          \"noUnusedParameters\": true,\n          \"noUnusedLocals\": true,\n          \"declaration\": true,\n          \"target\": \"es6\",\n          \"lib\": [\n            \"dom\",\n            \"dom.iterable\",\n            \"es7\",\n            \"es2017.object\"\n          ]\n        },\n        \"exclude\": [\n          \"node_modules\",\n          \"lib\",\n          \"es\"\n        ]\n      };\n\n      return options;\n    }\n    ";
    var jsStyle = {
      height: 500
    };
    var ds = new _dataSet["default"]({
      autoCreate: true,
      fields: [{
        name: 'content',
        type: 'string',
        defaultValue: jsText,
        required: true
      }]
    });
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      dataSet: ds,
      name: "content",
      style: jsStyle,
      formatter: _JSFormatter["default"],
      options: options
    }));
    wrapper.find('CodeArea').simulate('focus');
    wrapper.find('CodeArea').simulate('keydown', {
      key: 'Home'
    });
    wrapper.find('CodeArea').simulate('keydown', {
      key: 'End'
    });
    expect(wrapper).toMatchSnapshot();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,