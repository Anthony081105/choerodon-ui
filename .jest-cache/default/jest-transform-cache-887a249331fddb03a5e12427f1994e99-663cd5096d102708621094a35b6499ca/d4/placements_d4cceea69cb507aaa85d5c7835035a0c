1950c5bcf415afab4d136be67d7c8e74
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.placements = void 0;
var autoAdjustOverflow = {
  adjustX: 1,
  adjustY: 1
};
var targetOffset = [0, 0];
var placements = {
  left: {
    points: ['cr', 'cl'],
    overflow: autoAdjustOverflow,
    offset: [-4, 0],
    targetOffset: targetOffset
  },
  right: {
    points: ['cl', 'cr'],
    overflow: autoAdjustOverflow,
    offset: [4, 0],
    targetOffset: targetOffset
  },
  top: {
    points: ['bc', 'tc'],
    overflow: autoAdjustOverflow,
    offset: [0, -4],
    targetOffset: targetOffset
  },
  bottom: {
    points: ['tc', 'bc'],
    overflow: autoAdjustOverflow,
    offset: [0, 4],
    targetOffset: targetOffset
  },
  topLeft: {
    points: ['bl', 'tl'],
    overflow: autoAdjustOverflow,
    offset: [0, -4],
    targetOffset: targetOffset
  },
  leftTop: {
    points: ['tr', 'tl'],
    overflow: autoAdjustOverflow,
    offset: [-4, 0],
    targetOffset: targetOffset
  },
  topRight: {
    points: ['br', 'tr'],
    overflow: autoAdjustOverflow,
    offset: [0, -4],
    targetOffset: targetOffset
  },
  rightTop: {
    points: ['tl', 'tr'],
    overflow: autoAdjustOverflow,
    offset: [4, 0],
    targetOffset: targetOffset
  },
  bottomRight: {
    points: ['tr', 'br'],
    overflow: autoAdjustOverflow,
    offset: [0, 4],
    targetOffset: targetOffset
  },
  rightBottom: {
    points: ['bl', 'br'],
    overflow: autoAdjustOverflow,
    offset: [4, 0],
    targetOffset: targetOffset
  },
  bottomLeft: {
    points: ['tl', 'bl'],
    overflow: autoAdjustOverflow,
    offset: [0, 4],
    targetOffset: targetOffset
  },
  leftBottom: {
    points: ['br', 'bl'],
    overflow: autoAdjustOverflow,
    offset: [-4, 0],
    targetOffset: targetOffset
  }
};
exports.placements = placements;
var _default = placements;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRvb2x0aXAvcGxhY2VtZW50cy5qc3giXSwibmFtZXMiOlsiYXV0b0FkanVzdE92ZXJmbG93IiwiYWRqdXN0WCIsImFkanVzdFkiLCJ0YXJnZXRPZmZzZXQiLCJwbGFjZW1lbnRzIiwibGVmdCIsInBvaW50cyIsIm92ZXJmbG93Iiwib2Zmc2V0IiwicmlnaHQiLCJ0b3AiLCJib3R0b20iLCJ0b3BMZWZ0IiwibGVmdFRvcCIsInRvcFJpZ2h0IiwicmlnaHRUb3AiLCJib3R0b21SaWdodCIsInJpZ2h0Qm90dG9tIiwiYm90dG9tTGVmdCIsImxlZnRCb3R0b20iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQU1BLGtCQUFrQixHQUFHO0FBQ3pCQyxFQUFBQSxPQUFPLEVBRGtCLENBQUE7QUFFekJDLEVBQUFBLE9BQU8sRUFBRTtBQUZnQixDQUEzQjtBQUtBLElBQU1DLFlBQVksR0FBRyxDQUFBLENBQUEsRUFBckIsQ0FBcUIsQ0FBckI7QUFFTyxJQUFNQyxVQUFVLEdBQUc7QUFDeEJDLEVBQUFBLElBQUksRUFBRTtBQUNKQyxJQUFBQSxNQUFNLEVBQUUsQ0FBQSxJQUFBLEVBREosSUFDSSxDQURKO0FBRUpDLElBQUFBLFFBQVEsRUFGSixrQkFBQTtBQUdKQyxJQUFBQSxNQUFNLEVBQUUsQ0FBQyxDQUFELENBQUEsRUFISixDQUdJLENBSEo7QUFJSkwsSUFBQUEsWUFBWSxFQUFaQTtBQUpJLEdBRGtCO0FBT3hCTSxFQUFBQSxLQUFLLEVBQUU7QUFDTEgsSUFBQUEsTUFBTSxFQUFFLENBQUEsSUFBQSxFQURILElBQ0csQ0FESDtBQUVMQyxJQUFBQSxRQUFRLEVBRkgsa0JBQUE7QUFHTEMsSUFBQUEsTUFBTSxFQUFFLENBQUEsQ0FBQSxFQUhILENBR0csQ0FISDtBQUlMTCxJQUFBQSxZQUFZLEVBQVpBO0FBSkssR0FQaUI7QUFheEJPLEVBQUFBLEdBQUcsRUFBRTtBQUNISixJQUFBQSxNQUFNLEVBQUUsQ0FBQSxJQUFBLEVBREwsSUFDSyxDQURMO0FBRUhDLElB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T3ZlcmZsb3cgPSB7XG4gIGFkanVzdFg6IDEsXG4gIGFkanVzdFk6IDEsXG59O1xuXG5jb25zdCB0YXJnZXRPZmZzZXQgPSBbMCwgMF07XG5cbmV4cG9ydCBjb25zdCBwbGFjZW1lbnRzID0ge1xuICBsZWZ0OiB7XG4gICAgcG9pbnRzOiBbJ2NyJywgJ2NsJ10sXG4gICAgb3ZlcmZsb3c6IGF1dG9BZGp1c3RPdmVyZmxvdyxcbiAgICBvZmZzZXQ6IFstNCwgMF0sXG4gICAgdGFyZ2V0T2Zmc2V0LFxuICB9LFxuICByaWdodDoge1xuICAgIHBvaW50czogWydjbCcsICdjciddLFxuICAgIG92ZXJmbG93OiBhdXRvQWRqdXN0T3ZlcmZsb3csXG4gICAgb2Zmc2V0OiBbNCwgMF0sXG4gICAgdGFyZ2V0T2Zmc2V0LFxuICB9LFxuICB0b3A6IHtcbiAgICBwb2ludHM6IFsnYmMnLCAndGMnXSxcbiAgICBvdmVyZmxvdzogYXV0b0FkanVzdE92ZXJmbG93LFxuICAgIG9mZnNldDogWzAsIC00XSxcbiAgICB0YXJnZXRPZmZzZXQsXG4gIH0sXG4gIGJvdHRvbToge1xuICAgIHBvaW50czogWyd0YycsICdiYyddLFxuICAgIG92ZXJmbG93OiBhdXRvQWRqdXN0T3ZlcmZsb3csXG4gICAgb2Zmc2V0OiBbMCwgNF0sXG4gICAgdGFyZ2V0T2Zmc2V0LFxuICB9LFxuICB0b3BMZWZ0OiB7XG4gICAgcG9pbnRzOiBbJ2JsJywgJ3RsJ10sXG4gICAgb3ZlcmZsb3c6IGF1dG9BZGp1c3RPdmVyZmxvdyxcbiAgICBvZmZzZXQ6IFswLCAtNF0sXG4gICAgdGFyZ2V0T2Zmc2V0LFxuICB9LFxuICBsZWZ0VG9wOiB7XG4gICAgcG9pbnRzOiBbJ3RyJywgJ3RsJ10sXG4gICAgb3ZlcmZsb3c6IGF1dG9BZGp1c3RPdmVyZmxvdyxcbiAgICBvZmZzZXQ6IFstNCwgMF0sXG4gICAgdGFyZ2V0T2Zmc2V0LFxuICB9LFxuICB0b3BSaWdodDoge1xuICAgIHBvaW50czogWydicicsICd0ciddLFxuICAgIG92ZXJmbG93OiBhdXRvQWRqdXN0T3ZlcmZsb3csXG4gICAgb2Zmc2V0OiBbMCwgLTRdLFxuICAgIHRhcmdldE9mZnNldCxcbiAgfSxcbiAgcmlnaHRUb3A6IHtcbiAgICBwb2ludHM6IFsndGwnLCAndHInXSxcbiAgICBvdmVyZmxvdzogYXV0b0FkanVzdE92ZXJmbG93LFxuICAgIG9mZnNldDogWzQsIDBdLFxuICAgIHRhcmdldE9mZnNldCxcbiAgfSxcbiAgYm90dG9tUmlnaHQ6IHtcbiAgICBwb2ludHM6IFsndHInLCAnYnInXSxcbiAgICBvdmVyZmxvdzogYXV0b0FkanVzdE92ZXJmbG93LFxuICAgIG9mZnNldDogWzAsIDRdLFxuICAgIHRhcmdldE9mZnNldCxcbiAgfSxcbiAgcmlnaHRCb3R0b206IHtcbiAgICBwb2ludHM6IFsnYmwnLCAnYnInXSxcbiAgICBvdmVyZmxvdzogYXV0b0FkanVzdE92ZXJmbG93LFxuICAgIG9mZnNldDogWzQsIDBdLFxuICAgIHRhcmdldE9mZnNldCxcbiAgfSxcbiAgYm90dG9tTGVmdDoge1xuICAgIHBvaW50czogWyd0bCcsICdibCddLFxuICAgIG92ZXJmbG93OiBhdXRvQWRqdXN0T3ZlcmZsb3csXG4gICAgb2Zmc2V0OiBbMCwgNF0sXG4gICAgdGFyZ2V0T2Zmc2V0LFxuICB9LFxuICBsZWZ0Qm90dG9tOiB7XG4gICAgcG9pbnRzOiBbJ2JyJywgJ2JsJ10sXG4gICAgb3ZlcmZsb3c6IGF1dG9BZGp1c3RPdmVyZmxvdyxcbiAgICBvZmZzZXQ6IFstNCwgMF0sXG4gICAgdGFyZ2V0T2Zmc2V0LFxuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgcGxhY2VtZW50cztcbiJdfQ==