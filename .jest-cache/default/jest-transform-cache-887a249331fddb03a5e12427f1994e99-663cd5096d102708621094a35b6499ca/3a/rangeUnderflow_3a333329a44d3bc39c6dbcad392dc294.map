{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/validator/rules/rangeUnderflow.tsx"],"names":[],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AAEA,IAAM,WAAW,GAAG,SAAd,WAAc,CAAC,KAAD,EAAQ,GAAR,EAAa,KAAb,EAAsB;AACxC,MAAI,KAAJ,EAAW;AACT,WAAO,yBAAa,KAAb,EAAoB,KAApB,EAA2B,IAA3B,CAAgC,UAAA,IAAI;AAAA,aAAI,CAAC,yBAAQ,IAAR,CAAD,IAAkB,MAAM,CAAC,IAAD,CAAN,GAAe,MAAM,CAAC,GAAD,CAA3C;AAAA,KAApC,CAAP;AACD;;AACD,SAAO,CAAC,yBAAQ,KAAR,CAAD,IAAmB,MAAM,CAAC,KAAD,CAAN,GAAgB,MAAM,CAAC,GAAD,CAAhD;AACD,CALD;;AAOc,SAAU,cAAV,CAAyB,KAAzB,EAAqC,KAArC,EAA0D;AAAA,MAC9D,GAD8D,GACL,KADK,CAC9D,GAD8D;AAAA,MACzD,KADyD,GACL,KADK,CACzD,KADyD;AAAA,MAClD,MADkD,GACL,KADK,CAClD,MADkD;AAAA,MAC1C,yBAD0C,GACL,KADK,CAC1C,yBAD0C;AAAA,MACf,KADe,GACL,KADK,CACf,KADe;;AAEtE,MAAI,CAAC,uBAAM,GAAN,CAAD,IAAe,WAAW,CAAC,KAAD,EAAQ,GAAR,EAAa,KAAb,CAA9B,EAAmD;AACjD,QAAM,gBAAgB,GAAG;AAAE,MAAA,GAAG,EAAE,sBAAS,GAAT,IAAgB,GAAG,CAAC,MAAJ,CAAW,MAAX,CAAhB,GAAqC,GAA5C;AAAiD,MAAA,KAAK,EAAL;AAAjD,KAAzB;AACA,QAAM,QAAQ,GAAG,gBAAjB;AAFiD,gCAK7C,yBAL6C,CAI9C,QAJ8C;AAAA,QAInC,iBAJmC,sCAIf,uBAAG,WAAH,EAAgB,iBAAhB,CAJe;AAMjD,WAAO,IAAI,4BAAJ,CAAqB;AAC1B,MAAA,iBAAiB,EAAE,qCAAoB,iBAApB,EAAuC,gBAAvC,CADO;AAE1B,MAAA,gBAAgB,EAAhB,gBAF0B;AAG1B,MAAA,KAAK,EAAL,KAH0B;AAI1B,MAAA,QAAQ,EAAR;AAJ0B,KAArB,CAAP;AAMD;;AACD,SAAO,IAAP;AACD","sourcesContent":["import { isMoment } from 'moment';\nimport isNil from 'lodash/isNil';\nimport isEmpty from '../../_util/isEmpty';\nimport ValidationResult from '../ValidationResult';\nimport { $l } from '../../locale-context';\nimport { methodReturn, ValidatorProps } from '.';\nimport formatReactTemplate from '../../formatter/formatReactTemplate';\nimport { toRangeValue } from '../../field/utils';\n\nconst isUnderflow = (value, min, range) => {\n  if (range) {\n    return toRangeValue(value, range).some(item => !isEmpty(item) && Number(item) < Number(min));\n  }\n  return !isEmpty(value) && Number(value) < Number(min);\n};\n\nexport default function rangeUnderflow(value: any, props: ValidatorProps): methodReturn {\n  const { min, label, format, defaultValidationMessages, range } = props;\n  if (!isNil(min) && isUnderflow(value, min, range)) {\n    const injectionOptions = { min: isMoment(min) ? min.format(format) : min, label };\n    const ruleName = 'rangeUnderflow';\n    const {\n      [ruleName]: validationMessage = $l('Validator', 'range_underflow'),\n    } = defaultValidationMessages;\n    return new ValidationResult({\n      validationMessage: formatReactTemplate(validationMessage, injectionOptions),\n      injectionOptions,\n      value,\n      ruleName,\n    });\n  }\n  return true;\n}\n"]}