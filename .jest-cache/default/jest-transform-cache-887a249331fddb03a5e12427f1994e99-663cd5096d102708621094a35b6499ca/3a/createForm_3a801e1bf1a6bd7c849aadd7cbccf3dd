cb368d0b470639880b7e8229f0767dfe
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.mixin = void 0;

var _createBaseForm = _interopRequireDefault(require("./createBaseForm"));

var mixin = {
  getForm: function getForm() {
    return {
      getFieldsValue: this.fieldsStore.getFieldsValue,
      getFieldValue: this.fieldsStore.getFieldValue,
      getFieldInstance: this.getFieldInstance,
      setFieldsValue: this.setFieldsValue,
      setFields: this.setFields,
      setFieldsInitialValue: this.fieldsStore.setFieldsInitialValue,
      getFieldDecorator: this.getFieldDecorator,
      getFieldProps: this.getFieldProps,
      getFieldsError: this.fieldsStore.getFieldsError,
      getFieldError: this.fieldsStore.getFieldError,
      isFieldValidating: this.fieldsStore.isFieldValidating,
      isFieldsValidating: this.fieldsStore.isFieldsValidating,
      isFieldsTouched: this.fieldsStore.isFieldsTouched,
      isFieldTouched: this.fieldsStore.isFieldTouched,
      isSubmitting: this.isSubmitting,
      submit: this.submit,
      validateFields: this.validateFields,
      resetFields: this.resetFields,
      isModifiedFields: this.fieldsStore.isModifiedFields,
      isModifiedField: this.fieldsStore.isModifiedField
    };
  }
};
exports.mixin = mixin;

function createForm(options) {
  return (0, _createBaseForm["default"])(options, [mixin]);
}

var _default = createForm;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNyZWF0ZUZvcm0uanN4Il0sIm5hbWVzIjpbIm1peGluIiwiZ2V0Rm9ybSIsImdldEZpZWxkc1ZhbHVlIiwiZmllbGRzU3RvcmUiLCJnZXRGaWVsZFZhbHVlIiwiZ2V0RmllbGRJbnN0YW5jZSIsInNldEZpZWxkc1ZhbHVlIiwic2V0RmllbGRzIiwic2V0RmllbGRzSW5pdGlhbFZhbHVlIiwiZ2V0RmllbGREZWNvcmF0b3IiLCJnZXRGaWVsZFByb3BzIiwiZ2V0RmllbGRzRXJyb3IiLCJnZXRGaWVsZEVycm9yIiwiaXNGaWVsZFZhbGlkYXRpbmciLCJpc0ZpZWxkc1ZhbGlkYXRpbmciLCJpc0ZpZWxkc1RvdWNoZWQiLCJpc0ZpZWxkVG91Y2hlZCIsImlzU3VibWl0dGluZyIsInN1Ym1pdCIsInZhbGlkYXRlRmllbGRzIiwicmVzZXRGaWVsZHMiLCJpc01vZGlmaWVkRmllbGRzIiwiaXNNb2RpZmllZEZpZWxkIiwiY3JlYXRlRm9ybSIsIm9wdGlvbnMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUVPLElBQU1BLEtBQUssR0FBRztBQUNuQkMsRUFBQUEsT0FEbUIscUJBQ1Q7QUFDUixXQUFPO0FBQ0xDLE1BQUFBLGNBQWMsRUFBRSxLQUFLQyxXQUFMLENBQWlCRCxjQUQ1QjtBQUVMRSxNQUFBQSxhQUFhLEVBQUUsS0FBS0QsV0FBTCxDQUFpQkMsYUFGM0I7QUFHTEMsTUFBQUEsZ0JBQWdCLEVBQUUsS0FBS0EsZ0JBSGxCO0FBSUxDLE1BQUFBLGNBQWMsRUFBRSxLQUFLQSxjQUpoQjtBQUtMQyxNQUFBQSxTQUFTLEVBQUUsS0FBS0EsU0FMWDtBQU1MQyxNQUFBQSxxQkFBcUIsRUFBRSxLQUFLTCxXQUFMLENBQWlCSyxxQkFObkM7QUFPTEMsTUFBQUEsaUJBQWlCLEVBQUUsS0FBS0EsaUJBUG5CO0FBUUxDLE1BQUFBLGFBQWEsRUFBRSxLQUFLQSxhQVJmO0FBU0xDLE1BQUFBLGNBQWMsRUFBRSxLQUFLUixXQUFMLENBQWlCUSxjQVQ1QjtBQVVMQyxNQUFBQSxhQUFhLEVBQUUsS0FBS1QsV0FBTCxDQUFpQlMsYUFWM0I7QUFXTEMsTUFBQUEsaUJBQWlCLEVBQUUsS0FBS1YsV0FBTCxDQUFpQlUsaUJBWC9CO0FBWUxDLE1BQUFBLGtCQUFrQixFQUFFLEtBQUtYLFdBQUwsQ0FBaUJXLGtCQVpoQztBQWFMQyxNQUFBQSxlQUFlLEVBQUUsS0FBS1osV0FBTCxDQUFpQlksZUFiN0I7QUFjTEMsTUFBQUEsY0FBYyxFQUFFLEtBQUtiLFdBQUwsQ0FBaUJhLGNBZDVCO0FBZUxDLE1BQUFBLFlBQVksRUFBRSxLQUFLQSxZQWZkO0FBZ0JMQyxNQUFBQSxNQUFNLEVBQUUsS0FBS0EsTUFoQlI7QUFpQkxDLE1BQUFBLGNBQWMsRUFBRSxLQUFLQSxjQWpCaEI7QUFrQkxDLE1BQUFBLFdBQVcsRUFBRSxLQUFLQSxXQWxCYjtBQW1CTEMsTUFBQUEsZ0JBQWdCLEVBQUUsS0FBS2xCLFdBQUwsQ0FBaUJrQixnQkFuQjlCO0FBb0JMQyxNQUFBQSxlQUFlLEVBQUUsS0FBS25CLFdBQUwsQ0FBaUJtQjtBQXBCN0IsS0FBUDtBQXNCRDtBQXhCa0IsQ0FBZDs7O0FBMkJQLFNBQVNDLFVBQVQsQ0FBb0JDLE9BQXBCLEVBQTZCO0FBQzNCLFNBQU8sZ0NBQWVBLE9BQWYsRUFBd0IsQ0FBQ3hCLEtBQUQsQ0FBeEIsQ0FBUDtBQUNEOztlQUVjdUIsVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcmVhdGVCYXNlRm9ybSBmcm9tICcuL2NyZWF0ZUJhc2VGb3JtJztcblxuZXhwb3J0IGNvbnN0IG1peGluID0ge1xuICBnZXRGb3JtKCkge1xuICAgIHJldHVybiB7XG4gICAgICBnZXRGaWVsZHNWYWx1ZTogdGhpcy5maWVsZHNTdG9yZS5nZXRGaWVsZHNWYWx1ZSxcbiAgICAgIGdldEZpZWxkVmFsdWU6IHRoaXMuZmllbGRzU3RvcmUuZ2V0RmllbGRWYWx1ZSxcbiAgICAgIGdldEZpZWxkSW5zdGFuY2U6IHRoaXMuZ2V0RmllbGRJbnN0YW5jZSxcbiAgICAgIHNldEZpZWxkc1ZhbHVlOiB0aGlzLnNldEZpZWxkc1ZhbHVlLFxuICAgICAgc2V0RmllbGRzOiB0aGlzLnNldEZpZWxkcyxcbiAgICAgIHNldEZpZWxkc0luaXRpYWxWYWx1ZTogdGhpcy5maWVsZHNTdG9yZS5zZXRGaWVsZHNJbml0aWFsVmFsdWUsXG4gICAgICBnZXRGaWVsZERlY29yYXRvcjogdGhpcy5nZXRGaWVsZERlY29yYXRvcixcbiAgICAgIGdldEZpZWxkUHJvcHM6IHRoaXMuZ2V0RmllbGRQcm9wcyxcbiAgICAgIGdldEZpZWxkc0Vycm9yOiB0aGlzLmZpZWxkc1N0b3JlLmdldEZpZWxkc0Vycm9yLFxuICAgICAgZ2V0RmllbGRFcnJvcjogdGhpcy5maWVsZHNTdG9yZS5nZXRGaWVsZEVycm9yLFxuICAgICAgaXNGaWVsZFZhbGlkYXRpbmc6IHRoaXMuZmllbGRzU3RvcmUuaXNGaWVsZFZhbGlkYXRpbmcsXG4gICAgICBpc0ZpZWxkc1ZhbGlkYXRpbmc6IHRoaXMuZmllbGRzU3RvcmUuaXNGaWVsZHNWYWxpZGF0aW5nLFxuICAgICAgaXNGaWVsZHNUb3VjaGVkOiB0aGlzLmZpZWxkc1N0b3JlLmlzRmllbGRzVG91Y2hlZCxcbiAgICAgIGlzRmllbGRUb3VjaGVkOiB0aGlzLmZpZWxkc1N0b3JlLmlzRmllbGRUb3VjaGVkLFxuICAgICAgaXNTdWJtaXR0aW5nOiB0aGlzLmlzU3VibWl0dGluZyxcbiAgICAgIHN1Ym1pdDogdGhpcy5zdWJtaXQsXG4gICAgICB2YWxpZGF0ZUZpZWxkczogdGhpcy52YWxpZGF0ZUZpZWxkcyxcbiAgICAgIHJlc2V0RmllbGRzOiB0aGlzLnJlc2V0RmllbGRzLFxuICAgICAgaXNNb2RpZmllZEZpZWxkczogdGhpcy5maWVsZHNTdG9yZS5pc01vZGlmaWVkRmllbGRzLFxuICAgICAgaXNNb2RpZmllZEZpZWxkOiB0aGlzLmZpZWxkc1N0b3JlLmlzTW9kaWZpZWRGaWVsZCxcbiAgICB9O1xuICB9LFxufTtcblxuZnVuY3Rpb24gY3JlYXRlRm9ybShvcHRpb25zKSB7XG4gIHJldHVybiBjcmVhdGVCYXNlRm9ybShvcHRpb25zLCBbbWl4aW5dKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlRm9ybTtcbiJdfQ==