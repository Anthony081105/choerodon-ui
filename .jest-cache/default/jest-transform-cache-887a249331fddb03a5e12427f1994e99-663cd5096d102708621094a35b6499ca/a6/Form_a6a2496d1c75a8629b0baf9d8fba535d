8968b245770ccd26c1540255398d02f2
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _omit = _interopRequireDefault(require("lodash/omit"));

var _warning = _interopRequireDefault(require("../_util/warning"));

var _FormItem = _interopRequireDefault(require("./FormItem"));

var _constants = require("./constants");

var _form = require("../rc-components/form");

var _createDOMForm = _interopRequireDefault(require("../rc-components/form/createDOMForm"));

var _PureRenderMixin = _interopRequireDefault(require("../rc-components/util/PureRenderMixin"));

var _configure = require("../configure");

function _createSuper(Derived) {
  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  return function () {
    var Super = (0, _getPrototypeOf2["default"])(Derived),
        result;

    if (isNativeReflectConstruct()) {
      var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return (0, _possibleConstructorReturn2["default"])(this, result);
  };
}

var Form =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(Form, _Component);

  var _super = _createSuper(Form);

  function Form(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, Form);
    _this = _super.call(this, props);
    (0, _warning["default"])(!props.form, 'It is unnecessary to pass `form` to `Form`');
    return _this;
  }

  (0, _createClass2["default"])(Form, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _PureRenderMixin["default"].shouldComponentUpdate.apply(this, args);
    }
  }, {
    key: "getChildContext",
    value: function getChildContext() {
      var layout = this.props.layout;
      return {
        vertical: layout === 'vertical'
      };
    }
  }, {
    key: "render",
    value: function render() {
      var _classNames;

      var _this$props = this.props,
          customizePrefixCls = _this$props.prefixCls,
          hideRequiredMark = _this$props.hideRequiredMark,
          _this$props$className = _this$props.className,
          className = _this$props$className === void 0 ? '' : _this$props$className,
          layout = _this$props.layout;
      var prefixCls = (0, _configure.getPrefixCls)('form', customizePrefixCls);
      var formClassName = (0, _classnames["default"])(prefixCls, (_classNames = {}, (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-").concat(layout), layout), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-hide-required-mark"), hideRequiredMark), _classNames), className);
      var formProps = (0, _omit["default"])(this.props, ['prefixCls', 'className', 'layout', 'form', 'hideRequiredMark']);
      return _react["default"].createElement("form", (0, _extends2["default"])({}, formProps, {
        className: formClassName
      }));
    }
  }]);
  return Form;
}(_react.Component);

exports["default"] = Form;
Form.displayName = 'Form';
Form.defaultProps = {
  layout: "horizontal"
  /* horizontal */
  ,
  hideRequiredMark: false,
  onSubmit: function onSubmit(e) {
    e.preventDefault();
  }
};
Form.propTypes = {
  prefixCls: _propTypes["default"].string,
  layout: _propTypes["default"].oneOf(["horizontal"
  /* horizontal */
  , "inline"
  /* inline */
  , "vertical"
  /* vertical */
  ]),
  children: _propTypes["default"].any,
  onSubmit: _propTypes["default"].func,
  hideRequiredMark: _propTypes["default"].bool
};
Form.childContextTypes = {
  vertical: _propTypes["default"].bool
};
Form.Item = _FormItem["default"];
Form.createFormField = _form.createFormField;

Form.create = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return (0, _createDOMForm["default"])((0, _objectSpread2["default"])({
    fieldNameProp: 'id'
  }, options, {
    fieldMetaProp: _constants.FIELD_META_PROP,
    fieldDataProp: _constants.FIELD_DATA_PROP
  }));
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,