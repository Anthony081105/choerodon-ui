1b6f354bc1b2da3a233ddf2c1739fb4e
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = triggerPopTest;

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

function triggerPopTest(Component) {
  describe('Trigger Pop Test', function () {
    beforeAll(function () {
      jest.useFakeTimers();
    });
    var container;
    beforeEach(function () {
      container = document.createElement('div');
      document.body.appendChild(container);
    });
    afterAll(function () {
      jest.useRealTimers();
    });
    afterEach(function () {
      document.body.removeChild(container);
    });
    it('the Popup change event will trigger when {click, mousedown,mousemove,mouseenter,contextmenu }', function () {
      var handlePopupChange = jest.fn();
      var wrapper = (0, _enzyme.mount)(_react["default"].createElement(Component, {
        onPopupHiddenChange: handlePopupChange
      }));
      expect(handlePopupChange).not.toHaveBeenCalled();
      wrapper.find('input').simulate('click');
      jest.runAllTimers();
      expect(handlePopupChange).toHaveBeenCalled();
      wrapper.find('input').simulate('mousedown');
      jest.runAllTimers();
      expect(handlePopupChange).toHaveBeenCalled();
      wrapper.find('input').simulate('mouseenter');
      jest.runAllTimers();
      expect(handlePopupChange).toHaveBeenCalled();
      wrapper.find('input').simulate('mousemove');
      jest.runAllTimers();
      expect(handlePopupChange).toHaveBeenCalled();
      wrapper.find('input').simulate('contextmenu');
      jest.runAllTimers();
      expect(handlePopupChange).toHaveBeenCalled();
    });
    it('the Popup change can not trigger when the property readonly is true', function () {
      var handlePopupChange = jest.fn();
      var wrapper = (0, _enzyme.mount)(_react["default"].createElement(Component, {
        onPopupHiddenChange: handlePopupChange
      }));
      wrapper.setProps({
        readOnly: true
      });
      wrapper.find('input').simulate('click');
      jest.runAllTimers();
      expect(handlePopupChange).not.toHaveBeenCalled();
    });
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyaWdnZXJQb3BUZXN0LmpzIl0sIm5hbWVzIjpbInRyaWdnZXJQb3BUZXN0IiwiQ29tcG9uZW50IiwiZGVzY3JpYmUiLCJiZWZvcmVBbGwiLCJqZXN0IiwidXNlRmFrZVRpbWVycyIsImNvbnRhaW5lciIsImJlZm9yZUVhY2giLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJhZnRlckFsbCIsInVzZVJlYWxUaW1lcnMiLCJhZnRlckVhY2giLCJyZW1vdmVDaGlsZCIsIml0IiwiaGFuZGxlUG9wdXBDaGFuZ2UiLCJmbiIsIndyYXBwZXIiLCJleHBlY3QiLCJub3QiLCJ0b0hhdmVCZWVuQ2FsbGVkIiwiZmluZCIsInNpbXVsYXRlIiwicnVuQWxsVGltZXJzIiwic2V0UHJvcHMiLCJyZWFkT25seSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBRWUsU0FBU0EsY0FBVCxDQUF3QkMsU0FBeEIsRUFBbUM7QUFDaERDLEVBQUFBLFFBQVEsQ0FBQyxrQkFBRCxFQUFxQixZQUFNO0FBQ2pDQyxJQUFBQSxTQUFTLENBQUMsWUFBTTtBQUNkQyxNQUFBQSxJQUFJLENBQUNDLGFBQUw7QUFDRCxLQUZRLENBQVQ7QUFJQSxRQUFJQyxTQUFKO0FBQ0FDLElBQUFBLFVBQVUsQ0FBQyxZQUFNO0FBQ2ZELE1BQUFBLFNBQVMsR0FBR0UsUUFBUSxDQUFDQyxhQUFULENBQXVCLEtBQXZCLENBQVo7QUFDQUQsTUFBQUEsUUFBUSxDQUFDRSxJQUFULENBQWNDLFdBQWQsQ0FBMEJMLFNBQTFCO0FBQ0QsS0FIUyxDQUFWO0FBS0FNLElBQUFBLFFBQVEsQ0FBQyxZQUFNO0FBQ2JSLE1BQUFBLElBQUksQ0FBQ1MsYUFBTDtBQUNELEtBRk8sQ0FBUjtBQUlBQyxJQUFBQSxTQUFTLENBQUMsWUFBTTtBQUNkTixNQUFBQSxRQUFRLENBQUNFLElBQVQsQ0FBY0ssV0FBZCxDQUEwQlQsU0FBMUI7QUFDRCxLQUZRLENBQVQ7QUFJQVUsSUFBQUEsRUFBRSxDQUFDLCtGQUFELEVBQWtHLFlBQU07QUFDeEcsVUFBTUMsaUJBQWlCLEdBQUdiLElBQUksQ0FBQ2MsRUFBTCxFQUExQjtBQUNBLFVBQU1DLE9BQU8sR0FBRyxtQkFBTSxnQ0FBQyxTQUFEO0FBQVcsUUFBQSxtQkFBbUIsRUFBRUY7QUFBaEMsUUFBTixDQUFoQjtBQUNBRyxNQUFBQSxNQUFNLENBQUNILGlCQUFELENBQU4sQ0FBMEJJLEdBQTFCLENBQThCQyxnQkFBOUI7QUFFQUgsTUFBQUEsT0FBTyxDQUFDSSxJQUFSLENBQWEsT0FBYixFQUFzQkMsUUFBdEIsQ0FBK0IsT0FBL0I7QUFDQXBCLE1BQUFBLElBQUksQ0FBQ3FCLFlBQUw7QUFDQUwsTUFBQUEsTUFBTSxDQUFDSCxpQkFBRCxDQUFOLENBQTBCSyxnQkFBMUI7QUFFQUgsTUFBQUEsT0FBTyxDQUFDSSxJQUFSLENBQWEsT0FBYixFQUFzQkMsUUFBdEIsQ0FBK0IsV0FBL0I7QUFDQXBCLE1BQUFBLElBQUksQ0FBQ3FCLFlBQUw7QUFDQUwsTUFBQUEsTUFBTSxDQUFDSCxpQkFBRCxDQUFOLENBQTBCSyxnQkFBMUI7QUFFQUgsTUFBQUEsT0FBTyxDQUFDSSxJQUFSLENBQWEsT0FBYixFQUFzQkMsUUFBdEIsQ0FBK0IsWUFBL0I7QUFDQXBCLE1BQUFBLElBQUksQ0FBQ3FCLFlBQUw7QUFDQUwsTUFBQUEsTUFBTSxDQUFDSCxpQkFBRCxDQUFOLENBQTBCSyxnQkFBMUI7QUFFQUgsTUFBQUEsT0FBTyxDQUFDSSxJQUFSLENBQWEsT0FBYixFQUFzQkMsUUFBdEIsQ0FBK0IsV0FBL0I7QUFDQXBCLE1BQUFBLElBQUksQ0FBQ3FCLFlBQUw7QUFDQUwsTUFBQUEsTUFBTSxDQUFDSCxpQkFBRCxDQUFOLENBQTBCSyxnQkFBMUI7QUFFQUgsTUFBQUEsT0FBTyxDQUFDSSxJQUFSLENBQWEsT0FBYixFQUFzQkMsUUFBdEIsQ0FBK0IsYUFBL0I7QUFDQXBCLE1BQUFBLElBQUksQ0FBQ3FCLFlBQUw7QUFDQUwsTUFBQUEsTUFBTSxDQUFDSCxpQkFBRCxDQUFOLENBQTBCSyxnQkFBMUI7QUFDRCxLQXhCQyxDQUFGO0FBMEJBTixJQUFBQSxFQUFFLENBQUMscUVBQUQsRUFBd0UsWUFBTTtBQUM5RSxVQUFNQyxpQkFBaUIsR0FBR2IsSUFBSSxDQUFDYyxFQUFMLEVBQTFCO0FBQ0EsVUFBTUMsT0FBTyxHQUFHLG1CQUFNLGdDQUFDLFNBQUQ7QUFBVyxRQUFBLG1CQUFtQixFQUFFRjtBQUFoQyxRQUFOLENBQWhCO0FBRUFFLE1BQUFBLE9BQU8sQ0FBQ08sUUFBUixDQUFpQjtBQUFFQyxRQUFBQSxRQUFRLEVBQUU7QUFBWixPQUFqQjtBQUNBUixNQUFBQSxPQUFPLENBQUNJLElBQVIsQ0FBYSxPQUFiLEVBQXNCQyxRQUF0QixDQUErQixPQUEvQjtBQUNBcEIsTUFBQUEsSUFBSSxDQUFDcUIsWUFBTDtBQUNBTCxNQUFBQSxNQUFNLENBQUNILGlCQUFELENBQU4sQ0FBMEJJLEdBQTFCLENBQThCQyxnQkFBOUI7QUFDRCxLQVJDLENBQUY7QUFTRCxHQXRETyxDQUFSO0FBdUREIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IG1vdW50IH0gZnJvbSAnZW56eW1lJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJpZ2dlclBvcFRlc3QoQ29tcG9uZW50KSB7XG4gIGRlc2NyaWJlKCdUcmlnZ2VyIFBvcCBUZXN0JywgKCkgPT4ge1xuICAgIGJlZm9yZUFsbCgoKSA9PiB7XG4gICAgICBqZXN0LnVzZUZha2VUaW1lcnMoKTtcbiAgICB9KTtcblxuICAgIGxldCBjb250YWluZXI7XG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcbiAgICB9KTtcblxuICAgIGFmdGVyQWxsKCgpID0+IHtcbiAgICAgIGplc3QudXNlUmVhbFRpbWVycygpO1xuICAgIH0pO1xuXG4gICAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoY29udGFpbmVyKTtcbiAgICB9KTtcblxuICAgIGl0KCd0aGUgUG9wdXAgY2hhbmdlIGV2ZW50IHdpbGwgdHJpZ2dlciB3aGVuIHtjbGljaywgbW91c2Vkb3duLG1vdXNlbW92ZSxtb3VzZWVudGVyLGNvbnRleHRtZW51IH0nLCAoKSA9PiB7XG4gICAgICBjb25zdCBoYW5kbGVQb3B1cENoYW5nZSA9IGplc3QuZm4oKTtcbiAgICAgIGNvbnN0IHdyYXBwZXIgPSBtb3VudCg8Q29tcG9uZW50IG9uUG9wdXBIaWRkZW5DaGFuZ2U9e2hhbmRsZVBvcHVwQ2hhbmdlfSAvPik7XG4gICAgICBleHBlY3QoaGFuZGxlUG9wdXBDaGFuZ2UpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG5cbiAgICAgIHdyYXBwZXIuZmluZCgnaW5wdXQnKS5zaW11bGF0ZSgnY2xpY2snKTtcbiAgICAgIGplc3QucnVuQWxsVGltZXJzKCk7XG4gICAgICBleHBlY3QoaGFuZGxlUG9wdXBDaGFuZ2UpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcblxuICAgICAgd3JhcHBlci5maW5kKCdpbnB1dCcpLnNpbXVsYXRlKCdtb3VzZWRvd24nKTtcbiAgICAgIGplc3QucnVuQWxsVGltZXJzKCk7XG4gICAgICBleHBlY3QoaGFuZGxlUG9wdXBDaGFuZ2UpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcblxuICAgICAgd3JhcHBlci5maW5kKCdpbnB1dCcpLnNpbXVsYXRlKCdtb3VzZWVudGVyJyk7XG4gICAgICBqZXN0LnJ1bkFsbFRpbWVycygpO1xuICAgICAgZXhwZWN0KGhhbmRsZVBvcHVwQ2hhbmdlKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG5cbiAgICAgIHdyYXBwZXIuZmluZCgnaW5wdXQnKS5zaW11bGF0ZSgnbW91c2Vtb3ZlJyk7XG4gICAgICBqZXN0LnJ1bkFsbFRpbWVycygpO1xuICAgICAgZXhwZWN0KGhhbmRsZVBvcHVwQ2hhbmdlKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG5cbiAgICAgIHdyYXBwZXIuZmluZCgnaW5wdXQnKS5zaW11bGF0ZSgnY29udGV4dG1lbnUnKTtcbiAgICAgIGplc3QucnVuQWxsVGltZXJzKCk7XG4gICAgICBleHBlY3QoaGFuZGxlUG9wdXBDaGFuZ2UpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KCd0aGUgUG9wdXAgY2hhbmdlIGNhbiBub3QgdHJpZ2dlciB3aGVuIHRoZSBwcm9wZXJ0eSByZWFkb25seSBpcyB0cnVlJywgKCkgPT4ge1xuICAgICAgY29uc3QgaGFuZGxlUG9wdXBDaGFuZ2UgPSBqZXN0LmZuKCk7XG4gICAgICBjb25zdCB3cmFwcGVyID0gbW91bnQoPENvbXBvbmVudCBvblBvcHVwSGlkZGVuQ2hhbmdlPXtoYW5kbGVQb3B1cENoYW5nZX0gLz4pO1xuXG4gICAgICB3cmFwcGVyLnNldFByb3BzKHsgcmVhZE9ubHk6IHRydWUgfSk7XG4gICAgICB3cmFwcGVyLmZpbmQoJ2lucHV0Jykuc2ltdWxhdGUoJ2NsaWNrJyk7XG4gICAgICBqZXN0LnJ1bkFsbFRpbWVycygpO1xuICAgICAgZXhwZWN0KGhhbmRsZVBvcHVwQ2hhbmdlKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuICB9KTtcbn1cbiJdfQ==