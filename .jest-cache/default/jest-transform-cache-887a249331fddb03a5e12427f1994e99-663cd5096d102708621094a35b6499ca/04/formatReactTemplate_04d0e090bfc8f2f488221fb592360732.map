{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/formatter/formatReactTemplate.tsx"],"names":[],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEc,SAAU,mBAAV,CACZ,QADY,EAEZ,GAFY,EAEqB;AAEjC,MAAI,MAAM,GAAgB,CAAC,QAAD,CAA1B;AACA,EAAA,MAAM,CAAC,IAAP,CAAY,GAAZ,EAAiB,OAAjB,CAAyB,UAAA,GAAG,EAAG;AAC7B,QAAM,IAAI,GAAG,GAAG,CAAC,GAAD,CAAhB;;AACA,QAAI,CAAC,uBAAM,IAAN,CAAL,EAAkB;AAChB,MAAA,MAAM,GAAG,yBAAQ,MAAR,EAAgB,UAAA,IAAI,EAAG;AAC9B,YAAI,0BAAS,IAAT,CAAJ,EAAoB;AAClB,cAAI,UAAU,GAAG,IAAjB;;AACA,cAAI,2BAAe,IAAf,CAAJ,EAA0B;AACxB,gBAAM,WAAW,cAAO,GAAP,MAAjB;AADwB,gBAEhB,MAFgB,GAEL,WAFK,CAEhB,MAFgB;AAGxB,gBAAM,OAAO,GAAgB,EAA7B;AACA,gBAAI,KAAK,GAAG,UAAU,CAAC,OAAX,CAAmB,WAAnB,CAAZ;;AACA,mBAAO,KAAK,GAAG,CAAC,CAAhB,EAAmB;AACjB,kBAAI,KAAK,GAAG,CAAZ,EAAe;AACb,gBAAA,OAAO,CAAC,IAAR,CAAa,UAAU,CAAC,KAAX,CAAiB,CAAjB,EAAoB,KAApB,CAAb;AACD;;AACD,cAAA,OAAO,CAAC,IAAR,CAAa,IAAb;AACA,cAAA,UAAU,GAAG,UAAU,CAAC,KAAX,CAAiB,KAAK,GAAG,MAAzB,CAAb;AACA,cAAA,KAAK,GAAG,UAAU,CAAC,OAAX,CAAmB,WAAnB,CAAR;AACD;;AACD,gBAAI,UAAJ,EAAgB;AACd,cAAA,OAAO,CAAC,IAAR,CAAa,UAAb;AACD;;AACD,mBAAO,OAAP;AACD;;AACD,iBAAO,gCAAO,IAAP,EAAa,GAAb,CAAP;AACD;;AACD,eAAO,IAAP;AACD,OAxBQ,CAAT;AAyBD;AACF,GA7BD;;AA8BA,MAAI,MAAM,CAAC,KAAP,CAAa,oBAAb,CAAJ,EAA4B;AAC1B,WAAO,MAAM,CAAC,IAAP,CAAY,EAAZ,CAAP;AACD;;AACD,SAAO,oCAAc,eAAd,EAAwB,EAAxB,6CAA+B,MAA/B,GAAP;AACD","sourcesContent":["import { createElement, Fragment, isValidElement, ReactNode } from 'react';\nimport format from 'string-template';\nimport isString from 'lodash/isString';\nimport isNil from 'lodash/isNil';\nimport flatMap from 'lodash/flatMap';\n\nexport default function formatReactTemplate(\n  template: string,\n  map: { [key: string]: ReactNode },\n): ReactNode {\n  let result: ReactNode[] = [template];\n  Object.keys(map).forEach(key => {\n    const node = map[key];\n    if (!isNil(node)) {\n      result = flatMap(result, text => {\n        if (isString(text)) {\n          let stringText = text;\n          if (isValidElement(node)) {\n            const placeholder = `{${key}}`;\n            const { length } = placeholder;\n            const textArr: ReactNode[] = [];\n            let index = stringText.indexOf(placeholder);\n            while (index > -1) {\n              if (index > 0) {\n                textArr.push(stringText.slice(0, index));\n              }\n              textArr.push(node);\n              stringText = stringText.slice(index + length);\n              index = stringText.indexOf(placeholder);\n            }\n            if (stringText) {\n              textArr.push(stringText);\n            }\n            return textArr;\n          }\n          return format(text, map);\n        }\n        return text;\n      });\n    }\n  });\n  if (result.every(isString)) {\n    return result.join('');\n  }\n  return createElement(Fragment, {}, ...result);\n}\n"]}