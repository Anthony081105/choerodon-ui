{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components/_util/TaskRunner.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;IAAqB,U;;;AAOnB,sBAAY,EAAZ,EAAyB;AAAA;AAFzB,SAAA,SAAA,GAA2B,EAA3B;;AAGE,QAAI,EAAJ,EAAQ;AACN,WAAK,EAAL,GAAU,EAAV;AACD;AACF;;;;;;;oDAEW,M,EAAe,E,EAAe,Q;;;;;iDACjC,KAAK,KAAL,CAAW,IAAX,EAAiB,MAAjB,EAAwB,EAAxB,EAA4B,QAA5B,C;;;;;;;;;;;;;;;;;;;;;qDAGC,Q,EAAkB,E,EAAe,Q;;;;;kDAClC,KAAK,KAAL,CAAW,KAAX,EAAkB,QAAlB,EAA4B,EAA5B,EAAgC,QAAhC,C;;;;;;;;;;;;;;;;;;;;;qDAGG,I,EAAe,Q,EAAkB,E,EAAe,Q;;;;;;;AAC1D,qBAAK,MAAL;;AACA,oBAAI,EAAJ,EAAQ;AACN,uBAAK,EAAL,GAAU,EAAV;AACD;;AACD,oBAAI,OAAO,QAAP,KAAoB,UAAxB,EAAoC;AAClC,uBAAK,SAAL,CAAe,IAAf,CAAoB,QAApB;AACD;;qBACG,KAAK,E;;;;;kDACA,IAAI,OAAJ,CAAY,UAAA,OAAO,EAAG;AAC3B,kBAAA,KAAI,CAAC,EAAL,GAAU,WAAW,CAAC,YAAK;AACzB,wBAAI,IAAJ,EAAU;AACR,sBAAA,KAAI,CAAC,MAAL;AACD;;AACD,oBAAA,OAAO,CAAC,KAAI,CAAC,EAAL,EAAD,CAAP;;AACA,oBAAA,KAAI,CAAC,SAAL,CAAe,OAAf,CAAuB,UAAA,EAAE;AAAA,6BAAI,EAAE,EAAN;AAAA,qBAAzB;;AACA,oBAAA,KAAI,CAAC,SAAL,GAAiB,EAAjB;AACD,mBAPoB,EAOlB,QAPkB,CAArB;AAQD,iBATM,C;;;kDAWF,OAAO,CAAC,MAAR,CAAe,IAAI,KAAJ,CAAU,WAAV,CAAf,C;;;;;;;;;;;;;;;;;;6BAGH;AACJ,UAAI,KAAK,EAAT,EAAa;AACX,QAAA,aAAa,CAAC,KAAK,EAAN,CAAb;AACA,eAAO,KAAK,EAAZ;AACD;;AACD,aAAO,IAAP;AACD","sourcesContent":["export default class TaskRunner {\n  id: NodeJS.Timeout;\n\n  fn: Function;\n\n  callbacks: (() => any)[] = [];\n\n  constructor(fn?: Function) {\n    if (fn) {\n      this.fn = fn;\n    }\n  }\n\n  async delay(delay: number, fn?: Function, callback?: () => any) {\n    return this.start(true, delay, fn, callback);\n  }\n\n  async run(interval: number, fn?: Function, callback?: () => any) {\n    return this.start(false, interval, fn, callback);\n  }\n\n  async start(once: boolean, interval: number, fn?: Function, callback?: () => any) {\n    this.cancel();\n    if (fn) {\n      this.fn = fn;\n    }\n    if (typeof callback === 'function') {\n      this.callbacks.push(callback);\n    }\n    if (this.fn) {\n      return new Promise(resolve => {\n        this.id = setInterval(() => {\n          if (once) {\n            this.cancel();\n          }\n          resolve(this.fn());\n          this.callbacks.forEach(cb => cb());\n          this.callbacks = [];\n        }, interval);\n      });\n    }\n    return Promise.reject(new Error('no caller'));\n  }\n\n  cancel() {\n    if (this.id) {\n      clearInterval(this.id);\n      delete this.id;\n    }\n    return this;\n  }\n}\n"]}