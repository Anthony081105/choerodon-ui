{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/tree/util.tsx"],"names":[],"mappings":";;;;;;;;;;AAAA;;AACA;;AAUM,SAAU,MAAV,CAAiB,MAAjB,EAAyB,OAAzB,EAAgC;AACpC,SAAO,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC,GAAP,CAAW,OAAX,CAAH,GAAyB,MAAM,CAAC,EAAxC,CAAb;AACD;;AAED,SAAS,WAAT,CAAqB,MAArB,EAA6B,QAA7B,EAAuC,OAAvC,EAAgD,IAAhD,EAAoD;AAClD,MAAM,GAAG,GAAG,MAAM,CAAC,MAAD,EAAS,OAAT,CAAlB;AACA,SACE,kBAAA,aAAA,CAAC,cAAD,EAAS;AACP,IAAA,KAAK,EAAE,IADA;AAEP,IAAA,GAAG,EAAE,GAFE;AAGP,IAAA,QAAQ,EAAE,GAHH;AAIP;AACA,IAAA,WAAW,EAAE,CAAC,CAAC,MAAM,CAAC,QALf;AAMP,IAAA,UAAU,EAAE,CAAC,EAAE,MAAM,CAAC,OAAP,CAAe,SAAf,GAAyB,MAAM,CAAC,UAAhC,GAA2C,KAA7C;AANN,GAAT,EAQG,QARH,CADF;AAYD;;AAEK,SAAU,YAAV,CACJ,OADI,EAKe;AAAA,MAHnB,OAGmB,uEAHC,EAGD;AAAA,MAFnB,eAEmB;AAAA,MADnB,QACmB;AAAA,MAAnB,UAAmB;AAAA,MAEX,OAFW,GAEC,OAAO,CAAC,KAFT,CAEX,OAFW;AAGnB,SAAO,OAAO,CAAC,GAAR,CAAY,UAAA,MAAM,EAAG;AAC1B,QAAM,QAAQ,GACZ,eAAe,CAAC,OAAhB,CAAwB,MAAM,CAAC,MAAD,EAAS,OAAT,CAA9B,MAAqD,CAAC,CAAtD,GACI,YAAY,CAAC,OAAD,EAAU,MAAM,CAAC,QAAjB,EAA2B,eAA3B,EAA4C,QAA5C,CADhB,GAEI,IAHN;AAIA,WAAO,WAAW,CAChB,MADgB,EAEhB,QAFgB,EAGhB,OAHgB,EAIhB,QAAQ,CAAC;AAAE,MAAA,OAAO,EAAP,OAAF;AAAW,MAAA,MAAM,EAAN,MAAX;AAAmB,MAAA,IAAI,EAAE,MAAM,CAAC,GAAP,CAAW,UAAX;AAAzB,KAAD,CAJQ,CAAlB;AAMD,GAXM,CAAP;AAYD","sourcesContent":["import React, { ReactNode } from 'react';\nimport { TreeNode } from 'choerodon-ui/lib/tree';\nimport Record from '../data-set/Record';\nimport DataSet from '../data-set/DataSet';\n\nexport type NodeRenderer = (props: {\n  record?: Record | null;\n  dataSet?: DataSet | null;\n  text?: string;\n}) => ReactNode;\n\nexport function getKey(record, idField) {\n  return String(idField ? record.get(idField) : record.id);\n}\n\nfunction getTreeNode(record, children, idField, text) {\n  const key = getKey(record, idField);\n  return (\n    <TreeNode\n      title={text}\n      key={key}\n      eventKey={key}\n      // @ts-ignore\n      hasChildren={!!record.children}\n      selectable={!!(record.dataSet.selection?record.selectable:false)}\n    >\n      {children}\n    </TreeNode>\n  );\n}\n\nexport function getTreeNodes(\n  dataSet: DataSet,\n  records: Record[] = [],\n  forceRenderKeys: string[],\n  renderer: NodeRenderer,\n  titleField?: string,\n) {\n  const { idField } = dataSet.props;\n  return records.map(record => {\n    const children =\n      forceRenderKeys.indexOf(getKey(record, idField)) !== -1\n        ? getTreeNodes(dataSet, record.children, forceRenderKeys, renderer)\n        : null;\n    return getTreeNode(\n      record,\n      children,\n      idField,\n      renderer({ dataSet, record, text: record.get(titleField) }),\n    );\n  });\n}\n"]}