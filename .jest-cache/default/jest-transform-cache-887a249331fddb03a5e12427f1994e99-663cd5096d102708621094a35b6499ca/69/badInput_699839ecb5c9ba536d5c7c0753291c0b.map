{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/validator/rules/badInput.tsx"],"names":[],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AAGA,IAAM,UAAU,GAAG,SAAb,UAAa,CAAC,KAAD,EAAQ,KAAR,EAAiB;AAClC,MAAI,KAAJ,EAAW;AACT,WAAO,yBAAa,KAAb,EAAoB,KAApB,EAA2B,IAA3B,CAAgC,UAAA,IAAI;AAAA,aAAI,CAAC,yBAAQ,IAAR,CAAD,IAAkB,KAAK,CAAC,IAAD,CAA3B;AAAA,KAApC,CAAP;AACD;;AACD,SAAO,CAAC,yBAAQ,KAAR,CAAD,IAAmB,KAAK,CAAC,KAAD,CAA/B;AACD,CALD;;AAOc,SAAU,QAAV,CAAmB,KAAnB,EAA+B,KAA/B,EAAoD;AAAA,MACxD,IADwD,GACb,KADa,CACxD,IADwD;AAAA,MAClD,yBADkD,GACb,KADa,CAClD,yBADkD;AAAA,MACvB,KADuB,GACb,KADa,CACvB,KADuB;;AAEhE,MAAI,IAAI,KAAA;AAAA;AAAJ,KAA6B,UAAU,CAAC,KAAD,EAAQ,KAAR,CAA3C,EAA2D;AACzD,QAAM,QAAQ,GAAG,UAAjB;AADyD,gCAIrD,yBAJqD,CAGtD,QAHsD;AAAA,QAG3C,iBAH2C,sCAGvB,uBAAG,WAAH,EAAgB,WAAhB,CAHuB;AAKzD,WAAO,IAAI,4BAAJ,CAAqB;AAC1B,MAAA,iBAAiB,EAAjB,iBAD0B;AAE1B,MAAA,KAAK,EAAL,KAF0B;AAG1B,MAAA,QAAQ,EAAR;AAH0B,KAArB,CAAP;AAKD;;AACD,SAAO,IAAP;AACD","sourcesContent":["import isEmpty from '../../_util/isEmpty';\nimport ValidationResult from '../ValidationResult';\nimport { $l } from '../../locale-context';\nimport { FieldType } from '../../data-set/enum';\nimport { toRangeValue } from '../../field/utils';\nimport { methodReturn, ValidatorProps } from '.';\n\nconst isBadInput = (value, range) => {\n  if (range) {\n    return toRangeValue(value, range).some(item => !isEmpty(item) && isNaN(item));\n  }\n  return !isEmpty(value) && isNaN(value);\n};\n\nexport default function badInput(value: any, props: ValidatorProps): methodReturn {\n  const { type, defaultValidationMessages, range } = props;\n  if (type === FieldType.number && isBadInput(value, range)) {\n    const ruleName = 'badInput';\n    const {\n      [ruleName]: validationMessage = $l('Validator', 'bad_input'),\n    } = defaultValidationMessages;\n    return new ValidationResult({\n      validationMessage,\n      value,\n      ruleName,\n    });\n  }\n  return true;\n}\n"]}