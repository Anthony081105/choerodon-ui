{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/validator/rules/index.tsx"],"names":[],"mappings":";;;;;;;;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAaA,IAAM,eAAe,GAAqB,CACxC,oBADwC,EAExC,2BAFwC,EAGxC,yBAHwC,EAIxC,0BAJwC,EAKxC,wBALwC,EAMxC,mBANwC,EAOxC,oBAPwC,EAQxC,wBARwC,EASxC,uBATwC,EAUxC,uBAVwC,CAA1C;eAae,e","sourcesContent":["import { ReactNode } from 'react';\nimport { Moment } from 'moment';\nimport badInput from './badInput';\nimport patternMismatch from './patternMismatch';\nimport rangeOverflow from './rangeOverflow';\nimport rangeUnderflow from './rangeUnderflow';\nimport stepMismatch from './stepMismatch';\nimport tooLong from './tooLong';\nimport tooShort from './tooShort';\nimport typeMismatch from './typeMismatch';\nimport customError from './customError';\nimport uniqueError from './uniqueError';\nimport ValidationResult from '../ValidationResult';\nimport { FieldType } from '../../data-set/enum';\nimport DataSet from '../../data-set/DataSet';\nimport Record from '../../data-set/Record';\nimport Form from '../../form/Form';\nimport { CustomValidator, ValidationMessages } from '../Validator';\nimport { TimeStep } from '../../date-picker/DatePicker';\n\nexport type methodReturn = ValidationResult | true;\n\nexport type validationRule = (value, props) => methodReturn | PromiseLike<methodReturn>;\n\nconst validationRules: validationRule[] = [\n  badInput,\n  patternMismatch,\n  rangeOverflow,\n  rangeUnderflow,\n  stepMismatch,\n  tooLong,\n  tooShort,\n  typeMismatch,\n  customError,\n  uniqueError,\n];\n\nexport default validationRules;\n\nexport interface ValidatorProps {\n  type?: FieldType;\n  required?: boolean;\n  pattern?: string | RegExp;\n  min?: number | Moment | null;\n  max?: number | Moment | null;\n  step?: number | TimeStep;\n  minLength?: number;\n  maxLength?: number;\n  dataSet?: DataSet;\n  record?: Record;\n  name?: string;\n  unique?: boolean | string;\n  label?: ReactNode;\n  customValidator?: CustomValidator;\n  multiple?: boolean;\n  range?: boolean | [string, string];\n  form?: Form;\n  format?: string;\n  defaultValidationMessages: ValidationMessages;\n}\n"]}