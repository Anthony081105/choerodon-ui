{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components/transfer/search.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;IAUqB,M;;;;;AAArB,oBAAA;AAAA;;AAAA;;;AAKE,UAAA,YAAA,GAAe,UAAC,CAAD,EAAqC;AAAA,UAC1C,QAD0C,GAC7B,MAAK,KADwB,CAC1C,QAD0C;;AAElD,UAAI,QAAJ,EAAc;AACZ,QAAA,QAAQ,CAAC,CAAD,CAAR;AACD;AACF,KALD;;AAOA,UAAA,WAAA,GAAoD,UAAA,CAAC,EAAG;AACtD,MAAA,CAAC,CAAC,cAAF;AADsD,UAG9C,WAH8C,GAG9B,MAAK,KAHyB,CAG9C,WAH8C;;AAItD,UAAI,WAAJ,EAAiB;AACf,QAAA,WAAW,CAAC,CAAD,CAAX;AACD;AACF,KAPD;;AAZF;AA8CC;;;;6BAzBO;AAAA,wBACsC,KAAK,KAD3C;AAAA,UACI,WADJ,eACI,WADJ;AAAA,UACiB,KADjB,eACiB,KADjB;AAAA,UACwB,SADxB,eACwB,SADxB;AAEJ,UAAM,IAAI,GACR,KAAK,IAAI,KAAK,CAAC,MAAN,GAAe,CAAxB,GACE,kBAAA,aAAA,CAAA,GAAA,EAAA;AAAG,QAAA,IAAI,EAAC,GAAR;AAAY,QAAA,SAAS,YAAK,SAAL,YAArB;AAA8C,QAAA,OAAO,EAAE,KAAK;AAA5D,OAAA,EACE,kBAAA,aAAA,CAAC,gBAAD,EAAK;AAAC,QAAA,IAAI,EAAC;AAAN,OAAL,CADF,CADF,GAKE,kBAAA,aAAA,CAAA,MAAA,EAAA;AAAM,QAAA,SAAS,YAAK,SAAL;AAAf,OAAA,EACE,kBAAA,aAAA,CAAC,gBAAD,EAAK;AAAC,QAAA,IAAI,EAAC;AAAN,OAAL,CADF,CANJ;AAWA,aACE,kBAAA,aAAA,CAAA,KAAA,EAAA,IAAA,EACE,kBAAA,aAAA,CAAC,iBAAD,EAAM;AACJ,QAAA,WAAW,EAAE,WADT;AAEJ,QAAA,SAAS,EAAE,SAFP;AAGJ,QAAA,KAAK,EAAE,KAHH;AAIJ,QAAA,QAAQ,EAAE,KAAK;AAJX,OAAN,CADF,EAOG,IAPH,CADF;AAWD;;;EA7CiC,gB;;;AAC3B,MAAA,CAAA,YAAA,GAAe;AACpB,EAAA,WAAW,EAAE;AADO,CAAf","sourcesContent":["import React, { ChangeEvent, Component, FormEvent, MouseEventHandler } from 'react';\nimport Icon from '../icon';\nimport Input from '../input';\n\nexport interface TransferSearchProps {\n  prefixCls?: string;\n  placeholder?: string;\n  onChange?: (e: FormEvent<any>) => void;\n  handleClear?: MouseEventHandler<any>;\n  value?: any;\n}\n\nexport default class Search extends Component<TransferSearchProps, any> {\n  static defaultProps = {\n    placeholder: '',\n  };\n\n  handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const { onChange } = this.props;\n    if (onChange) {\n      onChange(e);\n    }\n  };\n\n  handleClear: MouseEventHandler<HTMLAnchorElement> = e => {\n    e.preventDefault();\n\n    const { handleClear } = this.props;\n    if (handleClear) {\n      handleClear(e);\n    }\n  };\n\n  render() {\n    const { placeholder, value, prefixCls } = this.props;\n    const icon =\n      value && value.length > 0 ? (\n        <a href=\"#\" className={`${prefixCls}-action`} onClick={this.handleClear}>\n          <Icon type=\"cross-circle\" />\n        </a>\n      ) : (\n        <span className={`${prefixCls}-action`}>\n          <Icon type=\"search\" />\n        </span>\n      );\n\n    return (\n      <div>\n        <Input\n          placeholder={placeholder}\n          className={prefixCls}\n          value={value}\n          onChange={this.handleChange}\n        />\n        {icon}\n      </div>\n    );\n  }\n}\n"]}