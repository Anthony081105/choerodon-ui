{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/validator/rules/uniqueError.tsx"],"names":[],"mappings":"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","sourcesContent":["import isString from 'lodash/isString';\nimport ValidationResult from '../ValidationResult';\nimport { $l } from '../../locale-context';\nimport isEmpty from '../../_util/isEmpty';\nimport { methodReturn, ValidatorProps } from '.';\nimport { axiosConfigAdapter } from '../../data-set/utils';\nimport { FieldType } from '../../data-set/enum';\n\nexport default async function uniqueError(\n  value: any,\n  props: ValidatorProps,\n): Promise<methodReturn> {\n  const { dataSet, record, unique, name, multiple, range, defaultValidationMessages } = props;\n  if (!isEmpty(value) && dataSet && record && unique && name && !multiple && !range) {\n    const myField = record.getField(name);\n    if (myField && myField.get('type') === FieldType.object) {\n      value = value[myField.get('valueField')];\n    }\n    if (myField) {\n      let { dirty } = myField;\n      const fields = { [name]: value };\n      if (\n        isString(unique) &&\n        [...record.fields.entries()].some(([fieldName, field]) => {\n          if (\n            fieldName !== name &&\n            field &&\n            field.get('unique') === unique &&\n            !field.get('multiple') &&\n            !field.get('range')\n          ) {\n            const otherValue = record.get(fieldName);\n            if (isEmpty(otherValue)) {\n              return true;\n            }\n            if (!dirty && field.dirty) {\n              dirty = true;\n            }\n            fields[fieldName] = otherValue;\n          }\n          return false;\n        })\n      ) {\n        return true;\n      }\n      if (!dirty) {\n        return true;\n      }\n      let invalid = dataSet.data.some(\n        item =>\n          item !== record &&\n          Object.keys(fields).every(field => {\n            const dataSetField = record.getField(name);\n            if (dataSetField && dataSetField.get('type') === FieldType.object) {\n              const valueField = dataSetField.get('valueField');\n              return fields[field] === item.get(field)[valueField];\n            }\n            return fields[field] === item.get(field);\n          }),\n      );\n      if (!invalid) {\n        const newConfig = axiosConfigAdapter('validate', dataSet, { unique: [fields] });\n        if (newConfig.url) {\n          const results: any = await dataSet.axios(newConfig);\n          invalid = [].concat(results).some(result => !result);\n        }\n      }\n      if (invalid) {\n        const ruleName = 'uniqueError';\n        const {\n          [ruleName]: validationMessage = $l('Validator', 'unique'),\n        } = defaultValidationMessages;\n        return new ValidationResult({\n          validationMessage,\n          value,\n          ruleName,\n        });\n      }\n    }\n  }\n  return true;\n}\n"]}