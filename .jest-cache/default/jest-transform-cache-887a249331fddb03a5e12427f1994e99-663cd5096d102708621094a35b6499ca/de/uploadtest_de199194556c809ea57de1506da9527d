e93b5ac4b19429eae191c100034cfc11
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _ = _interopRequireDefault(require(".."));

/* eslint-disable react/no-string-refs, react/prefer-es6-class */
describe('Upload', function () {
  // https://github.com/react-component/upload/issues/36
  it('should get refs inside Upload in componentDidMount', function () {
    var ref;

    var App =
    /*#__PURE__*/
    function (_React$Component) {
      (0, _inherits2["default"])(App, _React$Component);

      function App() {
        (0, _classCallCheck2["default"])(this, App);
        return (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(App).apply(this, arguments));
      }

      (0, _createClass2["default"])(App, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          ref = this.refs.input;
        }
      }, {
        key: "render",
        value: function render() {
          return _react["default"].createElement(_["default"], {
            supportServerRender: false
          }, _react["default"].createElement("input", {
            ref: "input"
          }));
        }
      }]);
      return App;
    }(_react["default"].Component);

    (0, _enzyme.mount)(_react["default"].createElement(App, null));
    expect(ref).toBeDefined();
  });
  it('return promise in beforeUpload', function () {
    var data = jest.fn();
    var props = {
      action: 'http://upload.com',
      beforeUpload: function beforeUpload() {
        return new Promise(function (resolve) {
          return setTimeout(function () {
            return resolve('success');
          }, 100);
        });
      },
      data: data,
      onChange: function onChange(_ref) {
        var file = _ref.file;

        if (file.status !== 'uploading') {
          expect(data).toHaveBeenCalled();
        }
      }
    };
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], props, _react["default"].createElement("button", {
      type: "button"
    }, "upload")));
    wrapper.find('input').simulate('change', {
      target: {
        files: [{
          filename: 'foo.png'
        }]
      }
    });
  });
  it('should not stop upload when return value of beforeUpload is false', function (done) {
    var data = jest.fn();
    var props = {
      action: 'http://upload.com',
      beforeUpload: function beforeUpload() {
        return false;
      },
      data: data,
      onChange: function onChange() {
        expect(data).not.toHaveBeenCalled();
        done();
      }
    };
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], props, _react["default"].createElement("button", {
      type: "button"
    }, "upload")));
    wrapper.find('input').simulate('change', {
      target: {
        files: [{
          filename: 'foo.png'
        }]
      }
    });
  });
  it('should not stop upload when return value of beforeUpload is not false', function (done) {
    var data = jest.fn();
    var props = {
      action: 'http://upload.com',
      beforeUpload: function beforeUpload() {},
      data: data,
      onChange: function onChange() {
        expect(data).toHaveBeenCalled();
        done();
      }
    };
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], props, _react["default"].createElement("button", {
      type: "button"
    }, "upload")));
    wrapper.find('input').simulate('change', {
      target: {
        files: [{
          filename: 'foo.png'
        }]
      }
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVwbG9hZC50ZXN0LmpzIl0sIm5hbWVzIjpbImRlc2NyaWJlIiwiaXQiLCJyZWYiLCJBcHAiLCJyZWZzIiwiaW5wdXQiLCJSZWFjdCIsIkNvbXBvbmVudCIsImV4cGVjdCIsInRvQmVEZWZpbmVkIiwiZGF0YSIsImplc3QiLCJmbiIsInByb3BzIiwiYWN0aW9uIiwiYmVmb3JlVXBsb2FkIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0Iiwib25DaGFuZ2UiLCJmaWxlIiwic3RhdHVzIiwidG9IYXZlQmVlbkNhbGxlZCIsIndyYXBwZXIiLCJmaW5kIiwic2ltdWxhdGUiLCJ0YXJnZXQiLCJmaWxlcyIsImZpbGVuYW1lIiwiZG9uZSIsIm5vdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFDQTs7QUFDQTs7QUFDQTs7QUFIQTtBQUtBQSxRQUFRLENBQUMsUUFBRCxFQUFXLFlBQU07QUFDdkI7QUFDQUMsRUFBQUEsRUFBRSxDQUFDLG9EQUFELEVBQXVELFlBQU07QUFDN0QsUUFBSUMsR0FBSjs7QUFENkQsUUFFdkRDLEdBRnVEO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQSw0Q0FHdkM7QUFDbEJELFVBQUFBLEdBQUcsR0FBRyxLQUFLRSxJQUFMLENBQVVDLEtBQWhCO0FBQ0Q7QUFMMEQ7QUFBQTtBQUFBLGlDQU9sRDtBQUNQLGlCQUNFLGdDQUFDLFlBQUQ7QUFBUSxZQUFBLG1CQUFtQixFQUFFO0FBQTdCLGFBQ0U7QUFBTyxZQUFBLEdBQUcsRUFBQztBQUFYLFlBREYsQ0FERjtBQUtEO0FBYjBEO0FBQUE7QUFBQSxNQUUzQ0Msa0JBQU1DLFNBRnFDOztBQWU3RCx1QkFBTSxnQ0FBQyxHQUFELE9BQU47QUFDQUMsSUFBQUEsTUFBTSxDQUFDTixHQUFELENBQU4sQ0FBWU8sV0FBWjtBQUNELEdBakJDLENBQUY7QUFtQkFSLEVBQUFBLEVBQUUsQ0FBQyxnQ0FBRCxFQUFtQyxZQUFNO0FBQ3pDLFFB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QyxRQUF0QixDQUErQixRQUEvQixFQUF5QztBQUN2Q0MsTUFBQUEsTUFBTSxFQUFFO0FBQ05DLFFBQUFBLEtBQUssRUFBRSxDQUFDO0FBQUVDLFVBQUFBLFFBQVEsRUFBRTtBQUFaLFNBQUQ7QUFERDtBQUQrQixLQUF6QztBQUtELEdBdkJDLENBQUY7QUF3QkQsQ0FoR08sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIHJlYWN0L25vLXN0cmluZy1yZWZzLCByZWFjdC9wcmVmZXItZXM2LWNsYXNzICovXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgbW91bnQgfSBmcm9tICdlbnp5bWUnO1xuaW1wb3J0IFVwbG9hZCBmcm9tICcuLic7XG5cbmRlc2NyaWJlKCdVcGxvYWQnLCAoKSA9PiB7XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdC1jb21wb25lbnQvdXBsb2FkL2lzc3Vlcy8zNlxuICBpdCgnc2hvdWxkIGdldCByZWZzIGluc2lkZSBVcGxvYWQgaW4gY29tcG9uZW50RGlkTW91bnQnLCAoKSA9PiB7XG4gICAgbGV0IHJlZjtcbiAgICBjbGFzcyBBcHAgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICAgICAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIHJlZiA9IHRoaXMucmVmcy5pbnB1dDtcbiAgICAgIH1cblxuICAgICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxVcGxvYWQgc3VwcG9ydFNlcnZlclJlbmRlcj17ZmFsc2V9PlxuICAgICAgICAgICAgPGlucHV0IHJlZj1cImlucHV0XCIgLz5cbiAgICAgICAgICA8L1VwbG9hZD5cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbW91bnQoPEFwcCAvPik7XG4gICAgZXhwZWN0KHJlZikudG9CZURlZmluZWQoKTtcbiAgfSk7XG5cbiAgaXQoJ3JldHVybiBwcm9taXNlIGluIGJlZm9yZVVwbG9hZCcsICgpID0+IHtcbiAgICBjb25zdCBkYXRhID0gamVzdC5mbigpO1xuICAgIGNvbnN0IHByb3BzID0ge1xuICAgICAgYWN0aW9uOiAnaHR0cDovL3VwbG9hZC5jb20nLFxuICAgICAgYmVmb3JlVXBsb2FkOiAoKSA9PiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQoKCkgPT4gcmVzb2x2ZSgnc3VjY2VzcycpLCAxMDApKSxcbiAgICAgIGRhdGEsXG4gICAgICBvbkNoYW5nZTogKHsgZmlsZSB9KSA9PiB7XG4gICAgICAgIGlmIChmaWxlLnN0YXR1cyAhPT0gJ3VwbG9hZGluZycpIHtcbiAgICAgICAgICBleHBlY3QoZGF0YSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH07XG5cbiAgICBjb25zdCB3cmFwcGVyID0gbW91bnQoXG4gICAgICA8VXBsb2FkIHsuLi5wcm9wc30+XG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiPnVwbG9hZDwvYnV0dG9uPlxuICAgICAgPC9VcGxvYWQ+LFxuICAgICk7XG5cbiAgICB3cmFwcGVyLmZpbmQoJ2lucHV0Jykuc2ltdWxhdGUoJ2NoYW5nZScsIHtcbiAgICAgIHRhcmdldDoge1xuICAgICAgICBmaWxlczogW3sgZmlsZW5hbWU6ICdmb28ucG5nJyB9XSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgbm90IHN0b3AgdXBsb2FkIHdoZW4gcmV0dXJuIHZhbHVlIG9mIGJlZm9yZVVwbG9hZCBpcyBmYWxzZScsIGRvbmUgPT4ge1xuICAgIGNvbnN0IGRhdGEgPSBqZXN0LmZuKCk7XG4gICAgY29uc3QgcHJvcHMgPSB7XG4gICAgICBhY3Rpb246ICdodHRwOi8vdXBsb2FkLmNvbScsXG4gICAgICBiZWZvcmVVcGxvYWQ6ICgpID0+IGZhbHNlLFxuICAgICAgZGF0YSxcbiAgICAgIG9uQ2hhbmdlOiAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChkYXRhKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9LFxuICAgIH07XG5cbiAgICBjb25zdCB3cmFwcGVyID0gbW91bnQoXG4gICAgICA8VXBsb2FkIHsuLi5wcm9wc30+XG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiPnVwbG9hZDwvYnV0dG9uPlxuICAgICAgPC9VcGxvYWQ+LFxuICAgICk7XG5cbiAgICB3cmFwcGVyLmZpbmQoJ2lucHV0Jykuc2ltdWxhdGUoJ2NoYW5nZScsIHtcbiAgICAgIHRhcmdldDoge1xuICAgICAgICBmaWxlczogW3sgZmlsZW5hbWU6ICdmb28ucG5nJyB9XSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgbm90IHN0b3AgdXBsb2FkIHdoZW4gcmV0dXJuIHZhbHVlIG9mIGJlZm9yZVVwbG9hZCBpcyBub3QgZmFsc2UnLCBkb25lID0+IHtcbiAgICBjb25zdCBkYXRhID0gamVzdC5mbigpO1xuICAgIGNvbnN0IHByb3BzID0ge1xuICAgICAgYWN0aW9uOiAnaHR0cDovL3VwbG9hZC5jb20nLFxuICAgICAgYmVmb3JlVXBsb2FkKCkge30sXG4gICAgICBkYXRhLFxuICAgICAgb25DaGFuZ2U6ICgpID0+IHtcbiAgICAgICAgZXhwZWN0KGRhdGEpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSxcbiAgICB9O1xuXG4gICAgY29uc3Qgd3JhcHBlciA9IG1vdW50KFxuICAgICAgPFVwbG9hZCB7Li4ucHJvcHN9PlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIj51cGxvYWQ8L2J1dHRvbj5cbiAgICAgIDwvVXBsb2FkPixcbiAgICApO1xuXG4gICAgd3JhcHBlci5maW5kKCdpbnB1dCcpLnNpbXVsYXRlKCdjaGFuZ2UnLCB7XG4gICAgICB0YXJnZXQ6IHtcbiAgICAgICAgZmlsZXM6IFt7IGZpbGVuYW1lOiAnZm9vLnBuZycgfV0sXG4gICAgICB9LFxuICAgIH0pO1xuICB9KTtcbn0pO1xuIl19