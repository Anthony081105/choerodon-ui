a24a8da685990f7ba6ee790f953b35ea
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _icon = _interopRequireDefault(require("../icon"));

var _progress = require("../rc-components/progress");

var _Loading = _interopRequireDefault(require("./Loading"));

var _configure = require("../configure");

function _createSuper(Derived) {
  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  return function () {
    var Super = (0, _getPrototypeOf2["default"])(Derived),
        result;

    if (isNativeReflectConstruct()) {
      var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return (0, _possibleConstructorReturn2["default"])(this, result);
  };
}

var Progress =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(Progress, _Component);

  var _super = _createSuper(Progress);

  function Progress() {
    var _this;

    (0, _classCallCheck2["default"])(this, Progress);
    _this = _super.apply(this, arguments);

    _this.renderPointer = function () {
      var props = _this.props;
      var customizePrefixCls = props.prefixCls,
          _props$percent = props.percent,
          percent = _props$percent === void 0 ? 0 : _props$percent,
          status = props.status,
          successPercent = props.successPercent;
      var prefixCls = (0, _configure.getPrefixCls)('progress', customizePrefixCls);
      var progressStatus = parseInt(successPercent ? successPercent.toString() : percent.toString(), 10) >= 100 && !('status' in props) ? "success"
      /* success */
      : status || "normal"
      /* normal */
      ;
      return _react["default"].createElement("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        width: "38",
        height: "32",
        viewBox: "0 0 38 32"
      }, _react["default"].createElement("path", {
        // style={{
        //   fill: strokeColor ? strokeColor : '',
        // }}
        className: "".concat(prefixCls, "-status-pointer-").concat(progressStatus),
        fill: "#6887E8",
        d: "M103.371587,49.724578 C103.681687,50.1292204 103.634794,50.6951896 103.280961,51.0440945 L103.186137,51.1265795 L78.8502947,69.7769214 C79.5504585,70.8623565 79.9567807,72.1551739 79.9567807,73.5428929 C79.9567807,77.3850168 76.8421239,80.4996736 73,80.4996736 C69.1578761,80.4996736 66.0432193,77.3850168 66.0432193,73.5428929 C66.0432193,69.700769 69.1578761,66.5861122 73,66.5861122 C74.7317808,66.5861122 76.3157678,67.218893 77.5333601,68.265854 L101.969586,49.5391281 C102.407948,49.2031866 103.035646,49.2862154 103.371587,49.724578 Z M73,68.5861122 C70.2624456,68.5861122 68.0432193,70.8053385 68.0432193,73.5428929 C68.0432193,76.2804473 70.2624456,78.4996736 73,78.4996736 C75.7375544,78.4996736 77.9567807,76.2804473 77.9567807,73.5428929 C77.9567807,70.8053385 75.7375544,68.5861122 73,68.5861122 Z",
        transform: "translate(-66 -49)"
      }));
    };
    /**
     * 计算指针角度
     */


    _this.getPointerDeg = function () {
      var _this$props = _this.props,
          _this$props$percent = _this$props.percent,
          percent = _this$props$percent === void 0 ? 0 : _this$props$percent,
          _this$props$gapDegree = _this$props.gapDegree,
          gapDegree = _this$props$gapDegree === void 0 ? 0 : _this$props$gapDegree; // 缺口角度

      var gapDeg = gapDegree || 75; // percent 角度

      var percentDeg = (360 - gapDeg) * (percent / 100); // 初始位置 0 -> 126 + 缺口角度/2 + percent 角度 + diffDeg

      var diffDeg = 0;

      if (percent <= 75 && percent > 50) {
        diffDeg = -3;
      } else if (percent > 75) {
        diffDeg = -5;
      } else if (percent < 50) {
        diffDeg = 5;
      }

      var deg = 128 + gapDeg / 2 + percentDeg + diffDeg;
      return {
        transform: "rotate(".concat(deg, "deg)")
      };
    };

    return _this;
  }

  (0, _createClass2["default"])(Progress, [{
    key: "render",
    value: function render() {
      var _classNames;

      var props = this.props;
      var customizePrefixCls = props.prefixCls,
          className = props.className,
          _props$percent2 = props.percent,
          percent = _props$percent2 === void 0 ? 0 : _props$percent2,
          status = props.status,
          format = props.format,
          trailColor = props.trailColor,
          size = props.size,
          successPercent = props.successPercent,
          type = props.type,
          strokeWidth = props.strokeWidth,
          strokeColor = props.strokeColor,
          width = props.width,
          showInfo = props.showInfo,
          _props$gapDegree = props.gapDegree,
          gapDegree = _props$gapDegree === void 0 ? 0 : _props$gapDegree,
          gapPosition = props.gapPosition,
          showPointer = props.showPointer,
          restProps = (0, _objectWithoutProperties2["default"])(props, ["prefixCls", "className", "percent", "status", "format", "trailColor", "size", "successPercent", "type", "strokeWidth", "strokeColor", "width", "showInfo", "gapDegree", "gapPosition", "showPointer"]);
      var prefixCls = (0, _configure.getPrefixCls)('progress', customizePrefixCls);
      var progressStatus = parseInt(successPercent ? successPercent.toString() : percent.toString(), 10) >= 100 && !('status' in props) ? "success"
      /* success */
      : status || "normal"
      /* normal */
      ;
      var progressInfo;
      var progressCenter;
      var progress;

      var textFormatter = format || function (percentNumber) {
        return "".concat(percentNumber, "%");
      };

      if (showInfo) {
        var text;
        var circleType = type === "circle"
        /* circle */
        || type === "dashboard"
        /* dashboard */
        ;

        if (progressStatus === "exception"
        /* exception */
        ) {
            text = format ? textFormatter(percent) : _react["default"].createElement(_icon["default"], {
              type: circleType ? 'close' : 'cancel'
            });
          } else if (progressStatus === "success"
        /* success */
        ) {
            text = format ? textFormatter(percent) : _react["default"].createElement(_icon["default"], {
              type: circleType ? 'check' : 'check_circle'
            });
          } else {
          text = textFormatter(percent);
        }

        progressInfo = _react["default"].createElement("span", {
          className: "".concat(prefixCls, "-text")
        }, text);

        if (showPointer) {
          progressCenter = _react["default"].createElement("div", {
            className: "".concat(prefixCls, "-pointer"),
            style: this.getPointerDeg()
          }, this.renderPointer());
          progressInfo = _react["default"].createElement("span", {
            className: "".concat(prefixCls, "-text-bottom")
          }, text);
        }
      }

      if (type === "line"
      /* line */
      ) {
          var percentStyle = {
            width: "".concat(percent, "%"),
            height: strokeWidth || (size === "small"
            /* small */
            ? 6 : 8),
            background: strokeColor
          };
          var successPercentStyle = {
            width: "".concat(successPercent, "%"),
            height: strokeWidth || (size === "small"
            /* small */
            ? 6 : 8)
          };
          var successSegment = successPercent !== undefined ? _react["default"].createElement("div", {
            className: "".concat(prefixCls, "-success-bg"),
            style: successPercentStyle
          }) : null;
          progress = _react["default"].createElement("div", null, _react["default"].createElement("div", {
            className: "".concat(prefixCls, "-outer")
          }, _react["default"].createElement("div", {
            className: "".concat(prefixCls, "-inner")
          }, _react["default"].createElement("div", {
            className: "".concat(prefixCls, "-bg"),
            style: percentStyle
          }), successSegment)), progressInfo);
        } else if (type === "circle"
      /* circle */
      || type === "dashboard"
      /* dashboard */
      ) {
          var circleSize = width || 120;
          var circleStyle = {
            width: circleSize,
            height: circleSize,
            fontSize: circleSize * 0.15 + 6
          };
          var circleWidth = strokeWidth || 6;
          var gapPos = gapPosition || type === "dashboard"
          /* dashboard */
          && "bottom"
          /* bottom */
          || "top"
          /* top */
          ;
          var gapDeg = gapDegree || type === "dashboard"
          /* dashboard */
          && 75;
          progress = _react["default"].createElement("div", {
            className: "".concat(prefixCls, "-inner"),
            style: circleStyle
          }, _react["default"].createElement(_progress.Circle, {
            percent: percent,
            strokeWidth: circleWidth,
            trailWidth: circleWidth,
            trailColor: trailColor,
            strokeColor: strokeColor,
            prefixCls: prefixCls,
            gapDegree: gapDeg,
            gapPosition: gapPos
          }), progressCenter, progressInfo);
        } else if (type === "loading"
      /* loading */
      ) {
          progress = _react["default"].createElement("div", {
            className: "".concat(prefixCls, "-inner")
          }, _react["default"].createElement(_Loading["default"], null));
        }

      var classString = (0, _classnames["default"])(prefixCls, (_classNames = {}, (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-").concat(type === "dashboard"
      /* dashboard */
      && "circle"
      /* circle */
      || type), true), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-status-").concat(progressStatus), true), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-show-info"), showInfo), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-").concat(size), size), _classNames), className);
      return _react["default"].createElement("div", (0, _extends2["default"])({}, restProps, {
        className: classString
      }), progress);
    }
  }]);
  return Progress;
}(_react.Component);

exports["default"] = Progress;
Progress.displayName = 'Progress';
Progress.defaultProps = {
  type: "line"
  /* line */
  ,
  percent: 0,
  showInfo: true,
  showPointer: false,
  trailColor: '#f3f3f3',
  size: "default"
  /* default */

};
Progress.propTypes = {
  status: _propTypes["default"].oneOf(["normal"
  /* normal */
  , "exception"
  /* exception */
  , "active"
  /* active */
  , "success"
  /* success */
  ]),
  type: _propTypes["default"].oneOf(["line"
  /* line */
  , "circle"
  /* circle */
  , "dashboard"
  /* dashboard */
  , "loading"
  /* loading */
  ]),
  showInfo: _propTypes["default"].bool,
  showPointer: _propTypes["default"].bool,
  percent: _propTypes["default"].number,
  width: _propTypes["default"].number,
  strokeWidth: _propTypes["default"].number,
  strokeColor: _propTypes["default"].string,
  trailColor: _propTypes["default"].string,
  format: _propTypes["default"].func,
  gapDegree: _propTypes["default"].number,
  size: _propTypes["default"].oneOf(["default"
  /* default */
  , "small"
  /* small */
  , "large"
  /* large */
  ])
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb2dyZXNzL3Byb2dyZXNzLmpzIl0sIm5hbWVzIjpbIlByb2dyZXNzIiwiQ29tcG9uZW50IiwicHJvcHMiLCJjdXN0b21pemVQcmVmaXhDbHMiLCJwZXJjZW50Iiwic3RhdHVzIiwic3VjY2Vzc1BlcmNlbnQiLCJwcmVmaXhDbHMiLCJwcm9ncmVzc1N0YXR1cyIsInhtbG5zIiwid2lkdGgiLCJoZWlnaHQiLCJ2aWV3Qm94IiwiY2xhc3NOYW1lIiwiZmlsbCIsImQiLCJ0cmFuc2Zvcm0iLCJnYXBEZWdyZWUiLCJnYXBEZWciLCJwZXJjZW50RGVnIiwiZGlmZkRlZyIsImRlZyIsImZvcm1hdCIsInRyYWlsQ29sb3IiLCJzaXplIiwidHlwZSIsInN0cm9rZVdpZHRoIiwic3Ryb2tlQ29sb3IiLCJzaG93SW5mbyIsImdhcFBvc2l0aW9uIiwic2hvd1BvaW50ZXIiLCJyZXN0UHJvcHMiLCJ0ZXh0Rm9ybWF0dGVyIiwiY2lyY2xlVHlwZSIsInRleHQiLCJJY29uIiwicHJvZ3Jlc3NJbmZvIiwicHJvZ3Jlc3NDZW50ZXIiLCJzdHlsZSIsInBlcmNlbnRTdHlsZSIsImJhY2tncm91bmQiLCJzdWNjZXNzUGVyY2VudFN0eWxlIiwic3VjY2Vzc1NlZ21lbnQiLCJwcm9ncmVzcyIsIlJlYWN0IiwiY2lyY2xlU2l6ZSIsImNpcmNsZVN0eWxlIiwiZm9udFNpemUiLCJjaXJjbGVXaWR0aCIsImdhcFBvcyIsIkNpcmNsZSIsInRyYWlsV2lkdGgiLCJMb2FkaW5nIiwiY2xhc3NTdHJpbmciLCJQcm9wVHlwZXMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUEsTUFBQSxHQUFBLHVCQUFBLENBQUEsT0FBQSxDQUFBLE9BQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsVUFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLFlBQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsV0FBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLFlBQUEsQ0FB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O0FBa0JqQjNCLEVBQUFBLFdBQVcsRUFBRTJCLFVBQUFBLENBQUFBLFNBQUFBLENBQUFBLENBbEJJLE1BQUE7QUFtQmpCL0IsRUFBQUEsVUFBVSxFQUFFK0IsVUFBQUEsQ0FBQUEsU0FBQUEsQ0FBQUEsQ0FuQkssTUFBQTtBQW9CakJoQyxFQUFBQSxNQUFNLEVBQUVnQyxVQUFBQSxDQUFBQSxTQUFBQSxDQUFBQSxDQXBCUyxJQUFBO0FBcUJqQnJDLEVBQUFBLFNBQVMsRUFBRXFDLFVBQUFBLENBQUFBLFNBQUFBLENBQUFBLENBckJNLE1BQUE7QUFzQmpCOUIsRUFBQUEsSUFBSSxFQUFFLFVBQUEsQ0FBQSxTQUFBLENBQUEsQ0FBQSxLQUFBLENBQWdCLENBQUM7QUFBVTtBQUFYLElBQTBCO0FBQVE7QUFBbEMsSUFBK0M7QUFBUTtBQUF2RCxHQUFoQjtBQXRCVyxDQUFyQnhCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBJY29uIGZyb20gJy4uL2ljb24nO1xuaW1wb3J0IHsgQ2lyY2xlIH0gZnJvbSAnLi4vcmMtY29tcG9uZW50cy9wcm9ncmVzcyc7XG5pbXBvcnQgTG9hZGluZyBmcm9tICcuL0xvYWRpbmcnO1xuaW1wb3J0IHsgZ2V0UHJlZml4Q2xzIH0gZnJvbSAnLi4vY29uZmlndXJlJztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb2dyZXNzIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5yZW5kZXJQb2ludGVyID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgICAgICAgICAgY29uc3QgeyBwcmVmaXhDbHM6IGN1c3RvbWl6ZVByZWZpeENscywgXG4gICAgICAgICAgICAvLyBzdHJva2VDb2xvcixcbiAgICAgICAgICAgIHBlcmNlbnQgPSAwLCBzdGF0dXMsIHN1Y2Nlc3NQZXJjZW50LCB9ID0gcHJvcHM7XG4gICAgICAgICAgICBjb25zdCBwcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ3Byb2dyZXNzJywgY3VzdG9taXplUHJlZml4Q2xzKTtcbiAgICAgICAgICAgIGNvbnN0IHByb2dyZXNzU3RhdHVzID0gcGFyc2VJbnQoc3VjY2Vzc1BlcmNlbnQgPyBzdWNjZXNzUGVyY2VudC50b1N0cmluZygpIDogcGVyY2VudC50b1N0cmluZygpLCAxMCkgPj0gMTAwICYmXG4gICAgICAgICAgICAgICAgISgnc3RhdHVzJyBpbiBwcm9wcylcbiAgICAgICAgICAgICAgICA/IFwic3VjY2Vzc1wiIC8qIHN1Y2Nlc3MgKi9cbiAgICAgICAgICAgICAgICA6IHN0YXR1cyB8fCBcIm5vcm1hbFwiIC8qIG5vcm1hbCAqLztcbiAgICAgICAgICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChcInN2Z1wiLCB7IHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIHdpZHRoOiBcIjM4XCIsIGhlaWdodDogXCIzMlwiLCB2aWV3Qm94OiBcIjAgMCAzOCAzMlwiIH0sXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwgeyBcbiAgICAgICAgICAgICAgICAgICAgLy8gc3R5bGU9e3tcbiAgICAgICAgICAgICAgICAgICAgLy8gICBmaWxsOiBzdHJva2VDb2xvciA/IHN0cm9rZUNvbG9yIDogJycsXG4gICAgICAgICAgICAgICAgICAgIC8vIH19XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogYCR7cHJlZml4Q2xzfS1zdGF0dXMtcG9pbnRlci0ke3Byb2dyZXNzU3RhdHVzfWAsIGZpbGw6IFwiIzY4ODdFOFwiLCBkOiBcIk0xMDMuMzcxNTg3LDQ5LjcyNDU3OCBDMTAzLjY4MTY4Nyw1MC4xMjkyMjA0IDEwMy42MzQ3OTQsNTAuNjk1MTg5NiAxMDMuMjgwOTYxLDUxLjA0NDA5NDUgTDEwMy4xODYxMzcsNTEuMTI2NTc5NSBMNzguODUwMjk0Nyw2OS43NzY5MjE0IEM3OS41NTA0NTg1LDcwLjg2MjM1NjUgNzkuOTU2NzgwNyw3Mi4xNTUxNzM5IDc5Ljk1Njc4MDcsNzMuNTQyODkyOSBDNzkuOTU2NzgwNyw3Ny4zODUwMTY4IDc2Ljg0MjEyMzksODAuNDk5NjczNiA3Myw4MC40OTk2NzM2IEM2OS4xNTc4NzYxLDgwLjQ5OTY3MzYgNjYuMDQzMjE5Myw3Ny4zODUwMTY4IDY2LjA0MzIxOTMsNzMuNTQyODkyOSBDNjYuMDQzMjE5Myw2OS43MDA3NjkgNjkuMTU3ODc2MSw2Ni41ODYxMTIyIDczLDY2LjU4NjExMjIgQzc0LjczMTc4MDgsNjYuNTg2MTEyMiA3Ni4zMTU3Njc4LDY3LjIxODg5MyA3Ny41MzMzNjAxLDY4LjI2NTg1NCBMMTAxLjk2OTU4Niw0OS41MzkxMjgxIEMxMDIuNDA3OTQ4LDQ5LjIwMzE4NjYgMTAzLjAzNTY0Niw0OS4yODYyMTU0IDEwMy4zNzE1ODcsNDkuNzI0NTc4IFogTTczLDY4LjU4NjExMjIgQzcwLjI2MjQ0NTYsNjguNTg2MTEyMiA2OC4wNDMyMTkzLDcwLjgwNTMzODUgNjguMDQzMjE5Myw3My41NDI4OTI5IEM2OC4wNDMyMTkzLDc2LjI4MDQ0NzMgNzAuMjYyNDQ1Niw3OC40OTk2NzM2IDczLDc4LjQ5OTY3MzYgQzc1LjczNzU1NDQsNzguNDk5NjczNiA3Ny45NTY3ODA3LDc2LjI4MDQ0NzMgNzcuOTU2NzgwNyw3My41NDI4OTI5IEM3Ny45NTY3ODA3LDcwLjgwNTMzODUgNzUuNzM3NTU0NCw2OC41ODYxMTIyIDczLDY4LjU4NjExMjIgWlwiLCB0cmFuc2Zvcm06IFwidHJhbnNsYXRlKC02NiAtNDkpXCIgfSkpKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIOiuoeeul+aMh+mSiOinkuW6plxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5nZXRQb2ludGVyRGVnID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBwZXJjZW50ID0gMCwgZ2FwRGVncmVlID0gMCwgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgICAgICAvLyDnvLrlj6Pop5LluqZcbiAgICAgICAgICAgIGNvbnN0IGdhcERlZyA9IGdhcERlZ3JlZSB8fCA3NTtcbiAgICAgICAgICAgIC8vIHBlcmNlbnQg6KeS5bqmXG4gICAgICAgICAgICBjb25zdCBwZXJjZW50RGVnID0gKDM2MCAtIGdhcERlZykgKiAocGVyY2VudCAvIDEwMCk7XG4gICAgICAgICAgICAvLyDliJ3lp4vkvY3nva4gMCAtPiAxMjYgKyDnvLrlj6Pop5LluqYvMiArIHBlcmNlbnQg6KeS5bqmICsgZGlmZkRlZ1xuICAgICAgICAgICAgbGV0IGRpZmZEZWcgPSAwO1xuICAgICAgICAgICAgaWYgKHBlcmNlbnQgPD0gNzUgJiYgcGVyY2VudCA+IDUwKSB7XG4gICAgICAgICAgICAgICAgZGlmZkRlZyA9IC0zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocGVyY2VudCA+IDc1KSB7XG4gICAgICAgICAgICAgICAgZGlmZkRlZyA9IC01O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocGVyY2VudCA8IDUwKSB7XG4gICAgICAgICAgICAgICAgZGlmZkRlZyA9IDU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBkZWcgPSAxMjggKyBnYXBEZWcgLyAyICsgcGVyY2VudERlZyArIGRpZmZEZWc7XG4gICAgICAgICAgICByZXR1cm4geyB0cmFuc2Zvcm06IGByb3RhdGUoJHtkZWd9ZGVnKWAgfTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgICAgIGNvbnN0IHsgcHJlZml4Q2xzOiBjdXN0b21pemVQcmVmaXhDbHMsIGNsYXNzTmFtZSwgcGVyY2VudCA9IDAsIHN0YXR1cywgZm9ybWF0LCB0cmFpbENvbG9yLCBzaXplLCBzdWNjZXNzUGVyY2VudCwgdHlwZSwgc3Ryb2tlV2lkdGgsIHN0cm9rZUNvbG9yLCB3aWR0aCwgc2hvd0luZm8sIGdhcERlZ3JlZSA9IDAsIGdhcFBvc2l0aW9uLCBzaG93UG9pbnRlciwgLi4ucmVzdFByb3BzIH0gPSBwcm9wcztcbiAgICAgICAgY29uc3QgcHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCdwcm9ncmVzcycsIGN1c3RvbWl6ZVByZWZpeENscyk7XG4gICAgICAgIGNvbnN0IHByb2dyZXNzU3RhdHVzID0gcGFyc2VJbnQoc3VjY2Vzc1BlcmNlbnQgPyBzdWNjZXNzUGVyY2VudC50b1N0cmluZygpIDogcGVyY2VudC50b1N0cmluZygpLCAxMCkgPj0gMTAwICYmXG4gICAgICAgICAgICAhKCdzdGF0dXMnIGluIHByb3BzKVxuICAgICAgICAgICAgPyBcInN1Y2Nlc3NcIiAvKiBzdWNjZXNzICovXG4gICAgICAgICAgICA6IHN0YXR1cyB8fCBcIm5vcm1hbFwiIC8qIG5vcm1hbCAqLztcbiAgICAgICAgbGV0IHByb2dyZXNzSW5mbztcbiAgICAgICAgbGV0IHByb2dyZXNzQ2VudGVyO1xuICAgICAgICBsZXQgcHJvZ3Jlc3M7XG4gICAgICAgIGNvbnN0IHRleHRGb3JtYXR0ZXIgPSBmb3JtYXQgfHwgKHBlcmNlbnROdW1iZXIgPT4gYCR7cGVyY2VudE51bWJlcn0lYCk7XG4gICAgICAgIGlmIChzaG93SW5mbykge1xuICAgICAgICAgICAgbGV0IHRleHQ7XG4gICAgICAgICAgICBjb25zdCBjaXJjbGVUeXBlID0gdHlwZSA9PT0gXCJjaXJjbGVcIiAvKiBjaXJjbGUgKi8gfHwgdHlwZSA9PT0gXCJkYXNoYm9hcmRcIiAvKiBkYXNoYm9hcmQgKi87XG4gICAgICAgICAgICBpZiAocHJvZ3Jlc3NTdGF0dXMgPT09IFwiZXhjZXB0aW9uXCIgLyogZXhjZXB0aW9uICovKSB7XG4gICAgICAgICAgICAgICAgdGV4dCA9IGZvcm1hdCA/IHRleHRGb3JtYXR0ZXIocGVyY2VudCkgOiBSZWFjdC5jcmVhdGVFbGVtZW50KEljb24sIHsgdHlwZTogY2lyY2xlVHlwZSA/ICdjbG9zZScgOiAnY2FuY2VsJyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHByb2dyZXNzU3RhdHVzID09PSBcInN1Y2Nlc3NcIiAvKiBzdWNjZXNzICovKSB7XG4gICAgICAgICAgICAgICAgdGV4dCA9IGZvcm1hdCA/ICh0ZXh0Rm9ybWF0dGVyKHBlcmNlbnQpKSA6IChSZWFjdC5jcmVhdGVFbGVtZW50KEljb24sIHsgdHlwZTogY2lyY2xlVHlwZSA/ICdjaGVjaycgOiAnY2hlY2tfY2lyY2xlJyB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0ZXh0ID0gdGV4dEZvcm1hdHRlcihwZXJjZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByb2dyZXNzSW5mbyA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHsgY2xhc3NOYW1lOiBgJHtwcmVmaXhDbHN9LXRleHRgIH0sIHRleHQpO1xuICAgICAgICAgICAgaWYgKHNob3dQb2ludGVyKSB7XG4gICAgICAgICAgICAgICAgcHJvZ3Jlc3NDZW50ZXIgPSAoUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogYCR7cHJlZml4Q2xzfS1wb2ludGVyYCwgc3R5bGU6IHRoaXMuZ2V0UG9pbnRlckRlZygpIH0sIHRoaXMucmVuZGVyUG9pbnRlcigpKSk7XG4gICAgICAgICAgICAgICAgcHJvZ3Jlc3NJbmZvID0gUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgeyBjbGFzc05hbWU6IGAke3ByZWZpeENsc30tdGV4dC1ib3R0b21gIH0sIHRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlID09PSBcImxpbmVcIiAvKiBsaW5lICovKSB7XG4gICAgICAgICAgICBjb25zdCBwZXJjZW50U3R5bGUgPSB7XG4gICAgICAgICAgICAgICAgd2lkdGg6IGAke3BlcmNlbnR9JWAsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBzdHJva2VXaWR0aCB8fCAoc2l6ZSA9PT0gXCJzbWFsbFwiIC8qIHNtYWxsICovID8gNiA6IDgpLFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHN0cm9rZUNvbG9yLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHN1Y2Nlc3NQZXJjZW50U3R5bGUgPSB7XG4gICAgICAgICAgICAgICAgd2lkdGg6IGAke3N1Y2Nlc3NQZXJjZW50fSVgLFxuICAgICAgICAgICAgICAgIGhlaWdodDogc3Ryb2tlV2lkdGggfHwgKHNpemUgPT09IFwic21hbGxcIiAvKiBzbWFsbCAqLyA/IDYgOiA4KSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBzdWNjZXNzU2VnbWVudCA9IHN1Y2Nlc3NQZXJjZW50ICE9PSB1bmRlZmluZWQgPyAoUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogYCR7cHJlZml4Q2xzfS1zdWNjZXNzLWJnYCwgc3R5bGU6IHN1Y2Nlc3NQZXJjZW50U3R5bGUgfSkpIDogbnVsbDtcbiAgICAgICAgICAgIHByb2dyZXNzID0gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgbnVsbCxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBgJHtwcmVmaXhDbHN9LW91dGVyYCB9LFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBgJHtwcmVmaXhDbHN9LWlubmVyYCB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogYCR7cHJlZml4Q2xzfS1iZ2AsIHN0eWxlOiBwZXJjZW50U3R5bGUgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzU2VnbWVudCkpLFxuICAgICAgICAgICAgICAgIHByb2dyZXNzSW5mbykpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGUgPT09IFwiY2lyY2xlXCIgLyogY2lyY2xlICovIHx8IHR5cGUgPT09IFwiZGFzaGJvYXJkXCIgLyogZGFzaGJvYXJkICovKSB7XG4gICAgICAgICAgICBjb25zdCBjaXJjbGVTaXplID0gd2lkdGggfHwgMTIwO1xuICAgICAgICAgICAgY29uc3QgY2lyY2xlU3R5bGUgPSB7XG4gICAgICAgICAgICAgICAgd2lkdGg6IGNpcmNsZVNpemUsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBjaXJjbGVTaXplLFxuICAgICAgICAgICAgICAgIGZvbnRTaXplOiBjaXJjbGVTaXplICogMC4xNSArIDYsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgY2lyY2xlV2lkdGggPSBzdHJva2VXaWR0aCB8fCA2O1xuICAgICAgICAgICAgY29uc3QgZ2FwUG9zID0gZ2FwUG9zaXRpb24gfHxcbiAgICAgICAgICAgICAgICAodHlwZSA9PT0gXCJkYXNoYm9hcmRcIiAvKiBkYXNoYm9hcmQgKi8gJiYgXCJib3R0b21cIiAvKiBib3R0b20gKi8pIHx8XG4gICAgICAgICAgICAgICAgXCJ0b3BcIiAvKiB0b3AgKi87XG4gICAgICAgICAgICBjb25zdCBnYXBEZWcgPSBnYXBEZWdyZWUgfHwgKHR5cGUgPT09IFwiZGFzaGJvYXJkXCIgLyogZGFzaGJvYXJkICovICYmIDc1KTtcbiAgICAgICAgICAgIHByb2dyZXNzID0gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IGAke3ByZWZpeENsc30taW5uZXJgLCBzdHlsZTogY2lyY2xlU3R5bGUgfSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KENpcmNsZSwgeyBwZXJjZW50OiBwZXJjZW50LCBzdHJva2VXaWR0aDogY2lyY2xlV2lkdGgsIHRyYWlsV2lkdGg6IGNpcmNsZVdpZHRoLCB0cmFpbENvbG9yOiB0cmFpbENvbG9yLCBzdHJva2VDb2xvcjogc3Ryb2tlQ29sb3IsIHByZWZpeENsczogcHJlZml4Q2xzLCBnYXBEZWdyZWU6IGdhcERlZywgZ2FwUG9zaXRpb246IGdhcFBvcyB9KSxcbiAgICAgICAgICAgICAgICBwcm9ncmVzc0NlbnRlcixcbiAgICAgICAgICAgICAgICBwcm9ncmVzc0luZm8pKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlID09PSBcImxvYWRpbmdcIiAvKiBsb2FkaW5nICovKSB7XG4gICAgICAgICAgICBwcm9ncmVzcyA9IChSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBgJHtwcmVmaXhDbHN9LWlubmVyYCB9LFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTG9hZGluZywgbnVsbCkpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjbGFzc1N0cmluZyA9IGNsYXNzTmFtZXMocHJlZml4Q2xzLCB7XG4gICAgICAgICAgICBbYCR7cHJlZml4Q2xzfS0keyh0eXBlID09PSBcImRhc2hib2FyZFwiIC8qIGRhc2hib2FyZCAqLyAmJiBcImNpcmNsZVwiIC8qIGNpcmNsZSAqLykgfHwgdHlwZX1gXTogdHJ1ZSxcbiAgICAgICAgICAgIFtgJHtwcmVmaXhDbHN9LXN0YXR1cy0ke3Byb2dyZXNzU3RhdHVzfWBdOiB0cnVlLFxuICAgICAgICAgICAgW2Ake3ByZWZpeENsc30tc2hvdy1pbmZvYF06IHNob3dJbmZvLFxuICAgICAgICAgICAgW2Ake3ByZWZpeENsc30tJHtzaXplfWBdOiBzaXplLFxuICAgICAgICB9LCBjbGFzc05hbWUpO1xuICAgICAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgT2JqZWN0LmFzc2lnbih7fSwgcmVzdFByb3BzLCB7IGNsYXNzTmFtZTogY2xhc3NTdHJpbmcgfSksIHByb2dyZXNzKSk7XG4gICAgfVxufVxuUHJvZ3Jlc3MuZGlzcGxheU5hbWUgPSAnUHJvZ3Jlc3MnO1xuUHJvZ3Jlc3MuZGVmYXVsdFByb3BzID0ge1xuICAgIHR5cGU6IFwibGluZVwiIC8qIGxpbmUgKi8sXG4gICAgcGVyY2VudDogMCxcbiAgICBzaG93SW5mbzogdHJ1ZSxcbiAgICBzaG93UG9pbnRlcjogZmFsc2UsXG4gICAgdHJhaWxDb2xvcjogJyNmM2YzZjMnLFxuICAgIHNpemU6IFwiZGVmYXVsdFwiIC8qIGRlZmF1bHQgKi8sXG59O1xuUHJvZ3Jlc3MucHJvcFR5cGVzID0ge1xuICAgIHN0YXR1czogUHJvcFR5cGVzLm9uZU9mKFtcbiAgICAgICAgXCJub3JtYWxcIiAvKiBub3JtYWwgKi8sXG4gICAgICAgIFwiZXhjZXB0aW9uXCIgLyogZXhjZXB0aW9uICovLFxuICAgICAgICBcImFjdGl2ZVwiIC8qIGFjdGl2ZSAqLyxcbiAgICAgICAgXCJzdWNjZXNzXCIgLyogc3VjY2VzcyAqLyxcbiAgICBdKSxcbiAgICB0eXBlOiBQcm9wVHlwZXMub25lT2YoW1xuICAgICAgICBcImxpbmVcIiAvKiBsaW5lICovLFxuICAgICAgICBcImNpcmNsZVwiIC8qIGNpcmNsZSAqLyxcbiAgICAgICAgXCJkYXNoYm9hcmRcIiAvKiBkYXNoYm9hcmQgKi8sXG4gICAgICAgIFwibG9hZGluZ1wiIC8qIGxvYWRpbmcgKi8sXG4gICAgXSksXG4gICAgc2hvd0luZm86IFByb3BUeXBlcy5ib29sLFxuICAgIHNob3dQb2ludGVyOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBwZXJjZW50OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIHdpZHRoOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIHN0cm9rZVdpZHRoOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIHN0cm9rZUNvbG9yOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRyYWlsQ29sb3I6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZm9ybWF0OiBQcm9wVHlwZXMuZnVuYyxcbiAgICBnYXBEZWdyZWU6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mKFtcImRlZmF1bHRcIiAvKiBkZWZhdWx0ICovLCBcInNtYWxsXCIgLyogc21hbGwgKi8sIFwibGFyZ2VcIiAvKiBsYXJnZSAqL10pLFxufTtcbiJdfQ==