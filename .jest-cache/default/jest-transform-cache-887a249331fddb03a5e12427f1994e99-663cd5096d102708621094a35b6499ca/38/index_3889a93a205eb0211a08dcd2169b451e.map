{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/screening/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { Children, ReactElement, cloneElement } from 'react';\nimport { observer } from 'mobx-react';\nimport { observable, computed, action, runInAction, toJS } from 'mobx';\nimport Tag from 'choerodon-ui/lib/tag';\nimport isNumber from 'lodash/isNumber';\nimport isString from 'lodash/isString';\nimport isNil from 'lodash/isNil';\nimport omit from 'lodash/omit';\nimport warning from 'choerodon-ui/lib/_util/warning';\nimport isArray from 'lodash/isArray';\nimport isSame from '../_util/isSame';\nimport DataSetComponent, { DataSetComponentProps } from '../data-set/DataSetComponent';\nimport ScreeningItem, { ScreeningItemProps } from './ScreeningItem';\nimport DataSet from '../data-set';\nimport Record from '../data-set/Record';\nimport { $l } from '../locale-context';\n\nexport interface PropsTab {\n  text: string;\n  label: string;\n  handleClose: (key) => void;\n  key: string;\n}\nexport interface ScreeningProps extends DataSetComponentProps {\n  dataSet: DataSet;\n  children: ReactElement<ScreeningItemProps>[];\n  tagRender?: ({ labelTitle, propsTabs }: { labelTitle: string, propsTabs: PropsTab[] }) => ReactElement<any>;\n  onChange?: (value: any, oldValue: any) => void;\n}\n\n@observer\nexport default class Screening extends DataSetComponent<ScreeningProps> {\n  static displayName = 'Screening';\n\n  static ScreeningItem = ScreeningItem\n\n  @observable mergeValue: any\n\n  emptyValue?: any = null;\n\n  // 存下所有子集的ref便于直接调用其中内部方法\n  child?: any = {};\n\n  static defaultProps = {\n    suffixCls: 'screening',\n  };\n\n  constructor(props, context) {\n    super(props, context);\n    const dataSet = this.dataSet\n    const record = this.record;\n    runInAction(() => {\n      if (dataSet && record) {\n        this.mergeValue = record.toData()\n      }\n    });\n  }\n\n  onRef = (ref, name) => {\n    this.child[name] = ref\n  }\n\n  /**\n * return the record: dataIndex record, current, undefined\n */\n  @computed\n  get record(): Record | undefined {\n    const { record, dataSet, dataIndex } = this.observableProps;\n    if (record) {\n      return record;\n    }\n    if (dataSet) {\n      if (isNumber(dataIndex)) {\n        return dataSet.get(dataIndex);\n      }\n      return dataSet.current;\n    }\n    return undefined;\n  }\n\n  @computed\n  get dataSet(): DataSet | undefined {\n    const { record } = this;\n    if (record) {\n      return record.dataSet;\n    }\n    return this.observableProps.dataSet;\n  }\n\n\n  handleChange = (value, oldValue) => {\n    const { onChange } = this.props;\n    if (onChange) {\n      onChange(value, oldValue)\n    }\n  }\n\n  @action\n  handleConfirm = ({ value, fieldName }) => {\n    const oldValue = omit(toJS(this.mergeValue),'__dirty')\n    if (fieldName) {\n      this.mergeValue = {\n        ...this.mergeValue, [fieldName]: value,\n      }\n    }\n    const valueNow = omit(toJS(this.mergeValue),'__dirty')\n    if(!isSame(oldValue,valueNow)){\n      this.handleChange(valueNow, oldValue)\n    }\n  }\n\n  @action\n  handleCloseItem = (filedName) => {\n    const { dataSet } = this.props;\n    if (dataSet && filedName) {\n      (this.record || dataSet.create({})).set(filedName, this.emptyValue);\n    }\n    this.mergeValue[filedName] = this.emptyValue;\n    if (this.child && this.child[filedName]) {\n      this.child[filedName].handleClear()\n    }\n  }\n\n  findByValue = (value, name) => {\n    if (value && this.child && this.child[name]) {\n      return this.child[name].processValue(value)\n    }\n    return value\n  }\n\n  renderTag = (mergeValue) => {\n    const { dataSet } = this;\n    const prefixCls = this.prefixCls;\n    const { tagRender } = this.props;\n    const propsTabs: PropsTab[] = []\n    if (dataSet) {\n      Object.keys(mergeValue).forEach(key => {\n        const value = mergeValue[key];\n        const field = dataSet.getField(key);\n        let label = key;\n        let text = value;\n        if (field) {\n          label = field.get('label')\n          if (isArray(value)) {\n            text = value.map(v => {\n              let itemText = field.getText(v)\n              if (isNil(itemText)) {\n                itemText = this.findByValue(v, key);\n              }\n              return itemText\n            })\n          } else {\n            text = field.getText(value)\n            if (isNil(text)) {\n              text = this.findByValue(value, key);\n            }\n          }\n        }\n        if (text && label) {\n          const propsTab = {\n            text,\n            label,\n            handleClose: (filedName: string) => { this.handleCloseItem(filedName) },\n            key,\n          }\n          propsTabs.push(propsTab)\n        }\n      })\n      const labelTitle = `${$l('Screening', 'selected')}:`\n      const labelNode = (<span className={`${prefixCls}-choosed-label`}>{labelTitle}</span>)\n      if (propsTabs.length > 0) {\n        return tagRender ? tagRender({\n          labelTitle,\n          propsTabs,\n        }) : (\n            <div className={`${prefixCls}-choosed`}>\n              <div className={`${prefixCls}-choosed-title`}>{labelNode}</div>\n              <div className={`${prefixCls}-choosed-content`}>\n                {propsTabs.map(tagItemProps => (\n                  <Tag\n                    onClose={(e) => {\n                      e.preventDefault();\n                      tagItemProps.handleClose(tagItemProps.key)\n                    }}\n                    key={tagItemProps.key}\n                    closable\n                  >\n                    {`${tagItemProps.label}:${tagItemProps.text}`}\n                  </Tag>\n                ))}\n              </div>\n            </div>\n          )\n      }\n    }\n    return null\n  }\n\n\n\n\n  render() {\n    const dataSet = this.dataSet;\n    const { children } = this.props;\n    const mergeValue = toJS(this.mergeValue)\n    omit(mergeValue, ['__dirty'])\n    const filteredChildren = Children.toArray(children).filter(c => !!c);\n    return (\n      <div className={`${this.prefixCls}`}>\n        {this.renderTag(mergeValue)}\n        {Children.map(filteredChildren, (child, _index) => {\n          const name = child.props.name\n          if (this.mergeValue && name && isNil(this.mergeValue[name])) {\n            const screenProps = {\n              onConfirm: this.handleConfirm,\n              onChange: this.handleChange,\n              dataSet,\n              onRef: (ref) => { this.onRef(ref, name) },\n            }\n            if (!isString(name)) {\n              // @ts-ignore\n              delete screenProps.onRef\n              warning(false, `ScreeningItem need binding DataSet with property name.`);\n            }\n            return cloneElement(child, screenProps)\n          }\n        })}\n      </div>\n    );\n  }\n}\n"]}