507023c146d2989f1ccc6c1c358ae5c4
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactDom = require("react-dom");

var _noop = _interopRequireDefault(require("lodash/noop"));

var _contains = _interopRequireDefault(require("../util/Dom/contains"));

var _addEventListener = _interopRequireDefault(require("../../_util/addEventListener"));

var _Popup = _interopRequireDefault(require("./Popup"));

var _utils = require("./utils");

var _ContainerRender = _interopRequireDefault(require("../util/ContainerRender"));

var _Portal = _interopRequireDefault(require("../util/Portal"));

function _createSuper(Derived) {
  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  return function () {
    var Super = (0, _getPrototypeOf2["default"])(Derived),
        result;

    if (isNativeReflectConstruct()) {
      var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return (0, _possibleConstructorReturn2["default"])(this, result);
  };
}

function returnEmptyString() {
  return '';
}

function returnDocument() {
  return window.document;
}

var ALL_HANDLERS = ['onClick', 'onMouseDown', 'onTouchStart', 'onMouseEnter', 'onMouseLeave', 'onFocus', 'onBlur', 'onContextMenu'];
var IS_REACT_16 = !!_reactDom.createPortal;

var Trigger =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(Trigger, _Component);

  var _super = _createSuper(Trigger);

  function Trigger(_props) {
    var _this;

    (0, _classCallCheck2["default"])(this, Trigger);
    _this = _super.call(this, _props);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onMouseEnter", function (e) {
      _this.fireEvents('onMouseEnter', e);

      _this.delaySetPopupVisible(true, _this.props.mouseEnterDelay);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onMouseLeave", function (e) {
      _this.fireEvents('onMouseLeave', e);

      _this.delaySetPopupVisible(false, _this.props.mouseLeaveDelay);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onPopupMouseEnter", function () {
      _this.clearDelayTimer();
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onPopupMouseLeave", function (e) {
      // https://github.com/react-component/trigger/pull/13
      // react bug?
      if (e.relatedTarget && !e.relatedTarget.setTimeout && _this._component && _this._component.getPopupDomNode && (0, _contains["default"])(_this._component.getPopupDomNode(), e.relatedTarget)) {
        return;
      }

      _this.delaySetPopupVisible(false, _this.props.mouseLeaveDelay);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onFocus", function (e) {
      _this.fireEvents('onFocus', e); // incase focusin and focusout


      _this.clearDelayTimer();

      if (_this.isFocusToShow()) {
        _this.focusTime = Date.now();

        _this.delaySetPopupVisible(true, _this.props.focusDelay);
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onMouseDown", function (e) {
      _this.fireEvents('onMouseDown', e);

      _this.preClickTime = Date.now();
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onTouchStart", function (e) {
      _this.fireEvents('onTouchStart', e);

      _this.preTouchTime = Date.now();
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onBlur", function (e) {
      _this.fireEvents('onBlur', e);

      _this.clearDelayTimer();

      if (_this.isBlurToHide()) {
        _this.delaySetPopupVisible(false, _this.props.blurDelay);
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onContextMenu", function (e) {
      e.preventDefault();

      _this.fireEvents('onContextMenu', e);

      _this.setPopupVisible(true);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onContextMenuClose", function () {
      if (_this.isContextMenuToShow()) {
        _this.close();
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onClick", function (event) {
      _this.fireEvents('onClick', event); // focus will trigger click


      if (_this.focusTime) {
        var preTime;

        if (_this.preClickTime && _this.preTouchTime) {
          preTime = Math.min(_this.preClickTime, _this.preTouchTime);
        } else if (_this.preClickTime) {
          preTime = _this.preClickTime;
        } else if (_this.preTouchTime) {
          preTime = _this.preTouchTime;
        }

        if (Math.abs(preTime - _this.focusTime) < 20) {
          return;
        }

        _this.focusTime = 0;
      }

      _this.preClickTime = 0;
      _this.preTouchTime = 0;
      event.preventDefault();
      var nextVisible = !_this.state.popupVisible;

      if (_this.isClickToHide() && !nextVisible || nextVisible && _this.isClickToShow()) {
        _this.setPopupVisible(!_this.state.popupVisible);
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onDocumentClick", function (event) {
      if (_this.props.mask && !_this.props.maskClosable) {
        return;
      }

      var target = event.target;
      var root = (0, _reactDom.findDOMNode)((0, _assertThisInitialized2["default"])(_this));

      var popupNode = _this.getPopupDomNode();

      if (!(0, _contains["default"])(root, target) && !(0, _contains["default"])(popupNode, target)) {
        _this.close();
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "getRootDomNode", function () {
      var getRootDomNode = _this.props.getRootDomNode;

      if (getRootDomNode) {
        return getRootDomNode();
      } else {
        return (0, _reactDom.findDOMNode)((0, _assertThisInitialized2["default"])(_this));
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "getPopupClassFromAlign", function (align) {
      var className = [];
      var props = _this.props;
      var popupPlacement = props.popupPlacement,
          builtinPlacements = props.builtinPlacements,
          prefixCls = props.prefixCls;

      if (popupPlacement && builtinPlacements) {
        className.push((0, _utils.getPopupClassNameFromAlign)(builtinPlacements, prefixCls, align));
      }

      if (props.getPopupClassNameFromAlign) {
        className.push(props.getPopupClassNameFromAlign(align));
      }

      return className.join(' ');
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "getComponent", function () {
      var _this$props = _this.props,
          prefixCls = _this$props.prefixCls,
          destroyPopupOnHide = _this$props.destroyPopupOnHide,
          popupClassName = _this$props.popupClassName,
          action = _this$props.action,
          onPopupAlign = _this$props.onPopupAlign,
          popupAnimation = _this$props.popupAnimation,
          popupTransitionName = _this$props.popupTransitionName,
          popupStyle = _this$props.popupStyle,
          mask = _this$props.mask,
          maskAnimation = _this$props.maskAnimation,
          maskTransitionName = _this$props.maskTransitionName,
          zIndex = _this$props.zIndex,
          popup = _this$props.popup,
          stretch = _this$props.stretch;

      var _assertThisInitialize = (0, _assertThisInitialized2["default"])(_this),
          state = _assertThisInitialize.state;

      var align = _this.getPopupAlign();

      var mouseProps = {};

      if (_this.isMouseEnterToShow()) {
        mouseProps.onMouseEnter = _this.onPopupMouseEnter;
      }

      if (_this.isMouseLeaveToHide()) {
        mouseProps.onMouseLeave = _this.onPopupMouseLeave;
      }

      return _react["default"].createElement(_Popup["default"], (0, _extends2["default"])({
        prefixCls: prefixCls,
        destroyPopupOnHide: destroyPopupOnHide,
        visible: state.popupVisible,
        className: popupClassName,
        action: action,
        align: align,
        onAlign: onPopupAlign,
        animation: popupAnimation,
        getClassNameFromAlign: _this.getPopupClassFromAlign
      }, mouseProps, {
        stretch: stretch,
        getRootDomNode: _this.getRootDomNode,
        style: popupStyle,
        mask: mask,
        zIndex: zIndex,
        transitionName: popupTransitionName,
        maskAnimation: maskAnimation,
        maskTransitionName: maskTransitionName,
        ref: _this.savePopup
      }), typeof popup === 'function' ? popup() : popup);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "getContainer", function () {
      var _assertThisInitialize2 = (0, _assertThisInitialized2["default"])(_this),
          props = _assertThisInitialize2.props;

      var popupContainer = document.createElement('div'); // Make sure default popup container will never cause scrollbar appearing
      // https://github.com/react-component/trigger/issues/41

      popupContainer.style.position = 'absolute';
      popupContainer.style.top = '0';
      popupContainer.style.left = '0';
      popupContainer.style.width = '100%';
      var mountNode = props.getPopupContainer ? props.getPopupContainer((0, _reactDom.findDOMNode)((0, _assertThisInitialized2["default"])(_this))) : props.getDocument().body;
      mountNode.appendChild(popupContainer);
      return popupContainer;
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "handlePortalUpdate", function () {
      if (_this.prevPopupVisible !== _this.state.popupVisible) {
        _this.props.afterPopupVisibleChange(_this.state.popupVisible);
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "savePopup", function (node) {
      _this._component = node;
    });
    var popupVisible;

    if ('popupVisible' in _props) {
      popupVisible = !!_props.popupVisible;
    } else {
      popupVisible = !!_props.defaultPopupVisible;
    }

    _this.prevPopupVisible = popupVisible;
    _this.state = {
      popupVisible: popupVisible
    };
    return _this;
  }

  (0, _createClass2["default"])(Trigger, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      var _this2 = this;

      ALL_HANDLERS.forEach(function (h) {
        _this2["fire".concat(h)] = function (e) {
          _this2.fireEvents(h, e);
        };
      });
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.componentDidUpdate({}, {
        popupVisible: this.state.popupVisible
      });
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(_ref) {
      var popupVisible = _ref.popupVisible;

      if (popupVisible !== undefined) {
        this.setState({
          popupVisible: popupVisible
        });
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(_, prevState) {
      var props = this.props;
      var state = this.state;

      var triggerAfterPopupVisibleChange = function triggerAfterPopupVisibleChange() {
        if (prevState.popupVisible !== state.popupVisible) {
          props.afterPopupVisibleChange(state.popupVisible);
        }
      };

      if (!IS_REACT_16) {
        this.renderComponent(null, triggerAfterPopupVisibleChange);
      }

      this.prevPopupVisible = prevState.popupVisible; // We must listen to `mousedown` or `touchstart`, edge case:
      // https://github.com/react-component/calendar/issues/250
      // https://github.com/react-component/trigger/issues/50

      if (state.popupVisible) {
        var currentDocument;

        if (!this.clickOutsideHandler && (this.isClickToHide() || this.isContextMenuToShow())) {
          currentDocument = props.getDocument();
          this.clickOutsideHandler = (0, _addEventListener["default"])(currentDocument, 'mousedown', this.onDocumentClick);
        } // always hide on mobile


        if (!this.touchOutsideHandler) {
          currentDocument = currentDocument || props.getDocument();
          this.touchOutsideHandler = (0, _addEventListener["default"])(currentDocument, 'touchstart', this.onDocumentClick);
        } // close popup when trigger type contains 'onContextMenu' and document is scrolling.


        if (!this.contextMenuOutsideHandler1 && this.isContextMenuToShow()) {
          currentDocument = currentDocument || props.getDocument();
          this.contextMenuOutsideHandler1 = (0, _addEventListener["default"])(currentDocument, 'scroll', this.onContextMenuClose);
        } // close popup when trigger type contains 'onContextMenu' and window is blur.


        if (!this.contextMenuOutsideHandler2 && this.isContextMenuToShow()) {
          this.contextMenuOutsideHandler2 = (0, _addEventListener["default"])(window, 'blur', this.onContextMenuClose);
        }

        return;
      }

      this.clearOutsideHandler();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.clearDelayTimer();
      this.clearOutsideHandler();
    }
  }, {
    key: "getPopupDomNode",
    value: function getPopupDomNode() {
      // for test
      if (this._component && this._component.getPopupDomNode) {
        return this._component.getPopupDomNode();
      }

      return null;
    }
  }, {
    key: "getPopupAlign",
    value: function getPopupAlign() {
      var props = this.props;
      var popupPlacement = props.popupPlacement,
          popupAlign = props.popupAlign,
          builtinPlacements = props.builtinPlacements;

      if (popupPlacement && builtinPlacements) {
        return (0, _utils.getAlignFromPlacement)(builtinPlacements, popupPlacement, popupAlign);
      }

      return popupAlign;
    }
  }, {
    key: "setPopupVisible",
    value: function setPopupVisible(popupVisible) {
      this.clearDelayTimer();

      if (this.state.popupVisible !== popupVisible) {
        if (!('popupVisible' in this.props)) {
          this.setState({
            popupVisible: popupVisible
          });
        }

        this.props.onPopupVisibleChange(popupVisible);
      }
    }
  }, {
    key: "delaySetPopupVisible",
    value: function delaySetPopupVisible(visible, delayS) {
      var _this3 = this;

      var delay = delayS * 1000;
      this.clearDelayTimer();

      if (delay) {
        this.delayTimer = setTimeout(function () {
          _this3.setPopupVisible(visible);

          _this3.clearDelayTimer();
        }, delay);
      } else {
        this.setPopupVisible(visible);
      }
    }
  }, {
    key: "clearDelayTimer",
    value: function clearDelayTimer() {
      if (this.delayTimer) {
        clearTimeout(this.delayTimer);
        this.delayTimer = null;
      }
    }
  }, {
    key: "clearOutsideHandler",
    value: function clearOutsideHandler() {
      if (this.clickOutsideHandler) {
        this.clickOutsideHandler.remove();
        this.clickOutsideHandler = null;
      }

      if (this.contextMenuOutsideHandler1) {
        this.contextMenuOutsideHandler1.remove();
        this.contextMenuOutsideHandler1 = null;
      }

      if (this.contextMenuOutsideHandler2) {
        this.contextMenuOutsideHandler2.remove();
        this.contextMenuOutsideHandler2 = null;
      }

      if (this.touchOutsideHandler) {
        this.touchOutsideHandler.remove();
        this.touchOutsideHandler = null;
      }
    }
  }, {
    key: "createTwoChains",
    value: function createTwoChains(event) {
      var childPros = this.props.children.props;
      var props = this.props;

      if (childPros[event] && props[event]) {
        return this["fire".concat(event)];
      }

      return childPros[event] || props[event];
    }
  }, {
    key: "isClickToShow",
    value: function isClickToShow() {
      var _this$props2 = this.props,
          action = _this$props2.action,
          showAction = _this$props2.showAction;
      return action.indexOf('click') !== -1 || showAction.indexOf('click') !== -1;
    }
  }, {
    key: "isContextMenuToShow",
    value: function isContextMenuToShow() {
      var _this$props3 = this.props,
          action = _this$props3.action,
          showAction = _this$props3.showAction;
      return action.indexOf('contextMenu') !== -1 || showAction.indexOf('contextMenu') !== -1;
    }
  }, {
    key: "isClickToHide",
    value: function isClickToHide() {
      var _this$props4 = this.props,
          action = _this$props4.action,
          hideAction = _this$props4.hideAction;
      return action.indexOf('click') !== -1 || hideAction.indexOf('click') !== -1;
    }
  }, {
    key: "isMouseEnterToShow",
    value: function isMouseEnterToShow() {
      var _this$props5 = this.props,
          action = _this$props5.action,
          showAction = _this$props5.showAction;
      return action.indexOf('hover') !== -1 || showAction.indexOf('mouseEnter') !== -1;
    }
  }, {
    key: "isMouseLeaveToHide",
    value: function isMouseLeaveToHide() {
      var _this$props6 = this.props,
          action = _this$props6.action,
          hideAction = _this$props6.hideAction;
      return action.indexOf('hover') !== -1 || hideAction.indexOf('mouseLeave') !== -1;
    }
  }, {
    key: "isFocusToShow",
    value: function isFocusToShow() {
      var _this$props7 = this.props,
          action = _this$props7.action,
          showAction = _this$props7.showAction;
      return action.indexOf('focus') !== -1 || showAction.indexOf('focus') !== -1;
    }
  }, {
    key: "isBlurToHide",
    value: function isBlurToHide() {
      var _this$props8 = this.props,
          action = _this$props8.action,
          hideAction = _this$props8.hideAction;
      return action.indexOf('focus') !== -1 || hideAction.indexOf('blur') !== -1;
    }
  }, {
    key: "forcePopupAlign",
    value: function forcePopupAlign() {
      if (this.state.popupVisible && this._component && this._component.alignInstance) {
        this._component.alignInstance.forceAlign();
      }
    }
  }, {
    key: "fireEvents",
    value: function fireEvents(type, e) {
      var childCallback = this.props.children.props[type];

      if (childCallback) {
        childCallback(e);
      }

      var callback = this.props[type];

      if (callback) {
        callback(e);
      }
    }
  }, {
    key: "close",
    value: function close() {
      this.setPopupVisible(false);
    }
  }, {
    key: "render",
    value: function render() {
      var _this4 = this;

      var popupVisible = this.state.popupVisible;
      var props = this.props;
      var children = props.children;

      var child = _react.Children.only(children);

      var newChildProps = {
        key: 'trigger'
      };

      if (this.isContextMenuToShow()) {
        newChildProps.onContextMenu = this.onContextMenu;
      } else {
        newChildProps.onContextMenu = this.createTwoChains('onContextMenu');
      }

      if (this.isClickToHide() || this.isClickToShow()) {
        newChildProps.onClick = this.onClick;
        newChildProps.onMouseDown = this.onMouseDown;
        newChildProps.onTouchStart = this.onTouchStart;
      } else {
        newChildProps.onClick = this.createTwoChains('onClick');
        newChildProps.onMouseDown = this.createTwoChains('onMouseDown');
        newChildProps.onTouchStart = this.createTwoChains('onTouchStart');
      }

      if (this.isMouseEnterToShow()) {
        newChildProps.onMouseEnter = this.onMouseEnter;
      } else {
        newChildProps.onMouseEnter = this.createTwoChains('onMouseEnter');
      }

      if (this.isMouseLeaveToHide()) {
        newChildProps.onMouseLeave = this.onMouseLeave;
      } else {
        newChildProps.onMouseLeave = this.createTwoChains('onMouseLeave');
      }

      if (this.isFocusToShow() || this.isBlurToHide()) {
        newChildProps.onFocus = this.onFocus;
        newChildProps.onBlur = this.onBlur;
      } else {
        newChildProps.onFocus = this.createTwoChains('onFocus');
        newChildProps.onBlur = this.createTwoChains('onBlur');
      }

      var trigger = (0, _react.cloneElement)(child, newChildProps);

      if (!IS_REACT_16) {
        return _react["default"].createElement(_ContainerRender["default"], {
          parent: this,
          visible: popupVisible,
          autoMount: false,
          forceRender: props.forceRender,
          getComponent: this.getComponent,
          getContainer: this.getContainer
        }, function (_ref2) {
          var renderComponent = _ref2.renderComponent;
          _this4.renderComponent = renderComponent;
          return trigger;
        });
      }

      var portal; // prevent unmounting after it's rendered

      if (popupVisible || this._component || props.forceRender) {
        portal = _react["default"].createElement(_Portal["default"], {
          key: "portal",
          getContainer: this.getContainer,
          didUpdate: this.handlePortalUpdate
        }, this.getComponent());
      }

      return [trigger, portal];
    }
  }]);
  return Trigger;
}(_react.Component);

exports["default"] = Trigger;
(0, _defineProperty2["default"])(Trigger, "propTypes", {
  children: _propTypes["default"].any,
  action: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].arrayOf(_propTypes["default"].string)]),
  showAction: _propTypes["default"].any,
  hideAction: _propTypes["default"].any,
  getPopupClassNameFromAlign: _propTypes["default"].any,
  onPopupVisibleChange: _propTypes["default"].func,
  afterPopupVisibleChange: _propTypes["default"].func,
  popup: _propTypes["default"].oneOfType([_propTypes["default"].node, _propTypes["default"].func]).isRequired,
  popupStyle: _propTypes["default"].object,
  prefixCls: _propTypes["default"].string,
  popupClassName: _propTypes["default"].string,
  popupPlacement: _propTypes["default"].string,
  builtinPlacements: _propTypes["default"].object,
  popupTransitionName: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object]),
  popupAnimation: _propTypes["default"].any,
  mouseEnterDelay: _propTypes["default"].number,
  mouseLeaveDelay: _propTypes["default"].number,
  zIndex: _propTypes["default"].number,
  focusDelay: _propTypes["default"].number,
  blurDelay: _propTypes["default"].number,
  getPopupContainer: _propTypes["default"].func,
  getDocument: _propTypes["default"].func,
  getRootDomNode: _propTypes["default"].func,
  forceRender: _propTypes["default"].bool,
  destroyPopupOnHide: _propTypes["default"].bool,
  mask: _propTypes["default"].bool,
  maskClosable: _propTypes["default"].bool,
  onPopupAlign: _propTypes["default"].func,
  popupAlign: _propTypes["default"].object,
  popupVisible: _propTypes["default"].bool,
  defaultPopupVisible: _propTypes["default"].bool,
  maskTransitionName: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object]),
  maskAnimation: _propTypes["default"].string,
  stretch: _propTypes["default"].string
});
(0, _defineProperty2["default"])(Trigger, "defaultProps", {
  prefixCls: 'rc-trigger-popup',
  getPopupClassNameFromAlign: returnEmptyString,
  getDocument: returnDocument,
  onPopupVisibleChange: _noop["default"],
  afterPopupVisibleChange: _noop["default"],
  onPopupAlign: _noop["default"],
  popupClassName: '',
  mouseEnterDelay: 0,
  mouseLeaveDelay: 0.1,
  focusDelay: 0,
  blurDelay: 0.15,
  popupStyle: {},
  destroyPopupOnHide: false,
  popupAlign: {},
  defaultPopupVisible: false,
  mask: false,
  maskClosable: true,
  action: [],
  showAction: [],
  hideAction: []
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyaWdnZXIvaW5kZXguanN4Il0sIm5hbWVzIjpbIndpbmRvdyIsIkFMTF9IQU5ETEVSUyIsIklTX1JFQUNUXzE2IiwiY3JlYXRlUG9ydGFsIiwiVHJpZ2dlciIsIkNvbXBvbmVudCIsImNoaWxkcmVuIiwiUHJvcFR5cGVzIiwiYWN0aW9uIiwic2hvd0FjdGlvbiIsImhpZGVBY3Rpb24iLCJnZXRQb3B1cENsYXNzTmFtZUZyb21BbGlnbiIsIm9uUG9wdXBWaXNpYmxlQ2hhbmdlIiwiYWZ0ZXJQb3B1cFZpc2libGVDaGFuZ2UiLCJwb3B1cCIsInBvcHVwU3R5bGUiLCJwcmVmaXhDbHMiLCJwb3B1cENsYXNzTmFtZSIsInBvcHVwUGxhY2VtZW50IiwiYnVpbHRpblBsYWNlbWVudHMiLCJwb3B1cFRyYW5zaXRpb25OYW1lIiwicG9wdXBBbmltYXRpb24iLCJtb3VzZUVudGVyRGVsYXkiLCJtb3VzZUxlYXZlRGVsYXkiLCJ6SW5kZXgiLCJmb2N1c0RlbGF5IiwiYmx1ckRlbGF5IiwiZ2V0UG9wdXBDb250YWluZXIiLCJnZXREb2N1bWVudCIsImdldFJvb3REb21Ob2RlIiwiZm9yY2VSZW5kZXIiLCJkZXN0cm95UG9wdXBPbkhpZGUiLCJtYXNrIiwibWFza0Nsb3NhYmxlIiwib25Qb3B1cEFsaWduIiwicG9wdXBBbGlnbiIsInBvcHVwVmlzaWJsZSIsImRlZmF1bHRQb3B1cFZpc2libGUiLCJtYXNrVHJhbnNpdGlvbk5hbWUiLCJtYXNrQW5pbWF0aW9uIiwic3RyZXRjaCIsInN0cmluZyIsIm5vb3AiLCJwcm9wcyIsIl8iLCJwcmV2U3RhdGUiLCJzdGF0ZSIsInRyaWdnZXJBZnRlclBvcHVwVmlzaWJsZUNoYW5nZSIsImN1cnJlbnREb2N1bWVudCIsImUiLCJEYXRlIiwicHJlVGltZSIsIk1hdGgiLCJldmVudCIsIm5leHRWaXNpYmxlIiwidGFyZ2V0Iiwicm9vdCIsInBvcHVwTm9kZSIsImNsYXNzTmFtZSIsImFsaWduIiwibW91c2VQcm9wcyIsImdldFBvcHVwQ2xhc3NGcm9tQWxpZ24iLCJzYXZlUG9wdXAiLCJwb3B1cENvbnRhaW5lciIsImRvY3VtZW50IiwibW91bnROb2RlIiwidmlzaWJsZSIsImRlbGF5UyIsImRlbGF5Iiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsImNoaWxkUHJvcyIsInR5cGUiLCJjaGlsZENhbGxiYWNrIiwiY2FsbGJhY2siLCJjaGlsZCIsIkNoaWxkcmVuIiwibmV3Q2hpbGRQcm9wcyIsImtleSIsInRyaWdnZXIiLCJnZXRDb250YWluZXIiLCJyZW5kZXJDb21wb25lbnQiLCJwb3J0YWwiLCJoYW5kbGVQb3J0YWxVcGRhdGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUEsTUFBQSxHQUFBLHVCQUFBLENBQUEsT0FBQSxDQUFBLE9BQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsVUFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLFlBQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsU0FBQSxHQUFBLE9BQUEsQ0FBQSxXQUFBLENBQUE7O0FBQ0EsSUFBQSxLQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxTQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLENBQUEsc0JBQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsaUJBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUEsQ0FBQSw4QkFBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxNQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLENBQUEsU0FBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxNQUFBLEdBQUEsT0FBQSxDQUFBLFNBQUEsQ0FBQTs7QUFDQSxJQUFBLGdCQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLENBQUEseUJBQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsT0FBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLGdCQUFBLENBQUEsQ0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVB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QUE7QUFXcEJDLEVBQUFBLFNBQVMsRUFYVyxJQUFBO0FBWXBCWCxFQUFBQSxVQUFVLEVBWlUsRUFBQTtBQWFwQmdCLEVBQUFBLGtCQUFrQixFQWJFLEtBQUE7QUFjcEJJLEVBQUFBLFVBQVUsRUFkVSxFQUFBO0FBZXBCRSxFQUFBQSxtQkFBbUIsRUFmQyxLQUFBO0FBZ0JwQkwsRUFBQUEsSUFBSSxFQWhCZ0IsS0FBQTtBQWlCcEJDLEVBQUFBLFlBQVksRUFqQlEsSUFBQTtBQWtCcEJ6QixFQUFBQSxNQUFNLEVBbEJjLEVBQUE7QUFtQnBCQyxFQUFBQSxVQUFVLEVBbkJVLEVBQUE7QUFvQnBCQyxFQUFBQSxVQUFVLEVBQUU7QUFwQlEsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBDaGlsZHJlbiwgY2xvbmVFbGVtZW50LCBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY3JlYXRlUG9ydGFsLCBmaW5kRE9NTm9kZSB9IGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgbm9vcCBmcm9tICdsb2Rhc2gvbm9vcCc7XG5pbXBvcnQgY29udGFpbnMgZnJvbSAnLi4vdXRpbC9Eb20vY29udGFpbnMnO1xuaW1wb3J0IGFkZEV2ZW50TGlzdGVuZXIgZnJvbSAnLi4vLi4vX3V0aWwvYWRkRXZlbnRMaXN0ZW5lcic7XG5pbXBvcnQgUG9wdXAgZnJvbSAnLi9Qb3B1cCc7XG5pbXBvcnQgeyBnZXRBbGlnbkZyb21QbGFjZW1lbnQsIGdldFBvcHVwQ2xhc3NOYW1lRnJvbUFsaWduIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgQ29udGFpbmVyUmVuZGVyIGZyb20gJy4uL3V0aWwvQ29udGFpbmVyUmVuZGVyJztcbmltcG9ydCBQb3J0YWwgZnJvbSAnLi4vdXRpbC9Qb3J0YWwnO1xuXG5mdW5jdGlvbiByZXR1cm5FbXB0eVN0cmluZygpIHtcbiAgcmV0dXJuICcnO1xufVxuXG5mdW5jdGlvbiByZXR1cm5Eb2N1bWVudCgpIHtcbiAgcmV0dXJuIHdpbmRvdy5kb2N1bWVudDtcbn1cblxuY29uc3QgQUxMX0hBTkRMRVJTID0gWydvbkNsaWNrJywgJ29uTW91c2VEb3duJywgJ29uVG91Y2hTdGFydCcsICdvbk1vdXNlRW50ZXInLFxuICAnb25Nb3VzZUxlYXZlJywgJ29uRm9jdXMnLCAnb25CbHVyJywgJ29uQ29udGV4dE1lbnUnXTtcblxuY29uc3QgSVNfUkVBQ1RfMTYgPSAhIWNyZWF0ZVBvcnRhbDtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVHJpZ2dlciBleHRlbmRzIENvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5hbnksXG4gICAgYWN0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc3RyaW5nKV0pLFxuICAgIHNob3dBY3Rpb246IFByb3BUeXBlcy5hbnksXG4gICAgaGlkZUFjdGlvbjogUHJvcFR5cGVzLmFueSxcbiAgICBnZXRQb3B1cENsYXNzTmFtZUZyb21BbGlnbjogUHJvcFR5cGVzLmFueSxcbiAgICBvblBvcHVwVmlzaWJsZUNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgYWZ0ZXJQb3B1cFZpc2libGVDaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICAgIHBvcHVwOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgIFByb3BUeXBlcy5ub2RlLFxuICAgICAgUHJvcFR5cGVzLmZ1bmMsXG4gICAgXSkuaXNSZXF1aXJlZCxcbiAgICBwb3B1cFN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHByZWZpeENsczogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBwb3B1cENsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBwb3B1cFBsYWNlbWVudDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBidWlsdGluUGxhY2VtZW50czogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBwb3B1cFRyYW5zaXRpb25OYW1lOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgIFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICBQcm9wVHlwZXMub2JqZWN0LFxuICAgIF0pLFxuICAgIHBvcHVwQW5pbWF0aW9uOiBQcm9wVHlwZXMuYW55LFxuICAgIG1vdXNlRW50ZXJEZWxheTogUHJvcFR5cGVzLm51bWJlcixcbiAgICBtb3VzZUxlYXZlRGVsYXk6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgekluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGZvY3VzRGVsYXk6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgYmx1ckRlbGF5OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGdldFBvcHVwQ29udGFpbmVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBnZXREb2N1bWVudDogUHJvcFR5cGVzLmZ1bmMsXG4gICAgZ2V0Um9vdERvbU5vZGU6IFByb3BUeXBlcy5mdW5jLFxuICAgIGZvcmNlUmVuZGVyOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBkZXN0cm95UG9wdXBPbkhpZGU6IFByb3BUeXBlcy5ib29sLFxuICAgIG1hc2s6IFByb3BUeXBlcy5ib29sLFxuICAgIG1hc2tDbG9zYWJsZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgb25Qb3B1cEFsaWduOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBwb3B1cEFsaWduOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHBvcHVwVmlzaWJsZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgZGVmYXVsdFBvcHVwVmlzaWJsZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgbWFza1RyYW5zaXRpb25OYW1lOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgIFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICBQcm9wVHlwZXMub2JqZWN0LFxuICAgIF0pLFxuICAgIG1hc2tBbmltYXRpb246IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgc3RyZXRjaDogUHJvcFR5cGVzLnN0cmluZyxcbiAgfTtcblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIHByZWZpeENsczogJ3JjLXRyaWdnZXItcG9wdXAnLFxuICAgIGdldFBvcHVwQ2xhc3NOYW1lRnJvbUFsaWduOiByZXR1cm5FbXB0eVN0cmluZyxcbiAgICBnZXREb2N1bWVudDogcmV0dXJuRG9jdW1lbnQsXG4gICAgb25Qb3B1cFZpc2libGVDaGFuZ2U6IG5vb3AsXG4gICAgYWZ0ZXJQb3B1cFZpc2libGVDaGFuZ2U6IG5vb3AsXG4gICAgb25Qb3B1cEFsaWduOiBub29wLFxuICAgIHBvcHVwQ2xhc3NOYW1lOiAnJyxcbiAgICBtb3VzZUVudGVyRGVsYXk6IDAsXG4gICAgbW91c2VMZWF2ZURlbGF5OiAwLjEsXG4gICAgZm9jdXNEZWxheTogMCxcbiAgICBibHVyRGVsYXk6IDAuMTUsXG4gICAgcG9wdXBTdHlsZToge30sXG4gICAgZGVzdHJveVBvcHVwT25IaWRlOiBmYWxzZSxcbiAgICBwb3B1cEFsaWduOiB7fSxcbiAgICBkZWZhdWx0UG9wdXBWaXNpYmxlOiBmYWxzZSxcbiAgICBtYXNrOiBmYWxzZSxcbiAgICBtYXNrQ2xvc2FibGU6IHRydWUsXG4gICAgYWN0aW9uOiBbXSxcbiAgICBzaG93QWN0aW9uOiBbXSxcbiAgICBoaWRlQWN0aW9uOiBbXSxcbiAgfTtcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIGxldCBwb3B1cFZpc2libGU7XG4gICAgaWYgKCdwb3B1cFZpc2libGUnIGluIHByb3BzKSB7XG4gICAgICBwb3B1cFZpc2libGUgPSAhIXByb3BzLnBvcHVwVmlzaWJsZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcG9wdXBWaXNpYmxlID0gISFwcm9wcy5kZWZhdWx0UG9wdXBWaXNpYmxlO1xuICAgIH1cblxuICAgIHRoaXMucHJldlBvcHVwVmlzaWJsZSA9IHBvcHVwVmlzaWJsZTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBwb3B1cFZpc2libGUsXG4gICAgfTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICBBTExfSEFORExFUlMuZm9yRWFjaCgoaCkgPT4ge1xuICAgICAgdGhpc1tgZmlyZSR7aH1gXSA9IChlKSA9PiB7XG4gICAgICAgIHRoaXMuZmlyZUV2ZW50cyhoLCBlKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLmNvbXBvbmVudERpZFVwZGF0ZSh7fSwge1xuICAgICAgcG9wdXBWaXNpYmxlOiB0aGlzLnN0YXRlLnBvcHVwVmlzaWJsZSxcbiAgICB9KTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoeyBwb3B1cFZpc2libGUgfSkge1xuICAgIGlmIChwb3B1cFZpc2libGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHBvcHVwVmlzaWJsZSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZShfLCBwcmV2U3RhdGUpIHtcbiAgICBjb25zdCBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgY29uc3Qgc3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHRyaWdnZXJBZnRlclBvcHVwVmlzaWJsZUNoYW5nZSA9ICgpID0+IHtcbiAgICAgIGlmIChwcmV2U3RhdGUucG9wdXBWaXNpYmxlICE9PSBzdGF0ZS5wb3B1cFZpc2libGUpIHtcbiAgICAgICAgcHJvcHMuYWZ0ZXJQb3B1cFZpc2libGVDaGFuZ2Uoc3RhdGUucG9wdXBWaXNpYmxlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGlmICghSVNfUkVBQ1RfMTYpIHtcbiAgICAgIHRoaXMucmVuZGVyQ29tcG9uZW50KG51bGwsIHRyaWdnZXJBZnRlclBvcHVwVmlzaWJsZUNoYW5nZSk7XG4gICAgfVxuXG4gICAgdGhpcy5wcmV2UG9wdXBWaXNpYmxlID0gcHJldlN0YXRlLnBvcHVwVmlzaWJsZTtcblxuICAgIC8vIFdlIG11c3QgbGlzdGVuIHRvIGBtb3VzZWRvd25gIG9yIGB0b3VjaHN0YXJ0YCwgZWRnZSBjYXNlOlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdC1jb21wb25lbnQvY2FsZW5kYXIvaXNzdWVzLzI1MFxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdC1jb21wb25lbnQvdHJpZ2dlci9pc3N1ZXMvNTBcbiAgICBpZiAoc3RhdGUucG9wdXBWaXNpYmxlKSB7XG4gICAgICBsZXQgY3VycmVudERvY3VtZW50O1xuICAgICAgaWYgKCF0aGlzLmNsaWNrT3V0c2lkZUhhbmRsZXIgJiYgKHRoaXMuaXNDbGlja1RvSGlkZSgpIHx8IHRoaXMuaXNDb250ZXh0TWVudVRvU2hvdygpKSkge1xuICAgICAgICBjdXJyZW50RG9jdW1lbnQgPSBwcm9wcy5nZXREb2N1bWVudCgpO1xuICAgICAgICB0aGlzLmNsaWNrT3V0c2lkZUhhbmRsZXIgPSBhZGRFdmVudExpc3RlbmVyKGN1cnJlbnREb2N1bWVudCxcbiAgICAgICAgICAnbW91c2Vkb3duJywgdGhpcy5vbkRvY3VtZW50Q2xpY2spO1xuICAgICAgfVxuICAgICAgLy8gYWx3YXlzIGhpZGUgb24gbW9iaWxlXG4gICAgICBpZiAoIXRoaXMudG91Y2hPdXRzaWRlSGFuZGxlcikge1xuICAgICAgICBjdXJyZW50RG9jdW1lbnQgPSBjdXJyZW50RG9jdW1lbnQgfHwgcHJvcHMuZ2V0RG9jdW1lbnQoKTtcbiAgICAgICAgdGhpcy50b3VjaE91dHNpZGVIYW5kbGVyID0gYWRkRXZlbnRMaXN0ZW5lcihjdXJyZW50RG9jdW1lbnQsXG4gICAgICAgICAgJ3RvdWNoc3RhcnQnLCB0aGlzLm9uRG9jdW1lbnRDbGljayk7XG4gICAgICB9XG4gICAgICAvLyBjbG9zZSBwb3B1cCB3aGVuIHRyaWdnZXIgdHlwZSBjb250YWlucyAnb25Db250ZXh0TWVudScgYW5kIGRvY3VtZW50IGlzIHNjcm9sbGluZy5cbiAgICAgIGlmICghdGhpcy5jb250ZXh0TWVudU91dHNpZGVIYW5kbGVyMSAmJiB0aGlzLmlzQ29udGV4dE1lbnVUb1Nob3coKSkge1xuICAgICAgICBjdXJyZW50RG9jdW1lbnQgPSBjdXJyZW50RG9jdW1lbnQgfHwgcHJvcHMuZ2V0RG9jdW1lbnQoKTtcbiAgICAgICAgdGhpcy5jb250ZXh0TWVudU91dHNpZGVIYW5kbGVyMSA9IGFkZEV2ZW50TGlzdGVuZXIoY3VycmVudERvY3VtZW50LFxuICAgICAgICAgICdzY3JvbGwnLCB0aGlzLm9uQ29udGV4dE1lbnVDbG9zZSk7XG4gICAgICB9XG4gICAgICAvLyBjbG9zZSBwb3B1cCB3aGVuIHRyaWdnZXIgdHlwZSBjb250YWlucyAnb25Db250ZXh0TWVudScgYW5kIHdpbmRvdyBpcyBibHVyLlxuICAgICAgaWYgKCF0aGlzLmNvbnRleHRNZW51T3V0c2lkZUhhbmRsZXIyICYmIHRoaXMuaXNDb250ZXh0TWVudVRvU2hvdygpKSB7XG4gICAgICAgIHRoaXMuY29udGV4dE1lbnVPdXRzaWRlSGFuZGxlcjIgPSBhZGRFdmVudExpc3RlbmVyKHdpbmRvdyxcbiAgICAgICAgICAnYmx1cicsIHRoaXMub25Db250ZXh0TWVudUNsb3NlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmNsZWFyT3V0c2lkZUhhbmRsZXIoKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuY2xlYXJEZWxheVRpbWVyKCk7XG4gICAgdGhpcy5jbGVhck91dHNpZGVIYW5kbGVyKCk7XG4gIH1cblxuICBvbk1vdXNlRW50ZXIgPSAoZSkgPT4ge1xuICAgIHRoaXMuZmlyZUV2ZW50cygnb25Nb3VzZUVudGVyJywgZSk7XG4gICAgdGhpcy5kZWxheVNldFBvcHVwVmlzaWJsZSh0cnVlLCB0aGlzLnByb3BzLm1vdXNlRW50ZXJEZWxheSk7XG4gIH07XG5cbiAgb25Nb3VzZUxlYXZlID0gKGUpID0+IHtcbiAgICB0aGlzLmZpcmVFdmVudHMoJ29uTW91c2VMZWF2ZScsIGUpO1xuICAgIHRoaXMuZGVsYXlTZXRQb3B1cFZpc2libGUoZmFsc2UsIHRoaXMucHJvcHMubW91c2VMZWF2ZURlbGF5KTtcbiAgfTtcblxuICBvblBvcHVwTW91c2VFbnRlciA9ICgpID0+IHtcbiAgICB0aGlzLmNsZWFyRGVsYXlUaW1lcigpO1xuICB9O1xuXG4gIG9uUG9wdXBNb3VzZUxlYXZlID0gKGUpID0+IHtcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtY29tcG9uZW50L3RyaWdnZXIvcHVsbC8xM1xuICAgIC8vIHJlYWN0IGJ1Zz9cbiAgICBpZiAoZS5yZWxhdGVkVGFyZ2V0ICYmICFlLnJlbGF0ZWRUYXJnZXQuc2V0VGltZW91dCAmJlxuICAgICAgdGhpcy5fY29tcG9uZW50ICYmXG4gICAgICB0aGlzLl9jb21wb25lbnQuZ2V0UG9wdXBEb21Ob2RlICYmXG4gICAgICBjb250YWlucyh0aGlzLl9jb21wb25lbnQuZ2V0UG9wdXBEb21Ob2RlKCksIGUucmVsYXRlZFRhcmdldCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5kZWxheVNldFBvcHVwVmlzaWJsZShmYWxzZSwgdGhpcy5wcm9wcy5tb3VzZUxlYXZlRGVsYXkpO1xuICB9O1xuXG4gIG9uRm9jdXMgPSAoZSkgPT4ge1xuICAgIHRoaXMuZmlyZUV2ZW50cygnb25Gb2N1cycsIGUpO1xuICAgIC8vIGluY2FzZSBmb2N1c2luIGFuZCBmb2N1c291dFxuICAgIHRoaXMuY2xlYXJEZWxheVRpbWVyKCk7XG4gICAgaWYgKHRoaXMuaXNGb2N1c1RvU2hvdygpKSB7XG4gICAgICB0aGlzLmZvY3VzVGltZSA9IERhdGUubm93KCk7XG4gICAgICB0aGlzLmRlbGF5U2V0UG9wdXBWaXNpYmxlKHRydWUsIHRoaXMucHJvcHMuZm9jdXNEZWxheSk7XG4gICAgfVxuICB9O1xuXG4gIG9uTW91c2VEb3duID0gKGUpID0+IHtcbiAgICB0aGlzLmZpcmVFdmVudHMoJ29uTW91c2VEb3duJywgZSk7XG4gICAgdGhpcy5wcmVDbGlja1RpbWUgPSBEYXRlLm5vdygpO1xuICB9O1xuXG4gIG9uVG91Y2hTdGFydCA9IChlKSA9PiB7XG4gICAgdGhpcy5maXJlRXZlbnRzKCdvblRvdWNoU3RhcnQnLCBlKTtcbiAgICB0aGlzLnByZVRvdWNoVGltZSA9IERhdGUubm93KCk7XG4gIH07XG5cbiAgb25CbHVyID0gKGUpID0+IHtcbiAgICB0aGlzLmZpcmVFdmVudHMoJ29uQmx1cicsIGUpO1xuICAgIHRoaXMuY2xlYXJEZWxheVRpbWVyKCk7XG4gICAgaWYgKHRoaXMuaXNCbHVyVG9IaWRlKCkpIHtcbiAgICAgIHRoaXMuZGVsYXlTZXRQb3B1cFZpc2libGUoZmFsc2UsIHRoaXMucHJvcHMuYmx1ckRlbGF5KTtcbiAgICB9XG4gIH07XG5cbiAgb25Db250ZXh0TWVudSA9IChlKSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMuZmlyZUV2ZW50cygnb25Db250ZXh0TWVudScsIGUpO1xuICAgIHRoaXMuc2V0UG9wdXBWaXNpYmxlKHRydWUpO1xuICB9O1xuXG4gIG9uQ29udGV4dE1lbnVDbG9zZSA9ICgpID0+IHtcbiAgICBpZiAodGhpcy5pc0NvbnRleHRNZW51VG9TaG93KCkpIHtcbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9XG4gIH07XG5cbiAgb25DbGljayA9IChldmVudCkgPT4ge1xuICAgIHRoaXMuZmlyZUV2ZW50cygnb25DbGljaycsIGV2ZW50KTtcbiAgICAvLyBmb2N1cyB3aWxsIHRyaWdnZXIgY2xpY2tcbiAgICBpZiAodGhpcy5mb2N1c1RpbWUpIHtcbiAgICAgIGxldCBwcmVUaW1lO1xuICAgICAgaWYgKHRoaXMucHJlQ2xpY2tUaW1lICYmIHRoaXMucHJlVG91Y2hUaW1lKSB7XG4gICAgICAgIHByZVRpbWUgPSBNYXRoLm1pbih0aGlzLnByZUNsaWNrVGltZSwgdGhpcy5wcmVUb3VjaFRpbWUpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnByZUNsaWNrVGltZSkge1xuICAgICAgICBwcmVUaW1lID0gdGhpcy5wcmVDbGlja1RpbWU7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMucHJlVG91Y2hUaW1lKSB7XG4gICAgICAgIHByZVRpbWUgPSB0aGlzLnByZVRvdWNoVGltZTtcbiAgICAgIH1cbiAgICAgIGlmIChNYXRoLmFicyhwcmVUaW1lIC0gdGhpcy5mb2N1c1RpbWUpIDwgMjApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5mb2N1c1RpbWUgPSAwO1xuICAgIH1cbiAgICB0aGlzLnByZUNsaWNrVGltZSA9IDA7XG4gICAgdGhpcy5wcmVUb3VjaFRpbWUgPSAwO1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3QgbmV4dFZpc2libGUgPSAhdGhpcy5zdGF0ZS5wb3B1cFZpc2libGU7XG4gICAgaWYgKHRoaXMuaXNDbGlja1RvSGlkZSgpICYmICFuZXh0VmlzaWJsZSB8fCBuZXh0VmlzaWJsZSAmJiB0aGlzLmlzQ2xpY2tUb1Nob3coKSkge1xuICAgICAgdGhpcy5zZXRQb3B1cFZpc2libGUoIXRoaXMuc3RhdGUucG9wdXBWaXNpYmxlKTtcbiAgICB9XG4gIH07XG5cbiAgb25Eb2N1bWVudENsaWNrID0gKGV2ZW50KSA9PiB7XG4gICAgaWYgKHRoaXMucHJvcHMubWFzayAmJiAhdGhpcy5wcm9wcy5tYXNrQ2xvc2FibGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuICAgIGNvbnN0IHJvb3QgPSBmaW5kRE9NTm9kZSh0aGlzKTtcbiAgICBjb25zdCBwb3B1cE5vZGUgPSB0aGlzLmdldFBvcHVwRG9tTm9kZSgpO1xuICAgIGlmICghY29udGFpbnMocm9vdCwgdGFyZ2V0KSAmJiAhY29udGFpbnMocG9wdXBOb2RlLCB0YXJnZXQpKSB7XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfVxuICB9O1xuXG4gIGdldFBvcHVwRG9tTm9kZSgpIHtcbiAgICAvLyBmb3IgdGVzdFxuICAgIGlmICh0aGlzLl9jb21wb25lbnQgJiYgdGhpcy5fY29tcG9uZW50LmdldFBvcHVwRG9tTm9kZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2NvbXBvbmVudC5nZXRQb3B1cERvbU5vZGUoKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBnZXRSb290RG9tTm9kZSA9ICgpID0+IHtcbiAgICBjb25zdCB7IGdldFJvb3REb21Ob2RlIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmIChnZXRSb290RG9tTm9kZSkge1xuICAgICAgcmV0dXJuIGdldFJvb3REb21Ob2RlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmaW5kRE9NTm9kZSh0aGlzKTtcbiAgICB9XG4gIH07XG5cbiAgZ2V0UG9wdXBDbGFzc0Zyb21BbGlnbiA9IChhbGlnbikgPT4ge1xuICAgIGNvbnN0IGNsYXNzTmFtZSA9IFtdO1xuICAgIGNvbnN0IHByb3BzID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHBvcHVwUGxhY2VtZW50LCBidWlsdGluUGxhY2VtZW50cywgcHJlZml4Q2xzIH0gPSBwcm9wcztcbiAgICBpZiAocG9wdXBQbGFjZW1lbnQgJiYgYnVpbHRpblBsYWNlbWVudHMpIHtcbiAgICAgIGNsYXNzTmFtZS5wdXNoKGdldFBvcHVwQ2xhc3NOYW1lRnJvbUFsaWduKGJ1aWx0aW5QbGFjZW1lbnRzLCBwcmVmaXhDbHMsIGFsaWduKSk7XG4gICAgfVxuICAgIGlmIChwcm9wcy5nZXRQb3B1cENsYXNzTmFtZUZyb21BbGlnbikge1xuICAgICAgY2xhc3NOYW1lLnB1c2gocHJvcHMuZ2V0UG9wdXBDbGFzc05hbWVGcm9tQWxpZ24oYWxpZ24pKTtcbiAgICB9XG4gICAgcmV0dXJuIGNsYXNzTmFtZS5qb2luKCcgJyk7XG4gIH07XG5cbiAgZ2V0UG9wdXBBbGlnbigpIHtcbiAgICBjb25zdCBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBwb3B1cFBsYWNlbWVudCwgcG9wdXBBbGlnbiwgYnVpbHRpblBsYWNlbWVudHMgfSA9IHByb3BzO1xuICAgIGlmIChwb3B1cFBsYWNlbWVudCAmJiBidWlsdGluUGxhY2VtZW50cykge1xuICAgICAgcmV0dXJuIGdldEFsaWduRnJvbVBsYWNlbWVudChidWlsdGluUGxhY2VtZW50cywgcG9wdXBQbGFjZW1lbnQsIHBvcHVwQWxpZ24pO1xuICAgIH1cbiAgICByZXR1cm4gcG9wdXBBbGlnbjtcbiAgfVxuXG4gIGdldENvbXBvbmVudCA9ICgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBwcmVmaXhDbHMsIGRlc3Ryb3lQb3B1cE9uSGlkZSwgcG9wdXBDbGFzc05hbWUsIGFjdGlvbixcbiAgICAgIG9uUG9wdXBBbGlnbiwgcG9wdXBBbmltYXRpb24sIHBvcHVwVHJhbnNpdGlvbk5hbWUsIHBvcHVwU3R5bGUsXG4gICAgICBtYXNrLCBtYXNrQW5pbWF0aW9uLCBtYXNrVHJhbnNpdGlvbk5hbWUsIHpJbmRleCwgcG9wdXAsIHN0cmV0Y2gsXG4gICAgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBzdGF0ZSB9ID0gdGhpcztcblxuICAgIGNvbnN0IGFsaWduID0gdGhpcy5nZXRQb3B1cEFsaWduKCk7XG5cbiAgICBjb25zdCBtb3VzZVByb3BzID0ge307XG4gICAgaWYgKHRoaXMuaXNNb3VzZUVudGVyVG9TaG93KCkpIHtcbiAgICAgIG1vdXNlUHJvcHMub25Nb3VzZUVudGVyID0gdGhpcy5vblBvcHVwTW91c2VFbnRlcjtcbiAgICB9XG4gICAgaWYgKHRoaXMuaXNNb3VzZUxlYXZlVG9IaWRlKCkpIHtcbiAgICAgIG1vdXNlUHJvcHMub25Nb3VzZUxlYXZlID0gdGhpcy5vblBvcHVwTW91c2VMZWF2ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFBvcHVwXG4gICAgICAgIHByZWZpeENscz17cHJlZml4Q2xzfVxuICAgICAgICBkZXN0cm95UG9wdXBPbkhpZGU9e2Rlc3Ryb3lQb3B1cE9uSGlkZX1cbiAgICAgICAgdmlzaWJsZT17c3RhdGUucG9wdXBWaXNpYmxlfVxuICAgICAgICBjbGFzc05hbWU9e3BvcHVwQ2xhc3NOYW1lfVxuICAgICAgICBhY3Rpb249e2FjdGlvbn1cbiAgICAgICAgYWxpZ249e2FsaWdufVxuICAgICAgICBvbkFsaWduPXtvblBvcHVwQWxpZ259XG4gICAgICAgIGFuaW1hdGlvbj17cG9wdXBBbmltYXRpb259XG4gICAgICAgIGdldENsYXNzTmFtZUZyb21BbGlnbj17dGhpcy5nZXRQb3B1cENsYXNzRnJvbUFsaWdufVxuICAgICAgICB7Li4ubW91c2VQcm9wc31cbiAgICAgICAgc3RyZXRjaD17c3RyZXRjaH1cbiAgICAgICAgZ2V0Um9vdERvbU5vZGU9e3RoaXMuZ2V0Um9vdERvbU5vZGV9XG4gICAgICAgIHN0eWxlPXtwb3B1cFN0eWxlfVxuICAgICAgICBtYXNrPXttYXNrfVxuICAgICAgICB6SW5kZXg9e3pJbmRleH1cbiAgICAgICAgdHJhbnNpdGlvbk5hbWU9e3BvcHVwVHJhbnNpdGlvbk5hbWV9XG4gICAgICAgIG1hc2tBbmltYXRpb249e21hc2tBbmltYXRpb259XG4gICAgICAgIG1hc2tUcmFuc2l0aW9uTmFtZT17bWFza1RyYW5zaXRpb25OYW1lfVxuICAgICAgICByZWY9e3RoaXMuc2F2ZVBvcHVwfVxuICAgICAgPlxuICAgICAgICB7dHlwZW9mIHBvcHVwID09PSAnZnVuY3Rpb24nID8gcG9wdXAoKSA6IHBvcHVwfVxuICAgICAgPC9Qb3B1cD5cbiAgICApO1xuICB9O1xuXG4gIGdldENvbnRhaW5lciA9ICgpID0+IHtcbiAgICBjb25zdCB7IHByb3BzIH0gPSB0aGlzO1xuICAgIGNvbnN0IHBvcHVwQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgLy8gTWFrZSBzdXJlIGRlZmF1bHQgcG9wdXAgY29udGFpbmVyIHdpbGwgbmV2ZXIgY2F1c2Ugc2Nyb2xsYmFyIGFwcGVhcmluZ1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdC1jb21wb25lbnQvdHJpZ2dlci9pc3N1ZXMvNDFcbiAgICBwb3B1cENvbnRhaW5lci5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgcG9wdXBDb250YWluZXIuc3R5bGUudG9wID0gJzAnO1xuICAgIHBvcHVwQ29udGFpbmVyLnN0eWxlLmxlZnQgPSAnMCc7XG4gICAgcG9wdXBDb250YWluZXIuc3R5bGUud2lkdGggPSAnMTAwJSc7XG4gICAgY29uc3QgbW91bnROb2RlID0gcHJvcHMuZ2V0UG9wdXBDb250YWluZXIgPyBwcm9wcy5nZXRQb3B1cENvbnRhaW5lcihmaW5kRE9NTm9kZSh0aGlzKSkgOiBwcm9wcy5nZXREb2N1bWVudCgpLmJvZHk7XG4gICAgbW91bnROb2RlLmFwcGVuZENoaWxkKHBvcHVwQ29udGFpbmVyKTtcbiAgICByZXR1cm4gcG9wdXBDb250YWluZXI7XG4gIH07XG5cbiAgc2V0UG9wdXBWaXNpYmxlKHBvcHVwVmlzaWJsZSkge1xuICAgIHRoaXMuY2xlYXJEZWxheVRpbWVyKCk7XG4gICAgaWYgKHRoaXMuc3RhdGUucG9wdXBWaXNpYmxlICE9PSBwb3B1cFZpc2libGUpIHtcbiAgICAgIGlmICghKCdwb3B1cFZpc2libGUnIGluIHRoaXMucHJvcHMpKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIHBvcHVwVmlzaWJsZSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICB0aGlzLnByb3BzLm9uUG9wdXBWaXNpYmxlQ2hhbmdlKHBvcHVwVmlzaWJsZSk7XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlUG9ydGFsVXBkYXRlID0gKCkgPT4ge1xuICAgIGlmICh0aGlzLnByZXZQb3B1cFZpc2libGUgIT09IHRoaXMuc3RhdGUucG9wdXBWaXNpYmxlKSB7XG4gICAgICB0aGlzLnByb3BzLmFmdGVyUG9wdXBWaXNpYmxlQ2hhbmdlKHRoaXMuc3RhdGUucG9wdXBWaXNpYmxlKTtcbiAgICB9XG4gIH07XG5cbiAgZGVsYXlTZXRQb3B1cFZpc2libGUodmlzaWJsZSwgZGVsYXlTKSB7XG4gICAgY29uc3QgZGVsYXkgPSBkZWxheVMgKiAxMDAwO1xuICAgIHRoaXMuY2xlYXJEZWxheVRpbWVyKCk7XG4gICAgaWYgKGRlbGF5KSB7XG4gICAgICB0aGlzLmRlbGF5VGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5zZXRQb3B1cFZpc2libGUodmlzaWJsZSk7XG4gICAgICAgIHRoaXMuY2xlYXJEZWxheVRpbWVyKCk7XG4gICAgICB9LCBkZWxheSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0UG9wdXBWaXNpYmxlKHZpc2libGUpO1xuICAgIH1cbiAgfVxuXG4gIGNsZWFyRGVsYXlUaW1lcigpIHtcbiAgICBpZiAodGhpcy5kZWxheVRpbWVyKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5kZWxheVRpbWVyKTtcbiAgICAgIHRoaXMuZGVsYXlUaW1lciA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgY2xlYXJPdXRzaWRlSGFuZGxlcigpIHtcbiAgICBpZiAodGhpcy5jbGlja091dHNpZGVIYW5kbGVyKSB7XG4gICAgICB0aGlzLmNsaWNrT3V0c2lkZUhhbmRsZXIucmVtb3ZlKCk7XG4gICAgICB0aGlzLmNsaWNrT3V0c2lkZUhhbmRsZXIgPSBudWxsO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmNvbnRleHRNZW51T3V0c2lkZUhhbmRsZXIxKSB7XG4gICAgICB0aGlzLmNvbnRleHRNZW51T3V0c2lkZUhhbmRsZXIxLnJlbW92ZSgpO1xuICAgICAgdGhpcy5jb250ZXh0TWVudU91dHNpZGVIYW5kbGVyMSA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuY29udGV4dE1lbnVPdXRzaWRlSGFuZGxlcjIpIHtcbiAgICAgIHRoaXMuY29udGV4dE1lbnVPdXRzaWRlSGFuZGxlcjIucmVtb3ZlKCk7XG4gICAgICB0aGlzLmNvbnRleHRNZW51T3V0c2lkZUhhbmRsZXIyID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy50b3VjaE91dHNpZGVIYW5kbGVyKSB7XG4gICAgICB0aGlzLnRvdWNoT3V0c2lkZUhhbmRsZXIucmVtb3ZlKCk7XG4gICAgICB0aGlzLnRvdWNoT3V0c2lkZUhhbmRsZXIgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIGNyZWF0ZVR3b0NoYWlucyhldmVudCkge1xuICAgIGNvbnN0IGNoaWxkUHJvcyA9IHRoaXMucHJvcHMuY2hpbGRyZW4ucHJvcHM7XG4gICAgY29uc3QgcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIGlmIChjaGlsZFByb3NbZXZlbnRdICYmIHByb3BzW2V2ZW50XSkge1xuICAgICAgcmV0dXJuIHRoaXNbYGZpcmUke2V2ZW50fWBdO1xuICAgIH1cbiAgICByZXR1cm4gY2hpbGRQcm9zW2V2ZW50XSB8fCBwcm9wc1tldmVudF07XG4gIH1cblxuICBpc0NsaWNrVG9TaG93KCkge1xuICAgIGNvbnN0IHsgYWN0aW9uLCBzaG93QWN0aW9uIH0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiBhY3Rpb24uaW5kZXhPZignY2xpY2snKSAhPT0gLTEgfHwgc2hvd0FjdGlvbi5pbmRleE9mKCdjbGljaycpICE9PSAtMTtcbiAgfVxuXG4gIGlzQ29udGV4dE1lbnVUb1Nob3coKSB7XG4gICAgY29uc3QgeyBhY3Rpb24sIHNob3dBY3Rpb24gfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIGFjdGlvbi5pbmRleE9mKCdjb250ZXh0TWVudScpICE9PSAtMSB8fCBzaG93QWN0aW9uLmluZGV4T2YoJ2NvbnRleHRNZW51JykgIT09IC0xO1xuICB9XG5cbiAgaXNDbGlja1RvSGlkZSgpIHtcbiAgICBjb25zdCB7IGFjdGlvbiwgaGlkZUFjdGlvbiB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gYWN0aW9uLmluZGV4T2YoJ2NsaWNrJykgIT09IC0xIHx8IGhpZGVBY3Rpb24uaW5kZXhPZignY2xpY2snKSAhPT0gLTE7XG4gIH1cblxuICBpc01vdXNlRW50ZXJUb1Nob3coKSB7XG4gICAgY29uc3QgeyBhY3Rpb24sIHNob3dBY3Rpb24gfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIGFjdGlvbi5pbmRleE9mKCdob3ZlcicpICE9PSAtMSB8fCBzaG93QWN0aW9uLmluZGV4T2YoJ21vdXNlRW50ZXInKSAhPT0gLTE7XG4gIH1cblxuICBpc01vdXNlTGVhdmVUb0hpZGUoKSB7XG4gICAgY29uc3QgeyBhY3Rpb24sIGhpZGVBY3Rpb24gfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIGFjdGlvbi5pbmRleE9mKCdob3ZlcicpICE9PSAtMSB8fCBoaWRlQWN0aW9uLmluZGV4T2YoJ21vdXNlTGVhdmUnKSAhPT0gLTE7XG4gIH1cblxuICBpc0ZvY3VzVG9TaG93KCkge1xuICAgIGNvbnN0IHsgYWN0aW9uLCBzaG93QWN0aW9uIH0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiBhY3Rpb24uaW5kZXhPZignZm9jdXMnKSAhPT0gLTEgfHwgc2hvd0FjdGlvbi5pbmRleE9mKCdmb2N1cycpICE9PSAtMTtcbiAgfVxuXG4gIGlzQmx1clRvSGlkZSgpIHtcbiAgICBjb25zdCB7IGFjdGlvbiwgaGlkZUFjdGlvbiB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gYWN0aW9uLmluZGV4T2YoJ2ZvY3VzJykgIT09IC0xIHx8IGhpZGVBY3Rpb24uaW5kZXhPZignYmx1cicpICE9PSAtMTtcbiAgfVxuXG4gIGZvcmNlUG9wdXBBbGlnbigpIHtcbiAgICBpZiAodGhpcy5zdGF0ZS5wb3B1cFZpc2libGUgJiYgdGhpcy5fY29tcG9uZW50ICYmIHRoaXMuX2NvbXBvbmVudC5hbGlnbkluc3RhbmNlKSB7XG4gICAgICB0aGlzLl9jb21wb25lbnQuYWxpZ25JbnN0YW5jZS5mb3JjZUFsaWduKCk7XG4gICAgfVxuICB9XG5cbiAgZmlyZUV2ZW50cyh0eXBlLCBlKSB7XG4gICAgY29uc3QgY2hpbGRDYWxsYmFjayA9IHRoaXMucHJvcHMuY2hpbGRyZW4ucHJvcHNbdHlwZV07XG4gICAgaWYgKGNoaWxkQ2FsbGJhY2spIHtcbiAgICAgIGNoaWxkQ2FsbGJhY2soZSk7XG4gICAgfVxuICAgIGNvbnN0IGNhbGxiYWNrID0gdGhpcy5wcm9wc1t0eXBlXTtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrKGUpO1xuICAgIH1cbiAgfVxuXG4gIGNsb3NlKCkge1xuICAgIHRoaXMuc2V0UG9wdXBWaXNpYmxlKGZhbHNlKTtcbiAgfVxuXG4gIHNhdmVQb3B1cCA9IChub2RlKSA9PiB7XG4gICAgdGhpcy5fY29tcG9uZW50ID0gbm9kZTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBwb3B1cFZpc2libGUgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW47XG4gICAgY29uc3QgY2hpbGQgPSBDaGlsZHJlbi5vbmx5KGNoaWxkcmVuKTtcbiAgICBjb25zdCBuZXdDaGlsZFByb3BzID0geyBrZXk6ICd0cmlnZ2VyJyB9O1xuXG4gICAgaWYgKHRoaXMuaXNDb250ZXh0TWVudVRvU2hvdygpKSB7XG4gICAgICBuZXdDaGlsZFByb3BzLm9uQ29udGV4dE1lbnUgPSB0aGlzLm9uQ29udGV4dE1lbnU7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld0NoaWxkUHJvcHMub25Db250ZXh0TWVudSA9IHRoaXMuY3JlYXRlVHdvQ2hhaW5zKCdvbkNvbnRleHRNZW51Jyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNDbGlja1RvSGlkZSgpIHx8IHRoaXMuaXNDbGlja1RvU2hvdygpKSB7XG4gICAgICBuZXdDaGlsZFByb3BzLm9uQ2xpY2sgPSB0aGlzLm9uQ2xpY2s7XG4gICAgICBuZXdDaGlsZFByb3BzLm9uTW91c2VEb3duID0gdGhpcy5vbk1vdXNlRG93bjtcbiAgICAgIG5ld0NoaWxkUHJvcHMub25Ub3VjaFN0YXJ0ID0gdGhpcy5vblRvdWNoU3RhcnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld0NoaWxkUHJvcHMub25DbGljayA9IHRoaXMuY3JlYXRlVHdvQ2hhaW5zKCdvbkNsaWNrJyk7XG4gICAgICBuZXdDaGlsZFByb3BzLm9uTW91c2VEb3duID0gdGhpcy5jcmVhdGVUd29DaGFpbnMoJ29uTW91c2VEb3duJyk7XG4gICAgICBuZXdDaGlsZFByb3BzLm9uVG91Y2hTdGFydCA9IHRoaXMuY3JlYXRlVHdvQ2hhaW5zKCdvblRvdWNoU3RhcnQnKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuaXNNb3VzZUVudGVyVG9TaG93KCkpIHtcbiAgICAgIG5ld0NoaWxkUHJvcHMub25Nb3VzZUVudGVyID0gdGhpcy5vbk1vdXNlRW50ZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld0NoaWxkUHJvcHMub25Nb3VzZUVudGVyID0gdGhpcy5jcmVhdGVUd29DaGFpbnMoJ29uTW91c2VFbnRlcicpO1xuICAgIH1cbiAgICBpZiAodGhpcy5pc01vdXNlTGVhdmVUb0hpZGUoKSkge1xuICAgICAgbmV3Q2hpbGRQcm9wcy5vbk1vdXNlTGVhdmUgPSB0aGlzLm9uTW91c2VMZWF2ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3Q2hpbGRQcm9wcy5vbk1vdXNlTGVhdmUgPSB0aGlzLmNyZWF0ZVR3b0NoYWlucygnb25Nb3VzZUxlYXZlJyk7XG4gICAgfVxuICAgIGlmICh0aGlzLmlzRm9jdXNUb1Nob3coKSB8fCB0aGlzLmlzQmx1clRvSGlkZSgpKSB7XG4gICAgICBuZXdDaGlsZFByb3BzLm9uRm9jdXMgPSB0aGlzLm9uRm9jdXM7XG4gICAgICBuZXdDaGlsZFByb3BzLm9uQmx1ciA9IHRoaXMub25CbHVyO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXdDaGlsZFByb3BzLm9uRm9jdXMgPSB0aGlzLmNyZWF0ZVR3b0NoYWlucygnb25Gb2N1cycpO1xuICAgICAgbmV3Q2hpbGRQcm9wcy5vbkJsdXIgPSB0aGlzLmNyZWF0ZVR3b0NoYWlucygnb25CbHVyJyk7XG4gICAgfVxuXG4gICAgY29uc3QgdHJpZ2dlciA9IGNsb25lRWxlbWVudChjaGlsZCwgbmV3Q2hpbGRQcm9wcyk7XG5cbiAgICBpZiAoIUlTX1JFQUNUXzE2KSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8Q29udGFpbmVyUmVuZGVyXG4gICAgICAgICAgcGFyZW50PXt0aGlzfVxuICAgICAgICAgIHZpc2libGU9e3BvcHVwVmlzaWJsZX1cbiAgICAgICAgICBhdXRvTW91bnQ9e2ZhbHNlfVxuICAgICAgICAgIGZvcmNlUmVuZGVyPXtwcm9wcy5mb3JjZVJlbmRlcn1cbiAgICAgICAgICBnZXRDb21wb25lbnQ9e3RoaXMuZ2V0Q29tcG9uZW50fVxuICAgICAgICAgIGdldENvbnRhaW5lcj17dGhpcy5nZXRDb250YWluZXJ9XG4gICAgICAgID5cbiAgICAgICAgICB7KHsgcmVuZGVyQ29tcG9uZW50IH0pID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyQ29tcG9uZW50ID0gcmVuZGVyQ29tcG9uZW50O1xuICAgICAgICAgICAgcmV0dXJuIHRyaWdnZXI7XG4gICAgICAgICAgfX1cbiAgICAgICAgPC9Db250YWluZXJSZW5kZXI+XG4gICAgICApO1xuICAgIH1cblxuICAgIGxldCBwb3J0YWw7XG4gICAgLy8gcHJldmVudCB1bm1vdW50aW5nIGFmdGVyIGl0J3MgcmVuZGVyZWRcbiAgICBpZiAocG9wdXBWaXNpYmxlIHx8IHRoaXMuX2NvbXBvbmVudCB8fCBwcm9wcy5mb3JjZVJlbmRlcikge1xuICAgICAgcG9ydGFsID0gKFxuICAgICAgICA8UG9ydGFsXG4gICAgICAgICAga2V5PVwicG9ydGFsXCJcbiAgICAgICAgICBnZXRDb250YWluZXI9e3RoaXMuZ2V0Q29udGFpbmVyfVxuICAgICAgICAgIGRpZFVwZGF0ZT17dGhpcy5oYW5kbGVQb3J0YWxVcGRhdGV9XG4gICAgICAgID5cbiAgICAgICAgICB7dGhpcy5nZXRDb21wb25lbnQoKX1cbiAgICAgICAgPC9Qb3J0YWw+XG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBbXG4gICAgICB0cmlnZ2VyLFxuICAgICAgcG9ydGFsLFxuICAgIF07XG4gIH1cbn1cbiJdfQ==