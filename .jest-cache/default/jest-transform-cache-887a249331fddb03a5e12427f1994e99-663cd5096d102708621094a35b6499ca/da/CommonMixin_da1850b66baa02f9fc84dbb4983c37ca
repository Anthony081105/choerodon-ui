eb5ae33e3e7345ebf294401e9b610b49
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _noop = _interopRequireDefault(require("lodash/noop"));

var _en_US = _interopRequireDefault(require("../locale/en_US"));

var _default = {
  propTypes: {
    className: _propTypes["default"].string,
    locale: _propTypes["default"].object,
    style: _propTypes["default"].object,
    visible: _propTypes["default"].bool,
    onSelect: _propTypes["default"].func,
    prefixCls: _propTypes["default"].string,
    onChange: _propTypes["default"].func,
    onOk: _propTypes["default"].func
  },
  getDefaultProps: function getDefaultProps() {
    return {
      locale: _en_US["default"],
      style: {},
      visible: true,
      prefixCls: 'rc-calendar',
      className: '',
      onSelect: _noop["default"],
      onChange: _noop["default"],
      onClear: _noop["default"],
      renderFooter: function renderFooter() {
        return null;
      },
      renderSidebar: function renderSidebar() {
        return null;
      }
    };
  },
  shouldComponentUpdate: function shouldComponentUpdate(nextProps) {
    return this.props.visible || nextProps.visible;
  },
  getFormat: function getFormat() {
    var format = this.props.format;
    var _this$props = this.props,
        locale = _this$props.locale,
        timePicker = _this$props.timePicker;

    if (!format) {
      if (timePicker) {
        format = locale.dateTimeFormat;
      } else {
        format = locale.dateFormat;
      }
    }

    return format;
  },
  focus: function focus() {
    if (this.rootInstance) {
      this.rootInstance.focus();
    }
  },
  saveRoot: function saveRoot(root) {
    this.rootInstance = root;
  }
};
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNvbW1vbk1peGluLmpzeCJdLCJuYW1lcyI6WyJwcm9wVHlwZXMiLCJjbGFzc05hbWUiLCJQcm9wVHlwZXMiLCJzdHJpbmciLCJsb2NhbGUiLCJvYmplY3QiLCJzdHlsZSIsInZpc2libGUiLCJib29sIiwib25TZWxlY3QiLCJmdW5jIiwicHJlZml4Q2xzIiwib25DaGFuZ2UiLCJvbk9rIiwiZ2V0RGVmYXVsdFByb3BzIiwiZW5VcyIsIm5vb3AiLCJvbkNsZWFyIiwicmVuZGVyRm9vdGVyIiwicmVuZGVyU2lkZWJhciIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsIm5leHRQcm9wcyIsInByb3BzIiwiZ2V0Rm9ybWF0IiwiZm9ybWF0IiwidGltZVBpY2tlciIsImRhdGVUaW1lRm9ybWF0IiwiZGF0ZUZvcm1hdCIsImZvY3VzIiwicm9vdEluc3RhbmNlIiwic2F2ZVJvb3QiLCJyb290Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7ZUFFZTtBQUNiQSxFQUFBQSxTQUFTLEVBQUU7QUFDVEMsSUFBQUEsU0FBUyxFQUFFQyxzQkFBVUMsTUFEWjtBQUVUQyxJQUFBQSxNQUFNLEVBQUVGLHNCQUFVRyxNQUZUO0FBR1RDLElBQUFBLEtBQUssRUFBRUosc0JBQVVHLE1BSFI7QUFJVEUsSUFBQUEsT0FBTyxFQUFFTCxzQkFBVU0sSUFKVjtBQUtUQyxJQUFBQSxRQUFRLEVBQUVQLHNCQUFVUSxJQUxYO0FBTVRDLElBQUFBLFNBQVMsRUFBRVQsc0JBQVVDLE1BTlo7QUFPVFMsSUFBQUEsUUFBUSxFQUFFVixzQkFBVVEsSUFQWDtBQVFURyxJQUFBQSxJQUFJLEVBQUVYLHNCQUFVUTtBQVJQLEdBREU7QUFZYkksRUFBQUEsZUFaYSw2QkFZSztBQUNoQixXQUFPO0FBQ0xWLE1BQUFBLE1BQU0sRUFBRVcsaUJBREg7QUFFTFQsTUFBQUEsS0FBSyxFQUFFLEVBRkY7QUFHTEMsTUFBQUEsT0FBTyxFQUFFLElBSEo7QUFJTEksTUFBQUEsU0FBUyxFQUFFLGFBSk47QUFLTFYsTUFBQUEsU0FBUyxFQUFFLEVBTE47QUFNTFEsTUFBQUEsUUFBUSxFQUFFTyxnQkFOTDtBQU9MSixNQUFBQSxRQUFRLEVBQUVJLGdCQVBMO0FBUUxDLE1BQUFBLE9BQU8sRUFBRUQsZ0JBUko7QUFTTEUsTUFBQUEsWUFUSywwQkFTVTtBQUNiLGVBQU8sSUFBUDtBQUNELE9BWEk7QUFZTEMsTUFBQUEsYUFaSywyQkFZVztBQUNkLGVBQU8sSUFBUDtBQUNEO0FBZEksS0FBUDtBQWdCRCxHQTdCWTtBQStCYkMsRUFBQUEscUJBL0JhLGlDQStCU0MsU0EvQlQsRUErQm9CO0FBQy9CLFdBQU8sS0FBS0MsS0FBTCxDQUFXZixPQUFYLElBQXNCYyxTQUFTLENBQUNkLE9BQXZDO0FBQ0QsR0FqQ1k7QUFtQ2JnQixFQUFBQSxTQW5DYSx1QkFtQ0Q7QUFBQSxRQUNKQyxNQURJLEdBQ08sS0FBS0YsS0FEWixDQUNKRSxNQURJO0FBQUEsc0JBRXFCLEtBQUtGLEtBRjFCO0FBQUEsUUFFRmxCLE1BRkUsZUFFRkEsTUFGRTtBQUFBLFFBRU1xQixVQUZOLGVBRU1BLFVBRk47O0FBR1YsUUFBSSxDQUFDRCxNQUFMLEVBQWE7QUFDWCxVQUFJQyxVQUFKLEVBQWdCO0FBQ2RELFFBQUFBLE1BQU0sR0FBR3BCLE1BQU0sQ0FBQ3NCLGNBQWhCO0FBQ0QsT0FGRCxNQUVPO0FBQ0xGLFFBQUFBLE1BQU0sR0FBR3BCLE1BQU0sQ0FBQ3VCLFVBQWhCO0FBQ0Q7QUFDRjs7QUFDRCxXQUFPSCxNQUFQO0FBQ0QsR0E5Q1k7QUFnRGJJLEVBQUFBLEtBaERhLG1CQWdETDtBQUNOLFFBQUksS0FBS0MsWUFBVCxFQUF1QjtBQUNyQixXQUFLQSxZQUFMLENBQWtCRCxLQUFsQjtBQUNEO0FBQ0YsR0FwRFk7QUFzRGJFLEVBQUFBLFFBdERhLG9CQXNESkMsSUF0REksRUFzREU7QUFDYixTQUFLRixZQUFMLEdBQW9CRSxJQUFwQjtBQUNEO0FBeERZLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IG5vb3AgZnJvbSAnbG9kYXNoL25vb3AnO1xuaW1wb3J0IGVuVXMgZnJvbSAnLi4vbG9jYWxlL2VuX1VTJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBwcm9wVHlwZXM6IHtcbiAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgbG9jYWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHZpc2libGU6IFByb3BUeXBlcy5ib29sLFxuICAgIG9uU2VsZWN0OiBQcm9wVHlwZXMuZnVuYyxcbiAgICBwcmVmaXhDbHM6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9uT2s6IFByb3BUeXBlcy5mdW5jLFxuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbG9jYWxlOiBlblVzLFxuICAgICAgc3R5bGU6IHt9LFxuICAgICAgdmlzaWJsZTogdHJ1ZSxcbiAgICAgIHByZWZpeENsczogJ3JjLWNhbGVuZGFyJyxcbiAgICAgIGNsYXNzTmFtZTogJycsXG4gICAgICBvblNlbGVjdDogbm9vcCxcbiAgICAgIG9uQ2hhbmdlOiBub29wLFxuICAgICAgb25DbGVhcjogbm9vcCxcbiAgICAgIHJlbmRlckZvb3RlcigpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9LFxuICAgICAgcmVuZGVyU2lkZWJhcigpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9LFxuICAgIH07XG4gIH0sXG5cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcykge1xuICAgIHJldHVybiB0aGlzLnByb3BzLnZpc2libGUgfHwgbmV4dFByb3BzLnZpc2libGU7XG4gIH0sXG5cbiAgZ2V0Rm9ybWF0KCkge1xuICAgIGxldCB7IGZvcm1hdCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IGxvY2FsZSwgdGltZVBpY2tlciB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAoIWZvcm1hdCkge1xuICAgICAgaWYgKHRpbWVQaWNrZXIpIHtcbiAgICAgICAgZm9ybWF0ID0gbG9jYWxlLmRhdGVUaW1lRm9ybWF0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9ybWF0ID0gbG9jYWxlLmRhdGVGb3JtYXQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmb3JtYXQ7XG4gIH0sXG5cbiAgZm9jdXMoKSB7XG4gICAgaWYgKHRoaXMucm9vdEluc3RhbmNlKSB7XG4gICAgICB0aGlzLnJvb3RJbnN0YW5jZS5mb2N1cygpO1xuICAgIH1cbiAgfSxcblxuICBzYXZlUm9vdChyb290KSB7XG4gICAgdGhpcy5yb290SW5zdGFuY2UgPSByb290O1xuICB9LFxufTtcbiJdfQ==