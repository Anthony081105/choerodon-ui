392b5e19b8b42132f0b1b11dde6b5be5
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _ = _interopRequireDefault(require(".."));

function _createSuper(Derived) {
  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  return function () {
    var Super = (0, _getPrototypeOf2["default"])(Derived),
        result;

    if (isNativeReflectConstruct()) {
      var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return (0, _possibleConstructorReturn2["default"])(this, result);
  };
}

describe('message', function () {
  beforeEach(function () {
    jest.useFakeTimers();
  });
  afterEach(function () {
    _["default"].destroy();

    jest.useRealTimers();
  });
  it('should be able to config top', function () {
    _["default"].config({
      top: 100
    });

    _["default"].info('whatever', undefined, undefined, 'top');

    expect(document.querySelectorAll('.c7n-message')[0].style.top).toBe('100px');
  });
  it('should be able to config getContainer', function () {
    _["default"].config({
      getContainer: function getContainer() {
        var div = document.createElement('div');
        div.className = 'custom-container';
        document.body.appendChild(div);
        return div;
      }
    });

    _["default"].info('whatever');

    expect(document.querySelectorAll('.custom-container').length).toBe(1);
  });
  it('should be able to hide manually', function () {
    var hide1 = _["default"].info('whatever', 0);

    var hide2 = _["default"].info('whatever', 0);

    expect(document.querySelectorAll('.c7n-message-notice').length).toBe(2);
    hide1();
    jest.runAllTimers();
    expect(document.querySelectorAll('.c7n-message-notice').length).toBe(1);
    hide2();
    jest.runAllTimers();
    expect(document.querySelectorAll('.c7n-message-notice').length).toBe(0);
  });
  it('should be able to destroy globally', function () {
    _["default"].info('whatever', 0);

    _["default"].info('whatever', 0);

    expect(document.querySelectorAll('.c7n-message').length).toBe(1);
    expect(document.querySelectorAll('.c7n-message-notice').length).toBe(2);

    _["default"].destroy();

    expect(document.querySelectorAll('.c7n-message').length).toBe(0);
    expect(document.querySelectorAll('.c7n-message-notice').length).toBe(0);
  });
  it('should not need to use duration argument when using the onClose arguments', function () {
    _["default"].info('whatever', function () {});
  });
  it('should have the default duration when using the onClose arguments', function (done) {
    jest.useRealTimers();
    var defaultDuration = 3;
    var now = Date.now();

    _["default"].info('whatever', function () {
      // calculate the approximately duration value
      var aboutDuration = parseInt((Date.now() - now) / 1000, 10);
      expect(aboutDuration).toBe(defaultDuration);
      done();
    });
  });
  it('should hide message correctly', function () {
    var hide;

    var Test =
    /*#__PURE__*/
    function (_React$Component) {
      (0, _inherits2["default"])(Test, _React$Component);

      var _super = _createSuper(Test);

      function Test() {
        (0, _classCallCheck2["default"])(this, Test);
        return _super.apply(this, arguments);
      }

      (0, _createClass2["default"])(Test, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          hide = _["default"].loading('Action in progress..', 0);
        }
      }, {
        key: "render",
        value: function render() {
          return _react["default"].createElement("div", null, "test");
        }
      }]);
      return Test;
    }(_react["default"].Component);

    (0, _enzyme.mount)(_react["default"].createElement(Test, null));
    expect(document.querySelectorAll('.c7n-message-notice').length).toBe(1);
    hide();
    jest.runAllTimers();
    expect(document.querySelectorAll('.c7n-message-notice').length).toBe(0);
  });
  it('should destroy messages correctly', function () {
    // eslint-disable-next-line
    var Test =
    /*#__PURE__*/
    function (_React$Component2) {
      (0, _inherits2["default"])(Test, _React$Component2);

      var _super2 = _createSuper(Test);

      function Test() {
        (0, _classCallCheck2["default"])(this, Test);
        return _super2.apply(this, arguments);
      }

      (0, _createClass2["default"])(Test, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          _["default"].loading('Action in progress1..', 0);

          _["default"].loading('Action in progress2..', 0);

          setTimeout(function () {
            return _["default"].destroy();
          }, 1000);
        }
      }, {
        key: "render",
        value: function render() {
          return _react["default"].createElement("div", null, "test");
        }
      }]);
      return Test;
    }(_react["default"].Component);

    (0, _enzyme.mount)(_react["default"].createElement(Test, null));
    expect(document.querySelectorAll('.c7n-message-notice').length).toBe(2);
    jest.runAllTimers();
    expect(document.querySelectorAll('.c7n-message-notice').length).toBe(0);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,