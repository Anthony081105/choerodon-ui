bb6d5444c83c22b35bbaee4eedb55e33
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _ = _interopRequireDefault(require(".."));

describe('Table.sorter', function () {
  var sorterFn = function sorterFn(a, b) {
    return a.name[0].charCodeAt() - b.name[0].charCodeAt();
  };

  var column = {
    title: 'Name',
    dataIndex: 'name',
    sorter: sorterFn
  };
  var data = [{
    key: 0,
    name: 'Jack'
  }, {
    key: 1,
    name: 'Lucy'
  }, {
    key: 2,
    name: 'Tom'
  }, {
    key: 3,
    name: 'Jerry'
  }];

  function createTable(tableProps) {
    var columnProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return _react["default"].createElement(_["default"], (0, _extends2["default"])({
      columns: [(0, _objectSpread2["default"])({}, column, {}, columnProps)],
      dataSource: data,
      pagination: false
    }, tableProps));
  }

  function renderedNames(wrapper) {
    return wrapper.find('TableRow').map(function (row) {
      return row.props().record.name;
    });
  }

  it('renders sorter icon correctly', function () {
    var wrapper = (0, _enzyme.render)(createTable());
    expect(wrapper.find('thead')).toMatchSnapshot();
  });
  it('default sort order ascend', function () {
    var wrapper = (0, _enzyme.mount)(createTable({}, {
      defaultSortOrder: 'ascend'
    }));
    expect(renderedNames(wrapper)).toEqual(['Jack', 'Jerry', 'Lucy', 'Tom']);
  });
  it('default sort order descend', function () {
    var wrapper = (0, _enzyme.mount)(createTable({}, {
      defaultSortOrder: 'descend'
    }));
    expect(renderedNames(wrapper)).toEqual(['Tom', 'Lucy', 'Jack', 'Jerry']);
  });
  it('sort records', function () {
    var wrapper = (0, _enzyme.mount)(createTable());
    var columnHead = wrapper.find('th.c7n-table-column-has-filters');
    columnHead.simulate('click');
    expect(renderedNames(wrapper)).toEqual(['Jack', 'Jerry', 'Lucy', 'Tom']);
    columnHead.simulate('click');
    expect(renderedNames(wrapper)).toEqual(['Tom', 'Lucy', 'Jack', 'Jerry']);
  });
  it('can be controlled by sortOrder', function () {
    var wrapper = (0, _enzyme.mount)(createTable({
      columns: [(0, _objectSpread2["default"])({}, column, {
        sortOrder: 'ascend'
      })]
    }));
    expect(renderedNames(wrapper)).toEqual(['Jack', 'Jerry', 'Lucy', 'Tom']);
  });
  it('fires change event', function () {
    var handleChange = jest.fn();
    var wrapper = (0, _enzyme.mount)(createTable({
      onChange: handleChange
    }));
    wrapper.find('th.c7n-table-column-has-filters').simulate('click');
    var sorter = handleChange.mock.calls[0][2];
    expect(sorter.column.dataIndex).toBe('name');
    expect(sorter.order).toBe('ascend');
    expect(sorter.field).toBe('name');
    expect(sorter.columnKey).toBe('name');
  });
  it('works with grouping columns in controlled mode', function () {
    var columns = [{
      title: 'group',
      key: 'group',
      children: [{
        title: 'Name',
        dataIndex: 'name',
        key: 'name',
        sorter: sorterFn,
        sortOrder: 'descend'
      }, {
        title: 'Age',
        dataIndex: 'age',
        key: 'age'
      }]
    }];
    var testData = [{
      key: 0,
      name: 'Jack',
      age: 11
    }, {
      key: 1,
      name: 'Lucy',
      age: 20
    }, {
      key: 2,
      name: 'Tom',
      age: 21
    }, {
      key: 3,
      name: 'Jerry',
      age: 22
    }];
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      columns: columns,
      dataSource: testData
    }));
    expect(renderedNames(wrapper)).toEqual(['Tom', 'Lucy', 'Jack', 'Jerry']);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,