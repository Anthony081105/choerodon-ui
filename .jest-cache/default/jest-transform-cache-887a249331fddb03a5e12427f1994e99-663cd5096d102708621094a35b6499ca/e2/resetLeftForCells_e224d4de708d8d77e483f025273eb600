4302858ce8d76a36d8f6f93b2cd8a32a
"use strict";

/* istanbul ignore next */
function cov_1yq44lfiv2() {
  var path = "/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/performance-table/utils/resetLeftForCells.ts";
  var hash = "6eb81c8ad91e0be6227f75c0ca9833bf728e389d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/performance-table/utils/resetLeftForCells.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 30
        },
        end: {
          line: 3,
          column: 86
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 7,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 39
        }
      },
      "3": {
        start: {
          line: 10,
          column: 12
        },
        end: {
          line: 10,
          column: 53
        }
      },
      "4": {
        start: {
          line: 13,
          column: 13
        },
        end: {
          line: 13,
          column: 14
        }
      },
      "5": {
        start: {
          line: 14,
          column: 18
        },
        end: {
          line: 14,
          column: 20
        }
      },
      "6": {
        start: {
          line: 16,
          column: 2
        },
        end: {
          line: 24,
          column: 3
        }
      },
      "7": {
        start: {
          line: 16,
          column: 15
        },
        end: {
          line: 16,
          column: 16
        }
      },
      "8": {
        start: {
          line: 17,
          column: 15
        },
        end: {
          line: 17,
          column: 23
        }
      },
      "9": {
        start: {
          line: 18,
          column: 19
        },
        end: {
          line: 20,
          column: 6
        }
      },
      "10": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 21,
          column: 29
        }
      },
      "11": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 23,
          column: 29
        }
      },
      "12": {
        start: {
          line: 26,
          column: 2
        },
        end: {
          line: 26,
          column: 19
        }
      }
    },
    fnMap: {
      "0": {
        name: "resetLeftForCells",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 26
          }
        },
        loc: {
          start: {
            line: 12,
            column: 34
          },
          end: {
            line: 27,
            column: 1
          }
        },
        line: 12
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    f: {
      "0": 0
    },
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "6eb81c8ad91e0be6227f75c0ca9833bf728e389d"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];

  cov_1yq44lfiv2 = function () {
    return actualCoverage;
  };

  return actualCoverage;
}

cov_1yq44lfiv2();

var _interopRequireWildcard =
/* istanbul ignore next */
(cov_1yq44lfiv2().s[0]++, require("@babel/runtime/helpers/interopRequireWildcard"));

/* istanbul ignore next */
cov_1yq44lfiv2().s[1]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});

/* istanbul ignore next */
cov_1yq44lfiv2().s[2]++;
exports["default"] = resetLeftForCells;
var React =
/* istanbul ignore next */
(cov_1yq44lfiv2().s[3]++, _interopRequireWildcard(require("react")));

function resetLeftForCells(cells) {
  /* istanbul ignore next */
  cov_1yq44lfiv2().f[0]++;
  var left =
  /* istanbul ignore next */
  (cov_1yq44lfiv2().s[4]++, 0);
  var nextCells =
  /* istanbul ignore next */
  (cov_1yq44lfiv2().s[5]++, []);

  /* istanbul ignore next */
  cov_1yq44lfiv2().s[6]++;

  for (var i =
  /* istanbul ignore next */
  (cov_1yq44lfiv2().s[7]++, 0); i < cells.length; i++) {
    var cell =
    /* istanbul ignore next */
    (cov_1yq44lfiv2().s[8]++, cells[i]);
    var nextCell =
    /* istanbul ignore next */
    (cov_1yq44lfiv2().s[9]++, React.cloneElement(cell, {
      left: left
    }));

    /* istanbul ignore next */
    cov_1yq44lfiv2().s[10]++;
    left += cell.props.width; // @ts-ignore

    /* istanbul ignore next */
    cov_1yq44lfiv2().s[11]++;
    nextCells.push(nextCell);
  }

  /* istanbul ignore next */
  cov_1yq44lfiv2().s[12]++;
  return nextCells;
}