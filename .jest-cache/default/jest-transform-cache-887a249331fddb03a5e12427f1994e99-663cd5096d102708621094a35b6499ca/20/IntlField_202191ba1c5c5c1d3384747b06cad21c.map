{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/intl-field/IntlField.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { ReactNode } from 'react';\nimport { observer } from 'mobx-react';\nimport { action, observable } from 'mobx';\nimport { ProgressType } from 'choerodon-ui/lib/progress/enum';\nimport { getConfig } from 'choerodon-ui/lib/configure';\nimport KeyCode from 'choerodon-ui/lib/_util/KeyCode';\nimport { TextField, TextFieldProps } from '../text-field/TextField';\nimport Icon from '../icon';\nimport { open } from '../modal-container/ModalContainer';\nimport IntlList from './IntlList';\nimport { ModalProps } from '../modal/Modal';\nimport localeContext, { $l } from '../locale-context';\nimport Progress from '../progress';\nimport { Size } from '../core/enum';\nimport message from '../message';\nimport exception from '../_util/exception';\nimport autobind from '../_util/autobind';\nimport { stopEvent } from '../_util/EventManager';\nimport isSame from '../_util/isSame';\n\nexport interface IntlFieldProps extends TextFieldProps {\n  modalProps?: ModalProps;\n  maxLengths?: object;\n}\n\n@observer\nexport default class IntlField extends TextField<IntlFieldProps> {\n  static displayName = 'IntlField';\n\n  modal;\n\n  locales?: object;\n\n  @observable loading?: boolean;\n\n  openModal = async () => {\n    if (!this.modal) {\n      const { modalProps, maxLengths } = this.props;\n      const { record, lang, name, element } = this;\n      const maxLengthList = { ...maxLengths, [lang]: element.maxLength };\n      if (record) {\n        this.setLoading(true);\n        try {\n          if (element && !isSame(this.getValue(), element.value)) {\n            this.syncValueOnBlur(element.value);\n          }\n          await record.tls(name);\n        } catch (err) {\n          message.error(exception(err));\n          return;\n        } finally {\n          this.setLoading(false);\n        }\n      }\n      this.storeLocales();\n\n      this.modal = open({\n        title: $l('IntlField', 'modal_title'),\n        children: <IntlList record={record} name={name} lang={lang} maxLengths={maxLengthList} />,\n        onClose: this.handleIntlListClose,\n        onOk: this.handleIntlListOk,\n        onCancel: this.handleIntlListCancel,\n        destroyOnClose: true,\n        ...modalProps,\n      } as ModalProps & { children });\n    }\n  };\n\n  @action\n  setLoading(loading) {\n    this.loading = loading;\n  }\n\n  handleIntlListClose = async () => {\n    delete this.modal;\n    this.focus();\n  };\n\n  @autobind\n  async handleIntlListOk() {\n    const { supports } = localeContext;\n    const languages = Object.keys(supports);\n    const { record, name, field } = this;\n    if (record && field) {\n      const tlsKey = getConfig('tlsKey');\n      return (await Promise.all(\n        languages.map(language => {\n          const intlField = record.getField(`${tlsKey}.${name}.${language}`);\n          return intlField ? intlField.checkValidity() : true;\n        }),\n      )).every(Boolean);\n    }\n  }\n\n  @autobind\n  async handleIntlListCancel() {\n    const { name, record } = this;\n    if (record) {\n      const tlsKey = getConfig('tlsKey');\n      record.set(`${tlsKey}.${name}`, this.locales);\n    }\n  }\n\n  @autobind\n  handleKeyDown(e) {\n    if (e.keyCode === KeyCode.DOWN) {\n      stopEvent(e);\n      this.openModal();\n    }\n    super.handleKeyDown(e);\n  }\n\n  @autobind\n  handleBlur(e) {\n    if (this.modal) {\n      e.preventDefault();\n    }\n    super.handleBlur(e);\n  }\n\n  storeLocales() {\n    const { name, record } = this;\n    if (record) {\n      const tlsKey = getConfig('tlsKey');\n      this.locales = { ...record.get(`${tlsKey}.${name}`) };\n    }\n  }\n\n  getSuffix(): ReactNode {\n    const { suffix } = this.props;\n    return this.wrapperSuffix(\n      this.loading ? (\n        <Progress size={Size.small} type={ProgressType.loading} />\n      ) : (\n        suffix || <Icon type=\"language\" />\n      ),\n      {\n        onClick: this.isDisabled() || this.isReadOnly() ? undefined : this.openModal,\n      },\n    );\n  }\n\n  componentWillUnmount() {\n    if (this.modal) {\n      this.modal.close();\n    }\n  }\n}\n"]}