{"version":3,"sources":["_util/resizeObserver.js"],"names":["ReactResizeObserver","PureComponent","onResize","resizeProp","target","width","height","entries","fixedWidth","Math","fixedHeight","disabled","element","ResizeObserver","children"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AACA,IAAA,uBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,0BAAA,CAAA,CAAA;;IACMA,mB;;;;;AACF,WAAA,mBAAA,GAAc;AAAA,QAAA,KAAA;;AAAA,KAAA,GAAA,gBAAA,CAAA,SAAA,CAAA,EAAA,IAAA,EAAA,mBAAA;AACV,IAAA,KAAA,GAAA,CAAA,GAAA,2BAAA,CAAA,SAAA,CAAA,EAAA,IAAA,EAAA,CAAA,GAAA,gBAAA,CAAA,SAAA,CAAA,EAAA,mBAAA,EAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;AACA,IAAA,KAAA,CAAA,cAAA,GAAA,IAAA;AACA,IAAA,KAAA,CAAA,KAAA,GAAA,CAAA;AACA,IAAA,KAAA,CAAA,MAAA,GAAA,CAAA;;AACA,IAAA,KAAA,CAAA,QAAA,GAAgB,UAAA,OAAA,EAAa;AAAA,UAAA,WAAA,GACQ,KAAA,CADR,KAAA;AAAA,UACjBE,QADiB,GAAA,WAAA,CAAA,QAAA;AAAA,UACPC,UADO,GAAA,WAAA,CAAA,UAAA;AAAA,UAAA,SAAA,GAE2BI,OAAO,CAFlC,CAEkC,CAFlC;AAAA,UAEjBH,MAFiB,GAAA,SAAA,CAAA,MAAA;AAAA,UAAA,qBAAA,GAAA,SAAA,CAAA,WAAA;AAAA,UAEMC,KAFN,GAAA,qBAAA,CAAA,KAAA;AAAA,UAEaC,MAFb,GAAA,qBAAA,CAAA,MAAA;AAGzB;;;AAGA;;AACA,UAAME,UAAU,GAAGC,IAAI,CAAJA,KAAAA,CAAnB,KAAmBA,CAAnB;AACA,UAAMC,WAAW,GAAGD,IAAI,CAAJA,KAAAA,CAApB,MAAoBA,CAApB;;AACA,UAAK,KAAA,CAAA,KAAA,KAAA,UAAA,IAA6B,CAAA,OAAA,EAAA,MAAA,EAAA,QAAA,CAA9B,UAA8B,CAA7B,IACA,KAAA,CAAA,MAAA,KAAA,WAAA,IAA+B,CAAA,QAAA,EAAA,MAAA,EAAA,QAAA,CADpC,UACoC,CADpC,EAC8E;AAC1E,QAAA,KAAA,CAAA,KAAA,GAAA,UAAA;AACA,QAAA,KAAA,CAAA,MAAA,GAAA,WAAA;;AACA,YAAA,QAAA,EAAc;AACVP,UAAAA,QAAQ,CAAA,UAAA,EAAA,WAAA,EAARA,MAAQ,CAARA;AACH;AACJ;AAhBL,KAAA;;AALU,WAAA,KAAA;AAuBb;;;;wCACmB;AAChB,WAAA,kBAAA;AACH;;;yCACoB;AACjB,WAAA,kBAAA;AACH;;;2CACsB;AACnB,WAAA,eAAA;AACH;;;yCACoB;AAAA,UACTS,QADS,GACI,KADJ,KACI,CADJ,QAAA;AAEjB,UAAMC,OAAO,GAAG,CAAA,GAAA,SAAA,CAAA,WAAA,EAAhB,IAAgB,CAAhB;;AACA,UAAI,CAAC,KAAD,cAAA,IAAwB,CAAxB,QAAA,IAAJ,OAAA,EAAkD;AAC9C;AACA,aAAA,cAAA,GAAsB,IAAIC,uBAAAA,CAAJ,SAAIA,CAAJ,CAAmB,KAAzC,QAAsB,CAAtB;AACA,aAAA,cAAA,CAAA,OAAA,CAAA,OAAA;AAHJ,OAAA,MAKK,IAAA,QAAA,EAAc;AACf;AACA,aAAA,eAAA;AACH;AACJ;;;sCACiB;AACd,UAAI,KAAJ,cAAA,EAAyB;AACrB,aAAA,cAAA,CAAA,UAAA;AACA,aAAA,cAAA,GAAA,IAAA;AACH;AACJ;;;6BACQ;AAAA,UAAA,oBAAA,GACuB,KADvB,KACuB,CADvB,QAAA;AAAA,UACGC,QADH,GAAA,oBAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,oBAAA;AAEL,aAAA,QAAA;AACH;;;EAxD6Bb,MAAAA,CAAAA,a;;AA0DlCD,mBAAmB,CAAnBA,YAAAA,GAAmC;AAC/BG,EAAAA,UAAU,EAAE;AADmB,CAAnCH;eAGeA,mB","sourcesContent":["import { PureComponent } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport ResizeObserver from 'resize-observer-polyfill';\nclass ReactResizeObserver extends PureComponent {\n    constructor() {\n        super(...arguments);\n        this.resizeObserver = null;\n        this.width = 0;\n        this.height = 0;\n        this.onResize = (entries) => {\n            const { onResize, resizeProp } = this.props;\n            const { target, contentRect: { width, height }, } = entries[0];\n            /**\n             * getBoundingClientRect return wrong size in transform case.\n             */\n            // const { width, height } = target.getBoundingClientRect();\n            const fixedWidth = Math.floor(width);\n            const fixedHeight = Math.floor(height);\n            if ((this.width !== fixedWidth && ['width', 'both'].includes(resizeProp)) ||\n                (this.height !== fixedHeight && ['height', 'both'].includes(resizeProp))) {\n                this.width = fixedWidth;\n                this.height = fixedHeight;\n                if (onResize) {\n                    onResize(fixedWidth, fixedHeight, target);\n                }\n            }\n        };\n    }\n    componentDidMount() {\n        this.onComponentUpdated();\n    }\n    componentDidUpdate() {\n        this.onComponentUpdated();\n    }\n    componentWillUnmount() {\n        this.destroyObserver();\n    }\n    onComponentUpdated() {\n        const { disabled } = this.props;\n        const element = findDOMNode(this);\n        if (!this.resizeObserver && !disabled && element) {\n            // Add resize observer\n            this.resizeObserver = new ResizeObserver(this.onResize);\n            this.resizeObserver.observe(element);\n        }\n        else if (disabled) {\n            // Remove resize observer\n            this.destroyObserver();\n        }\n    }\n    destroyObserver() {\n        if (this.resizeObserver) {\n            this.resizeObserver.disconnect();\n            this.resizeObserver = null;\n        }\n    }\n    render() {\n        const { children = null } = this.props;\n        return children;\n    }\n}\nReactResizeObserver.defaultProps = {\n    resizeProp: 'both',\n};\nexport default ReactResizeObserver;\n"]}