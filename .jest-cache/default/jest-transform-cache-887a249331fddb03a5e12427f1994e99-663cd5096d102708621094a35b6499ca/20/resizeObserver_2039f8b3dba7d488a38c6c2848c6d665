aae9c42be876ca17815278e86e771059
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = require("react");

var _reactDom = require("react-dom");

var _resizeObserverPolyfill = _interopRequireDefault(require("resize-observer-polyfill"));

var ReactResizeObserver =
/*#__PURE__*/
function (_PureComponent) {
  (0, _inherits2["default"])(ReactResizeObserver, _PureComponent);

  function ReactResizeObserver() {
    var _this;

    (0, _classCallCheck2["default"])(this, ReactResizeObserver);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(ReactResizeObserver).apply(this, arguments));
    _this.resizeObserver = null;
    _this.width = 0;
    _this.height = 0;

    _this.onResize = function (entries) {
      var _this$props = _this.props,
          onResize = _this$props.onResize,
          resizeProp = _this$props.resizeProp;
      var _entries$ = entries[0],
          target = _entries$.target,
          _entries$$contentRect = _entries$.contentRect,
          width = _entries$$contentRect.width,
          height = _entries$$contentRect.height;
      /**
       * getBoundingClientRect return wrong size in transform case.
       */
      // const { width, height } = target.getBoundingClientRect();

      var fixedWidth = Math.floor(width);
      var fixedHeight = Math.floor(height);

      if (_this.width !== fixedWidth && ['width', 'both'].includes(resizeProp) || _this.height !== fixedHeight && ['height', 'both'].includes(resizeProp)) {
        _this.width = fixedWidth;
        _this.height = fixedHeight;

        if (onResize) {
          onResize(fixedWidth, fixedHeight, target);
        }
      }
    };

    return _this;
  }

  (0, _createClass2["default"])(ReactResizeObserver, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.onComponentUpdated();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.onComponentUpdated();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.destroyObserver();
    }
  }, {
    key: "onComponentUpdated",
    value: function onComponentUpdated() {
      var disabled = this.props.disabled;
      var element = (0, _reactDom.findDOMNode)(this);

      if (!this.resizeObserver && !disabled && element) {
        // Add resize observer
        this.resizeObserver = new _resizeObserverPolyfill["default"](this.onResize);
        this.resizeObserver.observe(element);
      } else if (disabled) {
        // Remove resize observer
        this.destroyObserver();
      }
    }
  }, {
    key: "destroyObserver",
    value: function destroyObserver() {
      if (this.resizeObserver) {
        this.resizeObserver.disconnect();
        this.resizeObserver = null;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props$children = this.props.children,
          children = _this$props$children === void 0 ? null : _this$props$children;
      return children;
    }
  }]);
  return ReactResizeObserver;
}(_react.PureComponent);

ReactResizeObserver.defaultProps = {
  resizeProp: 'both'
};
var _default = ReactResizeObserver;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl91dGlsL3Jlc2l6ZU9ic2VydmVyLmpzIl0sIm5hbWVzIjpbIlJlYWN0UmVzaXplT2JzZXJ2ZXIiLCJQdXJlQ29tcG9uZW50Iiwib25SZXNpemUiLCJyZXNpemVQcm9wIiwidGFyZ2V0Iiwid2lkdGgiLCJoZWlnaHQiLCJlbnRyaWVzIiwiZml4ZWRXaWR0aCIsIk1hdGgiLCJmaXhlZEhlaWdodCIsImRpc2FibGVkIiwiZWxlbWVudCIsIlJlc2l6ZU9ic2VydmVyIiwiY2hpbGRyZW4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFBLE1BQUEsR0FBQSxPQUFBLENBQUEsT0FBQSxDQUFBOztBQUNBLElBQUEsU0FBQSxHQUFBLE9BQUEsQ0FBQSxXQUFBLENBQUE7O0FBQ0EsSUFBQSx1QkFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLDBCQUFBLENBQUEsQ0FBQTs7SUFDTUEsbUI7Ozs7O0FBQ0YsV0FBQSxtQkFBQSxHQUFjO0FBQUEsUUFBQSxLQUFBOztBQUFBLEtBQUEsR0FBQSxnQkFBQSxDQUFBLFNBQUEsQ0FBQSxFQUFBLElBQUEsRUFBQSxtQkFBQTtBQUNWLElBQUEsS0FBQSxHQUFBLENBQUEsR0FBQSwyQkFBQSxDQUFBLFNBQUEsQ0FBQSxFQUFBLElBQUEsRUFBQSxDQUFBLEdBQUEsZ0JBQUEsQ0FBQSxTQUFBLENBQUEsRUFBQSxtQkFBQSxFQUFBLEtBQUEsQ0FBQSxJQUFBLEVBQUEsU0FBQSxDQUFBLENBQUE7QUFDQSxJQUFBLEtBQUEsQ0FBQSxjQUFBLEdBQUEsSUFBQTtBQUNBLElBQUEsS0FBQSxDQUFBLEtBQUEsR0FBQSxDQUFBO0FBQ0EsSUFBQSxLQUFBLENBQUEsTUFBQSxHQUFBLENBQUE7O0FBQ0EsSUFBQSxLQUFBLENBQUEsUUFBQSxHQUFnQixVQUFBLE9BQUEsRUFBYTtBQUFBLFVBQUEsV0FBQSxHQUNRLEtBQUEsQ0FEUixLQUFBO0FBQUEsVUFDakJFLFFBRGlCLEdBQUEsV0FBQSxDQUFBLFFBQUE7QUFBQSxVQUNQQyxVQURPLEdBQUEsV0FBQSxDQUFBLFVBQUE7QUFBQSxVQUFBLFNBQUEsR0FFMkJJLE9BQU8sQ0FGbEMsQ0FFa0MsQ0FGbEM7QUFBQSxVQUVqQkgsTUFGaUIsR0FBQSxTQUFBLENBQUEsTUFBQTtBQUFBLFVBQUEscUJBQUEsR0FBQSxTQUFBLENBQUEsV0FBQTtBQUFBLFVBRU1DLEtBRk4sR0FBQSxxQkFBQSxDQUFBLEtBQUE7QUFBQSxVQUVhQyxNQUZiLEdBQUEscUJBQUEsQ0FBQSxNQUFBO0FBR3pCOzs7QUFHQTs7QUFDQSxVQUFNRSxVQUFVLEdBQUdDLElBQUksQ0FBSkEsS0FBQUEsQ0FBbkIsS0FBbUJBLENBQW5CO0FBQ0EsVUFBTUMsV0FBVyxHQUFHRCxJQUFJLENBQUpBLEtBQUFBLENBQXBCLE1BQW9CQSxDQUFwQjs7QUFDQSxVQUFLLEtBQUEsQ0FBQSxLQUFBLEtBQUEsVUFBQSxJQUE2QixDQUFBLE9BQUEsRUFBQSxNQUFBLEVBQUEsUUFBQSxDQUE5QixVQUE4QixDQUE3QixJQUNBLEtBQUEsQ0FBQSxNQUFBLEtBQUEsV0FBQSxJQUErQixDQUFBLFFBQUEsRUFBQSxNQUFBLEVBQUEsUUFBQSxDQURwQyxVQUNvQyxDQURwQyxFQUM4RTtBQUMxRSxRQUFBLEtBQUEsQ0FBQSxLQUFBLEdBQUEsVUFBQTtBQUNBLFFBQUEsS0FBQSxDQUFBLE1BQUEsR0FBQSxXQUFBOztBQUNBLFlBQUEsUUFBQSxFQUFjO0FBQ1ZQLFVBQUFBLFFBQVEsQ0FBQSxVQUFBLEVBQUEsV0FBQSxFQUFSQSxNQUFRLENBQVJBO0FBQ0g7QUFDSjtBQWhCTCxLQUFBOztBQUxVLFdBQUEsS0FBQTtBQXVCYjs7Ozt3Q0FDbUI7QUFDaEIsV0FBQSxrQkFBQTtBQUNIOzs7eUNBQ29CO0FBQ2pCLFdBQUEsa0JBQUE7QUFDSDs7OzJDQUNzQjtBQUNuQixXQUFBLGVBQUE7QUFDSDs7O3lDQUNvQjtBQUFBLFVBQ1RTLFFBRFMsR0FDSSxLQURKLEtBQ0ksQ0FESixRQUFBO0FBRWpCLFVBQU1DLE9BQU8sR0FBRyxDQUFBLEdBQUEsU0FBQSxDQUFBLFdBQUEsRUFBaEIsSUFBZ0IsQ0FBaEI7O0FBQ0EsVUFBSSxDQUFDLEtBQUQsY0FBQSxJQUF3QixDQUF4QixRQUFBLElBQUosT0FBQSxFQUFrRDtBQUM5QztBQUNBLGFBQUEsY0FBQSxHQUFzQixJQUFJQyx1QkFBQUEsQ0FBSixTQUFJQSxDQUFKLENBQW1CLEtBQXpDLFFBQXNCLENBQXRCO0FBQ0EsYUFBQSxjQUFBLENBQUEsT0FBQSxDQUFBLE9BQUE7QUFISixPQUFBLE1BS0ssSUFBQSxRQUFBLEVBQWM7QUFDZjtBQUNBLGFBQUEsZUFBQTtBQUNIO0FBQ0o7OztzQ0FDaUI7QUFDZCxVQUFJLEtBQUosY0FBQSxFQUF5QjtBQUNyQixhQUFBLGNBQUEsQ0FBQSxVQUFBO0FBQ0EsYUFBQSxjQUFBLEdBQUEsSUFBQTtBQUNIO0FBQ0o7Ozs2QkFDUTtBQUFBLFVBQUEsb0JBQUEsR0FDdUIsS0FEdkIsS0FDdUIsQ0FEdkIsUUFBQTtBQUFBLFVBQ0dDLFFBREgsR0FBQSxvQkFBQSxLQUFBLEtBQUEsQ0FBQSxHQUFBLElBQUEsR0FBQSxvQkFBQTtBQUVMLGFBQUEsUUFBQTtBQUNIOzs7RUF4RDZCYixNQUFBQSxDQUFBQSxhOztBQTBEbENELG1CQUFtQixDQUFuQkEsWUFBQUEsR0FBbUM7QUFDL0JHLEVBQUFBLFVBQVUsRUFBRTtBQURtQixDQUFuQ0g7ZUFHZUEsbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQdXJlQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZmluZERPTU5vZGUgfSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IFJlc2l6ZU9ic2VydmVyIGZyb20gJ3Jlc2l6ZS1vYnNlcnZlci1wb2x5ZmlsbCc7XG5jbGFzcyBSZWFjdFJlc2l6ZU9ic2VydmVyIGV4dGVuZHMgUHVyZUNvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMucmVzaXplT2JzZXJ2ZXIgPSBudWxsO1xuICAgICAgICB0aGlzLndpZHRoID0gMDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSAwO1xuICAgICAgICB0aGlzLm9uUmVzaXplID0gKGVudHJpZXMpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgb25SZXNpemUsIHJlc2l6ZVByb3AgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgICAgICBjb25zdCB7IHRhcmdldCwgY29udGVudFJlY3Q6IHsgd2lkdGgsIGhlaWdodCB9LCB9ID0gZW50cmllc1swXTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogZ2V0Qm91bmRpbmdDbGllbnRSZWN0IHJldHVybiB3cm9uZyBzaXplIGluIHRyYW5zZm9ybSBjYXNlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICAvLyBjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IHRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgIGNvbnN0IGZpeGVkV2lkdGggPSBNYXRoLmZsb29yKHdpZHRoKTtcbiAgICAgICAgICAgIGNvbnN0IGZpeGVkSGVpZ2h0ID0gTWF0aC5mbG9vcihoZWlnaHQpO1xuICAgICAgICAgICAgaWYgKCh0aGlzLndpZHRoICE9PSBmaXhlZFdpZHRoICYmIFsnd2lkdGgnLCAnYm90aCddLmluY2x1ZGVzKHJlc2l6ZVByb3ApKSB8fFxuICAgICAgICAgICAgICAgICh0aGlzLmhlaWdodCAhPT0gZml4ZWRIZWlnaHQgJiYgWydoZWlnaHQnLCAnYm90aCddLmluY2x1ZGVzKHJlc2l6ZVByb3ApKSkge1xuICAgICAgICAgICAgICAgIHRoaXMud2lkdGggPSBmaXhlZFdpZHRoO1xuICAgICAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gZml4ZWRIZWlnaHQ7XG4gICAgICAgICAgICAgICAgaWYgKG9uUmVzaXplKSB7XG4gICAgICAgICAgICAgICAgICAgIG9uUmVzaXplKGZpeGVkV2lkdGgsIGZpeGVkSGVpZ2h0LCB0YXJnZXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIHRoaXMub25Db21wb25lbnRVcGRhdGVkKCk7XG4gICAgfVxuICAgIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgICAgdGhpcy5vbkNvbXBvbmVudFVwZGF0ZWQoKTtcbiAgICB9XG4gICAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIHRoaXMuZGVzdHJveU9ic2VydmVyKCk7XG4gICAgfVxuICAgIG9uQ29tcG9uZW50VXBkYXRlZCgpIHtcbiAgICAgICAgY29uc3QgeyBkaXNhYmxlZCB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGZpbmRET01Ob2RlKHRoaXMpO1xuICAgICAgICBpZiAoIXRoaXMucmVzaXplT2JzZXJ2ZXIgJiYgIWRpc2FibGVkICYmIGVsZW1lbnQpIHtcbiAgICAgICAgICAgIC8vIEFkZCByZXNpemUgb2JzZXJ2ZXJcbiAgICAgICAgICAgIHRoaXMucmVzaXplT2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIodGhpcy5vblJlc2l6ZSk7XG4gICAgICAgICAgICB0aGlzLnJlc2l6ZU9ic2VydmVyLm9ic2VydmUoZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZGlzYWJsZWQpIHtcbiAgICAgICAgICAgIC8vIFJlbW92ZSByZXNpemUgb2JzZXJ2ZXJcbiAgICAgICAgICAgIHRoaXMuZGVzdHJveU9ic2VydmVyKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGVzdHJveU9ic2VydmVyKCkge1xuICAgICAgICBpZiAodGhpcy5yZXNpemVPYnNlcnZlcikge1xuICAgICAgICAgICAgdGhpcy5yZXNpemVPYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICB0aGlzLnJlc2l6ZU9ic2VydmVyID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHsgY2hpbGRyZW4gPSBudWxsIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICByZXR1cm4gY2hpbGRyZW47XG4gICAgfVxufVxuUmVhY3RSZXNpemVPYnNlcnZlci5kZWZhdWx0UHJvcHMgPSB7XG4gICAgcmVzaXplUHJvcDogJ2JvdGgnLFxufTtcbmV4cG9ydCBkZWZhdWx0IFJlYWN0UmVzaXplT2JzZXJ2ZXI7XG4iXX0=