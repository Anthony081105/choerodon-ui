3f21b6348af14c2460dc544a1994214e
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _jsYaml = _interopRequireDefault(require("js-yaml"));

if (typeof window !== 'undefined') {
  require('codemirror/addon/lint/lint.css');

  require('codemirror/addon/lint/lint');

  var CodeMirror = require('codemirror');

  CodeMirror.registerHelper('lint', 'yaml', function (text) {
    var found = [];

    try {
      _jsYaml["default"].loadAll(text);
    } catch (e) {
      var loc = e.mark,
          message = e.message; // js-yaml YAMLException doesn't always provide an accurate lineno
      // e.g., when there are multiple yaml docs
      // ---
      // ---
      // foo:bar

      var from = loc ? CodeMirror.Pos(loc.line, loc.column) : CodeMirror.Pos(0, 0);
      var to = from;
      found.push({
        from: from,
        to: to,
        message: message
      });
    }

    return found;
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9odWlodWF3ay9Eb2N1bWVudHMvb3B0L2Nob2Vyb2Rvbi11aS9jb21wb25lbnRzLXByby9jb2RlLWFyZWEvbGludC95YW1sLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUE7O0FBRUEsSUFBSSxPQUFPLE1BQVAsS0FBa0IsV0FBdEIsRUFBbUM7QUFDakMsRUFBQSxPQUFPLENBQUMsZ0NBQUQsQ0FBUDs7QUFDQSxFQUFBLE9BQU8sQ0FBQyw0QkFBRCxDQUFQOztBQUNBLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxZQUFELENBQTFCOztBQUVBLEVBQUEsVUFBVSxDQUFDLGNBQVgsQ0FBMEIsTUFBMUIsRUFBa0MsTUFBbEMsRUFBMEMsVUFBUyxJQUFULEVBQWE7QUFDckQsUUFBTSxLQUFLLEdBQWlCLEVBQTVCOztBQUNBLFFBQUk7QUFDRix5QkFBTyxPQUFQLENBQWUsSUFBZjtBQUNELEtBRkQsQ0FFRSxPQUFPLENBQVAsRUFBVTtBQUFBLFVBQ0ksR0FESixHQUNxQixDQURyQixDQUNGLElBREU7QUFBQSxVQUNTLE9BRFQsR0FDcUIsQ0FEckIsQ0FDUyxPQURULEVBRVY7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxVQUFNLElBQUksR0FBRyxHQUFHLEdBQUcsVUFBVSxDQUFDLEdBQVgsQ0FBZSxHQUFHLENBQUMsSUFBbkIsRUFBeUIsR0FBRyxDQUFDLE1BQTdCLENBQUgsR0FBMEMsVUFBVSxDQUFDLEdBQVgsQ0FBZSxDQUFmLEVBQWtCLENBQWxCLENBQTFEO0FBQ0EsVUFBTSxFQUFFLEdBQUcsSUFBWDtBQUNBLE1BQUEsS0FBSyxDQUFDLElBQU4sQ0FBVztBQUNULFFBQUEsSUFBSSxFQUFKLElBRFM7QUFFVCxRQUFBLEVBQUUsRUFBRixFQUZTO0FBR1QsUUFBQSxPQUFPLEVBQVA7QUFIUyxPQUFYO0FBS0Q7O0FBQ0QsV0FBTyxLQUFQO0FBQ0QsR0FwQkQ7QUFxQkQiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBnbG9iYWwtcmVxdWlyZSAqL1xuaW1wb3J0IHsgQW5ub3RhdGlvbiB9IGZyb20gJ2NvZGVtaXJyb3InO1xuaW1wb3J0IGpzeWFtbCBmcm9tICdqcy15YW1sJztcblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJlcXVpcmUoJ2NvZGVtaXJyb3IvYWRkb24vbGludC9saW50LmNzcycpO1xuICByZXF1aXJlKCdjb2RlbWlycm9yL2FkZG9uL2xpbnQvbGludCcpO1xuICBjb25zdCBDb2RlTWlycm9yID0gcmVxdWlyZSgnY29kZW1pcnJvcicpO1xuXG4gIENvZGVNaXJyb3IucmVnaXN0ZXJIZWxwZXIoJ2xpbnQnLCAneWFtbCcsIGZ1bmN0aW9uKHRleHQpIHtcbiAgICBjb25zdCBmb3VuZDogQW5ub3RhdGlvbltdID0gW107XG4gICAgdHJ5IHtcbiAgICAgIGpzeWFtbC5sb2FkQWxsKHRleHQpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnN0IHsgbWFyazogbG9jLCBtZXNzYWdlIH0gPSBlO1xuICAgICAgLy8ganMteWFtbCBZQU1MRXhjZXB0aW9uIGRvZXNuJ3QgYWx3YXlzIHByb3ZpZGUgYW4gYWNjdXJhdGUgbGluZW5vXG4gICAgICAvLyBlLmcuLCB3aGVuIHRoZXJlIGFyZSBtdWx0aXBsZSB5YW1sIGRvY3NcbiAgICAgIC8vIC0tLVxuICAgICAgLy8gLS0tXG4gICAgICAvLyBmb286YmFyXG4gICAgICBjb25zdCBmcm9tID0gbG9jID8gQ29kZU1pcnJvci5Qb3MobG9jLmxpbmUsIGxvYy5jb2x1bW4pIDogQ29kZU1pcnJvci5Qb3MoMCwgMCk7XG4gICAgICBjb25zdCB0byA9IGZyb207XG4gICAgICBmb3VuZC5wdXNoKHtcbiAgICAgICAgZnJvbSxcbiAgICAgICAgdG8sXG4gICAgICAgIG1lc3NhZ2UsXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGZvdW5kO1xuICB9KTtcbn1cbiJdfQ==