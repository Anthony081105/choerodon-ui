{"version":3,"sources":["progress/progress.js"],"names":["Progress","Component","props","customizePrefixCls","className","percent","status","format","trailColor","size","successPercent","type","strokeWidth","width","showInfo","gapDegree","gapPosition","restProps","prefixCls","progressStatus","textFormatter","circleType","text","Icon","progressInfo","percentStyle","height","successPercentStyle","successSegment","style","progress","React","circleSize","circleStyle","fontSize","circleWidth","gapPos","gapDeg","Circle","trailWidth","Loading","classString","PropTypes"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Icon from '../icon';\nimport { Circle } from '../rc-components/progress';\nimport Loading from './Loading';\nimport { getPrefixCls } from '../configure';\nexport default class Progress extends Component {\n    render() {\n        const props = this.props;\n        const { prefixCls: customizePrefixCls, className, percent = 0, status, format, trailColor, size, successPercent, type, strokeWidth, width, showInfo, gapDegree = 0, gapPosition, ...restProps } = props;\n        const prefixCls = getPrefixCls('progress', customizePrefixCls);\n        const progressStatus = parseInt(successPercent ? successPercent.toString() : percent.toString(), 10) >= 100 &&\n            !('status' in props)\n            ? \"success\" /* success */\n            : status || \"normal\" /* normal */;\n        let progressInfo;\n        let progress;\n        const textFormatter = format || (percentNumber => `${percentNumber}%`);\n        if (showInfo) {\n            let text;\n            const circleType = type === \"circle\" /* circle */ || type === \"dashboard\" /* dashboard */;\n            if (progressStatus === \"exception\" /* exception */) {\n                text = format ? textFormatter(percent) : React.createElement(Icon, { type: circleType ? 'close' : 'cancel' });\n            }\n            else if (progressStatus === \"success\" /* success */) {\n                text = format ? (textFormatter(percent)) : (React.createElement(Icon, { type: circleType ? 'check' : 'check_circle' }));\n            }\n            else {\n                text = textFormatter(percent);\n            }\n            progressInfo = React.createElement(\"span\", { className: `${prefixCls}-text` }, text);\n        }\n        if (type === \"line\" /* line */) {\n            const percentStyle = {\n                width: `${percent}%`,\n                height: strokeWidth || (size === \"small\" /* small */ ? 6 : 8),\n            };\n            const successPercentStyle = {\n                width: `${successPercent}%`,\n                height: strokeWidth || (size === \"small\" /* small */ ? 6 : 8),\n            };\n            const successSegment = successPercent !== undefined ? (React.createElement(\"div\", { className: `${prefixCls}-success-bg`, style: successPercentStyle })) : null;\n            progress = (React.createElement(\"div\", null,\n                React.createElement(\"div\", { className: `${prefixCls}-outer` },\n                    React.createElement(\"div\", { className: `${prefixCls}-inner` },\n                        React.createElement(\"div\", { className: `${prefixCls}-bg`, style: percentStyle }),\n                        successSegment)),\n                progressInfo));\n        }\n        else if (type === \"circle\" /* circle */ || type === \"dashboard\" /* dashboard */) {\n            const circleSize = width || 120;\n            const circleStyle = {\n                width: circleSize,\n                height: circleSize,\n                fontSize: circleSize * 0.15 + 6,\n            };\n            const circleWidth = strokeWidth || 6;\n            const gapPos = gapPosition ||\n                (type === \"dashboard\" /* dashboard */ && \"bottom\" /* bottom */) ||\n                \"top\" /* top */;\n            const gapDeg = gapDegree || (type === \"dashboard\" /* dashboard */ && 75);\n            progress = (React.createElement(\"div\", { className: `${prefixCls}-inner`, style: circleStyle },\n                React.createElement(Circle, { percent: percent, strokeWidth: circleWidth, trailWidth: circleWidth, trailColor: trailColor, prefixCls: prefixCls, gapDegree: gapDeg, gapPosition: gapPos }),\n                progressInfo));\n        }\n        else if (type === \"loading\" /* loading */) {\n            progress = (React.createElement(\"div\", { className: `${prefixCls}-inner` },\n                React.createElement(Loading, null)));\n        }\n        const classString = classNames(prefixCls, {\n            [`${prefixCls}-${(type === \"dashboard\" /* dashboard */ && \"circle\" /* circle */) || type}`]: true,\n            [`${prefixCls}-status-${progressStatus}`]: true,\n            [`${prefixCls}-show-info`]: showInfo,\n            [`${prefixCls}-${size}`]: size,\n        }, className);\n        return (React.createElement(\"div\", Object.assign({}, restProps, { className: classString }), progress));\n    }\n}\nProgress.displayName = 'Progress';\nProgress.defaultProps = {\n    type: \"line\" /* line */,\n    percent: 0,\n    showInfo: true,\n    trailColor: '#f3f3f3',\n    size: \"default\" /* default */,\n};\nProgress.propTypes = {\n    status: PropTypes.oneOf([\n        \"normal\" /* normal */,\n        \"exception\" /* exception */,\n        \"active\" /* active */,\n        \"success\" /* success */,\n    ]),\n    type: PropTypes.oneOf([\n        \"line\" /* line */,\n        \"circle\" /* circle */,\n        \"dashboard\" /* dashboard */,\n        \"loading\" /* loading */,\n    ]),\n    showInfo: PropTypes.bool,\n    percent: PropTypes.number,\n    width: PropTypes.number,\n    strokeWidth: PropTypes.number,\n    trailColor: PropTypes.string,\n    format: PropTypes.func,\n    gapDegree: PropTypes.number,\n    size: PropTypes.oneOf([\"default\" /* default */, \"small\" /* small */, \"large\" /* large */]),\n};\n"]}