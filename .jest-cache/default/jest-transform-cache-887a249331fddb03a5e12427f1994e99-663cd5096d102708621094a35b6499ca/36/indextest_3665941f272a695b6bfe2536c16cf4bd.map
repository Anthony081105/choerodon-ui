{"version":3,"sources":["index.test.js"],"names":["describe","beforeEach","jest","useFakeTimers","afterEach","useRealTimers","it","wrapper","expect","toMatchSnapshot","prop","toBe","find","toHaveLength","setProps","disabled","update","handleChange","fn","readOnly","simulate","runAllTimers","not","toHaveBeenCalled","at","value","props","name","toEqual"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { mount } from 'enzyme';\nimport TextArea from '..';\nimport TextAreaTest from './textAreaTest';\n\ndescribe('TextArea-pro', () => {\n  beforeEach(() => {\n    jest.useFakeTimers();\n  });\n\n  afterEach(() => {\n    jest.useRealTimers();\n  });\n\n  it('renders TextArea-pro correctly', () => {\n    const wrapper = mount(<TextArea />);\n    expect(wrapper).toMatchSnapshot();\n  });\n\n  it('TextArea should have the default resize and rows', () => {\n    const wrapper = mount(<TextArea />);\n    expect(wrapper.prop('resize')).toBe('none');\n    expect(wrapper.prop('rows')).toBe(4);\n  });\n\n  it('TextArea have the disabled property and default false', () => {\n    const wrapper = mount(<TextArea />);\n    expect(wrapper.find('.c7n-pro-textarea-disabled')).toHaveLength(0);\n    wrapper.setProps({ disabled: true });\n    wrapper.update();\n    expect(wrapper.find('.c7n-pro-textarea-disabled')).toHaveLength(1);\n  });\n\n  it('can not click or input when the readOnly true and default false', () => {\n    const handleChange = jest.fn();\n    const wrapper = mount(<TextArea onChange={handleChange} />);\n    expect(wrapper.prop('readOnly')).toBe(false);\n    wrapper.setProps({ readOnly: true });\n    wrapper.update();\n    expect(wrapper.prop('readOnly')).toBe(true);\n\n    wrapper.find('textarea').simulate('change');\n    jest.runAllTimers();\n    wrapper.update();\n    expect(handleChange).not.toHaveBeenCalled();\n  });\n\n  it('the value will be controlled and the change event trigger when the value change', () => {\n    const handleChange = jest.fn();\n    const wrapper = mount(<TextArea value=\"text\" onChange={handleChange} />);\n    expect(\n      wrapper\n        .find('textarea')\n        .at(0)\n        .prop('value'),\n    ).toBe('text');\n    wrapper.setProps({ value: 'text-area' });\n    wrapper.update();\n    expect(\n      wrapper\n        .find('textarea')\n        .at(0)\n        .prop('value'),\n    ).toBe('text-area');\n  });\n\n  it('the dataSet should renders correctly', () => {\n    const wrapper = mount(<TextAreaTest />);\n    expect(wrapper.find('TextArea').props().name).toEqual('content');\n    expect(wrapper).toMatchSnapshot();\n  });\n});\n"]}