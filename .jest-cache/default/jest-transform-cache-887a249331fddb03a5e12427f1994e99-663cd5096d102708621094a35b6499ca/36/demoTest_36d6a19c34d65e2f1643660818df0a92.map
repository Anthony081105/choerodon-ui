{"version":3,"sources":["demoTest.js"],"names":["React","useLayoutEffect","useEffect","demoTest","component","options","regex","dirname","test","replace","files","glob","sync","forEach","file","testMethod","skip","Array","isArray","some","c","includes","MockDate","set","demo","require","wrapper","expect","toMatchSnapshot","reset"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEAA,kBAAMC,eAAN,GAAwBD,kBAAME,SAA9B;;AAEe,SAASC,QAAT,CAAkBC,SAAlB,EAA2C;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AACxD,MAAMC,KAAK,GAAG,OAAd;AACA,MAAMC,OAAO,GACXD,KAAK,CAACE,IAAN,CAAWJ,SAAX,IAAwB,CAAxB,8BACwBA,SAAS,CAACK,OAAV,CAAkB,SAAlB,EAA6B,EAA7B,CADxB,2BAEoBL,SAFpB,CADF;;AAIA,MAAMM,KAAK,GAAGC,iBAAKC,IAAL,WAAaL,OAAb,gBAAd;;AACA;AACAG,EAAAA,KAAK,CAACG,OAAN,CAAc,UAAAC,IAAI,EAAI;AACpB,QAAIC,UAAU,GAAGV,OAAO,CAACW,IAAR,KAAiB,IAAjB,GAAwBR,IAAI,CAACQ,IAA7B,GAAoCR,IAArD;;AACA,QAAIS,KAAK,CAACC,OAAN,CAAcb,OAAO,CAACW,IAAtB,KAA+BX,OAAO,CAACW,IAAR,CAAaG,IAAb,CAAkB,UAAAC,CAAC;AAAA,aAAIN,IAAI,CAACO,QAAL,CAAcD,CAAd,CAAJ;AAAA,KAAnB,CAAnC,EAA6E;AAC3EL,MAAAA,UAAU,GAAGP,IAAI,CAACQ,IAAlB;AACD;;AACDD,IAAAA,UAAU,mBAAYD,IAAZ;AAAA;AAAA;AAAA;AAAA,iCAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AACtCQ,mCAASC,GAAT,CAAa,wBAAO,YAAP,CAAb;;AACMC,cAAAA,IAFgC,GAEzBC,OAAO,eAAQX,IAAR,EAAP,WAFyB,EAEO;;AACvCY,cAAAA,OAHgC,GAGtB,oBAAOF,IAAP,CAHsB;AAItCG,cAAAA,MAAM,CAACD,OAAD,CAAN,CAAgBE,eAAhB;;AACAN,mCAASO,KAAT;;AALsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA9B,GAAV;AAOD,GAZD;AAaD","sourcesContent":["import React from \"react\";\nimport glob from 'glob';\nimport { render } from 'enzyme';\nimport MockDate from 'mockdate';\nimport moment from 'moment';\nimport { setup } from '../utils';\n\nReact.useLayoutEffect = React.useEffect;\n\nexport default function demoTest(component, options = {}) {\n  const regex = /-pro$/;\n  const dirname =\n    regex.test(component) > 0\n      ? `./components-pro/${component.replace(/-pro$/gi, '')}`\n      : `./components/${component}`;\n  const files = glob.sync(`${dirname}/demo/*.md`);\n  setup();\n  files.forEach(file => {\n    let testMethod = options.skip === true ? test.skip : test;\n    if (Array.isArray(options.skip) && options.skip.some(c => file.includes(c))) {\n      testMethod = test.skip;\n    }\n    testMethod(`renders ${file} correctly`, async () => {\n      MockDate.set(moment('2016-11-22'));\n      const demo = require(`../.${file}`).default; // eslint-disable-line global-require, import/no-dynamic-require\n      const wrapper = render(demo);\n      expect(wrapper).toMatchSnapshot();\n      MockDate.reset();\n    });\n  });\n}\n"]}