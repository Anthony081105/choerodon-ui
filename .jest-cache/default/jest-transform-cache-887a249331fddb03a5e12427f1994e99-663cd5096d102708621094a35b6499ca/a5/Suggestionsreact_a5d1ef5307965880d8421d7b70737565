6c3f2b10d5ff9917638d4f9693ba3de2
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _objectSpread3 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _DraftOffsetKey = require("draft-js/lib/DraftOffsetKey");

var _classnames = _interopRequireDefault(require("classnames"));

var _domScrollIntoView = _interopRequireDefault(require("dom-scroll-into-view"));

var _animate = _interopRequireDefault(require("../../../animate"));

var _Nav = _interopRequireDefault(require("./Nav.react"));

var _SuggestionWrapper = _interopRequireDefault(require("./SuggestionWrapper.react"));

var _insertMention = _interopRequireDefault(require("../utils/insertMention"));

var _clearMention = _interopRequireDefault(require("../utils/clearMention"));

var _getOffset = _interopRequireDefault(require("../utils/getOffset"));

var _getMentions = _interopRequireDefault(require("../utils/getMentions"));

var _getSearchWord2 = _interopRequireDefault(require("../utils/getSearchWord"));

function _createSuper(Derived) {
  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  return function () {
    var Super = (0, _getPrototypeOf2["default"])(Derived),
        result;

    if (isNativeReflectConstruct()) {
      var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return (0, _possibleConstructorReturn2["default"])(this, result);
  };
}

var isNotFalse = function isNotFalse(i) {
  return i !== false;
};

var Suggestions =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(Suggestions, _Component);

  var _super = _createSuper(Suggestions);

  function Suggestions(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, Suggestions);
    _this = _super.call(this, props);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onEditorStateChange", function (editorState) {
      var offset = _this.props.store.getOffset();

      if (offset.size === 0) {
        _this.closeDropDown();

        return editorState;
      }

      var selection = editorState.getSelection(); // 修复: 焦点移出再移入时, dropdown 会闪动一下
      // 原因: https://github.com/facebook/draft-js/blob/67c5e69499e3b0c149ce83b004872afdf4180463/src/component/handlers/edit/editOnFocus.js#L33
      // 此处强制 update 了一下,因此 onEditorStateChange 会 call 两次

      if (!_this.props.callbacks.getEditorState().getSelection().getHasFocus() && selection.getHasFocus()) {
        return editorState;
      }

      var _getSearchWord = (0, _getSearchWord2["default"])(editorState, selection),
          word = _getSearchWord.word;

      if (!word) {
        _this.closeDropDown();

        return editorState;
      }

      var selectionInsideMention = offset.map(function (_ref) {
        var offsetKey = _ref.offsetKey;

        var _decode = (0, _DraftOffsetKey.decode)(offsetKey),
            blockKey = _decode.blockKey,
            decoratorKey = _decode.decoratorKey,
            leafKey = _decode.leafKey;

        if (blockKey !== selection.anchorKey) {
          return false;
        }

        var leaf = editorState.getBlockTree(blockKey).getIn([decoratorKey, 'leaves', leafKey]);

        if (!leaf) {
          return false;
        }

        var startKey = leaf.get('start');
        var endKey = leaf.get('end'); // 处理只有一个 `@` 符号时的情况

        if (!word) {
          return false;
        }

        if (startKey === endKey - 1) {
          return selection.anchorOffset >= startKey + 1 && selection.anchorOffset <= endKey ? offsetKey : false;
        }

        return selection.anchorOffset > startKey + 1 && selection.anchorOffset <= endKey ? offsetKey : false;
      });
      var selectionInText = selectionInsideMention.some(isNotFalse);
      _this.activeOffsetKey = selectionInsideMention.find(isNotFalse);

      var trigger = _this.props.store.getTrigger(_this.activeOffsetKey);

      if (!selectionInText || !selection.getHasFocus()) {
        _this.closeDropDown();

        return editorState;
      }

      var searchValue = word.substring(trigger.length, word.length);

      if (_this.lastSearchValue !== searchValue || _this.lastTrigger !== trigger) {
        _this.lastSearchValue = searchValue;
        _this.lastTrigger = trigger;

        _this.props.onSearchChange(searchValue, trigger);
      }

      if (!_this.state.active) {
        // 暂时没有更优雅的方法
        if (!trigger || word.indexOf(trigger) !== -1) {
          _this.openDropDown();
        }
      }

      return editorState;
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onUpArrow", function (ev) {
      ev.preventDefault();

      if (_this.props.suggestions.length > 0) {
        var newIndex = _this.state.focusedIndex - 1;

        _this.setState({
          focusedIndex: Math.max(newIndex, 0)
        });
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onBlur", function (ev) {
      ev.preventDefault();

      _this.closeDropDown();
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onDownArrow", function (ev) {
      ev.preventDefault();
      var newIndex = _this.state.focusedIndex + 1;

      _this.setState({
        focusedIndex: newIndex >= _this.props.suggestions.length ? 0 : newIndex
      });
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "getContainer", function () {
      var popupContainer = document.createElement('div');
      var mountNode;

      if (_this.props.getSuggestionContainer) {
        mountNode = _this.props.getSuggestionContainer();
        popupContainer.style.position = 'relative';
      } else {
        mountNode = document.body;
      }

      mountNode.appendChild(popupContainer);
      return popupContainer;
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "handleKeyBinding", function (command) {
      return command === 'split-block';
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "handleReturn", function (ev) {
      ev.preventDefault();
      var selectedSuggestion = _this.props.suggestions[_this.state.focusedIndex];

      if (selectedSuggestion) {
        if ((0, _react.isValidElement)(selectedSuggestion)) {
          _this.onMentionSelect(selectedSuggestion.props.value, selectedSuggestion.props.data);
        } else {
          _this.onMentionSelect(selectedSuggestion);
        }

        _this.lastSearchValue = null;
        _this.lastTrigger = null;
        return true;
      }

      return false;
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "renderReady", function () {
      var container = _this.dropdownContainer;

      if (!container) {
        return;
      }

      var active = _this.state.active;

      var _assertThisInitialize = (0, _assertThisInitialized2["default"])(_this),
          activeOffsetKey = _assertThisInitialize.activeOffsetKey;

      var offset = _this.props.store.getOffset();

      var dropDownPosition = offset.get(activeOffsetKey);

      if (active && dropDownPosition) {
        var placement = _this.props.placement;

        var dropDownStyle = _this.getPositionStyle(true, dropDownPosition.position()); // Check if the above space is crowded


        var isTopCrowded = parseFloat(dropDownStyle.top) - window.scrollY - container.offsetHeight < 0; // Check if the under space is crowded

        var isBottomCrowded = (window.innerHeight || document.documentElement.clientHeight) - (parseFloat(dropDownStyle.top) - window.scrollY) - container.offsetHeight < 0;

        if (placement === 'top' && !isTopCrowded) {
          // The above space isn't crowded
          dropDownStyle.top = "".concat(parseFloat(dropDownStyle.top) - container.offsetHeight || 0, "px");
        }

        if (placement === 'bottom' && isBottomCrowded && !isTopCrowded) {
          // The above space isn't crowded and the under space is crowded.
          dropDownStyle.top = "".concat(parseFloat(dropDownStyle.top) - container.offsetHeight || 0, "px");
        }

        Object.keys(dropDownStyle).forEach(function (key) {
          container.style[key] = dropDownStyle[key];
        });
      }

      if (!_this.focusItem) {
        return;
      }

      (0, _domScrollIntoView["default"])(_reactDom["default"].findDOMNode(_this.focusItem), container, {
        onlyScrollIfNeeded: true
      });
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "getNavigations", function () {
      var _this$props = _this.props,
          prefixCls = _this$props.prefixCls,
          suggestions = _this$props.suggestions;
      var focusedIndex = _this.state.focusedIndex;
      return suggestions.length ? _react.Children.map(suggestions, function (element, index) {
        var focusItem = index === focusedIndex;
        var ref = focusItem ? function (node) {
          _this.focusItem = node;
        } : null;
        var mentionClass = (0, _classnames["default"])("".concat(prefixCls, "-dropdown-item"), {
          focus: focusItem
        });

        if ((0, _react.isValidElement)(element)) {
          return (0, _react.cloneElement)(element, {
            className: mentionClass,
            onMouseDown: function onMouseDown() {
              return _this.onMentionSelect(element.props.value, element.props.data);
            },
            ref: ref
          });
        }

        return _react["default"].createElement(_Nav["default"], {
          ref: ref,
          className: mentionClass,
          onMouseDown: function onMouseDown() {
            return _this.onMentionSelect(element);
          }
        }, element);
      }, (0, _assertThisInitialized2["default"])(_this)) : _react["default"].createElement("div", {
        className: "".concat(prefixCls, "-dropdown-notfound ").concat(prefixCls, "-dropdown-item")
      }, _this.props.notFoundContent);
    });
    _this.state = {
      isActive: false,
      focusedIndex: 0,
      container: false
    };
    return _this;
  }

  (0, _createClass2["default"])(Suggestions, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.props.callbacks.onChange = this.onEditorStateChange;
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.suggestions.length !== this.props.suggestions.length) {
        this.setState({
          focusedIndex: 0
        });
      }
    }
  }, {
    key: "onMentionSelect",
    value: function onMentionSelect(mention, data) {
      var editorState = this.props.callbacks.getEditorState();
      var _this$props2 = this.props,
          store = _this$props2.store,
          onSelect = _this$props2.onSelect;
      var trigger = store.getTrigger(this.activeOffsetKey);

      if (onSelect) {
        onSelect(mention, data || mention);
      }

      if (this.props.noRedup) {
        var mentions = (0, _getMentions["default"])(editorState.getCurrentContent(), trigger);

        if (mentions.indexOf("".concat(trigger).concat(mention)) !== -1) {
          // eslint-disable-next-line
          console.warn('you have specified `noRedup` props but have duplicated mentions.');
          this.closeDropDown();
          this.props.callbacks.setEditorState((0, _clearMention["default"])(editorState));
          return;
        }
      }

      this.props.callbacks.setEditorState((0, _insertMention["default"])(editorState, "".concat(trigger).concat(mention), data, this.props.mode), true);
      this.closeDropDown();
    }
  }, {
    key: "getPositionStyle",
    value: function getPositionStyle(isActive, position) {
      if (this.props.getSuggestionStyle) {
        return this.props.getSuggestionStyle(isActive, position);
      }

      var container = this.props.getSuggestionContainer ? this.state.container : document.body;
      var offset = (0, _getOffset["default"])(container);
      return position ? (0, _objectSpread3["default"])({
        position: 'absolute',
        left: "".concat(position.left - offset.left, "px"),
        top: "".concat(position.top - offset.top, "px")
      }, this.props.style) : {};
    }
  }, {
    key: "openDropDown",
    value: function openDropDown() {
      this.props.callbacks.onUpArrow = this.onUpArrow;
      this.props.callbacks.handleReturn = this.handleReturn;
      this.props.callbacks.handleKeyBinding = this.handleKeyBinding;
      this.props.callbacks.onDownArrow = this.onDownArrow;
      this.props.callbacks.onBlur = this.onBlur;
      this.setState({
        active: true,
        container: this.state.container || this.getContainer()
      });
    }
  }, {
    key: "closeDropDown",
    value: function closeDropDown() {
      this.props.callbacks.onUpArrow = null;
      this.props.callbacks.handleReturn = null;
      this.props.callbacks.handleKeyBinding = null;
      this.props.callbacks.onDownArrow = null;
      this.props.callbacks.onBlur = null;
      this.setState({
        active: false
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _objectSpread2,
          _this2 = this;

      var _this$props3 = this.props,
          prefixCls = _this$props3.prefixCls,
          className = _this$props3.className,
          placement = _this$props3.placement;
      var _this$state = this.state,
          container = _this$state.container,
          active = _this$state.active;
      var cls = (0, _classnames["default"])((0, _objectSpread3["default"])((_objectSpread2 = {}, (0, _defineProperty2["default"])(_objectSpread2, "".concat(prefixCls, "-dropdown"), true), (0, _defineProperty2["default"])(_objectSpread2, "".concat(prefixCls, "-dropdown-placement-").concat(placement), true), _objectSpread2), className));
      var transitionName = placement === 'top' ? 'slide-down' : 'slide-up';
      var navigations = this.getNavigations();
      return container ? _react["default"].createElement(_SuggestionWrapper["default"], {
        renderReady: this.renderReady,
        container: container
      }, _react["default"].createElement(_animate["default"], {
        transitionName: transitionName
      }, active ? _react["default"].createElement("div", {
        className: cls,
        ref: function ref(node) {
          _this2.dropdownContainer = node;
        }
      }, navigations) : null)) : null;
    }
  }]);
  return Suggestions;
}(_react.Component);

exports["default"] = Suggestions;
(0, _defineProperty2["default"])(Suggestions, "propTypes", {
  callbacks: _propTypes["default"].object,
  suggestions: _propTypes["default"].array,
  store: _propTypes["default"].object,
  onSearchChange: _propTypes["default"].func,
  prefixCls: _propTypes["default"].string,
  mode: _propTypes["default"].string,
  style: _propTypes["default"].object,
  onSelect: _propTypes["default"].func,
  getSuggestionContainer: _propTypes["default"].func,
  notFoundContent: _propTypes["default"].any,
  getSuggestionStyle: _propTypes["default"].func,
  className: _propTypes["default"].string,
  noRedup: _propTypes["default"].bool,
  placement: _propTypes["default"].string
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlN1Z2dlc3Rpb25zLnJlYWN0LmpzeCJdLCJuYW1lcyI6WyJpc05vdEZhbHNlIiwiaSIsIlN1Z2dlc3Rpb25zIiwicHJvcHMiLCJlZGl0b3JTdGF0ZSIsIm9mZnNldCIsInN0b3JlIiwiZ2V0T2Zmc2V0Iiwic2l6ZSIsImNsb3NlRHJvcERvd24iLCJzZWxlY3Rpb24iLCJnZXRTZWxlY3Rpb24iLCJjYWxsYmFja3MiLCJnZXRFZGl0b3JTdGF0ZSIsImdldEhhc0ZvY3VzIiwid29yZCIsInNlbGVjdGlvbkluc2lkZU1lbnRpb24iLCJtYXAiLCJvZmZzZXRLZXkiLCJibG9ja0tleSIsImRlY29yYXRvcktleSIsImxlYWZLZXkiLCJhbmNob3JLZXkiLCJsZWFmIiwiZ2V0QmxvY2tUcmVlIiwiZ2V0SW4iLCJzdGFydEtleSIsImdldCIsImVuZEtleSIsImFuY2hvck9mZnNldCIsInNlbGVjdGlvbkluVGV4dCIsInNvbWUiLCJhY3RpdmVPZmZzZXRLZXkiLCJmaW5kIiwidHJpZ2dlciIsImdldFRyaWdnZXIiLCJzZWFyY2hWYWx1ZSIsInN1YnN0cmluZyIsImxlbmd0aCIsImxhc3RTZWFyY2hWYWx1ZSIsImxhc3RUcmlnZ2VyIiwib25TZWFyY2hDaGFuZ2UiLCJzdGF0ZSIsImFjdGl2ZSIsImluZGV4T2YiLCJvcGVuRHJvcERvd24iLCJldiIsInByZXZlbnREZWZhdWx0Iiwic3VnZ2VzdGlvbnMiLCJuZXdJbmRleCIsImZvY3VzZWRJbmRleCIsInNldFN0YXRlIiwiTWF0aCIsIm1heCIsInBvcHVwQ29udGFpbmVyIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwibW91bnROb2RlIiwiZ2V0U3VnZ2VzdGlvbkNvbnRhaW5lciIsInN0eWxlIiwicG9zaXRpb24iLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJjb21tYW5kIiwic2VsZWN0ZWRTdWdnZXN0aW9uIiwib25NZW50aW9uU2VsZWN0IiwidmFsdWUiLCJkYXRhIiwiY29udGFpbmVyIiwiZHJvcGRvd25Db250YWluZXIiLCJkcm9wRG93blBvc2l0aW9uIiwicGxhY2VtZW50IiwiZHJvcERvd25TdHlsZSIsImdldFBvc2l0aW9uU3R5bGUiLCJpc1RvcENyb3dkZWQiLCJwYXJzZUZsb2F0IiwidG9wIiwid2luZG93Iiwic2Nyb2xsWSIsIm9mZnNldEhlaWdodCIsImlzQm90dG9tQ3Jvd2RlZCIsImlubmVySGVpZ2h0IiwiZG9jdW1lbnRFbGVtZW50IiwiY2xpZW50SGVpZ2h0IiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJmb2N1c0l0ZW0iLCJSZWFjdERPTSIsImZpbmRET01Ob2RlIiwib25seVNjcm9sbElmTmVlZGVkIiwicHJlZml4Q2xzIiwiQ2hpbGRyZW4iLCJlbGVtZW50IiwiaW5kZXgiLCJyZWYiLCJub2RlIiwibWVudGlvbkNsYXNzIiwiZm9jdXMiLCJjbGFzc05hbWUiLCJvbk1vdXNlRG93biIsIm5vdEZvdW5kQ29udGVudCIsImlzQWN0aXZlIiwib25DaGFuZ2UiLCJvbkVkaXRvclN0YXRlQ2hhbmdlIiwibmV4dFByb3BzIiwibWVudGlvbiIsIm9uU2VsZWN0Iiwibm9SZWR1cCIsIm1lbnRpb25zIiwiZ2V0Q3VycmVudENvbnRlbnQiLCJjb25zb2xlIiwid2FybiIsInNldEVkaXRvclN0YXRlIiwibW9kZSIsImdldFN1Z2dlc3Rpb25TdHlsZSIsImxlZnQiLCJvblVwQXJyb3ciLCJoYW5kbGVSZXR1cm4iLCJoYW5kbGVLZXlCaW5kaW5nIiwib25Eb3duQXJyb3ciLCJvbkJsdXIiLCJnZXRDb250YWluZXIiLCJjbHMiLCJ0cmFuc2l0aW9uTmFtZSIsIm5hdmlnYXRpb25zIiwiZ2V0TmF2aWdhdGlvbnMiLCJyZW5kZXJSZWFkeSIsIkNvbXBvbmVudCIsIlByb3BUeXBlcyIsIm9iamVjdCIsImFycmF5IiwiZnVuYyIsInN0cmluZyIsImFueSIsImJvb2wiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztB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TEo7QUFNakJuQixFQUFBQSxJQUFJLEVBQUVlLHNCQUFVSSxNQU5DO0FBT2pCM0UsRUFBQUEsS0FBSyxFQUFFdUUsc0JBQVVDLE1BUEE7QUFRakJ2QixFQUFBQSxRQUFRLEVBQUVzQixzQkFBVUcsSUFSSDtBQVNqQjNFLEVBQUFBLHNCQUFzQixFQUFFd0Usc0JBQVVHLElBVGpCO0FBVWpCL0IsRUFBQUEsZUFBZSxFQUFFNEIsc0JBQVVLLEdBVlY7QUFXakJuQixFQUFBQSxrQkFBa0IsRUFBRWMsc0JBQVVHLElBWGI7QUFZakJqQyxFQUFBQSxTQUFTLEVBQUU4QixzQkFBVUksTUFaSjtBQWFqQnpCLEVBQUFBLE9BQU8sRUFBRXFCLHNCQUFVTSxJQWJGO0FBY2pCakUsRUFBQUEsU0FBUyxFQUFFMkQsc0JBQVVJO0FBZEosQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBDaGlsZHJlbiwgY2xvbmVFbGVtZW50LCBDb21wb25lbnQsIGlzVmFsaWRFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgZGVjb2RlIH0gZnJvbSAnZHJhZnQtanMvbGliL0RyYWZ0T2Zmc2V0S2V5JztcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBzY3JvbGxJbnRvVmlldyBmcm9tICdkb20tc2Nyb2xsLWludG8tdmlldyc7XG5pbXBvcnQgQW5pbWF0ZSBmcm9tICcuLi8uLi8uLi9hbmltYXRlJztcbmltcG9ydCBOYXYgZnJvbSAnLi9OYXYucmVhY3QnO1xuaW1wb3J0IFN1Z2dldGlvbldyYXBwZXIgZnJvbSAnLi9TdWdnZXN0aW9uV3JhcHBlci5yZWFjdCc7XG5pbXBvcnQgaW5zZXJ0TWVudGlvbiBmcm9tICcuLi91dGlscy9pbnNlcnRNZW50aW9uJztcbmltcG9ydCBjbGVhck1lbnRpb24gZnJvbSAnLi4vdXRpbHMvY2xlYXJNZW50aW9uJztcbmltcG9ydCBnZXRPZmZzZXQgZnJvbSAnLi4vdXRpbHMvZ2V0T2Zmc2V0JztcbmltcG9ydCBnZXRNZW50aW9ucyBmcm9tICcuLi91dGlscy9nZXRNZW50aW9ucyc7XG5pbXBvcnQgZ2V0U2VhcmNoV29yZCBmcm9tICcuLi91dGlscy9nZXRTZWFyY2hXb3JkJztcblxuY29uc3QgaXNOb3RGYWxzZSA9IGkgPT4gaSAhPT0gZmFsc2U7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN1Z2dlc3Rpb25zIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBjYWxsYmFja3M6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgc3VnZ2VzdGlvbnM6IFByb3BUeXBlcy5hcnJheSxcbiAgICBzdG9yZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBvblNlYXJjaENoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgcHJlZml4Q2xzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG1vZGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgb25TZWxlY3Q6IFByb3BUeXBlcy5mdW5jLFxuICAgIGdldFN1Z2dlc3Rpb25Db250YWluZXI6IFByb3BUeXBlcy5mdW5jLFxuICAgIG5vdEZvdW5kQ29udGVudDogUHJvcFR5cGVzLmFueSxcbiAgICBnZXRTdWdnZXN0aW9uU3R5bGU6IFByb3BUeXBlcy5mdW5jLFxuICAgIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBub1JlZHVwOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBwbGFjZW1lbnQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIH07XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGlzQWN0aXZlOiBmYWxzZSxcbiAgICAgIGZvY3VzZWRJbmRleDogMCxcbiAgICAgIGNvbnRhaW5lcjogZmFsc2UsXG4gICAgfTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMucHJvcHMuY2FsbGJhY2tzLm9uQ2hhbmdlID0gdGhpcy5vbkVkaXRvclN0YXRlQ2hhbmdlO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICBpZiAobmV4dFByb3BzLnN1Z2dlc3Rpb25zLmxlbmd0aCAhPT0gdGhpcy5wcm9wcy5zdWdnZXN0aW9ucy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBmb2N1c2VkSW5kZXg6IDAsXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBvbkVkaXRvclN0YXRlQ2hhbmdlID0gKGVkaXRvclN0YXRlKSA9PiB7XG4gICAgY29uc3Qgb2Zmc2V0ID0gdGhpcy5wcm9wcy5zdG9yZS5nZXRPZmZzZXQoKTtcbiAgICBpZiAob2Zmc2V0LnNpemUgPT09IDApIHtcbiAgICAgIHRoaXMuY2xvc2VEcm9wRG93bigpO1xuICAgICAgcmV0dXJuIGVkaXRvclN0YXRlO1xuICAgIH1cbiAgICBjb25zdCBzZWxlY3Rpb24gPSBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKTtcblxuICAgIC8vIOS/ruWkjTog54Sm54K556e75Ye65YaN56e75YWl5pe2LCBkcm9wZG93biDkvJrpl6rliqjkuIDkuItcbiAgICAvLyDljp/lm6A6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9kcmFmdC1qcy9ibG9iLzY3YzVlNjk0OTllM2IwYzE0OWNlODNiMDA0ODcyYWZkZjQxODA0NjMvc3JjL2NvbXBvbmVudC9oYW5kbGVycy9lZGl0L2VkaXRPbkZvY3VzLmpzI0wzM1xuICAgIC8vIOatpOWkhOW8uuWItiB1cGRhdGUg5LqG5LiA5LiLLOWboOatpCBvbkVkaXRvclN0YXRlQ2hhbmdlIOS8miBjYWxsIOS4pOasoVxuICAgIGlmICghdGhpcy5wcm9wcy5jYWxsYmFja3MuZ2V0RWRpdG9yU3RhdGUoKS5nZXRTZWxlY3Rpb24oKS5nZXRIYXNGb2N1cygpXG4gICAgICAmJiBzZWxlY3Rpb24uZ2V0SGFzRm9jdXMoKSkge1xuICAgICAgcmV0dXJuIGVkaXRvclN0YXRlO1xuICAgIH1cblxuICAgIGNvbnN0IHsgd29yZCB9ID0gZ2V0U2VhcmNoV29yZChlZGl0b3JTdGF0ZSwgc2VsZWN0aW9uKTtcbiAgICBpZiAoIXdvcmQpIHtcbiAgICAgIHRoaXMuY2xvc2VEcm9wRG93bigpO1xuICAgICAgcmV0dXJuIGVkaXRvclN0YXRlO1xuICAgIH1cbiAgICBjb25zdCBzZWxlY3Rpb25JbnNpZGVNZW50aW9uID0gb2Zmc2V0Lm1hcCgoeyBvZmZzZXRLZXkgfSkgPT4ge1xuICAgICAgY29uc3QgeyBibG9ja0tleSwgZGVjb3JhdG9yS2V5LCBsZWFmS2V5IH0gPSBkZWNvZGUob2Zmc2V0S2V5KTtcbiAgICAgIGlmIChibG9ja0tleSAhPT0gc2VsZWN0aW9uLmFuY2hvcktleSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBjb25zdCBsZWFmID0gZWRpdG9yU3RhdGUuZ2V0QmxvY2tUcmVlKGJsb2NrS2V5KS5nZXRJbihbZGVjb3JhdG9yS2V5LCAnbGVhdmVzJywgbGVhZktleV0pO1xuICAgICAgaWYgKCFsZWFmKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHN0YXJ0S2V5ID0gbGVhZi5nZXQoJ3N0YXJ0Jyk7XG4gICAgICBjb25zdCBlbmRLZXkgPSBsZWFmLmdldCgnZW5kJyk7XG4gICAgICAvLyDlpITnkIblj6rmnInkuIDkuKogYEBgIOespuWPt+aXtueahOaDheWGtVxuICAgICAgaWYgKCF3b3JkKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGFydEtleSA9PT0gZW5kS2V5IC0gMSkge1xuICAgICAgICByZXR1cm4gc2VsZWN0aW9uLmFuY2hvck9mZnNldCA+PSBzdGFydEtleSArIDEgJiYgc2VsZWN0aW9uLmFuY2hvck9mZnNldCA8PSBlbmRLZXlcbiAgICAgICAgICA/IG9mZnNldEtleVxuICAgICAgICAgIDogZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2VsZWN0aW9uLmFuY2hvck9mZnNldCA+IHN0YXJ0S2V5ICsgMSAmJiBzZWxlY3Rpb24uYW5jaG9yT2Zmc2V0IDw9IGVuZEtleVxuICAgICAgICA/IG9mZnNldEtleVxuICAgICAgICA6IGZhbHNlO1xuICAgIH0pO1xuXG4gICAgY29uc3Qgc2VsZWN0aW9uSW5UZXh0ID0gc2VsZWN0aW9uSW5zaWRlTWVudGlvbi5zb21lKGlzTm90RmFsc2UpO1xuICAgIHRoaXMuYWN0aXZlT2Zmc2V0S2V5ID0gc2VsZWN0aW9uSW5zaWRlTWVudGlvbi5maW5kKGlzTm90RmFsc2UpO1xuICAgIGNvbnN0IHRyaWdnZXIgPSB0aGlzLnByb3BzLnN0b3JlLmdldFRyaWdnZXIodGhpcy5hY3RpdmVPZmZzZXRLZXkpO1xuXG4gICAgaWYgKCFzZWxlY3Rpb25JblRleHQgfHwgIXNlbGVjdGlvbi5nZXRIYXNGb2N1cygpKSB7XG4gICAgICB0aGlzLmNsb3NlRHJvcERvd24oKTtcbiAgICAgIHJldHVybiBlZGl0b3JTdGF0ZTtcbiAgICB9XG4gICAgY29uc3Qgc2VhcmNoVmFsdWUgPSB3b3JkLnN1YnN0cmluZyh0cmlnZ2VyLmxlbmd0aCwgd29yZC5sZW5ndGgpO1xuICAgIGlmICh0aGlzLmxhc3RTZWFyY2hWYWx1ZSAhPT0gc2VhcmNoVmFsdWUgfHwgdGhpcy5sYXN0VHJpZ2dlciAhPT0gdHJpZ2dlcikge1xuICAgICAgdGhpcy5sYXN0U2VhcmNoVmFsdWUgPSBzZWFyY2hWYWx1ZTtcbiAgICAgIHRoaXMubGFzdFRyaWdnZXIgPSB0cmlnZ2VyO1xuICAgICAgdGhpcy5wcm9wcy5vblNlYXJjaENoYW5nZShzZWFyY2hWYWx1ZSwgdHJpZ2dlcik7XG4gICAgfVxuICAgIGlmICghdGhpcy5zdGF0ZS5hY3RpdmUpIHtcbiAgICAgIC8vIOaaguaXtuayoeacieabtOS8mOmbheeahOaWueazlVxuICAgICAgaWYgKCF0cmlnZ2VyIHx8IHdvcmQuaW5kZXhPZih0cmlnZ2VyKSAhPT0gLTEpIHtcbiAgICAgICAgdGhpcy5vcGVuRHJvcERvd24oKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVkaXRvclN0YXRlO1xuICB9O1xuXG4gIG9uTWVudGlvblNlbGVjdChtZW50aW9uLCBkYXRhKSB7XG4gICAgY29uc3QgZWRpdG9yU3RhdGUgPSB0aGlzLnByb3BzLmNhbGxiYWNrcy5nZXRFZGl0b3JTdGF0ZSgpO1xuICAgIGNvbnN0IHsgc3RvcmUsIG9uU2VsZWN0IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHRyaWdnZXIgPSBzdG9yZS5nZXRUcmlnZ2VyKHRoaXMuYWN0aXZlT2Zmc2V0S2V5KTtcbiAgICBpZiAob25TZWxlY3QpIHtcbiAgICAgIG9uU2VsZWN0KG1lbnRpb24sIGRhdGEgfHwgbWVudGlvbik7XG4gICAgfVxuICAgIGlmICh0aGlzLnByb3BzLm5vUmVkdXApIHtcbiAgICAgIGNvbnN0IG1lbnRpb25zID0gZ2V0TWVudGlvbnMoZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKSwgdHJpZ2dlcik7XG4gICAgICBpZiAobWVudGlvbnMuaW5kZXhPZihgJHt0cmlnZ2VyfSR7bWVudGlvbn1gKSAhPT0gLTEpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgIGNvbnNvbGUud2FybigneW91IGhhdmUgc3BlY2lmaWVkIGBub1JlZHVwYCBwcm9wcyBidXQgaGF2ZSBkdXBsaWNhdGVkIG1lbnRpb25zLicpO1xuICAgICAgICB0aGlzLmNsb3NlRHJvcERvd24oKTtcbiAgICAgICAgdGhpcy5wcm9wcy5jYWxsYmFja3Muc2V0RWRpdG9yU3RhdGUoXG4gICAgICAgICAgY2xlYXJNZW50aW9uKGVkaXRvclN0YXRlKSxcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnByb3BzLmNhbGxiYWNrcy5zZXRFZGl0b3JTdGF0ZShcbiAgICAgIGluc2VydE1lbnRpb24oZWRpdG9yU3RhdGUsIGAke3RyaWdnZXJ9JHttZW50aW9ufWAsIGRhdGEsIHRoaXMucHJvcHMubW9kZSlcbiAgICAgICwgdHJ1ZSk7XG4gICAgdGhpcy5jbG9zZURyb3BEb3duKCk7XG4gIH1cblxuICBvblVwQXJyb3cgPSAoZXYpID0+IHtcbiAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmICh0aGlzLnByb3BzLnN1Z2dlc3Rpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IG5ld0luZGV4ID0gdGhpcy5zdGF0ZS5mb2N1c2VkSW5kZXggLSAxO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGZvY3VzZWRJbmRleDogTWF0aC5tYXgobmV3SW5kZXgsIDApLFxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuICBvbkJsdXIgPSAoZXYpID0+IHtcbiAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMuY2xvc2VEcm9wRG93bigpO1xuICB9O1xuICBvbkRvd25BcnJvdyA9IChldikgPT4ge1xuICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3QgbmV3SW5kZXggPSB0aGlzLnN0YXRlLmZvY3VzZWRJbmRleCArIDE7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBmb2N1c2VkSW5kZXg6IG5ld0luZGV4ID49IHRoaXMucHJvcHMuc3VnZ2VzdGlvbnMubGVuZ3RoID8gMCA6IG5ld0luZGV4LFxuICAgIH0pO1xuICB9O1xuXG4gIGdldFBvc2l0aW9uU3R5bGUoaXNBY3RpdmUsIHBvc2l0aW9uKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuZ2V0U3VnZ2VzdGlvblN0eWxlKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5nZXRTdWdnZXN0aW9uU3R5bGUoaXNBY3RpdmUsIHBvc2l0aW9uKTtcbiAgICB9XG4gICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5wcm9wcy5nZXRTdWdnZXN0aW9uQ29udGFpbmVyID8gdGhpcy5zdGF0ZS5jb250YWluZXIgOiBkb2N1bWVudC5ib2R5O1xuICAgIGNvbnN0IG9mZnNldCA9IGdldE9mZnNldChjb250YWluZXIpO1xuICAgIHJldHVybiBwb3NpdGlvbiA/IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgbGVmdDogYCR7cG9zaXRpb24ubGVmdCAtIG9mZnNldC5sZWZ0fXB4YCxcbiAgICAgIHRvcDogYCR7cG9zaXRpb24udG9wIC0gb2Zmc2V0LnRvcH1weGAsXG4gICAgICAuLi50aGlzLnByb3BzLnN0eWxlLFxuICAgIH0gOiB7fTtcbiAgfVxuXG4gIGdldENvbnRhaW5lciA9ICgpID0+IHtcbiAgICBjb25zdCBwb3B1cENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGxldCBtb3VudE5vZGU7XG4gICAgaWYgKHRoaXMucHJvcHMuZ2V0U3VnZ2VzdGlvbkNvbnRhaW5lcikge1xuICAgICAgbW91bnROb2RlID0gdGhpcy5wcm9wcy5nZXRTdWdnZXN0aW9uQ29udGFpbmVyKCk7XG4gICAgICBwb3B1cENvbnRhaW5lci5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1vdW50Tm9kZSA9IGRvY3VtZW50LmJvZHk7XG4gICAgfVxuICAgIG1vdW50Tm9kZS5hcHBlbmRDaGlsZChwb3B1cENvbnRhaW5lcik7XG4gICAgcmV0dXJuIHBvcHVwQ29udGFpbmVyO1xuICB9O1xuICBoYW5kbGVLZXlCaW5kaW5nID0gKGNvbW1hbmQpID0+IHtcbiAgICByZXR1cm4gY29tbWFuZCA9PT0gJ3NwbGl0LWJsb2NrJztcbiAgfTtcbiAgaGFuZGxlUmV0dXJuID0gKGV2KSA9PiB7XG4gICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCBzZWxlY3RlZFN1Z2dlc3Rpb24gPSB0aGlzLnByb3BzLnN1Z2dlc3Rpb25zW3RoaXMuc3RhdGUuZm9jdXNlZEluZGV4XTtcbiAgICBpZiAoc2VsZWN0ZWRTdWdnZXN0aW9uKSB7XG4gICAgICBpZiAoaXNWYWxpZEVsZW1lbnQoc2VsZWN0ZWRTdWdnZXN0aW9uKSkge1xuICAgICAgICB0aGlzLm9uTWVudGlvblNlbGVjdChzZWxlY3RlZFN1Z2dlc3Rpb24ucHJvcHMudmFsdWUsIHNlbGVjdGVkU3VnZ2VzdGlvbi5wcm9wcy5kYXRhKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMub25NZW50aW9uU2VsZWN0KHNlbGVjdGVkU3VnZ2VzdGlvbik7XG4gICAgICB9XG4gICAgICB0aGlzLmxhc3RTZWFyY2hWYWx1ZSA9IG51bGw7XG4gICAgICB0aGlzLmxhc3RUcmlnZ2VyID0gbnVsbDtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgb3BlbkRyb3BEb3duKCkge1xuICAgIHRoaXMucHJvcHMuY2FsbGJhY2tzLm9uVXBBcnJvdyA9IHRoaXMub25VcEFycm93O1xuICAgIHRoaXMucHJvcHMuY2FsbGJhY2tzLmhhbmRsZVJldHVybiA9IHRoaXMuaGFuZGxlUmV0dXJuO1xuICAgIHRoaXMucHJvcHMuY2FsbGJhY2tzLmhhbmRsZUtleUJpbmRpbmcgPSB0aGlzLmhhbmRsZUtleUJpbmRpbmc7XG4gICAgdGhpcy5wcm9wcy5jYWxsYmFja3Mub25Eb3duQXJyb3cgPSB0aGlzLm9uRG93bkFycm93O1xuICAgIHRoaXMucHJvcHMuY2FsbGJhY2tzLm9uQmx1ciA9IHRoaXMub25CbHVyO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgYWN0aXZlOiB0cnVlLFxuICAgICAgY29udGFpbmVyOiB0aGlzLnN0YXRlLmNvbnRhaW5lciB8fCB0aGlzLmdldENvbnRhaW5lcigpLFxuICAgIH0pO1xuICB9XG5cbiAgY2xvc2VEcm9wRG93bigpIHtcbiAgICB0aGlzLnByb3BzLmNhbGxiYWNrcy5vblVwQXJyb3cgPSBudWxsO1xuICAgIHRoaXMucHJvcHMuY2FsbGJhY2tzLmhhbmRsZVJldHVybiA9IG51bGw7XG4gICAgdGhpcy5wcm9wcy5jYWxsYmFja3MuaGFuZGxlS2V5QmluZGluZyA9IG51bGw7XG4gICAgdGhpcy5wcm9wcy5jYWxsYmFja3Mub25Eb3duQXJyb3cgPSBudWxsO1xuICAgIHRoaXMucHJvcHMuY2FsbGJhY2tzLm9uQmx1ciA9IG51bGw7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBhY3RpdmU6IGZhbHNlLFxuICAgIH0pO1xuICB9XG5cbiAgcmVuZGVyUmVhZHkgPSAoKSA9PiB7XG4gICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5kcm9wZG93bkNvbnRhaW5lcjtcbiAgICBpZiAoIWNvbnRhaW5lcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB7IGFjdGl2ZSB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7IGFjdGl2ZU9mZnNldEtleSB9ID0gdGhpcztcbiAgICBjb25zdCBvZmZzZXQgPSB0aGlzLnByb3BzLnN0b3JlLmdldE9mZnNldCgpO1xuICAgIGNvbnN0IGRyb3BEb3duUG9zaXRpb24gPSBvZmZzZXQuZ2V0KGFjdGl2ZU9mZnNldEtleSk7XG5cbiAgICBpZiAoYWN0aXZlICYmIGRyb3BEb3duUG9zaXRpb24pIHtcbiAgICAgIGNvbnN0IHBsYWNlbWVudCA9IHRoaXMucHJvcHMucGxhY2VtZW50O1xuICAgICAgY29uc3QgZHJvcERvd25TdHlsZSA9IHRoaXMuZ2V0UG9zaXRpb25TdHlsZSh0cnVlLCBkcm9wRG93blBvc2l0aW9uLnBvc2l0aW9uKCkpO1xuXG4gICAgICAvLyBDaGVjayBpZiB0aGUgYWJvdmUgc3BhY2UgaXMgY3Jvd2RlZFxuICAgICAgY29uc3QgaXNUb3BDcm93ZGVkID0gcGFyc2VGbG9hdChkcm9wRG93blN0eWxlLnRvcCkgLSB3aW5kb3cuc2Nyb2xsWSAtIGNvbnRhaW5lci5vZmZzZXRIZWlnaHQgPCAwO1xuICAgICAgLy8gQ2hlY2sgaWYgdGhlIHVuZGVyIHNwYWNlIGlzIGNyb3dkZWRcbiAgICAgIGNvbnN0IGlzQm90dG9tQ3Jvd2RlZCA9ICh3aW5kb3cuaW5uZXJIZWlnaHQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCkgLSAocGFyc2VGbG9hdChkcm9wRG93blN0eWxlLnRvcCkgLSB3aW5kb3cuc2Nyb2xsWSkgLSBjb250YWluZXIub2Zmc2V0SGVpZ2h0IDwgMDtcblxuICAgICAgaWYgKHBsYWNlbWVudCA9PT0gJ3RvcCcgJiYgIWlzVG9wQ3Jvd2RlZCkge1xuICAgICAgICAvLyBUaGUgYWJvdmUgc3BhY2UgaXNuJ3QgY3Jvd2RlZFxuICAgICAgICBkcm9wRG93blN0eWxlLnRvcCA9IGAke3BhcnNlRmxvYXQoZHJvcERvd25TdHlsZS50b3ApIC0gY29udGFpbmVyLm9mZnNldEhlaWdodCB8fCAwfXB4YDtcbiAgICAgIH1cblxuICAgICAgaWYgKHBsYWNlbWVudCA9PT0gJ2JvdHRvbScgJiYgaXNCb3R0b21Dcm93ZGVkICYmICFpc1RvcENyb3dkZWQpIHtcbiAgICAgICAgLy8gVGhlIGFib3ZlIHNwYWNlIGlzbid0IGNyb3dkZWQgYW5kIHRoZSB1bmRlciBzcGFjZSBpcyBjcm93ZGVkLlxuICAgICAgICBkcm9wRG93blN0eWxlLnRvcCA9IGAke3BhcnNlRmxvYXQoZHJvcERvd25TdHlsZS50b3ApIC0gY29udGFpbmVyLm9mZnNldEhlaWdodCB8fCAwfXB4YDtcbiAgICAgIH1cblxuICAgICAgT2JqZWN0LmtleXMoZHJvcERvd25TdHlsZSkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIGNvbnRhaW5lci5zdHlsZVtrZXldID0gZHJvcERvd25TdHlsZVtrZXldO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmZvY3VzSXRlbSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzY3JvbGxJbnRvVmlldyhcbiAgICAgIFJlYWN0RE9NLmZpbmRET01Ob2RlKHRoaXMuZm9jdXNJdGVtKSxcbiAgICAgIGNvbnRhaW5lciwge1xuICAgICAgICBvbmx5U2Nyb2xsSWZOZWVkZWQ6IHRydWUsXG4gICAgICB9LFxuICAgICk7XG4gIH07XG4gIGdldE5hdmlnYXRpb25zID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgcHJlZml4Q2xzLCBzdWdnZXN0aW9ucyB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IGZvY3VzZWRJbmRleCB9ID0gdGhpcy5zdGF0ZTtcbiAgICByZXR1cm4gc3VnZ2VzdGlvbnMubGVuZ3RoID8gQ2hpbGRyZW4ubWFwKHN1Z2dlc3Rpb25zLCAoZWxlbWVudCwgaW5kZXgpID0+IHtcbiAgICAgIGNvbnN0IGZvY3VzSXRlbSA9IGluZGV4ID09PSBmb2N1c2VkSW5kZXg7XG4gICAgICBjb25zdCByZWYgPSBmb2N1c0l0ZW0gPyAobm9kZSkgPT4ge1xuICAgICAgICB0aGlzLmZvY3VzSXRlbSA9IG5vZGU7XG4gICAgICB9IDogbnVsbDtcbiAgICAgIGNvbnN0IG1lbnRpb25DbGFzcyA9IGN4KGAke3ByZWZpeENsc30tZHJvcGRvd24taXRlbWAsIHtcbiAgICAgICAgZm9jdXM6IGZvY3VzSXRlbSxcbiAgICAgIH0pO1xuICAgICAgaWYgKGlzVmFsaWRFbGVtZW50KGVsZW1lbnQpKSB7XG4gICAgICAgIHJldHVybiBjbG9uZUVsZW1lbnQoZWxlbWVudCwge1xuICAgICAgICAgIGNsYXNzTmFtZTogbWVudGlvbkNsYXNzLFxuICAgICAgICAgIG9uTW91c2VEb3duOiAoKSA9PiB0aGlzLm9uTWVudGlvblNlbGVjdChlbGVtZW50LnByb3BzLnZhbHVlLCBlbGVtZW50LnByb3BzLmRhdGEpLFxuICAgICAgICAgIHJlZixcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8TmF2XG4gICAgICAgICAgcmVmPXtyZWZ9XG4gICAgICAgICAgY2xhc3NOYW1lPXttZW50aW9uQ2xhc3N9XG4gICAgICAgICAgb25Nb3VzZURvd249eygpID0+IHRoaXMub25NZW50aW9uU2VsZWN0KGVsZW1lbnQpfVxuICAgICAgICA+XG4gICAgICAgICAge2VsZW1lbnR9XG4gICAgICAgIDwvTmF2PlxuICAgICAgKTtcbiAgICB9LCB0aGlzKSA6IChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtgJHtwcmVmaXhDbHN9LWRyb3Bkb3duLW5vdGZvdW5kICR7cHJlZml4Q2xzfS1kcm9wZG93bi1pdGVtYH0+XG4gICAgICAgIHt0aGlzLnByb3BzLm5vdEZvdW5kQ29udGVudH1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgcHJlZml4Q2xzLCBjbGFzc05hbWUsIHBsYWNlbWVudCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IGNvbnRhaW5lciwgYWN0aXZlIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IGNscyA9IGN4KHtcbiAgICAgIFtgJHtwcmVmaXhDbHN9LWRyb3Bkb3duYF06IHRydWUsXG4gICAgICBbYCR7cHJlZml4Q2xzfS1kcm9wZG93bi1wbGFjZW1lbnQtJHtwbGFjZW1lbnR9YF06IHRydWUsXG4gICAgICAuLi5jbGFzc05hbWUsXG4gICAgfSk7XG4gICAgY29uc3QgdHJhbnNpdGlvbk5hbWUgPSBwbGFjZW1lbnQgPT09ICd0b3AnID8gJ3NsaWRlLWRvd24nIDogJ3NsaWRlLXVwJztcblxuICAgIGNvbnN0IG5hdmlnYXRpb25zID0gdGhpcy5nZXROYXZpZ2F0aW9ucygpO1xuXG4gICAgcmV0dXJuIGNvbnRhaW5lciA/IChcbiAgICAgIDxTdWdnZXRpb25XcmFwcGVyIHJlbmRlclJlYWR5PXt0aGlzLnJlbmRlclJlYWR5fSBjb250YWluZXI9e2NvbnRhaW5lcn0+XG4gICAgICAgIDxBbmltYXRlIHRyYW5zaXRpb25OYW1lPXt0cmFuc2l0aW9uTmFtZX0+XG4gICAgICAgICAge2FjdGl2ZSA/IChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbHN9IHJlZj17KG5vZGUpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5kcm9wZG93bkNvbnRhaW5lciA9IG5vZGU7XG4gICAgICAgICAgICB9fT5cbiAgICAgICAgICAgICAge25hdmlnYXRpb25zfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgIDwvQW5pbWF0ZT5cbiAgICAgIDwvU3VnZ2V0aW9uV3JhcHBlcj5cbiAgICApIDogbnVsbDtcbiAgfVxufVxuIl19