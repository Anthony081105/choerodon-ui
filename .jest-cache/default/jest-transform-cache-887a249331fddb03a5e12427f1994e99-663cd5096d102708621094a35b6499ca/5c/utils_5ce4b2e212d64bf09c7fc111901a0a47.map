{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/formatter/utils.tsx"],"names":[],"mappings":";;;;;;;;;;;;;AAAA;;AAGA,IAAI,eAAJ;;AAEM,SAAU,6BAAV,GAAuC;AAC3C,MAAI,eAAe,KAAK,SAAxB,EAAmC;AACjC,QAAI;AACD,OAAD,EAAI,cAAJ,CAAmB,GAAnB;AACA,MAAA,eAAe,GAAG,KAAlB;AACD,KAHD,CAGE,OAAO,CAAP,EAAU;AACV,MAAA,eAAe,GAAG,CAAC,CAAC,IAAF,KAAW,YAA7B;AACD;AACF;;AACD,SAAO,eAAP;AACD;;AAEK,SAAU,sBAAV,CACJ,IADI,EAEJ,OAFI,EAE8B;AAElC,MAAI,IAAI,KAAA;AAAA;AAAR,IAA+B;AAC7B,aAAO;AAAE,QAAA,KAAK,EAAE;AAAT,OAAP;AACD;;AACD,MAAI,OAAO,IAAI,OAAO,CAAC,QAAvB,EAAiC;AAC/B,WAAO;AAAE,MAAA,KAAK,EAAE;AAAT,KAAP;AACD;;AACD,SAAO;AAAE,IAAA,KAAK,EAAE,SAAT;AAAoB,IAAA,qBAAqB,EAAE,CAA3C;AAA8C,IAAA,qBAAqB,EAAE;AAArE,GAAP;AACD;;AAEK,SAAU,sBAAV,CACJ,KADI,EAEJ,IAFI,EAGJ,OAHI,EAG8B;AAElC,MAAI,IAAI,KAAA;AAAA;AAAR,IAA+B;AAC7B,UAAM,QAAQ,GAAG,MAAM,CAAC,KAAD,CAAN,CAAc,KAAd,CAAoB,GAApB,EAAyB,CAAzB,CAAjB;AACA,aAAO,KAAK,CAAC,cAAN,GAAuB,KAAvB,CAA6B,GAA7B,EAAkC,CAAlC,KAAwC,QAAQ,cAAO,QAAP,IAAoB,EAApE,CAAP;AACD;;AACD,MAAM,QAAQ,GAAG,OAAO,IAAI,OAAO,CAAC,QAApC;AACA,mBAAU,QAAQ,aAAM,QAAN,SAAoB,EAAtC,SAA2C,KAAK,CAAC,cAAN,EAA3C;AACD;;AAEK,SAAU,UAAV,CAAqB,KAArB,EAAoC,SAApC,EAAyD;AAC7D,MAAI,SAAJ,EAAe;AACb,YAAQ,SAAR;AACE,WAAA;AAAA;AAAA;AACE,eAAO,KAAK,CAAC,IAAN,EAAP;;AACF,WAAA;AAAA;AAAA;AACE,eAAO,KAAK,CAAC,QAAN,EAAP;;AACF,WAAA;AAAA;AAAA;AACE,eAAO,KAAK,CAAC,SAAN,EAAP;;AACF;AAPF;AASD;;AACD,SAAO,KAAP;AACD;;AAEK,SAAU,eAAV,CAA0B,KAA1B,EAAyC,MAAzC,EAAsE;AAC1E,MAAI,MAAJ,EAAY;AACV,YAAQ,MAAR;AACE,WAAA;AAAA;AAAA;AACE,eAAO,KAAK,CAAC,WAAN,EAAP;;AACF,WAAA;AAAA;AAAA;AACE,eAAO,KAAK,CAAC,WAAN,EAAP;;AACF,WAAA;AAAA;AAAA;AACE,eAAO,4BAAW,KAAX,CAAP;;AACF;AAPF;AASD;;AACD,SAAO,KAAP;AACD","sourcesContent":["import capitalize from 'lodash/capitalize';\nimport { FieldFormat, FieldTrim, FieldType } from '../data-set/enum';\n\nlet supportsLocales;\n\nexport function toLocaleStringSupportsLocales() {\n  if (supportsLocales === undefined) {\n    try {\n      (0).toLocaleString('i');\n      supportsLocales = false;\n    } catch (e) {\n      supportsLocales = e.name === 'RangeError';\n    }\n  }\n  return supportsLocales;\n}\n\nexport function getNumberFormatOptions(\n  type: FieldType,\n  options?: Intl.NumberFormatOptions,\n): Intl.NumberFormatOptions {\n  if (type === FieldType.number) {\n    return { style: 'decimal' };\n  }\n  if (options && options.currency) {\n    return { style: 'currency' };\n  }\n  return { style: 'decimal', minimumFractionDigits: 2, maximumFractionDigits: 2 };\n}\n\nexport function toLocaleStringPolyfill(\n  value: number,\n  type: FieldType,\n  options?: Intl.NumberFormatOptions,\n) {\n  if (type === FieldType.number) {\n    const fraction = String(value).split('.')[1];\n    return value.toLocaleString().split('.')[0] + (fraction ? `.${fraction}` : '');\n  }\n  const currency = options && options.currency;\n  return `${currency ? `${currency} ` : ''}${value.toLocaleString()}`;\n}\n\nexport function trimString(value: string, fieldTrim?: FieldTrim): string {\n  if (fieldTrim) {\n    switch (fieldTrim) {\n      case FieldTrim.both:\n        return value.trim();\n      case FieldTrim.left:\n        return value.trimLeft();\n      case FieldTrim.right:\n        return value.trimRight();\n      default:\n    }\n  }\n  return value;\n}\n\nexport function transformString(value: string, format?: FieldFormat | string): string {\n  if (format) {\n    switch (format) {\n      case FieldFormat.uppercase:\n        return value.toUpperCase();\n      case FieldFormat.lowercase:\n        return value.toLowerCase();\n      case FieldFormat.capitalize:\n        return capitalize(value);\n      default:\n    }\n  }\n  return value;\n}\n"]}