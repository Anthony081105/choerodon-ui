{"version":3,"sources":["Upload.jsx"],"names":["empty","Upload","Component","node","uploader","props","supportServerRender","setState","getComponent","onReady","File","AjaxUpload","IframeUpload","file","abort","ComponentUploader","state","saveUploader","component","PropTypes","string","style","object","prefixCls","action","name","multipart","bool","onError","func","onSuccess","onProgress","onStart","data","oneOfType","headers","accept","multiple","disabled","beforeUpload","customRequest","withCredentials","requestFileKeys","array"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport AjaxUpload from './AjaxUploader';\nimport IframeUpload from './IframeUploader';\n\nfunction empty() {\n}\n\nclass Upload extends Component {\n  static propTypes = {\n    component: PropTypes.string,\n    style: PropTypes.object,\n    prefixCls: PropTypes.string,\n    action: PropTypes.string,\n    name: PropTypes.string,\n    multipart: PropTypes.bool,\n    onError: PropTypes.func,\n    onSuccess: PropTypes.func,\n    onProgress: PropTypes.func,\n    onStart: PropTypes.func,\n    data: PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n    ]),\n    headers: PropTypes.object,\n    accept: PropTypes.string,\n    multiple: PropTypes.bool,\n    disabled: PropTypes.bool,\n    beforeUpload: PropTypes.func,\n    customRequest: PropTypes.func,\n    onReady: PropTypes.func,\n    withCredentials: PropTypes.bool,\n    supportServerRender: PropTypes.bool,\n    requestFileKeys: PropTypes.oneOfType([\n      PropTypes.array,\n      PropTypes.string,\n    ]),\n  }\n\n  static defaultProps = {\n    component: 'span',\n    prefixCls: 'rc-upload',\n    data: {},\n    headers: {},\n    name: 'file',\n    multipart: false,\n    onReady: empty,\n    onStart: empty,\n    onError: empty,\n    onSuccess: empty,\n    supportServerRender: false,\n    multiple: false,\n    beforeUpload: null,\n    customRequest: null,\n    withCredentials: false,\n  }\n\n  state = {\n    Component: null,\n  }\n\n  componentDidMount() {\n    if (this.props.supportServerRender) {\n      /* eslint react/no-did-mount-set-state:0 */\n      this.setState({\n        Component: this.getComponent(),\n      }, this.props.onReady);\n    }\n  }\n\n  getComponent() {\n    return typeof File !== 'undefined' ? AjaxUpload : IframeUpload;\n  }\n\n  abort(file) {\n    this.uploader.abort(file);\n  }\n\n  saveUploader = (node) => {\n    this.uploader = node;\n  }\n\n  render() {\n    if (this.props.supportServerRender) {\n      const ComponentUploader = this.state.Component;\n      if (ComponentUploader) {\n        return <ComponentUploader {...this.props} ref={this.saveUploader} />;\n      }\n      return null;\n    }\n    const ComponentUploader = this.getComponent();\n    return <ComponentUploader {...this.props} ref={this.saveUploader} />;\n  }\n}\n\nexport default Upload;\n"]}