{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/table/query-bar/TableToolBar.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { cloneElement, Component, ReactElement, ReactNode } from 'react';\nimport { observer } from 'mobx-react';\nimport { pxToRem } from 'choerodon-ui/lib/_util/UnitConvertor';\nimport { getProPrefixCls } from 'choerodon-ui/lib/configure';\nimport DataSet from '../../data-set/DataSet';\nimport Record from '../../data-set/Record';\nimport { ElementProps } from '../../core/ViewComponent';\nimport Button, { ButtonProps } from '../../button/Button';\nimport { PaginationProps } from '../../pagination/Pagination';\nimport Field, { Fields } from '../../data-set/Field';\nimport { ButtonColor, FuncType } from '../../button/enum';\nimport Modal from '../../modal';\nimport Form from '../../form/Form';\nimport Icon from '../../icon';\nimport TableContext from '../TableContext';\nimport { $l } from '../../locale-context';\nimport autobind from '../../_util/autobind';\nimport TableButtons from './TableButtons';\n\n/**\n * 去除级联字段\n *\n * @export\n * @param {Fields} fields 待筛选的字段数组\n * @returns {{ [key: string]: Field }} 不含级联字段的字段数组\n */\nexport function filterBindField(fields: Fields): { [key: string]: Field } {\n  return [...fields.entries()].reduce(\n    (newFields, [key, field]) => {\n      if (!field.get('bind')) {\n        newFields[key] = field;\n      }\n      return newFields;\n    },\n    {} as { [key: string]: Field },\n  );\n}\n\nexport interface TabelToolBarProps extends ElementProps {\n  dataSet: DataSet;\n  queryDataSet?: DataSet;\n  queryFields: ReactElement<any>[];\n  queryFieldsLimit?: number;\n  buttons: ReactElement<ButtonProps>[];\n  pagination?: ReactElement<PaginationProps>;\n}\n\n@observer\nexport default class TableToolBar extends Component<TabelToolBarProps, any> {\n  static displayName = 'TableToolBar';\n\n  static contextType = TableContext;\n\n  static defaultProps = {\n    prefixCls: getProPrefixCls('table'),\n    queryFieldsLimit: 1,\n    pagination: null,\n  };\n\n  modal;\n\n  @autobind\n  handleFieldEnter() {\n    this.handleQuery();\n    if (this.modal) {\n      this.modal.close();\n    }\n  }\n\n  @autobind\n  handleQueryReset() {\n    const { queryDataSet } = this.props;\n    if (queryDataSet) {\n      const { current } = queryDataSet;\n      if (current) {\n        current.reset();\n      }\n      this.handleQuery();\n    }\n  }\n\n  @autobind\n  handleQuery() {\n    const { dataSet } = this.props;\n    dataSet.query();\n  }\n\n  componentWillUnmount() {\n    if (this.modal) {\n      this.modal.close(true);\n    }\n  }\n\n  getQueryBar(): ReactNode {\n    const { prefixCls, queryFieldsLimit, queryFields, queryDataSet } = this.props;\n    if (queryDataSet && queryFields.length) {\n      const currentFields = this.createFields(\n        queryFields.slice(0, queryFieldsLimit),\n        queryDataSet,\n        false,\n      );\n      const moreFields = this.createFields(queryFields.slice(queryFieldsLimit), queryDataSet, true);\n      let more;\n      let dirtyInfo;\n      if (moreFields.length) {\n        more = this.getMoreButton(moreFields);\n        dirtyInfo = this.getDirtyInfo(queryDataSet.current, moreFields);\n      }\n      return (\n        <span className={`${prefixCls}-query-bar`}>\n          {dirtyInfo}\n          {currentFields}\n          <Button color={ButtonColor.primary} onClick={this.handleQuery}>\n            {$l('Table', 'query_button')}\n          </Button>\n          {more}\n        </span>\n      );\n    }\n  }\n\n  getDirtyInfo(current: Record | undefined, moreFields: ReactElement<any>[]) {\n    if (\n      current &&\n      moreFields.some(element => {\n        const { name } = element.props;\n        const field = current.getField(name);\n        return field ? field.dirty : false;\n      })\n    ) {\n      const { prefixCls } = this.props;\n      return (\n        <span className={`${prefixCls}-query-bar-dirty-info`}>\n          <Icon type=\"info\" />\n          <span>{$l('Table', 'dirty_info')}</span>\n          <a onClick={this.handleQueryReset}>{$l('Table', 'restore')}</a>\n        </span>\n      );\n    }\n  }\n\n  getMoreButton(moreFields: ReactElement<any>[]) {\n    return (\n      <Button\n        color={ButtonColor.primary}\n        funcType={FuncType.flat}\n        onClick={() => this.openMore(moreFields)}\n      >\n        {$l('Table', 'advanced_search')}\n      </Button>\n    );\n  }\n\n  createFields(elements: ReactElement<any>[], dataSet: DataSet, isMore: boolean) {\n    return elements.map((element, index) => {\n      const { name } = element.props;\n      const props: any = {\n        autoFocus: isMore && index === 0,\n        onEnterDown: this.handleFieldEnter,\n        style: isMore ? undefined : { width: pxToRem(130) },\n      };\n      const field = dataSet.getField(name);\n      if (field) {\n        const label = field.get('label');\n        if (label) {\n          if (isMore) {\n            props.label = label;\n          } else {\n            props.placeholder = label;\n          }\n        }\n      }\n      return cloneElement(element, props);\n    });\n  }\n\n  openMore(children: ReactNode) {\n    this.modal = Modal.open({\n      title: $l('Table', 'advanced_search'),\n      children: <Form>{children}</Form>,\n      okText: $l('Table', 'query_button'),\n      onOk: this.handleQuery,\n      style: {\n        width: pxToRem(400),\n      },\n      drawer: true,\n    });\n  }\n\n  render() {\n    const { prefixCls, pagination, buttons } = this.props;\n    return [\n      <TableButtons key=\"toolbar\" prefixCls={prefixCls} buttons={buttons}>\n        {this.getQueryBar()}\n      </TableButtons>,\n      pagination,\n    ];\n  }\n}\n"]}