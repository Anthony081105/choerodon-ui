3da60e7a9bc17018fd4b3bc62e5334d9
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.SubMenu = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectSpread3 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _react = _interopRequireWildcard(require("react"));

var _reactDom = require("react-dom");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _noop = _interopRequireDefault(require("lodash/noop"));

var _classnames = _interopRequireDefault(require("classnames"));

var _miniStore = require("mini-store");

var _trigger = _interopRequireDefault(require("../trigger"));

var _KeyCode = _interopRequireDefault(require("../../_util/KeyCode"));

var _SubPopupMenu = _interopRequireDefault(require("./SubPopupMenu"));

var _placements = _interopRequireDefault(require("./placements"));

var _animate = _interopRequireDefault(require("../../animate"));

var _util = require("./util");

function _createSuper(Derived) {
  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  return function () {
    var Super = (0, _getPrototypeOf2["default"])(Derived),
        result;

    if (isNativeReflectConstruct()) {
      var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return (0, _possibleConstructorReturn2["default"])(this, result);
  };
}

var guid = 0;
var popupPlacementMap = {
  horizontal: 'bottomLeft',
  vertical: 'rightTop',
  'vertical-left': 'rightTop',
  'vertical-right': 'leftTop'
};

var updateDefaultActiveFirst = function updateDefaultActiveFirst(store, eventKey, defaultActiveFirst) {
  var menuId = (0, _util.getMenuIdFromSubMenuEventKey)(eventKey);
  var state = store.getState();
  store.setState({
    defaultActiveFirst: (0, _objectSpread3["default"])({}, state.defaultActiveFirst, (0, _defineProperty2["default"])({}, menuId, defaultActiveFirst))
  });
};

var SubMenu =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(SubMenu, _Component);

  var _super = _createSuper(SubMenu);

  function SubMenu(_props) {
    var _this;

    (0, _classCallCheck2["default"])(this, SubMenu);
    _this = _super.call(this, _props);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onDestroy", function (key) {
      _this.props.onDestroy(key);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onKeyDown", function (e) {
      var keyCode = e.keyCode;
      var menu = _this.menuInstance;
      var _this$props = _this.props,
          isOpen = _this$props.isOpen,
          store = _this$props.store;

      if (keyCode === _KeyCode["default"].ENTER) {
        _this.onTitleClick(e);

        updateDefaultActiveFirst(store, _this.props.eventKey, true);
        return true;
      }

      if (keyCode === _KeyCode["default"].RIGHT) {
        if (isOpen) {
          menu.onKeyDown(e);
        } else {
          _this.triggerOpenChange(true); // need to update current menu's defaultActiveFirst value


          updateDefaultActiveFirst(store, _this.props.eventKey, true);
        }

        return true;
      }

      if (keyCode === _KeyCode["default"].LEFT) {
        var handled;

        if (isOpen) {
          handled = menu.onKeyDown(e);
        } else {
          return undefined;
        }

        if (!handled) {
          _this.triggerOpenChange(false);

          handled = true;
        }

        return handled;
      }

      if (isOpen && (keyCode === _KeyCode["default"].UP || keyCode === _KeyCode["default"].DOWN)) {
        return menu.onKeyDown(e);
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onOpenChange", function (e) {
      _this.props.onOpenChange(e);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onPopupVisibleChange", function (visible) {
      _this.triggerOpenChange(visible, visible ? 'mouseenter' : 'mouseleave');
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onMouseEnter", function (e) {
      var _this$props2 = _this.props,
          key = _this$props2.eventKey,
          onMouseEnter = _this$props2.onMouseEnter,
          store = _this$props2.store;
      updateDefaultActiveFirst(store, _this.props.eventKey, false);
      onMouseEnter({
        key: key,
        domEvent: e
      });
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onMouseLeave", function (e) {
      var _this$props3 = _this.props,
          parentMenu = _this$props3.parentMenu,
          eventKey = _this$props3.eventKey,
          onMouseLeave = _this$props3.onMouseLeave;
      parentMenu.subMenuInstance = (0, _assertThisInitialized2["default"])(_this);
      onMouseLeave({
        key: eventKey,
        domEvent: e
      });
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onTitleMouseEnter", function (domEvent) {
      var _this$props4 = _this.props,
          key = _this$props4.eventKey,
          onItemHover = _this$props4.onItemHover,
          onTitleMouseEnter = _this$props4.onTitleMouseEnter;
      onItemHover({
        key: key,
        hover: true
      });
      onTitleMouseEnter({
        key: key,
        domEvent: domEvent
      });
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onTitleMouseLeave", function (e) {
      var _this$props5 = _this.props,
          parentMenu = _this$props5.parentMenu,
          eventKey = _this$props5.eventKey,
          onItemHover = _this$props5.onItemHover,
          onTitleMouseLeave = _this$props5.onTitleMouseLeave;
      parentMenu.subMenuInstance = (0, _assertThisInitialized2["default"])(_this);
      onItemHover({
        key: eventKey,
        hover: false
      });
      onTitleMouseLeave({
        key: eventKey,
        domEvent: e
      });
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onTitleClick", function (e) {
      var _assertThisInitialize = (0, _assertThisInitialized2["default"])(_this),
          props = _assertThisInitialize.props;

      props.onTitleClick({
        key: props.eventKey,
        domEvent: e
      });

      if (props.triggerSubMenuAction === 'hover') {
        return;
      }

      _this.triggerOpenChange(!props.isOpen, 'click');

      updateDefaultActiveFirst(props.store, _this.props.eventKey, false);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onSubMenuClick", function (info) {
      // in the case of overflowed submenu
      // onClick is not copied over
      if (typeof _this.props.onClick === 'function') {
        _this.props.onClick(_this.addKeyPath(info));
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onSelect", function (info) {
      _this.props.onSelect(info);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onDeselect", function (info) {
      _this.props.onDeselect(info);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "getPrefixCls", function () {
      return "".concat(_this.props.rootPrefixCls, "-submenu");
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "getActiveClassName", function () {
      return "".concat(_this.getPrefixCls(), "-active");
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "getDisabledClassName", function () {
      return "".concat(_this.getPrefixCls(), "-disabled");
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "getSelectedClassName", function () {
      return "".concat(_this.getPrefixCls(), "-selected");
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "getOpenClassName", function () {
      return "".concat(_this.props.rootPrefixCls, "-submenu-open");
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "saveMenuInstance", function (c) {
      // children menu instance
      _this.menuInstance = c;
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "addKeyPath", function (info) {
      return (0, _objectSpread3["default"])({}, info, {
        keyPath: (info.keyPath || []).concat(_this.props.eventKey)
      });
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "triggerOpenChange", function (open, type) {
      var key = _this.props.eventKey;

      var openChange = function openChange() {
        _this.onOpenChange({
          key: key,
          item: (0, _assertThisInitialized2["default"])(_this),
          trigger: type,
          open: open
        });
      };

      if (type === 'mouseenter') {
        // make sure mouseenter happen after other menu item's mouseleave
        _this.mouseenterTimeout = setTimeout(function () {
          openChange();
        }, 0);
      } else {
        openChange();
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "isChildrenSelected", function () {
      var ret = {
        find: false
      };
      (0, _util.loopMenuItemRecursively)(_this.props.children, _this.props.selectedKeys, ret);
      return ret.find;
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "isOpen", function () {
      return _this.props.openKeys.indexOf(_this.props.eventKey) !== -1;
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "adjustWidth", function () {
      /* istanbul ignore if */
      if (!_this.subMenuTitle || !_this.menuInstance) {
        return;
      }

      var popupMenu = (0, _reactDom.findDOMNode)(_this.menuInstance);

      if (popupMenu.offsetWidth >= _this.subMenuTitle.offsetWidth) {
        return;
      }
      /* istanbul ignore next */


      popupMenu.style.minWidth = "".concat(_this.subMenuTitle.offsetWidth, "px");
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "saveSubMenuTitle", function (subMenuTitle) {
      _this.subMenuTitle = subMenuTitle;
    });
    var _store = _props.store;
    var _eventKey = _props.eventKey;

    var defaultActiveFirst = _store.getState().defaultActiveFirst;

    _this.isRootMenu = false;
    var value = false;

    if (defaultActiveFirst) {
      value = defaultActiveFirst[_eventKey];
    }

    updateDefaultActiveFirst(_store, _eventKey, value);
    return _this;
  }

  (0, _createClass2["default"])(SubMenu, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.componentDidUpdate();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      var _this2 = this;

      var _this$props6 = this.props,
          mode = _this$props6.mode,
          parentMenu = _this$props6.parentMenu,
          manualRef = _this$props6.manualRef; // invoke customized ref to expose component to mixin

      if (manualRef) {
        manualRef(this);
      }

      if (mode !== 'horizontal' || !parentMenu.isRootMenu || !this.props.isOpen) {
        return;
      }

      this.minWidthTimeout = setTimeout(function () {
        return _this2.adjustWidth();
      }, 0);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var _this$props7 = this.props,
          onDestroy = _this$props7.onDestroy,
          eventKey = _this$props7.eventKey;

      if (onDestroy) {
        onDestroy(eventKey);
      }
      /* istanbul ignore if */


      if (this.minWidthTimeout) {
        clearTimeout(this.minWidthTimeout);
      }
      /* istanbul ignore if */


      if (this.mouseenterTimeout) {
        clearTimeout(this.mouseenterTimeout);
      }
    }
  }, {
    key: "renderChildren",
    value: function renderChildren(children) {
      var props = this.props;
      var baseProps = {
        mode: props.mode === 'horizontal' ? 'vertical' : props.mode,
        hidden: !this.props.isOpen,
        level: props.level + 1,
        inlineIndent: props.inlineIndent,
        focusable: false,
        onClick: this.onSubMenuClick,
        onSelect: this.onSelect,
        onDeselect: this.onDeselect,
        onDestroy: this.onDestroy,
        selectedKeys: props.selectedKeys,
        eventKey: "".concat(props.eventKey, "-menu-"),
        openKeys: props.openKeys,
        openTransitionName: props.openTransitionName,
        openAnimation: props.openAnimation,
        onOpenChange: this.onOpenChange,
        subMenuOpenDelay: props.subMenuOpenDelay,
        parentMenu: this,
        subMenuCloseDelay: props.subMenuCloseDelay,
        forceSubMenuRender: props.forceSubMenuRender,
        triggerSubMenuAction: props.triggerSubMenuAction,
        builtinPlacements: props.builtinPlacements,
        defaultActiveFirst: props.store.getState().defaultActiveFirst[(0, _util.getMenuIdFromSubMenuEventKey)(props.eventKey)],
        multiple: props.multiple,
        prefixCls: props.rootPrefixCls,
        id: this._menuId,
        manualRef: this.saveMenuInstance,
        itemIcon: props.itemIcon,
        expandIcon: props.expandIcon
      };
      var haveRendered = this.haveRendered;
      this.haveRendered = true;
      this.haveOpened = this.haveOpened || !baseProps.hidden || baseProps.forceSubMenuRender; // never rendered not planning to, don't render

      if (!this.haveOpened) {
        return _react["default"].createElement("div", null);
      } // don't show transition on first rendering (no animation for opened menu)
      // show appear transition if it's hidden (not sure why)
      // show appear transition if it's not inline mode


      var transitionAppear = haveRendered || baseProps.hidden || !baseProps.mode === 'inline';
      baseProps.className = " ".concat(baseProps.prefixCls, "-sub");
      var animProps = {};

      if (baseProps.openTransitionName) {
        animProps.transitionName = baseProps.openTransitionName;
      } else if ((0, _typeof2["default"])(baseProps.openAnimation) === 'object') {
        animProps.animation = (0, _objectSpread3["default"])({}, baseProps.openAnimation);

        if (!transitionAppear) {
          delete animProps.animation.appear;
        }
      }

      return _react["default"].createElement(_animate["default"], (0, _extends2["default"])({}, animProps, {
        hiddenProp: "hidden",
        component: "",
        transitionAppear: transitionAppear
      }), _react["default"].createElement(_SubPopupMenu["default"], (0, _extends2["default"])({}, baseProps, {
        id: this._menuId
      }), children));
    }
  }, {
    key: "render",
    value: function render() {
      var _classNames;

      var props = (0, _objectSpread3["default"])({}, this.props);
      var isOpen = props.isOpen;
      var prefixCls = this.getPrefixCls();
      var isInlineMode = props.mode === 'inline';
      var className = (0, _classnames["default"])(prefixCls, "".concat(prefixCls, "-").concat(props.mode), (_classNames = {}, (0, _defineProperty2["default"])(_classNames, props.className, !!props.className), (0, _defineProperty2["default"])(_classNames, this.getOpenClassName(), isOpen), (0, _defineProperty2["default"])(_classNames, this.getActiveClassName(), props.active || isOpen && !isInlineMode), (0, _defineProperty2["default"])(_classNames, this.getDisabledClassName(), props.disabled), (0, _defineProperty2["default"])(_classNames, this.getSelectedClassName(), this.isChildrenSelected()), _classNames));

      if (!this._menuId) {
        if (props.eventKey) {
          this._menuId = "".concat(props.eventKey, "$Menu");
        } else {
          this._menuId = "$__$".concat(++guid, "$Menu");
        }
      }

      var mouseEvents = {};
      var titleClickEvents = {};
      var titleMouseEvents = {};

      if (!props.disabled) {
        mouseEvents = {
          onMouseLeave: this.onMouseLeave,
          onMouseEnter: this.onMouseEnter
        }; // only works in title, not outer li

        titleClickEvents = {
          onClick: this.onTitleClick
        };
        titleMouseEvents = {
          onMouseEnter: this.onTitleMouseEnter,
          onMouseLeave: this.onTitleMouseLeave
        };
      }

      var style = {};

      if (isInlineMode) {
        style.paddingLeft = props.inlineIndent * props.level;
      }

      var ariaOwns = {}; // only set aria-owns when menu is open
      // otherwise it would be an invalid aria-owns value
      // since corresponding node cannot be found

      if (this.props.isOpen) {
        ariaOwns = {
          'aria-owns': this._menuId
        };
      } // expand custom icon should NOT be displayed in menu with horizontal mode.


      var icon = null;

      if (props.mode !== 'horizontal') {
        icon = this.props.expandIcon; // ReactNode

        if (typeof this.props.expandIcon === 'function') {
          icon = (0, _react.createElement)(this.props.expandIcon, (0, _objectSpread3["default"])({}, this.props));
        }
      }

      var title = _react["default"].createElement("div", (0, _extends2["default"])({
        ref: this.saveSubMenuTitle,
        style: style,
        className: "".concat(prefixCls, "-title")
      }, titleMouseEvents, titleClickEvents, {
        "aria-expanded": isOpen
      }, ariaOwns, {
        "aria-haspopup": "true",
        title: typeof props.title === 'string' ? props.title : undefined
      }), props.title, icon || _react["default"].createElement("i", {
        className: "".concat(prefixCls, "-arrow")
      }));

      var children = this.renderChildren(props.children);
      var getPopupContainer = props.parentMenu.isRootMenu ? props.parentMenu.props.getPopupContainer : function (triggerNode) {
        return triggerNode.parentNode;
      };
      var popupPlacement = popupPlacementMap[props.mode];
      var popupAlign = props.popupOffset ? {
        offset: props.popupOffset
      } : {};
      var popupClassName = props.mode === 'inline' ? '' : props.popupClassName;
      var disabled = props.disabled,
          triggerSubMenuAction = props.triggerSubMenuAction,
          subMenuOpenDelay = props.subMenuOpenDelay,
          forceSubMenuRender = props.forceSubMenuRender,
          subMenuCloseDelay = props.subMenuCloseDelay,
          builtinPlacements = props.builtinPlacements;

      _util.menuAllProps.forEach(function (key) {
        return delete props[key];
      }); // Set onClick to null, to ignore propagated onClick event


      delete props.onClick;
      return _react["default"].createElement("li", (0, _extends2["default"])({}, props, mouseEvents, {
        className: className,
        role: "menuitem"
      }), isInlineMode && title, isInlineMode && children, !isInlineMode && _react["default"].createElement(_trigger["default"], {
        prefixCls: prefixCls,
        popupClassName: "".concat(prefixCls, "-popup ").concat(popupClassName),
        getPopupContainer: getPopupContainer,
        builtinPlacements: (0, _extends2["default"])({}, _placements["default"], builtinPlacements),
        popupPlacement: popupPlacement,
        popupVisible: isOpen,
        popupAlign: popupAlign,
        popup: children,
        action: disabled ? [] : [triggerSubMenuAction],
        mouseEnterDelay: subMenuOpenDelay,
        mouseLeaveDelay: subMenuCloseDelay,
        onPopupVisibleChange: this.onPopupVisibleChange,
        forceRender: forceSubMenuRender
      }, title));
    }
  }]);
  return SubMenu;
}(_react.Component);

exports.SubMenu = SubMenu;
(0, _defineProperty2["default"])(SubMenu, "propTypes", {
  parentMenu: _propTypes["default"].object,
  title: _propTypes["default"].node,
  children: _propTypes["default"].any,
  selectedKeys: _propTypes["default"].array,
  openKeys: _propTypes["default"].array,
  onClick: _propTypes["default"].func,
  onOpenChange: _propTypes["default"].func,
  rootPrefixCls: _propTypes["default"].string,
  eventKey: _propTypes["default"].string,
  multiple: _propTypes["default"].bool,
  active: _propTypes["default"].bool,
  // TODO: remove
  onItemHover: _propTypes["default"].func,
  onSelect: _propTypes["default"].func,
  triggerSubMenuAction: _propTypes["default"].string,
  onDeselect: _propTypes["default"].func,
  onDestroy: _propTypes["default"].func,
  onMouseEnter: _propTypes["default"].func,
  onMouseLeave: _propTypes["default"].func,
  onTitleMouseEnter: _propTypes["default"].func,
  onTitleMouseLeave: _propTypes["default"].func,
  onTitleClick: _propTypes["default"].func,
  popupOffset: _propTypes["default"].array,
  isOpen: _propTypes["default"].bool,
  store: _propTypes["default"].object,
  mode: _propTypes["default"].oneOf(['horizontal', 'vertical', 'vertical-left', 'vertical-right', 'inline']),
  manualRef: _propTypes["default"].func,
  itemIcon: _propTypes["default"].oneOfType([_propTypes["default"].func, _propTypes["default"].node]),
  expandIcon: _propTypes["default"].oneOfType([_propTypes["default"].func, _propTypes["default"].node])
});
(0, _defineProperty2["default"])(SubMenu, "defaultProps", {
  onMouseEnter: _noop["default"],
  onMouseLeave: _noop["default"],
  onTitleMouseEnter: _noop["default"],
  onTitleMouseLeave: _noop["default"],
  onTitleClick: _noop["default"],
  manualRef: _noop["default"],
  mode: 'vertical',
  title: ''
});
var connected = (0, _miniStore.connect)(function (_ref, _ref2) {
  var openKeys = _ref.openKeys,
      activeKey = _ref.activeKey,
      selectedKeys = _ref.selectedKeys;
  var eventKey = _ref2.eventKey,
      subMenuKey = _ref2.subMenuKey;
  return {
    isOpen: openKeys.indexOf(eventKey) > -1,
    active: activeKey[subMenuKey] === eventKey,
    selectedKeys: selectedKeys
  };
})(SubMenu);
connected.isSubMenu = true;
var _default = connected;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1lbnUvU3ViTWVudS5qc3giXSwibmFtZXMiOlsiZ3VpZCIsInBvcHVwUGxhY2VtZW50TWFwIiwiaG9yaXpvbnRhbCIsInZlcnRpY2FsIiwidXBkYXRlRGVmYXVsdEFjdGl2ZUZpcnN0IiwibWVudUlkIiwic3RhdGUiLCJzdG9yZSIsImRlZmF1bHRBY3RpdmVGaXJzdCIsIlN1Yk1lbnUiLCJDb21wb25lbnQiLCJwYXJlbnRNZW51IiwiUHJvcFR5cGVzIiwidGl0bGUiLCJjaGlsZHJlbiIsInNlbGVjdGVkS2V5cyIsIm9wZW5LZXlzIiwib25DbGljayIsIm9uT3BlbkNoYW5nZSIsInJvb3RQcmVmaXhDbHMiLCJldmVudEtleSIsIm11bHRpcGxlIiwiYWN0aXZlIiwib25JdGVtSG92ZXIiLCJvblNlbGVjdCIsInRyaWdnZXJTdWJNZW51QWN0aW9uIiwib25EZXNlbGVjdCIsIm9uRGVzdHJveSIsIm9uTW91c2VFbnRlciIsIm9uTW91c2VMZWF2ZSIsIm9uVGl0bGVNb3VzZUVudGVyIiwib25UaXRsZU1vdXNlTGVhdmUiLCJvblRpdGxlQ2xpY2siLCJwb3B1cE9mZnNldCIsImlzT3BlbiIsIm1vZGUiLCJtYW51YWxSZWYiLCJpdGVtSWNvbiIsImV4cGFuZEljb24iLCJub29wIiwicHJvcHMiLCJ2YWx1ZSIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJrZXlDb2RlIiwiZSIsIm1lbnUiLCJLZXlDb2RlIiwiaGFuZGxlZCIsInZpc2libGUiLCJrZXkiLCJkb21FdmVudCIsImhvdmVyIiwia2V5UGF0aCIsImluZm8iLCJvcGVuQ2hhbmdlIiwiaXRlbSIsInRyaWdnZXIiLCJvcGVuIiwidHlwZSIsInJldCIsImZpbmQiLCJwb3B1cE1lbnUiLCJiYXNlUHJvcHMiLCJoaWRkZW4iLCJsZXZlbCIsImlubGluZUluZGVudCIsImZvY3VzYWJsZSIsIm9wZW5UcmFuc2l0aW9uTmFtZSIsIm9wZW5BbmltYXRpb24iLCJzdWJNZW51T3BlbkRlbGF5Iiwic3ViTWVudUNsb3NlRGVsYXkiLCJmb3JjZVN1Yk1lbnVSZW5kZXIiLCJidWlsdGluUGxhY2VtZW50cyIsInByZWZpeENscyIsImlkIiwiaGF2ZVJlbmRlcmVkIiwidHJhbnNpdGlvbkFwcGVhciIsImFuaW1Qcm9wcyIsIl9tZW51SWQiLCJpc0lubGluZU1vZGUiLCJjbGFzc05hbWUiLCJtb3VzZUV2ZW50cyIsInRpdGxlQ2xpY2tFdmVudHMiLCJ0aXRsZU1vdXNlRXZlbnRzIiwic3R5bGUiLCJhcmlhT3ducyIsImljb24iLCJ1bmRlZmluZWQiLCJnZXRQb3B1cENvbnRhaW5lciIsInRyaWdnZXJOb2RlIiwicG9wdXBQbGFjZW1lbnQiLCJwb3B1cEFsaWduIiwib2Zmc2V0IiwicG9wdXBDbGFzc05hbWUiLCJkaXNhYmxlZCIsIm1lbnVBbGxQcm9wcyIsInBsYWNlbWVudHMiLCJjb25uZWN0ZWQiLCJhY3RpdmVLZXkiLCJzdWJNZW51S2V5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQSxNQUFBLEdBQUEsdUJBQUEsQ0FBQSxPQUFBLENBQUEsT0FBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxTQUFBLEdBQUEsT0FBQSxDQUFBLFdBQUEsQ0FBQTs7QUFDQSxJQUFBLFVBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUEsQ0FBQSxZQUFBLENBQUEsQ0FBQTs7QUFDQSxJQUFBLEtBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUEsQ0FBQSxhQUFBLENBQUEsQ0FBQTs7QUFDQSxJQUFBLFdBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUEsQ0FBQSxZQUFBLENBQUEsQ0FBQTs7QUFDQSxJQUFBLFVBQUEsR0FBQSxPQUFBLENBQUEsWUFBQSxDQUFBOztBQUNBLElBQUEsUUFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLFlBQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsUUFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLHFCQUFBLENBQUEsQ0FBQTs7QUFDQSxJQUFBLGFBQUEsR0FBQSxzQkFB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LEVBQUFBLEtBQUssRUFBRTtBQVJhLEM7QUFpZXhCLElBQU1xRixTQUFTLEdBQUcsQ0FBQSxHQUFBLFVBQUEsQ0FBQSxPQUFBLEVBQVEsVUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBO0FBQUEsTUFBR2xGLFFBQUgsR0FBQSxJQUFBLENBQUEsUUFBQTtBQUFBLE1BQWFtRixTQUFiLEdBQUEsSUFBQSxDQUFBLFNBQUE7QUFBQSxNQUF3QnBGLFlBQXhCLEdBQUEsSUFBQSxDQUFBLFlBQUE7QUFBQSxNQUEwQ0ssUUFBMUMsR0FBQSxLQUFBLENBQUEsUUFBQTtBQUFBLE1BQW9EZ0YsVUFBcEQsR0FBQSxLQUFBLENBQUEsVUFBQTtBQUFBLFNBQXNFO0FBQzlGbEUsSUFBQUEsTUFBTSxFQUFFbEIsUUFBUSxDQUFSQSxPQUFBQSxDQUFBQSxRQUFBQSxJQUE2QixDQUR5RCxDQUFBO0FBRTlGTSxJQUFBQSxNQUFNLEVBQUU2RSxTQUFTLENBQVRBLFVBQVMsQ0FBVEEsS0FGc0YsUUFBQTtBQUc5RnBGLElBQUFBLFlBQVksRUFBWkE7QUFIOEYsR0FBdEU7QUFBUixDQUFBLEVBQWxCLE9BQWtCLENBQWxCO0FBTUFtRixTQUFTLENBQVRBLFNBQUFBLEdBQUFBLElBQUFBO2VBRWVBLFMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBjcmVhdGVFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZmluZERPTU5vZGUgfSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBub29wIGZyb20gJ2xvZGFzaC9ub29wJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ21pbmktc3RvcmUnO1xuaW1wb3J0IFRyaWdnZXIgZnJvbSAnLi4vdHJpZ2dlcic7XG5pbXBvcnQgS2V5Q29kZSBmcm9tICcuLi8uLi9fdXRpbC9LZXlDb2RlJztcbmltcG9ydCBTdWJQb3B1cE1lbnUgZnJvbSAnLi9TdWJQb3B1cE1lbnUnO1xuaW1wb3J0IHBsYWNlbWVudHMgZnJvbSAnLi9wbGFjZW1lbnRzJztcbmltcG9ydCBBbmltYXRlIGZyb20gJy4uLy4uL2FuaW1hdGUnO1xuaW1wb3J0IHsgZ2V0TWVudUlkRnJvbVN1Yk1lbnVFdmVudEtleSwgbG9vcE1lbnVJdGVtUmVjdXJzaXZlbHksIG1lbnVBbGxQcm9wcywgfSBmcm9tICcuL3V0aWwnO1xuXG5sZXQgZ3VpZCA9IDA7XG5cbmNvbnN0IHBvcHVwUGxhY2VtZW50TWFwID0ge1xuICBob3Jpem9udGFsOiAnYm90dG9tTGVmdCcsXG4gIHZlcnRpY2FsOiAncmlnaHRUb3AnLFxuICAndmVydGljYWwtbGVmdCc6ICdyaWdodFRvcCcsXG4gICd2ZXJ0aWNhbC1yaWdodCc6ICdsZWZ0VG9wJyxcbn07XG5cbmNvbnN0IHVwZGF0ZURlZmF1bHRBY3RpdmVGaXJzdCA9IChzdG9yZSwgZXZlbnRLZXksIGRlZmF1bHRBY3RpdmVGaXJzdCkgPT4ge1xuICBjb25zdCBtZW51SWQgPSBnZXRNZW51SWRGcm9tU3ViTWVudUV2ZW50S2V5KGV2ZW50S2V5KTtcbiAgY29uc3Qgc3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICBzdG9yZS5zZXRTdGF0ZSh7XG4gICAgZGVmYXVsdEFjdGl2ZUZpcnN0OiB7XG4gICAgICAuLi5zdGF0ZS5kZWZhdWx0QWN0aXZlRmlyc3QsXG4gICAgICBbbWVudUlkXTogZGVmYXVsdEFjdGl2ZUZpcnN0LFxuICAgIH0sXG4gIH0pO1xufTtcblxuZXhwb3J0IGNsYXNzIFN1Yk1lbnUgZXh0ZW5kcyBDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIHBhcmVudE1lbnU6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgdGl0bGU6IFByb3BUeXBlcy5ub2RlLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMuYW55LFxuICAgIHNlbGVjdGVkS2V5czogUHJvcFR5cGVzLmFycmF5LFxuICAgIG9wZW5LZXlzOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25PcGVuQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICByb290UHJlZml4Q2xzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGV2ZW50S2V5OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG11bHRpcGxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBhY3RpdmU6IFByb3BUeXBlcy5ib29sLCAvLyBUT0RPOiByZW1vdmVcbiAgICBvbkl0ZW1Ib3ZlcjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25TZWxlY3Q6IFByb3BUeXBlcy5mdW5jLFxuICAgIHRyaWdnZXJTdWJNZW51QWN0aW9uOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG9uRGVzZWxlY3Q6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9uRGVzdHJveTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25Nb3VzZUVudGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBvbk1vdXNlTGVhdmU6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9uVGl0bGVNb3VzZUVudGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBvblRpdGxlTW91c2VMZWF2ZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25UaXRsZUNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBwb3B1cE9mZnNldDogUHJvcFR5cGVzLmFycmF5LFxuICAgIGlzT3BlbjogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3RvcmU6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgbW9kZTogUHJvcFR5cGVzLm9uZU9mKFsnaG9yaXpvbnRhbCcsICd2ZXJ0aWNhbCcsICd2ZXJ0aWNhbC1sZWZ0JywgJ3ZlcnRpY2FsLXJpZ2h0JywgJ2lubGluZSddKSxcbiAgICBtYW51YWxSZWY6IFByb3BUeXBlcy5mdW5jLFxuICAgIGl0ZW1JY29uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm5vZGVdKSxcbiAgICBleHBhbmRJY29uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm5vZGVdKSxcbiAgfTtcblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIG9uTW91c2VFbnRlcjogbm9vcCxcbiAgICBvbk1vdXNlTGVhdmU6IG5vb3AsXG4gICAgb25UaXRsZU1vdXNlRW50ZXI6IG5vb3AsXG4gICAgb25UaXRsZU1vdXNlTGVhdmU6IG5vb3AsXG4gICAgb25UaXRsZUNsaWNrOiBub29wLFxuICAgIG1hbnVhbFJlZjogbm9vcCxcbiAgICBtb2RlOiAndmVydGljYWwnLFxuICAgIHRpdGxlOiAnJyxcbiAgfTtcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICBjb25zdCBzdG9yZSA9IHByb3BzLnN0b3JlO1xuICAgIGNvbnN0IGV2ZW50S2V5ID0gcHJvcHMuZXZlbnRLZXk7XG4gICAgY29uc3QgZGVmYXVsdEFjdGl2ZUZpcnN0ID0gc3RvcmUuZ2V0U3RhdGUoKS5kZWZhdWx0QWN0aXZlRmlyc3Q7XG5cbiAgICB0aGlzLmlzUm9vdE1lbnUgPSBmYWxzZTtcblxuICAgIGxldCB2YWx1ZSA9IGZhbHNlO1xuXG4gICAgaWYgKGRlZmF1bHRBY3RpdmVGaXJzdCkge1xuICAgICAgdmFsdWUgPSBkZWZhdWx0QWN0aXZlRmlyc3RbZXZlbnRLZXldO1xuICAgIH1cblxuICAgIHVwZGF0ZURlZmF1bHRBY3RpdmVGaXJzdChzdG9yZSwgZXZlbnRLZXksIHZhbHVlKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuY29tcG9uZW50RGlkVXBkYXRlKCk7XG4gIH1cblxuICBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgY29uc3QgeyBtb2RlLCBwYXJlbnRNZW51LCBtYW51YWxSZWYgfSA9IHRoaXMucHJvcHM7XG5cbiAgICAvLyBpbnZva2UgY3VzdG9taXplZCByZWYgdG8gZXhwb3NlIGNvbXBvbmVudCB0byBtaXhpblxuICAgIGlmIChtYW51YWxSZWYpIHtcbiAgICAgIG1hbnVhbFJlZih0aGlzKTtcbiAgICB9XG5cbiAgICBpZiAobW9kZSAhPT0gJ2hvcml6b250YWwnIHx8ICFwYXJlbnRNZW51LmlzUm9vdE1lbnUgfHwgIXRoaXMucHJvcHMuaXNPcGVuKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5taW5XaWR0aFRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHRoaXMuYWRqdXN0V2lkdGgoKSwgMCk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBjb25zdCB7IG9uRGVzdHJveSwgZXZlbnRLZXkgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKG9uRGVzdHJveSkge1xuICAgICAgb25EZXN0cm95KGV2ZW50S2V5KTtcbiAgICB9XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAodGhpcy5taW5XaWR0aFRpbWVvdXQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLm1pbldpZHRoVGltZW91dCk7XG4gICAgfVxuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHRoaXMubW91c2VlbnRlclRpbWVvdXQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLm1vdXNlZW50ZXJUaW1lb3V0KTtcbiAgICB9XG4gIH1cblxuICBvbkRlc3Ryb3kgPSAoa2V5KSA9PiB7XG4gICAgdGhpcy5wcm9wcy5vbkRlc3Ryb3koa2V5KTtcbiAgfTtcblxuICBvbktleURvd24gPSAoZSkgPT4ge1xuICAgIGNvbnN0IGtleUNvZGUgPSBlLmtleUNvZGU7XG4gICAgY29uc3QgbWVudSA9IHRoaXMubWVudUluc3RhbmNlO1xuICAgIGNvbnN0IHtcbiAgICAgIGlzT3BlbixcbiAgICAgIHN0b3JlLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgaWYgKGtleUNvZGUgPT09IEtleUNvZGUuRU5URVIpIHtcbiAgICAgIHRoaXMub25UaXRsZUNsaWNrKGUpO1xuICAgICAgdXBkYXRlRGVmYXVsdEFjdGl2ZUZpcnN0KHN0b3JlLCB0aGlzLnByb3BzLmV2ZW50S2V5LCB0cnVlKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChrZXlDb2RlID09PSBLZXlDb2RlLlJJR0hUKSB7XG4gICAgICBpZiAoaXNPcGVuKSB7XG4gICAgICAgIG1lbnUub25LZXlEb3duKGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy50cmlnZ2VyT3BlbkNoYW5nZSh0cnVlKTtcbiAgICAgICAgLy8gbmVlZCB0byB1cGRhdGUgY3VycmVudCBtZW51J3MgZGVmYXVsdEFjdGl2ZUZpcnN0IHZhbHVlXG4gICAgICAgIHVwZGF0ZURlZmF1bHRBY3RpdmVGaXJzdChzdG9yZSwgdGhpcy5wcm9wcy5ldmVudEtleSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGtleUNvZGUgPT09IEtleUNvZGUuTEVGVCkge1xuICAgICAgbGV0IGhhbmRsZWQ7XG4gICAgICBpZiAoaXNPcGVuKSB7XG4gICAgICAgIGhhbmRsZWQgPSBtZW51Lm9uS2V5RG93bihlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAoIWhhbmRsZWQpIHtcbiAgICAgICAgdGhpcy50cmlnZ2VyT3BlbkNoYW5nZShmYWxzZSk7XG4gICAgICAgIGhhbmRsZWQgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhhbmRsZWQ7XG4gICAgfVxuXG4gICAgaWYgKGlzT3BlbiAmJiAoa2V5Q29kZSA9PT0gS2V5Q29kZS5VUCB8fCBrZXlDb2RlID09PSBLZXlDb2RlLkRPV04pKSB7XG4gICAgICByZXR1cm4gbWVudS5vbktleURvd24oZSk7XG4gICAgfVxuICB9O1xuXG4gIG9uT3BlbkNoYW5nZSA9IChlKSA9PiB7XG4gICAgdGhpcy5wcm9wcy5vbk9wZW5DaGFuZ2UoZSk7XG4gIH07XG5cbiAgb25Qb3B1cFZpc2libGVDaGFuZ2UgPSAodmlzaWJsZSkgPT4ge1xuICAgIHRoaXMudHJpZ2dlck9wZW5DaGFuZ2UodmlzaWJsZSwgdmlzaWJsZSA/ICdtb3VzZWVudGVyJyA6ICdtb3VzZWxlYXZlJyk7XG4gIH07XG5cbiAgb25Nb3VzZUVudGVyID0gKGUpID0+IHtcbiAgICBjb25zdCB7IGV2ZW50S2V5OiBrZXksIG9uTW91c2VFbnRlciwgc3RvcmUgfSA9IHRoaXMucHJvcHM7XG4gICAgdXBkYXRlRGVmYXVsdEFjdGl2ZUZpcnN0KHN0b3JlLCB0aGlzLnByb3BzLmV2ZW50S2V5LCBmYWxzZSk7XG4gICAgb25Nb3VzZUVudGVyKHtcbiAgICAgIGtleSxcbiAgICAgIGRvbUV2ZW50OiBlLFxuICAgIH0pO1xuICB9O1xuXG4gIG9uTW91c2VMZWF2ZSA9IChlKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgcGFyZW50TWVudSxcbiAgICAgIGV2ZW50S2V5LFxuICAgICAgb25Nb3VzZUxlYXZlLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuICAgIHBhcmVudE1lbnUuc3ViTWVudUluc3RhbmNlID0gdGhpcztcbiAgICBvbk1vdXNlTGVhdmUoe1xuICAgICAga2V5OiBldmVudEtleSxcbiAgICAgIGRvbUV2ZW50OiBlLFxuICAgIH0pO1xuICB9O1xuXG4gIG9uVGl0bGVNb3VzZUVudGVyID0gKGRvbUV2ZW50KSA9PiB7XG4gICAgY29uc3QgeyBldmVudEtleToga2V5LCBvbkl0ZW1Ib3Zlciwgb25UaXRsZU1vdXNlRW50ZXIgfSA9IHRoaXMucHJvcHM7XG4gICAgb25JdGVtSG92ZXIoe1xuICAgICAga2V5LFxuICAgICAgaG92ZXI6IHRydWUsXG4gICAgfSk7XG4gICAgb25UaXRsZU1vdXNlRW50ZXIoe1xuICAgICAga2V5LFxuICAgICAgZG9tRXZlbnQsXG4gICAgfSk7XG4gIH07XG5cbiAgb25UaXRsZU1vdXNlTGVhdmUgPSAoZSkgPT4ge1xuICAgIGNvbnN0IHsgcGFyZW50TWVudSwgZXZlbnRLZXksIG9uSXRlbUhvdmVyLCBvblRpdGxlTW91c2VMZWF2ZSB9ID0gdGhpcy5wcm9wcztcbiAgICBwYXJlbnRNZW51LnN1Yk1lbnVJbnN0YW5jZSA9IHRoaXM7XG4gICAgb25JdGVtSG92ZXIoe1xuICAgICAga2V5OiBldmVudEtleSxcbiAgICAgIGhvdmVyOiBmYWxzZSxcbiAgICB9KTtcbiAgICBvblRpdGxlTW91c2VMZWF2ZSh7XG4gICAgICBrZXk6IGV2ZW50S2V5LFxuICAgICAgZG9tRXZlbnQ6IGUsXG4gICAgfSk7XG4gIH07XG5cbiAgb25UaXRsZUNsaWNrID0gKGUpID0+IHtcbiAgICBjb25zdCB7IHByb3BzIH0gPSB0aGlzO1xuICAgIHByb3BzLm9uVGl0bGVDbGljayh7XG4gICAgICBrZXk6IHByb3BzLmV2ZW50S2V5LFxuICAgICAgZG9tRXZlbnQ6IGUsXG4gICAgfSk7XG4gICAgaWYgKHByb3BzLnRyaWdnZXJTdWJNZW51QWN0aW9uID09PSAnaG92ZXInKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMudHJpZ2dlck9wZW5DaGFuZ2UoIXByb3BzLmlzT3BlbiwgJ2NsaWNrJyk7XG4gICAgdXBkYXRlRGVmYXVsdEFjdGl2ZUZpcnN0KHByb3BzLnN0b3JlLCB0aGlzLnByb3BzLmV2ZW50S2V5LCBmYWxzZSk7XG4gIH07XG5cbiAgb25TdWJNZW51Q2xpY2sgPSAoaW5mbykgPT4ge1xuICAgIC8vIGluIHRoZSBjYXNlIG9mIG92ZXJmbG93ZWQgc3VibWVudVxuICAgIC8vIG9uQ2xpY2sgaXMgbm90IGNvcGllZCBvdmVyXG4gICAgaWYgKHR5cGVvZiB0aGlzLnByb3BzLm9uQ2xpY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXMucHJvcHMub25DbGljayh0aGlzLmFkZEtleVBhdGgoaW5mbykpO1xuICAgIH1cbiAgfTtcblxuICBvblNlbGVjdCA9IChpbmZvKSA9PiB7XG4gICAgdGhpcy5wcm9wcy5vblNlbGVjdChpbmZvKTtcbiAgfTtcblxuICBvbkRlc2VsZWN0ID0gKGluZm8pID0+IHtcbiAgICB0aGlzLnByb3BzLm9uRGVzZWxlY3QoaW5mbyk7XG4gIH07XG5cbiAgZ2V0UHJlZml4Q2xzID0gKCkgPT4ge1xuICAgIHJldHVybiBgJHt0aGlzLnByb3BzLnJvb3RQcmVmaXhDbHN9LXN1Ym1lbnVgO1xuICB9O1xuXG4gIGdldEFjdGl2ZUNsYXNzTmFtZSA9ICgpID0+IHtcbiAgICByZXR1cm4gYCR7dGhpcy5nZXRQcmVmaXhDbHMoKX0tYWN0aXZlYDtcbiAgfTtcblxuICBnZXREaXNhYmxlZENsYXNzTmFtZSA9ICgpID0+IHtcbiAgICByZXR1cm4gYCR7dGhpcy5nZXRQcmVmaXhDbHMoKX0tZGlzYWJsZWRgO1xuICB9O1xuXG4gIGdldFNlbGVjdGVkQ2xhc3NOYW1lID0gKCkgPT4ge1xuICAgIHJldHVybiBgJHt0aGlzLmdldFByZWZpeENscygpfS1zZWxlY3RlZGA7XG4gIH07XG5cbiAgZ2V0T3BlbkNsYXNzTmFtZSA9ICgpID0+IHtcbiAgICByZXR1cm4gYCR7dGhpcy5wcm9wcy5yb290UHJlZml4Q2xzfS1zdWJtZW51LW9wZW5gO1xuICB9O1xuXG4gIHNhdmVNZW51SW5zdGFuY2UgPSAoYykgPT4ge1xuICAgIC8vIGNoaWxkcmVuIG1lbnUgaW5zdGFuY2VcbiAgICB0aGlzLm1lbnVJbnN0YW5jZSA9IGM7XG4gIH07XG5cbiAgYWRkS2V5UGF0aCA9IChpbmZvKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmluZm8sXG4gICAgICBrZXlQYXRoOiAoaW5mby5rZXlQYXRoIHx8IFtdKS5jb25jYXQodGhpcy5wcm9wcy5ldmVudEtleSksXG4gICAgfTtcbiAgfTtcblxuICB0cmlnZ2VyT3BlbkNoYW5nZSA9IChvcGVuLCB0eXBlKSA9PiB7XG4gICAgY29uc3Qga2V5ID0gdGhpcy5wcm9wcy5ldmVudEtleTtcbiAgICBjb25zdCBvcGVuQ2hhbmdlID0gKCkgPT4ge1xuICAgICAgdGhpcy5vbk9wZW5DaGFuZ2Uoe1xuICAgICAgICBrZXksXG4gICAgICAgIGl0ZW06IHRoaXMsXG4gICAgICAgIHRyaWdnZXI6IHR5cGUsXG4gICAgICAgIG9wZW4sXG4gICAgICB9KTtcbiAgICB9O1xuICAgIGlmICh0eXBlID09PSAnbW91c2VlbnRlcicpIHtcbiAgICAgIC8vIG1ha2Ugc3VyZSBtb3VzZWVudGVyIGhhcHBlbiBhZnRlciBvdGhlciBtZW51IGl0ZW0ncyBtb3VzZWxlYXZlXG4gICAgICB0aGlzLm1vdXNlZW50ZXJUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIG9wZW5DaGFuZ2UoKTtcbiAgICAgIH0sIDApO1xuICAgIH0gZWxzZSB7XG4gICAgICBvcGVuQ2hhbmdlKCk7XG4gICAgfVxuICB9O1xuXG4gIGlzQ2hpbGRyZW5TZWxlY3RlZCA9ICgpID0+IHtcbiAgICBjb25zdCByZXQgPSB7IGZpbmQ6IGZhbHNlIH07XG4gICAgbG9vcE1lbnVJdGVtUmVjdXJzaXZlbHkodGhpcy5wcm9wcy5jaGlsZHJlbiwgdGhpcy5wcm9wcy5zZWxlY3RlZEtleXMsIHJldCk7XG4gICAgcmV0dXJuIHJldC5maW5kO1xuICB9O1xuXG4gIGlzT3BlbiA9ICgpID0+IHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5vcGVuS2V5cy5pbmRleE9mKHRoaXMucHJvcHMuZXZlbnRLZXkpICE9PSAtMTtcbiAgfTtcblxuICBhZGp1c3RXaWR0aCA9ICgpID0+IHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIXRoaXMuc3ViTWVudVRpdGxlIHx8ICF0aGlzLm1lbnVJbnN0YW5jZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBwb3B1cE1lbnUgPSBmaW5kRE9NTm9kZSh0aGlzLm1lbnVJbnN0YW5jZSk7XG4gICAgaWYgKHBvcHVwTWVudS5vZmZzZXRXaWR0aCA+PSB0aGlzLnN1Yk1lbnVUaXRsZS5vZmZzZXRXaWR0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcG9wdXBNZW51LnN0eWxlLm1pbldpZHRoID0gYCR7dGhpcy5zdWJNZW51VGl0bGUub2Zmc2V0V2lkdGh9cHhgO1xuICB9O1xuXG4gIHNhdmVTdWJNZW51VGl0bGUgPSAoc3ViTWVudVRpdGxlKSA9PiB7XG4gICAgdGhpcy5zdWJNZW51VGl0bGUgPSBzdWJNZW51VGl0bGU7XG4gIH07XG5cbiAgcmVuZGVyQ2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgICBjb25zdCBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgYmFzZVByb3BzID0ge1xuICAgICAgbW9kZTogcHJvcHMubW9kZSA9PT0gJ2hvcml6b250YWwnID8gJ3ZlcnRpY2FsJyA6IHByb3BzLm1vZGUsXG4gICAgICBoaWRkZW46ICF0aGlzLnByb3BzLmlzT3BlbixcbiAgICAgIGxldmVsOiBwcm9wcy5sZXZlbCArIDEsXG4gICAgICBpbmxpbmVJbmRlbnQ6IHByb3BzLmlubGluZUluZGVudCxcbiAgICAgIGZvY3VzYWJsZTogZmFsc2UsXG4gICAgICBvbkNsaWNrOiB0aGlzLm9uU3ViTWVudUNsaWNrLFxuICAgICAgb25TZWxlY3Q6IHRoaXMub25TZWxlY3QsXG4gICAgICBvbkRlc2VsZWN0OiB0aGlzLm9uRGVzZWxlY3QsXG4gICAgICBvbkRlc3Ryb3k6IHRoaXMub25EZXN0cm95LFxuICAgICAgc2VsZWN0ZWRLZXlzOiBwcm9wcy5zZWxlY3RlZEtleXMsXG4gICAgICBldmVudEtleTogYCR7cHJvcHMuZXZlbnRLZXl9LW1lbnUtYCxcbiAgICAgIG9wZW5LZXlzOiBwcm9wcy5vcGVuS2V5cyxcbiAgICAgIG9wZW5UcmFuc2l0aW9uTmFtZTogcHJvcHMub3BlblRyYW5zaXRpb25OYW1lLFxuICAgICAgb3BlbkFuaW1hdGlvbjogcHJvcHMub3BlbkFuaW1hdGlvbixcbiAgICAgIG9uT3BlbkNoYW5nZTogdGhpcy5vbk9wZW5DaGFuZ2UsXG4gICAgICBzdWJNZW51T3BlbkRlbGF5OiBwcm9wcy5zdWJNZW51T3BlbkRlbGF5LFxuICAgICAgcGFyZW50TWVudTogdGhpcyxcbiAgICAgIHN1Yk1lbnVDbG9zZURlbGF5OiBwcm9wcy5zdWJNZW51Q2xvc2VEZWxheSxcbiAgICAgIGZvcmNlU3ViTWVudVJlbmRlcjogcHJvcHMuZm9yY2VTdWJNZW51UmVuZGVyLFxuICAgICAgdHJpZ2dlclN1Yk1lbnVBY3Rpb246IHByb3BzLnRyaWdnZXJTdWJNZW51QWN0aW9uLFxuICAgICAgYnVpbHRpblBsYWNlbWVudHM6IHByb3BzLmJ1aWx0aW5QbGFjZW1lbnRzLFxuICAgICAgZGVmYXVsdEFjdGl2ZUZpcnN0OiBwcm9wcy5zdG9yZS5nZXRTdGF0ZSgpXG4gICAgICAgIC5kZWZhdWx0QWN0aXZlRmlyc3RbZ2V0TWVudUlkRnJvbVN1Yk1lbnVFdmVudEtleShwcm9wcy5ldmVudEtleSldLFxuICAgICAgbXVsdGlwbGU6IHByb3BzLm11bHRpcGxlLFxuICAgICAgcHJlZml4Q2xzOiBwcm9wcy5yb290UHJlZml4Q2xzLFxuICAgICAgaWQ6IHRoaXMuX21lbnVJZCxcbiAgICAgIG1hbnVhbFJlZjogdGhpcy5zYXZlTWVudUluc3RhbmNlLFxuICAgICAgaXRlbUljb246IHByb3BzLml0ZW1JY29uLFxuICAgICAgZXhwYW5kSWNvbjogcHJvcHMuZXhwYW5kSWNvbixcbiAgICB9O1xuXG4gICAgY29uc3QgaGF2ZVJlbmRlcmVkID0gdGhpcy5oYXZlUmVuZGVyZWQ7XG4gICAgdGhpcy5oYXZlUmVuZGVyZWQgPSB0cnVlO1xuXG4gICAgdGhpcy5oYXZlT3BlbmVkID0gdGhpcy5oYXZlT3BlbmVkIHx8ICFiYXNlUHJvcHMuaGlkZGVuIHx8IGJhc2VQcm9wcy5mb3JjZVN1Yk1lbnVSZW5kZXI7XG4gICAgLy8gbmV2ZXIgcmVuZGVyZWQgbm90IHBsYW5uaW5nIHRvLCBkb24ndCByZW5kZXJcbiAgICBpZiAoIXRoaXMuaGF2ZU9wZW5lZCkge1xuICAgICAgcmV0dXJuIDxkaXYgLz47XG4gICAgfVxuXG4gICAgLy8gZG9uJ3Qgc2hvdyB0cmFuc2l0aW9uIG9uIGZpcnN0IHJlbmRlcmluZyAobm8gYW5pbWF0aW9uIGZvciBvcGVuZWQgbWVudSlcbiAgICAvLyBzaG93IGFwcGVhciB0cmFuc2l0aW9uIGlmIGl0J3MgaGlkZGVuIChub3Qgc3VyZSB3aHkpXG4gICAgLy8gc2hvdyBhcHBlYXIgdHJhbnNpdGlvbiBpZiBpdCdzIG5vdCBpbmxpbmUgbW9kZVxuICAgIGNvbnN0IHRyYW5zaXRpb25BcHBlYXIgPSBoYXZlUmVuZGVyZWQgfHwgYmFzZVByb3BzLmhpZGRlbiB8fCAhYmFzZVByb3BzLm1vZGUgPT09ICdpbmxpbmUnO1xuXG4gICAgYmFzZVByb3BzLmNsYXNzTmFtZSA9IGAgJHtiYXNlUHJvcHMucHJlZml4Q2xzfS1zdWJgO1xuICAgIGNvbnN0IGFuaW1Qcm9wcyA9IHt9O1xuXG4gICAgaWYgKGJhc2VQcm9wcy5vcGVuVHJhbnNpdGlvbk5hbWUpIHtcbiAgICAgIGFuaW1Qcm9wcy50cmFuc2l0aW9uTmFtZSA9IGJhc2VQcm9wcy5vcGVuVHJhbnNpdGlvbk5hbWU7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgYmFzZVByb3BzLm9wZW5BbmltYXRpb24gPT09ICdvYmplY3QnKSB7XG4gICAgICBhbmltUHJvcHMuYW5pbWF0aW9uID0geyAuLi5iYXNlUHJvcHMub3BlbkFuaW1hdGlvbiB9O1xuICAgICAgaWYgKCF0cmFuc2l0aW9uQXBwZWFyKSB7XG4gICAgICAgIGRlbGV0ZSBhbmltUHJvcHMuYW5pbWF0aW9uLmFwcGVhcjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPEFuaW1hdGVcbiAgICAgICAgey4uLmFuaW1Qcm9wc31cbiAgICAgICAgaGlkZGVuUHJvcD1cImhpZGRlblwiXG4gICAgICAgIGNvbXBvbmVudD1cIlwiXG4gICAgICAgIHRyYW5zaXRpb25BcHBlYXI9e3RyYW5zaXRpb25BcHBlYXJ9XG4gICAgICA+XG4gICAgICAgIDxTdWJQb3B1cE1lbnUgey4uLmJhc2VQcm9wc30gaWQ9e3RoaXMuX21lbnVJZH0+e2NoaWxkcmVufTwvU3ViUG9wdXBNZW51PlxuICAgICAgPC9BbmltYXRlPlxuICAgICk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgcHJvcHMgPSB7IC4uLnRoaXMucHJvcHMgfTtcbiAgICBjb25zdCBpc09wZW4gPSBwcm9wcy5pc09wZW47XG4gICAgY29uc3QgcHJlZml4Q2xzID0gdGhpcy5nZXRQcmVmaXhDbHMoKTtcbiAgICBjb25zdCBpc0lubGluZU1vZGUgPSBwcm9wcy5tb2RlID09PSAnaW5saW5lJztcbiAgICBjb25zdCBjbGFzc05hbWUgPSBjbGFzc05hbWVzKHByZWZpeENscywgYCR7cHJlZml4Q2xzfS0ke3Byb3BzLm1vZGV9YCwge1xuICAgICAgW3Byb3BzLmNsYXNzTmFtZV06ICEhcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgW3RoaXMuZ2V0T3BlbkNsYXNzTmFtZSgpXTogaXNPcGVuLFxuICAgICAgW3RoaXMuZ2V0QWN0aXZlQ2xhc3NOYW1lKCldOiBwcm9wcy5hY3RpdmUgfHwgKGlzT3BlbiAmJiAhaXNJbmxpbmVNb2RlKSxcbiAgICAgIFt0aGlzLmdldERpc2FibGVkQ2xhc3NOYW1lKCldOiBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIFt0aGlzLmdldFNlbGVjdGVkQ2xhc3NOYW1lKCldOiB0aGlzLmlzQ2hpbGRyZW5TZWxlY3RlZCgpLFxuICAgIH0pO1xuXG4gICAgaWYgKCF0aGlzLl9tZW51SWQpIHtcbiAgICAgIGlmIChwcm9wcy5ldmVudEtleSkge1xuICAgICAgICB0aGlzLl9tZW51SWQgPSBgJHtwcm9wcy5ldmVudEtleX0kTWVudWA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9tZW51SWQgPSBgJF9fJCR7KytndWlkfSRNZW51YDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgbW91c2VFdmVudHMgPSB7fTtcbiAgICBsZXQgdGl0bGVDbGlja0V2ZW50cyA9IHt9O1xuICAgIGxldCB0aXRsZU1vdXNlRXZlbnRzID0ge307XG4gICAgaWYgKCFwcm9wcy5kaXNhYmxlZCkge1xuICAgICAgbW91c2VFdmVudHMgPSB7XG4gICAgICAgIG9uTW91c2VMZWF2ZTogdGhpcy5vbk1vdXNlTGVhdmUsXG4gICAgICAgIG9uTW91c2VFbnRlcjogdGhpcy5vbk1vdXNlRW50ZXIsXG4gICAgICB9O1xuXG4gICAgICAvLyBvbmx5IHdvcmtzIGluIHRpdGxlLCBub3Qgb3V0ZXIgbGlcbiAgICAgIHRpdGxlQ2xpY2tFdmVudHMgPSB7XG4gICAgICAgIG9uQ2xpY2s6IHRoaXMub25UaXRsZUNsaWNrLFxuICAgICAgfTtcbiAgICAgIHRpdGxlTW91c2VFdmVudHMgPSB7XG4gICAgICAgIG9uTW91c2VFbnRlcjogdGhpcy5vblRpdGxlTW91c2VFbnRlcixcbiAgICAgICAgb25Nb3VzZUxlYXZlOiB0aGlzLm9uVGl0bGVNb3VzZUxlYXZlLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBjb25zdCBzdHlsZSA9IHt9O1xuICAgIGlmIChpc0lubGluZU1vZGUpIHtcbiAgICAgIHN0eWxlLnBhZGRpbmdMZWZ0ID0gcHJvcHMuaW5saW5lSW5kZW50ICogcHJvcHMubGV2ZWw7XG4gICAgfVxuXG4gICAgbGV0IGFyaWFPd25zID0ge307XG4gICAgLy8gb25seSBzZXQgYXJpYS1vd25zIHdoZW4gbWVudSBpcyBvcGVuXG4gICAgLy8gb3RoZXJ3aXNlIGl0IHdvdWxkIGJlIGFuIGludmFsaWQgYXJpYS1vd25zIHZhbHVlXG4gICAgLy8gc2luY2UgY29ycmVzcG9uZGluZyBub2RlIGNhbm5vdCBiZSBmb3VuZFxuICAgIGlmICh0aGlzLnByb3BzLmlzT3Blbikge1xuICAgICAgYXJpYU93bnMgPSB7XG4gICAgICAgICdhcmlhLW93bnMnOiB0aGlzLl9tZW51SWQsXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIGV4cGFuZCBjdXN0b20gaWNvbiBzaG91bGQgTk9UIGJlIGRpc3BsYXllZCBpbiBtZW51IHdpdGggaG9yaXpvbnRhbCBtb2RlLlxuICAgIGxldCBpY29uID0gbnVsbDtcbiAgICBpZiAocHJvcHMubW9kZSAhPT0gJ2hvcml6b250YWwnKSB7XG4gICAgICBpY29uID0gdGhpcy5wcm9wcy5leHBhbmRJY29uOyAvLyBSZWFjdE5vZGVcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5wcm9wcy5leHBhbmRJY29uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGljb24gPSBjcmVhdGVFbGVtZW50KFxuICAgICAgICAgIHRoaXMucHJvcHMuZXhwYW5kSWNvbixcbiAgICAgICAgICB7IC4uLnRoaXMucHJvcHMgfSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCB0aXRsZSA9IChcbiAgICAgIDxkaXZcbiAgICAgICAgcmVmPXt0aGlzLnNhdmVTdWJNZW51VGl0bGV9XG4gICAgICAgIHN0eWxlPXtzdHlsZX1cbiAgICAgICAgY2xhc3NOYW1lPXtgJHtwcmVmaXhDbHN9LXRpdGxlYH1cbiAgICAgICAgey4uLnRpdGxlTW91c2VFdmVudHN9XG4gICAgICAgIHsuLi50aXRsZUNsaWNrRXZlbnRzfVxuICAgICAgICBhcmlhLWV4cGFuZGVkPXtpc09wZW59XG4gICAgICAgIHsuLi5hcmlhT3duc31cbiAgICAgICAgYXJpYS1oYXNwb3B1cD1cInRydWVcIlxuICAgICAgICB0aXRsZT17dHlwZW9mIHByb3BzLnRpdGxlID09PSAnc3RyaW5nJyA/IHByb3BzLnRpdGxlIDogdW5kZWZpbmVkfVxuICAgICAgPlxuICAgICAgICB7cHJvcHMudGl0bGV9XG4gICAgICAgIHtpY29uIHx8IDxpIGNsYXNzTmFtZT17YCR7cHJlZml4Q2xzfS1hcnJvd2B9IC8+fVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgICBjb25zdCBjaGlsZHJlbiA9IHRoaXMucmVuZGVyQ2hpbGRyZW4ocHJvcHMuY2hpbGRyZW4pO1xuXG4gICAgY29uc3QgZ2V0UG9wdXBDb250YWluZXIgPSBwcm9wcy5wYXJlbnRNZW51LmlzUm9vdE1lbnUgPyBwcm9wcy5wYXJlbnRNZW51LnByb3BzLmdldFBvcHVwQ29udGFpbmVyIDogdHJpZ2dlck5vZGUgPT4gdHJpZ2dlck5vZGUucGFyZW50Tm9kZTtcbiAgICBjb25zdCBwb3B1cFBsYWNlbWVudCA9IHBvcHVwUGxhY2VtZW50TWFwW3Byb3BzLm1vZGVdO1xuICAgIGNvbnN0IHBvcHVwQWxpZ24gPSBwcm9wcy5wb3B1cE9mZnNldCA/IHsgb2Zmc2V0OiBwcm9wcy5wb3B1cE9mZnNldCB9IDoge307XG4gICAgY29uc3QgcG9wdXBDbGFzc05hbWUgPSBwcm9wcy5tb2RlID09PSAnaW5saW5lJyA/ICcnIDogcHJvcHMucG9wdXBDbGFzc05hbWU7XG4gICAgY29uc3Qge1xuICAgICAgZGlzYWJsZWQsXG4gICAgICB0cmlnZ2VyU3ViTWVudUFjdGlvbixcbiAgICAgIHN1Yk1lbnVPcGVuRGVsYXksXG4gICAgICBmb3JjZVN1Yk1lbnVSZW5kZXIsXG4gICAgICBzdWJNZW51Q2xvc2VEZWxheSxcbiAgICAgIGJ1aWx0aW5QbGFjZW1lbnRzLFxuICAgIH0gPSBwcm9wcztcbiAgICBtZW51QWxsUHJvcHMuZm9yRWFjaChrZXkgPT4gZGVsZXRlIHByb3BzW2tleV0pO1xuICAgIC8vIFNldCBvbkNsaWNrIHRvIG51bGwsIHRvIGlnbm9yZSBwcm9wYWdhdGVkIG9uQ2xpY2sgZXZlbnRcbiAgICBkZWxldGUgcHJvcHMub25DbGljaztcblxuICAgIHJldHVybiAoXG4gICAgICA8bGlcbiAgICAgICAgey4uLnByb3BzfVxuICAgICAgICB7Li4ubW91c2VFdmVudHN9XG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgICAgICByb2xlPVwibWVudWl0ZW1cIlxuICAgICAgPlxuICAgICAgICB7aXNJbmxpbmVNb2RlICYmIHRpdGxlfVxuICAgICAgICB7aXNJbmxpbmVNb2RlICYmIGNoaWxkcmVufVxuICAgICAgICB7IWlzSW5saW5lTW9kZSAmJiAoXG4gICAgICAgICAgPFRyaWdnZXJcbiAgICAgICAgICAgIHByZWZpeENscz17cHJlZml4Q2xzfVxuICAgICAgICAgICAgcG9wdXBDbGFzc05hbWU9e2Ake3ByZWZpeENsc30tcG9wdXAgJHtwb3B1cENsYXNzTmFtZX1gfVxuICAgICAgICAgICAgZ2V0UG9wdXBDb250YWluZXI9e2dldFBvcHVwQ29udGFpbmVyfVxuICAgICAgICAgICAgYnVpbHRpblBsYWNlbWVudHM9e09iamVjdC5hc3NpZ24oe30sIHBsYWNlbWVudHMsIGJ1aWx0aW5QbGFjZW1lbnRzKX1cbiAgICAgICAgICAgIHBvcHVwUGxhY2VtZW50PXtwb3B1cFBsYWNlbWVudH1cbiAgICAgICAgICAgIHBvcHVwVmlzaWJsZT17aXNPcGVufVxuICAgICAgICAgICAgcG9wdXBBbGlnbj17cG9wdXBBbGlnbn1cbiAgICAgICAgICAgIHBvcHVwPXtjaGlsZHJlbn1cbiAgICAgICAgICAgIGFjdGlvbj17ZGlzYWJsZWQgPyBbXSA6IFt0cmlnZ2VyU3ViTWVudUFjdGlvbl19XG4gICAgICAgICAgICBtb3VzZUVudGVyRGVsYXk9e3N1Yk1lbnVPcGVuRGVsYXl9XG4gICAgICAgICAgICBtb3VzZUxlYXZlRGVsYXk9e3N1Yk1lbnVDbG9zZURlbGF5fVxuICAgICAgICAgICAgb25Qb3B1cFZpc2libGVDaGFuZ2U9e3RoaXMub25Qb3B1cFZpc2libGVDaGFuZ2V9XG4gICAgICAgICAgICBmb3JjZVJlbmRlcj17Zm9yY2VTdWJNZW51UmVuZGVyfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHt0aXRsZX1cbiAgICAgICAgICA8L1RyaWdnZXI+XG4gICAgICAgICl9XG4gICAgICA8L2xpPlxuICAgICk7XG4gIH1cbn1cblxuY29uc3QgY29ubmVjdGVkID0gY29ubmVjdCgoeyBvcGVuS2V5cywgYWN0aXZlS2V5LCBzZWxlY3RlZEtleXMgfSwgeyBldmVudEtleSwgc3ViTWVudUtleSB9KSA9PiAoe1xuICBpc09wZW46IG9wZW5LZXlzLmluZGV4T2YoZXZlbnRLZXkpID4gLTEsXG4gIGFjdGl2ZTogYWN0aXZlS2V5W3N1Yk1lbnVLZXldID09PSBldmVudEtleSxcbiAgc2VsZWN0ZWRLZXlzLFxufSkpKFN1Yk1lbnUpO1xuXG5jb25uZWN0ZWQuaXNTdWJNZW51ID0gdHJ1ZTtcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdGVkO1xuIl19