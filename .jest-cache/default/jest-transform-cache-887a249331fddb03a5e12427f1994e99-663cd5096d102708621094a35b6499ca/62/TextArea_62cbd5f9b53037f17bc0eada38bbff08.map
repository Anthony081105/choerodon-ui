{"version":3,"sources":["input/TextArea.js"],"names":["window","TextArea","Component","textareaStyles","inputLength","focused","autosize","minRows","maxRows","onChange","onPressEnter","onKeyDown","e","length","onFocus","onBlur","autoFocus","nextProps","value","clearNextFrameAction","onNextFrame","prefixCls","className","disabled","label","border","maxLength","showLengthInfo","placeholder","props","otherProps","style","ref","onInput","handleFocus"],"mappings":"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","sourcesContent":["import React, { Component, } from 'react';\nimport omit from 'lodash/omit';\nimport classNames from 'classnames';\nimport calculateNodeHeight from './calculateNodeHeight';\nimport { getPrefixCls } from '../configure';\nfunction onNextFrame(cb) {\n    if (window.requestAnimationFrame) {\n        return window.requestAnimationFrame(cb);\n    }\n    return window.setTimeout(cb, 1);\n}\nfunction clearNextFrameAction(nextFrameId) {\n    if (window.cancelAnimationFrame) {\n        window.cancelAnimationFrame(nextFrameId);\n    }\n    else {\n        window.clearTimeout(nextFrameId);\n    }\n}\nexport default class TextArea extends Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            textareaStyles: {},\n            inputLength: 0,\n            focused: false,\n        };\n        this.resizeTextarea = () => {\n            const { autosize } = this.props;\n            if (!autosize || !this.textAreaRef) {\n                return;\n            }\n            const minRows = autosize ? autosize.minRows : null;\n            const maxRows = autosize ? autosize.maxRows : null;\n            const textareaStyles = calculateNodeHeight(this.textAreaRef, false, minRows, maxRows);\n            this.setState({ textareaStyles });\n        };\n        this.handleTextareaChange = (e) => {\n            if (!('value' in this.props)) {\n                this.resizeTextarea();\n            }\n            const { onChange } = this.props;\n            if (onChange) {\n                onChange(e);\n            }\n        };\n        this.handleKeyDown = (e) => {\n            const { onPressEnter, onKeyDown } = this.props;\n            if (e.keyCode === 13 && onPressEnter) {\n                onPressEnter(e);\n            }\n            if (onKeyDown) {\n                onKeyDown(e);\n            }\n        };\n        this.handleInput = () => {\n            this.setState({\n                inputLength: this.textAreaRef.value.length,\n            });\n        };\n        this.saveTextAreaRef = (textArea) => {\n            this.textAreaRef = textArea;\n        };\n        this.handleFocus = (e) => {\n            const { onFocus } = this.props;\n            this.setState({\n                focused: true,\n            });\n            if (onFocus) {\n                onFocus(e);\n            }\n        };\n        this.handleBlur = (e) => {\n            const { onBlur } = this.props;\n            this.setState({\n                focused: false,\n            });\n            if (onBlur) {\n                onBlur(e);\n            }\n        };\n    }\n    componentDidMount() {\n        this.resizeTextarea();\n        if (this.textAreaRef.value) {\n            this.setState({\n                inputLength: this.textAreaRef.value.length,\n            });\n        }\n        const { autoFocus } = this.props;\n        if (autoFocus) {\n            this.setState({\n                focused: true,\n            });\n        }\n    }\n    componentWillReceiveProps(nextProps) {\n        // Re-render with the new content then recalculate the height as required.\n        if (this.textAreaRef.value !== nextProps.value) {\n            const inputLength = nextProps.value && nextProps.value.length;\n            this.setState({\n                inputLength: inputLength || 0,\n            });\n        }\n        if (nextProps.autoFocus) {\n            this.setState({\n                focused: true,\n            });\n        }\n        const { value } = this.props;\n        if (value !== nextProps.value) {\n            if (this.nextFrameActionId) {\n                clearNextFrameAction(this.nextFrameActionId);\n            }\n            this.nextFrameActionId = onNextFrame(this.resizeTextarea);\n        }\n    }\n    focus() {\n        this.textAreaRef.focus();\n    }\n    blur() {\n        this.textAreaRef.blur();\n    }\n    getPrefixCls() {\n        const { prefixCls } = this.props;\n        return getPrefixCls('input', prefixCls);\n    }\n    getTextAreaClassName() {\n        const { className } = this.props;\n        const prefixCls = this.getPrefixCls();\n        return classNames(prefixCls, `${prefixCls}-textarea-element`, className);\n    }\n    getWrapperClassName() {\n        const { disabled, label, border } = this.props;\n        const { inputLength, focused } = this.state;\n        const prefixCls = this.getPrefixCls();\n        return classNames(`${prefixCls}-wrapper`, `${prefixCls}-textarea`, {\n            [`${prefixCls}-has-value`]: inputLength !== 0,\n            [`${prefixCls}-focused`]: focused,\n            [`${prefixCls}-disabled`]: disabled,\n            [`${prefixCls}-has-label`]: !!label,\n            [`${prefixCls}-has-border`]: border,\n        });\n    }\n    getLengthInfo() {\n        const { maxLength, showLengthInfo } = this.props;\n        const prefixCls = this.getPrefixCls();\n        const { inputLength } = this.state;\n        return (maxLength && showLengthInfo) ||\n            (maxLength && maxLength > 0 && inputLength === maxLength) ? (React.createElement(\"div\", { className: `${prefixCls}-length-info` }, `${inputLength}/${maxLength}`)) : null;\n    }\n    getLabel() {\n        const { placeholder, label } = this.props;\n        const { inputLength } = this.state;\n        if (inputLength === 0 && placeholder) {\n            return placeholder;\n        }\n        return label;\n    }\n    renderFloatLabel() {\n        const label = this.getLabel();\n        if (label) {\n            const prefixCls = this.getPrefixCls();\n            return (React.createElement(\"div\", { className: `${prefixCls}-label-wrapper` },\n                React.createElement(\"div\", { className: `${prefixCls}-label` }, label)));\n        }\n    }\n    render() {\n        const props = this.props;\n        const { textareaStyles } = this.state;\n        const prefixCls = this.getPrefixCls();\n        const otherProps = omit(props, [\n            'prefixCls',\n            'onPressEnter',\n            'autosize',\n            'placeholder',\n            'focused',\n            'showLengthInfo',\n        ]);\n        const style = {\n            ...props.style,\n            ...textareaStyles,\n        };\n        // Make sure it could be reset when using form.getFieldDecorator\n        if ('value' in otherProps) {\n            otherProps.value = otherProps.value || '';\n        }\n        otherProps.onInput = this.handleInput;\n        return (React.createElement(\"span\", { className: this.getWrapperClassName() },\n            React.createElement(\"div\", { className: `${prefixCls}-rendered-wrapper` },\n                React.createElement(\"textarea\", Object.assign({}, otherProps, { className: this.getTextAreaClassName(), style: style, onKeyDown: this.handleKeyDown, onChange: this.handleTextareaChange, ref: this.saveTextAreaRef, onInput: this.handleInput, onBlur: this.handleBlur, onFocus: this.handleFocus })),\n                this.renderFloatLabel()),\n            this.getLengthInfo()));\n    }\n}\nTextArea.displayName = 'TextArea';\nTextArea.defaultProps = {\n    showLengthInfo: true,\n    border: true,\n};\n"]}