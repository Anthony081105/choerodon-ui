7f4bbb5690975d3a9fac708823fcd570
"use strict";

/* istanbul ignore next */
function cov_fap6egwd1() {
  var path = "/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/performance-table/utils/mergeCells.tsx";
  var hash = "dd203a4fd84efb8065c01dfde1da546df4545773";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/performance-table/utils/mergeCells.tsx",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 29
        },
        end: {
          line: 3,
          column: 84
        }
      },
      "1": {
        start: {
          line: 5,
          column: 30
        },
        end: {
          line: 5,
          column: 86
        }
      },
      "2": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 9,
          column: 3
        }
      },
      "3": {
        start: {
          line: 10,
          column: 0
        },
        end: {
          line: 10,
          column: 28
        }
      },
      "4": {
        start: {
          line: 12,
          column: 12
        },
        end: {
          line: 12,
          column: 53
        }
      },
      "5": {
        start: {
          line: 14,
          column: 18
        },
        end: {
          line: 14,
          column: 70
        }
      },
      "6": {
        start: {
          line: 16,
          column: 11
        },
        end: {
          line: 16,
          column: 56
        }
      },
      "7": {
        start: {
          line: 18,
          column: 19
        },
        end: {
          line: 18,
          column: 68
        }
      },
      "8": {
        start: {
          line: 20,
          column: 25
        },
        end: {
          line: 20,
          column: 79
        }
      },
      "9": {
        start: {
          line: 23,
          column: 2
        },
        end: {
          line: 23,
          column: 41
        }
      },
      "10": {
        start: {
          line: 27,
          column: 18
        },
        end: {
          line: 27,
          column: 20
        }
      },
      "11": {
        start: {
          line: 29,
          column: 2
        },
        end: {
          line: 120,
          column: 3
        }
      },
      "12": {
        start: {
          line: 29,
          column: 15
        },
        end: {
          line: 29,
          column: 16
        }
      },
      "13": {
        start: {
          line: 30,
          column: 25
        },
        end: {
          line: 30,
          column: 39
        }
      },
      "14": {
        start: {
          line: 31,
          column: 16
        },
        end: {
          line: 31,
          column: 36
        }
      },
      "15": {
        start: {
          line: 32,
          column: 18
        },
        end: {
          line: 32,
          column: 40
        }
      },
      "16": {
        start: {
          line: 33,
          column: 21
        },
        end: {
          line: 33,
          column: 46
        }
      },
      "17": {
        start: {
          line: 34,
          column: 22
        },
        end: {
          line: 34,
          column: 48
        }
      },
      "18": {
        start: {
          line: 35,
          column: 23
        },
        end: {
          line: 35,
          column: 50
        }
      },
      "19": {
        start: {
          line: 36,
          column: 23
        },
        end: {
          line: 36,
          column: 50
        }
      },
      "20": {
        start: {
          line: 37,
          column: 24
        },
        end: {
          line: 37,
          column: 52
        }
      },
      "21": {
        start: {
          line: 38,
          column: 24
        },
        end: {
          line: 38,
          column: 26
        }
      },
      "22": {
        start: {
          line: 43,
          column: 4
        },
        end: {
          line: 116,
          column: 5
        }
      },
      "23": {
        start: {
          line: 44,
          column: 22
        },
        end: {
          line: 44,
          column: 27
        }
      },
      "24": {
        start: {
          line: 45,
          column: 17
        },
        end: {
          line: 45,
          column: 18
        }
      },
      "25": {
        start: {
          line: 47,
          column: 6
        },
        end: {
          line: 69,
          column: 7
        }
      },
      "26": {
        start: {
          line: 47,
          column: 19
        },
        end: {
          line: 47,
          column: 20
        }
      },
      "27": {
        start: {
          line: 48,
          column: 23
        },
        end: {
          line: 48,
          column: 35
        }
      },
      "28": {
        start: {
          line: 49,
          column: 30
        },
        end: {
          line: 49,
          column: 44
        }
      },
      "29": {
        start: {
          line: 50,
          column: 28
        },
        end: {
          line: 50,
          column: 49
        }
      },
      "30": {
        start: {
          line: 51,
          column: 23
        },
        end: {
          line: 51,
          column: 47
        }
      },
      "31": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 59,
          column: 9
        }
      },
      "32": {
        start: {
          line: 54,
          column: 10
        },
        end: {
          line: 54,
          column: 37
        }
      },
      "33": {
        start: {
          line: 55,
          column: 10
        },
        end: {
          line: 55,
          column: 47
        }
      },
      "34": {
        start: {
          line: 56,
          column: 10
        },
        end: {
          line: 58,
          column: 13
        }
      },
      "35": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 68,
          column: 22
        }
      },
      "36": {
        start: {
          line: 71,
          column: 6
        },
        end: {
          line: 80,
          column: 10
        }
      },
      "37": {
        start: {
          line: 81,
          column: 6
        },
        end: {
          line: 81,
          column: 15
        }
      },
      "38": {
        start: {
          line: 82,
          column: 11
        },
        end: {
          line: 116,
          column: 5
        }
      },
      "39": {
        start: {
          line: 87,
          column: 23
        },
        end: {
          line: 87,
          column: 28
        }
      },
      "40": {
        start: {
          line: 89,
          column: 6
        },
        end: {
          line: 109,
          column: 7
        }
      },
      "41": {
        start: {
          line: 89,
          column: 20
        },
        end: {
          line: 89,
          column: 21
        }
      },
      "42": {
        start: {
          line: 90,
          column: 24
        },
        end: {
          line: 90,
          column: 37
        }
      },
      "43": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 108,
          column: 9
        }
      },
      "44": {
        start: {
          line: 93,
          column: 33
        },
        end: {
          line: 93,
          column: 48
        }
      },
      "45": {
        start: {
          line: 94,
          column: 24
        },
        end: {
          line: 94,
          column: 48
        }
      },
      "46": {
        start: {
          line: 95,
          column: 25
        },
        end: {
          line: 95,
          column: 50
        }
      },
      "47": {
        start: {
          line: 96,
          column: 26
        },
        end: {
          line: 96,
          column: 51
        }
      },
      "48": {
        start: {
          line: 97,
          column: 29
        },
        end: {
          line: 97,
          column: 51
        }
      },
      "49": {
        start: {
          line: 98,
          column: 30
        },
        end: {
          line: 98,
          column: 59
        }
      },
      "50": {
        start: {
          line: 99,
          column: 24
        },
        end: {
          line: 99,
          column: 48
        }
      },
      "51": {
        start: {
          line: 100,
          column: 25
        },
        end: {
          line: 100,
          column: 135
        }
      },
      "52": {
        start: {
          line: 102,
          column: 10
        },
        end: {
          line: 107,
          column: 11
        }
      },
      "53": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 103,
          column: 39
        }
      },
      "54": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 106,
          column: 15
        }
      },
      "55": {
        start: {
          line: 112,
          column: 6
        },
        end: {
          line: 114,
          column: 10
        }
      },
      "56": {
        start: {
          line: 115,
          column: 6
        },
        end: {
          line: 115,
          column: 15
        }
      },
      "57": {
        start: {
          line: 119,
          column: 4
        },
        end: {
          line: 119,
          column: 29
        }
      },
      "58": {
        start: {
          line: 122,
          column: 2
        },
        end: {
          line: 122,
          column: 19
        }
      },
      "59": {
        start: {
          line: 125,
          column: 15
        },
        end: {
          line: 125,
          column: 25
        }
      },
      "60": {
        start: {
          line: 126,
          column: 0
        },
        end: {
          line: 126,
          column: 30
        }
      }
    },
    fnMap: {
      "0": {
        name: "cloneCell",
        decl: {
          start: {
            line: 22,
            column: 9
          },
          end: {
            line: 22,
            column: 18
          }
        },
        loc: {
          start: {
            line: 22,
            column: 32
          },
          end: {
            line: 24,
            column: 1
          }
        },
        line: 22
      },
      "1": {
        name: "mergeCells",
        decl: {
          start: {
            line: 26,
            column: 9
          },
          end: {
            line: 26,
            column: 19
          }
        },
        loc: {
          start: {
            line: 26,
            column: 27
          },
          end: {
            line: 123,
            column: 1
          }
        },
        line: 26
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 116,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 116,
            column: 5
          }
        }, {
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 116,
            column: 5
          }
        }],
        line: 43
      },
      "1": {
        loc: {
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 43,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 43,
            column: 18
          }
        }, {
          start: {
            line: 43,
            column: 22
          },
          end: {
            line: 43,
            column: 34
          }
        }],
        line: 43
      },
      "2": {
        loc: {
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 59,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 59,
            column: 9
          }
        }, {
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 59,
            column: 9
          }
        }],
        line: 53
      },
      "3": {
        loc: {
          start: {
            line: 82,
            column: 11
          },
          end: {
            line: 116,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 82,
            column: 11
          },
          end: {
            line: 116,
            column: 5
          }
        }, {
          start: {
            line: 82,
            column: 11
          },
          end: {
            line: 116,
            column: 5
          }
        }],
        line: 82
      },
      "4": {
        loc: {
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 108,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 108,
            column: 9
          }
        }, {
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 108,
            column: 9
          }
        }],
        line: 92
      },
      "5": {
        loc: {
          start: {
            line: 100,
            column: 25
          },
          end: {
            line: 100,
            column: 135
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 100,
            column: 66
          },
          end: {
            line: 100,
            column: 94
          }
        }, {
          start: {
            line: 100,
            column: 97
          },
          end: {
            line: 100,
            column: 135
          }
        }],
        line: 100
      },
      "6": {
        loc: {
          start: {
            line: 102,
            column: 10
          },
          end: {
            line: 107,
            column: 11
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 10
          },
          end: {
            line: 107,
            column: 11
          }
        }, {
          start: {
            line: 102,
            column: 10
          },
          end: {
            line: 107,
            column: 11
          }
        }],
        line: 102
      },
      "7": {
        loc: {
          start: {
            line: 102,
            column: 14
          },
          end: {
            line: 102,
            column: 135
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 102,
            column: 14
          },
          end: {
            line: 102,
            column: 21
          }
        }, {
          start: {
            line: 102,
            column: 25
          },
          end: {
            line: 102,
            column: 69
          }
        }, {
          start: {
            line: 102,
            column: 73
          },
          end: {
            line: 102,
            column: 86
          }
        }, {
          start: {
            line: 102,
            column: 90
          },
          end: {
            line: 102,
            column: 135
          }
        }],
        line: 102
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0, 0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "dd203a4fd84efb8065c01dfde1da546df4545773"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];

  cov_fap6egwd1 = function () {
    return actualCoverage;
  };

  return actualCoverage;
}

cov_fap6egwd1();

var _interopRequireDefault =
/* istanbul ignore next */
(cov_fap6egwd1().s[0]++, require("@babel/runtime/helpers/interopRequireDefault"));

var _interopRequireWildcard =
/* istanbul ignore next */
(cov_fap6egwd1().s[1]++, require("@babel/runtime/helpers/interopRequireWildcard"));

/* istanbul ignore next */
cov_fap6egwd1().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});

/* istanbul ignore next */
cov_fap6egwd1().s[3]++;
exports["default"] = void 0;
var React =
/* istanbul ignore next */
(cov_fap6egwd1().s[4]++, _interopRequireWildcard(require("react")));

var _isFunction =
/* istanbul ignore next */
(cov_fap6egwd1().s[5]++, _interopRequireDefault(require("lodash/isFunction")));

var _get =
/* istanbul ignore next */
(cov_fap6egwd1().s[6]++, _interopRequireDefault(require("lodash/get")));

var _ColumnGroup =
/* istanbul ignore next */
(cov_fap6egwd1().s[7]++, _interopRequireDefault(require("../ColumnGroup")));

var _isNullOrUndefined =
/* istanbul ignore next */
(cov_fap6egwd1().s[8]++, _interopRequireDefault(require("./isNullOrUndefined")));

function cloneCell(Cell, props) {
  /* istanbul ignore next */
  cov_fap6egwd1().f[0]++;
  cov_fap6egwd1().s[9]++;
  return React.cloneElement(Cell, props);
}

function mergeCells(cells) {
  /* istanbul ignore next */
  cov_fap6egwd1().f[1]++;
  var nextCells =
  /* istanbul ignore next */
  (cov_fap6egwd1().s[10]++, []);

  /* istanbul ignore next */
  cov_fap6egwd1().s[11]++;

  for (var i =
  /* istanbul ignore next */
  (cov_fap6egwd1().s[12]++, 0); i < cells.length; i += 1) {
    var _cells$i$props =
    /* istanbul ignore next */
    (cov_fap6egwd1().s[13]++, cells[i].props),
        width =
    /* istanbul ignore next */
    (cov_fap6egwd1().s[14]++, _cells$i$props.width),
        colSpan =
    /* istanbul ignore next */
    (cov_fap6egwd1().s[15]++, _cells$i$props.colSpan),
        groupCount =
    /* istanbul ignore next */
    (cov_fap6egwd1().s[16]++, _cells$i$props.groupCount),
        groupHeader =
    /* istanbul ignore next */
    (cov_fap6egwd1().s[17]++, _cells$i$props.groupHeader),
        isHeaderCell =
    /* istanbul ignore next */
    (cov_fap6egwd1().s[18]++, _cells$i$props.isHeaderCell),
        headerHeight =
    /* istanbul ignore next */
    (cov_fap6egwd1().s[19]++, _cells$i$props.headerHeight),
        verticalAlign =
    /* istanbul ignore next */
    (cov_fap6egwd1().s[20]++, _cells$i$props.verticalAlign);

    var groupChildren =
    /* istanbul ignore next */
    (cov_fap6egwd1().s[21]++, []);
    /**
     * 为列头添加分组
     */

    /* istanbul ignore next */
    cov_fap6egwd1().s[22]++;

    if (
    /* istanbul ignore next */
    (cov_fap6egwd1().b[1][0]++, groupCount) &&
    /* istanbul ignore next */
    (cov_fap6egwd1().b[1][1]++, isHeaderCell)) {
      /* istanbul ignore next */
      cov_fap6egwd1().b[0][0]++;
      var nextWidth =
      /* istanbul ignore next */
      (cov_fap6egwd1().s[23]++, width);
      var left =
      /* istanbul ignore next */
      (cov_fap6egwd1().s[24]++, 0);

      /* istanbul ignore next */
      cov_fap6egwd1().s[25]++;

      for (var j =
      /* istanbul ignore next */
      (cov_fap6egwd1().s[26]++, 0); j < groupCount; j += 1) {
        var nextCell =
        /* istanbul ignore next */
        (cov_fap6egwd1().s[27]++, cells[i + j]);

        var _nextCell$props =
        /* istanbul ignore next */
        (cov_fap6egwd1().s[28]++, nextCell.props),
            nextCellWidth =
        /* istanbul ignore next */
        (cov_fap6egwd1().s[29]++, _nextCell$props.width),
            children =
        /* istanbul ignore next */
        (cov_fap6egwd1().s[30]++, _nextCell$props.children);

        /* istanbul ignore next */
        cov_fap6egwd1().s[31]++;

        if (j !== 0) {
          /* istanbul ignore next */
          cov_fap6egwd1().b[2][0]++;
          cov_fap6egwd1().s[32]++;
          nextWidth += nextCellWidth;

          /* istanbul ignore next */
          cov_fap6egwd1().s[33]++;
          left += cells[i + j - 1].props.width;

          /* istanbul ignore next */
          cov_fap6egwd1().s[34]++;
          cells[i + j] = cloneCell(nextCell, {
            removed: true
          });
        } else
        /* istanbul ignore next */
        {
          cov_fap6egwd1().b[2][1]++;
        }

        cov_fap6egwd1().s[35]++;
        groupChildren.push( // @ts-ignore
        React.createElement("div", {
          key: j,
          style: {
            width: nextCellWidth,
            left: left
          }
        }, children));
      }

      /* istanbul ignore next */
      cov_fap6egwd1().s[36]++;
      nextCells.push( // @ts-ignore
      cloneCell(cells[i], {
        width: nextWidth,
        children: React.createElement(_ColumnGroup["default"], {
          width: nextWidth,
          headerHeight: headerHeight,
          header: groupHeader,
          verticalAlign: verticalAlign
        }, groupChildren)
      }));

      /* istanbul ignore next */
      cov_fap6egwd1().s[37]++;
      continue;
    } else {
      /* istanbul ignore next */
      cov_fap6egwd1().b[0][1]++;
      cov_fap6egwd1().s[38]++;

      if (colSpan) {
        /* istanbul ignore next */
        cov_fap6egwd1().b[3][0]++;

        /**
         * 如果存在 colSpan 属性，就去找它的下一个 Cell,
         * 看看值是否是 isNullOrUndefined，，如果为空这可以合并这个单元格
         */
        var _nextWidth =
        /* istanbul ignore next */
        (cov_fap6egwd1().s[39]++, width);

        /* istanbul ignore next */
        cov_fap6egwd1().s[40]++;

        for (var _j =
        /* istanbul ignore next */
        (cov_fap6egwd1().s[41]++, 0); _j < colSpan; _j += 1) {
          var _nextCell =
          /* istanbul ignore next */
          (cov_fap6egwd1().s[42]++, cells[i + _j]);

          /* istanbul ignore next */
          cov_fap6egwd1().s[43]++;

          if (_nextCell) {
            /* istanbul ignore next */
            cov_fap6egwd1().b[4][0]++;

            var _nextCell$props2 =
            /* istanbul ignore next */
            (cov_fap6egwd1().s[44]++, _nextCell.props),
                rowData =
            /* istanbul ignore next */
            (cov_fap6egwd1().s[45]++, _nextCell$props2.rowData),
                rowIndex =
            /* istanbul ignore next */
            (cov_fap6egwd1().s[46]++, _nextCell$props2.rowIndex),
                _children =
            /* istanbul ignore next */
            (cov_fap6egwd1().s[47]++, _nextCell$props2.children),
                colSpanWidth =
            /* istanbul ignore next */
            (cov_fap6egwd1().s[48]++, _nextCell$props2.width),
                _isHeaderCell =
            /* istanbul ignore next */
            (cov_fap6egwd1().s[49]++, _nextCell$props2.isHeaderCell),
                dataKey =
            /* istanbul ignore next */
            (cov_fap6egwd1().s[50]++, _nextCell$props2.dataKey);

            var cellText =
            /* istanbul ignore next */
            (cov_fap6egwd1().s[51]++, (0, _isFunction["default"])(_children) ?
            /* istanbul ignore next */
            (cov_fap6egwd1().b[5][0]++, _children(rowData, rowIndex)) :
            /* istanbul ignore next */
            (cov_fap6egwd1().b[5][1]++, (0, _get["default"])(rowData, dataKey)));

            /* istanbul ignore next */
            cov_fap6egwd1().s[52]++;

            if (
            /* istanbul ignore next */
            (cov_fap6egwd1().b[7][0]++, rowData) &&
            /* istanbul ignore next */
            (cov_fap6egwd1().b[7][1]++, (0, _isNullOrUndefined["default"])(cellText)) ||
            /* istanbul ignore next */
            (cov_fap6egwd1().b[7][2]++, _isHeaderCell) &&
            /* istanbul ignore next */
            (cov_fap6egwd1().b[7][3]++, (0, _isNullOrUndefined["default"])(_children))) {
              /* istanbul ignore next */
              cov_fap6egwd1().b[6][0]++;
              cov_fap6egwd1().s[53]++;
              _nextWidth += colSpanWidth;

              /* istanbul ignore next */
              cov_fap6egwd1().s[54]++;
              cells[i + _j] = cloneCell(_nextCell, {
                removed: true
              });
            } else
            /* istanbul ignore next */
            {
              cov_fap6egwd1().b[6][1]++;
            }
          } else
          /* istanbul ignore next */
          {
            cov_fap6egwd1().b[4][1]++;
          }
        } // @ts-ignore


        /* istanbul ignore next */
        cov_fap6egwd1().s[55]++;
        nextCells.push(cloneCell(cells[i], {
          width: _nextWidth
        }));

        /* istanbul ignore next */
        cov_fap6egwd1().s[56]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_fap6egwd1().b[3][1]++;
      }
    } // @ts-ignore


    /* istanbul ignore next */
    cov_fap6egwd1().s[57]++;
    nextCells.push(cells[i]);
  }

  /* istanbul ignore next */
  cov_fap6egwd1().s[58]++;
  return nextCells;
}

var _default =
/* istanbul ignore next */
(cov_fap6egwd1().s[59]++, mergeCells);

/* istanbul ignore next */
cov_fap6egwd1().s[60]++;
exports["default"] = _default;