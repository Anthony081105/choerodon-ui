{"version":3,"sources":["tree/DirectoryTree.js"],"names":["isLeaf","expanded","prefixCls","props","prefixCl","Icon","type","className","treeData","children","DirectoryTree","React","Component","onExpand","expandedKeys","onClick","expandAction","onDoubleClick","onSelect","multiple","node","nativeEvent","event","key","getTreeData","newState","newEvent","selected","ctrlPick","shiftPick","newSelectedKeys","Array","internalTree","Object","selectedKeys","connectClassName","Tree","icon","ref","blockNode","defaultExpandAll","defaultExpandParent","defaultExpandedKeys","keyEntities","leading","nextProps","showIcon"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\nimport omit from 'lodash/omit';\nimport debounce from 'lodash/debounce';\nimport Icon from '../icon';\nimport { conductExpandParent } from '../rc-components/tree/util';\nimport { convertDataToEntities, convertTreeToData } from '../rc-components/tree/utils/treeUtil';\nimport { getPrefixCls } from '../configure';\nimport Tree from './index';\nimport { calcRangeKeys, convertDirectoryKeysToNodes } from './utils/dictUtil';\nfunction getIcon(props) {\n    const { isLeaf, expanded, prefixCls } = props;\n    const prefixCl = getPrefixCls('tree', prefixCls);\n    if (isLeaf) {\n        return React.createElement(Icon, { type: \"insert_drive_file\", className: `${prefixCl}-switcher-line-icon` });\n    }\n    return expanded ? React.createElement(Icon, { type: \"baseline-file_copy\", className: `${prefixCl}-switcher-line-icon` }) : React.createElement(Icon, { type: \"library_books\", className: `${prefixCl}-switcher-line-icon` });\n}\nfunction getTreeData({ treeData, children }) {\n    return treeData || convertTreeToData(children);\n}\nclass DirectoryTree extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onExpand = (expandedKeys, info) => {\n            const { onExpand } = this.props;\n            this.setUncontrolledState({ expandedKeys });\n            // Call origin function\n            if (onExpand) {\n                return onExpand(expandedKeys, info);\n            }\n            return undefined;\n        };\n        this.onClick = (event, node) => {\n            const { onClick, expandAction } = this.props;\n            // Expand the tree\n            if (expandAction === 'click') {\n                this.onDebounceExpand(event, node);\n            }\n            if (onClick) {\n                onClick(event, node);\n            }\n        };\n        this.onDoubleClick = (event, node) => {\n            const { onDoubleClick, expandAction } = this.props;\n            // Expand the tree\n            if (expandAction === 'doubleClick') {\n                this.onDebounceExpand(event, node);\n            }\n            if (onDoubleClick) {\n                onDoubleClick(event, node);\n            }\n        };\n        this.onSelect = (keys, event) => {\n            const { onSelect, multiple } = this.props;\n            const { expandedKeys = [] } = this.state;\n            const { node, nativeEvent } = event;\n            const { key = '' } = node;\n            const treeData = getTreeData(this.props);\n            const newState = {};\n            // We need wrap this event since some value is not same\n            const newEvent = {\n                ...event,\n                selected: true,\n            };\n            // Windows / Mac single pick\n            const ctrlPick = nativeEvent.ctrlKey || nativeEvent.metaKey;\n            const shiftPick = nativeEvent.shiftKey;\n            // Generate new selected keys\n            let newSelectedKeys;\n            if (multiple && ctrlPick) {\n                // Control click\n                newSelectedKeys = keys;\n                this.lastSelectedKey = key;\n                this.cachedSelectedKeys = newSelectedKeys;\n                newEvent.selectedNodes = convertDirectoryKeysToNodes(treeData, newSelectedKeys);\n            }\n            else if (multiple && shiftPick) {\n                // Shift click\n                newSelectedKeys = Array.from(new Set([\n                    ...(this.cachedSelectedKeys || []),\n                    ...calcRangeKeys(treeData, expandedKeys, key, this.lastSelectedKey),\n                ]));\n                newEvent.selectedNodes = convertDirectoryKeysToNodes(treeData, newSelectedKeys);\n            }\n            else {\n                // Single click\n                newSelectedKeys = [key];\n                this.lastSelectedKey = key;\n                this.cachedSelectedKeys = newSelectedKeys;\n                newEvent.selectedNodes = convertDirectoryKeysToNodes(treeData, newSelectedKeys);\n            }\n            newState.selectedKeys = newSelectedKeys;\n            if (onSelect) {\n                onSelect(newSelectedKeys, newEvent);\n            }\n            this.setUncontrolledState(newState);\n        };\n        this.setTreeRef = (node) => {\n            this.tree = node;\n        };\n        this.expandFolderNode = (event, node) => {\n            const { isLeaf } = node;\n            if (isLeaf || event.shiftKey || event.metaKey || event.ctrlKey) {\n                return;\n            }\n            // Get internal rc-tree\n            const internalTree = this.tree.tree;\n            // Call internal rc-tree expand function\n            // https://github.com/C7n-design/C7n-design/issues/12567\n            internalTree.onNodeExpand(event, node);\n        };\n        this.setUncontrolledState = (state) => {\n            const newState = omit(state, Object.keys(this.props));\n            if (Object.keys(newState).length) {\n                this.setState(newState);\n            }\n        };\n        this.renderDirectoryTree = () => {\n            const { className, ...props } = this.props;\n            const { expandedKeys, selectedKeys } = this.state;\n            const prefixCls = this.getPrefixCls();\n            const connectClassName = classNames(`${prefixCls}-directory`, className, {\n                [`${prefixCls}-directory-rtl`]: true,\n            });\n            return (React.createElement(Tree, Object.assign({ icon: getIcon, ref: this.setTreeRef, blockNode: true }, props, { prefixCls: prefixCls, className: connectClassName, expandedKeys: expandedKeys, selectedKeys: selectedKeys, onSelect: this.onSelect, onClick: this.onClick, onDoubleClick: this.onDoubleClick, onExpand: this.onExpand })));\n        };\n        const { defaultExpandAll, defaultExpandParent, expandedKeys, defaultExpandedKeys } = props;\n        const { keyEntities } = convertDataToEntities(getTreeData(props));\n        // Selected keys\n        this.state = {\n            selectedKeys: props.selectedKeys || props.defaultSelectedKeys || [],\n        };\n        // Expanded keys\n        if (defaultExpandAll) {\n            this.state.expandedKeys = Object.keys(keyEntities);\n        }\n        else if (defaultExpandParent) {\n            this.state.expandedKeys = conductExpandParent(expandedKeys || defaultExpandedKeys || [], keyEntities);\n        }\n        else {\n            this.state.expandedKeys = expandedKeys || defaultExpandedKeys;\n        }\n        this.onDebounceExpand = debounce(this.expandFolderNode, 200, {\n            leading: true,\n        });\n    }\n    static getDerivedStateFromProps(nextProps) {\n        const newState = {};\n        if ('expandedKeys' in nextProps) {\n            newState.expandedKeys = nextProps.expandedKeys;\n        }\n        if ('selectedKeys' in nextProps) {\n            newState.selectedKeys = nextProps.selectedKeys;\n        }\n        return newState;\n    }\n    getPrefixCls() {\n        const { prefixCls } = this.props;\n        return getPrefixCls('tree', prefixCls);\n    }\n    render() {\n        return this.renderDirectoryTree();\n    }\n}\nDirectoryTree.defaultProps = {\n    showIcon: true,\n    expandAction: 'click',\n};\nexport default DirectoryTree;\n"]}