05b13189f74154f39b49c9ea22b21f04
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = autobind;

var _weakMap = _interopRequireDefault(require("core-js/library/fn/weak-map"));

var _createDefaultSetter = _interopRequireDefault(require("./createDefaultSetter"));

var mapStore;

function bind(fn, context) {
  if (fn.bind) {
    return fn.bind(context);
  }

  return function __autobind__() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return fn.apply(context, args);
  };
}

function getBoundSuper(obj, fn) {
  if (typeof _weakMap["default"] === 'undefined') {
    throw new Error("Using @autobind on ".concat(fn.name, "() requires WeakMap support due to its use of super.").concat(fn.name, "()\n      See https://github.com/jayphelps/core-decorators.js/issues/20"));
  }

  if (!mapStore) {
    mapStore = new _weakMap["default"]();
  }

  if (mapStore.has(obj) === false) {
    mapStore.set(obj, new _weakMap["default"]());
  }

  var superStore = mapStore.get(obj);

  if (superStore.has(fn) === false) {
    superStore.set(fn, bind(fn, obj));
  }

  return superStore.get(fn);
}
/**
 * 绑定方法的this指向当前对象实例.
 *
 * @private
 * @param {Function} target 方法对象
 * @param {string} key 方法名.
 * @param {Object} descriptor 方法描述对象.
 * @returns {Object} 方法描述对象.
 */


function autobind(target, key, descriptor) {
  var constructor = target.constructor;
  var fn = descriptor.value,
      configurable = descriptor.configurable,
      enumerable = descriptor.enumerable;
  return {
    configurable: configurable,
    enumerable: enumerable,
    get: function get() {
      // Class.prototype.key lookup
      // Someone accesses the property directly on the prototype on which it is
      // actually defined on, i.e. Class.prototype.hasOwnProperty(key)
      if (this === target) {
        return fn;
      } // Class.prototype.key lookup
      // Someone accesses the property directly on a prototype but it was found
      // up the chain, not defined directly on it
      // i.e. Class.prototype.hasOwnProperty(key) == false && key in Class.prototype


      if (this.constructor !== constructor && Object.getPrototypeOf(this).constructor === constructor) {
        return fn;
      } // Autobound method calling super.sameMethod() which is also autobound and so on.


      if (this.constructor !== constructor && key in this.constructor.prototype) {
        return getBoundSuper(this, fn);
      }

      var boundFn = bind(fn, this);
      Object.defineProperty(this, key, {
        configurable: true,
        writable: true,
        // NOT enumerable when it's a bound method
        enumerable: false,
        value: boundFn
      });
      return boundFn;
    },
    set: (0, _createDefaultSetter["default"])(key)
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl91dGlsL2F1dG9iaW5kLmpzIl0sIm5hbWVzIjpbImZuIiwiYXJncyIsIldlYWtNYXAiLCJtYXBTdG9yZSIsInN1cGVyU3RvcmUiLCJiaW5kIiwiY29uc3RydWN0b3IiLCJ0YXJnZXQiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZGVzY3JpcHRvciIsImdldCIsIk9iamVjdCIsImtleSIsImdldEJvdW5kU3VwZXIiLCJib3VuZEZuIiwid3JpdGFibGUiLCJ2YWx1ZSIsInNldCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsSUFBQSxRQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLENBQUEsNkJBQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsb0JBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUEsQ0FBQSx1QkFBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxRQUFBOztBQUNBLFNBQUEsSUFBQSxDQUFBLEVBQUEsRUFBQSxPQUFBLEVBQTJCO0FBQ3ZCLE1BQUlBLEVBQUUsQ0FBTixJQUFBLEVBQWE7QUFDVCxXQUFPQSxFQUFFLENBQUZBLElBQUFBLENBQVAsT0FBT0EsQ0FBUDtBQUNIOztBQUNELFNBQU8sU0FBQSxZQUFBLEdBQStCO0FBQUEsU0FBQSxJQUFBLElBQUEsR0FBQSxTQUFBLENBQUEsTUFBQSxFQUFOQyxJQUFNLEdBQUEsSUFBQSxLQUFBLENBQUEsSUFBQSxDQUFBLEVBQUEsSUFBQSxHQUFBLENBQUEsRUFBQSxJQUFBLEdBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxFQUFBO0FBQU5BLE1BQUFBLElBQU0sQ0FBQSxJQUFBLENBQU5BLEdBQU0sU0FBQSxDQUFBLElBQUEsQ0FBTkE7QUFBTTs7QUFDbEMsV0FBT0QsRUFBRSxDQUFGQSxLQUFBQSxDQUFBQSxPQUFBQSxFQUFQLElBQU9BLENBQVA7QUFESixHQUFBO0FBR0g7O0FBQ0QsU0FBQSxhQUFBLENBQUEsR0FBQSxFQUFBLEVBQUEsRUFBZ0M7QUFDNUIsTUFBSSxPQUFPRSxRQUFBQSxDQUFQLFNBQU9BLENBQVAsS0FBSixXQUFBLEVBQW9DO0FBQ2hDLFVBQU0sSUFBQSxLQUFBLENBQUEsc0JBQUEsTUFBQSxDQUFnQ0YsRUFBRSxDQUFsQyxJQUFBLEVBQUEsc0RBQUEsRUFBQSxNQUFBLENBQThGQSxFQUFFLENBQWhHLElBQUEsRUFBTix5RUFBTSxDQUFBLENBQU47QUFFSDs7QUFDRCxNQUFJLENBQUosUUFBQSxFQUFlO0FBQ1hHLElBQUFBLFFBQVEsR0FBRyxJQUFJRCxRQUFBQSxDQUFmQyxTQUFlRCxDQUFKLEVBQVhDO0FBQ0g7O0FBQ0QsTUFBSUEsUUFBUSxDQUFSQSxHQUFBQSxDQUFBQSxHQUFBQSxNQUFKLEtBQUEsRUFBaUM7QUFDN0JBLElBQUFBLFFBQVEsQ0FBUkEsR0FBQUEsQ0FBQUEsR0FBQUEsRUFBa0IsSUFBSUQsUUFBQUEsQ0FBdEJDLFNBQXNCRCxDQUFKLEVBQWxCQztBQUNIOztBQUNELE1BQU1DLFVBQVUsR0FBR0QsUUFBUSxDQUFSQSxHQUFBQSxDQUFuQixHQUFtQkEsQ0FBbkI7O0FBQ0EsTUFBSUMsVUFBVSxDQUFWQSxHQUFBQSxDQUFBQSxFQUFBQSxNQUFKLEtBQUEsRUFBa0M7QUFDOUJBLElBQUFBLFVBQVUsQ0FBVkEsR0FBQUEsQ0FBQUEsRUFBQUEsRUFBbUJDLElBQUksQ0FBQSxFQUFBLEVBQXZCRCxHQUF1QixDQUF2QkE7QUFDSDs7QUFDRCxTQUFPQSxVQUFVLENBQVZBLEdBQUFBLENBQVAsRUFBT0EsQ0FBUDtBQUNIO0FBQ0Q7Ozs7Ozs7Ozs7O0FBU2UsU0FBQSxRQUFBLENBQUEsTUFBQSxFQUFBLEdBQUEsRUFBQSxVQUFBLEVBQTJDO0FBQUEsTUFDOUNFLFdBRDhDLEdBQzlCQyxNQUQ4QixDQUFBLFdBQUE7QUFBQSxNQUV2Q1AsRUFGdUMsR0FFTlUsVUFGTSxDQUFBLEtBQUE7QUFBQSxNQUVuQ0YsWUFGbUMsR0FFTkUsVUFGTSxDQUFBLFlBQUE7QUFBQSxNQUVyQkQsVUFGcUIsR0FFTkMsVUFGTSxDQUFBLFVBQUE7QUFHdEQsU0FBTztBQUNIRixJQUFBQSxZQUFZLEVBRFQsWUFBQTtBQUVIQyxJQUFBQSxVQUFVLEVBRlAsVUFBQTtBQUdIRSxJQUFBQSxHQUhHLEVBQUEsU0FBQSxHQUFBLEdBR0c7QUFDRjtBQUNBO0FBQ0E7QUFDQSxVQUFJLFNBQUosTUFBQSxFQUFxQjtBQUNqQixlQUFBLEVBQUE7QUFMRixPQUFBLENBT0Y7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLFVBQUksS0FBQSxXQUFBLEtBQUEsV0FBQSxJQUNBQyxNQUFNLENBQU5BLGNBQUFBLENBQUFBLElBQUFBLEVBQUFBLFdBQUFBLEtBREosV0FBQSxFQUM2RDtBQUN6RCxlQUFBLEVBQUE7QUFiRixPQUFBLENBZUY7OztBQUNBLFVBQUksS0FBQSxXQUFBLEtBQUEsV0FBQSxJQUFvQ0MsR0FBRyxJQUFJLEtBQUEsV0FBQSxDQUEvQyxTQUFBLEVBQTJFO0FBQ3ZFLGVBQU9DLGFBQWEsQ0FBQSxJQUFBLEVBQXBCLEVBQW9CLENBQXBCO0FBQ0g7O0FBQ0QsVUFBTUMsT0FBTyxHQUFHVixJQUFJLENBQUEsRUFBQSxFQUFwQixJQUFvQixDQUFwQjtBQUNBTyxNQUFBQSxNQUFNLENBQU5BLGNBQUFBLENBQUFBLElBQUFBLEVBQUFBLEdBQUFBLEVBQWlDO0FBQzdCSixRQUFBQSxZQUFZLEVBRGlCLElBQUE7QUFFN0JRLFFBQUFBLFFBQVEsRUFGcUIsSUFBQTtBQUc3QjtBQUNBUCxRQUFBQSxVQUFVLEVBSm1CLEtBQUE7QUFLN0JRLFFBQUFBLEtBQUssRUFBRUY7QUFMc0IsT0FBakNIO0FBT0EsYUFBQSxPQUFBO0FBOUJELEtBQUE7QUFnQ0hNLElBQUFBLEdBQUcsRUFBRSxDQUFBLEdBQUEsb0JBQUEsQ0FBQSxTQUFBLENBQUEsRUFBQSxHQUFBO0FBaENGLEdBQVA7QUFrQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgV2Vha01hcCBmcm9tICdjb3JlLWpzL2xpYnJhcnkvZm4vd2Vhay1tYXAnO1xuaW1wb3J0IGNyZWF0ZURlZmF1bHRTZXR0ZXIgZnJvbSAnLi9jcmVhdGVEZWZhdWx0U2V0dGVyJztcbmxldCBtYXBTdG9yZTtcbmZ1bmN0aW9uIGJpbmQoZm4sIGNvbnRleHQpIHtcbiAgICBpZiAoZm4uYmluZCkge1xuICAgICAgICByZXR1cm4gZm4uYmluZChjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIF9fYXV0b2JpbmRfXyguLi5hcmdzKSB7XG4gICAgICAgIHJldHVybiBmbi5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICB9O1xufVxuZnVuY3Rpb24gZ2V0Qm91bmRTdXBlcihvYmosIGZuKSB7XG4gICAgaWYgKHR5cGVvZiBXZWFrTWFwID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVzaW5nIEBhdXRvYmluZCBvbiAke2ZuLm5hbWV9KCkgcmVxdWlyZXMgV2Vha01hcCBzdXBwb3J0IGR1ZSB0byBpdHMgdXNlIG9mIHN1cGVyLiR7Zm4ubmFtZX0oKVxuICAgICAgU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qYXlwaGVscHMvY29yZS1kZWNvcmF0b3JzLmpzL2lzc3Vlcy8yMGApO1xuICAgIH1cbiAgICBpZiAoIW1hcFN0b3JlKSB7XG4gICAgICAgIG1hcFN0b3JlID0gbmV3IFdlYWtNYXAoKTtcbiAgICB9XG4gICAgaWYgKG1hcFN0b3JlLmhhcyhvYmopID09PSBmYWxzZSkge1xuICAgICAgICBtYXBTdG9yZS5zZXQob2JqLCBuZXcgV2Vha01hcCgpKTtcbiAgICB9XG4gICAgY29uc3Qgc3VwZXJTdG9yZSA9IG1hcFN0b3JlLmdldChvYmopO1xuICAgIGlmIChzdXBlclN0b3JlLmhhcyhmbikgPT09IGZhbHNlKSB7XG4gICAgICAgIHN1cGVyU3RvcmUuc2V0KGZuLCBiaW5kKGZuLCBvYmopKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyU3RvcmUuZ2V0KGZuKTtcbn1cbi8qKlxuICog57uR5a6a5pa55rOV55qEdGhpc+aMh+WQkeW9k+WJjeWvueixoeWunuS+iy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gdGFyZ2V0IOaWueazleWvueixoVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSDmlrnms5XlkI0uXG4gKiBAcGFyYW0ge09iamVjdH0gZGVzY3JpcHRvciDmlrnms5Xmj4/ov7Dlr7nosaEuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSDmlrnms5Xmj4/ov7Dlr7nosaEuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGF1dG9iaW5kKHRhcmdldCwga2V5LCBkZXNjcmlwdG9yKSB7XG4gICAgY29uc3QgeyBjb25zdHJ1Y3RvciB9ID0gdGFyZ2V0O1xuICAgIGNvbnN0IHsgdmFsdWU6IGZuLCBjb25maWd1cmFibGUsIGVudW1lcmFibGUgfSA9IGRlc2NyaXB0b3I7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY29uZmlndXJhYmxlLFxuICAgICAgICBlbnVtZXJhYmxlLFxuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICAvLyBDbGFzcy5wcm90b3R5cGUua2V5IGxvb2t1cFxuICAgICAgICAgICAgLy8gU29tZW9uZSBhY2Nlc3NlcyB0aGUgcHJvcGVydHkgZGlyZWN0bHkgb24gdGhlIHByb3RvdHlwZSBvbiB3aGljaCBpdCBpc1xuICAgICAgICAgICAgLy8gYWN0dWFsbHkgZGVmaW5lZCBvbiwgaS5lLiBDbGFzcy5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkoa2V5KVxuICAgICAgICAgICAgaWYgKHRoaXMgPT09IHRhcmdldCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIENsYXNzLnByb3RvdHlwZS5rZXkgbG9va3VwXG4gICAgICAgICAgICAvLyBTb21lb25lIGFjY2Vzc2VzIHRoZSBwcm9wZXJ0eSBkaXJlY3RseSBvbiBhIHByb3RvdHlwZSBidXQgaXQgd2FzIGZvdW5kXG4gICAgICAgICAgICAvLyB1cCB0aGUgY2hhaW4sIG5vdCBkZWZpbmVkIGRpcmVjdGx5IG9uIGl0XG4gICAgICAgICAgICAvLyBpLmUuIENsYXNzLnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eShrZXkpID09IGZhbHNlICYmIGtleSBpbiBDbGFzcy5wcm90b3R5cGVcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yICE9PSBjb25zdHJ1Y3RvciAmJlxuICAgICAgICAgICAgICAgIE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvciA9PT0gY29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBBdXRvYm91bmQgbWV0aG9kIGNhbGxpbmcgc3VwZXIuc2FtZU1ldGhvZCgpIHdoaWNoIGlzIGFsc28gYXV0b2JvdW5kIGFuZCBzbyBvbi5cbiAgICAgICAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yICE9PSBjb25zdHJ1Y3RvciAmJiBrZXkgaW4gdGhpcy5jb25zdHJ1Y3Rvci5wcm90b3R5cGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0Qm91bmRTdXBlcih0aGlzLCBmbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBib3VuZEZuID0gYmluZChmbiwgdGhpcyk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywga2V5LCB7XG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIC8vIE5PVCBlbnVtZXJhYmxlIHdoZW4gaXQncyBhIGJvdW5kIG1ldGhvZFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBib3VuZEZuLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gYm91bmRGbjtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBjcmVhdGVEZWZhdWx0U2V0dGVyKGtleSksXG4gICAgfTtcbn1cbiJdfQ==