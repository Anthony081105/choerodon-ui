{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components/tree/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, {\n  cloneElement,\n  Component,\n  CSSProperties,\n  ReactElement,\n  ReactNode,\n  MouseEvent,\n  DragEvent,\n} from 'react';\nimport classNames from 'classnames';\nimport DirectoryTree from './DirectoryTree';\nimport animation from '../_util/openAnimation';\nimport RcTree, { TreeNode, TreeProps as RcTreeProps } from '../rc-components/tree';\nimport {TreeNodeProps} from '../rc-components/tree/TreeNode'\nimport Icon from '../icon';\nimport Progress from '../progress';\nimport { ProgressType } from '../progress/enum';\nimport { Size } from '../_util/enum';\nimport { getPrefixCls } from '../configure';\nimport { EventDataNode, DataNode } from '../rc-components/tree/interface';\n\nexport { TreeNode };\n\nexport {EventDataNode,DataNode,TreeNodeProps}\n\nexport { ExpandAction as DirectoryTreeExpandAction, DirectoryTreeProps } from './DirectoryTree';\n\n\n\nexport interface C7ndTreeNodeAttribute {\n  eventKey: string;\n  prefixCls: string;\n  className: string;\n  expanded: boolean;\n  selected: boolean;\n  checked: boolean;\n  halfChecked: boolean;\n  children: ReactNode;\n  title: ReactNode;\n  pos: string;\n  dragOver: boolean;\n  dragOverGapTop: boolean;\n  dragOverGapBottom: boolean;\n  isLeaf: boolean;\n  selectable: boolean;\n  disabled: boolean;\n  disableCheckbox: boolean;\n}\n\nexport interface C7nTreeNodeProps {\n  className?: string;\n  checkable?: boolean;\n  disabled?: boolean;\n  disableCheckbox?: boolean;\n  title?: string | ReactNode;\n  key?: string;\n  eventKey?: string;\n  isLeaf?: boolean;\n  checked?: boolean;\n  expanded?: boolean;\n  loading?: boolean;\n  selected?: boolean;\n  selectable?: boolean;\n  icon?: ((treeNode: C7ndTreeNodeAttribute) => ReactNode) | ReactNode;\n  children?: ReactNode;\n  [customProp: string]: any;\n}\n\nexport interface C7nTreeNode extends Component<C7nTreeNodeProps, {}> {}\n\nexport interface C7nTreeNodeBaseEvent {\n  node: C7nTreeNode;\n  nativeEvent: MouseEvent;\n}\n\nexport interface C7nTreeNodeCheckedEvent extends C7nTreeNodeBaseEvent {\n  event: 'check';\n  checked?: boolean;\n  checkedNodes?: C7nTreeNode[];\n}\n\nexport interface C7nTreeNodeSelectedEvent extends C7nTreeNodeBaseEvent {\n  event: 'select';\n  selected?: boolean;\n  selectedNodes?: DataNode[];\n}\n\nexport interface C7nTreeNodeExpandedEvent extends C7nTreeNodeBaseEvent {\n  expanded?: boolean;\n}\n\nexport interface C7nTreeNodeMouseEvent {\n  node: C7nTreeNode;\n  event: DragEvent<HTMLElement>;\n}\n\nexport interface C7nTreeNodeDragEnterEvent extends C7nTreeNodeMouseEvent {\n  expandedKeys: string[];\n}\n\nexport interface C7nTreeNodeDropEvent {\n  node: C7nTreeNode;\n  dragNode: C7nTreeNode;\n  dragNodesKeys: string[];\n  dropPosition: number;\n  dropToGap?: boolean;\n  event: MouseEvent<HTMLElement>;\n}\n\n// [Legacy] Compatible for v3\nexport type TreeNodeNormal = DataNode;\n\nexport interface TreeProps extends Omit<RcTreeProps, 'prefixCls'> {\n  showLine?: boolean;\n  className?: string;\n  /** 是否支持多选 */\n  multiple?: boolean;\n  /** 是否自动展开父节点 */\n  autoExpandParent?: boolean;\n  /** checkable状态下节点选择完全受控（父子节点选中状态不再关联） */\n  checkStrictly?: boolean;\n  /** 是否支持选中 */\n  checkable?: boolean;\n  /** 是否禁用树 */\n  disabled?: boolean;\n  /** 默认展开所有树节点 */\n  defaultExpandAll?: boolean;\n  /** 默认展开对应树节点 */\n  defaultExpandParent?: boolean;\n  /** 默认展开指定的树节点 */\n  defaultExpandedKeys?: string[];\n  /** （受控）展开指定的树节点 */\n  expandedKeys?: string[];\n  /** （受控）选中复选框的树节点 */\n  checkedKeys?: string[] | { checked: string[]; halfChecked: string[] };\n  /** 默认选中复选框的树节点 */\n  defaultCheckedKeys?: string[];\n  /** （受控）设置选中的树节点 */\n  selectedKeys?: string[];\n  /** 默认选中的树节点 */\n  defaultSelectedKeys?: string[];\n  selectable?: boolean;\n  /** 点击树节点触发 */\n  filterC7nTreeNode?: (node: C7nTreeNode) => boolean;\n  loadedKeys?: string[];\n  /** 设置节点可拖拽（IE>8） */\n  draggable?: boolean;\n  style?: CSSProperties;\n  showIcon?: boolean;\n  icon?: ((nodeProps: C7ndTreeNodeAttribute) =>ReactNode) | ReactNode;\n  switcherIcon?: ReactElement<any>;\n  prefixCls?: string;\n  children?: ReactNode;\n  blockNode?: boolean;\n}\n\nexport default class Tree extends Component<TreeProps, any> {\n  static displayName = 'Tree';\n\n  static TreeNode = TreeNode;\n\n  static DirectoryTree = DirectoryTree;\n\n  static defaultProps = {\n    checkable: false,\n    showIcon: false,\n    openAnimation: animation,\n  };\n\n  renderSwitcherIcon = ({ isLeaf, loading }: C7nTreeNodeProps) => {\n    const { showLine, switcherIcon } = this.props;\n    const prefixCls = this.getPrefixCls();\n    if (loading) {\n      return (\n        <Progress\n          type={ProgressType.loading}\n          className={`${prefixCls}-switcher-loading-icon`}\n          size={Size.small}\n        />\n      );\n    }\n    const switcherCls = `${prefixCls}-switcher-icon`;\n    if (showLine) {\n      if (isLeaf) {\n        return <Icon type=\"note\" className={`${prefixCls}-switcher-line-icon`} />;\n      }\n      return <Icon type=\"arrow_drop_down\" className={switcherCls} />;\n    }\n    if (isLeaf) {\n      return null;\n    }\n    if (switcherIcon) {\n      const switcherOriginCls = switcherIcon.props.className || '';\n      return cloneElement(switcherIcon, {\n        className: [switcherOriginCls, switcherCls],\n      });\n    }\n    return <Icon type=\"arrow_drop_down\" className={switcherCls} />;\n  };\n\n    tree: any;\n\n    setTreeRef = (node: any) => {\n      this.tree = node;\n    };\n\n  getPrefixCls() {\n    const { prefixCls } = this.props;\n    return getPrefixCls('tree', prefixCls);\n  }\n\n  render() {\n    const props = this.props;\n    const { className, showIcon, children } = props;\n    const { checkable } = props;\n    const prefixCls = this.getPrefixCls();\n    return (\n      <RcTree\n        itemHeight={20}\n        ref={this.setTreeRef}\n        {...props}\n        className={classNames(!showIcon && `${prefixCls}-icon-hide`, className)}\n        checkable={checkable ? <span className={`${prefixCls}-checkbox-inner`} /> : 0 }\n        switcherIcon={this.renderSwitcherIcon}\n        prefixCls={prefixCls}\n      >\n        {children}\n      </RcTree>\n    );\n  }\n}\n"]}