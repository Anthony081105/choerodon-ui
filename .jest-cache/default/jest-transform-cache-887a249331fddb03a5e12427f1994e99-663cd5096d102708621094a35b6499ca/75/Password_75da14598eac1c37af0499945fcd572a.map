{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/password/Password.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA;AACA;AAGA,IAAqB,QAArB;AAAA;AAAA;AAAA;;AAAA;;AAAA,sBAAA;AAAA;;AAAA;;AAkBE,UAAA,IAAA,GAAe,UAAf;AAlBF;AAmFC;;AAnFD;AAAA;AAAA,oCA0Be;AACX,aAAO,qIAA4B,CAAC,QAAD,CAA5B,CAAP;AACD;AA5BH;AAAA;AAAA,uCA8BkB;AACd,aAAO,kBAAA,aAAA,CAAA,OAAA,EAAA;AAAO,QAAA,QAAQ,EAAE,CAAC,CAAlB;AAAqB,QAAA,SAAS,YAAK,KAAK,SAAV;AAA9B,OAAA,CAAP;AACD;AAhCH;AAAA;AAAA,yCAkCoB;AAAA,UACR,MADQ,GACG,KAAK,KADR,CACR,MADQ;;AAEhB,UAAI,MAAJ,EAAY;AACV,eAAO,KAAK,sBAAL,CACL,kBAAA,aAAA,CAAC,gBAAD,EAAK;AACH,UAAA,IAAI,EAAE,KAAK,MAAL,GAAc,YAAd,GAA6B,gBADhC;AAEH,UAAA,OAAO,EAAE,KAAK;AAFX,SAAL,CADK,CAAP;AAMD;AACF;AA5CH;AAAA;AAAA,uCA+CqB,CA/CrB,EA+CsB;AAClB,MAAA,CAAC,CAAC,cAAF;;AACA,UAAI,CAAC,KAAK,SAAV,EAAqB;AACnB,aAAK,KAAL;AACD;;AACD,UAAM,MAAM,GAAG,KAAK,OAApB;;AACA,UAAI,MAAJ,EAAY;AACV,YAAI,MAAM,CAAC,IAAP,KAAgB,UAApB,EAAgC;AAC9B,eAAK,QAAL,CAAc,MAAd;AACD,SAFD,MAEO;AACL,eAAK,WAAL,CAAiB,MAAjB;AACD;AACF;AACF;AA5DH;AAAA;AAAA,6BA+DW,MA/DX,EA+DiB;AACb,WAAK,YAAL,GAAoB,MAAM,CAAC,YAA3B;AACA,WAAK,cAAL,GAAsB,MAAM,CAAC,cAA7B;AACA,MAAA,MAAM,CAAC,IAAP,GAAc,MAAd;AACA,WAAK,IAAL,GAAY,MAAM,CAAC,IAAnB;AACA,WAAK,MAAL,GAAc,IAAd;AACD;AArEH;AAAA;AAAA,gCAwEc,MAxEd,EAwEoB;AAAA,UACR,cADQ,GACyB,IADzB,CACR,cADQ;AAAA,UACQ,YADR,GACyB,IADzB,CACQ,YADR;AAEhB,MAAA,MAAM,CAAC,IAAP,GAAc,UAAd;AACA,WAAK,IAAL,GAAY,MAAM,CAAC,IAAnB;;AACA,UAAI,OAAO,cAAP,KAA0B,WAA1B,IAAyC,OAAO,YAAP,KAAwB,WAArE,EAAkF;AAChF,QAAA,MAAM,CAAC,iBAAP,CAAyB,cAAzB,EAAyC,YAAzC;AACA,aAAK,cAAL,GAAsB,SAAtB;AACA,aAAK,YAAL,GAAoB,SAApB;AACD;;AACD,WAAK,MAAL,GAAc,KAAd;AACD;AAlFH;AAAA;AAAA,EAAsC,qBAAtC,CAAA;;AACS,QAAA,CAAA,WAAA,GAAc,UAAd;AAEA,QAAA,CAAA,SAAA;AACL;;;;AAIA,EAAA,MAAM,EAAE,sBAAU;AALb,GAMF,sBAAU,SANR;AASA,QAAA,CAAA,YAAA,sCACF,sBAAU,YADR;AAEL,EAAA,SAAS,EAAE,UAFN;AAGL,EAAA,MAAM,EAAE;AAHH;AAQK,uBAAA,CAAX,gBAAW,CAAA,E,kBAAA,E,QAAA,E,KAAiB,CAAjB;AA2BZ,uBAAA,CADC,oBACD,CAAA,E,kBAAA,E,oBAAA,EAaC,IAbD;AAgBA,uBAAA,CADC,YACD,CAAA,E,kBAAA,E,UAAA,EAMC,IAND;AASA,uBAAA,CADC,YACD,CAAA,E,kBAAA,E,aAAA,EAUC,IAVD;AAxEmB,QAAQ,GAAA,uBAAA,CAD5B,mBAC4B,CAAA,EAAR,QAAQ,CAAR;eAAA,Q","sourcesContent":["import React, { ReactNode } from 'react';\nimport PropTypes from 'prop-types';\nimport omit from 'lodash/omit';\nimport { observer } from 'mobx-react';\nimport { action, observable } from 'mobx';\nimport { TextField, TextFieldProps } from '../text-field/TextField';\nimport autobind from '../_util/autobind';\nimport Icon from '../icon';\n\nexport interface PasswordProps extends TextFieldProps {\n  /**\n   * 是否可揭示\n   * @default true\n   */\n  reveal?: boolean;\n}\n\n// let selectionStart;\n// let selectionEnd;\n\n@observer\nexport default class Password extends TextField<PasswordProps> {\n  static displayName = 'Password';\n\n  static propTypes = {\n    /**\n     * 是否可揭示\n     * @default true\n     */\n    reveal: PropTypes.bool,\n    ...TextField.propTypes,\n  };\n\n  static defaultProps = {\n    ...TextField.defaultProps,\n    suffixCls: 'password',\n    reveal: true,\n  };\n\n  type: string = 'password';\n\n  @observable reveal?: boolean;\n\n  selectionEnd?: number;\n\n  selectionStart?: number;\n\n  getOtherProps() {\n    return omit(super.getOtherProps(), ['reveal']);\n  }\n\n  getOtherPrevNode(): ReactNode {\n    return <input tabIndex={-1} className={`${this.prefixCls}-fix-autofill`} />;\n  }\n\n  getInnerSpanButton(): ReactNode {\n    const { reveal } = this.props;\n    if (reveal) {\n      return this.wrapperInnerSpanButton(\n        <Icon\n          type={this.reveal ? 'visibility' : 'visibility_off'}\n          onClick={this.handleToggleReveal}\n        />,\n      );\n    }\n  }\n\n  @autobind\n  handleToggleReveal(e) {\n    e.preventDefault();\n    if (!this.isFocused) {\n      this.focus();\n    }\n    const target = this.element;\n    if (target) {\n      if (target.type === 'password') {\n        this.doReveal(target);\n      } else {\n        this.resetReveal(target);\n      }\n    }\n  }\n\n  @action\n  doReveal(target) {\n    this.selectionEnd = target.selectionEnd;\n    this.selectionStart = target.selectionStart;\n    target.type = 'text';\n    this.type = target.type;\n    this.reveal = true;\n  }\n\n  @action\n  resetReveal(target) {\n    const { selectionStart, selectionEnd } = this;\n    target.type = 'password';\n    this.type = target.type;\n    if (typeof selectionStart !== 'undefined' && typeof selectionEnd !== 'undefined') {\n      target.setSelectionRange(selectionStart, selectionEnd);\n      this.selectionStart = undefined;\n      this.selectionEnd = undefined;\n    }\n    this.reveal = false;\n  }\n}\n"]}