3d05b7b921d390a0d6fd5df095f4899a
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _react = _interopRequireDefault(require("react"));

var _icon = _interopRequireDefault(require("../icon"));

var _notification = _interopRequireDefault(require("../rc-components/notification"));

var _configure = require("../configure");

var notificationInstance = {};
var defaultDuration = 4.5;
var defaultTop = 24;
var defaultBottom = 24;
var defaultPlacement = 'topRight';
var defaultGetContainer;

function setNotificationConfig(options) {
  var duration = options.duration,
      placement = options.placement,
      bottom = options.bottom,
      top = options.top,
      getContainer = options.getContainer;

  if (duration !== undefined) {
    defaultDuration = duration;
  }

  if (placement !== undefined) {
    defaultPlacement = placement;
  }

  if (bottom !== undefined) {
    defaultBottom = bottom;
  }

  if (top !== undefined) {
    defaultTop = top;
  }

  if (getContainer !== undefined) {
    defaultGetContainer = getContainer;
  }
}

function getPlacementStyle(placement) {
  var style;

  switch (placement) {
    case 'topLeft':
      style = {
        left: 0,
        top: defaultTop,
        bottom: 'auto'
      };
      break;

    case 'topRight':
      style = {
        right: 0,
        top: defaultTop,
        bottom: 'auto'
      };
      break;

    case 'bottomLeft':
      style = {
        left: 0,
        top: 'auto',
        bottom: defaultBottom
      };
      break;

    default:
      style = {
        right: 0,
        top: 'auto',
        bottom: defaultBottom
      };
      break;
  }

  return style;
}

function getNotificationInstance(prefixCls, placement, callback) {
  var cacheKey = "".concat(prefixCls, "-").concat(placement);

  if (notificationInstance[cacheKey]) {
    callback(notificationInstance[cacheKey]);
    return;
  }

  _notification["default"].newInstance({
    prefixCls: prefixCls,
    className: "".concat(prefixCls, "-").concat(placement),
    style: getPlacementStyle(placement),
    getContainer: defaultGetContainer,
    closeIcon: _react["default"].createElement(_icon["default"], {
      className: "".concat(prefixCls, "-close-icon"),
      type: "close"
    })
  }, function (notification) {
    notificationInstance[cacheKey] = notification;
    callback(notification);
  });
}

var typeToIcon = {
  success: 'check',
  info: 'info',
  error: 'error',
  warning: 'warning'
};

function notice(args) {
  var outerPrefixCls = (0, _configure.getPrefixCls)('notification', args.prefixCls);
  var prefixCls = "".concat(outerPrefixCls, "-notice");
  var duration = args.duration === undefined ? defaultDuration : args.duration;
  var iconNode = null;

  if (args.icon) {
    iconNode = _react["default"].createElement("span", {
      className: "".concat(prefixCls, "-icon")
    }, args.icon);
  } else if (args.type) {
    var iconType = typeToIcon[args.type];
    iconNode = _react["default"].createElement(_icon["default"], {
      className: "".concat(prefixCls, "-icon ").concat(prefixCls, "-icon-").concat(args.type),
      type: iconType
    });
  }

  var autoMarginTag = !args.description && iconNode ? _react["default"].createElement("span", {
    className: "".concat(prefixCls, "-message-single-line-auto-margin")
  }) : null;
  getNotificationInstance(outerPrefixCls, args.placement || defaultPlacement, function (notification) {
    notification.notice({
      content: _react["default"].createElement("div", {
        className: iconNode ? "".concat(prefixCls, "-with-icon") : ''
      }, iconNode, _react["default"].createElement("div", {
        className: "".concat(prefixCls, "-message")
      }, autoMarginTag, args.message), _react["default"].createElement("div", {
        className: "".concat(prefixCls, "-description")
      }, args.description), args.btn ? _react["default"].createElement("span", {
        className: "".concat(prefixCls, "-btn")
      }, args.btn) : null),
      duration: duration,
      closable: true,
      onClose: args.onClose,
      key: args.key,
      style: args.style || {},
      className: args.className
    });
  });
}

var api = {
  open: notice,
  close: function close(key) {
    Object.keys(notificationInstance).forEach(function (cacheKey) {
      return notificationInstance[cacheKey].removeNotice(key);
    });
  },
  config: setNotificationConfig,
  destroy: function destroy() {
    Object.keys(notificationInstance).forEach(function (cacheKey) {
      notificationInstance[cacheKey].destroy();
      delete notificationInstance[cacheKey];
    });
  }
};
['success', 'info', 'warning', 'error'].forEach(function (type) {
  api[type] = function (args) {
    return api.open((0, _objectSpread2["default"])({}, args, {
      type: type
    }));
  };
});
api.warn = api.warning;
var _default = api;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vdGlmaWNhdGlvbi9pbmRleC5qcyJdLCJuYW1lcyI6WyJub3RpZmljYXRpb25JbnN0YW5jZSIsImRlZmF1bHREdXJhdGlvbiIsImRlZmF1bHRUb3AiLCJkZWZhdWx0Qm90dG9tIiwiZGVmYXVsdFBsYWNlbWVudCIsImR1cmF0aW9uIiwicGxhY2VtZW50IiwiYm90dG9tIiwidG9wIiwiZ2V0Q29udGFpbmVyIiwib3B0aW9ucyIsImRlZmF1bHRHZXRDb250YWluZXIiLCJzdHlsZSIsImxlZnQiLCJyaWdodCIsImNhY2hlS2V5IiwiY2FsbGJhY2siLCJOb3RpZmljYXRpb24iLCJwcmVmaXhDbHMiLCJjbGFzc05hbWUiLCJnZXRQbGFjZW1lbnRTdHlsZSIsImNsb3NlSWNvbiIsIkljb24iLCJ0eXBlIiwidHlwZVRvSWNvbiIsInN1Y2Nlc3MiLCJpbmZvIiwiZXJyb3IiLCJ3YXJuaW5nIiwib3V0ZXJQcmVmaXhDbHMiLCJhcmdzIiwiaWNvbk5vZGUiLCJpY29uVHlwZSIsImF1dG9NYXJnaW5UYWciLCJnZXROb3RpZmljYXRpb25JbnN0YW5jZSIsIm5vdGlmaWNhdGlvbiIsImNvbnRlbnQiLCJjbG9zYWJsZSIsIm9uQ2xvc2UiLCJrZXkiLCJhcGkiLCJvcGVuIiwiY2xvc2UiLCJPYmplY3QiLCJjb25maWciLCJkZXN0cm95Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLElBQUEsTUFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLE9BQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsS0FBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLFNBQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsYUFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLCtCQUFBLENBQUEsQ0FBQTs7QUFDQSxJQUFBLFVBQUEsR0FBQSxPQUFBLENBQUEsY0FBQSxDQUFBOztBQUNBLElBQU1BLG9CQUFvQixHQUExQixFQUFBO0FBQ0EsSUFBSUMsZUFBZSxHQUFuQixHQUFBO0FBQ0EsSUFB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QyxLQUFBQTtBQUhJLEdBQUE7QUFLUkMsRUFBQUEsTUFBTSxFQUxFLHFCQUFBO0FBTVJDLEVBQUFBLE9BTlEsRUFBQSxTQUFBLE9BQUEsR0FNRTtBQUNORixJQUFBQSxNQUFNLENBQU5BLElBQUFBLENBQUFBLG9CQUFBQSxFQUFBQSxPQUFBQSxDQUEwQyxVQUFBLFFBQUEsRUFBWTtBQUNsRDNDLE1BQUFBLG9CQUFvQixDQUFwQkEsUUFBb0IsQ0FBcEJBLENBQUFBLE9BQUFBO0FBQ0EsYUFBT0Esb0JBQW9CLENBQTNCLFFBQTJCLENBQTNCO0FBRkoyQyxLQUFBQTtBQUlIO0FBWE8sQ0FBWjtBQWFBLENBQUEsU0FBQSxFQUFBLE1BQUEsRUFBQSxTQUFBLEVBQUEsT0FBQSxFQUFBLE9BQUEsQ0FBZ0QsVUFBQSxJQUFBLEVBQVE7QUFDcERILEVBQUFBLEdBQUcsQ0FBSEEsSUFBRyxDQUFIQSxHQUFZLFVBQUEsSUFBQSxFQUFBO0FBQUEsV0FBVSxHQUFHLENBQUgsSUFBQSxDQUFBLENBQUEsR0FBQSxjQUFBLENBQUEsU0FBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLElBQUEsRUFBQTtBQUVsQmpCLE1BQUFBLElBQUksRUFBSkE7QUFGa0IsS0FBQSxDQUFBLENBQVY7QUFBWmlCLEdBQUFBO0FBREosQ0FBQTtBQU1BQSxHQUFHLENBQUhBLElBQUFBLEdBQVdBLEdBQUcsQ0FBZEEsT0FBQUE7ZUFDZUEsRyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgSWNvbiBmcm9tICcuLi9pY29uJztcbmltcG9ydCBOb3RpZmljYXRpb24gZnJvbSAnLi4vcmMtY29tcG9uZW50cy9ub3RpZmljYXRpb24nO1xuaW1wb3J0IHsgZ2V0UHJlZml4Q2xzIH0gZnJvbSAnLi4vY29uZmlndXJlJztcbmNvbnN0IG5vdGlmaWNhdGlvbkluc3RhbmNlID0ge307XG5sZXQgZGVmYXVsdER1cmF0aW9uID0gNC41O1xubGV0IGRlZmF1bHRUb3AgPSAyNDtcbmxldCBkZWZhdWx0Qm90dG9tID0gMjQ7XG5sZXQgZGVmYXVsdFBsYWNlbWVudCA9ICd0b3BSaWdodCc7XG5sZXQgZGVmYXVsdEdldENvbnRhaW5lcjtcbmZ1bmN0aW9uIHNldE5vdGlmaWNhdGlvbkNvbmZpZyhvcHRpb25zKSB7XG4gICAgY29uc3QgeyBkdXJhdGlvbiwgcGxhY2VtZW50LCBib3R0b20sIHRvcCwgZ2V0Q29udGFpbmVyIH0gPSBvcHRpb25zO1xuICAgIGlmIChkdXJhdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGRlZmF1bHREdXJhdGlvbiA9IGR1cmF0aW9uO1xuICAgIH1cbiAgICBpZiAocGxhY2VtZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZGVmYXVsdFBsYWNlbWVudCA9IHBsYWNlbWVudDtcbiAgICB9XG4gICAgaWYgKGJvdHRvbSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGRlZmF1bHRCb3R0b20gPSBib3R0b207XG4gICAgfVxuICAgIGlmICh0b3AgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBkZWZhdWx0VG9wID0gdG9wO1xuICAgIH1cbiAgICBpZiAoZ2V0Q29udGFpbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZGVmYXVsdEdldENvbnRhaW5lciA9IGdldENvbnRhaW5lcjtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRQbGFjZW1lbnRTdHlsZShwbGFjZW1lbnQpIHtcbiAgICBsZXQgc3R5bGU7XG4gICAgc3dpdGNoIChwbGFjZW1lbnQpIHtcbiAgICAgICAgY2FzZSAndG9wTGVmdCc6XG4gICAgICAgICAgICBzdHlsZSA9IHtcbiAgICAgICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgICAgIHRvcDogZGVmYXVsdFRvcCxcbiAgICAgICAgICAgICAgICBib3R0b206ICdhdXRvJyxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAndG9wUmlnaHQnOlxuICAgICAgICAgICAgc3R5bGUgPSB7XG4gICAgICAgICAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgICAgICAgICAgdG9wOiBkZWZhdWx0VG9wLFxuICAgICAgICAgICAgICAgIGJvdHRvbTogJ2F1dG8nLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdib3R0b21MZWZ0JzpcbiAgICAgICAgICAgIHN0eWxlID0ge1xuICAgICAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICAgICAgdG9wOiAnYXV0bycsXG4gICAgICAgICAgICAgICAgYm90dG9tOiBkZWZhdWx0Qm90dG9tLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgc3R5bGUgPSB7XG4gICAgICAgICAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgICAgICAgICAgdG9wOiAnYXV0bycsXG4gICAgICAgICAgICAgICAgYm90dG9tOiBkZWZhdWx0Qm90dG9tLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gc3R5bGU7XG59XG5mdW5jdGlvbiBnZXROb3RpZmljYXRpb25JbnN0YW5jZShwcmVmaXhDbHMsIHBsYWNlbWVudCwgY2FsbGJhY2spIHtcbiAgICBjb25zdCBjYWNoZUtleSA9IGAke3ByZWZpeENsc30tJHtwbGFjZW1lbnR9YDtcbiAgICBpZiAobm90aWZpY2F0aW9uSW5zdGFuY2VbY2FjaGVLZXldKSB7XG4gICAgICAgIGNhbGxiYWNrKG5vdGlmaWNhdGlvbkluc3RhbmNlW2NhY2hlS2V5XSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgTm90aWZpY2F0aW9uLm5ld0luc3RhbmNlKHtcbiAgICAgICAgcHJlZml4Q2xzLFxuICAgICAgICBjbGFzc05hbWU6IGAke3ByZWZpeENsc30tJHtwbGFjZW1lbnR9YCxcbiAgICAgICAgc3R5bGU6IGdldFBsYWNlbWVudFN0eWxlKHBsYWNlbWVudCksXG4gICAgICAgIGdldENvbnRhaW5lcjogZGVmYXVsdEdldENvbnRhaW5lcixcbiAgICAgICAgY2xvc2VJY29uOiBSZWFjdC5jcmVhdGVFbGVtZW50KEljb24sIHsgY2xhc3NOYW1lOiBgJHtwcmVmaXhDbHN9LWNsb3NlLWljb25gLCB0eXBlOiBcImNsb3NlXCIgfSksXG4gICAgfSwgKG5vdGlmaWNhdGlvbikgPT4ge1xuICAgICAgICBub3RpZmljYXRpb25JbnN0YW5jZVtjYWNoZUtleV0gPSBub3RpZmljYXRpb247XG4gICAgICAgIGNhbGxiYWNrKG5vdGlmaWNhdGlvbik7XG4gICAgfSk7XG59XG5jb25zdCB0eXBlVG9JY29uID0ge1xuICAgIHN1Y2Nlc3M6ICdjaGVjaycsXG4gICAgaW5mbzogJ2luZm8nLFxuICAgIGVycm9yOiAnZXJyb3InLFxuICAgIHdhcm5pbmc6ICd3YXJuaW5nJyxcbn07XG5mdW5jdGlvbiBub3RpY2UoYXJncykge1xuICAgIGNvbnN0IG91dGVyUHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCdub3RpZmljYXRpb24nLCBhcmdzLnByZWZpeENscyk7XG4gICAgY29uc3QgcHJlZml4Q2xzID0gYCR7b3V0ZXJQcmVmaXhDbHN9LW5vdGljZWA7XG4gICAgY29uc3QgZHVyYXRpb24gPSBhcmdzLmR1cmF0aW9uID09PSB1bmRlZmluZWQgPyBkZWZhdWx0RHVyYXRpb24gOiBhcmdzLmR1cmF0aW9uO1xuICAgIGxldCBpY29uTm9kZSA9IG51bGw7XG4gICAgaWYgKGFyZ3MuaWNvbikge1xuICAgICAgICBpY29uTm9kZSA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHsgY2xhc3NOYW1lOiBgJHtwcmVmaXhDbHN9LWljb25gIH0sIGFyZ3MuaWNvbik7XG4gICAgfVxuICAgIGVsc2UgaWYgKGFyZ3MudHlwZSkge1xuICAgICAgICBjb25zdCBpY29uVHlwZSA9IHR5cGVUb0ljb25bYXJncy50eXBlXTtcbiAgICAgICAgaWNvbk5vZGUgPSAoUmVhY3QuY3JlYXRlRWxlbWVudChJY29uLCB7IGNsYXNzTmFtZTogYCR7cHJlZml4Q2xzfS1pY29uICR7cHJlZml4Q2xzfS1pY29uLSR7YXJncy50eXBlfWAsIHR5cGU6IGljb25UeXBlIH0pKTtcbiAgICB9XG4gICAgY29uc3QgYXV0b01hcmdpblRhZyA9ICFhcmdzLmRlc2NyaXB0aW9uICYmIGljb25Ob2RlID8gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHsgY2xhc3NOYW1lOiBgJHtwcmVmaXhDbHN9LW1lc3NhZ2Utc2luZ2xlLWxpbmUtYXV0by1tYXJnaW5gIH0pKSA6IG51bGw7XG4gICAgZ2V0Tm90aWZpY2F0aW9uSW5zdGFuY2Uob3V0ZXJQcmVmaXhDbHMsIGFyZ3MucGxhY2VtZW50IHx8IGRlZmF1bHRQbGFjZW1lbnQsIChub3RpZmljYXRpb24pID0+IHtcbiAgICAgICAgbm90aWZpY2F0aW9uLm5vdGljZSh7XG4gICAgICAgICAgICBjb250ZW50OiAoUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogaWNvbk5vZGUgPyBgJHtwcmVmaXhDbHN9LXdpdGgtaWNvbmAgOiAnJyB9LFxuICAgICAgICAgICAgICAgIGljb25Ob2RlLFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IGAke3ByZWZpeENsc30tbWVzc2FnZWAgfSxcbiAgICAgICAgICAgICAgICAgICAgYXV0b01hcmdpblRhZyxcbiAgICAgICAgICAgICAgICAgICAgYXJncy5tZXNzYWdlKSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBgJHtwcmVmaXhDbHN9LWRlc2NyaXB0aW9uYCB9LCBhcmdzLmRlc2NyaXB0aW9uKSxcbiAgICAgICAgICAgICAgICBhcmdzLmJ0biA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHsgY2xhc3NOYW1lOiBgJHtwcmVmaXhDbHN9LWJ0bmAgfSwgYXJncy5idG4pIDogbnVsbCkpLFxuICAgICAgICAgICAgZHVyYXRpb24sXG4gICAgICAgICAgICBjbG9zYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIG9uQ2xvc2U6IGFyZ3Mub25DbG9zZSxcbiAgICAgICAgICAgIGtleTogYXJncy5rZXksXG4gICAgICAgICAgICBzdHlsZTogYXJncy5zdHlsZSB8fCB7fSxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogYXJncy5jbGFzc05hbWUsXG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuY29uc3QgYXBpID0ge1xuICAgIG9wZW46IG5vdGljZSxcbiAgICBjbG9zZShrZXkpIHtcbiAgICAgICAgT2JqZWN0LmtleXMobm90aWZpY2F0aW9uSW5zdGFuY2UpLmZvckVhY2goY2FjaGVLZXkgPT4gbm90aWZpY2F0aW9uSW5zdGFuY2VbY2FjaGVLZXldLnJlbW92ZU5vdGljZShrZXkpKTtcbiAgICB9LFxuICAgIGNvbmZpZzogc2V0Tm90aWZpY2F0aW9uQ29uZmlnLFxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKG5vdGlmaWNhdGlvbkluc3RhbmNlKS5mb3JFYWNoKGNhY2hlS2V5ID0+IHtcbiAgICAgICAgICAgIG5vdGlmaWNhdGlvbkluc3RhbmNlW2NhY2hlS2V5XS5kZXN0cm95KCk7XG4gICAgICAgICAgICBkZWxldGUgbm90aWZpY2F0aW9uSW5zdGFuY2VbY2FjaGVLZXldO1xuICAgICAgICB9KTtcbiAgICB9LFxufTtcblsnc3VjY2VzcycsICdpbmZvJywgJ3dhcm5pbmcnLCAnZXJyb3InXS5mb3JFYWNoKHR5cGUgPT4ge1xuICAgIGFwaVt0eXBlXSA9IChhcmdzKSA9PiBhcGkub3Blbih7XG4gICAgICAgIC4uLmFyZ3MsXG4gICAgICAgIHR5cGUsXG4gICAgfSk7XG59KTtcbmFwaS53YXJuID0gYXBpLndhcm5pbmc7XG5leHBvcnQgZGVmYXVsdCBhcGk7XG4iXX0=