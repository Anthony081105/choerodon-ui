91a016314c9de2f22dddd1cdefa963a4
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _createReactClass = _interopRequireDefault(require("create-react-class"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _mapSelf = _interopRequireDefault(require("../../util/Children/mapSelf"));

var _MonthPanel = _interopRequireDefault(require("../month/MonthPanel"));

var _YearPanel = _interopRequireDefault(require("../year/YearPanel"));

var _DecadePanel = _interopRequireDefault(require("../decade/DecadePanel"));

function goMonth(direction) {
  var next = this.props.value.clone();
  next.add(direction, 'months');
  this.props.onValueChange(next);
}

function goYear(direction) {
  var next = this.props.value.clone();
  next.add(direction, 'years');
  this.props.onValueChange(next);
}

function showIf(condition, el) {
  return condition ? el : null;
}

var CalendarHeader = (0, _createReactClass["default"])({
  displayName: "CalendarHeader",
  propTypes: {
    prefixCls: _propTypes["default"].string,
    value: _propTypes["default"].object,
    onValueChange: _propTypes["default"].func,
    showTimePicker: _propTypes["default"].bool,
    onPanelChange: _propTypes["default"].func,
    locale: _propTypes["default"].object,
    enablePrev: _propTypes["default"].any,
    enableNext: _propTypes["default"].any,
    disabledMonth: _propTypes["default"].func
  },
  getDefaultProps: function getDefaultProps() {
    return {
      enableNext: 1,
      enablePrev: 1,
      onPanelChange: function onPanelChange() {},
      onValueChange: function onValueChange() {}
    };
  },
  getInitialState: function getInitialState() {
    this.nextMonth = goMonth.bind(this, 1);
    this.previousMonth = goMonth.bind(this, -1);
    this.nextYear = goYear.bind(this, 1);
    this.previousYear = goYear.bind(this, -1);
    return {
      yearPanelReferer: null
    };
  },
  onMonthSelect: function onMonthSelect(value) {
    this.props.onPanelChange(value, 'date');

    if (this.props.onMonthSelect) {
      this.props.onMonthSelect(value);
    } else {
      this.props.onValueChange(value);
    }
  },
  onYearSelect: function onYearSelect(value) {
    var referer = this.state.yearPanelReferer;
    this.setState({
      yearPanelReferer: null
    });
    this.props.onPanelChange(value, referer);
    this.props.onValueChange(value);
  },
  onDecadeSelect: function onDecadeSelect(value) {
    this.props.onPanelChange(value, 'year');
    this.props.onValueChange(value);
  },
  monthYearElement: function monthYearElement(showTimePicker) {
    var _this = this;

    var props = this.props;
    var prefixCls = props.prefixCls;
    var locale = props.locale;
    var value = props.value;
    var localeData = value.localeData();
    var monthBeforeYear = locale.monthBeforeYear;
    var selectClassName = "".concat(prefixCls, "-").concat(monthBeforeYear ? 'my-select' : 'ym-select');

    var year = _react["default"].createElement("a", {
      className: "".concat(prefixCls, "-year-select"),
      role: "button",
      onClick: showTimePicker ? null : function () {
        return _this.showYearPanel('date');
      },
      title: locale.yearSelect
    }, value.format(locale.yearFormat));

    var month = _react["default"].createElement("a", {
      className: "".concat(prefixCls, "-month-select"),
      role: "button",
      onClick: showTimePicker ? null : this.showMonthPanel,
      title: locale.monthSelect
    }, locale.monthFormat ? value.format(locale.monthFormat) : localeData.monthsShort(value));

    var day;

    if (showTimePicker) {
      day = _react["default"].createElement("a", {
        className: "".concat(prefixCls, "-day-select"),
        role: "button"
      }, value.format(locale.dayFormat));
    }

    var my = [];

    if (monthBeforeYear) {
      my = [month, day, year];
    } else {
      my = [year, month, day];
    }

    return _react["default"].createElement("span", {
      className: selectClassName
    }, (0, _mapSelf["default"])(my));
  },
  showMonthPanel: function showMonthPanel() {
    // null means that users' interaction doesn't change value
    this.props.onPanelChange(null, 'month');
  },
  showYearPanel: function showYearPanel(referer) {
    this.setState({
      yearPanelReferer: referer
    });
    this.props.onPanelChange(null, 'year');
  },
  showDecadePanel: function showDecadePanel() {
    this.props.onPanelChange(null, 'decade');
  },
  render: function render() {
    var _this2 = this;

    var props = this.props;
    var prefixCls = props.prefixCls,
        locale = props.locale,
        mode = props.mode,
        value = props.value,
        showTimePicker = props.showTimePicker,
        enableNext = props.enableNext,
        enablePrev = props.enablePrev,
        disabledMonth = props.disabledMonth;
    var panel = null;

    if (mode === 'month') {
      panel = _react["default"].createElement(_MonthPanel["default"], {
        locale: locale,
        defaultValue: value,
        rootPrefixCls: prefixCls,
        onSelect: this.onMonthSelect,
        onYearPanelShow: function onYearPanelShow() {
          return _this2.showYearPanel('month');
        },
        disabledDate: disabledMonth,
        cellRender: props.monthCellRender,
        contentRender: props.monthCellContentRender
      });
    }

    if (mode === 'year') {
      panel = _react["default"].createElement(_YearPanel["default"], {
        locale: locale,
        defaultValue: value,
        rootPrefixCls: prefixCls,
        onSelect: this.onYearSelect,
        onDecadePanelShow: this.showDecadePanel
      });
    }

    if (mode === 'decade') {
      panel = _react["default"].createElement(_DecadePanel["default"], {
        locale: locale,
        defaultValue: value,
        rootPrefixCls: prefixCls,
        onSelect: this.onDecadeSelect
      });
    }

    return _react["default"].createElement("div", {
      className: "".concat(prefixCls, "-header")
    }, _react["default"].createElement("div", {
      style: {
        position: 'relative'
      }
    }, showIf(enablePrev && !showTimePicker, _react["default"].createElement("a", {
      className: "".concat(prefixCls, "-prev-year-btn"),
      role: "button",
      onClick: this.previousYear,
      title: locale.previousYear
    })), showIf(enablePrev && !showTimePicker, _react["default"].createElement("a", {
      className: "".concat(prefixCls, "-prev-month-btn"),
      role: "button",
      onClick: this.previousMonth,
      title: locale.previousMonth
    })), this.monthYearElement(showTimePicker), showIf(enableNext && !showTimePicker, _react["default"].createElement("a", {
      className: "".concat(prefixCls, "-next-month-btn"),
      onClick: this.nextMonth,
      title: locale.nextMonth
    })), showIf(enableNext && !showTimePicker, _react["default"].createElement("a", {
      className: "".concat(prefixCls, "-next-year-btn"),
      onClick: this.nextYear,
      title: locale.nextYear
    }))), panel);
  }
});
var _default = CalendarHeader;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,