6423b62af5e7a08e6f20d23ca5f5fb14
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _createReactClass = _interopRequireDefault(require("create-react-class"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames2 = _interopRequireDefault(require("classnames"));

var _utils = require("./utils");

var TabContent = (0, _createReactClass["default"])({
  displayName: 'TabContent',
  propTypes: {
    animated: _propTypes["default"].bool,
    animatedWithMargin: _propTypes["default"].bool,
    prefixCls: _propTypes["default"].string,
    children: _propTypes["default"].any,
    activeKey: _propTypes["default"].string,
    style: _propTypes["default"].any,
    tabBarPosition: _propTypes["default"].string
  },
  getDefaultProps: function getDefaultProps() {
    return {
      animated: true
    };
  },
  getTabPanes: function getTabPanes() {
    var props = this.props;
    var activeKey = props.activeKey;
    var children = props.children;
    var newChildren = [];

    _react.Children.forEach(children, function (child, index) {
      if (!child) {
        return;
      }

      var key = (0, _utils.generateKey)(child.key, index);
      var active = activeKey === key;
      newChildren.push((0, _react.cloneElement)(child, {
        key: key,
        active: active,
        destroyInactiveTabPane: props.destroyInactiveTabPane,
        rootPrefixCls: props.prefixCls
      }));
    });

    return newChildren;
  },
  render: function render() {
    var _classnames;

    var props = this.props;
    var prefixCls = props.prefixCls,
        children = props.children,
        activeKey = props.activeKey,
        tabBarPosition = props.tabBarPosition,
        animated = props.animated,
        animatedWithMargin = props.animatedWithMargin;
    var style = props.style;
    var classes = (0, _classnames2["default"])((_classnames = {}, (0, _defineProperty2["default"])(_classnames, "".concat(prefixCls, "-content"), true), (0, _defineProperty2["default"])(_classnames, animated ? "".concat(prefixCls, "-content-animated") : "".concat(prefixCls, "-content-no-animated"), true), _classnames));

    if (animated) {
      var activeIndex = (0, _utils.getActiveIndex)(children, activeKey);

      if (activeIndex !== -1) {
        var animatedStyle = animatedWithMargin ? (0, _utils.getMarginStyle)(activeIndex, tabBarPosition) : (0, _utils.getTransformPropValue)((0, _utils.getTransformByIndex)(activeIndex, tabBarPosition));
        style = (0, _objectSpread2["default"])({}, style, {}, animatedStyle);
      } else {
        style = (0, _objectSpread2["default"])({}, style, {
          display: 'none'
        });
      }
    }

    return _react["default"].createElement("div", {
      className: classes,
      style: style
    }, this.getTabPanes());
  }
});
var _default = TabContent;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRhYkNvbnRlbnQuanN4Il0sIm5hbWVzIjpbIlRhYkNvbnRlbnQiLCJkaXNwbGF5TmFtZSIsInByb3BUeXBlcyIsImFuaW1hdGVkIiwiUHJvcFR5cGVzIiwiYm9vbCIsImFuaW1hdGVkV2l0aE1hcmdpbiIsInByZWZpeENscyIsInN0cmluZyIsImNoaWxkcmVuIiwiYW55IiwiYWN0aXZlS2V5Iiwic3R5bGUiLCJ0YWJCYXJQb3NpdGlvbiIsImdldERlZmF1bHRQcm9wcyIsImdldFRhYlBhbmVzIiwicHJvcHMiLCJuZXdDaGlsZHJlbiIsIkNoaWxkcmVuIiwiZm9yRWFjaCIsImNoaWxkIiwiaW5kZXgiLCJrZXkiLCJhY3RpdmUiLCJwdXNoIiwiZGVzdHJveUluYWN0aXZlVGFiUGFuZSIsInJvb3RQcmVmaXhDbHMiLCJyZW5kZXIiLCJjbGFzc2VzIiwiYWN0aXZlSW5kZXgiLCJhbmltYXRlZFN0eWxlIiwiZGlzcGxheSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUEsSUFBTUEsVUFBVSxHQUFHLGtDQUFpQjtBQUNsQ0MsRUFBQUEsV0FBVyxFQUFFLFlBRHFCO0FBRWxDQyxFQUFBQSxTQUFTLEVBQUU7QUFDVEMsSUFBQUEsUUFBUSxFQUFFQyxzQkFBVUMsSUFEWDtBQUVUQyxJQUFBQSxrQkFBa0IsRUFBRUYsc0JBQVVDLElBRnJCO0FBR1RFLElBQUFBLFNBQVMsRUFBRUgsc0JBQVVJLE1BSFo7QUFJVEMsSUFBQUEsUUFBUSxFQUFFTCxzQkFBVU0sR0FKWDtBQUtUQyxJQUFBQSxTQUFTLEVBQUVQLHNCQUFVSSxNQUxaO0FBTVRJLElBQUFBLEtBQUssRUFBRVIsc0JBQVVNLEdBTlI7QUFPVEcsSUFBQUEsY0FBYyxFQUFFVCxzQkFBVUk7QUFQakIsR0FGdUI7QUFXbENNLEVBQUFBLGVBWGtDLDZCQVdoQjtBQUNoQixXQUFPO0FBQ0xYLE1BQUFBLFFBQVEsRUFBRTtBQURMLEtBQVA7QUFHRCxHQWZpQztBQWdCbENZLEVBQUFBLFdBaEJrQyx5QkFnQnBCO0FBQ1osUUFBTUMsS0FBSyxHQUFHLEtBQUtBLEtBQW5CO0FBQ0EsUUFBTUwsU0FBUyxHQUFHSyxLQUFLLENBQUNMLFNBQXhCO0FBQ0EsUUFBTUYsUUFBUSxHQUFHTyxLQUFLLENBQUNQLFFBQXZCO0FBQ0EsUUFBTVEsV0FBVyxHQUFHLEVBQXBCOztBQUVBQyxvQkFBU0MsT0FBVCxDQUFpQlYsUUFBakIsRUFBMkIsVUFBQ1csS0FBRCxFQUFRQyxLQUFSLEVBQWtCO0FBQzNDLFVBQUksQ0FBQ0QsS0FBTCxFQUFZO0FBQ1Y7QUFDRDs7QUFDRCxVQUFNRSxHQUFHLEdBQUcsd0JBQVlGLEtBQUssQ0FBQ0UsR0FBbEIsRUFBdUJELEtBQXZCLENBQVo7QUFDQSxVQUFNRSxNQUFNLEdBQUdaLFNBQVMsS0FBS1csR0FBN0I7QUFDQUwsTUFBQUEsV0FBVyxDQUFDTyxJQUFaLENBQWlCLHlCQUFhSixLQUFiLEVBQW9CO0FBQ25DRSxRQUFBQSxHQUFHLEVBQUhBLEdBRG1DO0FBRW5DQyxRQUFBQSxNQUFNLEVBQU5BLE1BRm1DO0FBR25DRSxRQUFBQSxzQkFBc0IsRUFBRVQsS0FBSyxDQUFDUyxzQkFISztBQUluQ0MsUUFBQUEsYUFBYSxFQUFFVixLQUFLLENBQUNUO0FBSmMsT0FBcEIsQ0FBakI7QUFNRCxLQVpEOztBQWNBLFdBQU9VLFdBQVA7QUFDRCxHQXJDaUM7QUFzQ2xDVSxFQUFBQSxNQXRDa0Msb0JBc0N6QjtBQUFBOztBQUFBLFFBQ0NYLEtBREQsR0FDVyxJQURYLENBQ0NBLEtBREQ7QUFBQSxRQUdMVCxTQUhLLEdBS0hTLEtBTEcsQ0FHTFQsU0FISztBQUFBLFFBR01FLFFBSE4sR0FLSE8sS0FMRyxDQUdNUCxRQUhOO0FBQUEsUUFHZ0JFLFNBSGhCLEdBS0hLLEtBTEcsQ0FHZ0JMLFNBSGhCO0FBQUEsUUFJTEUsY0FKSyxHQUtIRyxLQUxHLENBSUxILGNBSks7QUFBQSxRQUlXVixRQUpYLEdBS0hhLEtBTEcsQ0FJV2IsUUFKWDtBQUFBLFFBSXFCRyxrQkFKckIsR0FLSFUsS0FMRyxDQUlxQlYsa0JBSnJCO0FBQUEsUUFNRE0sS0FOQyxHQU1TSSxLQU5ULENBTURKLEtBTkM7QUFPUCxRQUFNZ0IsT0FBTyxHQUFHLHdHQUNWckIsU0FEVSxlQUNZLElBRFosaURBRWJKLFFBQVEsYUFBTUksU0FBTixtQ0FBd0NBLFNBQXhDLHlCQUZLLEVBRXFFLElBRnJFLGdCQUFoQjs7QUFJQSxRQUFJSixRQUFKLEVBQWM7QUFDWixVQUFNMEIsV0FBVyxHQUFHLDJCQUFlcEIsUUFBZixFQUF5QkUsU0FBekIsQ0FBcEI7O0FBQ0EsVUFBSWtCLFdBQVcsS0FBSyxDQUFDLENBQXJCLEVBQXdCO0FBQ3RCLFlBQU1DLGFBQWEsR0FBR3hCLGtCQUFrQixHQUFHLDJCQUFldUIsV0FBZixFQUE0QmhCLGNBQTVCLENBQUgsR0FBaUQsa0NBQXNCLGdDQUFvQmdCLFdBQXBCLEVBQWlDaEIsY0FBakMsQ0FBdEIsQ0FBekY7QUFDQUQsUUFBQUEsS0FBSyxzQ0FDQUEsS0FEQSxNQUVBa0IsYUFGQSxDQUFMO0FBSUQsT0FORCxNQU1PO0FBQ0xsQixRQUFBQSxLQUFLLHNDQUNBQSxLQURBO0FBRUhtQixVQUFBQSxPQUFPLEVBQUU7QUFGTixVQUFMO0FBSUQ7QUFDRjs7QUFDRCxXQUNFO0FBQ0UsTUFBQSxTQUFTLEVBQUVILE9BRGI7QUFFRSxNQUFBLEtBQUssRUFBRWhCO0FBRlQsT0FJRyxLQUFLRyxXQUFMLEVBSkgsQ0FERjtBQVFEO0FBeEVpQyxDQUFqQixDQUFuQjtlQTJFZWYsVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBDaGlsZHJlbiwgY2xvbmVFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZVJlYWN0Q2xhc3MgZnJvbSAnY3JlYXRlLXJlYWN0LWNsYXNzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCB7IGdlbmVyYXRlS2V5LCBnZXRBY3RpdmVJbmRleCwgZ2V0TWFyZ2luU3R5bGUsIGdldFRyYW5zZm9ybUJ5SW5kZXgsIGdldFRyYW5zZm9ybVByb3BWYWx1ZSB9IGZyb20gJy4vdXRpbHMnO1xuXG5jb25zdCBUYWJDb250ZW50ID0gY3JlYXRlUmVhY3RDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnVGFiQ29udGVudCcsXG4gIHByb3BUeXBlczoge1xuICAgIGFuaW1hdGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBhbmltYXRlZFdpdGhNYXJnaW46IFByb3BUeXBlcy5ib29sLFxuICAgIHByZWZpeENsczogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLmFueSxcbiAgICBhY3RpdmVLZXk6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgc3R5bGU6IFByb3BUeXBlcy5hbnksXG4gICAgdGFiQmFyUG9zaXRpb246IFByb3BUeXBlcy5zdHJpbmcsXG4gIH0sXG4gIGdldERlZmF1bHRQcm9wcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYW5pbWF0ZWQ6IHRydWUsXG4gICAgfTtcbiAgfSxcbiAgZ2V0VGFiUGFuZXMoKSB7XG4gICAgY29uc3QgcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGFjdGl2ZUtleSA9IHByb3BzLmFjdGl2ZUtleTtcbiAgICBjb25zdCBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuO1xuICAgIGNvbnN0IG5ld0NoaWxkcmVuID0gW107XG5cbiAgICBDaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCAoY2hpbGQsIGluZGV4KSA9PiB7XG4gICAgICBpZiAoIWNoaWxkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGtleSA9IGdlbmVyYXRlS2V5KGNoaWxkLmtleSwgaW5kZXgpO1xuICAgICAgY29uc3QgYWN0aXZlID0gYWN0aXZlS2V5ID09PSBrZXk7XG4gICAgICBuZXdDaGlsZHJlbi5wdXNoKGNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICBrZXksXG4gICAgICAgIGFjdGl2ZSxcbiAgICAgICAgZGVzdHJveUluYWN0aXZlVGFiUGFuZTogcHJvcHMuZGVzdHJveUluYWN0aXZlVGFiUGFuZSxcbiAgICAgICAgcm9vdFByZWZpeENsczogcHJvcHMucHJlZml4Q2xzLFxuICAgICAgfSkpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG5ld0NoaWxkcmVuO1xuICB9LFxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBwcm9wcyB9ID0gdGhpcztcbiAgICBjb25zdCB7XG4gICAgICBwcmVmaXhDbHMsIGNoaWxkcmVuLCBhY3RpdmVLZXksXG4gICAgICB0YWJCYXJQb3NpdGlvbiwgYW5pbWF0ZWQsIGFuaW1hdGVkV2l0aE1hcmdpbixcbiAgICB9ID0gcHJvcHM7XG4gICAgbGV0IHsgc3R5bGUgfSA9IHByb3BzO1xuICAgIGNvbnN0IGNsYXNzZXMgPSBjbGFzc25hbWVzKHtcbiAgICAgIFtgJHtwcmVmaXhDbHN9LWNvbnRlbnRgXTogdHJ1ZSxcbiAgICAgIFthbmltYXRlZCA/IGAke3ByZWZpeENsc30tY29udGVudC1hbmltYXRlZGAgOiBgJHtwcmVmaXhDbHN9LWNvbnRlbnQtbm8tYW5pbWF0ZWRgXTogdHJ1ZSxcbiAgICB9KTtcbiAgICBpZiAoYW5pbWF0ZWQpIHtcbiAgICAgIGNvbnN0IGFjdGl2ZUluZGV4ID0gZ2V0QWN0aXZlSW5kZXgoY2hpbGRyZW4sIGFjdGl2ZUtleSk7XG4gICAgICBpZiAoYWN0aXZlSW5kZXggIT09IC0xKSB7XG4gICAgICAgIGNvbnN0IGFuaW1hdGVkU3R5bGUgPSBhbmltYXRlZFdpdGhNYXJnaW4gPyBnZXRNYXJnaW5TdHlsZShhY3RpdmVJbmRleCwgdGFiQmFyUG9zaXRpb24pIDogZ2V0VHJhbnNmb3JtUHJvcFZhbHVlKGdldFRyYW5zZm9ybUJ5SW5kZXgoYWN0aXZlSW5kZXgsIHRhYkJhclBvc2l0aW9uKSk7XG4gICAgICAgIHN0eWxlID0ge1xuICAgICAgICAgIC4uLnN0eWxlLFxuICAgICAgICAgIC4uLmFuaW1hdGVkU3R5bGUsXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdHlsZSA9IHtcbiAgICAgICAgICAuLi5zdHlsZSxcbiAgICAgICAgICBkaXNwbGF5OiAnbm9uZScsXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlc31cbiAgICAgICAgc3R5bGU9e3N0eWxlfVxuICAgICAgPlxuICAgICAgICB7dGhpcy5nZXRUYWJQYW5lcygpfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBUYWJDb250ZW50O1xuIl19