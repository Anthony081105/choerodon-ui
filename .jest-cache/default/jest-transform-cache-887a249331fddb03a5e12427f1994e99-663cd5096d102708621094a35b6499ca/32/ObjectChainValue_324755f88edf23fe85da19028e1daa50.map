{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/_util/ObjectChainValue.tsx"],"names":[],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AAGM,SAAU,GAAV,CAAc,GAAd,EAA2B,IAA3B,EAAuC;AAC3C,MAAM,KAAK,GAAG,IAAI,CAAC,OAAL,CAAa,GAAb,CAAd;;AACA,MAAI,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB,QAAM,GAAG,GAAG,IAAI,CAAC,KAAL,CAAW,CAAX,EAAc,KAAd,CAAZ;AACA,QAAM,OAAO,GAAG,IAAI,CAAC,KAAL,CAAW,KAAK,GAAG,CAAnB,CAAhB;AACA,QAAM,KAAK,GAAG,wBAAQ,GAAR,EAAa,GAAb,CAAd;;AACA,QAAI,uBAAY,KAAZ,CAAJ,EAAwB;AACtB,aAAO,KAAK,CAAC,GAAN,CAAU,UAAA,IAAI;AAAA,eAAI,GAAG,CAAC,IAAD,EAAO,OAAP,CAAP;AAAA,OAAd,EAAsC,MAAtC,CAA6C,UAAA,IAAI;AAAA,eAAI,CAAC,CAAC,IAAN;AAAA,OAAjD,CAAP;AACD;;AACD,QAAI,0BAAS,KAAT,CAAJ,EAAqB;AACnB,aAAO,GAAG,CAAC,KAAD,EAAQ,OAAR,CAAV;AACD;AACF,GAVD,MAUO;AACL,WAAO,wBAAQ,GAAR,EAAa,IAAb,CAAP;AACD;AACF;;AAEK,SAAU,GAAV,CACJ,IADI,EAEJ,IAFI,EAGJ,KAHI,EAI4C;AAAA,MAAhD,MAAgD,uEAA/B,iBAAW,GAAX,EAA+B;AAEhD,MAAM,KAAK,GAAG,IAAI,CAAC,OAAL,CAAa,GAAb,CAAd;;AACA,MAAI,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB,QAAM,GAAG,GAAG,IAAI,CAAC,KAAL,CAAW,CAAX,EAAc,KAAd,CAAZ;;AACA,QAAI,CAAC,IAAI,CAAC,GAAD,CAAL,IAAc,KAAK,KAAK,SAA5B,EAAuC;AACrC,UAAM,KAAK,GAAG,MAAM,CAAC,GAAP,CAAW,GAAX,CAAd;;AACA,UAAI,KAAK,IAAI,KAAK,CAAC,GAAN,CAAU,UAAV,CAAb,EAAoC;AAClC,gCAAQ,IAAR,EAAc,GAAd,EAAmB,EAAnB;AACD,OAFD,MAEO;AACL,gCAAQ,IAAR,EAAc,GAAd,EAAmB,EAAnB;AACD;AACF;;AACD,QAAM,GAAG,GAAG,wBAAQ,IAAR,EAAc,GAAd,CAAZ;;AACA,QAAI,uBAAY,GAAZ,CAAJ,EAAsB;AACpB,UAAI,uBAAY,KAAZ,CAAJ,EAAwB;AACtB,QAAA,KAAK,CAAC,OAAN,CAAc,UAAC,IAAD,EAAO,CAAP,EAAY;AACxB,cAAI,CAAC,GAAG,CAAC,CAAD,CAAR,EAAa;AACX,YAAA,GAAG,CAAC,IAAJ,CAAS,EAAT;AACD;;AACD,UAAA,GAAG,CAAC,GAAG,CAAC,CAAD,CAAJ,EAAS,IAAI,CAAC,KAAL,CAAW,KAAK,GAAG,CAAnB,CAAT,EAAgC,IAAhC,CAAH;AACD,SALD;AAMD;AACF,KATD,MASO,IAAI,0BAAS,GAAT,CAAJ,EAAmB;AACxB,MAAA,GAAG,CAAC,GAAD,EAAM,IAAI,CAAC,KAAL,CAAW,KAAK,GAAG,CAAnB,CAAN,EAA6B,KAA7B,CAAH;AACD;AACF,GAvBD,MAuBO;AACL,4BAAQ,IAAR,EAAc,IAAd,EAAoB,KAApB;AACD;AACF;;AAEK,SAAU,MAAV,CAAiB,GAAjB,EAA8B,IAA9B,EAA0C;AAC9C,MAAM,KAAK,GAAG,IAAI,CAAC,OAAL,CAAa,GAAb,CAAd;;AACA,MAAI,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB,QAAM,KAAK,GAAG,wBAAQ,GAAR,EAAa,IAAI,CAAC,KAAL,CAAW,CAAX,EAAc,KAAd,CAAb,CAAd;;AACA,QAAI,KAAJ,EAAW;AACT,UAAM,OAAO,GAAG,IAAI,CAAC,KAAL,CAAW,KAAK,GAAG,CAAnB,CAAhB;;AACA,UAAI,uBAAY,KAAZ,CAAJ,EAAwB;AACtB,QAAA,KAAK,CAAC,OAAN,CAAc,UAAA,IAAI;AAAA,iBAAI,MAAM,CAAC,IAAD,EAAO,OAAP,CAAV;AAAA,SAAlB;AACD,OAFD,MAEO,IAAI,0BAAS,KAAT,CAAJ,EAAqB;AAC1B,QAAA,MAAM,CAAC,KAAD,EAAQ,OAAR,CAAN;AACD;AACF;AACF,GAVD,MAUO;AACL,+BAAW,GAAX,EAAgB,IAAhB;AACD;AACF","sourcesContent":["import isObject from 'lodash/isObject';\nimport { isArrayLike, observable } from 'mobx';\nimport { mobxGet, mobxRemove, mobxSet } from './MobxUtils';\nimport Field, { Fields } from '../data-set/Field';\n\nexport function get(obj: object, prop: string): any {\n  const index = prop.indexOf('.');\n  if (index !== -1) {\n    const key = prop.slice(0, index);\n    const restKey = prop.slice(index + 1);\n    const value = mobxGet(obj, key);\n    if (isArrayLike(value)) {\n      return value.map(item => get(item, restKey)).filter(item => !!item);\n    }\n    if (isObject(value)) {\n      return get(value, restKey);\n    }\n  } else {\n    return mobxGet(obj, prop);\n  }\n}\n\nexport function set(\n  data: object,\n  prop: string,\n  value: any,\n  fields: Fields = observable.map<string, Field>(),\n): any {\n  const index = prop.indexOf('.');\n  if (index !== -1) {\n    const key = prop.slice(0, index);\n    if (!data[key] && value !== undefined) {\n      const field = fields.get(key);\n      if (field && field.get('multiple')) {\n        mobxSet(data, key, []);\n      } else {\n        mobxSet(data, key, {});\n      }\n    }\n    const obj = mobxGet(data, key);\n    if (isArrayLike(obj)) {\n      if (isArrayLike(value)) {\n        value.forEach((item, i) => {\n          if (!obj[i]) {\n            obj.push({});\n          }\n          set(obj[i], prop.slice(index + 1), item);\n        });\n      }\n    } else if (isObject(obj)) {\n      set(obj, prop.slice(index + 1), value);\n    }\n  } else {\n    mobxSet(data, prop, value);\n  }\n}\n\nexport function remove(obj: object, prop: string) {\n  const index = prop.indexOf('.');\n  if (index !== -1) {\n    const value = mobxGet(obj, prop.slice(0, index));\n    if (value) {\n      const restKey = prop.slice(index + 1);\n      if (isArrayLike(value)) {\n        value.forEach(item => remove(item, restKey));\n      } else if (isObject(value)) {\n        remove(value, restKey);\n      }\n    }\n  } else {\n    mobxRemove(obj, prop);\n  }\n}\n"]}