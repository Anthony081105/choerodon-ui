{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components/table/SelectionBox.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAGqB,Y;;;;;;;AAGnB,wBAAY,KAAZ,EAAoC;AAAA;;AAAA;AAClC,8BAAM,KAAN;AAEA,UAAK,KAAL,GAAa;AACX,MAAA,OAAO,EAAE,MAAK,aAAL,CAAmB,KAAnB;AADE,KAAb;AAHkC;AAMnC;;;;wCAEgB;AACf,WAAK,SAAL;AACD;;;2CAEmB;AAClB,UAAI,KAAK,WAAT,EAAsB;AACpB,aAAK,WAAL;AACD;AACF;;;gCAEQ;AAAA;;AAAA,UACC,KADD,GACW,KAAK,KADhB,CACC,KADD;AAEP,WAAK,WAAL,GAAmB,KAAK,CAAC,SAAN,CAAgB,YAAK;AACtC,YAAM,OAAO,GAAG,MAAI,CAAC,aAAL,CAAmB,MAAI,CAAC,KAAxB,CAAhB;;AACA,QAAA,MAAI,CAAC,QAAL,CAAc;AAAE,UAAA,OAAO,EAAP;AAAF,SAAd;AACD,OAHkB,CAAnB;AAID;;;kCAEa,K,EAAwB;AAAA,UAC5B,KAD4B,GACU,KADV,CAC5B,KAD4B;AAAA,UACrB,gBADqB,GACU,KADV,CACrB,gBADqB;AAAA,UACH,QADG,GACU,KADV,CACH,QADG;AAEpC,UAAI,OAAO,GAAG,KAAd;;AACA,UAAI,KAAK,CAAC,QAAN,GAAiB,cAArB,EAAqC;AACnC,QAAA,OAAO,GAAG,KAAK,CAAC,QAAN,GAAiB,eAAjB,CAAiC,OAAjC,CAAyC,QAAzC,KAAsD,CAAhE;AACD,OAFD,MAEO;AACL,QAAA,OAAO,GACL,KAAK,CAAC,QAAN,GAAiB,eAAjB,CAAiC,OAAjC,CAAyC,QAAzC,KAAsD,CAAtD,IACA,gBAAgB,CAAC,OAAjB,CAAyB,QAAzB,KAAsC,CAFxC;AAGD;;AACD,aAAO,OAAP;AACD;;;6BAEK;AAAA,wBACgC,KAAK,KADrC;AAAA,UACI,IADJ,eACI,IADJ;AAAA,UACU,QADV,eACU,QADV;AAAA,UACuB,IADvB;AAAA,UAEI,OAFJ,GAEgB,KAAK,KAFrB,CAEI,OAFJ;;AAIJ,UAAI,IAAI,KAAK,OAAb,EAAsB;AACpB,eAAO,kBAAA,aAAA,CAAC,iBAAD,EAAM,0BAAA;AAAC,UAAA,OAAO,EAAE,OAAV;AAAmB,UAAA,KAAK,EAAE;AAA1B,SAAA,EAAwC,IAAxC,CAAN,CAAP;AACD;;AACD,aAAO,kBAAA,aAAA,CAAC,oBAAD,EAAS,0BAAA;AAAC,QAAA,OAAO,EAAE;AAAV,OAAA,EAAuB,IAAvB,CAAT,CAAP;AACD;;;EAlDuC,gB","sourcesContent":["import React, { Component } from 'react';\nimport Checkbox from '../checkbox';\nimport Radio from '../radio';\nimport { SelectionBoxProps, SelectionBoxState } from './interface';\n\nexport default class SelectionBox extends Component<SelectionBoxProps, SelectionBoxState> {\n  unsubscribe: () => void;\n\n  constructor(props: SelectionBoxProps) {\n    super(props);\n\n    this.state = {\n      checked: this.getCheckState(props),\n    };\n  }\n\n  componentDidMount() {\n    this.subscribe();\n  }\n\n  componentWillUnmount() {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n    }\n  }\n\n  subscribe() {\n    const { store } = this.props;\n    this.unsubscribe = store.subscribe(() => {\n      const checked = this.getCheckState(this.props);\n      this.setState({ checked });\n    });\n  }\n\n  getCheckState(props: SelectionBoxProps) {\n    const { store, defaultSelection, rowIndex } = props;\n    let checked = false;\n    if (store.getState().selectionDirty) {\n      checked = store.getState().selectedRowKeys.indexOf(rowIndex) >= 0;\n    } else {\n      checked =\n        store.getState().selectedRowKeys.indexOf(rowIndex) >= 0 ||\n        defaultSelection.indexOf(rowIndex) >= 0;\n    }\n    return checked;\n  }\n\n  render() {\n    const { type, rowIndex, ...rest } = this.props;\n    const { checked } = this.state;\n\n    if (type === 'radio') {\n      return <Radio checked={checked} value={rowIndex} {...rest} />;\n    }\n    return <Checkbox checked={checked} {...rest} />;\n  }\n}\n"]}