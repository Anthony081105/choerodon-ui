{"version":3,"sources":["index.test.js"],"names":["window","require","describe","beforeEach","jest","useFakeTimers","JSDOM","jsdom","doc","global","document","defaultView","body","createTextRange","setEnd","setStart","getBoundingClientRect","right","getClientRects","length","left","afterEach","useRealTimers","it","options","mode","name","json","jsonText","jsonStyle","height","ds","DataSet","autoCreate","fields","type","defaultValue","required","wrapper","JSONFormatter","find","simulate","key","expect","toMatchSnapshot","jsText","jsStyle","JSFormatter"],"mappings":"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","sourcesContent":["import React from 'react';\nimport jsdom from 'jsdom';\nimport { mount } from 'enzyme';\nimport JSFormatter from 'choerodon-ui/pro/lib/code-area/formatters/JSFormatter';\nimport CodeArea from '..';\nimport DataSet from '../../data-set';\n// eslint-disable-next-line import/no-named-as-default\nimport JSONFormatter from '../formatters/JSONFormatter';\n\nimport 'choerodon-ui/pro/lib/code-area/lint/json';\n\nif (typeof window !== 'undefined') {\n  // eslint-disable-next-line global-require\n  require('codemirror/mode/javascript/javascript');\n}\n\ndescribe('CodeArea-pro', () => {\n  beforeEach(() => {\n    jest.useFakeTimers();\n    const { JSDOM } = jsdom;\n    const doc = new JSDOM('<!doctype html><html><body></body></html>');\n    global.document = doc;\n    global.window = doc.defaultView;\n    global.document.body.createTextRange = function() {\n      return {\n        setEnd: () => {},\n        setStart: () => {},\n        getBoundingClientRect: () => ({ right: 0 }),\n        getClientRects: () => {\n          return {\n            length: 0,\n            left: 0,\n            right: 0,\n          };\n        },\n      };\n    };\n  });\n\n  afterEach(() => {\n    jest.useRealTimers();\n  });\n\n  it('the codeArea json formatter and lint test', () => {\n    const options = { mode: { name: 'javascript', json: true } };\n    const jsonText = `{\n      \"compilerOptions\": {\n        \"strictNullChecks\": true,\n        \"moduleResolution\": \"node\",\n        \"allowSyntheticDefaultImports\": true,\n        \"experimentalDecorators\": true,\n        \"jsx\": \"preserve\",\n        \"noUnusedParameters\": true,\n        \"noUnusedLocals\": true,\n        \"declaration\": true,\n        \"target\": \"es6\",\n        \"lib\": [\n          \"dom\",\n          \"dom.iterable\",\n          \"es7\",\n          \"es2017.object\"\n        ]\n      },\n      \"exclude\": [\n        \"node_modules\",\n        \"lib\",\n        \"es\"\n      ]\n    }\n    `;\n\n    const jsonStyle = { height: 500 };\n\n    const ds = new DataSet({\n      autoCreate: true,\n      fields: [{ name: 'content', type: 'string', defaultValue: jsonText, required: true }],\n    });\n\n    const wrapper = mount(\n      <CodeArea\n        dataSet={ds}\n        name=\"content\"\n        style={jsonStyle}\n        formatter={JSONFormatter}\n        options={options}\n        formatHotKey=\"Home\"\n        unFormatHotKey=\"End\"\n      />,\n    );\n    wrapper.find('CodeArea').simulate('focus');\n    wrapper.find('CodeArea').simulate('keydown', { key: 'Home' });\n    wrapper.find('CodeArea').simulate('keydown', { key: 'End' });\n    expect(wrapper).toMatchSnapshot();\n  });\n  it('the codeArea javascript formatter and lint test', () => {\n    const options = { mode: 'javascript' };\n\n    const jsText = `function getOptions() {\n      var options = {\n        \"compilerOptions\": {\n          \"strictNullChecks\": true,\n          \"moduleResolution\": \"node\",\n          \"allowSyntheticDefaultImports\": true,\n          \"experimentalDecorators\": true,\n          \"jsx\": \"preserve\",\n          \"noUnusedParameters\": true,\n          \"noUnusedLocals\": true,\n          \"declaration\": true,\n          \"target\": \"es6\",\n          \"lib\": [\n            \"dom\",\n            \"dom.iterable\",\n            \"es7\",\n            \"es2017.object\"\n          ]\n        },\n        \"exclude\": [\n          \"node_modules\",\n          \"lib\",\n          \"es\"\n        ]\n      };\n\n      return options;\n    }\n    `;\n\n    const jsStyle = { height: 500 };\n\n    const ds = new DataSet({\n      autoCreate: true,\n      fields: [{ name: 'content', type: 'string', defaultValue: jsText, required: true }],\n    });\n\n    const wrapper = mount(\n      <CodeArea\n        dataSet={ds}\n        name=\"content\"\n        style={jsStyle}\n        formatter={JSFormatter}\n        options={options}\n      />,\n    );\n    wrapper.find('CodeArea').simulate('focus');\n    wrapper.find('CodeArea').simulate('keydown', { key: 'Home' });\n    wrapper.find('CodeArea').simulate('keydown', { key: 'End' });\n    expect(wrapper).toMatchSnapshot();\n  });\n});\n"]}