{"version":3,"sources":["rc-components/tree/util.js"],"names":["DRAG_SIDE_RANGE","DRAG_MIN_GAP","clone","list","index","pos","node","dragNodesKeys","entity","keyEntities","key","children","dig","clientY","event","top","bottom","height","treeNode","des","Math","multiple","props","selectedKeys","internalProcessProps","processProps","processor","Array","childrenNodes","convertDataToTree","React","TreeNode","keyProps","checkedKeys","halfCheckedKeys","undefined","keys","expandedKeys","parent","conductUp","keyList","Object","omitProps"],"mappings":"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","sourcesContent":["/**\n * Legacy code. Should avoid to use if you are new to import these code.\n */\nimport React from 'react';\nimport warning from '../../_util/warning';\n// @ts-ignore\nimport TreeNode from './TreeNode';\nconst DRAG_SIDE_RANGE = 0.25;\nconst DRAG_MIN_GAP = 2;\nexport function arrDel(list, value) {\n    const clone = list.slice();\n    const index = clone.indexOf(value);\n    if (index >= 0) {\n        clone.splice(index, 1);\n    }\n    return clone;\n}\nexport function arrAdd(list, value) {\n    const clone = list.slice();\n    if (clone.indexOf(value) === -1) {\n        clone.push(value);\n    }\n    return clone;\n}\nexport function posToArr(pos) {\n    return pos.split('-');\n}\nexport function getPosition(level, index) {\n    return `${level}-${index}`;\n}\nexport function isTreeNode(node) {\n    return node && node.type && node.type.isTreeNode;\n}\nexport function getDragNodesKeys(dragNodeKey, keyEntities) {\n    const dragNodesKeys = [dragNodeKey];\n    const entity = keyEntities[dragNodeKey];\n    function dig(list = []) {\n        list.forEach(({ key, children }) => {\n            dragNodesKeys.push(key);\n            dig(children);\n        });\n    }\n    dig(entity.children);\n    return dragNodesKeys;\n}\n// Only used when drag, not affect SSR.\nexport function calcDropPosition(event, treeNode) {\n    const { clientY } = event;\n    const { top, bottom, height } = treeNode.selectHandle.getBoundingClientRect();\n    const des = Math.max(height * DRAG_SIDE_RANGE, DRAG_MIN_GAP);\n    if (clientY <= top + des) {\n        return -1;\n    }\n    if (clientY >= bottom - des) {\n        return 1;\n    }\n    return 0;\n}\n/**\n * Return selectedKeys according with multiple prop\n * @param selectedKeys\n * @param props\n * @returns [string]\n */\nexport function calcSelectedKeys(selectedKeys, props) {\n    if (!selectedKeys)\n        return undefined;\n    const { multiple } = props;\n    if (multiple) {\n        return selectedKeys.slice();\n    }\n    if (selectedKeys.length) {\n        return [selectedKeys[0]];\n    }\n    return selectedKeys;\n}\nconst internalProcessProps = (props) => props;\nexport function convertDataToTree(treeData, processor) {\n    if (!treeData)\n        return [];\n    const { processProps = internalProcessProps } = processor || {};\n    const list = Array.isArray(treeData) ? treeData : [treeData];\n    return list.map(({ children, ...props }) => {\n        const childrenNodes = convertDataToTree(children, processor);\n        // @ts-ignore\n        // eslint-disable-next-line react/jsx-key\n        return React.createElement(TreeNode, Object.assign({}, processProps(props)), childrenNodes);\n    });\n}\n/**\n * Parse `checkedKeys` to { checkedKeys, halfCheckedKeys } style\n */\nexport function parseCheckedKeys(keys) {\n    if (!keys) {\n        return null;\n    }\n    // Convert keys to object format\n    let keyProps;\n    if (Array.isArray(keys)) {\n        // [Legacy] Follow the api doc\n        keyProps = {\n            checkedKeys: keys,\n            halfCheckedKeys: undefined,\n        };\n    }\n    else if (typeof keys === 'object') {\n        keyProps = {\n            checkedKeys: keys.checked || undefined,\n            halfCheckedKeys: keys.halfChecked || undefined,\n        };\n    }\n    else {\n        warning(false, '`checkedKeys` is not an array or an object');\n        return null;\n    }\n    return keyProps;\n}\n/**\n * If user use `autoExpandParent` we should get the list of parent node\n * @param keyList\n * @param keyEntities\n */\nexport function conductExpandParent(keyList, keyEntities) {\n    const expandedKeys = {};\n    function conductUp(key) {\n        if (expandedKeys[key])\n            return;\n        const entity = keyEntities[key];\n        if (!entity)\n            return;\n        expandedKeys[key] = true;\n        const { parent, node } = entity;\n        if (node.disabled)\n            return;\n        if (parent) {\n            conductUp(parent.key);\n        }\n    }\n    (keyList || []).forEach(key => {\n        conductUp(key);\n    });\n    return Object.keys(expandedKeys);\n}\n/**\n * Returns only the data- and aria- key/value pairs\n */\nexport function getDataAndAria(props) {\n    const omitProps = {};\n    Object.keys(props).forEach(key => {\n        if (key.startsWith('data-') || key.startsWith('aria-')) {\n            omitProps[key] = props[key];\n        }\n    });\n    return omitProps;\n}\n"]}