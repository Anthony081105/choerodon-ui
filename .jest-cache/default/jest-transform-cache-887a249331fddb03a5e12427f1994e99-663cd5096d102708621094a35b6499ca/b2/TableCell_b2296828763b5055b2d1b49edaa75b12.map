{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/table/TableCell.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, {\n  cloneElement,\n  Component,\n  CSSProperties,\n  HTMLProps,\n  isValidElement,\n  MouseEventHandler,\n  ReactElement,\n  ReactNode,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport { observer } from 'mobx-react';\nimport { action, computed, isArrayLike, observable, set } from 'mobx';\nimport classNames from 'classnames';\nimport raf from 'raf';\nimport omit from 'lodash/omit';\nimport isObject from 'lodash/isObject';\nimport isString from 'lodash/isString';\nimport { pxToRem } from 'choerodon-ui/lib/_util/UnitConvertor';\nimport KeyCode from 'choerodon-ui/lib/_util/KeyCode';\nimport measureScrollbar from 'choerodon-ui/lib/_util/measureScrollbar';\nimport ReactResizeObserver from 'choerodon-ui/lib/_util/resizeObserver';\nimport { getConfig } from 'choerodon-ui/lib/configure';\nimport { ColumnProps, minColumnWidth } from './Column';\nimport Record from '../data-set/Record';\nimport { ElementProps } from '../core/ViewComponent';\nimport TableContext from './TableContext';\nimport {\n  findCell,\n  findFirstFocusableElement,\n  getAlignByField,\n  getColumnKey,\n  getEditorByColumnAndRecord,\n  isDisabledRow,\n  isRadio,\n} from './utils';\nimport { FormFieldProps, Renderer } from '../field/FormField';\nimport { ColumnAlign, ColumnLock, TableColumnTooltip, TableCommandType } from './enum';\nimport ObserverCheckBox from '../check-box/CheckBox';\nimport Output from '../output/Output';\nimport { ShowHelp } from '../field/enum';\nimport Button, { ButtonProps } from '../button/Button';\nimport { $l } from '../locale-context';\nimport Tooltip from '../tooltip/Tooltip';\nimport { DataSetEvents, RecordStatus } from '../data-set/enum';\nimport { LabelLayout } from '../form/enum';\nimport { Commands, TableButtonProps } from './Table';\nimport autobind from '../_util/autobind';\n\nexport interface TableCellProps extends ElementProps {\n  column: ColumnProps;\n  record: Record;\n  indentSize: number;\n  isDragging: boolean;\n}\n\nlet inTab: boolean = false;\n\n@observer\nexport default class TableCell extends Component<TableCellProps> {\n  static displayName = 'TableCell';\n\n  static propTypes = {\n    prefixCls: PropTypes.string,\n    column: PropTypes.object.isRequired,\n    record: PropTypes.instanceOf(Record).isRequired,\n    indentSize: PropTypes.number.isRequired,\n  };\n\n  static contextType = TableContext;\n\n  element?: HTMLSpanElement | null;\n\n  nextFrameActionId?: number;\n\n  @observable overflow?: boolean;\n\n  @computed\n  get cellEditor() {\n    const { column, record } = this.props;\n    return getEditorByColumnAndRecord(column, record);\n  }\n\n  @computed\n  get cellEditorInCell() {\n    return isRadio(this.cellEditor);\n  }\n\n  @computed\n  get hasEditor() {\n    const {\n      tableStore: { pristine },\n    } = this.context;\n    return !pristine && this.cellEditor && !this.cellEditorInCell;\n  }\n\n  @autobind\n  @action\n  saveOutput(node) {\n    this.disconnect();\n    if (node) {\n      this.element = node.element;\n      const {\n        tableStore: { dataSet },\n      } = this.context;\n      dataSet.addEventListener(DataSetEvents.update, this.handleOutputChange);\n      this.handleResize();\n    } else {\n      this.element = null;\n    }\n  }\n\n  disconnect() {\n    const {\n      tableStore: { dataSet },\n    } = this.context;\n    dataSet.removeEventListener(DataSetEvents.update, this.handleOutputChange);\n  }\n\n  @autobind\n  handleResize() {\n    const { element } = this;\n    const { tableStore } = this.context;\n    if (element && !tableStore.hidden) {\n      if (this.nextFrameActionId !== undefined) {\n        raf.cancel(this.nextFrameActionId);\n      }\n      this.nextFrameActionId = raf(this.syncSize);\n    }\n  }\n\n  @autobind\n  handleOutputChange({ record, name }) {\n    const {\n      record: thisRecord,\n      column: { name: thisName },\n    } = this.props;\n    if (thisRecord && thisName) {\n      const field = thisRecord.getField(thisName);\n      const bind = field ? field.get('bind') : undefined;\n      if (\n        record === thisRecord &&\n        (thisName === name || (isString(bind) && bind.startsWith(`${name}.`)))\n      ) {\n        this.handleResize();\n      }\n    }\n  }\n\n  @autobind\n  @action\n  syncSize() {\n    this.overflow = this.computeOverFlow();\n    this.setMaxColumnWidth()\n  }\n\n  @action\n  setMaxColumnWidth(): void {\n    const { element } = this;\n    if (element && element.textContent) {\n      const {\n        column,\n      } = this.props;\n      const { innerMaxWidth } = column;\n      if (column) {\n        const { width } = element.getBoundingClientRect();\n        if (width !== 0) {\n          element.style.position = 'absolute';\n          let { width: measureWidth } = element.getBoundingClientRect();\n          element.style.position = '';\n          measureWidth = 20 + measureWidth;\n          const newWidth = Math.max(measureWidth, minColumnWidth(column),column.width?column.width:0);\n          if(!innerMaxWidth || newWidth > innerMaxWidth){\n            set(column, 'innerMaxWidth', newWidth);\n          }\n        }\n      }\n    }\n  }\n\n  computeOverFlow(): boolean {\n    const { element } = this;\n    if (element && element.textContent) {\n      const {\n        column: { tooltip },\n      } = this.props;\n      if (tooltip === TableColumnTooltip.always) {\n        return true;\n      }\n      if (tooltip === TableColumnTooltip.overflow) {\n        const { width } = element.getBoundingClientRect();\n        if (width !== 0) {\n          element.style.position = 'absolute';\n          const { width: measureWidth } = element.getBoundingClientRect();\n          element.style.position = '';\n          return measureWidth > width;\n        }\n      }\n    }\n    return false;\n  }\n\n  @autobind\n  handleEditorKeyDown(e) {\n    switch (e.keyCode) {\n      case KeyCode.TAB: {\n        const { prefixCls, column } = this.props;\n        const { tableStore } = this.context;\n        const cell = findCell(tableStore, prefixCls, getColumnKey(column));\n        if (cell) {\n          if (cell.contains(document.activeElement)) {\n            inTab = true;\n          } else {\n            const node = findFirstFocusableElement(cell);\n            if (node) {\n              inTab = true;\n              node.focus();\n            }\n          }\n        }\n        break;\n      }\n      default:\n    }\n  }\n\n  @autobind\n  handleFocus(e) {\n    const { tableStore } = this.context;\n    const { currentEditorName, dataSet, inlineEdit } = tableStore;\n    const {\n      prefixCls,\n      record,\n      column,\n      column: { lock },\n    } = this.props;\n    if (!currentEditorName && !isDisabledRow(record) && (!inlineEdit || record.editing)) {\n      dataSet.current = record;\n      this.showEditor(e.currentTarget, lock);\n      if (!this.cellEditor || isRadio(this.cellEditor)) {\n        const cell = findCell(tableStore, prefixCls, getColumnKey(column), lock);\n        if (cell && !cell.contains(document.activeElement)) {\n          const node = findFirstFocusableElement(cell);\n          if (node && !inTab) {\n            node.focus();\n          }\n        }\n      }\n    }\n    inTab = false;\n  }\n\n  @autobind\n  handleCommandEdit() {\n    const { record } = this.props;\n    const { tableStore } = this.context;\n    if (tableStore.inlineEdit) {\n      tableStore.currentEditRecord = record;\n    }\n  }\n\n  @autobind\n  handleCommandDelete() {\n    const { record } = this.props;\n    const { tableStore } = this.context;\n    const { dataSet } = tableStore;\n    dataSet.delete(record);\n  }\n\n  @autobind\n  async handleCommandSave() {\n    const { tableStore } = this.context;\n    const { dataSet } = tableStore;\n    if ((await dataSet.submit()) !== false) {\n      tableStore.currentEditRecord = undefined;\n    }\n  }\n\n  @autobind\n  handleCommandCancel() {\n    const { record } = this.props;\n    const { tableStore } = this.context;\n    if (record.status === RecordStatus.add) {\n      const { dataSet } = tableStore;\n      dataSet.remove(record);\n    } else {\n      record.reset();\n      tableStore.currentEditRecord = undefined;\n    }\n  }\n\n  getButtonProps(\n    type: TableCommandType,\n    record: Record,\n  ): ButtonProps & { onClick: MouseEventHandler<any>; children?: ReactNode } | undefined {\n    const disabled = isDisabledRow(record);\n    switch (type) {\n      case TableCommandType.edit:\n        return {\n          icon: 'mode_edit',\n          onClick: this.handleCommandEdit,\n          disabled,\n          title: $l('Table', 'edit_button'),\n        };\n      case TableCommandType.delete:\n        return {\n          icon: 'delete',\n          onClick: this.handleCommandDelete,\n          disabled,\n          title: $l('Table', 'delete_button'),\n        };\n      default:\n    }\n  }\n\n  @autobind\n  renderCommand() {\n    const { record } = this.props;\n    const command = this.getCommand();\n    const tableCommandProps = getConfig('tableCommandProps');\n    if (record.editing) {\n      return [\n        <Tooltip key=\"save\" title={$l('Table', 'save_button')}>\n          <Button {...tableCommandProps} icon=\"finished\" onClick={this.handleCommandSave} />\n        </Tooltip>,\n        <Tooltip key=\"cancel\" title={$l('Table', 'cancel_button')}>\n          <Button {...tableCommandProps} icon=\"cancle_a\" onClick={this.handleCommandCancel} />\n        </Tooltip>,\n      ];\n    }\n    if (command) {\n      const children: ReactElement<ButtonProps>[] = [];\n      command.forEach(button => {\n        let props: TableButtonProps = {};\n        if (isArrayLike(button)) {\n          props = button[1] || {};\n          button = button[0];\n        }\n        if (isString(button) && button in TableCommandType) {\n          const defaultButtonProps = this.getButtonProps(button, record);\n          if (defaultButtonProps) {\n            const { afterClick, ...buttonProps } = props;\n            if (afterClick) {\n              const { onClick } = defaultButtonProps;\n              defaultButtonProps.onClick = async e => {\n                e.persist();\n                try {\n                  await onClick(e);\n                } finally {\n                  afterClick(e);\n                }\n              };\n            }\n            const { title, ...otherProps } = defaultButtonProps;\n            children.push(\n              <Tooltip key={button} title={title}>\n                <Button {...tableCommandProps} {...otherProps} {...buttonProps} />\n              </Tooltip>,\n            );\n          }\n        } else if (isValidElement<ButtonProps>(button)) {\n          children.push(cloneElement(button, { ...tableCommandProps, ...button.props }));\n        } else if (isObject(button)) {\n          children.push(<Button {...tableCommandProps} {...button} />);\n        }\n      });\n      return children;\n    }\n  }\n\n  @autobind\n  renderEditor() {\n    const { cellEditor } = this;\n    if (isValidElement(cellEditor)) {\n      const {\n        tableStore: { dataSet, pristine, inlineEdit },\n      } = this.context;\n      const {\n        column: { name },\n        record,\n      } = this.props;\n      const { checkField } = dataSet.props;\n      const newEditorProps = {\n        ...cellEditor.props,\n        record,\n        name,\n        pristine,\n        disabled: isDisabledRow(record) || (inlineEdit && !record.editing),\n        indeterminate: checkField && checkField === name && record.isIndeterminate,\n        labelLayout: LabelLayout.none,\n      };\n      return cloneElement(cellEditor, newEditorProps as FormFieldProps);\n    }\n  }\n\n  getCheckBox() {\n    const { record } = this.props;\n    const {\n      tableStore: { dataSet },\n    } = this.context;\n    const { checkField } = dataSet.props;\n    if (checkField) {\n      return (\n        <ObserverCheckBox\n          name={checkField}\n          record={record}\n          disabled={isDisabledRow(record)}\n          indeterminate={record.isIndeterminate}\n        />\n      );\n    }\n  }\n\n  getCommand(): Commands[] | undefined {\n    const {\n      column: { command },\n      record,\n    } = this.props;\n    const {\n      tableStore: { dataSet },\n    } = this.context;\n    if (typeof command === 'function') {\n      return command({ dataSet, record });\n    }\n    return command;\n  }\n\n  getCellRenderer(command?: Commands[]): Renderer | undefined {\n    const { column } = this.props;\n    const { renderer } = column;\n    if (command) {\n      return this.renderCommand;\n    }\n    if (this.cellEditorInCell) {\n      return this.renderEditor;\n    }\n    return renderer;\n  }\n\n  getInnerNode(prefixCls, command?: Commands[]) {\n    const {\n      context: {\n        tableStore: { rowHeight, expandIconAsCell, hasCheckFieldColumn, pristine, props:{ autoMaxWidth } },\n      },\n      props: { children },\n    } = this;\n    if (expandIconAsCell && children) {\n      return children;\n    }\n    const { column, record, indentSize } = this.props;\n    const { name, tooltip } = column;\n    const { hasEditor } = this;\n    const innerProps: any = {\n      className: `${prefixCls}-inner`,\n      tabIndex: hasEditor && !isDisabledRow(record) ? 0 : -1,\n      onFocus: this.handleFocus,\n      pristine,\n    };\n    if (!hasEditor) {\n      innerProps.onKeyDown = this.handleEditorKeyDown;\n    }\n    if (rowHeight !== 'auto') {\n      innerProps.style = {\n        height: pxToRem(rowHeight),\n      };\n      if(autoMaxWidth|| (tooltip && tooltip !== TableColumnTooltip.none)){\n        innerProps.ref = this.saveOutput;\n      }\n    }\n    const indentText = children && (\n      <span style={{ paddingLeft: pxToRem(indentSize * record.level) }} />\n    );\n\n    const checkBox = children && !hasCheckFieldColumn && this.getCheckBox();\n\n    const prefix = (indentText || children || checkBox) && (\n      <span key=\"prefix\" className={`${prefixCls}-prefix`} style={innerProps.style}>\n        {indentText}\n        {children}\n        {checkBox}\n      </span>\n    );\n    const output = (\n      <Output\n        key=\"output\"\n        {...innerProps}\n        record={record}\n        renderer={this.getCellRenderer(command)}\n        name={name}\n        disabled={isDisabledRow(record)}\n        showHelp={ShowHelp.none}\n      />\n    );\n    const text = this.overflow ? (\n      <Tooltip key=\"tooltip\" title={cloneElement(output, { ref: null, className: null })}>\n        {output}\n      </Tooltip>\n    ) : (\n      output\n    );\n    return [prefix, text];\n  }\n\n  componentWillUnmount(): void {\n    this.disconnect();\n  }\n\n  render() {\n    const { column, prefixCls, record } = this.props;\n    const {\n      tableStore: { inlineEdit, pristine,props:{autoMaxWidth} },\n    } = this.context;\n    const { className, style, align, name, onCell, tooltip } = column;\n    const command = this.getCommand();\n    const field = name ? record.getField(name) : undefined;\n    const cellPrefix = `${prefixCls}-cell`;\n    const cellExternalProps: HTMLProps<HTMLTableCellElement> =\n      typeof onCell === 'function'\n        ? onCell({\n            dataSet: record.dataSet!,\n            record,\n            column,\n          })\n        : {};\n    const cellStyle: CSSProperties = {\n      textAlign: align || (command ? ColumnAlign.center : getAlignByField(field)),\n      ...style,\n      ...cellExternalProps.style,\n    };\n    const classString = classNames(\n      cellPrefix,\n      {\n        [`${cellPrefix}-dirty`]: field && !pristine && field.dirty,\n        [`${cellPrefix}-required`]: field && !inlineEdit && field.required,\n        [`${cellPrefix}-editable`]: !inlineEdit && this.hasEditor,\n      },\n      className,\n      cellExternalProps.className,\n    );\n    const widthDraggingStyle = ():React.CSSProperties =>{\n      const draggingStyle:React.CSSProperties = {}\n      if(column.width){\n        draggingStyle.width = pxToRem(column.width)\n      }\n      if(column.minWidth){\n        draggingStyle.minWidth = pxToRem(column.minWidth)\n      }\n      draggingStyle.whiteSpace = \"nowrap\"\n      return draggingStyle\n    }\n    const td = (\n      <td\n        {...cellExternalProps}\n        className={classString}\n        style={{...omit(cellStyle, ['width', 'height']),...widthDraggingStyle()}}\n        data-index={getColumnKey(column)}\n      >\n        {this.getInnerNode(cellPrefix, command)}\n      </td>\n    );\n    return (autoMaxWidth || tooltip === TableColumnTooltip.overflow) ? (\n      <ReactResizeObserver onResize={this.handleResize} resizeProp=\"width\">\n        {td}\n      </ReactResizeObserver>\n    ) : (\n      td\n    );\n  }\n\n  showEditor(cell, lock?: ColumnLock | boolean) {\n    const {\n      column: { name },\n    } = this.props;\n    const { tableStore } = this.context;\n    const { cellEditor } = this;\n    if (name && cellEditor && !isRadio(cellEditor)) {\n      if (!lock) {\n        const { node, overflowX } = tableStore;\n        if (overflowX) {\n          const tableBodyWrap = cell.offsetParent;\n          if (tableBodyWrap) {\n            const { leftLeafColumnsWidth, rightLeafColumnsWidth } = tableStore;\n            const { offsetLeft, offsetWidth } = cell;\n            const { scrollLeft } = tableBodyWrap;\n            const { width } = tableBodyWrap.getBoundingClientRect();\n            const leftSide = offsetLeft - leftLeafColumnsWidth;\n            const rightSide =\n              offsetLeft + offsetWidth - width + rightLeafColumnsWidth + measureScrollbar();\n            let sl = scrollLeft;\n            if (sl < rightSide) {\n              sl = rightSide;\n            }\n            if (sl > leftSide) {\n              sl = leftSide;\n            }\n            if (sl !== scrollLeft) {\n              tableBodyWrap.scrollLeft = sl;\n              node.handleBodyScrollLeft({\n                target: tableBodyWrap,\n                currentTarget: tableBodyWrap,\n              });\n            }\n          }\n        }\n      }\n      tableStore.showEditor(name);\n    }\n  }\n}\n"]}