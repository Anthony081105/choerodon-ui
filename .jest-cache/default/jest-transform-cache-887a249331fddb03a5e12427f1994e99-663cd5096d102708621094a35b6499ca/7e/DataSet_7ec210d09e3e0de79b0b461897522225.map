{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/data-set/DataSet.tsx"],"names":[],"mappings":"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","sourcesContent":["import { ReactNode } from 'react';\nimport {\n  action,\n  computed,\n  get,\n  IReactionDisposer,\n  isArrayLike,\n  observable,\n  runInAction,\n  set,\n  toJS,\n} from 'mobx';\nimport axiosStatic, { AxiosInstance, AxiosRequestConfig } from 'axios';\nimport omit from 'lodash/omit';\nimport flatMap from 'lodash/flatMap';\nimport isNumber from 'lodash/isNumber';\nimport isArray from 'lodash/isArray';\nimport isObject from 'lodash/isObject';\nimport isNil from 'lodash/isNil';\nimport defer from 'lodash/defer';\nimport debounce from 'lodash/debounce';\nimport warning from 'choerodon-ui/lib/_util/warning';\nimport { getConfig } from 'choerodon-ui/lib/configure';\nimport localeContext, { $l } from '../locale-context';\nimport axios from '../axios';\nimport Record from './Record';\nimport Field, { FieldProps, Fields } from './Field';\nimport {\n  adapterDataToJSON,\n  axiosConfigAdapter,\n  checkParentByInsert,\n  doExport,\n  findBindFieldBy,\n  generateData,\n  generateJSONData,\n  generateResponseData,\n  getFieldSorter,\n  getOrderFields,\n  isDirtyRecord,\n  prepareForSubmit,\n  prepareSubmitData,\n  processIntlField,\n  sortTree,\n  useCascade,\n  useSelected,\n  sliceTree,\n  findRootParent,\n} from './utils';\nimport EventManager from '../_util/EventManager';\nimport DataSetSnapshot from './DataSetSnapshot';\nimport confirm from '../modal/confirm';\nimport {\n  DataSetEvents,\n  DataSetSelection,\n  DataSetStatus,\n  DataToJSON,\n  FieldType,\n  RecordStatus,\n  SortOrder,\n} from './enum';\nimport { Lang } from '../locale-context/enum';\nimport isEmpty from '../_util/isEmpty';\nimport * as ObjectChainValue from '../_util/ObjectChainValue';\nimport Transport, { TransportProps } from './Transport';\nimport PromiseQueue from '../_util/PromiseQueue';\nimport { ModalProps } from '../modal/Modal';\nimport { confirmProps } from '../modal/utils';\nimport DataSetRequestError from './DataSetRequestError';\nimport defaultFeedback, { FeedBack } from './FeedBack';\n\nexport type DataSetChildren = { [key: string]: DataSet };\n\nexport type Events = { [key: string]: Function };\n\nexport interface DataSetProps {\n  /**\n   * 唯一标识\n   * @see children\n   */\n  id?: string;\n  /**\n   * 对应后台ds的name，用于自动生成约定的submitUrl, queryUrl, tlsUrl，也可用于级联\n   * @see children\n   */\n  name?: string;\n  /**\n   * 主键字段名，一般用作级联行表的查询字段\n   */\n  primaryKey?: string;\n  /**\n   * 语言\n   */\n  lang?: Lang;\n  /**\n   * 字段组\n   */\n  fields?: FieldProps[];\n  /**\n   * 查询字段组\n   */\n  queryFields?: FieldProps[];\n  /**\n   * 事件\n   */\n  events?: Events;\n  /**\n   * 初始化数据\n   */\n  data?: object[];\n  /**\n   * 初始化后自动查询\n   * @default false\n   */\n  autoQuery?: boolean;\n  /**\n   * 提交成功后响应的数据不符合回写条件时自动查询\n   * @default true\n   */\n  autoQueryAfterSubmit?: boolean;\n  /**\n   * 初始化时，如果没有记录且autoQuery为false，则自动创建记录\n   * @default false;\n   */\n  autoCreate?: boolean;\n  /**\n   * 自动定位到第一条\n   * @default true;\n   */\n  autoLocateFirst?: boolean;\n  /**\n   * 自动定位到新建记录\n   * @default true;\n   */\n  autoLocateAfterCreate?: boolean;\n  /**\n   * 当前记录被删除时自动定位其他记录\n   * @default true;\n   */\n  autoLocateAfterRemove?: boolean;\n  /**\n   * 选择的模式\n   * @default \"multiple\"\n   */\n  selection?: DataSetSelection | false;\n  /**\n   * 查询前，当有记录更改过时，是否警告提示\n   * @default true\n   */\n  modifiedCheck?: boolean;\n  /**\n   * 分页大小\n   * @default 10\n   */\n  pageSize?: number;\n  /**\n   * 前端分页、后端分页还是不分页\n   */\n  paging?: boolean | 'server';\n  /**\n   * 查询返回的json中对应的数据的key\n   * @default \"rows\"\n   */\n  dataKey?: string;\n  /**\n   * 查询返回的json中对应的总数的key\n   * @default \"total\"\n   */\n  totalKey?: string;\n  /**\n   * 查询条件数据源\n   */\n  queryDataSet?: DataSet;\n  /**\n   * 查询参数\n   */\n  queryParameter?: object;\n  /**\n   * 查询请求的url\n   */\n  queryUrl?: string;\n  /**\n   * 记录提交请求的url\n   */\n  submitUrl?: string;\n  /**\n   * 多语言查询请求的url\n   */\n  tlsUrl?: string;\n  /**\n   * 远程校验查询请求的url。如唯一性校验。\n   */\n  validateUrl?: string;\n  /**\n   * 导出请求的url\n   */\n  exportUrl?: string;\n  /**\n   * 自定义CRUD的请求配置\n   */\n  transport?: TransportProps;\n  /**\n   * 查询和提交数据的反馈配置\n   */\n  feedback?: TransportProps;\n  /**\n   * 级联行数据集, 当为数组时，数组成员必须是有name属性的DataSet\n   * @example\n   * { name_1: 'ds-id-1', name_2: 'ds-id-2' }\n   * { name_1: ds1, name_2: ds2 }\n   * [ds1, ds2]\n   */\n  children?: { [key: string]: string | DataSet } | DataSet[];\n  /**\n   * 树形数据当前节点id字段名\n   */\n  idField?: string;\n  /**\n   * 树形数据当前父节点id字段名\n   */\n  parentField?: string;\n  /**\n   * 树形数据标记节点是否展开的字段名\n   */\n  expandField?: string;\n  /**\n   * 树形数据标记节点是否为选中的字段名，在展开按钮后面会显示checkbox\n   */\n  checkField?: string;\n  /**\n   * 缓存选中记录，使切换分页时仍保留选中状态。\n   * 当设置了primaryKey或有字段设置了unique才起作用。\n   * @default true\n   */\n  cacheSelection?: boolean;\n  /**\n   * 覆盖默认axios\n   */\n  axios?: AxiosInstance;\n  /**\n   * 数据转为json的方式\n   * dirty - 只转换变更的数据，包括本身无变更但级联有变更的数据\n   * selected - 只转换选中的数据，无关数据的变更状态\n   * all - 转换所有数据\n   * normal - 转换所有数据，且不会带上__status, __id等附加字段\n   * dirty-self - 同dirty， 但不转换级联数据\n   * selected-self - 同selected， 但不转换级联数据\n   * all-self - 同all， 但不转换级联数据\n   * normal-self - 同normal， 但不转换级联数据\n   * @default dirty\n   */\n  dataToJSON?: DataToJSON;\n  /**\n   * 级联查询参数\n   */\n  cascadeParams?: (parent: Record, primaryKey?: string) => object;\n}\n\nexport default class DataSet extends EventManager {\n  static defaultProps: DataSetProps = {\n    autoCreate: false,\n    autoQuery: false,\n    autoQueryAfterSubmit: true,\n    autoLocateFirst: true,\n    autoLocateAfterCreate: true,\n    autoLocateAfterRemove: true,\n    selection: DataSetSelection.multiple,\n    modifiedCheck: true,\n    pageSize: 10,\n    paging: true,\n    dataToJSON: DataToJSON.dirty,\n    cascadeParams(parent, primaryKey) {\n      if (primaryKey) {\n        return { [primaryKey]: parent.get(primaryKey) };\n      }\n      return omit(parent.toData(), ['__dirty']);\n    },\n  };\n\n  id?: string;\n\n  children: DataSetChildren = {};\n\n  queryParameter: object;\n\n  pending: PromiseQueue = new PromiseQueue();\n\n  reaction: IReactionDisposer;\n\n  originalData: Record[] = [];\n\n  resetInBatch: boolean = false;\n\n  @observable parent?: DataSet;\n\n  @observable name?: string;\n\n  @observable parentName?: string;\n\n  @observable records: Record[];\n\n  @observable fields: Fields;\n\n  @observable props: DataSetProps;\n\n  @observable pageSize: number;\n\n  @observable totalCount: number;\n\n  @observable status: DataSetStatus;\n\n  @observable currentPage: number;\n\n  @observable selection: DataSetSelection | false;\n\n  @observable cachedSelected: Record[];\n\n  @observable dataToJSON: DataToJSON;\n\n  @computed\n  get axios(): AxiosInstance {\n    return this.props.axios || getConfig('axios') || axios;\n  }\n\n  @computed\n  get dataKey(): string {\n    const { dataKey = getConfig('dataKey') } = this.props;\n    return dataKey;\n  }\n\n  @computed\n  get totalKey(): string {\n    return this.props.totalKey || getConfig('totalKey');\n  }\n\n  @computed\n  get lang(): Lang {\n    return get(this.props, 'lang') || localeContext.locale.lang;\n  }\n\n  set lang(lang: Lang) {\n    runInAction(() => {\n      set(this.props, 'lang', lang);\n    });\n  }\n\n  get queryDataSet(): DataSet | undefined {\n    return get(this.props, 'queryDataSet');\n  }\n\n  /**\n   * 设置查询的DataSet.\n   * @param {DataSet} ds DataSet.\n   */\n  set queryDataSet(ds: DataSet | undefined) {\n    runInAction(() => {\n      set(this.props, 'queryDataSet', ds);\n      if (ds) {\n        // 初始化时如果直接执行create，mobx会报错，所以使用了defer\n        ds.pending.add(\n          new Promise(reslove => {\n            defer(() => {\n              if (ds.records.length === 0) {\n                ds.create();\n              } else if (!ds.current) {\n                ds.first();\n              }\n              reslove();\n            });\n          }),\n        );\n      }\n    });\n  }\n\n  @computed\n  get queryUrl(): string | undefined {\n    return get(this.props, 'queryUrl') || (this.name && `/dataset/${this.name}/queries`);\n  }\n\n  /**\n   * 设置提交的Url.\n   * @param {String} url 提交的Url.\n   */\n  set queryUrl(url: string | undefined) {\n    runInAction(() => {\n      set(this.props, 'queryUrl', url);\n    });\n  }\n\n  @computed\n  get submitUrl(): string | undefined {\n    return get(this.props, 'submitUrl') || (this.name && `/dataset/${this.name}/mutations`);\n  }\n\n  /**\n   * 设置查询的Url.\n   * @param {String} url 查询的Url.\n   */\n  set submitUrl(url: string | undefined) {\n    runInAction(() => {\n      set(this.props, 'submitUrl', url);\n    });\n  }\n\n  @computed\n  get tlsUrl(): string | undefined {\n    return get(this.props, 'tlsUrl') || (this.name && `/dataset/${this.name}/languages`);\n  }\n\n  /**\n   * 设置多语言的Url.\n   * @param {String} url 多语言的Url.\n   */\n  set tlsUrl(url: string | undefined) {\n    runInAction(() => {\n      set(this.props, 'tlsUrl', url);\n    });\n  }\n\n  @computed\n  get validateUrl(): string | undefined {\n    return get(this.props, 'validateUrl') || (this.name && `/dataset/${this.name}/validate`);\n  }\n\n  /**\n   * 设置远程校验查询请求的url.\n   * @param {String} url 远程校验查询请求的url.\n   */\n  set validateUrl(url: string | undefined) {\n    runInAction(() => {\n      set(this.props, 'validateUrl', url);\n    });\n  }\n\n  @computed\n  get exportUrl(): string | undefined {\n    return get(this.props, 'exportUrl') || (this.name && `/dataset/${this.name}/export`);\n  }\n\n  /**\n   * 设置导出请求的url.\n   * @param {String} url 远程校验查询请求的url.\n   */\n  set exportUrl(url: string | undefined) {\n    runInAction(() => {\n      set(this.props, 'exportUrl', url);\n    });\n  }\n\n  set transport(transport: Transport) {\n    runInAction(() => {\n      this.props.transport = transport instanceof Transport ? transport.props : transport;\n    });\n  }\n\n  @computed\n  get transport(): Transport {\n    return new Transport(this.props.transport, this);\n  }\n\n  @computed\n  get feedback(): FeedBack {\n    return {\n      ...getConfig('feedback'),\n      ...this.props.feedback,\n    };\n  }\n\n  @computed\n  get data(): Record[] {\n    return this.records.filter(record => !record.isRemoved);\n  }\n\n  set data(records: Record[]) {\n    this.loadData(records);\n  }\n\n  @computed\n  get dirtyRecords(): [Record[], Record[], Record[]] {\n    const created: Record[] = [];\n    const updated: Record[] = [];\n    const destroyed: Record[] = [];\n    this.records.forEach(record => {\n      switch (record.status) {\n        case RecordStatus.add:\n          created.push(record);\n          break;\n        case RecordStatus.update:\n          updated.push(record);\n          break;\n        case RecordStatus.delete:\n          destroyed.push(record);\n          break;\n        default: {\n          if (record.dirty) {\n            updated.push(record);\n          }\n        }\n      }\n    });\n    return [created, updated, destroyed];\n  }\n\n  /**\n   * 获取新建的记录集\n   * @return 记录集\n   */\n  @computed\n  get created(): Record[] {\n    return this.dirtyRecords[0];\n  }\n\n  /**\n   * 获取变更的记录集\n   * @return 记录集\n   */\n  @computed\n  get updated(): Record[] {\n    return this.dirtyRecords[1];\n  }\n\n  /**\n   * 获取删除的记录集\n   * @return 记录集\n   */\n  @computed\n  get destroyed(): Record[] {\n    return this.dirtyRecords[2];\n  }\n\n  /**\n   * 获取选中的记录集\n   * @return 记录集\n   */\n  @computed\n  get selected(): Record[] {\n    return this.currentSelected.concat(this.cachedSelected.filter(record => record.isSelected));\n  }\n\n  @computed\n  get currentSelected(): Record[] {\n    return this.records.filter(record => record.isSelected);\n  }\n\n  @computed\n  get totalPage(): number {\n    return this.paging ? Math.ceil(this.totalCount / this.pageSize) : 1;\n  }\n\n  // 如果paging为server 返回root父节点的排序\n\n  @computed\n  get currentIndex(): number {\n    const { current, pageSize, currentPage } = this;\n    if (current) {\n      const index = this.indexOf(current);\n      if (index !== -1) {\n        if(this.paging === 'server'){\n          const currentParent = findRootParent(current)\n          let parentIndex = -1\n          this.treeData.forEach((item,indexTree) => {\n            if(this.indexOf(item) === this.indexOf(currentParent)){\n              parentIndex = indexTree;\n            }\n          })\n          return parentIndex;\n        }\n        return index + (currentPage - 1) * pageSize;\n      }\n    }\n    return -1;\n  }\n\n  set currentIndex(index: number) {\n    this.locate(index);\n  }\n\n  /**\n   * 记录数\n   */\n  @computed\n  get length(): number {\n    return this.data.length;\n  }\n\n  get hasChildren(): boolean {\n    return Object.keys(this.children).length > 0;\n  }\n\n  @computed\n  get treeRecords(): Record[] {\n    return sortTree(this.records.filter(record => !record.parent), getOrderFields(this.fields)[0]);\n  }\n\n  @computed\n  get treeData(): Record[] {\n    return sortTree(this.filter(record => !record.parent), getOrderFields(this.fields)[0]);\n  }\n\n  @computed\n  get paging(): boolean | 'server' {\n    const { idField, parentField, paging } = this.props;\n    return (paging === `server`)&&parentField&&idField ? paging : (parentField === undefined || idField === undefined) && !!paging! ;\n  }\n\n  set paging(paging) {\n    runInAction(() => {\n      this.props.paging = paging;\n    });\n  }\n\n  /**\n   * 获取当前索引的记录\n   * @return record 记录\n   */\n  @computed\n  get current(): Record | undefined {\n    return (\n      this.data.find(record => record.isCurrent) ||\n      this.cachedSelected.find(record => record.isCurrent)\n    );\n  }\n\n  /**\n   * 将记录设定为当前索引\n   * @param record 记录\n   */\n  set current(record: Record | undefined) {\n    const currentRecord = this.current;\n    if (currentRecord !== record && (!record || !record.isCached)) {\n      runInAction(() => {\n        if (currentRecord) {\n          currentRecord.isCurrent = false;\n        }\n        if (record && record.dataSet === this) {\n          record.isCurrent = true;\n        }\n        this.fireEvent(DataSetEvents.indexChange, {\n          dataSet: this,\n          record,\n          previous: currentRecord,\n        });\n      });\n    }\n  }\n\n  @computed\n  get uniqueKeys(): string[] | undefined {\n    const { primaryKey } = this.props;\n    if (primaryKey) {\n      return [primaryKey];\n    }\n    const keys: string[] = [];\n    [...this.fields.entries()].forEach(([key, field]) => {\n      if (field.get('unique')) {\n        keys.push(key);\n      }\n    });\n    if (keys.length) {\n      return keys;\n    }\n    return undefined;\n  }\n\n  @computed\n  get cacheSelectionKeys(): string[] | undefined {\n    const { cacheSelection, selection } = this.props;\n    if (cacheSelection && selection === DataSetSelection.multiple) {\n      return this.uniqueKeys;\n    }\n    return undefined;\n  }\n\n  /**\n   * 获取所有记录包括缓存的选择记录\n   * @param index 索引\n   * @returns {Record}\n   */\n  @computed\n  get all(): Record[] {\n    return this.records.concat(this.cachedSelected.slice());\n  }\n\n  @computed\n  get dirty(): boolean {\n    return this.records.some(isDirtyRecord);\n  }\n\n  private inBatchSelection: boolean = false;\n\n  private syncChildrenRemote = debounce((remoteKeys: string[], current: Record) => {\n    const { children } = this;\n    remoteKeys.forEach(childName => this.syncChild(children[childName], current, childName));\n  }, 300);\n\n  constructor(props?: DataSetProps) {\n    super();\n    runInAction(() => {\n      props = { ...DataSet.defaultProps, ...props } as DataSetProps;\n      this.props = props;\n      const {\n        data,\n        fields,\n        queryFields,\n        queryDataSet,\n        autoQuery,\n        autoCreate,\n        pageSize,\n        selection,\n        events,\n        id,\n        name,\n        children,\n        queryParameter = {},\n        dataToJSON,\n      } = props;\n      this.name = name;\n      this.dataToJSON = dataToJSON!;\n      this.records = [];\n      this.fields = observable.map<string, Field>();\n      this.totalCount = 0;\n      this.status = DataSetStatus.ready;\n      this.currentPage = 1;\n      this.cachedSelected = [];\n      this.queryParameter = queryParameter;\n      this.pageSize = pageSize!;\n      this.selection = selection!;\n      this.processListener();\n      if (id) {\n        this.id = id;\n      }\n      if (children) {\n        this.initChildren(children);\n      }\n      if (events) {\n        this.initEvents(events);\n      }\n      if (fields) {\n        this.initFields(fields);\n      }\n      this.initQueryDataSet(queryDataSet, queryFields);\n      if (data) {\n        const { length } = data;\n        if (length) {\n          this.loadData(data, length);\n        }\n      }\n      // ssr do not auto query\n      if (autoQuery && typeof window !== 'undefined') {\n        this.query();\n      } else if (autoCreate && this.records.length === 0) {\n        this.create();\n      }\n    });\n  }\n\n  processListener() {\n    this.addEventListener(DataSetEvents.indexChange, this.handleCascade);\n  }\n\n  destroy() {\n    this.clear();\n  }\n\n  snapshot(): DataSetSnapshot {\n    return new DataSetSnapshot(this);\n  }\n\n  @action\n  restore(snapshot: DataSetSnapshot): DataSet {\n    if (snapshot.dataSet !== this) {\n      this.events = {};\n    } else if (snapshot.events) {\n      this.events = snapshot.events;\n    }\n    this.records = snapshot.records;\n    this.originalData = snapshot.originalData;\n    this.totalCount = snapshot.totalCount;\n    this.currentPage = snapshot.currentPage;\n    this.pageSize = snapshot.pageSize;\n    this.cachedSelected = snapshot.cachedSelected;\n    this.dataToJSON = snapshot.dataToJSON;\n    this.children = snapshot.children;\n    this.current = snapshot.current;\n    return this;\n  }\n\n  toData(): object[] {\n    return generateData(this).data;\n  }\n\n  toJSONData(isSelected?: boolean, noCascade?: boolean): object[] {\n    const dataToJSON = adapterDataToJSON(isSelected, noCascade);\n    if (dataToJSON) {\n      this.dataToJSON = dataToJSON;\n    }\n    return generateJSONData(this).data;\n  }\n\n  /**\n   * 等待选中或者所有记录准备就绪\n   * @returns Promise\n   */\n  ready(isSelect?: boolean): Promise<any> {\n    return Promise.all([\n      this.pending.ready(),\n      ...(isSelect || useSelected(this.dataToJSON) ? this.selected : this.data).map(record =>\n        record.ready(),\n      ),\n      ...[...this.fields.values()].map(field => field.ready()),\n    ]);\n  }\n\n  /**\n   * 查询记录\n   * @param page 页码\n   * @return Promise\n   */\n  query(page?: number): Promise<any> {\n    return this.pending.add(this.doQuery(page));\n  }\n\n  async doQuery(page): Promise<any> {\n    const data = await this.read(page);\n    this.loadDataFromResponse(data);\n    return data;\n  }\n\n  /**\n   * 将数据集中的增删改的记录进行远程提交\n   * @param isSelect 如果为true，则只提交选中记录\n   * @param noCascade 如果为true，则不提交级联数据\n   * @return Promise\n   */\n  async submit(isSelect?: boolean, noCascade?: boolean): Promise<any> {\n    const dataToJSON = adapterDataToJSON(isSelect, noCascade);\n    if (dataToJSON) {\n      this.dataToJSON = dataToJSON;\n    }\n    await this.ready();\n    if (await this.validate()) {\n      return this.pending.add(\n        this.write(useSelected(this.dataToJSON) ? this.selected : this.records),\n      );\n    }\n    return false;\n  }\n\n  /**\n   * 导出数据\n   * @param object columns 导出的列\n   */\n  async export(columns: any = {}): Promise<void> {\n    if (this.checkReadable(this.parent) && (await this.ready())) {\n      const data = await this.generateQueryParameter();\n      data._HAP_EXCEL_EXPORT_COLUMNS = columns;\n      const { totalCount, totalKey } = this;\n      const params = { _r: Date.now(), ...this.generateOrderQueryString() };\n      ObjectChainValue.set(params, totalKey, totalCount);\n      const newConfig = axiosConfigAdapter('exports', this, data, params);\n      if (newConfig.url) {\n        if (\n          (await this.fireEvent(DataSetEvents.export, {\n            dataSet: this,\n            params: newConfig.params,\n            data: newConfig.data,\n          })) !== false\n        ) {\n          doExport(this.axios.getUri(newConfig), newConfig.data, newConfig.method);\n        }\n      } else {\n        warning(false, 'Unable to execute the export method of dataset, please check the ');\n      }\n    }\n  }\n\n  /**\n   * 重置更改\n   */\n  @action\n  reset(): DataSet {\n    this.resetInBatch = true;\n    this.records = this.originalData.map(record => record.reset());\n    this.resetInBatch = false;\n    if (this.props.autoCreate && this.records.length === 0) {\n      this.create();\n    }\n    this.fireEvent(DataSetEvents.reset, { dataSet: this, records: this.records });\n    return this;\n  }\n\n  /**\n   * 定位到指定页码，如果paging为true或`server`，则做远程查询，约定当为Tree 状态的server时候 跳转到下一页也就是index为当前的index加上1\n   * @param page 页码\n   * @return Promise\n   */\n  page(page: number): Promise<any> {\n    if (page > 0 && this.paging) {\n      return this.locate((page - 1) * this.pageSize + this.created.length - this.destroyed.length);\n    }\n    warning(page > 0, 'Page number is incorrect.');\n    warning(!!this.paging, 'Can not paging query util the property<paging> of DataSet is true or `server`.');\n    return Promise.resolve();\n  }\n\n  /**\n   * 定位记录\n   * @param index 索引\n   * @return Promise\n   */\n  async locate(index: number): Promise<Record | undefined> {\n    const { paging, pageSize, totalCount } = this;\n    const { modifiedCheck } = this.props;\n    let currentRecord = this.findInAllPage(index);\n    if (currentRecord ) {\n      this.current = currentRecord;\n      return currentRecord;\n    }\n    if (paging === true || paging === 'server') {\n      if (index >= 0 && index < totalCount + this.created.length - this.destroyed.length ) {\n        if (\n          !modifiedCheck ||\n          !this.dirty ||\n          (await confirm($l('DataSet', 'unsaved_data_confirm'))) !== 'cancel'\n        ) {\n          await this.query(Math.floor(index / pageSize) + 1);\n          currentRecord = this.findInAllPage(index);\n          if (currentRecord) {\n            this.current = currentRecord;\n            return currentRecord;\n          }\n        }\n      }\n    }\n    warning(false, 'Located index of Record is out of boundary.');\n    return Promise.resolve(undefined);\n  }\n\n  /**\n   * 定位到第一条记录\n   * @return Promise\n   */\n  first(): Promise<Record | undefined> {\n    return this.locate(0);\n  }\n\n  /**\n   * 定位到最后一条记录\n   * @return Promise\n   */\n  last(): Promise<Record | undefined> {\n    return this.locate((this.paging ? this.totalCount : this.length) - 1);\n  }\n\n  /**\n   * 定位到当前记录的上一条记录\n   * 若当前页中当前记录为第一条记录且有上一页，则会查询上一页并定位到上一页的最后一条记录\n   * @return Promise\n   */\n  pre(): Promise<Record | undefined> {\n    return this.locate(this.currentIndex - 1);\n  }\n\n  /**\n   * 定位到当前记录的下一条记录\n   * 若当前页中当前记录为最后一条记录且有下一页，则会查询下一页并定位到下一页的第一条记录\n   * @return Promise\n   */\n  next(): Promise<Record | undefined> {\n    return this.locate(this.currentIndex + 1);\n  }\n\n  /**\n   * 定位到首页\n   * @return Promise\n   */\n  firstPage(): Promise<any> {\n    return this.page(1);\n  }\n\n  /**\n   * 定位到上一页\n   * @return Promise\n   */\n  prePage(): Promise<any> {\n    return this.page(this.currentPage - 1);\n  }\n\n  /**\n   * 定位到下一页\n   * @return Promise\n   */\n  nextPage(): Promise<any> {\n    return this.page(this.currentPage + 1);\n  }\n\n  /**\n   * 定位到尾页\n   * @return Promise\n   */\n  lastPage(): Promise<any> {\n    return this.page(this.totalPage);\n  }\n\n  /**\n   * 创建一条记录\n   * @param data 数据对象\n   * @param dataIndex 记录所在的索引\n   * @return 新建的记录\n   */\n  create(data: object = {}, dataIndex?: number): Record {\n    if (data === null) {\n      data = {};\n    }\n    [...this.fields.entries()].forEach(([name, field]) => {\n      const defaultValue = field.get('defaultValue');\n      const value = ObjectChainValue.get(data, name);\n      if (value === undefined && defaultValue !== undefined) {\n        ObjectChainValue.set(data, name, toJS(defaultValue));\n      }\n    });\n    const record = new Record(data, this);\n    if (isNumber(dataIndex)) {\n      this.splice(dataIndex, 0, record);\n    } else {\n      this.push(record);\n    }\n    if (this.props.autoLocateAfterCreate) {\n      this.current = record;\n    }\n    this.fireEvent(DataSetEvents.create, { dataSet: this, record });\n    return record;\n  }\n\n  /**\n   * 立即删除记录\n   * @param records 记录或者记录数组，默认当前记录\n   * @param confirmMessage 提示信息或弹窗的属性\n   * @return Promise\n   */\n  async delete(\n    records?: Record | Record[],\n    confirmMessage?: ReactNode | ModalProps & confirmProps,\n  ): Promise<any> {\n    if (records) {\n      records = ([] as Record[]).concat(records);\n      if (\n        records.length > 0 &&\n        (await this.fireEvent(DataSetEvents.beforeDelete, { dataSet: this, records })) !== false &&\n        (await confirm(confirmMessage || $l('DataSet', 'delete_selected_row_confirm'))) !== 'cancel'\n      ) {\n        this.remove(records);\n        return this.pending.add(this.write(this.destroyed));\n      }\n    }\n  }\n\n  /**\n   * 临时删除记录\n   * @param records 记录或者记录数组\n   */\n  @action\n  remove(records?: Record | Record[]): void {\n    if (records) {\n      const data = isArrayLike(records) ? records.slice() : [records];\n      if (data.length) {\n        const { current } = this;\n        data.forEach(this.deleteRecord, this);\n        this.fireEvent(DataSetEvents.remove, { dataSet: this, records: data });\n        if (!this.current) {\n          let record;\n          if (this.props.autoLocateAfterRemove) {\n            record = this.get(0);\n            if (record) {\n              record.isCurrent = true;\n            }\n          }\n          if (current !== record) {\n            this.fireEvent(DataSetEvents.indexChange, { dataSet: this, record, previous: current });\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * 临时删除所有记录\n   */\n  @action\n  removeAll() {\n    const { current, data } = this;\n    if (data.length) {\n      data.forEach(this.deleteRecord, this);\n      this.fireEvent(DataSetEvents.remove, { dataSet: this, records: data });\n      if (current) {\n        this.fireEvent(DataSetEvents.indexChange, { dataSet: this, previous: current });\n      }\n    }\n  }\n\n  /**\n   * 删除所有记录\n   * @param confirmMessage 提示信息或弹窗的属性\n   */\n  @action\n  async deleteAll(confirmMessage?: ReactNode | ModalProps & confirmProps) {\n    if (\n      this.records.length > 0 &&\n      (await confirm(confirmMessage || $l('DataSet', 'delete_all_row_confirm'))) !== 'cancel'\n    ) {\n      this.removeAll();\n      return this.pending.add(this.write(this.destroyed));\n    }\n  }\n\n  /**\n   * 将若干数据记录插入记录堆栈顶部\n   * @param records 数据集\n   * @return 堆栈数量\n   */\n  @action\n  push(...records: Record[]): number {\n    checkParentByInsert(this);\n    return this.records.push(...this.transferRecords(records));\n  }\n\n  /**\n   * 将若干数据记录插入记录堆栈底部\n   * @param records 数据集\n   * @return 堆栈数量\n   */\n  @action\n  unshift(...records: Record[]): number {\n    checkParentByInsert(this);\n    return this.records.unshift(...this.transferRecords(records));\n  }\n\n  /**\n   * 从记录堆栈顶部获取记录\n   * @return 记录\n   */\n  @action\n  pop(): Record | undefined {\n    return this.deleteRecord(this.data.pop());\n  }\n\n  /**\n   * 从记录堆栈底部获取记录\n   * @return 记录\n   */\n  @action\n  shift(): Record | undefined {\n    return this.deleteRecord(this.data.shift());\n  }\n\n  /**\n   * 删除指定索引的若干记录，并可插入若干新记录\n   * @param from 索引开始的位置\n   * @default 0\n   * @param deleteCount 删除的数量\n   * @default 0\n   * @param records 插入的若干新记录\n   * @return 被删除的记录集\n   */\n  @action\n  splice(from: number, deleteCount: number, ...items: Record[]): (Record | undefined)[] {\n    const fromRecord = this.get(from);\n    const deleted = this.slice(from, from + deleteCount).map(this.deleteRecord, this);\n    if (items.length) {\n      checkParentByInsert(this);\n      const { records } = this;\n      const transformedRecords = this.transferRecords(items);\n      if (fromRecord) {\n        records.splice(records.indexOf(fromRecord), 0, ...transformedRecords);\n      } else {\n        records.push(...transformedRecords);\n      }\n    }\n    return deleted;\n  }\n\n  /**\n   * 截取指定索引范围的记录集，不改变原记录堆栈\n   * @param start 开始索引\n   * @default 0\n   * @param end 结束索引\n   * @default 记录堆栈长度\n   * @return 被删除的记录集\n   */\n  slice(start: number = 0, end: number = this.length): Record[] {\n    return this.data.slice(start, end);\n  }\n\n  /**\n   * 获取记录所在的索引\n   * @param record 记录\n   * @param fromIndex 开始检索的索引\n   * @return 索引\n   */\n  indexOf(record: Record, fromIndex?: number): number {\n    return this.data.indexOf(record, fromIndex);\n  }\n\n  /**\n   * 根据函数查找记录\n   * @param fn 查询函数\n   * @returns 记录\n   */\n  find(fn: (record: Record, index: number, array: Record[]) => boolean): Record | undefined {\n    return this.data.find(fn);\n  }\n\n  /**\n   * 根据函数查找记录所在的索引\n   * @param fn 查询函数\n   * @returns 索引\n   */\n  findIndex(fn: (record: Record, index: number, array: Record[]) => boolean): number {\n    return this.data.findIndex(fn);\n  }\n\n  /**\n   * 根据函数遍历\n   * @param fn 遍历函数\n   * @param thisArg this对象\n   */\n  forEach(fn: (record: Record, index: number, array: Record[]) => void, thisArg?: any): void {\n    this.data.forEach(fn, thisArg);\n  }\n\n  /**\n   * 根据函数遍历并输出新数组\n   * @param fn 遍历函数\n   * @param thisArg this对象\n   * @returns 输出新数组\n   */\n  map<U>(fn: (record: Record, index: number, array: Record[]) => U, thisArg?: any): U[] {\n    return this.data.map(fn, thisArg);\n  }\n\n  /**\n   * 根据函数遍历，当有返回值为true时，输出true\n   * @param fn 遍历函数\n   * @param thisArg this对象\n   * @returns boolean\n   */\n  some(fn: (record: Record, index: number, array: Record[]) => boolean, thisArg?: any): boolean {\n    return this.data.some(fn, thisArg);\n  }\n\n  /**\n   * 根据函数遍历，当有返回值为false时，输出false\n   * @param fn 遍历函数\n   * @param thisArg this对象\n   * @returns boolean\n   */\n  every(fn: (record: Record, index: number, array: Record[]) => boolean, thisArg?: any): boolean {\n    return this.data.every(fn, thisArg);\n  }\n\n  /**\n   * 根据函数过滤并返回记录集\n   * @param fn 过滤函数\n   * @param thisArg this对象\n   * @returns {Record[]}\n   */\n  filter(fn: (record: Record, index: number, array: Record[]) => boolean, thisArg?: any): Record[] {\n    return this.data.filter(fn, thisArg);\n  }\n\n  /**\n   * 为数组中的所有元素调用指定的回调函数。 回调函数的返回值是累计结果，并在下次调用回调函数时作为参数提供。\n   * @param fn 累计函数\n   * @param initialValue 初始值\n   * @returns {U}\n   */\n  reduce<U>(\n    fn: (previousValue: U, record: Record, index: number, array: Record[]) => U,\n    initialValue: U,\n  ): U {\n    return this.data.reduce<U>(fn, initialValue);\n  }\n\n  /**\n   * 按降序调用数组中所有元素的指定回调函数。 回调函数的返回值是累计结果，并在下次调用回调函数时作为参数提供。\n   * @param fn 累计函数\n   * @param initialValue 初始值\n   * @returns {U}\n   */\n  reduceRight<U>(\n    fn: (previousValue: U, record: Record, index: number, array: Record[]) => U,\n    initialValue: U,\n  ): U {\n    return this.data.reduceRight<U>(fn, initialValue);\n  }\n\n  /**\n   * 反转记录的顺序。\n   */\n  @action\n  reverse(): Record[] {\n    return (this.records = this.records.reverse());\n  }\n\n  /**\n   * 服务端排序\n   * @param fieldName\n   */\n  @action\n  sort(fieldName: string): void {\n    const field = this.getField(fieldName);\n    if (field) {\n      const currents = getOrderFields(this.fields);\n      currents.forEach(current => {\n        if (current !== field) {\n          current.order = undefined;\n        }\n      });\n      if (!field.order || field.order === SortOrder.desc) {\n        field.order = SortOrder.asc;\n      } else {\n        field.order = SortOrder.desc;\n      }\n      if (this.paging) {\n        this.query();\n      } else {\n        this.records = this.records.sort(getFieldSorter(field));\n      }\n    }\n  }\n\n  /**\n   * 选中记录\n   * @param recordOrIndex 记录或记录索引\n   */\n  @action\n  select(recordOrIndex: Record | number): void {\n    const { selection } = this;\n    if (selection) {\n      let record: Record | undefined = recordOrIndex as Record;\n      if (isNumber(recordOrIndex)) {\n        record = this.get(recordOrIndex as number);\n      }\n      if (record && record.selectable && !record.isSelected) {\n        let previous: Record | undefined;\n        if (selection === DataSetSelection.single) {\n          this.selected.forEach((selected: Record) => {\n            selected.isSelected = false;\n            previous = selected;\n          });\n        }\n        if (record) {\n          record.isSelected = true;\n        }\n        if (!this.inBatchSelection) {\n          this.fireEvent(DataSetEvents.select, { dataSet: this, record, previous });\n        }\n      }\n    }\n  }\n\n  /**\n   * 取消选中记录\n   * @param recordOrIndex 记录或记录索引\n   */\n  @action\n  unSelect(recordOrIndex: Record | number): void {\n    if (this.selection) {\n      let record: Record | undefined = recordOrIndex as Record;\n      if (isNumber(recordOrIndex)) {\n        record = this.get(recordOrIndex as number);\n      }\n      if (record && record.selectable && record.isSelected) {\n        record.isSelected = false;\n        if (!this.inBatchSelection) {\n          const cachedIndex = this.cachedSelected.indexOf(record);\n          if (cachedIndex !== -1) {\n            this.cachedSelected.splice(cachedIndex, 1);\n          }\n          this.fireEvent(DataSetEvents.unSelect, { dataSet: this, record });\n        }\n      }\n    }\n  }\n\n  /**\n   * 全选\n   */\n  @action\n  selectAll(filter?: (record: Record) => boolean): void {\n    const { selection } = this;\n    if (selection) {\n      this.inBatchSelection = true;\n      if (selection === DataSetSelection.single) {\n        if (!this.currentSelected.length) {\n          this.select(filter ? this.filter(filter)[0] : 0);\n        }\n      } else {\n        this.records.forEach(record => {\n          if (!filter || filter(record) !== false) {\n            this.select(record);\n          }\n        });\n      }\n\n      this.fireEvent(DataSetEvents.selectAll, { dataSet: this });\n      this.inBatchSelection = false;\n    }\n  }\n\n  /**\n   * 取消全选\n   */\n  @action\n  unSelectAll(): void {\n    if (this.selection) {\n      this.inBatchSelection = true;\n      this.currentSelected.forEach(record => {\n        this.unSelect(record);\n      });\n      this.fireEvent(DataSetEvents.unSelectAll, { dataSet: this });\n      this.inBatchSelection = false;\n    }\n  }\n\n  clearCachedSelected(): void {\n    this.setCachedSelected([]);\n  }\n\n  @action\n  setCachedSelected(cachedSelected: Record[]): void {\n    this.cachedSelected = cachedSelected;\n  }\n\n  /**\n   * 获取指定索引的记录\n   * @param index 索引\n   * @returns {Record}\n   */\n  get(index: number): Record | undefined {\n    const { data } = this;\n    return data.length ? data[index] : undefined;\n  }\n\n  /**\n   * 从树形数据中获取指定索引的根节点记录\n   * @param index 索引\n   * @returns {Record}\n   */\n  getFromTree(index: number): Record | undefined {\n    const { treeData } = this;\n    return treeData.length ? treeData[index] : undefined;\n  }\n\n  /**\n   * 判断是否有新增、变更或者删除的记录\n   * @deprecated\n   * @return true | false\n   */\n  isModified(): boolean {\n    return this.dirty;\n  }\n\n  /**\n   * 获取指定分页的记录集\n   * @param page 如果page为空或者paging为server，则获取当前分页的记录集\n   * @return 记录集\n   */\n\n  /**\n   * 根据记录ID查找记录\n   * @param id 记录ID\n   * @return 记录\n   */\n  findRecordById(id: number | string): Record | undefined {\n    if (id !== undefined) {\n      return this.records.find(record => String(record.id) === String(id));\n    }\n  }\n\n  /**\n   * 校验数据记录是否有效\n   * @param isSelected 是否只校验选中记录\n   * @param noCascade 是否级联校验\n   * @return true | false\n   */\n  validate(isSelected?: boolean, noCascade?: boolean): Promise<boolean> {\n    const dataToJSON = adapterDataToJSON(isSelected, noCascade);\n    if (dataToJSON) {\n      this.dataToJSON = dataToJSON;\n    }\n    const cascade =\n      noCascade === undefined && this.dataToJSON ? useCascade(this.dataToJSON) : !noCascade;\n    return Promise.all(\n      (useSelected(this.dataToJSON) ? this.selected : this.data).map(record =>\n        record.validate(false, !cascade),\n      ),\n    ).then(results => results.every(result => result));\n  }\n\n  /**\n   * 根据字段名获取字段\n   * @param fieldName 字段名\n   * @returns 字段\n   */\n  getField(fieldName?: string): Field | undefined {\n    if (fieldName) {\n      return this.fields.get(fieldName);\n    }\n  }\n\n  /**\n   * 获取分组字段名\n   * @returns 字段名列表\n   */\n  getGroups(): string[] {\n    return [...this.fields.entries()]\n      .reduce((arr: string[], [name, field]) => {\n        const group = field.get('group');\n        if (isNumber(group)) {\n          arr[group as number] = name;\n        } else if (group === true && !arr[0]) {\n          arr[0] = name;\n        }\n        return arr;\n      }, [])\n      .filter(group => group !== undefined);\n  }\n\n  initFields(fields: FieldProps[]): void {\n    fields.forEach(field => {\n      const { name } = field;\n      if (name) {\n        this.addField(name, field);\n      } else {\n        warning(\n          false,\n          'DataSet create field failed. Please check if property name is exists on field.',\n        );\n      }\n    });\n  }\n\n  /*\n   * 增加新字段\n   * @param name 字段名\n   * @param field 字段属性\n   * @return 新增字段\n   */\n  @action\n  addField(name: string, fieldProps: FieldProps = {}): Field {\n    return processIntlField(\n      name,\n      fieldProps,\n      (langName, langProps) => {\n        const field = new Field(langProps, this);\n        this.fields.set(langName, field);\n        return field;\n      },\n      this,\n    );\n  }\n\n  @action\n  commitData(allData: any[], total?: number): DataSet {\n    const { autoQueryAfterSubmit, primaryKey } = this.props;\n    if (this.dataToJSON === DataToJSON.normal) {\n      flatMap(this.dirtyRecords).forEach(record =>\n        record.commit(omit(record.toData(), ['__dirty']), this),\n      );\n      // 若有响应数据，进行数据回写\n    } else if (allData.length) {\n      const statusKey = getConfig('statusKey');\n      const status = getConfig('status');\n      const restCreatedData: any[] = [];\n      const restUpdatedData: any[] = [];\n      allData.forEach(data => {\n        const dataStatus = data[statusKey];\n        // 若有数据中含有__id，根据__id回写记录，否则根据主键回写非新增的记录\n        const record = data.__id\n          ? this.findRecordById(data.__id)\n          : primaryKey &&\n            dataStatus !== status[RecordStatus.add] &&\n            this.records.find(r => r.get(primaryKey) === data[primaryKey]);\n        if (record) {\n          record.commit(data, this);\n        } else if (dataStatus === status[RecordStatus.add]) {\n          restCreatedData.push(data);\n        } else if (dataStatus === status[RecordStatus.update]) {\n          restUpdatedData.push(data);\n        }\n      });\n      const { created, updated, destroyed } = this;\n      // 没有回写成功的新增数据按顺序回写\n      if (restCreatedData.length === created.length) {\n        created.forEach((r, index) => r.commit(restCreatedData[index], this));\n      } else if (autoQueryAfterSubmit) {\n        // 若有新增数据没有回写成功， 必须重新查询来获取主键\n        this.query();\n        return this;\n      }\n      // 剩下未回写的非新增数据使用原数据进行回写\n      if (restUpdatedData.length === updated.length) {\n        updated.forEach((r, index) => r.commit(restUpdatedData[index], this));\n      } else {\n        updated.forEach(r => r.commit(omit(r.toData(), ['__dirty']), this));\n      }\n      destroyed.forEach(r => r.commit(undefined, this));\n      if (isNumber(total)) {\n        this.totalCount = total;\n      }\n    } else if (autoQueryAfterSubmit) {\n      // 无回写数据时自动进行查询\n      warning(\n        false,\n        `The primary key which generated by database is not exists in each created records,\nbecause of no data \\`${this.dataKey}\\` from the response by \\`submit\\` or \\`delete\\` method.\nThen the query method will be auto invoke.`,\n      );\n      this.query();\n    }\n    return this;\n  }\n\n  /**\n   * 数据集头行级联绑定\n   * @param ds 头数据集\n   * @param name 头数据集字段名\n   */\n  @action\n  bind(ds: DataSet, name: string) {\n    if (!name) {\n      warning(false, 'DataSet: cascade binding need a name');\n      return;\n    }\n    if (ds.children[name]) {\n      warning(false, `DataSet: duplicate cascade binding of name<${name}>`);\n      return;\n    }\n    ds.children[name] = this;\n    this.parent = ds;\n    this.parentName = name;\n    const { current } = ds;\n    if (current) {\n      ds.syncChild(this, current, name);\n    } else if (this.length) {\n      this.loadData([]);\n    }\n  }\n\n  /**\n   * 设置查询的参数.\n   * @param {string} para 参数名.\n   * @param {any} value 参数值.\n   */\n  setQueryParameter(para: string, value: any) {\n    if (isNil(value)) {\n      delete this.queryParameter[para];\n    } else {\n      this.queryParameter[para] = value;\n    }\n  }\n\n  @action\n  loadData(allData: (object | Record)[] = [], total?: number): DataSet {\n    this.storeSelected();\n    const {\n      paging,\n      pageSize,\n      props: { autoLocateFirst, idField, parentField },\n    } = this;\n    switch(paging){\n      case true:\n        allData = allData.slice(0, pageSize);\n      break;\n      case 'server':\n        allData = idField && parentField ? sliceTree(idField,parentField,allData,pageSize) : allData.slice(0, pageSize);\n        break;\n      default:\n        break;\n    }\n    this.fireEvent(DataSetEvents.beforeLoad, { dataSet: this, data: allData });\n    this.originalData = this.processData(allData);\n    this.records = this.originalData;\n    if (total !== undefined && (paging === true || paging === 'server')) {\n      this.totalCount = total;\n    }else if(idField && parentField && paging === 'server'){\n      // 异步情况复用以前的total\n      if(!this.totalCount){\n        this.totalCount = this.treeData.length\n      }\n    } else{\n      this.totalCount = allData.length;\n    }\n    this.releaseCachedSelected();\n    const nextRecord =\n      autoLocateFirst && (idField && parentField ? this.getFromTree(0) : this.get(0));\n    if (nextRecord) {\n      nextRecord.isCurrent = true;\n    }\n    this.fireEvent(DataSetEvents.indexChange, { dataSet: this, record: nextRecord });\n    this.fireEvent(DataSetEvents.load, { dataSet: this });\n    return this;\n  }\n\n  @action\n  processData(allData: any[]): Record[] {\n    return allData.map(data => {\n      const record =\n        data instanceof Record ? ((data.dataSet = this), data) : new Record(data, this);\n      record.status = RecordStatus.sync;\n      return record;\n    });\n  }\n\n  private deleteRecord(record?: Record): Record | undefined {\n    if (record) {\n      record.isSelected = false;\n      record.isCurrent = false;\n      const { selected, records } = this;\n      const selectedIndex = selected.indexOf(record);\n      if (selectedIndex !== -1) {\n        selected.splice(selectedIndex, 1);\n      }\n      if (record.status === RecordStatus.add) {\n        const index = records.indexOf(record);\n        if (index !== -1) {\n          records.splice(index, 1);\n        }\n      } else if (record.status !== RecordStatus.delete) {\n        record.status = RecordStatus.delete;\n      }\n    }\n    return record;\n  }\n\n  // 查询在所有页面的对应位置\n  private findInAllPage(index: number): Record | undefined {\n    const { paging } = this;\n    let indexRecord\n    if (paging === true ) {\n      indexRecord = this.data[this.getIndexInCurrentPage(index)];\n    }else if(paging === 'server'){\n      indexRecord  = this.treeData[this.getIndexInCurrentPage(index)];\n    }else{\n      indexRecord = this.data[index]\n    };\n    return indexRecord;\n  }\n\n  private getIndexInCurrentPage(index: number = this.currentIndex): number {\n    const { currentPage, pageSize } = this;\n    return index - (currentPage - 1) * pageSize;\n  }\n\n  private transferRecords(data: Record[]): Record[] {\n    return data.map(record => {\n      const { dataSet } = record;\n      if (dataSet === this) {\n        const { records } = this;\n        const index = records.indexOf(record);\n        if (index !== -1) {\n          records.splice(index, 1);\n        }\n        return record;\n      }\n      if (dataSet) {\n        dataSet.remove(record);\n        record = new Record(record.data, this);\n      }\n      record.dataSet = this;\n      record.status = RecordStatus.add;\n      return record;\n    });\n  }\n\n  private initChildren(children: { [key: string]: string | DataSet } | DataSet[]): void {\n    if (isArray(children)) {\n      children.forEach(childDs => {\n        if (childDs instanceof DataSet) {\n          const { name } = childDs;\n          if (name) {\n            childDs.bind(this, name);\n          } else {\n            warning(false, 'cascade DataSet need a name');\n          }\n        }\n      });\n    } else {\n      Object.keys(children as DataSetChildren).forEach(childName => {\n        const child = children[childName];\n        if (child instanceof DataSet) {\n          child.bind(this, childName);\n        } else {\n          warning(false, `cascade child<${childName}> must be instance of DataSet.`);\n        }\n      });\n    }\n  }\n\n  private initQueryDataSet(queryDataSet?: DataSet, queryFields?: FieldProps[]) {\n    if (queryFields) {\n      queryDataSet = new DataSet({\n        fields: queryFields,\n      });\n    }\n    if (queryDataSet) {\n      this.queryDataSet = queryDataSet;\n    }\n  }\n\n  private initEvents(events: Events): void {\n    Object.keys(events).forEach(event => this.addEventListener(event, events[event]));\n  }\n\n  private loadDataFromResponse(resp: any): DataSet {\n    if (resp) {\n      const { dataKey, totalKey } = this;\n      const data: object[] = generateResponseData(resp, dataKey);\n      const total: number | undefined = ObjectChainValue.get(resp, totalKey);\n      this.loadData(data, total);\n    }\n    return this;\n  }\n\n  // private groupData(allData: object[]): object[] {\n  //   return this.getGroups().reverse()\n  //     .reduce((arr, name) => arr.sort(\n  //       (item1, item2) => String(item1[name]).localeCompare(String(item2[name])),\n  //     ), allData);\n  // }\n\n  private async write(records: Record[]): Promise<any> {\n    if (records.length) {\n      const [created, updated, destroyed] = prepareSubmitData(records, this.dataToJSON);\n      const axiosConfigs: AxiosRequestConfig[] = [];\n      const submitData: object[] = [\n        ...prepareForSubmit('create', created, axiosConfigs, this),\n        ...prepareForSubmit('update', updated, axiosConfigs, this),\n        ...prepareForSubmit('destroy', destroyed, axiosConfigs, this),\n      ];\n      prepareForSubmit('submit', submitData, axiosConfigs, this);\n      if (axiosConfigs.length) {\n        try {\n          this.changeSubmitStatus(DataSetStatus.submitting);\n          const submitEventResult = await this.fireEvent(DataSetEvents.submit, {\n            dataSet: this,\n            data: [...created, ...updated, ...destroyed],\n          });\n          if (submitEventResult) {\n            const result: any[] = await axiosStatic.all(\n              axiosConfigs.map(config => this.axios(config)),\n            );\n            return this.handleSubmitSuccess(result);\n          }\n        } catch (e) {\n          this.handleSubmitFail(e);\n          throw new DataSetRequestError(e);\n        } finally {\n          this.changeSubmitStatus(DataSetStatus.ready);\n        }\n      }\n    }\n  }\n\n  private async read(page: number = 1): Promise<any> {\n    if (this.checkReadable(this.parent)) {\n      try {\n        this.changeStatus(DataSetStatus.loading);\n        const data = await this.generateQueryParameter();\n        const newConfig = axiosConfigAdapter('read', this, data, this.generateQueryString(page));\n        if (newConfig.url) {\n          const queryEventResult = await this.fireEvent(DataSetEvents.query, {\n            dataSet: this,\n            params: newConfig.params,\n            data: newConfig.data,\n          });\n          if (queryEventResult) {\n            const result = await this.axios(newConfig);\n            runInAction(() => {\n              this.currentPage = page;\n            });\n            return this.handleLoadSuccess(result);\n          }\n        }\n      } catch (e) {\n        this.handleLoadFail(e);\n        throw new DataSetRequestError(e);\n      } finally {\n        this.changeStatus(DataSetStatus.ready);\n      }\n    }\n  }\n\n  @action\n  private storeSelected() {\n    if (this.cacheSelectionKeys) {\n      this.setCachedSelected([\n        ...this.cachedSelected.filter(record => record.isSelected),\n        ...this.currentSelected.map(record => {\n          record.isCurrent = false;\n          record.isCached = true;\n          return record;\n        }),\n      ]);\n    }\n  }\n\n  @action\n  releaseCachedSelected() {\n    const { cacheSelectionKeys, cachedSelected } = this;\n    if (cacheSelectionKeys) {\n      this.data.forEach(record => {\n        const index = cachedSelected.findIndex(cached =>\n          cacheSelectionKeys.every(key => record.get(key) === cached.get(key)),\n        );\n        if (index !== -1) {\n          record.isSelected = true;\n          cachedSelected.splice(index, 1);\n        }\n      });\n    }\n  }\n\n  @action\n  private changeStatus(status: DataSetStatus) {\n    this.status = status;\n  }\n\n  @action\n  private changeSubmitStatus(status: DataSetStatus) {\n    this.status = status;\n    Object.values(this.children).forEach(ds => {\n      if (ds instanceof DataSet) {\n        ds.changeSubmitStatus(status);\n      }\n    });\n  }\n\n  private handleCascade({\n    dataSet,\n    record,\n    previous,\n  }: {\n    dataSet: DataSet;\n    record?: Record;\n    previous?: Record;\n  }) {\n    if (dataSet.hasChildren) {\n      dataSet.syncChildren(record, previous);\n    }\n  }\n\n  private handleLoadSuccess(resp: any) {\n    const { loadSuccess = defaultFeedback.loadSuccess } = this.feedback;\n    loadSuccess(resp);\n    return resp;\n  }\n\n  private handleLoadFail(e) {\n    const { loadFailed = defaultFeedback.loadFailed } = this.feedback;\n    this.fireEvent(DataSetEvents.loadFailed, { dataSet: this });\n    loadFailed(e);\n  }\n\n  private handleSubmitSuccess(resp: any[]) {\n    const { dataKey, totalKey } = this;\n    const { submitSuccess = defaultFeedback.submitSuccess } = this.feedback;\n    const data: object[] = [];\n    let total;\n    resp.forEach(item => {\n      data.push(...generateResponseData(item, dataKey));\n      if (totalKey && isObject(item)) {\n        const myTotal = ObjectChainValue.get(item, totalKey);\n        if (!isNil(myTotal)) {\n          total = myTotal;\n        }\n      }\n    });\n    const result = dataKey ? { success: true } : data;\n    if (dataKey) {\n      ObjectChainValue.set(result, dataKey, data);\n      if (totalKey) {\n        ObjectChainValue.set(result, totalKey, total);\n      }\n    }\n    this.fireEvent(DataSetEvents.submitSuccess, { dataSet: this, data: result });\n    this.commitData(data, total);\n    submitSuccess(result);\n    return result;\n  }\n\n  @action\n  private handleSubmitFail(e) {\n    const { current } = this;\n    const { submitFailed = defaultFeedback.submitFailed } = this.feedback;\n    this.fireEvent(DataSetEvents.submitFailed, { dataSet: this });\n    submitFailed(e);\n    if (this.props.autoLocateAfterRemove && current && this.destroyed.length) {\n      current.isCurrent = false;\n    }\n    this.destroyed.forEach((record, index) => {\n      record.reset();\n      record.isSelected = true;\n      if (this.props.autoLocateAfterRemove && index === 0) {\n        record.isCurrent = true;\n      }\n    });\n  }\n\n  private syncChildren(current?: Record, previous?: Record) {\n    const { children } = this;\n    const keys: string[] = Object.keys(children);\n    const remoteKeys: string[] = [];\n    keys.forEach(childName => {\n      const ds = children[childName];\n      if (previous && ds.status === DataSetStatus.ready && previous.dataSetSnapshot[childName]) {\n        previous.dataSetSnapshot[childName] = ds.snapshot();\n        ds.current = undefined;\n      }\n      if (current) {\n        const snapshot = current.dataSetSnapshot[childName];\n        if (snapshot instanceof DataSetSnapshot) {\n          ds.restore(snapshot);\n        } else if (!this.syncChild(ds, current, childName, true)) {\n          ds.loadData([]);\n          remoteKeys.push(childName);\n        }\n      } else {\n        ds.loadData([]);\n      }\n    });\n    if (current && remoteKeys.length) {\n      this.syncChildrenRemote(remoteKeys, current);\n    }\n  }\n\n  @action\n  private syncChild(\n    ds: DataSet,\n    currentRecord: Record,\n    childName: string,\n    onlyClient?: boolean,\n  ): boolean {\n    const cascadeRecords = currentRecord.cascadeRecordsMap[childName];\n    const childRecords = cascadeRecords || currentRecord.get(childName);\n    if (currentRecord.status === RecordStatus.add || isArrayLike(childRecords)) {\n      if (cascadeRecords) {\n        delete currentRecord.cascadeRecordsMap[childName];\n      }\n      ds.clearCachedSelected();\n      ds.loadData(childRecords ? childRecords.slice() : []);\n      if (currentRecord.status === RecordStatus.add) {\n        if (ds.length) {\n          ds.forEach(record => (record.status = RecordStatus.add));\n        } else if (ds.props.autoCreate) {\n          ds.create();\n        }\n      }\n      currentRecord.dataSetSnapshot[childName] = ds.snapshot();\n      return true;\n    }\n    if (!onlyClient) {\n      const oldSnapshot = ds.snapshot();\n      ds.read(1).then(resp => {\n        const { current } = this;\n        if (current !== currentRecord) {\n          ds = new DataSet().restore(oldSnapshot);\n        }\n        ds.clearCachedSelected();\n        currentRecord.dataSetSnapshot[childName] = ds.loadDataFromResponse(resp).snapshot();\n      });\n    }\n    return false;\n  }\n\n  private checkReadable(parent) {\n    if (parent) {\n      const { current } = parent;\n      if (!current || current.status === RecordStatus.add) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private generatePageQueryString(page: number) {\n    const { paging, pageSize } = this;\n    if (paging === true || paging === 'server') {\n      return { page, pagesize: pageSize };\n    }\n    return {};\n  }\n\n  private generateOrderQueryString(): { sortname?: string; sortorder?: string } {\n    const { fields } = this;\n    const orderField = getOrderFields(fields)[0];\n    if (orderField) {\n      const param = { sortname: orderField.name, sortorder: orderField.order };\n      if (orderField.type === FieldType.object) {\n        const bindField = findBindFieldBy(orderField, this.fields, 'valueField');\n        if (bindField) {\n          param.sortname = bindField.name;\n        }\n      }\n      return param;\n    }\n    return {};\n  }\n\n  private generateQueryString(page: number) {\n    const order = this.generateOrderQueryString();\n    const pageQuery = this.generatePageQueryString(page);\n    const generatePageQuery = getConfig('generatePageQuery');\n    if (typeof generatePageQuery === 'function') {\n      return generatePageQuery({\n        sortName: order.sortname,\n        sortOrder: order.sortorder,\n        pageSize: pageQuery.pagesize,\n        page: pageQuery.page,\n      });\n    }\n    return { ...pageQuery, ...order };\n  }\n\n  private getParentParams(): object {\n    const {\n      parent,\n      props: { cascadeParams },\n    } = this;\n    if (parent) {\n      const {\n        props: { primaryKey },\n        current,\n      } = parent;\n      if (current) {\n        return cascadeParams!(current, primaryKey);\n      }\n    }\n    return {};\n  }\n\n  private async generateQueryParameter(): Promise<any> {\n    const { queryDataSet } = this;\n    const parentParams = this.getParentParams();\n    if (queryDataSet) {\n      await queryDataSet.ready();\n      if (!(await queryDataSet.validate())) {\n        throw new Error($l('DataSet', 'invalid_query_dataset'));\n      }\n    }\n    let data: any = {};\n    if (queryDataSet) {\n      const { current } = queryDataSet;\n      if (current) {\n        data = omit(current.toData(true), ['__dirty']);\n      }\n    }\n    data = {\n      ...data,\n      ...this.queryParameter,\n      ...parentParams,\n    };\n    return Object.keys(data).reduce((p, key) => {\n      const value = data[key];\n      if (!isEmpty(value)) {\n        p[key] = value;\n      }\n      return p;\n    }, {});\n  }\n}\n"]}