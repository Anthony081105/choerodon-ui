76858d21b7504429edaa540b09c0a9f5
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _isEqual = _interopRequireDefault(require("lodash/isEqual"));

var _Checkbox = _interopRequireDefault(require("./Checkbox"));

var _configure = require("../configure");

function _createSuper(Derived) {
  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  return function () {
    var Super = (0, _getPrototypeOf2["default"])(Derived),
        result;

    if (isNativeReflectConstruct()) {
      var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return (0, _possibleConstructorReturn2["default"])(this, result);
  };
}

var CheckboxGroup =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(CheckboxGroup, _Component);

  var _super = _createSuper(CheckboxGroup);

  function CheckboxGroup(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, CheckboxGroup);
    _this = _super.call(this, props);

    _this.toggleOption = function (option) {
      var _assertThisInitialize = (0, _assertThisInitialized2["default"])(_this),
          state = _assertThisInitialize.state;

      var optionIndex = state.value.indexOf(option.value);
      var value = (0, _toConsumableArray2["default"])(state.value);

      if (optionIndex === -1) {
        value.push(option.value);
      } else {
        value.splice(optionIndex, 1);
      }

      if (!('value' in _this.props)) {
        _this.setState({
          value: value
        });
      }

      var onChange = _this.props.onChange;

      if (onChange) {
        onChange(value);
      }
    };

    _this.state = {
      value: props.value || props.defaultValue || []
    };
    return _this;
  }

  (0, _createClass2["default"])(CheckboxGroup, [{
    key: "getChildContext",
    value: function getChildContext() {
      var disabled = this.props.disabled;
      var value = this.state.value;
      return {
        checkboxGroup: {
          toggleOption: this.toggleOption,
          value: value,
          disabled: disabled
        }
      };
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if ('value' in nextProps) {
        this.setState({
          value: nextProps.value || []
        });
      }
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState) {
      return !(0, _isEqual["default"])(this.props, nextProps) || !(0, _isEqual["default"])(this.state, nextState);
    }
  }, {
    key: "getOptions",
    value: function getOptions() {
      var options = this.props.options; // https://github.com/Microsoft/TypeScript/issues/7960

      return options.map(function (option) {
        if (typeof option === 'string') {
          return {
            label: option,
            value: option
          };
        }

        return option;
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this,
          _classNames;

      var props = this.props,
          state = this.state;
      var customizePrefixCls = props.prefixCls,
          className = props.className,
          style = props.style,
          options = props.options;
      var prefixCls = (0, _configure.getPrefixCls)('checkbox-group', customizePrefixCls);
      var children = props.children;

      if (options && options.length > 0) {
        children = this.getOptions().map(function (option) {
          return _react["default"].createElement(_Checkbox["default"], {
            key: option.value,
            disabled: 'disabled' in option ? option.disabled : props.disabled,
            value: option.value,
            checked: state.value.indexOf(option.value) !== -1,
            onChange: function onChange() {
              return _this2.toggleOption(option);
            },
            className: "".concat(prefixCls, "-item")
          }, option.label);
        });
      }

      var classString = (0, _classnames["default"])(prefixCls, className);
      var wrapperClassString = (0, _classnames["default"])((_classNames = {}, (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-wrapper"), true), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-has-label"), props.label), _classNames));
      var labelClassString = (0, _classnames["default"])("".concat(prefixCls, "-label"), {
        'label-disabled': props.disabled
      });
      return _react["default"].createElement("div", {
        className: wrapperClassString
      }, props.label ? _react["default"].createElement("span", {
        className: labelClassString
      }, props.label) : null, _react["default"].createElement("div", {
        className: classString,
        style: style
      }, children));
    }
  }]);
  return CheckboxGroup;
}(_react.Component);

exports["default"] = CheckboxGroup;
CheckboxGroup.displayName = 'CheckboxGroup';
CheckboxGroup.defaultProps = {
  options: []
};
CheckboxGroup.propTypes = {
  defaultValue: _propTypes["default"].array,
  value: _propTypes["default"].array,
  options: _propTypes["default"].array,
  onChange: _propTypes["default"].func
};
CheckboxGroup.childContextTypes = {
  checkboxGroup: _propTypes["default"].any
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,