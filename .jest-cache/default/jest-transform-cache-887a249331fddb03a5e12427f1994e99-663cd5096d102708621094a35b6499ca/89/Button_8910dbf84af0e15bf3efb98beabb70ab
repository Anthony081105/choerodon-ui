4f8d8522c4947d70b517b8c9486258b7
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _get3 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _tslib = require("tslib");

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _omit = _interopRequireDefault(require("lodash/omit"));

var _debounce = _interopRequireDefault(require("lodash/debounce"));

var _isString = _interopRequireDefault(require("lodash/isString"));

var _mobx = require("mobx");

var _mobxReact = require("mobx-react");

var _configure = require("choerodon-ui/lib/configure");

var _icon = _interopRequireDefault(require("../icon"));

var _FormContext = _interopRequireDefault(require("../form/FormContext"));

var _progress = _interopRequireDefault(require("../progress"));

var _ripple = _interopRequireDefault(require("../ripple"));

var _DataSetComponent2 = _interopRequireDefault(require("../data-set/DataSetComponent"));

var _autobind = _interopRequireDefault(require("../_util/autobind"));

var Button =
/*#__PURE__*/
function (_DataSetComponent) {
  (0, _inherits2["default"])(Button, _DataSetComponent);

  function Button(props, context) {
    var _this;

    (0, _classCallCheck2["default"])(this, Button);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(Button).call(this, props, context));
    _this.handleClickWait = _this.getHandleClick(props);
    return _this;
  }

  (0, _createClass2["default"])(Button, [{
    key: "getObservableProps",
    value: function getObservableProps(props, context) {
      return {
        dataSet: 'dataSet' in props ? props.dataSet : context.dataSet,
        loading: props.loading,
        type: props.type
      };
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps, nextContext) {
      (0, _get3["default"])((0, _getPrototypeOf2["default"])(Button.prototype), "componentWillReceiveProps", this).call(this, nextProps, nextContext);
      var _this$props = this.props,
          wait = _this$props.wait,
          waitType = _this$props.waitType;

      if (wait !== nextProps.wait || waitType !== nextProps.waitType) {
        this.handleClickWait = this.getHandleClick(nextProps);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.handleClickWait.cancel();
    }
  }, {
    key: "getHandleClick",
    value: function getHandleClick(props) {
      var wait = props.wait,
          waitType = props.waitType;

      if (wait && waitType) {
        var options = {
          leading: true,
          trailing: true
        };

        if (waitType === "throttle"
        /* throttle */
        ) {
            options.trailing = false;
            options.maxWait = wait;
          } else if (waitType === "debounce"
        /* debounce */
        ) {
            options.leading = false;
          }

        return (0, _debounce["default"])(this.handleClick, wait, options);
      }

      return (0, _debounce["default"])(this.handleClick, 0);
    }
  }, {
    key: "handleClickIfBubble",
    value: function handleClickIfBubble(e) {
      var _this$props2 = this.props,
          wait = _this$props2.wait,
          waitType = _this$props2.waitType;

      if (wait && waitType) {
        e.stopPropagation();
        this.handleClickWait(e);
      } else {
        this.handleClick(e);
      }
    }
  }, {
    key: "handleClick",
    value: function () {
      var _handleClick = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee(e) {
        var onClick, afterClick;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                onClick = this.props.onClick;

                if (!onClick) {
                  _context.next = 11;
                  break;
                }

                afterClick = onClick(e);

                if (!(afterClick && afterClick instanceof Promise)) {
                  _context.next = 11;
                  break;
                }

                _context.prev = 4;
                this.loading = true;
                _context.next = 8;
                return afterClick;

              case 8:
                _context.prev = 8;
                this.loading = false;
                return _context.finish(8);

              case 11:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[4,, 8, 11]]);
      }));

      function handleClick(_x) {
        return _handleClick.apply(this, arguments);
      }

      return handleClick;
    }()
  }, {
    key: "isDisabled",
    value: function isDisabled() {
      var disabled = this.context.disabled;
      return disabled || (0, _get3["default"])((0, _getPrototypeOf2["default"])(Button.prototype), "isDisabled", this).call(this) || this.loading;
    }
  }, {
    key: "getOtherProps",
    value: function getOtherProps() {
      var otherProps = (0, _omit["default"])((0, _get3["default"])((0, _getPrototypeOf2["default"])(Button.prototype), "getOtherProps", this).call(this), ['icon', 'funcType', 'color', 'loading', 'wait', 'waitType']);

      if (!this.isDisabled()) {
        otherProps.onClick = this.handleClickIfBubble;
      }

      return otherProps;
    }
  }, {
    key: "getClassName",
    value: function getClassName() {
      var _get2, _ref;

      var prefixCls = this.prefixCls,
          _this$props3 = this.props,
          _this$props3$color = _this$props3.color,
          color = _this$props3$color === void 0 ? (0, _configure.getConfig)('buttonColor') : _this$props3$color,
          _this$props3$funcType = _this$props3.funcType,
          funcType = _this$props3$funcType === void 0 ? (0, _configure.getConfig)('buttonFuncType') : _this$props3$funcType,
          children = _this$props3.children,
          icon = _this$props3.icon;

      var childrenCount = _react.Children.count(children);

      for (var _len = arguments.length, props = new Array(_len), _key = 0; _key < _len; _key++) {
        props[_key] = arguments[_key];
      }

      return (_get2 = (0, _get3["default"])((0, _getPrototypeOf2["default"])(Button.prototype), "getClassName", this)).call.apply(_get2, [this, (_ref = {}, (0, _defineProperty2["default"])(_ref, "".concat(prefixCls, "-").concat(funcType), funcType), (0, _defineProperty2["default"])(_ref, "".concat(prefixCls, "-").concat(color), color), (0, _defineProperty2["default"])(_ref, "".concat(prefixCls, "-icon-only"), icon ? childrenCount === 0 || children === false : childrenCount === 1 && children.type === _icon["default"]), _ref)].concat(props));
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props4 = this.props,
          children = _this$props4.children,
          icon = _this$props4.icon,
          href = _this$props4.href;
      var buttonIcon = this.loading ? _react["default"].createElement(_progress["default"], {
        key: "loading",
        type: "loading"
        /* loading */
        ,
        size: "small"
        /* small */

      }) : icon && _react["default"].createElement(_icon["default"], {
        type: icon
      });

      var hasString = _react.Children.toArray(children).some(function (child) {
        return (0, _isString["default"])(child);
      });

      var Cmp = href ? 'a' : 'button';
      var props = this.getMergedProps();
      return _react["default"].createElement(_ripple["default"], {
        disabled: this.isDisabled()
      }, _react["default"].createElement(Cmp, (0, _extends2["default"])({}, href ? (0, _omit["default"])(props, ['type']) : props), buttonIcon, hasString ? _react["default"].createElement("span", null, children) : children));
    }
  }, {
    key: "loading",
    get: function get() {
      var _this$observableProps = this.observableProps,
          type = _this$observableProps.type,
          dataSet = _this$observableProps.dataSet,
          loading = _this$observableProps.loading;
      return loading || type === "submit"
      /* submit */
      && !!dataSet && dataSet.status === "submitting"
      /* submitting */
      ;
    },
    set: function set(loading) {
      var _this2 = this;

      (0, _mobx.runInAction)(function () {
        _this2.observableProps.loading = loading;
      });
    }
  }]);
  return Button;
}(_DataSetComponent2["default"]);

Button.displayName = 'Button'; // eslint-disable-next-line camelcase

Button.__Pro_BUTTON = true;
Button.contextType = _FormContext["default"];
Button.propTypes = (0, _objectSpread2["default"])({
  /**
   * 按钮展现模式
   * 可选值：'flat' | 'raised'
   * @default raised
   */
  funcType: _propTypes["default"].oneOf(["flat"
  /* flat */
  , "raised"
  /* raised */
  ]),

  /**
   * 按钮颜色风格
   * 可选值：'default' | 'primary' | 'gray' | 'blue' | 'red' | 'green' | 'yellow' | 'purple' | 'dark'
   * @default 'default'
   */
  color: _propTypes["default"].oneOf(["default"
  /* default */
  , "primary"
  /* primary */
  , "gray"
  /* gray */
  , "blue"
  /* blue */
  , "red"
  /* red */
  , "green"
  /* green */
  , "yellow"
  /* yellow */
  , "purple"
  /* purple */
  , "dark"
  /* dark */
  ]),

  /**
   * 按钮类型
   * 可选值：'button' | 'submit' | 'reset'
   * @default 'button'
   */
  type: _propTypes["default"].oneOf(["button"
  /* button */
  , "submit"
  /* submit */
  , "reset"
  /* reset */
  ]),

  /**
   * 按钮是否是加载状态
   */
  loading: _propTypes["default"].bool,

  /**
   * 点击跳转的地址，指定此属性 button 的行为和 a 链接一致
   */
  href: _propTypes["default"].string,

  /**
   * 相当于 a 链接的 target 属性，href 存在时生效
   */
  target: _propTypes["default"].string,

  /**
   * 点击等待时间
   */
  wait: _propTypes["default"].number,

  /**
   * 点击间隔类型，可选值：throttle | debounce
   * @default throttle
   */
  waitType: _propTypes["default"].oneOf(["throttle"
  /* throttle */
  , "debounce"
  /* debounce */
  ])
}, _DataSetComponent2["default"].propTypes);
Button.defaultProps = {
  suffixCls: 'btn',
  type: "button"
  /* button */
  ,
  loading: false,
  waitType: "throttle"
  /* throttle */

};
(0, _tslib.__decorate)([_mobx.computed], Button.prototype, "loading", null);
(0, _tslib.__decorate)([_autobind["default"]], Button.prototype, "handleClickIfBubble", null);
(0, _tslib.__decorate)([_autobind["default"]], Button.prototype, "handleClick", null);
Button = (0, _tslib.__decorate)([_mobxReact.observer], Button);
var _default = Button;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,