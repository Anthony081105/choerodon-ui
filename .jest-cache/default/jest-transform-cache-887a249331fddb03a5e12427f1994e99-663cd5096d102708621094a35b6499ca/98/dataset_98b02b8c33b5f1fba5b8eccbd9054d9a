1a52d219a38bc86162ad955c6640ce2e
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = _default;
exports.dsTempleList = void 0;

var _mockjs = _interopRequireDefault(require("mockjs"));

var dsMutationsT = {
  rows: [],
  total: 1000,
  success: '@boolean()'
};
var dsQueriesT = {
  'rows|200': [{
    userid: '@guid()',
    'age|18-100': 34,
    name: '@cname()',
    email: '@first()',
    code_description: '员工状态',
    code_code: 'HR.EMPLOYEE_STATUS',
    code_select: 'HR.EMPLOYEE_GENDER',
    codeMultiple_description: '@last(),@last()',
    codeMultiple_code: [/1[0-9]{10}/, /1[0-9]{10}/],
    sex: /[MF]/,
    'sexMultiple|1-2': [/[MF]/],
    account: {
      multiple: /M|F|M,F|F,M/
    },
    enable: '@boolean()',
    frozen: /[NY]/,
    date: {
      startDate: null,
      endDate: null
    },
    other: {
      'enemy|3': [{
        userid: '@guid()',
        'age|18-100': 34,
        name: '@cname()',
        sex: /[MF]/,
        'friends|3': [{
          userid: '@guid()',
          'age|18-100': 34,
          name: '@cname()',
          sex: /[MF]/
        }]
      }]
    }
  }],
  total: 1000,
  success: true
};
var dsLanguagesT = {
  rows: [{
    name: {
      zh_CN: '@cname()',
      en_GB: '@name()',
      en_US: '@name()',
      ja_JP: '桥本@clast()'
    },
    'first-name': {
      zh_CN: '@cname()',
      en_GB: '@name()',
      en_US: '@name()',
      ja_JP: '本田@clast()'
    }
  }],
  total: 1,
  success: true
};
var dsValidateT = [true];
var dsMutationsR = /\/dataset\/user\/mutations/;
var dsQueriesR = /\/dataset\/user\/queries/;
var dsLanguagesR = /\/dataset\/user\/languages/;
var dsValidateR = /\/dataset\/user\/validate/;

var dsMutationsD = _mockjs["default"].mock(dsMutationsT);

var dsQueriesD = _mockjs["default"].mock(dsQueriesT);

var dsLanguagesD = _mockjs["default"].mock(dsLanguagesT);

var dsValidateD = _mockjs["default"].mock(dsValidateT);

function _default() {
  if (typeof window !== 'undefined') {
    _mockjs["default"].mock(dsMutationsR, dsMutationsT);

    _mockjs["default"].mock(dsQueriesR, dsQueriesT);

    _mockjs["default"].mock(dsLanguagesR, dsLanguagesT);

    _mockjs["default"].mock(dsValidateR, dsValidateT);
  }
}

var dsTempleList = [{
  rule: dsMutationsR,
  data: dsMutationsD
}, {
  rule: dsQueriesR,
  data: dsQueriesD
}, {
  rule: dsLanguagesR,
  data: dsLanguagesD
}, {
  rule: dsValidateR,
  data: dsValidateD
}];
exports.dsTempleList = dsTempleList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRhdGFzZXQuanMiXSwibmFtZXMiOlsiZHNNdXRhdGlvbnNUIiwicm93cyIsInRvdGFsIiwic3VjY2VzcyIsImRzUXVlcmllc1QiLCJ1c2VyaWQiLCJuYW1lIiwiZW1haWwiLCJjb2RlX2Rlc2NyaXB0aW9uIiwiY29kZV9jb2RlIiwiY29kZV9zZWxlY3QiLCJjb2RlTXVsdGlwbGVfZGVzY3JpcHRpb24iLCJjb2RlTXVsdGlwbGVfY29kZSIsInNleCIsImFjY291bnQiLCJtdWx0aXBsZSIsImVuYWJsZSIsImZyb3plbiIsImRhdGUiLCJzdGFydERhdGUiLCJlbmREYXRlIiwib3RoZXIiLCJkc0xhbmd1YWdlc1QiLCJ6aF9DTiIsImVuX0dCIiwiZW5fVVMiLCJqYV9KUCIsImRzVmFsaWRhdGVUIiwiZHNNdXRhdGlvbnNSIiwiZHNRdWVyaWVzUiIsImRzTGFuZ3VhZ2VzUiIsImRzVmFsaWRhdGVSIiwiZHNNdXRhdGlvbnNEIiwiTW9jayIsIm1vY2siLCJkc1F1ZXJpZXNEIiwiZHNMYW5ndWFnZXNEIiwiZHNWYWxpZGF0ZUQiLCJ3aW5kb3ciLCJkc1RlbXBsZUxpc3QiLCJydWxlIiwiZGF0YSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBOztBQUVBLElBQU1BLFlBQVksR0FBRztBQUNuQkMsRUFBQUEsSUFBSSxFQUFFLEVBRGE7QUFFbkJDLEVBQUFBLEtBQUssRUFBRSxJQUZZO0FBR25CQyxFQUFBQSxPQUFPLEVBQUU7QUFIVSxDQUFyQjtBQUtBLElBQU1DLFVBQVUsR0FBRztBQUNqQixjQUFZLENBQ1Y7QUFDRUMsSUFBQUEsTUFBTSxFQUFFLFNBRFY7QUFFRSxrQkFBYyxFQUZoQjtBQUdFQyxJQUFBQSxJQUFJLEVBQUUsVUFIUjtBQUlFQyxJQUFBQSxLQUFLLEVBQUUsVUFKVDtBQUtFQyxJQUFBQSxnQkFBZ0IsRUFBRSxNQUxwQjtBQU1FQyxJQUFBQSxTQUFTLEVBQUUsb0JBTmI7QUFPRUMsSUFBQUEsV0FBVyxFQUFFLG9CQVBmO0FBUUVDLElBQUFBLHdC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QUFJLEVBQUVOO0FBQTFCLENBRjBCLEVBRzFCO0FBQUVLLEVBQUFBLElBQUksRUFBRVYsWUFBUjtBQUFzQlcsRUFBQUEsSUFBSSxFQUFFTDtBQUE1QixDQUgwQixFQUkxQjtBQUFFSSxFQUFBQSxJQUFJLEVBQUVULFdBQVI7QUFBcUJVLEVBQUFBLElBQUksRUFBRUo7QUFBM0IsQ0FKMEIsQ0FBckIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTW9jayBmcm9tICdtb2NranMnO1xuXG5jb25zdCBkc011dGF0aW9uc1QgPSB7XG4gIHJvd3M6IFtdLFxuICB0b3RhbDogMTAwMCxcbiAgc3VjY2VzczogJ0Bib29sZWFuKCknLFxufTtcbmNvbnN0IGRzUXVlcmllc1QgPSB7XG4gICdyb3dzfDIwMCc6IFtcbiAgICB7XG4gICAgICB1c2VyaWQ6ICdAZ3VpZCgpJyxcbiAgICAgICdhZ2V8MTgtMTAwJzogMzQsXG4gICAgICBuYW1lOiAnQGNuYW1lKCknLFxuICAgICAgZW1haWw6ICdAZmlyc3QoKScsXG4gICAgICBjb2RlX2Rlc2NyaXB0aW9uOiAn5ZGY5bel54q25oCBJyxcbiAgICAgIGNvZGVfY29kZTogJ0hSLkVNUExPWUVFX1NUQVRVUycsXG4gICAgICBjb2RlX3NlbGVjdDogJ0hSLkVNUExPWUVFX0dFTkRFUicsXG4gICAgICBjb2RlTXVsdGlwbGVfZGVzY3JpcHRpb246ICdAbGFzdCgpLEBsYXN0KCknLFxuICAgICAgY29kZU11bHRpcGxlX2NvZGU6IFsvMVswLTldezEwfS8sIC8xWzAtOV17MTB9L10sXG4gICAgICBzZXg6IC9bTUZdLyxcbiAgICAgICdzZXhNdWx0aXBsZXwxLTInOiBbL1tNRl0vXSxcbiAgICAgIGFjY291bnQ6IHtcbiAgICAgICAgbXVsdGlwbGU6IC9NfEZ8TSxGfEYsTS8sXG4gICAgICB9LFxuICAgICAgZW5hYmxlOiAnQGJvb2xlYW4oKScsXG4gICAgICBmcm96ZW46IC9bTlldLyxcbiAgICAgIGRhdGU6IHtcbiAgICAgICAgc3RhcnREYXRlOiBudWxsLFxuICAgICAgICBlbmREYXRlOiBudWxsLFxuICAgICAgfSxcbiAgICAgIG90aGVyOiB7XG4gICAgICAgICdlbmVteXwzJzogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHVzZXJpZDogJ0BndWlkKCknLFxuICAgICAgICAgICAgJ2FnZXwxOC0xMDAnOiAzNCxcbiAgICAgICAgICAgIG5hbWU6ICdAY25hbWUoKScsXG4gICAgICAgICAgICBzZXg6IC9bTUZdLyxcbiAgICAgICAgICAgICdmcmllbmRzfDMnOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB1c2VyaWQ6ICdAZ3VpZCgpJyxcbiAgICAgICAgICAgICAgICAnYWdlfDE4LTEwMCc6IDM0LFxuICAgICAgICAgICAgICAgIG5hbWU6ICdAY25hbWUoKScsXG4gICAgICAgICAgICAgICAgc2V4OiAvW01GXS8sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICB9LFxuICAgIH0sXG4gIF0sXG4gIHRvdGFsOiAxMDAwLFxuICBzdWNjZXNzOiB0cnVlLFxufTtcblxuY29uc3QgZHNMYW5ndWFnZXNUID0ge1xuICByb3dzOiBbXG4gICAge1xuICAgICAgbmFtZToge1xuICAgICAgICB6aF9DTjogJ0BjbmFtZSgpJyxcbiAgICAgICAgZW5fR0I6ICdAbmFtZSgpJyxcbiAgICAgICAgZW5fVVM6ICdAbmFtZSgpJyxcbiAgICAgICAgamFfSlA6ICfmoaXmnKxAY2xhc3QoKScsXG4gICAgICB9LFxuICAgICAgJ2ZpcnN0LW5hbWUnOiB7XG4gICAgICAgIHpoX0NOOiAnQGNuYW1lKCknLFxuICAgICAgICBlbl9HQjogJ0BuYW1lKCknLFxuICAgICAgICBlbl9VUzogJ0BuYW1lKCknLFxuICAgICAgICBqYV9KUDogJ+acrOeUsEBjbGFzdCgpJyxcbiAgICAgIH0sXG4gICAgfSxcbiAgXSxcbiAgdG90YWw6IDEsXG4gIHN1Y2Nlc3M6IHRydWUsXG59O1xuY29uc3QgZHNWYWxpZGF0ZVQgPSBbdHJ1ZV07XG5cbmNvbnN0IGRzTXV0YXRpb25zUiA9IC9cXC9kYXRhc2V0XFwvdXNlclxcL211dGF0aW9ucy87XG5jb25zdCBkc1F1ZXJpZXNSID0gL1xcL2RhdGFzZXRcXC91c2VyXFwvcXVlcmllcy87XG5jb25zdCBkc0xhbmd1YWdlc1IgPSAvXFwvZGF0YXNldFxcL3VzZXJcXC9sYW5ndWFnZXMvO1xuY29uc3QgZHNWYWxpZGF0ZVIgPSAvXFwvZGF0YXNldFxcL3VzZXJcXC92YWxpZGF0ZS87XG5jb25zdCBkc011dGF0aW9uc0QgPSBNb2NrLm1vY2soZHNNdXRhdGlvbnNUKTtcbmNvbnN0IGRzUXVlcmllc0QgPSBNb2NrLm1vY2soZHNRdWVyaWVzVCk7XG5jb25zdCBkc0xhbmd1YWdlc0QgPSBNb2NrLm1vY2soZHNMYW5ndWFnZXNUKTtcbmNvbnN0IGRzVmFsaWRhdGVEID0gTW9jay5tb2NrKGRzVmFsaWRhdGVUKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKCkge1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBNb2NrLm1vY2soZHNNdXRhdGlvbnNSLCBkc011dGF0aW9uc1QpO1xuXG4gICAgTW9jay5tb2NrKGRzUXVlcmllc1IsIGRzUXVlcmllc1QpO1xuXG4gICAgTW9jay5tb2NrKGRzTGFuZ3VhZ2VzUiwgZHNMYW5ndWFnZXNUKTtcblxuICAgIE1vY2subW9jayhkc1ZhbGlkYXRlUiwgZHNWYWxpZGF0ZVQpO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBkc1RlbXBsZUxpc3QgPSBbXG4gIHsgcnVsZTogZHNNdXRhdGlvbnNSLCBkYXRhOiBkc011dGF0aW9uc0QgfSxcbiAgeyBydWxlOiBkc1F1ZXJpZXNSLCBkYXRhOiBkc1F1ZXJpZXNEIH0sXG4gIHsgcnVsZTogZHNMYW5ndWFnZXNSLCBkYXRhOiBkc0xhbmd1YWdlc0QgfSxcbiAgeyBydWxlOiBkc1ZhbGlkYXRlUiwgZGF0YTogZHNWYWxpZGF0ZUQgfSxcbl07XG4iXX0=