{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/table/TableHeader.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { observer } from 'mobx-react';\nimport classNames from 'classnames';\nimport { computed, get } from 'mobx';\nimport { pxToRem } from 'choerodon-ui/lib/_util/UnitConvertor';\nimport { ColumnProps } from './Column';\nimport { ElementProps } from '../core/ViewComponent';\nimport TableHeaderCell, { TableHeaderCellProps } from './TableHeaderCell';\nimport TableContext from './TableContext';\nimport { ColumnLock } from './enum';\nimport DataSet from '../data-set/DataSet';\nimport { getColumnKey } from './utils';\nimport ColumnGroup from './ColumnGroup';\nimport autobind from '../_util/autobind';\n\nexport interface TableHeaderProps extends ElementProps {\n  dataSet: DataSet;\n  lock?: ColumnLock | boolean;\n}\n\n@observer\nexport default class TableHeader extends Component<TableHeaderProps, any> {\n  static displayName = 'TableHeader';\n\n  static propTypes = {\n    prefixCls: PropTypes.string,\n    lock: PropTypes.oneOfType([\n      PropTypes.bool,\n      PropTypes.oneOf([ColumnLock.right, ColumnLock.left]),\n    ]),\n  };\n\n  static contextType = TableContext;\n\n  node: HTMLTableSectionElement | null;\n\n  @autobind\n  saveRef(node) {\n    this.node = node;\n  }\n\n  @autobind\n  getHeaderNode() {\n    return this.node;\n  }\n\n  render() {\n    const { prefixCls, lock, dataSet } = this.props;\n    const { groupedColumns } = this;\n    const {\n      tableStore: { overflowY, columnResizable },\n    } = this.context;\n    const rows = this.getTableHeaderRows(groupedColumns);\n    const trs = rows.map((row, rowIndex) => {\n      if (row.length) {\n        let prevColumn: ColumnProps | undefined;\n        const tds = row.map(({ hidden, column, rowSpan, colSpan, lastLeaf }) => {\n          if (!hidden) {\n            const props: TableHeaderCellProps = {\n              key: getColumnKey(column),\n              prefixCls,\n              dataSet,\n              prevColumn,\n              column,\n              resizeColumn: lastLeaf,\n              getHeaderNode: this.getHeaderNode,\n            };\n            if (rowSpan > 1) {\n              props.rowSpan = rowSpan;\n            }\n            if (colSpan > 1) {\n              props.colSpan = colSpan;\n            }\n            prevColumn = lastLeaf;\n            return <TableHeaderCell {...props} />;\n          }\n          return undefined;\n        });\n        if (overflowY && lock !== ColumnLock.left && rowIndex === 0) {\n          tds.push(\n            <th key=\"fixed-column\" className={`${prefixCls}-cell`} rowSpan={rows.length}>\n              &nbsp;\n            </th>,\n          );\n        }\n        return (\n          <tr\n            key={String(rowIndex)}\n            style={{\n              height: lock ? this.getHeaderRowStyle(rows, rowIndex, columnResizable) : undefined,\n            }}\n          >\n            {tds}\n          </tr>\n        );\n      }\n      return undefined;\n    });\n    const classString = classNames(`${prefixCls}-thead`, {\n      [`${prefixCls}-column-resizable`]: columnResizable,\n    });\n    return (\n      <thead ref={this.saveRef} className={classString}>\n        {trs}\n      </thead>\n    );\n  }\n\n  getTableHeaderRows(\n    columns: ColumnGroup[],\n    currentRow: number = 0,\n    rows: ColumnGroup[][] = [],\n  ): ColumnGroup[][] {\n    rows[currentRow] = rows[currentRow] || [];\n    columns.forEach(column => {\n      const { hidden, rowSpan, colSpan, children } = column;\n      if (!hidden) {\n        if (rowSpan && rows.length < rowSpan) {\n          while (rows.length < rowSpan) {\n            rows.push([]);\n          }\n        }\n        if (children) {\n          this.getTableHeaderRows(children.columns, currentRow + rowSpan, rows);\n        }\n        if (colSpan !== 0) {\n          rows[currentRow].push(column);\n        }\n      }\n    });\n    return rows;\n  }\n\n  getHeaderRowStyle(\n    rows: ColumnGroup[][],\n    rowIndex: number,\n    columnResizable: boolean,\n  ): string | number | undefined {\n    const {\n      tableStore: { rowHeight },\n    } = this.context;\n    const height = rowHeight === 'auto' ? this.getRowHeight(rowIndex++) : rowHeight;\n    return pxToRem(\n      rows\n        .slice(rowIndex)\n        .reduce(\n          (total, r, index) =>\n            r.length\n              ? total\n              : total +\n                (rowHeight === 'auto'\n                  ? this.getRowHeight(index + rowIndex)\n                  : rowHeight + (columnResizable ? 4 : 3)),\n          height,\n        ),\n    );\n  }\n\n  getRowHeight(index): number {\n    const { tableStore } = this.context;\n    return get(tableStore.lockColumnsHeadRowsHeight, index) || 0;\n  }\n\n  @computed\n  get groupedColumns(): ColumnGroup[] {\n    const { tableStore } = this.context;\n    const { lock } = this.props;\n    switch (lock) {\n      case ColumnLock.left:\n      case true:\n        return tableStore.leftGroupedColumns;\n      case ColumnLock.right:\n        return tableStore.rightGroupedColumns;\n      default:\n        return tableStore.groupedColumns;\n    }\n  }\n}\n"]}