{"version":3,"sources":["index.test.js"],"names":["describe","handleDataSetChange","record","sleep","d","t","Date","now","SkeletonTest","DataSet","autoQuery","queryUrl","fields","name","type","defaultValue","events","update","beforeLoad","ds","rows","verticalAlign","query","React","Component","Skeleton","it","wapper","expect","find","length","toBe"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGAA,QAAQ,CAAC,UAAD,EAAa,YAAM;AAEzB,WAASC,mBAAT,OAAyC;AAAA,QAAVC,MAAU,QAAVA,MAAU;AACtC,WAAO;AAACA,MAAAA,MAAM,EAANA;AAAD,KAAP;AACF;;AACD,WAASC,KAAT,CAAeC,CAAf,EAAiB;AACf,SAAI,IAAIC,CAAC,GAAGC,IAAI,CAACC,GAAL,EAAZ,EAAuBD,IAAI,CAACC,GAAL,KAAaF,CAAb,IAAkBD,CAAzC;AAA4C;AAA5C;AACD;;AAPwB,MAQnBI,YARmB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,6FAShB,IAAIC,eAAJ,CAAY;AACfC,QAAAA,SAAS,EAAE,IADI;AAEfC,QAAAA,QAAQ,EAAE,YAFK;AAGfC,QAAAA,MAAM,EAAE,CACN;AACEC,UAAAA,IAAI,EAAE,MADR;AAEEC,UAAAA,IAAI,EAAE,QAFR;AAGEC,UAAAA,YAAY,EAAE;AAHhB,SADM,CAHO;AAUfC,QAAAA,MAAM,EAAE;AACNC,UAAAA,MAAM,EAAEhB,mBADF;AAENiB,UAAAA,UAAU,EAAC;AAAA,mBAAMf,KAAK,CAAC,IAAD,CAAX;AAAA;AAFL;AAVO,OAAZ,CATgB;AAAA;AAAA;;AAAA;AAAA;AAAA,+BAyBZ;AAAA;;AACP,eACE;AAAK,UAAA,SAAS,EAAC;AAAf,WACA,gCAAC,iBAAD;AAAU,UAAA,OAAO,EAAE,KAAKgB,EAAxB;AAA4B,UAAA,cAAc,EAAE,KAA5C;AAAoD,UAAA,MAAM,MAA1D;AAA2D,UAAA,MAAM,MAAjE;AAAkE,UAAA,SAAS,EAAE;AAAEC,YAAAA,IAAI,EAAE;AAAR;AAA7E,WACM,gCAAC,kBAAD;AAAQ,UAAA,KAAK,EAAE;AAACC,YAAAA,aAAa,EAAE;AAAhB,WAAf;AAA0C,UAAA,GAAG,EAAC;AAA9C,UADN,EAEM,gCAAC,gBAAD;AAAU,UAAA,IAAI,EAAE,EAAhB;AAAoB,UAAA,IAAI,EAAE,CAA1B;AAA8B,UAAA,OAAO,EAAE,KAAKF,EAA5C;AAAgD,UAAA,IAAI,EAAC,MAArD;AAA4D,UAAA,MAAM,EAAC;AAAnE,UAFN,CADA,EAKA,gCAAC,eAAD,QACE,gCAAC,eAAD;AAAK,UAAA,IAAI,EAAE;AAAX,WACA,gCAAC,cAAD;AAAQ,UAAA,OAAO,EAAE;AAAA,mBAAM,MAAI,CAACA,EAAL,CAAQG,KAAR,EAAN;AAAA;AAAjB,4BADA,CADF,CALA,CADF;AAaD;AAvCoB;AAAA;AAAA,IAQEC,kBAAMC,SARR;;AA0CzB,6BAAUC,iBAAV;AAEAC,EAAAA,EAAE,CAAC,sDAAD,EAAyD,YAAM;AAC/D,QAAMC,MAAM,GAAG,mBAAM,gCAAC,YAAD,OAAN,CAAf;AACAC,IAAAA,MAAM,CAACD,MAAM,CAACE,IAAP,CAAY,uBAAZ,EAAqCC,MAAtC,CAAN,CAAoDC,IAApD,CAAyD,CAAzD;AACD,GAHC,CAAF;AAMD,CAlDO,CAAR","sourcesContent":["import React from 'react';\nimport { mount } from 'enzyme';\nimport Skeleton from '../index';\nimport mountTest from '../../../tests/shared/mountTest';\nimport { TextArea,Button, DataSet } from '../../index';\nimport {Avatar,Row, Col} from '../../../components'\n\n\ndescribe('Skeleton', () => {\n\n  function handleDataSetChange({ record }) {\n     return {record}\n  }\n  function sleep(d){\n    for(let t = Date.now();Date.now() - t <= d;);\n  }\n  class SkeletonTest extends React.Component {\n      ds = new DataSet({\n        autoQuery: true,\n        queryUrl: '/tree.mock',\n        fields: [\n          {\n            name: 'text',\n            type: 'string',\n            defaultValue: 'textarea',\n          },\n        ],\n        events: {\n          update: handleDataSetChange,\n          beforeLoad:() => sleep(5000),\n        },\n      });\n    \n      render() {\n        return (\n          <div className=\"article\">\n          <Skeleton dataSet={this.ds} skeletonTitile={false}  active avatar paragraph={{ rows: 4 }}>\n                <Avatar style={{verticalAlign: 'top'}}    src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" />\n                <TextArea cols={60} rows={6}  dataSet={this.ds} name=\"text\" resize=\"both\" />\n          </Skeleton> \n          <Row>\n            <Col span={24}>\n            <Button onClick={() => this.ds.query() } >Show Skeleton </Button>\n            </Col>\n          </Row>\n          </div>\n        )\n      }\n  }\n\n  mountTest(Skeleton);\n\n  it('should show skeleton when dataSet status is loading ', () => {\n    const wapper = mount(<SkeletonTest/>)\n    expect(wapper.find('.c7n-skeleton-content').length).toBe(1)\n  });\n\n \n});\n"]}