{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components/skeleton/Skeleton.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA,SAAS,iBAAT,CAA8B,IAA9B,EAA2D;AACzD,MAAI,IAAI,IAAI,yBAAO,IAAP,MAAgB,QAA5B,EAAsC;AACpC,WAAO,IAAP;AACD;;AACD,SAAO,EAAP;AACD;;AAED,SAAS,mBAAT,CAA6B,QAA7B,EAAgD,YAAhD,EAAqE;AACnE,MAAI,QAAQ,IAAI,CAAC,YAAjB,EAA+B;AAC7B;AACA,WAAO;AAAE,MAAA,IAAI,EAAE,OAAR;AAAiB,MAAA,KAAK,EAAE;AAAxB,KAAP;AACD;;AAED,SAAO;AAAE,IAAA,IAAI,EAAE,OAAR;AAAiB,IAAA,KAAK,EAAE;AAAxB,GAAP;AACD;;AAED,SAAS,kBAAT,CAA4B,SAA5B,EAAgD,YAAhD,EAAqE;AACnE,MAAI,CAAC,SAAD,IAAc,YAAlB,EAAgC;AAC9B,WAAO;AAAE,MAAA,KAAK,EAAE;AAAT,KAAP;AACD;;AAED,MAAI,SAAS,IAAI,YAAjB,EAA+B;AAC7B,WAAO;AAAE,MAAA,KAAK,EAAE;AAAT,KAAP;AACD;;AAED,SAAO,EAAP;AACD;;AAED,SAAS,sBAAT,CAAgC,SAAhC,EAAoD,QAApD,EAAqE;AACnE,MAAM,UAAU,GAA2B,EAA3C,CADmE,CAGnE;;AACA,MAAI,CAAC,SAAD,IAAc,CAAC,QAAnB,EAA6B;AAC3B,IAAA,UAAU,CAAC,KAAX,GAAmB,KAAnB;AACD,GANkE,CAQnE;;;AACA,MAAI,CAAC,SAAD,IAAc,QAAlB,EAA4B;AAC1B,IAAA,UAAU,CAAC,IAAX,GAAkB,CAAlB;AACD,GAFD,MAEO;AACL,IAAA,UAAU,CAAC,IAAX,GAAkB,CAAlB;AACD;;AAED,SAAO,UAAP;AACD;;IAEK,Q;;;;;;;AAAN,sBAAA;AAAA;;AAAA;;;AAaE,UAAA,cAAA,GAAiB,YAAK;AAAA,wBAUhB,MAAK,KAVW;AAAA,UAEP,kBAFO,eAElB,SAFkB;AAAA,UAGlB,OAHkB,eAGlB,OAHkB;AAAA,UAIlB,SAJkB,eAIlB,SAJkB;AAAA,UAKlB,QALkB,eAKlB,QALkB;AAAA,UAMlB,MANkB,eAMlB,MANkB;AAAA,UAOlB,KAPkB,eAOlB,KAPkB;AAAA,UAQlB,SARkB,eAQlB,SARkB;AAAA,UASlB,MATkB,eASlB,MATkB;AAYpB,UAAM,SAAS,GAAG,6BAAa,UAAb,EAAyB,kBAAzB,CAAlB;;AAEA,UAAI,OAAO,IAAI,EAAE,aAAa,MAAK,KAApB,CAAf,EAA2C;AAAA;;AACzC,YAAM,SAAS,GAAG,CAAC,CAAC,MAApB;AACA,YAAM,QAAQ,GAAG,CAAC,CAAC,KAAnB;AACA,YAAM,YAAY,GAAG,CAAC,CAAC,SAAvB,CAHyC,CAKzC;;AACA,YAAI,UAAJ;;AACA,YAAI,SAAJ,EAAe;AACb,cAAM,WAAW;AACf,YAAA,SAAS,YAAK,SAAL;AADM,aAEZ,mBAAmB,CAAC,QAAD,EAAW,YAAX,CAFP,MAGZ,iBAAiB,CAAC,MAAD,CAHL,CAAjB,CADa,CAMb;;AACA,UAAA,UAAU,GACR,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,YAAA,SAAS,YAAK,SAAL;AAAd,WAAA,EACE,KAAA,CAAA,aAAA,CAAC,mBAAD,EAAQ,0BAAA,EAAA,EAAK,WAAL,CAAR,CADF,CADF;AAKD;;AAED,YAAI,WAAJ;;AACA,YAAI,QAAQ,IAAI,YAAhB,EAA8B;AAC5B;AACA,cAAI,MAAJ;;AACA,cAAI,QAAJ,EAAc;AACZ,gBAAM,UAAU;AACd,cAAA,SAAS,YAAK,SAAL;AADK,eAEX,kBAAkB,CAAC,SAAD,EAAY,YAAZ,CAFP,MAGX,iBAAiB,CAAC,KAAD,CAHN,CAAhB;AAMA,YAAA,MAAM,GAAG,KAAA,CAAA,aAAA,CAAC,iBAAD,EAAM,0BAAA,EAAA,EAAK,UAAL,CAAN,CAAT;AACD,WAX2B,CAa5B;;;AACA,cAAI,aAAJ;;AACA,cAAI,YAAJ,EAAkB;AAChB,gBAAM,cAAc;AAClB,cAAA,SAAS,YAAK,SAAL;AADS,eAEf,sBAAsB,CAAC,SAAD,EAAY,QAAZ,CAFP,MAGf,iBAAiB,CAAC,SAAD,CAHF,CAApB;AAMA,YAAA,aAAa,GAAG,KAAA,CAAA,aAAA,CAAC,qBAAD,EAAU,0BAAA,EAAA,EAAK,cAAL,CAAV,CAAhB;AACD;;AAED,UAAA,WAAW,GACT,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,YAAA,SAAS,YAAK,SAAL;AAAd,WAAA,EACG,MADH,EAEG,aAFH,CADF;AAMD;;AAED,YAAM,GAAG,GAAG,4BAAW,SAAX,EAAsB,SAAtB,6EACN,SADM,mBACoB,SADpB,2DAEN,SAFM,cAEe,MAFf,2DAGN,SAHM,WAGW,KAHX,gBAAZ;AAMA,eACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,UAAA,SAAS,EAAE;AAAhB,SAAA,EACG,UADH,EAEG,WAFH,CADF;AAMD;;AAED,aAAO,QAAP;AACD,KApFD;;AAbF;AAsGC;;;;6BAHO;AACJ,aAAO,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EAAG,KAAK,cAAL,EAAH,CAAP;AACD;;;EArGoB,KAAK,CAAC,S;;AAOpB,QAAA,CAAA,YAAA,GAAuC;AAC5C,EAAA,MAAM,EAAE,KADoC;AAE5C,EAAA,KAAK,EAAE,IAFqC;AAG5C,EAAA,SAAS,EAAE;AAHiC,CAAvC;eAiGM,Q","sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\nimport Title, { SkeletonTitleProps } from './Title';\nimport Paragraph, { SkeletonParagraphProps } from './Paragraph';\nimport { getPrefixCls } from '../configure';\nimport SkeletonButton from './Button';\nimport Element from './Element';\nimport SkeletonAvatar, { AvatarProps } from './Avatar';\nimport SkeletonInput from './Input';\n\n/* This only for skeleton internal. */\ninterface SkeletonAvatarProps extends Omit<AvatarProps, 'active'> {}\n\nexport interface SkeletonProps {\n  active?: boolean;\n  loading?: boolean;\n  prefixCls?: string;\n  className?: string;\n  children?: React.ReactNode;\n  avatar?: SkeletonAvatarProps | boolean;\n  title?: SkeletonTitleProps | boolean;\n  paragraph?: SkeletonParagraphProps | boolean;\n}\n\nfunction getComponentProps<T>(prop: T | boolean | undefined): T | {} {\n  if (prop && typeof prop === 'object') {\n    return prop;\n  }\n  return {};\n}\n\nfunction getAvatarBasicProps(hasTitle: boolean, hasParagraph: boolean): SkeletonAvatarProps {\n  if (hasTitle && !hasParagraph) {\n    // Square avatar\n    return { size: 'large', shape: 'square' };\n  }\n\n  return { size: 'large', shape: 'circle' };\n}\n\nfunction getTitleBasicProps(hasAvatar: boolean, hasParagraph: boolean): SkeletonTitleProps {\n  if (!hasAvatar && hasParagraph) {\n    return { width: '38%' };\n  }\n\n  if (hasAvatar && hasParagraph) {\n    return { width: '50%' };\n  }\n\n  return {};\n}\n\nfunction getParagraphBasicProps(hasAvatar: boolean, hasTitle: boolean): SkeletonParagraphProps {\n  const basicProps: SkeletonParagraphProps = {};\n\n  // Width\n  if (!hasAvatar || !hasTitle) {\n    basicProps.width = '61%';\n  }\n\n  // Rows\n  if (!hasAvatar && hasTitle) {\n    basicProps.rows = 3;\n  } else {\n    basicProps.rows = 2;\n  }\n\n  return basicProps;\n}\n\nclass Skeleton extends React.Component<SkeletonProps, any> {\n  static Button: typeof SkeletonButton;\n\n  static Avatar: typeof SkeletonAvatar;\n\n  static Input: typeof SkeletonInput;\n\n  static defaultProps: Partial<SkeletonProps> = {\n    avatar: false,\n    title: true,\n    paragraph: true,\n  };\n\n  renderSkeleton = () => {\n    const {\n      prefixCls: customizePrefixCls,\n      loading,\n      className,\n      children,\n      avatar,\n      title,\n      paragraph,\n      active,\n    } = this.props;\n\n    const prefixCls = getPrefixCls('skeleton', customizePrefixCls);\n\n    if (loading || !('loading' in this.props)) {\n      const hasAvatar = !!avatar;\n      const hasTitle = !!title;\n      const hasParagraph = !!paragraph;\n\n      // Avatar\n      let avatarNode;\n      if (hasAvatar) {\n        const avatarProps: SkeletonAvatarProps = {\n          prefixCls: `${prefixCls}-avatar`,\n          ...getAvatarBasicProps(hasTitle, hasParagraph),\n          ...getComponentProps(avatar),\n        };\n        // We direct use SkeletonElement as avatar in skeleton internal.\n        avatarNode = (\n          <div className={`${prefixCls}-header`}>\n            <Element {...avatarProps} />\n          </div>\n        );\n      }\n\n      let contentNode;\n      if (hasTitle || hasParagraph) {\n        // Title\n        let $title;\n        if (hasTitle) {\n          const titleProps: SkeletonTitleProps = {\n            prefixCls: `${prefixCls}-title`,\n            ...getTitleBasicProps(hasAvatar, hasParagraph),\n            ...getComponentProps(title),\n          };\n\n          $title = <Title {...titleProps} />;\n        }\n\n        // Paragraph\n        let paragraphNode;\n        if (hasParagraph) {\n          const paragraphProps: SkeletonParagraphProps = {\n            prefixCls: `${prefixCls}-paragraph`,\n            ...getParagraphBasicProps(hasAvatar, hasTitle),\n            ...getComponentProps(paragraph),\n          };\n\n          paragraphNode = <Paragraph {...paragraphProps} />;\n        }\n\n        contentNode = (\n          <div className={`${prefixCls}-content`}>\n            {$title}\n            {paragraphNode}\n          </div>\n        );\n      }\n\n      const cls = classNames(prefixCls, className, {\n        [`${prefixCls}-with-avatar`]: hasAvatar,\n        [`${prefixCls}-active`]: active,\n        [`${prefixCls}-rtl`]:false,\n      });\n\n      return (\n        <div className={cls}>\n          {avatarNode}\n          {contentNode}\n        </div>\n      );\n    }\n\n    return children;\n  };\n\n  render() {\n    return <>{this.renderSkeleton()}</>;\n  }\n}\n\nexport default Skeleton;\n"]}