{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components/rc-components/tree/utils/diffUtil.ts"],"names":[],"mappings":";;;;;;;;AAEM,SAAU,gBAAV,GAA6D;AAAA,MAAlC,IAAkC,uEAApB,EAAoB;AAAA,MAAhB,IAAgB,uEAAF,EAAE;AACjE,MAAM,OAAO,GAAG,IAAI,CAAC,MAArB;AACA,MAAM,OAAO,GAAG,IAAI,CAAC,MAArB;;AAEA,MAAI,IAAI,CAAC,GAAL,CAAS,OAAO,GAAG,OAAnB,MAAgC,CAApC,EAAuC;AACrC,WAAO;AAAE,MAAA,GAAG,EAAE,KAAP;AAAc,MAAA,GAAG,EAAE;AAAnB,KAAP;AACD;;AAED,WAAS,IAAT,CAAc,OAAd,EAA8B,MAA9B,EAA2C;AACzC,QAAM,KAAK,GAAsB,IAAI,GAAJ,EAAjC;AACA,IAAA,OAAO,CAAC,OAAR,CAAgB,UAAA,GAAG,EAAG;AACpB,MAAA,KAAK,CAAC,GAAN,CAAU,GAAV,EAAe,IAAf;AACD,KAFD;AAIA,QAAM,IAAI,GAAG,MAAM,CAAC,MAAP,CAAc,UAAA,GAAG;AAAA,aAAI,CAAC,KAAK,CAAC,GAAN,CAAU,GAAV,CAAL;AAAA,KAAjB,CAAb;AAEA,WAAO,IAAI,CAAC,MAAL,KAAgB,CAAhB,GAAoB,IAAI,CAAC,CAAD,CAAxB,GAA8B,IAArC;AACD;;AAED,MAAI,OAAO,GAAG,OAAd,EAAuB;AACrB,WAAO;AACL,MAAA,GAAG,EAAE,IADA;AAEL,MAAA,GAAG,EAAE,IAAI,CAAC,IAAD,EAAO,IAAP;AAFJ,KAAP;AAID;;AAED,SAAO;AACL,IAAA,GAAG,EAAE,KADA;AAEL,IAAA,GAAG,EAAE,IAAI,CAAC,IAAD,EAAO,IAAP;AAFJ,GAAP;AAID;;AAEK,SAAU,cAAV,CAAyB,OAAzB,EAAiD,MAAjD,EAAwE,GAAxE,EAAgF;AACpF,MAAM,iBAAiB,GAAG,OAAO,CAAC,SAAR,CAAkB;AAAA,QAAG,IAAH,QAAG,IAAH;AAAA,WAAc,IAAI,CAAC,GAAL,KAAa,GAA3B;AAAA,GAAlB,CAA1B;AACA,MAAM,cAAc,GAAG,OAAO,CAAC,iBAAiB,GAAG,CAArB,CAA9B;AACA,MAAM,gBAAgB,GAAG,MAAM,CAAC,SAAP,CAAiB;AAAA,QAAG,IAAH,SAAG,IAAH;AAAA,WAAc,IAAI,CAAC,GAAL,KAAa,GAA3B;AAAA,GAAjB,CAAzB;;AAEA,MAAI,cAAJ,EAAoB;AAClB,QAAM,cAAc,GAAG,MAAM,CAAC,SAAP,CAAiB;AAAA,UAAG,IAAH,SAAG,IAAH;AAAA,aAAc,IAAI,CAAC,GAAL,KAAa,cAAc,CAAC,IAAf,CAAoB,GAA/C;AAAA,KAAjB,CAAvB;AACA,WAAO,MAAM,CAAC,KAAP,CAAa,gBAAgB,GAAG,CAAhC,EAAmC,cAAnC,CAAP;AACD;;AACD,SAAO,MAAM,CAAC,KAAP,CAAa,gBAAgB,GAAG,CAAhC,CAAP;AACD","sourcesContent":["import { Key, FlattenNode } from '../interface';\n\nexport function findExpandedKeys(prev: Key[] = [], next: Key[] = []) {\n  const prevLen = prev.length;\n  const nextLen = next.length;\n\n  if (Math.abs(prevLen - nextLen) !== 1) {\n    return { add: false, key: null };\n  }\n\n  function find(shorter: Key[], longer: Key[]) {\n    const cache: Map<Key, boolean> = new Map();\n    shorter.forEach(key => {\n      cache.set(key, true);\n    });\n\n    const keys = longer.filter(key => !cache.has(key));\n\n    return keys.length === 1 ? keys[0] : null;\n  }\n\n  if (prevLen < nextLen) {\n    return {\n      add: true,\n      key: find(prev, next),\n    };\n  }\n\n  return {\n    add: false,\n    key: find(next, prev),\n  };\n}\n\nexport function getExpandRange(shorter: FlattenNode[], longer: FlattenNode[], key: Key) {\n  const shorterStartIndex = shorter.findIndex(({ data }) => data.key === key);\n  const shorterEndNode = shorter[shorterStartIndex + 1];\n  const longerStartIndex = longer.findIndex(({ data }) => data.key === key);\n\n  if (shorterEndNode) {\n    const longerEndIndex = longer.findIndex(({ data }) => data.key === shorterEndNode.data.key);\n    return longer.slice(longerStartIndex + 1, longerEndIndex);\n  }\n  return longer.slice(longerStartIndex + 1);\n}\n"]}