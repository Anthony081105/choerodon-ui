{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/auto-complete/AutoComplete.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { ReactNode, ReactElement, Key } from 'react';\nimport { observer } from 'mobx-react';\nimport { omit } from 'lodash';\nimport Menu, { Item } from 'choerodon-ui/lib/rc-components/menu';\nimport { action } from 'mobx';\nimport Record from '../data-set/Record';\n\nimport autobind from '../_util/autobind';\nimport { getItemKey, Select, SelectProps } from '../select/Select';\nimport DataSet from '../data-set';\nimport { FieldType } from '../data-set/enum';\n\n\nexport interface AutoCompleteProps extends SelectProps {\n}\n\nexport class AutoComplete<T extends AutoCompleteProps> extends Select<T> {\n\n  static displayName = 'AutoComplete';\n\n  menu?: Menu | null;\n\n  isChoose?: boolean = false;\n\n  inputText: string = '';\n\n  static propTypes = {\n    ...Select.propTypes,\n  };\n\n  static defaultProps = {\n    ...Select.defaultProps,\n    searchable: true,\n    suffixCls: 'auto-complete',\n  };\n\n  getTriggerIconFont() {\n    return '';\n  }\n\n  getNotFoundContent() {\n    return null;\n  }\n\n  getOtherProps() {\n    const otherProps = omit(super.getOtherProps(), [\n      'searchable',\n    ]);\n    return otherProps;\n  }\n\n  @autobind\n  @action\n  handleChange(e) {\n    this.isChoose = false;\n    super.handleChange(e);\n  }\n\n  choose(record?: Record | null) {\n    this.isChoose = true;\n    super.choose(record);\n  }\n\n  @autobind\n  handleFocus(e) {\n    this.inputText = e.target?.value;\n    super.handleFocus(e);\n  }\n\n  @autobind\n  handleBlur(e) {\n    if (!e.isDefaultPrevented()) {\n      if (!this.isChoose) {\n        const inputText = this.text || this.inputText;\n        this.inputText = inputText;\n        const temDs = new DataSet({\n          fields: [\n            { name: this.textField, type: FieldType.string },\n            { name: this.valueField, type: FieldType.string },\n          ],\n          data: [{\n            [this.textField]: inputText,\n            [this.valueField]: inputText,\n          }],\n        });\n        this.choose(temDs.current);\n      }\n      super.handleBlur(e);\n    }\n  }\n\n  @autobind\n  getMenu(menuProps: object = {}): ReactNode {\n    const {\n      options,\n      textField,\n      valueField,\n      props: { dropdownMenuStyle, optionRenderer, onOption },\n    } = this;\n    const inputText = this.text || this.inputText;\n\n    if (!options) {\n      return null;\n    }\n    const optGroups: ReactElement<any>[] = [];\n    const menuDisabled = this.isDisabled();\n    const selectedKeys: Key[] = [];\n\n    options.forEach(record => {\n\n      const value = record.get(valueField);\n      // 判断是否符合自动补全的条件\n      if (inputText && value.indexOf(inputText) === -1) {\n        return;\n      }\n\n      const text = record.get(textField);\n      const key: Key = getItemKey(record, text, value);\n      const optionProps = onOption({ dataSet: options, record });\n      const optionDisabled = menuDisabled || (optionProps && optionProps.disabled);\n\n      const itemContent = optionRenderer\n        ? optionRenderer({ dataSet: this.options, record, text, value })\n        : text;\n      const option: ReactElement = (\n        <Item {...optionProps} key={key} value={record} disabled={optionDisabled}>\n          {itemContent}\n        </Item>\n      );\n\n      optGroups.push(option);\n    });\n\n    if (!optGroups.length) {\n      return null;\n    }\n\n    return (\n      <Menu\n        ref={this.saveMenu}\n        disabled={menuDisabled}\n        defaultActiveFirst\n        multiple={this.menuMultiple}\n        selectedKeys={selectedKeys}\n        prefixCls={this.getMenuPrefixCls()}\n        onClick={this.handleMenuClick}\n        style={dropdownMenuStyle}\n        focusable={false}\n        {...menuProps}\n      >\n        {optGroups}\n      </Menu>\n    );\n  }\n\n}\n\n@observer\nexport default class ObserverAutoComplete extends AutoComplete<AutoCompleteProps> {\n  static defaultProps = AutoComplete.defaultProps;\n}\n"]}