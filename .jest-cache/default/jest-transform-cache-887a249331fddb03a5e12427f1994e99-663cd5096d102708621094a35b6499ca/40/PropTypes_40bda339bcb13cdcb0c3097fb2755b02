4a0cc0a537d2100f514f98029b2a40ff
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SelectPropTypes = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _strategies = require("./strategies");

function nonEmptyStringType(props, propsName) {
  var value = props[propsName];

  if (typeof value !== 'string' || !value) {
    return new Error(); // Just a flag, so don't need message.
  }
}

function valueType(props, propName, componentName) {
  var labelInValueShape = _propTypes["default"].shape({
    value: nonEmptyStringType,
    label: _propTypes["default"].node
  });

  if (props.labelInValue) {
    var validate = _propTypes["default"].oneOfType([_propTypes["default"].arrayOf(labelInValueShape), labelInValueShape]);

    var error = validate.apply(void 0, arguments);

    if (error) {
      return new Error("Invalid prop `".concat(propName, "` supplied to `").concat(componentName, "`, ") + "when `labelInValue` is `true`, `".concat(propName, "` should in ") + "shape of `{ value: string, label?: string }`.");
    }
  } else if (props.treeCheckable && props.treeCheckStrictly) {
    var _validate = _propTypes["default"].oneOfType([_propTypes["default"].arrayOf(labelInValueShape), labelInValueShape]);

    var _error = _validate.apply(void 0, arguments);

    if (_error) {
      return new Error("Invalid prop `".concat(propName, "` supplied to `").concat(componentName, "`, ") + "when `treeCheckable` and `treeCheckStrictly` are `true`, " + "`".concat(propName, "` should in shape of `{ value: string, label?: string }`."));
    }
  } else if (props.multiple && props[propName] === '') {
    return new Error("Invalid prop `".concat(propName, "` of type `string` supplied to `").concat(componentName, "`, ") + "expected `array` when `multiple` is `true`.");
  } else {
    var _validate2 = _propTypes["default"].oneOfType([_propTypes["default"].arrayOf(_propTypes["default"].string), _propTypes["default"].string]);

    return _validate2.apply(void 0, arguments);
  }
}

var SelectPropTypes = {
  className: _propTypes["default"].string,
  prefixCls: _propTypes["default"].string,
  multiple: _propTypes["default"].bool,
  filterTreeNode: _propTypes["default"].any,
  showSearch: _propTypes["default"].bool,
  disabled: _propTypes["default"].bool,
  showArrow: _propTypes["default"].bool,
  allowClear: _propTypes["default"].bool,
  defaultOpen: _propTypes["default"].bool,
  open: _propTypes["default"].bool,
  transitionName: _propTypes["default"].string,
  animation: _propTypes["default"].string,
  choiceTransitionName: _propTypes["default"].string,
  onClick: _propTypes["default"].func,
  onChange: _propTypes["default"].func,
  onSelect: _propTypes["default"].func,
  onDeselect: _propTypes["default"].func,
  onSearch: _propTypes["default"].func,
  searchPlaceholder: _propTypes["default"].string,
  placeholder: _propTypes["default"].any,
  inputValue: _propTypes["default"].any,
  value: valueType,
  defaultValue: valueType,
  label: _propTypes["default"].node,
  defaultLabel: _propTypes["default"].any,
  labelInValue: _propTypes["default"].bool,
  dropdownStyle: _propTypes["default"].object,
  dropdownPopupAlign: _propTypes["default"].object,
  onDropdownVisibleChange: _propTypes["default"].func,
  maxTagTextLength: _propTypes["default"].number,
  showCheckedStrategy: _propTypes["default"].oneOf([_strategies.SHOW_ALL, _strategies.SHOW_PARENT, _strategies.SHOW_CHILD]),
  treeCheckStrictly: _propTypes["default"].bool,
  treeIcon: _propTypes["default"].bool,
  treeLine: _propTypes["default"].bool,
  autoClearSearchValue: _propTypes["default"].bool,
  treeDefaultExpandAll: _propTypes["default"].bool,
  treeCheckable: _propTypes["default"].oneOfType([_propTypes["default"].bool, _propTypes["default"].node]),
  treeNodeLabelProp: _propTypes["default"].string,
  treeNodeFilterProp: _propTypes["default"].string,
  treeData: _propTypes["default"].array,
  treeDataSimpleMode: _propTypes["default"].oneOfType([_propTypes["default"].bool, _propTypes["default"].object]),
  loadData: _propTypes["default"].func,
  searchValue: _propTypes["default"].string
};
exports.SelectPropTypes = SelectPropTypes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,