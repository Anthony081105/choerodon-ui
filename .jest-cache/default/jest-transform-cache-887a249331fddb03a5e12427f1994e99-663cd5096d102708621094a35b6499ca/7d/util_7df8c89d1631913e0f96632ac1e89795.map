{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components/table/util.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Children, isValidElement, ReactChildren } from 'react';\nimport { ColumnProps } from './interface';\n\nexport function flatArray(data: any[] = [], childrenName = 'children') {\n  const result: any[] = [];\n  const loop = (array: any[]) => {\n    array.forEach(item => {\n      if (item[childrenName]) {\n        const newItem = { ...item };\n        delete newItem[childrenName];\n        result.push(newItem);\n        if (item[childrenName].length > 0) {\n          loop(item[childrenName]);\n        }\n      } else {\n        result.push(item);\n      }\n    });\n  };\n  loop(data);\n  return result;\n}\n\nexport function treeMap<Node>(\n  tree: Node[],\n  mapper: (node: Node, index: number) => any,\n  childrenName = 'children',\n) {\n  return tree.map((node: any, index) => {\n    const extra: any = {};\n    if (node[childrenName]) {\n      extra[childrenName] = treeMap(node[childrenName], mapper, childrenName);\n    }\n    return {\n      ...mapper(node as Node, index),\n      ...extra,\n    };\n  });\n}\n\nexport function flatFilter<T>(\n  tree: ColumnProps<T>[],\n  callback: (node: ColumnProps<T>) => any,\n): ColumnProps<T>[] {\n  return tree.reduce(\n    (acc, node) => {\n      if (callback(node)) {\n        acc.push(node);\n      }\n      if (node.children) {\n        const children = flatFilter(node.children, callback);\n        acc.push(...children);\n      }\n      return acc;\n    },\n    [] as ColumnProps<T>[],\n  );\n}\n\nexport function normalizeColumns(elements: ReactChildren) {\n  const columns: any[] = [];\n  Children.forEach(elements, element => {\n    if (!isValidElement(element)) {\n      return;\n    }\n    const column: any = {\n      ...(element.props as Object),\n    };\n    if (element.key) {\n      column.key = element.key;\n    }\n    if (element.type && (element.type as any).__ANT_TABLE_COLUMN_GROUP) {\n      column.children = normalizeColumns(column.children);\n    }\n    columns.push(column);\n  });\n  return columns;\n}\n\nexport function getLeafColumns<T>(columns: ColumnProps<T>[]) {\n  return flatFilter(columns, c => !c.children);\n}\n\nexport function getColumnKey<T>(column: ColumnProps<T>, index?: number) {\n  return column.key || column.dataIndex || index;\n}\n\nexport function findColumnByFilterValue<T>(\n  record: T,\n  columns: ColumnProps<T>[],\n  inputValue: string,\n): ColumnProps<T> | undefined {\n  return columns.find(col => {\n    const key = getColumnKey(col);\n    if (key) {\n      let value = (record as any)[key];\n      if (value && typeof value !== 'object') {\n        value = value.toString();\n        if (value.toLowerCase().indexOf(inputValue.toLowerCase()) !== -1) {\n          return true;\n        }\n      }\n    }\n    return false;\n  });\n}\n\nexport function filterByInputValue<T>(\n  dataSource: T[],\n  columns: ColumnProps<T>[],\n  inputValue: string,\n  cb: (record: T, column: ColumnProps<T>) => void,\n) {\n  dataSource.forEach(data => {\n    const column = findColumnByFilterValue<T>(data, columns, inputValue);\n    if (column) {\n      cb(data, column);\n    }\n  });\n}\n\nexport function removeHiddenColumns<T>(columns: ColumnProps<T>[]) {\n  return columns.filter(c => {\n    if (c.hidden) {\n      return false;\n    }\n    if (c.children) {\n      const children = removeHiddenColumns(c.children);\n      if (children.length) {\n        c.children = children;\n      } else {\n        return false;\n      }\n    }\n    return true;\n  });\n}\n"]}