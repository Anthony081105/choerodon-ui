{"version":3,"sources":["menu/index.js"],"names":["Menu","Component","onClick","onOpenChange","props","openKeys","theme","inlineCollapsed","menuTheme","prefixCls","nextProps","nextContext","mode","siderCollapsed","inlineOpenKeys","menuMode","openAnimation","openTransitionName","menuOpenAnimation","animation","leave","done","className","menuClassName","menuProps","collapsedWidth","RcMenu","Divider","Item","SubMenu","ItemGroup","focusable","PropTypes","string"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport animation from '../_util/openAnimation';\nimport warning from '../_util/warning';\nimport SubMenu from './SubMenu';\nimport Item from './MenuItem';\nimport RcMenu, { Divider, ItemGroup } from '../rc-components/menu';\nimport { getPrefixCls } from '../configure';\nexport default class Menu extends Component {\n    constructor(props) {\n        super(props);\n        this.inlineOpenKeys = [];\n        this.handleClick = (e) => {\n            this.handleOpenChange([]);\n            const { onClick } = this.props;\n            if (onClick) {\n                onClick(e);\n            }\n        };\n        this.handleOpenChange = (openKeys) => {\n            this.setOpenKeys(openKeys);\n            const { onOpenChange } = this.props;\n            if (onOpenChange) {\n                onOpenChange(openKeys);\n            }\n        };\n        warning(!('onOpen' in props || 'onClose' in props), '`onOpen` and `onClose` are removed, please use `onOpenChange` instead');\n        warning(!('inlineCollapsed' in props && props.mode !== 'inline'), \"`inlineCollapsed` should only be used when Menu's `mode` is inline.\");\n        let openKeys;\n        if ('defaultOpenKeys' in props) {\n            openKeys = props.defaultOpenKeys;\n        }\n        else if ('openKeys' in props) {\n            openKeys = props.openKeys;\n        }\n        this.state = {\n            openKeys: openKeys || [],\n        };\n    }\n    getChildContext() {\n        const { theme } = this.props;\n        return {\n            inlineCollapsed: this.getInlineCollapsed(),\n            menuTheme: theme,\n        };\n    }\n    getPrefixCls() {\n        const { prefixCls } = this.props;\n        return getPrefixCls('menu', prefixCls);\n    }\n    componentWillReceiveProps(nextProps, nextContext) {\n        const { mode, inlineCollapsed } = this.props;\n        if (mode === 'inline' && nextProps.mode !== 'inline') {\n            this.switchModeFromInline = true;\n        }\n        if ('openKeys' in nextProps) {\n            this.setState({ openKeys: nextProps.openKeys });\n            return;\n        }\n        const { openKeys } = this.state;\n        const { siderCollapsed } = this.context;\n        if ((nextProps.inlineCollapsed && !inlineCollapsed) ||\n            (nextContext.siderCollapsed && !siderCollapsed)) {\n            this.switchModeFromInline =\n                !!openKeys.length &&\n                    !!findDOMNode(this).querySelectorAll(`.${this.getPrefixCls()}-submenu-open`).length;\n            this.inlineOpenKeys = openKeys;\n            this.setState({ openKeys: [] });\n        }\n        if ((!nextProps.inlineCollapsed && inlineCollapsed) ||\n            (!nextContext.siderCollapsed && siderCollapsed)) {\n            this.setState({ openKeys: this.inlineOpenKeys });\n            this.inlineOpenKeys = [];\n        }\n    }\n    setOpenKeys(openKeys) {\n        if (!('openKeys' in this.props)) {\n            this.setState({ openKeys });\n        }\n    }\n    getRealMenuMode() {\n        const inlineCollapsed = this.getInlineCollapsed();\n        if (this.switchModeFromInline && inlineCollapsed) {\n            return 'inline';\n        }\n        const { mode } = this.props;\n        return inlineCollapsed ? 'vertical' : mode;\n    }\n    getInlineCollapsed() {\n        const { inlineCollapsed } = this.props;\n        const { siderCollapsed = inlineCollapsed } = this.context;\n        return siderCollapsed;\n    }\n    getMenuOpenAnimation(menuMode) {\n        const { openAnimation, openTransitionName } = this.props;\n        let menuOpenAnimation = openAnimation || openTransitionName;\n        if (openAnimation === undefined && openTransitionName === undefined) {\n            switch (menuMode) {\n                case 'horizontal':\n                    menuOpenAnimation = 'slide-up';\n                    break;\n                case 'vertical':\n                case 'vertical-left':\n                case 'vertical-right':\n                    // When mode switch from inline\n                    // submenu should hide without animation\n                    if (this.switchModeFromInline) {\n                        menuOpenAnimation = '';\n                        this.switchModeFromInline = false;\n                    }\n                    else {\n                        menuOpenAnimation = 'zoom-big';\n                    }\n                    break;\n                case 'inline':\n                    menuOpenAnimation = {\n                        ...animation,\n                        leave: (node, done) => animation.leave(node, () => {\n                            // Make sure inline menu leave animation finished before mode is switched\n                            this.switchModeFromInline = false;\n                            this.setState({});\n                            // when inlineCollapsed change false to true, all submenu will be unmounted,\n                            // so that we don't need handle animation leaving.\n                            if (this.getRealMenuMode() === 'vertical') {\n                                return;\n                            }\n                            done();\n                        }),\n                    };\n                    break;\n                default:\n            }\n        }\n        return menuOpenAnimation;\n    }\n    render() {\n        const { className, theme } = this.props;\n        const { openKeys } = this.state;\n        const prefixCls = this.getPrefixCls();\n        const menuMode = this.getRealMenuMode();\n        const menuOpenAnimation = this.getMenuOpenAnimation(menuMode);\n        const menuClassName = classNames(className, `${prefixCls}-${theme}`, {\n            [`${prefixCls}-inline-collapsed`]: this.getInlineCollapsed(),\n        });\n        const menuProps = {\n            openKeys,\n            onOpenChange: this.handleOpenChange,\n            className: menuClassName,\n            mode: menuMode,\n        };\n        if (menuMode !== 'inline') {\n            // closing vertical popup submenu after click it\n            menuProps.onClick = this.handleClick;\n            menuProps.openTransitionName = menuOpenAnimation;\n        }\n        else {\n            menuProps.openAnimation = menuOpenAnimation;\n        }\n        const { collapsedWidth } = this.context;\n        if (this.getInlineCollapsed() &&\n            (collapsedWidth === 0 || collapsedWidth === '0' || collapsedWidth === '0px')) {\n            return null;\n        }\n        return React.createElement(RcMenu, Object.assign({}, this.props, menuProps, { prefixCls: prefixCls }));\n    }\n}\nMenu.displayName = 'Menu';\nMenu.Divider = Divider;\nMenu.Item = Item;\nMenu.SubMenu = SubMenu;\nMenu.ItemGroup = ItemGroup;\nMenu.defaultProps = {\n    className: '',\n    theme: 'light',\n    focusable: false,\n};\nMenu.childContextTypes = {\n    inlineCollapsed: PropTypes.bool,\n    menuTheme: PropTypes.string,\n};\nMenu.contextTypes = {\n    siderCollapsed: PropTypes.bool,\n    collapsedWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n};\n"]}