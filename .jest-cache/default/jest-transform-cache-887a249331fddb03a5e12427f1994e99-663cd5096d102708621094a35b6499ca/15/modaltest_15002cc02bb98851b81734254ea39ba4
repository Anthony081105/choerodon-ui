cd21c1e4dc92777ed9615c79ae9a4356
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _react = _interopRequireDefault(require("react"));

var _ = _interopRequireDefault(require(".."));

describe('modal triggers callbacks correctly', function () {
  var errorSpy = jest.spyOn(console, 'error').mockImplementation(function () {});
  beforeEach(function () {
    jest.useFakeTimers();
  });
  afterEach(function () {
    errorSpy.mockReset();
    document.body.innerHTML = '';
    jest.useRealTimers();
  });
  afterAll(function () {
    errorSpy.mockRestore();
  });

  var _pro = function _pro(className) {
    return document.body.querySelectorAll(className);
  };

  function open(args) {
    _["default"].open((0, _objectSpread2["default"])({
      title: 'Modal Test',
      destroyOnClose: true,
      children: _react["default"].createElement("div", null, _react["default"].createElement("p", null, "Some contents..."), _react["default"].createElement("p", null, "Some contents..."), _react["default"].createElement("p", null, "Some contents..."))
    }, args));
  }

  it('should not render title when title not defined', function () {
    // first modal
    _["default"].confirm({
      children: 'test descriptions'
    });

    expect(_pro('.c7n-pro-modal-footer')).toHaveLength(1);
    expect(document.querySelector('.c7n-pro-confirm-title')).toBe(null);
  });
  it('should allow Modal without onCancel been set', function () {
    // second modal
    var key = _["default"].key();

    open({
      key: key
    });

    _pro('.c7n-pro-modal-footer')[1].querySelector('.c7n-pro-btn-default').click();

    expect(errorSpy).not.toHaveBeenCalled();
  });
  it('should allow Modal.comfirm without onOk been set', function () {
    // third modal
    var key = _["default"].key();

    open({
      key: key
    });

    _pro('.c7n-pro-modal-footer')[2].querySelector('.c7n-pro-btn-primary').click();

    expect(errorSpy).not.toHaveBeenCalled();
  });
  it('trigger onCancel once when click on cancel button', function () {
    var onCancel = jest.fn();
    var onOk = jest.fn();

    var key = _["default"].key(); // forth modal


    open({
      key: key,
      onCancel: onCancel,
      onOk: onOk
    });

    _pro('.c7n-pro-modal-footer')[3].querySelector('.c7n-pro-btn-default').click();

    expect(onCancel.mock.calls.length).toBe(1);
    expect(onOk.mock.calls.length).toBe(0);
  });
  it('trigger onOk once when click on ok button', function () {
    var onCancel = jest.fn();
    var onOk = jest.fn();

    var key = _["default"].key(); // fifth modal


    open({
      key: key,
      onCancel: onCancel,
      onOk: onOk
    });

    _pro('.c7n-pro-modal-footer')[4].querySelector('.c7n-pro-btn-primary').click();

    expect(onCancel.mock.calls.length).toBe(0);
    expect(onOk.mock.calls.length).toBe(1);
  });
  it('only ok when the okCancel false', function () {
    open({
      okCancel: false
    });
    expect(_pro('.c7n-pro-modal-footer')[5].querySelectorAll('.c7n-pro-btn')).toHaveLength(1);
    expect(_pro('.c7n-pro-modal-footer')[5].querySelectorAll('.c7n-pro-btn')[0].innerHTML).toContain('确定');
  });
  it('should render info modal correctly ', function () {
    ['success', 'warning', 'error'].forEach(function (type) {
      _["default"][type]({
        title: 'title',
        children: 'content'
      });

      expect(_pro(".c7n-pro-confirm-".concat(type))).toHaveLength(1);
    });
  });
  it('should has maskClassName when set maskClassName', function () {
    ['success', 'warning', 'error', 'open', 'confirm', 'info'].forEach(function (type) {
      var maskClassName = 'maskClassName';

      _["default"][type]({
        title: 'title',
        children: 'content',
        maskClassName: maskClassName
      });

      expect(_pro(".c7n-pro-mask.c7n-pro-mask-wrapper.".concat(maskClassName))).toHaveLength(1);
    });
  });
  it('should has maskStyle when set maskStyle', function () {
    ['success', 'warning', 'error', 'open', 'confirm', 'info'].forEach(function (type) {
      var maskStyle = {
        background: 'red'
      };

      _["default"][type]({
        title: 'title',
        children: 'content',
        maskStyle: maskStyle
      });

      expect(_pro(".c7n-pro-mask.c7n-pro-mask-wrapper")).toHaveLength(1);
      expect(_pro(".c7n-pro-mask.c7n-pro-mask-wrapper")[0].style.background).toBe('red');
    });
  });
  it('should not render mask when set mask to false', function () {
    ['success', 'warning', 'error', 'open', 'confirm', 'info'].forEach(function (type) {
      var mask = false;

      _["default"][type]({
        title: 'title',
        children: 'content',
        mask: mask
      });

      jest.runAllTimers();
      expect(_pro(".c7n-pro-mask.c7n-pro-mask-wrapper")).toHaveLength(0);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,