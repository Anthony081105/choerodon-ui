a1229d0eda20075373fd3b1fb2cf9eb0
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireDefault(require("react"));

var _mockdate = _interopRequireDefault(require("mockdate"));

var _moment = _interopRequireDefault(require("moment"));

var _enzyme = require("enzyme");

var _ = _interopRequireDefault(require(".."));

var _utils = require("../utils");

var _utils2 = require("../../../tests/utils");

var _mountTest = _interopRequireDefault(require("../../../tests/shared/mountTest"));

describe('Statistic', function () {
  (0, _mountTest["default"])(_["default"]);
  (0, _mountTest["default"])(_["default"].Countdown);
  beforeAll(function () {
    _mockdate["default"].set((0, _moment["default"])('2018-11-28 00:00:00').valueOf());
  });
  afterAll(function () {
    _mockdate["default"].reset();
  });
  it('`-` is not a number', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      value: "-"
    }));
    expect(wrapper.find('.c7n-statistic-content').text()).toEqual('-');
  });
  it('customize formatter', function () {
    var formatter = jest.fn(function () {
      return 93;
    });
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      value: 1128,
      formatter: formatter
    }));
    expect(formatter).toHaveBeenCalledWith(1128);
    expect(wrapper.find('.c7n-statistic-content-value').text()).toEqual('93');
  });
  it('groupSeparator', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      value: 1128,
      groupSeparator: "__TEST__"
    }));
    expect(wrapper.find('.c7n-statistic-content-value').text()).toEqual('1__TEST__128');
  });
  it('not a number', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      value: "bamboo"
    }));
    expect(wrapper.find('.c7n-statistic-content-value').text()).toEqual('bamboo');
  });
  it('support negetive number', function () {
    var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      title: "Account Balance (CNY)",
      value: -112893.12345,
      precision: 2
    }));
    expect(wrapper.render()).toMatchSnapshot();
  });
  describe('Countdown', function () {
    it('render correctly', function () {
      var now = (0, _moment["default"])().add(2, 'd').add(11, 'h').add(28, 'm').add(9, 's').add(3, 'ms');
      [['H:m:s', '59:28:9'], ['HH:mm:ss', '59:28:09'], ['HH:mm:ss:SSS', '59:28:09:003'], ['DD-HH:mm:ss', '02-11:28:09']].forEach(function (_ref) {
        var _ref2 = (0, _slicedToArray2["default"])(_ref, 2),
            format = _ref2[0],
            value = _ref2[1];

        var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"].Countdown, {
          format: format,
          value: now
        }));
        expect(wrapper.find('.c7n-statistic-content-value').text()).toEqual(value);
      });
    });
    it('time going',
    /*#__PURE__*/
    (0, _asyncToGenerator2["default"])(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee() {
      var now, onFinish, wrapper;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              now = Date.now() + 1000;
              onFinish = jest.fn();
              wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"].Countdown, {
                value: now,
                onFinish: onFinish
              }));
              wrapper.update();
              _context.next = 6;
              return (0, _utils2.sleep)(10);

            case 6:
              expect(onFinish).not.toHaveBeenCalled();

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    })));
    it('responses hover events', function () {
      var onMouseEnter = jest.fn();
      var onMouseLeave = jest.fn();
      var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
        onMouseEnter: onMouseEnter,
        onMouseLeave: onMouseLeave
      }));
      wrapper.simulate('mouseenter');
      expect(onMouseEnter).toHaveBeenCalled();
      wrapper.simulate('mouseleave');
      expect(onMouseLeave).toHaveBeenCalled();
    });
    it('responses hover events for Countdown', function () {
      var onMouseEnter = jest.fn();
      var onMouseLeave = jest.fn();
      var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"].Countdown, {
        onMouseEnter: onMouseEnter,
        onMouseLeave: onMouseLeave
      }));
      wrapper.simulate('mouseenter');
      expect(onMouseEnter).toHaveBeenCalled();
      wrapper.simulate('mouseleave');
      expect(onMouseLeave).toHaveBeenCalled();
    });
    describe('time finished', function () {
      it('not call if time already passed', function () {
        var now = Date.now() - 1000;
        var onFinish = jest.fn();
        var wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"].Countdown, {
          value: now,
          onFinish: onFinish
        }));
        wrapper.update();
        expect(onFinish).not.toHaveBeenCalled();
      });
      it('called if finished',
      /*#__PURE__*/
      (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee2() {
        var now, onFinish, wrapper;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                jest.useFakeTimers();
                now = Date.now() + 10;
                onFinish = jest.fn();
                wrapper = (0, _enzyme.mount)(_react["default"].createElement(_["default"].Countdown, {
                  value: now,
                  onFinish: onFinish
                }));
                wrapper.update();

                _mockdate["default"].set((0, _moment["default"])('2019-11-28 00:00:00').valueOf());

                jest.runAllTimers();
                expect(onFinish).toHaveBeenCalled();
                jest.useFakeTimers();

              case 9:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      })));
    });
  });
  describe('utils', function () {
    it('format should support escape', function () {
      expect((0, _utils.formatTimeStr)(1000 * 60 * 60 * 24, 'D [Day]')).toBe('1 Day');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,