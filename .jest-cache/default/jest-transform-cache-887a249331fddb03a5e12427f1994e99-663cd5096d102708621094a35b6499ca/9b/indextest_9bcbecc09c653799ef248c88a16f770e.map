{"version":3,"sources":["index.test.js"],"names":["describe","Statistic","Countdown","beforeAll","MockDate","set","valueOf","afterAll","reset","it","wrapper","expect","find","text","toEqual","formatter","jest","fn","toHaveBeenCalledWith","render","toMatchSnapshot","now","add","forEach","format","value","Date","onFinish","update","not","toHaveBeenCalled","onMouseEnter","onMouseLeave","simulate","useFakeTimers","runAllTimers","toBe"],"mappings":"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","sourcesContent":["import React from 'react';\nimport MockDate from 'mockdate';\nimport moment from 'moment';\nimport { mount } from 'enzyme';\nimport Statistic from '..';\nimport { formatTimeStr } from '../utils';\nimport { sleep } from '../../../tests/utils';\nimport mountTest from '../../../tests/shared/mountTest';\n\ndescribe('Statistic', () => {\n  mountTest(Statistic);\n  mountTest(Statistic.Countdown);\n\n  beforeAll(() => {\n    MockDate.set(moment('2018-11-28 00:00:00').valueOf());\n  });\n\n  afterAll(() => {\n    MockDate.reset();\n  });\n\n  it('`-` is not a number', () => {\n    const wrapper = mount(<Statistic value=\"-\" />);\n    expect(wrapper.find('.c7n-statistic-content').text()).toEqual('-');\n  });\n\n  it('customize formatter', () => {\n    const formatter = jest.fn(() => 93);\n    const wrapper = mount(<Statistic value={1128} formatter={formatter} />);\n    expect(formatter).toHaveBeenCalledWith(1128);\n    expect(wrapper.find('.c7n-statistic-content-value').text()).toEqual('93');\n  });\n\n  it('groupSeparator', () => {\n    const wrapper = mount(<Statistic value={1128} groupSeparator=\"__TEST__\" />);\n    expect(wrapper.find('.c7n-statistic-content-value').text()).toEqual('1__TEST__128');\n  });\n\n  it('not a number', () => {\n    const wrapper = mount(<Statistic value=\"bamboo\" />);\n    expect(wrapper.find('.c7n-statistic-content-value').text()).toEqual('bamboo');\n  });\n\n  it('support negetive number', () => {\n    const wrapper = mount(\n      <Statistic title=\"Account Balance (CNY)\" value={-112893.12345} precision={2} />,\n    );\n    expect(wrapper.render()).toMatchSnapshot();\n  });\n\n  describe('Countdown', () => {\n    it('render correctly', () => {\n      const now = moment().add(2, 'd').add(11, 'h').add(28, 'm').add(9, 's').add(3, 'ms');\n\n      [\n        ['H:m:s', '59:28:9'],\n        ['HH:mm:ss', '59:28:09'],\n        ['HH:mm:ss:SSS', '59:28:09:003'],\n        ['DD-HH:mm:ss', '02-11:28:09'],\n      ].forEach(([format, value]) => {\n        const wrapper = mount(<Statistic.Countdown format={format} value={now} />);\n        expect(wrapper.find('.c7n-statistic-content-value').text()).toEqual(value);\n      });\n    });\n\n    it('time going', async () => {\n      const now = Date.now() + 1000;\n      const onFinish = jest.fn();\n      const wrapper = mount(<Statistic.Countdown value={now} onFinish={onFinish} />);\n      wrapper.update();\n      await sleep(10);\n      expect(onFinish).not.toHaveBeenCalled();\n    });\n\n    it('responses hover events', () => {\n      const onMouseEnter = jest.fn();\n      const onMouseLeave = jest.fn();\n      const wrapper = mount(<Statistic onMouseEnter={onMouseEnter} onMouseLeave={onMouseLeave} />);\n      wrapper.simulate('mouseenter');\n      expect(onMouseEnter).toHaveBeenCalled();\n      wrapper.simulate('mouseleave');\n      expect(onMouseLeave).toHaveBeenCalled();\n    });\n\n    it('responses hover events for Countdown', () => {\n      const onMouseEnter = jest.fn();\n      const onMouseLeave = jest.fn();\n      const wrapper = mount(<Statistic.Countdown onMouseEnter={onMouseEnter} onMouseLeave={onMouseLeave} />);\n      wrapper.simulate('mouseenter');\n      expect(onMouseEnter).toHaveBeenCalled();\n      wrapper.simulate('mouseleave');\n      expect(onMouseLeave).toHaveBeenCalled();\n    });\n\n    describe('time finished', () => {\n      it('not call if time already passed', () => {\n        const now = Date.now() - 1000;\n        const onFinish = jest.fn();\n        const wrapper = mount(<Statistic.Countdown value={now} onFinish={onFinish} />);\n        wrapper.update();\n        expect(onFinish).not.toHaveBeenCalled();\n      });\n\n      it('called if finished', async () => {\n        jest.useFakeTimers();\n        const now = Date.now() + 10;\n        const onFinish = jest.fn();\n        const wrapper = mount(<Statistic.Countdown value={now} onFinish={onFinish} />);\n        wrapper.update();\n\n        MockDate.set(moment('2019-11-28 00:00:00').valueOf());\n        jest.runAllTimers();\n\n        expect(onFinish).toHaveBeenCalled();\n        jest.useFakeTimers();\n      });\n    });\n  });\n\n  describe('utils', () => {\n    it('format should support escape', () => {\n      expect(formatTimeStr(1000 * 60 * 60 * 24, 'D [Day]')).toBe('1 Day');\n    });\n  });\n});\n"]}