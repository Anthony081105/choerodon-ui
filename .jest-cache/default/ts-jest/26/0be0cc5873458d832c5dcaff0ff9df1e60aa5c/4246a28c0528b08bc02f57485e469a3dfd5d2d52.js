import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import Icon from '../icon';
import { Circle } from '../rc-components/progress';
import Loading from './Loading';
import { getPrefixCls } from '../configure';
const statusColorMap = {
    normal: '#108ee9',
    exception: '#ff5500',
    success: '#87d068',
};
export default class Progress extends Component {
    render() {
        const props = this.props;
        const { prefixCls: customizePrefixCls, className, percent = 0, status, format, trailColor, size, successPercent, type, strokeWidth, strokeColor, width, showInfo, gapDegree = 0, gapPosition, ...restProps } = props;
        const prefixCls = getPrefixCls('progress', customizePrefixCls);
        const progressStatus = parseInt(successPercent ? successPercent.toString() : percent.toString(), 10) >= 100 &&
            !('status' in props)
            ? "success" /* success */
            : status || "normal" /* normal */;
        let progressInfo;
        let progress;
        const textFormatter = format || (percentNumber => `${percentNumber}%`);
        if (showInfo) {
            let text;
            const circleType = type === "circle" /* circle */ || type === "dashboard" /* dashboard */;
            if (progressStatus === "exception" /* exception */) {
                text = format ? textFormatter(percent) : React.createElement(Icon, { type: circleType ? 'close' : 'cancel' });
            }
            else if (progressStatus === "success" /* success */) {
                text = format ? (textFormatter(percent)) : (React.createElement(Icon, { type: circleType ? 'check' : 'check_circle' }));
            }
            else {
                text = textFormatter(percent);
            }
            progressInfo = React.createElement("span", { className: `${prefixCls}-text` }, text);
        }
        if (type === "line" /* line */) {
            const percentStyle = {
                width: `${percent}%`,
                height: strokeWidth || (size === "small" /* small */ ? 6 : 8),
                background: strokeColor,
            };
            const successPercentStyle = {
                width: `${successPercent}%`,
                height: strokeWidth || (size === "small" /* small */ ? 6 : 8),
            };
            const successSegment = successPercent !== undefined ? (React.createElement("div", { className: `${prefixCls}-success-bg`, style: successPercentStyle })) : null;
            progress = (React.createElement("div", null,
                React.createElement("div", { className: `${prefixCls}-outer` },
                    React.createElement("div", { className: `${prefixCls}-inner` },
                        React.createElement("div", { className: `${prefixCls}-bg`, style: percentStyle }),
                        successSegment)),
                progressInfo));
        }
        else if (type === "circle" /* circle */ || type === "dashboard" /* dashboard */) {
            const circleSize = width || 120;
            const circleStyle = {
                width: circleSize,
                height: circleSize,
                fontSize: circleSize * 0.15 + 6,
            };
            const circleWidth = strokeWidth || 6;
            const gapPos = gapPosition ||
                (type === "dashboard" /* dashboard */ && "bottom" /* bottom */) ||
                "top" /* top */;
            const gapDeg = gapDegree || (type === "dashboard" /* dashboard */ && 75);
            progress = (React.createElement("div", { className: `${prefixCls}-inner`, style: circleStyle },
                React.createElement(Circle, { percent: percent, strokeWidth: circleWidth, trailWidth: circleWidth, trailColor: trailColor, strokeColor: statusColorMap[progressStatus], prefixCls: prefixCls, gapDegree: gapDeg, gapPosition: gapPos }),
                progressInfo));
        }
        else if (type === "loading" /* loading */) {
            progress = (React.createElement("div", { className: `${prefixCls}-inner` },
                React.createElement(Loading, null)));
        }
        const classString = classNames(prefixCls, {
            [`${prefixCls}-${(type === "dashboard" /* dashboard */ && "circle" /* circle */) || type}`]: true,
            [`${prefixCls}-status-${progressStatus}`]: true,
            [`${prefixCls}-show-info`]: showInfo,
            [`${prefixCls}-${size}`]: size,
        }, className);
        return (React.createElement("div", Object.assign({}, restProps, { className: classString }), progress));
    }
}
Progress.displayName = 'Progress';
Progress.defaultProps = {
    type: "line" /* line */,
    percent: 0,
    showInfo: true,
    trailColor: '#f3f3f3',
    size: "default" /* default */,
};
Progress.propTypes = {
    status: PropTypes.oneOf([
        "normal" /* normal */,
        "exception" /* exception */,
        "active" /* active */,
        "success" /* success */,
    ]),
    type: PropTypes.oneOf([
        "line" /* line */,
        "circle" /* circle */,
        "dashboard" /* dashboard */,
        "loading" /* loading */,
    ]),
    showInfo: PropTypes.bool,
    percent: PropTypes.number,
    width: PropTypes.number,
    strokeWidth: PropTypes.number,
    strokeColor: PropTypes.string,
    trailColor: PropTypes.string,
    format: PropTypes.func,
    gapDegree: PropTypes.number,
    size: PropTypes.oneOf(["default" /* default */, "small" /* small */, "large" /* large */]),
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,