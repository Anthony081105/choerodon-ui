import rcPlacements from '../rc-components/tooltip/placements';
const autoAdjustOverflowEnabled = {
    adjustX: 1,
    adjustY: 1,
};
const autoAdjustOverflowDisabled = {
    adjustX: 0,
    adjustY: 0,
};
const targetOffset = [0, 0];
export function getOverflowOptions(autoAdjustOverflow) {
    if (typeof autoAdjustOverflow === 'boolean') {
        return autoAdjustOverflow ? autoAdjustOverflowEnabled : autoAdjustOverflowDisabled;
    }
    return {
        ...autoAdjustOverflowDisabled,
        ...autoAdjustOverflow,
    };
}
export default function getPlacements(config = {}) {
    const { arrowWidth = 5, horizontalArrowShift = 16, verticalArrowShift = 12, autoAdjustOverflow = true } = config;
    const placementMap = {
        left: {
            points: ['cr', 'cl'],
            offset: [-4, 0],
        },
        right: {
            points: ['cl', 'cr'],
            offset: [4, 0],
        },
        top: {
            points: ['bc', 'tc'],
            offset: [0, -4],
        },
        bottom: {
            points: ['tc', 'bc'],
            offset: [0, 4],
        },
        topLeft: {
            points: ['bl', 'tc'],
            offset: [-(horizontalArrowShift + arrowWidth), -4],
        },
        leftTop: {
            points: ['tr', 'cl'],
            offset: [-4, -(verticalArrowShift + arrowWidth)],
        },
        topRight: {
            points: ['br', 'tc'],
            offset: [horizontalArrowShift + arrowWidth, -4],
        },
        rightTop: {
            points: ['tl', 'cr'],
            offset: [4, -(verticalArrowShift + arrowWidth)],
        },
        bottomRight: {
            points: ['tr', 'bc'],
            offset: [horizontalArrowShift + arrowWidth, 4],
        },
        rightBottom: {
            points: ['bl', 'cr'],
            offset: [4, verticalArrowShift + arrowWidth],
        },
        bottomLeft: {
            points: ['tl', 'bc'],
            offset: [-(horizontalArrowShift + arrowWidth), 4],
        },
        leftBottom: {
            points: ['br', 'cl'],
            offset: [-4, verticalArrowShift + arrowWidth],
        },
    };
    Object.keys(placementMap).forEach(key => {
        placementMap[key] = config.arrowPointAtCenter ? {
            ...placementMap[key],
            overflow: getOverflowOptions(autoAdjustOverflow),
            targetOffset,
        } : {
            ...rcPlacements[key],
            overflow: getOverflowOptions(autoAdjustOverflow),
        };
    });
    return placementMap;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvdG9vbHRpcC9wbGFjZW1lbnRzLnRzeCIsIm1hcHBpbmdzIjoiQUFBQSxPQUFPLFlBQVksTUFBTSxxQ0FBcUMsQ0FBQztBQUUvRCxNQUFNLHlCQUF5QixHQUFHO0lBQ2hDLE9BQU8sRUFBRSxDQUFDO0lBQ1YsT0FBTyxFQUFFLENBQUM7Q0FDWCxDQUFDO0FBRUYsTUFBTSwwQkFBMEIsR0FBRztJQUNqQyxPQUFPLEVBQUUsQ0FBQztJQUNWLE9BQU8sRUFBRSxDQUFDO0NBQ1gsQ0FBQztBQUVGLE1BQU0sWUFBWSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBZTVCLE1BQU0sVUFBVSxrQkFBa0IsQ0FBQyxrQkFBdUI7SUFDeEQsSUFBSSxPQUFPLGtCQUFrQixLQUFLLFNBQVMsRUFBRTtRQUMzQyxPQUFPLGtCQUFrQixDQUFDLENBQUMsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLENBQUMsMEJBQTBCLENBQUM7S0FDcEY7SUFDRCxPQUFPO1FBQ0wsR0FBRywwQkFBMEI7UUFDN0IsR0FBRyxrQkFBa0I7S0FDdEIsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLENBQUMsT0FBTyxVQUFVLGFBQWEsQ0FBQyxTQUEyQixFQUFFO0lBQ2pFLE1BQU0sRUFBRSxVQUFVLEdBQUcsQ0FBQyxFQUFFLG9CQUFvQixHQUFHLEVBQUUsRUFBRSxrQkFBa0IsR0FBRyxFQUFFLEVBQUUsa0JBQWtCLEdBQUcsSUFBSSxFQUFFLEdBQUcsTUFBTSxDQUFDO0lBQ2pILE1BQU0sWUFBWSxHQUFRO1FBQ3hCLElBQUksRUFBRTtZQUNKLE1BQU0sRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUM7WUFDcEIsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ2hCO1FBQ0QsS0FBSyxFQUFFO1lBQ0wsTUFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQztZQUNwQixNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ2Y7UUFDRCxHQUFHLEVBQUU7WUFDSCxNQUFNLEVBQUUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO1lBQ3BCLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNoQjtRQUNELE1BQU0sRUFBRTtZQUNOLE1BQU0sRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUM7WUFDcEIsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNmO1FBQ0QsT0FBTyxFQUFFO1lBQ1AsTUFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQztZQUNwQixNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsb0JBQW9CLEdBQUcsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDbkQ7UUFDRCxPQUFPLEVBQUU7WUFDUCxNQUFNLEVBQUUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO1lBQ3BCLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxrQkFBa0IsR0FBRyxVQUFVLENBQUMsQ0FBQztTQUNqRDtRQUNELFFBQVEsRUFBRTtZQUNSLE1BQU0sRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUM7WUFDcEIsTUFBTSxFQUFFLENBQUMsb0JBQW9CLEdBQUcsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ2hEO1FBQ0QsUUFBUSxFQUFFO1lBQ1IsTUFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQztZQUNwQixNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLGtCQUFrQixHQUFHLFVBQVUsQ0FBQyxDQUFDO1NBQ2hEO1FBQ0QsV0FBVyxFQUFFO1lBQ1gsTUFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQztZQUNwQixNQUFNLEVBQUUsQ0FBQyxvQkFBb0IsR0FBRyxVQUFVLEVBQUUsQ0FBQyxDQUFDO1NBQy9DO1FBQ0QsV0FBVyxFQUFFO1lBQ1gsTUFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQztZQUNwQixNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsa0JBQWtCLEdBQUcsVUFBVSxDQUFDO1NBQzdDO1FBQ0QsVUFBVSxFQUFFO1lBQ1YsTUFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQztZQUNwQixNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsb0JBQW9CLEdBQUcsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ2xEO1FBQ0QsVUFBVSxFQUFFO1lBQ1YsTUFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQztZQUNwQixNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxrQkFBa0IsR0FBRyxVQUFVLENBQUM7U0FDOUM7S0FDRixDQUFDO0lBQ0YsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDdEMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUM7WUFDOUMsR0FBRyxZQUFZLENBQUMsR0FBRyxDQUFDO1lBQ3BCLFFBQVEsRUFBRSxrQkFBa0IsQ0FBQyxrQkFBa0IsQ0FBQztZQUNoRCxZQUFZO1NBQ2IsQ0FBQyxDQUFDLENBQUM7WUFDRixHQUFHLFlBQVksQ0FBQyxHQUFHLENBQUM7WUFDcEIsUUFBUSxFQUFFLGtCQUFrQixDQUFDLGtCQUFrQixDQUFDO1NBQ2pELENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztJQUNILE9BQU8sWUFBWSxDQUFDO0FBQ3RCLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvdG9vbHRpcC9wbGFjZW1lbnRzLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcmNQbGFjZW1lbnRzIGZyb20gJy4uL3JjLWNvbXBvbmVudHMvdG9vbHRpcC9wbGFjZW1lbnRzJztcblxuY29uc3QgYXV0b0FkanVzdE92ZXJmbG93RW5hYmxlZCA9IHtcbiAgYWRqdXN0WDogMSxcbiAgYWRqdXN0WTogMSxcbn07XG5cbmNvbnN0IGF1dG9BZGp1c3RPdmVyZmxvd0Rpc2FibGVkID0ge1xuICBhZGp1c3RYOiAwLFxuICBhZGp1c3RZOiAwLFxufTtcblxuY29uc3QgdGFyZ2V0T2Zmc2V0ID0gWzAsIDBdO1xuXG5leHBvcnQgaW50ZXJmYWNlIEFkanVzdE92ZXJmbG93IHtcbiAgYWRqdXN0WD86IDAgfCAxO1xuICBhZGp1c3RZPzogMCB8IDE7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGxhY2VtZW50c0NvbmZpZyB7XG4gIGFycm93V2lkdGg/OiBudW1iZXI7XG4gIGhvcml6b250YWxBcnJvd1NoaWZ0PzogbnVtYmVyO1xuICB2ZXJ0aWNhbEFycm93U2hpZnQ/OiBudW1iZXI7XG4gIGFycm93UG9pbnRBdENlbnRlcj86IGJvb2xlYW47XG4gIGF1dG9BZGp1c3RPdmVyZmxvdz86IGFueTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE92ZXJmbG93T3B0aW9ucyhhdXRvQWRqdXN0T3ZlcmZsb3c6IGFueSkge1xuICBpZiAodHlwZW9mIGF1dG9BZGp1c3RPdmVyZmxvdyA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgcmV0dXJuIGF1dG9BZGp1c3RPdmVyZmxvdyA/IGF1dG9BZGp1c3RPdmVyZmxvd0VuYWJsZWQgOiBhdXRvQWRqdXN0T3ZlcmZsb3dEaXNhYmxlZDtcbiAgfVxuICByZXR1cm4ge1xuICAgIC4uLmF1dG9BZGp1c3RPdmVyZmxvd0Rpc2FibGVkLFxuICAgIC4uLmF1dG9BZGp1c3RPdmVyZmxvdyxcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0UGxhY2VtZW50cyhjb25maWc6IFBsYWNlbWVudHNDb25maWcgPSB7fSkge1xuICBjb25zdCB7IGFycm93V2lkdGggPSA1LCBob3Jpem9udGFsQXJyb3dTaGlmdCA9IDE2LCB2ZXJ0aWNhbEFycm93U2hpZnQgPSAxMiwgYXV0b0FkanVzdE92ZXJmbG93ID0gdHJ1ZSB9ID0gY29uZmlnO1xuICBjb25zdCBwbGFjZW1lbnRNYXA6IGFueSA9IHtcbiAgICBsZWZ0OiB7XG4gICAgICBwb2ludHM6IFsnY3InLCAnY2wnXSxcbiAgICAgIG9mZnNldDogWy00LCAwXSxcbiAgICB9LFxuICAgIHJpZ2h0OiB7XG4gICAgICBwb2ludHM6IFsnY2wnLCAnY3InXSxcbiAgICAgIG9mZnNldDogWzQsIDBdLFxuICAgIH0sXG4gICAgdG9wOiB7XG4gICAgICBwb2ludHM6IFsnYmMnLCAndGMnXSxcbiAgICAgIG9mZnNldDogWzAsIC00XSxcbiAgICB9LFxuICAgIGJvdHRvbToge1xuICAgICAgcG9pbnRzOiBbJ3RjJywgJ2JjJ10sXG4gICAgICBvZmZzZXQ6IFswLCA0XSxcbiAgICB9LFxuICAgIHRvcExlZnQ6IHtcbiAgICAgIHBvaW50czogWydibCcsICd0YyddLFxuICAgICAgb2Zmc2V0OiBbLShob3Jpem9udGFsQXJyb3dTaGlmdCArIGFycm93V2lkdGgpLCAtNF0sXG4gICAgfSxcbiAgICBsZWZ0VG9wOiB7XG4gICAgICBwb2ludHM6IFsndHInLCAnY2wnXSxcbiAgICAgIG9mZnNldDogWy00LCAtKHZlcnRpY2FsQXJyb3dTaGlmdCArIGFycm93V2lkdGgpXSxcbiAgICB9LFxuICAgIHRvcFJpZ2h0OiB7XG4gICAgICBwb2ludHM6IFsnYnInLCAndGMnXSxcbiAgICAgIG9mZnNldDogW2hvcml6b250YWxBcnJvd1NoaWZ0ICsgYXJyb3dXaWR0aCwgLTRdLFxuICAgIH0sXG4gICAgcmlnaHRUb3A6IHtcbiAgICAgIHBvaW50czogWyd0bCcsICdjciddLFxuICAgICAgb2Zmc2V0OiBbNCwgLSh2ZXJ0aWNhbEFycm93U2hpZnQgKyBhcnJvd1dpZHRoKV0sXG4gICAgfSxcbiAgICBib3R0b21SaWdodDoge1xuICAgICAgcG9pbnRzOiBbJ3RyJywgJ2JjJ10sXG4gICAgICBvZmZzZXQ6IFtob3Jpem9udGFsQXJyb3dTaGlmdCArIGFycm93V2lkdGgsIDRdLFxuICAgIH0sXG4gICAgcmlnaHRCb3R0b206IHtcbiAgICAgIHBvaW50czogWydibCcsICdjciddLFxuICAgICAgb2Zmc2V0OiBbNCwgdmVydGljYWxBcnJvd1NoaWZ0ICsgYXJyb3dXaWR0aF0sXG4gICAgfSxcbiAgICBib3R0b21MZWZ0OiB7XG4gICAgICBwb2ludHM6IFsndGwnLCAnYmMnXSxcbiAgICAgIG9mZnNldDogWy0oaG9yaXpvbnRhbEFycm93U2hpZnQgKyBhcnJvd1dpZHRoKSwgNF0sXG4gICAgfSxcbiAgICBsZWZ0Qm90dG9tOiB7XG4gICAgICBwb2ludHM6IFsnYnInLCAnY2wnXSxcbiAgICAgIG9mZnNldDogWy00LCB2ZXJ0aWNhbEFycm93U2hpZnQgKyBhcnJvd1dpZHRoXSxcbiAgICB9LFxuICB9O1xuICBPYmplY3Qua2V5cyhwbGFjZW1lbnRNYXApLmZvckVhY2goa2V5ID0+IHtcbiAgICBwbGFjZW1lbnRNYXBba2V5XSA9IGNvbmZpZy5hcnJvd1BvaW50QXRDZW50ZXIgPyB7XG4gICAgICAuLi5wbGFjZW1lbnRNYXBba2V5XSxcbiAgICAgIG92ZXJmbG93OiBnZXRPdmVyZmxvd09wdGlvbnMoYXV0b0FkanVzdE92ZXJmbG93KSxcbiAgICAgIHRhcmdldE9mZnNldCxcbiAgICB9IDoge1xuICAgICAgLi4ucmNQbGFjZW1lbnRzW2tleV0sXG4gICAgICBvdmVyZmxvdzogZ2V0T3ZlcmZsb3dPcHRpb25zKGF1dG9BZGp1c3RPdmVyZmxvdyksXG4gICAgfTtcbiAgfSk7XG4gIHJldHVybiBwbGFjZW1lbnRNYXA7XG59XG4iXSwidmVyc2lvbiI6M30=