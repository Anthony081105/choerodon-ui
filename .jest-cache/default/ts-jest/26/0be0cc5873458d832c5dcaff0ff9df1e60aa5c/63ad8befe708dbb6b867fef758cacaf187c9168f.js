import { observable, runInAction, toJS } from 'mobx';
import isObject from 'lodash/isObject';
import { categories } from 'choerodon-ui-font';
import { $l } from 'choerodon-ui/pro/lib/locale-context';
import defaultFeedback from 'choerodon-ui/pro/lib/data-set/FeedBack';
import { defaultExcludeUseColonTag } from 'choerodon-ui/pro/lib/form/utils';
const defaultRenderEmpty = (componentName) => {
    switch (componentName) {
        case 'Table':
            return $l('Table', 'empty_data');
        case 'Select':
            return $l('Select', 'no_matching_results');
        default:
    }
};
const defaultButtonProps = { color: "primary" /* primary */, funcType: "flat" /* flat */ };
const defaultSpinProps = { size: "default" /* default */, wrapperClassName: '' };
const globalConfig = observable.map([
    ['prefixCls', 'c7n'],
    ['proPrefixCls', 'c7n-pro'],
    ['iconfontPrefix', 'icon'],
    ['ripple', true],
    ['lookupCache', { maxAge: 1000 * 60 * 10, max: 100 }],
    ['lookupUrl', code => `/common/code/${code}/`],
    ['lookupAxiosMethod', 'post'],
    // [
    //   'lookupBatchAxiosConfig',
    //   codes => ({
    //     url: '/common/batch',
    //     params: codes.reduce((obj, code) => {
    //       obj[code] = code;
    //       return obj;
    //     }, {}),
    //   }),
    // ],
    ['lovDefineUrl', code => `/sys/lov/lov_define?code=${code}`],
    ['lovQueryUrl', code => `/common/lov/dataset/${code}`],
    ['lovTriggerMode', "icon" /* icon */],
    ['dataKey', 'rows'],
    ['totalKey', 'total'],
    ['statusKey', '__status'],
    ['tlsKey', '__tls'],
    [
        'status',
        { ["add" /* add */]: 'add', ["update" /* update */]: 'update', ["delete" /* delete */]: 'delete' },
    ],
    ['labelLayout', "horizontal" /* horizontal */],
    ['queryBar', "normal" /* normal */],
    ['tableBorder', true],
    ['tableHighLightRow', true],
    ['tableSelectedHighLightRow', false],
    ['tableRowHeight', 30],
    ['tableColumnResizable', true],
    ['tableSpinProps', defaultSpinProps],
    ['tableButtonProps', defaultButtonProps],
    ['tableCommandProps', defaultButtonProps],
    ['tableAlwaysShowRowBox', false],
    ['tableUseMouseBatchChoose', false],
    ['tableDefaultRenderer', ''],
    ['modalSectionBorder', true],
    ['modalOkFirst', true],
    ['buttonColor', "default" /* default */],
    ['buttonFuncType', "raised" /* raised */],
    ['feedback', defaultFeedback],
    ['renderEmpty', defaultRenderEmpty],
    ['icons', categories],
    [
        'formatter',
        {
            jsonDate: 'YYYY-MM-DD HH:mm:ss',
            date: 'YYYY-MM-DD',
            dateTime: 'YYYY-MM-DD HH:mm:ss',
            time: 'HH:mm:ss',
            year: 'YYYY',
            month: 'YYYY-MM',
            week: 'GGGG-Wo',
        },
    ],
    ['dropdownMatchSelectWidth', true],
    ['useColon', false],
    ['excludeUseColonTagList', defaultExcludeUseColonTag],
    ['lovTableProps', {}],
]);
export function getConfig(key) {
    // FIXME: observable.map把构建map时传入的key类型和value类型分别做了union，
    // 丢失了一一对应的映射关系，导致函数调用者无法使用union后的返回值类型，因此需要指定本函数返回值为any
    return globalConfig.get(key);
}
export function getPrefixCls(suffixCls, customizePrefixCls) {
    if (customizePrefixCls) {
        return customizePrefixCls;
    }
    return `${getConfig('prefixCls')}-${suffixCls}`;
}
export function getProPrefixCls(suffixCls, customizePrefixCls) {
    if (customizePrefixCls) {
        return customizePrefixCls;
    }
    return `${getConfig('proPrefixCls')}-${suffixCls}`;
}
const mergeProps = ['transport', 'feedback', 'formatter'];
export default function configure(config) {
    runInAction(() => {
        Object.keys(config).forEach((key) => {
            const value = config[key];
            if (mergeProps.includes(key) && isObject(value)) {
                globalConfig.set(key, {
                    ...toJS(globalConfig.get(key)),
                    ...value,
                });
            }
            else {
                globalConfig.set(key, config[key]);
            }
        });
    });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,