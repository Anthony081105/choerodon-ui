export default class TaskRunner {
    constructor(fn) {
        this.callbacks = [];
        if (fn) {
            this.fn = fn;
        }
    }
    async delay(delay, fn, callback) {
        return this.start(true, delay, fn, callback);
    }
    async run(interval, fn, callback) {
        return this.start(false, interval, fn, callback);
    }
    async start(once, interval, fn, callback) {
        this.cancel();
        if (fn) {
            this.fn = fn;
        }
        if (typeof callback === 'function') {
            this.callbacks.push(callback);
        }
        if (this.fn) {
            return new Promise(resolve => {
                this.id = setInterval(() => {
                    if (once) {
                        this.cancel();
                    }
                    resolve(this.fn());
                    this.callbacks.forEach(cb => cb());
                    this.callbacks = [];
                }, interval);
            });
        }
        return Promise.reject(new Error('no caller'));
    }
    cancel() {
        if (this.id) {
            clearInterval(this.id);
            delete this.id;
        }
        return this;
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvX3V0aWwvVGFza1J1bm5lci50c3giLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLE9BQU8sT0FBTyxVQUFVO0lBTzdCLFlBQVksRUFBYTtRQUZ6QixjQUFTLEdBQWtCLEVBQUUsQ0FBQztRQUc1QixJQUFJLEVBQUUsRUFBRTtZQUNOLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1NBQ2Q7SUFDSCxDQUFDO0lBRUQsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFhLEVBQUUsRUFBYSxFQUFFLFFBQW9CO1FBQzVELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRUQsS0FBSyxDQUFDLEdBQUcsQ0FBQyxRQUFnQixFQUFFLEVBQWEsRUFBRSxRQUFvQjtRQUM3RCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVELEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBYSxFQUFFLFFBQWdCLEVBQUUsRUFBYSxFQUFFLFFBQW9CO1FBQzlFLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNkLElBQUksRUFBRSxFQUFFO1lBQ04sSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7U0FDZDtRQUNELElBQUksT0FBTyxRQUFRLEtBQUssVUFBVSxFQUFFO1lBQ2xDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQy9CO1FBQ0QsSUFBSSxJQUFJLENBQUMsRUFBRSxFQUFFO1lBQ1gsT0FBTyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtnQkFDM0IsSUFBSSxDQUFDLEVBQUUsR0FBRyxXQUFXLENBQUMsR0FBRyxFQUFFO29CQUN6QixJQUFJLElBQUksRUFBRTt3QkFDUixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7cUJBQ2Y7b0JBQ0QsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO29CQUNuQixJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7b0JBQ25DLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO2dCQUN0QixDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDZixDQUFDLENBQUMsQ0FBQztTQUNKO1FBQ0QsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVELE1BQU07UUFDSixJQUFJLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDWCxhQUFhLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3ZCLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQztTQUNoQjtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztDQUNGIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9odWlodWF3ay9Eb2N1bWVudHMvb3B0L2Nob2Vyb2Rvbi11aS9jb21wb25lbnRzL191dGlsL1Rhc2tSdW5uZXIudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIFRhc2tSdW5uZXIge1xuICBpZDogTm9kZUpTLlRpbWVvdXQ7XG5cbiAgZm46IEZ1bmN0aW9uO1xuXG4gIGNhbGxiYWNrczogKCgpID0+IGFueSlbXSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKGZuPzogRnVuY3Rpb24pIHtcbiAgICBpZiAoZm4pIHtcbiAgICAgIHRoaXMuZm4gPSBmbjtcbiAgICB9XG4gIH1cblxuICBhc3luYyBkZWxheShkZWxheTogbnVtYmVyLCBmbj86IEZ1bmN0aW9uLCBjYWxsYmFjaz86ICgpID0+IGFueSkge1xuICAgIHJldHVybiB0aGlzLnN0YXJ0KHRydWUsIGRlbGF5LCBmbiwgY2FsbGJhY2spO1xuICB9XG5cbiAgYXN5bmMgcnVuKGludGVydmFsOiBudW1iZXIsIGZuPzogRnVuY3Rpb24sIGNhbGxiYWNrPzogKCkgPT4gYW55KSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhcnQoZmFsc2UsIGludGVydmFsLCBmbiwgY2FsbGJhY2spO1xuICB9XG5cbiAgYXN5bmMgc3RhcnQob25jZTogYm9vbGVhbiwgaW50ZXJ2YWw6IG51bWJlciwgZm4/OiBGdW5jdGlvbiwgY2FsbGJhY2s/OiAoKSA9PiBhbnkpIHtcbiAgICB0aGlzLmNhbmNlbCgpO1xuICAgIGlmIChmbikge1xuICAgICAgdGhpcy5mbiA9IGZuO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLmNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuZm4pIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgdGhpcy5pZCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgICBpZiAob25jZSkge1xuICAgICAgICAgICAgdGhpcy5jYW5jZWwoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzb2x2ZSh0aGlzLmZuKCkpO1xuICAgICAgICAgIHRoaXMuY2FsbGJhY2tzLmZvckVhY2goY2IgPT4gY2IoKSk7XG4gICAgICAgICAgdGhpcy5jYWxsYmFja3MgPSBbXTtcbiAgICAgICAgfSwgaW50ZXJ2YWwpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ25vIGNhbGxlcicpKTtcbiAgfVxuXG4gIGNhbmNlbCgpIHtcbiAgICBpZiAodGhpcy5pZCkge1xuICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmlkKTtcbiAgICAgIGRlbGV0ZSB0aGlzLmlkO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9