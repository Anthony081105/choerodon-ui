import { Children, isValidElement } from 'react';
export function toArrayChildren(children) {
    const ret = [];
    Children.forEach(children, child => {
        if (isValidElement(child)) {
            ret.push(child);
        }
    });
    return ret;
}
export function findChildInChildrenByKey(children, key) {
    if (children) {
        return children.find(child => child && child.key === key);
    }
}
export function findShownChildInChildrenByKey(children, key, hiddenProp) {
    let ret;
    if (children) {
        children.forEach(child => {
            if (child && child.key === key && !child.props[hiddenProp]) {
                if (ret) {
                    throw new Error('two child with same key for animate children');
                }
                ret = child;
            }
        });
    }
    return ret;
}
// export function findHiddenChildInChildrenByKey(children, key, showProp):boolean {
//   let found = false;
//   if (children) {
//     children.forEach(function (child) {
//       if (found) {
//         return;
//       }
//       found = child && child.key === key && !child.props[showProp];
//     });
//   }
//   return found;
// }
export function isSameChildren(c1, c2, hiddenProp) {
    let same = c1.length === c2.length;
    if (same) {
        c1.forEach((child, index) => {
            const child2 = c2[index];
            if (child && child2) {
                if ((child && !child2) || (!child && child2)) {
                    same = false;
                }
                else if (child.key !== child2.key) {
                    same = false;
                }
                else if (hiddenProp && child.props[hiddenProp] !== child2.props[hiddenProp]) {
                    same = false;
                }
            }
        });
    }
    return same;
}
export function mergeChildren(prev, next) {
    let ret = [];
    const nextChildrenPending = {};
    let pendingChildren = [];
    prev.forEach(child => {
        if (child && child.key && findChildInChildrenByKey(next, child.key)) {
            if (pendingChildren.length) {
                nextChildrenPending[child.key] = pendingChildren;
                pendingChildren = [];
            }
        }
        else {
            pendingChildren.push(child);
        }
    });
    next.forEach(child => {
        if (child && child.key && {}.hasOwnProperty.call(nextChildrenPending, child.key)) {
            ret = ret.concat(nextChildrenPending[child.key]);
        }
        ret.push(child);
    });
    return ret.concat(pendingChildren);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvYW5pbWF0ZS9DaGlsZHJlblV0aWxzLnRzeCIsIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLGNBQWMsRUFBZ0MsTUFBTSxPQUFPLENBQUM7QUFFL0UsTUFBTSxVQUFVLGVBQWUsQ0FBQyxRQUFtQjtJQUNqRCxNQUFNLEdBQUcsR0FBd0IsRUFBRSxDQUFDO0lBQ3BDLFFBQVEsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxFQUFFO1FBQ2pDLElBQUksY0FBYyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3pCLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDakI7SUFDSCxDQUFDLENBQUMsQ0FBQztJQUNILE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQztBQUVELE1BQU0sVUFBVSx3QkFBd0IsQ0FDdEMsUUFBNkIsRUFDN0IsR0FBZTtJQUVmLElBQUksUUFBUSxFQUFFO1FBQ1osT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLENBQUM7S0FDM0Q7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLDZCQUE2QixDQUMzQyxRQUE2QixFQUM3QixHQUFlLEVBQ2YsVUFBa0I7SUFFbEIsSUFBSSxHQUFrQyxDQUFDO0lBQ3ZDLElBQUksUUFBUSxFQUFFO1FBQ1osUUFBUSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUN2QixJQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLEVBQUU7Z0JBQzFELElBQUksR0FBRyxFQUFFO29CQUNQLE1BQU0sSUFBSSxLQUFLLENBQUMsOENBQThDLENBQUMsQ0FBQztpQkFDakU7Z0JBQ0QsR0FBRyxHQUFHLEtBQUssQ0FBQzthQUNiO1FBQ0gsQ0FBQyxDQUFDLENBQUM7S0FDSjtJQUNELE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQztBQUVELG9GQUFvRjtBQUNwRix1QkFBdUI7QUFDdkIsb0JBQW9CO0FBQ3BCLDBDQUEwQztBQUMxQyxxQkFBcUI7QUFDckIsa0JBQWtCO0FBQ2xCLFVBQVU7QUFDVixzRUFBc0U7QUFDdEUsVUFBVTtBQUNWLE1BQU07QUFDTixrQkFBa0I7QUFDbEIsSUFBSTtBQUVKLE1BQU0sVUFBVSxjQUFjLENBQzVCLEVBQXVCLEVBQ3ZCLEVBQXVCLEVBQ3ZCLFVBQW1CO0lBRW5CLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQyxNQUFNLEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQztJQUNuQyxJQUFJLElBQUksRUFBRTtRQUNSLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDMUIsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3pCLElBQUksS0FBSyxJQUFJLE1BQU0sRUFBRTtnQkFDbkIsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLElBQUksTUFBTSxDQUFDLEVBQUU7b0JBQzVDLElBQUksR0FBRyxLQUFLLENBQUM7aUJBQ2Q7cUJBQU0sSUFBSSxLQUFLLENBQUMsR0FBRyxLQUFLLE1BQU0sQ0FBQyxHQUFHLEVBQUU7b0JBQ25DLElBQUksR0FBRyxLQUFLLENBQUM7aUJBQ2Q7cUJBQU0sSUFBSSxVQUFVLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsS0FBSyxNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFFO29CQUM3RSxJQUFJLEdBQUcsS0FBSyxDQUFDO2lCQUNkO2FBQ0Y7UUFDSCxDQUFDLENBQUMsQ0FBQztLQUNKO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBRUQsTUFBTSxVQUFVLGFBQWEsQ0FDM0IsSUFBeUIsRUFDekIsSUFBeUI7SUFFekIsSUFBSSxHQUFHLEdBQXdCLEVBQUUsQ0FBQztJQUNsQyxNQUFNLG1CQUFtQixHQUEyQyxFQUFFLENBQUM7SUFDdkUsSUFBSSxlQUFlLEdBQXdCLEVBQUUsQ0FBQztJQUM5QyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ25CLElBQUksS0FBSyxJQUFJLEtBQUssQ0FBQyxHQUFHLElBQUksd0JBQXdCLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNuRSxJQUFJLGVBQWUsQ0FBQyxNQUFNLEVBQUU7Z0JBQzFCLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxlQUFlLENBQUM7Z0JBQ2pELGVBQWUsR0FBRyxFQUFFLENBQUM7YUFDdEI7U0FDRjthQUFNO1lBQ0wsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUM3QjtJQUNILENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUNuQixJQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNoRixHQUFHLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUNsRDtRQUNELEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbEIsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDckMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvaHVpaHVhd2svRG9jdW1lbnRzL29wdC9jaG9lcm9kb24tdWkvY29tcG9uZW50cy9hbmltYXRlL0NoaWxkcmVuVXRpbHMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoaWxkcmVuLCBpc1ZhbGlkRWxlbWVudCwgS2V5LCBSZWFjdEVsZW1lbnQsIFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IGZ1bmN0aW9uIHRvQXJyYXlDaGlsZHJlbihjaGlsZHJlbjogUmVhY3ROb2RlKTogUmVhY3RFbGVtZW50PGFueT5bXSB7XG4gIGNvbnN0IHJldDogUmVhY3RFbGVtZW50PGFueT5bXSA9IFtdO1xuICBDaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBjaGlsZCA9PiB7XG4gICAgaWYgKGlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgcmV0LnB1c2goY2hpbGQpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kQ2hpbGRJbkNoaWxkcmVuQnlLZXkoXG4gIGNoaWxkcmVuOiBSZWFjdEVsZW1lbnQ8YW55PltdLFxuICBrZXk6IEtleSB8IG51bGwsXG4pOiBSZWFjdEVsZW1lbnQ8YW55PiB8IHVuZGVmaW5lZCB7XG4gIGlmIChjaGlsZHJlbikge1xuICAgIHJldHVybiBjaGlsZHJlbi5maW5kKGNoaWxkID0+IGNoaWxkICYmIGNoaWxkLmtleSA9PT0ga2V5KTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZmluZFNob3duQ2hpbGRJbkNoaWxkcmVuQnlLZXkoXG4gIGNoaWxkcmVuOiBSZWFjdEVsZW1lbnQ8YW55PltdLFxuICBrZXk6IEtleSB8IG51bGwsXG4gIGhpZGRlblByb3A6IHN0cmluZyxcbik6IFJlYWN0RWxlbWVudDxhbnk+IHwgdW5kZWZpbmVkIHtcbiAgbGV0IHJldDogUmVhY3RFbGVtZW50PGFueT4gfCB1bmRlZmluZWQ7XG4gIGlmIChjaGlsZHJlbikge1xuICAgIGNoaWxkcmVuLmZvckVhY2goY2hpbGQgPT4ge1xuICAgICAgaWYgKGNoaWxkICYmIGNoaWxkLmtleSA9PT0ga2V5ICYmICFjaGlsZC5wcm9wc1toaWRkZW5Qcm9wXSkge1xuICAgICAgICBpZiAocmV0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd0d28gY2hpbGQgd2l0aCBzYW1lIGtleSBmb3IgYW5pbWF0ZSBjaGlsZHJlbicpO1xuICAgICAgICB9XG4gICAgICAgIHJldCA9IGNoaWxkO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbi8vIGV4cG9ydCBmdW5jdGlvbiBmaW5kSGlkZGVuQ2hpbGRJbkNoaWxkcmVuQnlLZXkoY2hpbGRyZW4sIGtleSwgc2hvd1Byb3ApOmJvb2xlYW4ge1xuLy8gICBsZXQgZm91bmQgPSBmYWxzZTtcbi8vICAgaWYgKGNoaWxkcmVuKSB7XG4vLyAgICAgY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbi8vICAgICAgIGlmIChmb3VuZCkge1xuLy8gICAgICAgICByZXR1cm47XG4vLyAgICAgICB9XG4vLyAgICAgICBmb3VuZCA9IGNoaWxkICYmIGNoaWxkLmtleSA9PT0ga2V5ICYmICFjaGlsZC5wcm9wc1tzaG93UHJvcF07XG4vLyAgICAgfSk7XG4vLyAgIH1cbi8vICAgcmV0dXJuIGZvdW5kO1xuLy8gfVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTYW1lQ2hpbGRyZW4oXG4gIGMxOiBSZWFjdEVsZW1lbnQ8YW55PltdLFxuICBjMjogUmVhY3RFbGVtZW50PGFueT5bXSxcbiAgaGlkZGVuUHJvcD86IHN0cmluZyxcbik6IGJvb2xlYW4ge1xuICBsZXQgc2FtZSA9IGMxLmxlbmd0aCA9PT0gYzIubGVuZ3RoO1xuICBpZiAoc2FtZSkge1xuICAgIGMxLmZvckVhY2goKGNoaWxkLCBpbmRleCkgPT4ge1xuICAgICAgY29uc3QgY2hpbGQyID0gYzJbaW5kZXhdO1xuICAgICAgaWYgKGNoaWxkICYmIGNoaWxkMikge1xuICAgICAgICBpZiAoKGNoaWxkICYmICFjaGlsZDIpIHx8ICghY2hpbGQgJiYgY2hpbGQyKSkge1xuICAgICAgICAgIHNhbWUgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmIChjaGlsZC5rZXkgIT09IGNoaWxkMi5rZXkpIHtcbiAgICAgICAgICBzYW1lID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSBpZiAoaGlkZGVuUHJvcCAmJiBjaGlsZC5wcm9wc1toaWRkZW5Qcm9wXSAhPT0gY2hpbGQyLnByb3BzW2hpZGRlblByb3BdKSB7XG4gICAgICAgICAgc2FtZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHNhbWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZUNoaWxkcmVuKFxuICBwcmV2OiBSZWFjdEVsZW1lbnQ8YW55PltdLFxuICBuZXh0OiBSZWFjdEVsZW1lbnQ8YW55PltdLFxuKTogUmVhY3RFbGVtZW50PGFueT5bXSB7XG4gIGxldCByZXQ6IFJlYWN0RWxlbWVudDxhbnk+W10gPSBbXTtcbiAgY29uc3QgbmV4dENoaWxkcmVuUGVuZGluZzogeyBba2V5OiBzdHJpbmddOiBSZWFjdEVsZW1lbnQ8YW55PltdIH0gPSB7fTtcbiAgbGV0IHBlbmRpbmdDaGlsZHJlbjogUmVhY3RFbGVtZW50PGFueT5bXSA9IFtdO1xuICBwcmV2LmZvckVhY2goY2hpbGQgPT4ge1xuICAgIGlmIChjaGlsZCAmJiBjaGlsZC5rZXkgJiYgZmluZENoaWxkSW5DaGlsZHJlbkJ5S2V5KG5leHQsIGNoaWxkLmtleSkpIHtcbiAgICAgIGlmIChwZW5kaW5nQ2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgIG5leHRDaGlsZHJlblBlbmRpbmdbY2hpbGQua2V5XSA9IHBlbmRpbmdDaGlsZHJlbjtcbiAgICAgICAgcGVuZGluZ0NoaWxkcmVuID0gW107XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlbmRpbmdDaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICB9XG4gIH0pO1xuXG4gIG5leHQuZm9yRWFjaChjaGlsZCA9PiB7XG4gICAgaWYgKGNoaWxkICYmIGNoaWxkLmtleSAmJiB7fS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG5leHRDaGlsZHJlblBlbmRpbmcsIGNoaWxkLmtleSkpIHtcbiAgICAgIHJldCA9IHJldC5jb25jYXQobmV4dENoaWxkcmVuUGVuZGluZ1tjaGlsZC5rZXldKTtcbiAgICB9XG4gICAgcmV0LnB1c2goY2hpbGQpO1xuICB9KTtcblxuICByZXR1cm4gcmV0LmNvbmNhdChwZW5kaW5nQ2hpbGRyZW4pO1xufVxuIl0sInZlcnNpb24iOjN9