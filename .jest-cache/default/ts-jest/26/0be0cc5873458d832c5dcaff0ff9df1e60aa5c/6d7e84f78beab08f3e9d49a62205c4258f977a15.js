import React, { Component } from 'react';
import classNames from 'classnames';
import uniqBy from 'lodash/uniqBy';
import LocaleReceiver from '../locale-provider/LocaleReceiver';
import defaultLocale from '../locale-provider/default';
import UploadList from './UploadList';
import { fileToObject, genPercentAdd, getFileItem, removeFileItem, T } from './utils';
import RcUpload from '../rc-components/upload';
import { getPrefixCls } from '../configure';
export default class Upload extends Component {
    constructor(props) {
        super(props);
        this.onStart = (file) => {
            const { fileList } = this.state;
            const nextFileList = [...fileList];
            const targetItem = fileToObject(file);
            targetItem.status = 'uploading';
            nextFileList.push(targetItem);
            this.onChange({
                file: targetItem,
                fileList: nextFileList,
            });
            // fix ie progress
            if (!window.FormData) {
                this.autoUpdateProgress(0, targetItem);
            }
            const { onStart } = this.props;
            if (onStart) {
                onStart(file);
            }
        };
        this.onSuccess = (response, file) => {
            this.clearProgressTimer();
            try {
                if (typeof response === 'string') {
                    response = JSON.parse(response);
                }
            }
            catch (e) {
                /* do nothing */
            }
            const { fileList } = this.state;
            const targetItem = getFileItem(file, fileList);
            // removed
            if (targetItem) {
                targetItem.status = 'done';
                targetItem.response = response;
                this.onChange({
                    file: { ...targetItem },
                    fileList,
                });
            }
            const { onSuccess } = this.props;
            if (onSuccess) {
                onSuccess(response, file);
            }
        };
        this.onProgress = (e, file) => {
            const { fileList } = this.state;
            const targetItem = getFileItem(file, fileList);
            // removed
            if (targetItem) {
                targetItem.percent = e.percent;
                this.onChange({
                    event: e,
                    file: { ...targetItem },
                    fileList,
                });
            }
            const { onProgress } = this.props;
            if (onProgress) {
                onProgress(e, file);
            }
        };
        this.onError = (error, response, file) => {
            this.clearProgressTimer();
            const { fileList } = this.state;
            const targetItem = getFileItem(file, fileList);
            // removed
            if (!targetItem) {
                return;
            }
            targetItem.error = error;
            targetItem.response = response;
            targetItem.status = 'error';
            this.onChange({
                file: { ...targetItem },
                fileList,
            });
            const { onError } = this.props;
            if (onError) {
                onError(error, response, file);
            }
        };
        this.handleManualRemove = (file) => {
            this.upload.abort(file);
            file.status = 'removed'; // eslint-disable-line
            this.handleRemove(file);
        };
        this.onChange = (info) => {
            if (!('fileList' in this.props)) {
                this.setState({ fileList: info.fileList });
            }
            const { onChange } = this.props;
            if (onChange) {
                onChange(info);
            }
        };
        this.onFileDrop = (e) => {
            this.setState({
                dragState: e.type,
            });
        };
        this.beforeUpload = (file, uploadFiles) => {
            const { beforeUpload } = this.props;
            if (beforeUpload) {
                const result = beforeUpload(file, uploadFiles);
                if (result === false) {
                    const { fileList } = this.state;
                    this.onChange({
                        file,
                        fileList: uniqBy(uploadFiles.concat(fileList), (item) => item.uid),
                    });
                    return false;
                }
                if (result && result.then) {
                    return result;
                }
            }
            return true;
        };
        this.saveUpload = (node) => {
            this.upload = node;
        };
        this.renderUploadList = (uploadLocale) => {
            const { showUploadList, listType, onPreview, locale } = this.props;
            const { fileList } = this.state;
            const { showRemoveIcon, showPreviewIcon } = showUploadList;
            return (React.createElement(UploadList, { listType: listType, items: fileList, onPreview: onPreview, onRemove: this.handleManualRemove, showRemoveIcon: showRemoveIcon, showPreviewIcon: showPreviewIcon, locale: { ...uploadLocale, ...locale } }));
        };
        this.state = {
            fileList: props.fileList || props.defaultFileList || [],
            dragState: 'drop',
        };
    }
    componentWillUnmount() {
        this.clearProgressTimer();
    }
    autoUpdateProgress(_, file) {
        const getPercent = genPercentAdd();
        let curPercent = 0;
        this.clearProgressTimer();
        this.progressTimer = setInterval(() => {
            curPercent = getPercent(curPercent);
            this.onProgress({
                percent: curPercent,
            }, file);
        }, 200);
    }
    handleRemove(file) {
        const { onRemove } = this.props;
        Promise.resolve(typeof onRemove === 'function' ? onRemove(file) : onRemove).then(ret => {
            // Prevent removing file
            if (ret === false) {
                return;
            }
            const { fileList } = this.state;
            const removedFileList = removeFileItem(file, fileList);
            if (removedFileList) {
                this.onChange({
                    file,
                    fileList: removedFileList,
                });
            }
        });
    }
    componentWillReceiveProps(nextProps) {
        if ('fileList' in nextProps) {
            this.setState({
                fileList: nextProps.fileList || [],
            });
        }
    }
    clearProgressTimer() {
        clearInterval(this.progressTimer);
    }
    render() {
        const { prefixCls: customizePrefixCls, className, showUploadList, listType, type, disabled, children, } = this.props;
        const { fileList, dragState } = this.state;
        const prefixCls = getPrefixCls('upload', customizePrefixCls);
        const rcUploadProps = {
            ...this.props,
            onStart: this.onStart,
            onError: this.onError,
            onProgress: this.onProgress,
            onSuccess: this.onSuccess,
            beforeUpload: this.beforeUpload,
            prefixCls,
        };
        delete rcUploadProps.className;
        const uploadList = showUploadList ? (React.createElement(LocaleReceiver, { componentName: "Upload", defaultLocale: defaultLocale.Upload }, this.renderUploadList)) : null;
        if (type === 'drag') {
            const dragCls = classNames(prefixCls, {
                [`${prefixCls}-drag`]: true,
                [`${prefixCls}-drag-uploading`]: fileList.some(file => file.status === 'uploading'),
                [`${prefixCls}-drag-hover`]: dragState === 'dragover',
                [`${prefixCls}-disabled`]: disabled,
            });
            return (React.createElement("span", { className: className },
                React.createElement("div", { className: dragCls, onDrop: this.onFileDrop, onDragOver: this.onFileDrop, onDragLeave: this.onFileDrop },
                    React.createElement(RcUpload, Object.assign({}, rcUploadProps, { ref: this.saveUpload, className: `${prefixCls}-btn` }),
                        React.createElement("div", { className: `${prefixCls}-drag-container` }, children))),
                uploadList));
        }
        const uploadButtonCls = classNames(prefixCls, {
            [`${prefixCls}-select`]: true,
            [`${prefixCls}-select-${listType}`]: true,
            [`${prefixCls}-disabled`]: disabled,
        });
        const uploadButton = (React.createElement("div", { className: uploadButtonCls, style: { display: children ? '' : 'none' } },
            React.createElement(RcUpload, Object.assign({}, rcUploadProps, { ref: this.saveUpload }))));
        if (listType === 'picture-card') {
            return (React.createElement("span", { className: className },
                uploadList,
                uploadButton));
        }
        return (React.createElement("span", { className: className },
            uploadButton,
            uploadList));
    }
}
Upload.displayName = 'Upload';
Upload.defaultProps = {
    type: 'select',
    multiple: false,
    action: '',
    data: {},
    accept: '',
    beforeUpload: T,
    showUploadList: true,
    listType: 'text',
    className: '',
    disabled: false,
    supportServerRender: true,
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,