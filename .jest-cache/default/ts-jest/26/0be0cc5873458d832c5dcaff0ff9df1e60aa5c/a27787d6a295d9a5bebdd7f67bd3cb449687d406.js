import { cloneElement, Component, isValidElement } from 'react';
import { findDOMNode } from 'react-dom';
import omit from 'lodash/omit';
import PropTypes from 'prop-types';
import cssAnimate, { isCssAnimationSupported } from 'css-animation';
import animUtil from './util';
const transitionMap = {
    enter: 'transitionEnter',
    appear: 'transitionAppear',
    leave: 'transitionLeave',
};
export default class AnimateChild extends Component {
    componentWillUnmount() {
        this.stop();
    }
    componentWillEnter(done) {
        if (animUtil.isEnterSupported(this.props)) {
            this.transition('enter', done);
        }
        else {
            done(this);
        }
    }
    componentWillAppear(done) {
        if (animUtil.isAppearSupported(this.props)) {
            this.transition('appear', done);
        }
        else {
            done(this);
        }
    }
    componentWillLeave(done) {
        if (animUtil.isLeaveSupported(this.props)) {
            this.transition('leave', done);
        }
        else {
            done(this);
        }
    }
    transition(animationType, finishCallback) {
        const node = findDOMNode(this);
        if (node) {
            const { props } = this;
            const { transitionName, animation = {} } = props;
            const nameIsObj = typeof transitionName === 'object';
            this.stop();
            const end = () => {
                this.stopper = null;
                finishCallback(this);
            };
            if ((isCssAnimationSupported || !animation[animationType]) &&
                transitionName &&
                props[transitionMap[animationType]]) {
                const name = nameIsObj
                    ? transitionName[animationType]
                    : `${transitionName}-${animationType}`;
                let activeName = `${name}-active`;
                if (nameIsObj && transitionName[`${animationType}Active`]) {
                    activeName = transitionName[`${animationType}Active`];
                }
                this.stopper = cssAnimate(node, {
                    name,
                    active: activeName,
                }, end);
            }
            else {
                this.stopper = animation[animationType](node, end);
            }
        }
    }
    stop() {
        const { stopper } = this;
        if (stopper) {
            this.stopper = null;
            stopper.stop();
        }
    }
    render() {
        const { children, ...otherProps } = this.props;
        if (isValidElement(children)) {
            const props = omit(otherProps, [
                'animation',
                'transitionName',
                'transitionEnter',
                'transitionAppear',
                'transitionLeave',
            ]);
            const { style } = children.props;
            return cloneElement(children, { ...props, style: { ...props.style, ...style } });
        }
        return children;
    }
}
AnimateChild.displayName = 'AnimateChild';
AnimateChild.propTypes = {
    children: PropTypes.any,
    transitionName: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),
    animation: PropTypes.any,
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvYW5pbWF0ZS9BbmltYXRlQ2hpbGQudHN4IiwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFpQixjQUFjLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDL0UsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLElBQUksTUFBTSxhQUFhLENBQUM7QUFDL0IsT0FBTyxTQUFTLE1BQU0sWUFBWSxDQUFDO0FBQ25DLE9BQU8sVUFBVSxFQUFFLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDcEUsT0FBTyxRQUFRLE1BQU0sUUFBUSxDQUFDO0FBRTlCLE1BQU0sYUFBYSxHQUFHO0lBQ3BCLEtBQUssRUFBRSxpQkFBaUI7SUFDeEIsTUFBTSxFQUFFLGtCQUFrQjtJQUMxQixLQUFLLEVBQUUsaUJBQWlCO0NBQ3pCLENBQUM7QUFRRixNQUFNLENBQUMsT0FBTyxPQUFPLFlBQWEsU0FBUSxTQUFpQztJQVd6RSxvQkFBb0I7UUFDbEIsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUVELGtCQUFrQixDQUFDLElBQW1DO1FBQ3BELElBQUksUUFBUSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUN6QyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztTQUNoQzthQUFNO1lBQ0wsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ1o7SUFDSCxDQUFDO0lBRUQsbUJBQW1CLENBQUMsSUFBbUM7UUFDckQsSUFBSSxRQUFRLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzFDLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ2pDO2FBQU07WUFDTCxJQUFJLENBQUMsSUFBSSxDQUFD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LHdCQUFXLEdBQUcsY0FBYyxDQUFDO0FBRTdCLHNCQUFTLEdBQUc7SUFDakIsUUFBUSxFQUFFLFNBQVMsQ0FBQyxHQUFHO0lBQ3ZCLGNBQWMsRUFBRSxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDekUsU0FBUyxFQUFFLFNBQVMsQ0FBQyxHQUFHO0NBQ3pCLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvYW5pbWF0ZS9BbmltYXRlQ2hpbGQudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNsb25lRWxlbWVudCwgQ29tcG9uZW50LCBDU1NQcm9wZXJ0aWVzLCBpc1ZhbGlkRWxlbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGZpbmRET01Ob2RlIH0gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBvbWl0IGZyb20gJ2xvZGFzaC9vbWl0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY3NzQW5pbWF0ZSwgeyBpc0Nzc0FuaW1hdGlvblN1cHBvcnRlZCB9IGZyb20gJ2Nzcy1hbmltYXRpb24nO1xuaW1wb3J0IGFuaW1VdGlsIGZyb20gJy4vdXRpbCc7XG5cbmNvbnN0IHRyYW5zaXRpb25NYXAgPSB7XG4gIGVudGVyOiAndHJhbnNpdGlvbkVudGVyJyxcbiAgYXBwZWFyOiAndHJhbnNpdGlvbkFwcGVhcicsXG4gIGxlYXZlOiAndHJhbnNpdGlvbkxlYXZlJyxcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgQW5pbWF0ZUNoaWxkUHJvcHMge1xuICB0cmFuc2l0aW9uTmFtZT86IHN0cmluZyB8IG9iamVjdDtcbiAgYW5pbWF0aW9uPzogeyBba2V5OiBzdHJpbmddOiAobm9kZTogRWxlbWVudCB8IFRleHQsIGVuZDogKCkgPT4gdm9pZCkgPT4gdm9pZCB9O1xuICBzdHlsZT86IENTU1Byb3BlcnRpZXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFuaW1hdGVDaGlsZCBleHRlbmRzIENvbXBvbmVudDxBbmltYXRlQ2hpbGRQcm9wcywgYW55PiB7XG4gIHN0YXRpYyBkaXNwbGF5TmFtZSA9ICdBbmltYXRlQ2hpbGQnO1xuXG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5hbnksXG4gICAgdHJhbnNpdGlvbk5hbWU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgICBhbmltYXRpb246IFByb3BUeXBlcy5hbnksXG4gIH07XG5cbiAgc3RvcHBlcjtcblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLnN0b3AoKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxFbnRlcihkb25lOiAoY2hpbGQ6IEFuaW1hdGVDaGlsZCkgPT4gdm9pZCkge1xuICAgIGlmIChhbmltVXRpbC5pc0VudGVyU3VwcG9ydGVkKHRoaXMucHJvcHMpKSB7XG4gICAgICB0aGlzLnRyYW5zaXRpb24oJ2VudGVyJywgZG9uZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRvbmUodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50V2lsbEFwcGVhcihkb25lOiAoY2hpbGQ6IEFuaW1hdGVDaGlsZCkgPT4gdm9pZCkge1xuICAgIGlmIChhbmltVXRpbC5pc0FwcGVhclN1cHBvcnRlZCh0aGlzLnByb3BzKSkge1xuICAgICAgdGhpcy50cmFuc2l0aW9uKCdhcHBlYXInLCBkb25lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZG9uZSh0aGlzKTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnRXaWxsTGVhdmUoZG9uZTogKGNoaWxkOiBBbmltYXRlQ2hpbGQpID0+IHZvaWQpIHtcbiAgICBpZiAoYW5pbVV0aWwuaXNMZWF2ZVN1cHBvcnRlZCh0aGlzLnByb3BzKSkge1xuICAgICAgdGhpcy50cmFuc2l0aW9uKCdsZWF2ZScsIGRvbmUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkb25lKHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIHRyYW5zaXRpb24oYW5pbWF0aW9uVHlwZTogc3RyaW5nLCBmaW5pc2hDYWxsYmFjazogKGNoaWxkOiBBbmltYXRlQ2hpbGQpID0+IHZvaWQpIHtcbiAgICBjb25zdCBub2RlID0gZmluZERPTU5vZGUodGhpcyk7XG4gICAgaWYgKG5vZGUpIHtcbiAgICAgIGNvbnN0IHsgcHJvcHMgfSA9IHRoaXM7XG4gICAgICBjb25zdCB7IHRyYW5zaXRpb25OYW1lLCBhbmltYXRpb24gPSB7fSB9ID0gcHJvcHM7XG4gICAgICBjb25zdCBuYW1lSXNPYmogPSB0eXBlb2YgdHJhbnNpdGlvbk5hbWUgPT09ICdvYmplY3QnO1xuICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICBjb25zdCBlbmQgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuc3RvcHBlciA9IG51bGw7XG4gICAgICAgIGZpbmlzaENhbGxiYWNrKHRoaXMpO1xuICAgICAgfTtcbiAgICAgIGlmIChcbiAgICAgICAgKGlzQ3NzQW5pbWF0aW9uU3VwcG9ydGVkIHx8ICFhbmltYXRpb25bYW5pbWF0aW9uVHlwZV0pICYmXG4gICAgICAgIHRyYW5zaXRpb25OYW1lICYmXG4gICAgICAgIHByb3BzW3RyYW5zaXRpb25NYXBbYW5pbWF0aW9uVHlwZV1dXG4gICAgICApIHtcbiAgICAgICAgY29uc3QgbmFtZSA9IG5hbWVJc09ialxuICAgICAgICAgID8gdHJhbnNpdGlvbk5hbWVbYW5pbWF0aW9uVHlwZV1cbiAgICAgICAgICA6IGAke3RyYW5zaXRpb25OYW1lfS0ke2FuaW1hdGlvblR5cGV9YDtcbiAgICAgICAgbGV0IGFjdGl2ZU5hbWUgPSBgJHtuYW1lfS1hY3RpdmVgO1xuICAgICAgICBpZiAobmFtZUlzT2JqICYmIHRyYW5zaXRpb25OYW1lW2Ake2FuaW1hdGlvblR5cGV9QWN0aXZlYF0pIHtcbiAgICAgICAgICBhY3RpdmVOYW1lID0gdHJhbnNpdGlvbk5hbWVbYCR7YW5pbWF0aW9uVHlwZX1BY3RpdmVgXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN0b3BwZXIgPSBjc3NBbmltYXRlKFxuICAgICAgICAgIG5vZGUsXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIGFjdGl2ZTogYWN0aXZlTmFtZSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGVuZCxcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc3RvcHBlciA9IGFuaW1hdGlvblthbmltYXRpb25UeXBlXShub2RlLCBlbmQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN0b3AoKSB7XG4gICAgY29uc3QgeyBzdG9wcGVyIH0gPSB0aGlzO1xuICAgIGlmIChzdG9wcGVyKSB7XG4gICAgICB0aGlzLnN0b3BwZXIgPSBudWxsO1xuICAgICAgc3RvcHBlci5zdG9wKCk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgY2hpbGRyZW4sIC4uLm90aGVyUHJvcHMgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKGlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSkge1xuICAgICAgY29uc3QgcHJvcHMgPSBvbWl0KG90aGVyUHJvcHMsIFtcbiAgICAgICAgJ2FuaW1hdGlvbicsXG4gICAgICAgICd0cmFuc2l0aW9uTmFtZScsXG4gICAgICAgICd0cmFuc2l0aW9uRW50ZXInLFxuICAgICAgICAndHJhbnNpdGlvbkFwcGVhcicsXG4gICAgICAgICd0cmFuc2l0aW9uTGVhdmUnLFxuICAgICAgXSk7XG4gICAgICBjb25zdCB7IHN0eWxlIH0gPSBjaGlsZHJlbi5wcm9wcyBhcyBhbnk7XG4gICAgICByZXR1cm4gY2xvbmVFbGVtZW50KGNoaWxkcmVuLCB7IC4uLnByb3BzLCBzdHlsZTogeyAuLi5wcm9wcy5zdHlsZSwgLi4uc3R5bGUgfSB9IGFzIGFueSk7XG4gICAgfVxuICAgIHJldHVybiBjaGlsZHJlbjtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9