import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { getPrefixCls } from '../configure';
const stringOrNumber = PropTypes.oneOfType([PropTypes.string, PropTypes.number]);
const objectOrNumber = PropTypes.oneOfType([PropTypes.object, PropTypes.number]);
export default function Col(props) {
    const { span, order, offset, push, pull, className, children, prefixCls: customizePrefixCls, ...others } = props;
    const prefixCls = getPrefixCls('col', customizePrefixCls);
    let sizeClassObj = {};
    ['xs', 'sm', 'md', 'lg', 'xl', 'xxl'].forEach(size => {
        let sizeProps = {};
        if (typeof props[size] === 'number') {
            sizeProps.span = props[size];
        }
        else if (typeof props[size] === 'object') {
            sizeProps = props[size] || {};
        }
        delete others[size];
        sizeClassObj = {
            ...sizeClassObj,
            [`${prefixCls}-${size}-${sizeProps.span}`]: sizeProps.span !== undefined,
            [`${prefixCls}-${size}-order-${sizeProps.order}`]: sizeProps.order || sizeProps.order === 0,
            [`${prefixCls}-${size}-offset-${sizeProps.offset}`]: sizeProps.offset || sizeProps.offset === 0,
            [`${prefixCls}-${size}-push-${sizeProps.push}`]: sizeProps.push || sizeProps.push === 0,
            [`${prefixCls}-${size}-pull-${sizeProps.pull}`]: sizeProps.pull || sizeProps.pull === 0,
        };
    });
    const classes = classNames({
        [`${prefixCls}-${span}`]: span !== undefined,
        [`${prefixCls}-order-${order}`]: order,
        [`${prefixCls}-offset-${offset}`]: offset,
        [`${prefixCls}-push-${push}`]: push,
        [`${prefixCls}-pull-${pull}`]: pull,
    }, className, sizeClassObj);
    return (React.createElement("div", Object.assign({}, others, { className: classes }), children));
}
Col.displayName = 'Col';
Col.propTypes = {
    span: stringOrNumber,
    order: stringOrNumber,
    offset: stringOrNumber,
    push: stringOrNumber,
    pull: stringOrNumber,
    className: PropTypes.string,
    children: PropTypes.node,
    xs: objectOrNumber,
    sm: objectOrNumber,
    md: objectOrNumber,
    lg: objectOrNumber,
    xl: objectOrNumber,
    xxl: objectOrNumber,
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvZ3JpZC9jb2wudHN4IiwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBeUIsTUFBTSxPQUFPLENBQUM7QUFDOUMsT0FBTyxTQUFTLE1BQU0sWUFBWSxDQUFDO0FBQ25DLE9BQU8sVUFBVSxNQUFNLFlBQVksQ0FBQztBQUNwQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRTVDLE1BQU0sY0FBYyxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ2pGLE1BQU0sY0FBYyxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBeUJqRixNQUFNLENBQUMsT0FBTyxVQUFVLEdBQUcsQ0FBQyxLQUFlO0lBQ3pDLE1BQU0sRUFDSixJQUFJLEVBQ0osS0FBSyxFQUNMLE1BQU0sRUFDTixJQUFJLEVBQ0osSUFBSSxFQUNKLFNBQVMsRUFDVCxRQUFRLEVBQ1IsU0FBUyxFQUFFLGtCQUFrQixFQUM3QixHQUFHLE1BQU0sRUFDVixHQUFHLEtBQUssQ0FBQztJQUNWLE1BQU0sU0FBUyxHQUFHLFlBQVksQ0FBQyxLQUFLLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztJQUMxRCxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUM7SUFDdEIsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNuRCxJQUFJLFNBQVMsR0FBWSxFQUFFLENBQUM7UUFDNUIsSUFBSSxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxRQUFRLEVBQUU7WUFDbkMsU0FBUyxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDOUI7YUFBTSxJQUFJLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLFFBQVEsRUFBRTtZQUMxQyxTQUFTLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUMvQjtRQUVELE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXBCLFlBQVksR0FBRztZQUNiLEdBQUcsWUFBWTtZQUNmLENBQUMsR0FBRyxTQUFTLElBQUksSUFBSSxJQUFJLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxJQUFJLEtBQUssU0FBUztZQUN4RSxDQUFDLEdBQUcsU0FBUyxJQUFJLElBQUksVUFBVSxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxTQUFTLENBQUMsS0FBSyxJQUFJLFNBQVMsQ0FBQyxLQUFLLEtBQUssQ0FBQztZQUMzRixDQUFDLEdBQUcsU0FBUyxJQUFJLElBQUksV0FBVyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsRUFDakQsU0FBUyxDQUFDLE1BQU0sSUFBSSxTQUFTLENBQUMsTUFBTSxLQUFLLENBQUM7WUFDNUMsQ0FBQyxHQUFHLFNBQVMsSUFBSSxJQUFJLFNBQVMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsU0FBUyxDQUFDLElBQUksSUFBSSxTQUFTLENBQUMsSUFBSSxLQUFLLENBQUM7WUFDdkYsQ0FBQyxHQUFHLFNBQVMsSUFBSSxJQUFJLFNBQVMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsU0FBUyxDQUFDLElBQUksSUFBSSxTQUFTLENBQUMsSUFBSSxLQUFLLENBQUM7U0FDeEYsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxPQUFPLEdBQUcsVUFBVSxDQUN4QjtRQUNFLENBQUMsR0FBRyxTQUFTLElBQUksSUFBSSxFQUFFLENBQUMsRUFBRSxJQUFJLEtBQUssU0FBUztRQUM1QyxDQUFDLEdBQUcsU0FBUyxVQUFVLEtBQUssRUFBRSxDQUFDLEVBQUUsS0FBSztRQUN0QyxDQUFDLEdBQUcsU0FBUyxXQUFXLE1BQU0sRUFBRSxDQUFDLEVBQUUsTUFBTTtRQUN6QyxDQUFDLEdBQUcsU0FBUyxTQUFTLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSTtRQUNuQyxDQUFDLEdBQUcsU0FBUyxTQUFTLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSTtLQUNwQyxFQUNELFNBQVMsRUFDVCxZQUFZLENBQ2IsQ0FBQztJQUVGLE9BQU8sQ0FDTCw2Q0FBUyxNQUFNLElBQUUsU0FBUyxFQUFFLE9BQU8sS0FDaEMsUUFBUSxDQUNMLENBQ1AsQ0FBQztBQUNKLENBQUM7QUFFRCxHQUFHLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztBQUV4QixHQUFHLENBQUMsU0FBUyxHQUFHO0lBQ2QsSUFBSSxFQUFFLGNBQWM7SUFDcEIsS0FBSyxFQUFFLGNBQWM7SUFDckIsTUFBTSxFQUFFLGNBQWM7SUFDdEIsSUFBSSxFQUFFLGNBQWM7SUFDcEIsSUFBSSxFQUFFLGNBQWM7SUFDcEIsU0FBUyxFQUFFLFNBQVMsQ0FBQyxNQUFNO0lBQzNCLFFBQVEsRUFBRSxTQUFTLENBQUMsSUFBSTtJQUN4QixFQUFFLEVBQUUsY0FBYztJQUNsQixFQUFFLEVBQUUsY0FBYztJQUNsQixFQUFFLEVBQUUsY0FBYztJQUNsQixFQUFFLEVBQUUsY0FBYztJQUNsQixFQUFFLEVBQUUsY0FBYztJQUNsQixHQUFHLEVBQUUsY0FBYztDQUNwQixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9odWlodWF3ay9Eb2N1bWVudHMvb3B0L2Nob2Vyb2Rvbi11aS9jb21wb25lbnRzL2dyaWQvY29sLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgSFRNTEF0dHJpYnV0ZXMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgeyBnZXRQcmVmaXhDbHMgfSBmcm9tICcuLi9jb25maWd1cmUnO1xuXG5jb25zdCBzdHJpbmdPck51bWJlciA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5udW1iZXJdKTtcbmNvbnN0IG9iamVjdE9yTnVtYmVyID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLm51bWJlcl0pO1xuXG5leHBvcnQgaW50ZXJmYWNlIENvbFNpemUge1xuICBzcGFuPzogbnVtYmVyO1xuICBvcmRlcj86IG51bWJlcjtcbiAgb2Zmc2V0PzogbnVtYmVyO1xuICBwdXNoPzogbnVtYmVyO1xuICBwdWxsPzogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbFByb3BzIGV4dGVuZHMgSFRNTEF0dHJpYnV0ZXM8SFRNTERpdkVsZW1lbnQ+IHtcbiAgc3Bhbj86IG51bWJlcjtcbiAgb3JkZXI/OiBudW1iZXI7XG4gIG9mZnNldD86IG51bWJlcjtcbiAgcHVzaD86IG51bWJlcjtcbiAgcHVsbD86IG51bWJlcjtcbiAgeHM/OiBudW1iZXIgfCBDb2xTaXplO1xuICBzbT86IG51bWJlciB8IENvbFNpemU7XG4gIG1kPzogbnVtYmVyIHwgQ29sU2l6ZTtcbiAgbGc/OiBudW1iZXIgfCBDb2xTaXplO1xuICB4bD86IG51bWJlciB8IENvbFNpemU7XG4gIHh4bD86IG51bWJlciB8IENvbFNpemU7XG4gIHByZWZpeENscz86IHN0cmluZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQ29sKHByb3BzOiBDb2xQcm9wcykge1xuICBjb25zdCB7XG4gICAgc3BhbixcbiAgICBvcmRlcixcbiAgICBvZmZzZXQsXG4gICAgcHVzaCxcbiAgICBwdWxsLFxuICAgIGNsYXNzTmFtZSxcbiAgICBjaGlsZHJlbixcbiAgICBwcmVmaXhDbHM6IGN1c3RvbWl6ZVByZWZpeENscyxcbiAgICAuLi5vdGhlcnNcbiAgfSA9IHByb3BzO1xuICBjb25zdCBwcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ2NvbCcsIGN1c3RvbWl6ZVByZWZpeENscyk7XG4gIGxldCBzaXplQ2xhc3NPYmogPSB7fTtcbiAgWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCcsICd4eGwnXS5mb3JFYWNoKHNpemUgPT4ge1xuICAgIGxldCBzaXplUHJvcHM6IENvbFNpemUgPSB7fTtcbiAgICBpZiAodHlwZW9mIHByb3BzW3NpemVdID09PSAnbnVtYmVyJykge1xuICAgICAgc2l6ZVByb3BzLnNwYW4gPSBwcm9wc1tzaXplXTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9wc1tzaXplXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHNpemVQcm9wcyA9IHByb3BzW3NpemVdIHx8IHt9O1xuICAgIH1cblxuICAgIGRlbGV0ZSBvdGhlcnNbc2l6ZV07XG5cbiAgICBzaXplQ2xhc3NPYmogPSB7XG4gICAgICAuLi5zaXplQ2xhc3NPYmosXG4gICAgICBbYCR7cHJlZml4Q2xzfS0ke3NpemV9LSR7c2l6ZVByb3BzLnNwYW59YF06IHNpemVQcm9wcy5zcGFuICE9PSB1bmRlZmluZWQsXG4gICAgICBbYCR7cHJlZml4Q2xzfS0ke3NpemV9LW9yZGVyLSR7c2l6ZVByb3BzLm9yZGVyfWBdOiBzaXplUHJvcHMub3JkZXIgfHwgc2l6ZVByb3BzLm9yZGVyID09PSAwLFxuICAgICAgW2Ake3ByZWZpeENsc30tJHtzaXplfS1vZmZzZXQtJHtzaXplUHJvcHMub2Zmc2V0fWBdOlxuICAgICAgICBzaXplUHJvcHMub2Zmc2V0IHx8IHNpemVQcm9wcy5vZmZzZXQgPT09IDAsXG4gICAgICBbYCR7cHJlZml4Q2xzfS0ke3NpemV9LXB1c2gtJHtzaXplUHJvcHMucHVzaH1gXTogc2l6ZVByb3BzLnB1c2ggfHwgc2l6ZVByb3BzLnB1c2ggPT09IDAsXG4gICAgICBbYCR7cHJlZml4Q2xzfS0ke3NpemV9LXB1bGwtJHtzaXplUHJvcHMucHVsbH1gXTogc2l6ZVByb3BzLnB1bGwgfHwgc2l6ZVByb3BzLnB1bGwgPT09IDAsXG4gICAgfTtcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSBjbGFzc05hbWVzKFxuICAgIHtcbiAgICAgIFtgJHtwcmVmaXhDbHN9LSR7c3Bhbn1gXTogc3BhbiAhPT0gdW5kZWZpbmVkLFxuICAgICAgW2Ake3ByZWZpeENsc30tb3JkZXItJHtvcmRlcn1gXTogb3JkZXIsXG4gICAgICBbYCR7cHJlZml4Q2xzfS1vZmZzZXQtJHtvZmZzZXR9YF06IG9mZnNldCxcbiAgICAgIFtgJHtwcmVmaXhDbHN9LXB1c2gtJHtwdXNofWBdOiBwdXNoLFxuICAgICAgW2Ake3ByZWZpeENsc30tcHVsbC0ke3B1bGx9YF06IHB1bGwsXG4gICAgfSxcbiAgICBjbGFzc05hbWUsXG4gICAgc2l6ZUNsYXNzT2JqLFxuICApO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiB7Li4ub3RoZXJzfSBjbGFzc05hbWU9e2NsYXNzZXN9PlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvZGl2PlxuICApO1xufVxuXG5Db2wuZGlzcGxheU5hbWUgPSAnQ29sJztcblxuQ29sLnByb3BUeXBlcyA9IHtcbiAgc3Bhbjogc3RyaW5nT3JOdW1iZXIsXG4gIG9yZGVyOiBzdHJpbmdPck51bWJlcixcbiAgb2Zmc2V0OiBzdHJpbmdPck51bWJlcixcbiAgcHVzaDogc3RyaW5nT3JOdW1iZXIsXG4gIHB1bGw6IHN0cmluZ09yTnVtYmVyLFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgeHM6IG9iamVjdE9yTnVtYmVyLFxuICBzbTogb2JqZWN0T3JOdW1iZXIsXG4gIG1kOiBvYmplY3RPck51bWJlcixcbiAgbGc6IG9iamVjdE9yTnVtYmVyLFxuICB4bDogb2JqZWN0T3JOdW1iZXIsXG4gIHh4bDogb2JqZWN0T3JOdW1iZXIsXG59O1xuIl0sInZlcnNpb24iOjN9