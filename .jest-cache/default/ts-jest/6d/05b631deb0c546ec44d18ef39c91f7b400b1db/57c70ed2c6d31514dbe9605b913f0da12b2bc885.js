import { __decorate } from "tslib";
import React, { Component } from 'react';
import { observer } from 'mobx-react';
import { pxToRem } from 'choerodon-ui/lib/_util/UnitConvertor';
import measureScrollbar from 'choerodon-ui/lib/_util/measureScrollbar';
import autobind from '../_util/autobind';
import TableContext from './TableContext';
let TableBody = class TableBody extends Component {
    saveRef(node) {
        const { getRef } = this.props;
        if (getRef) {
            getRef(node);
        }
    }
    render() {
        const { children, lock, prefixCls, height, onScroll } = this.props;
        const { tableStore: { leftLeafColumnsWidth, hasFooter }, } = this.context;
        const fixedLeft = lock === true || lock === "left" /* left */;
        const scrollbar = measureScrollbar();
        const hasFooterAndNotLock = !lock && hasFooter && scrollbar;
        const tableBody = (React.createElement("div", { ref: this.saveRef, className: `${prefixCls}-body`, style: {
                height: pxToRem(hasFooterAndNotLock && height !== undefined ? height + scrollbar : height),
                marginBottom: hasFooterAndNotLock ? pxToRem(-scrollbar) : undefined,
                width: fixedLeft ? pxToRem(leftLeafColumnsWidth + (scrollbar || 20)) : undefined,
            }, onScroll: onScroll }, children));
        if (fixedLeft) {
            return (React.createElement("div", { style: { width: pxToRem(leftLeafColumnsWidth), overflow: 'hidden' } }, tableBody));
        }
        return tableBody;
    }
};
TableBody.displayName = 'TableBody';
TableBody.contextType = TableContext;
__decorate([
    autobind
], TableBody.prototype, "saveRef", null);
TableBody = __decorate([
    observer
], TableBody);
export default TableBody;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMtcHJvL3RhYmxlL1RhYmxlQm9keS50c3giLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sS0FBSyxFQUFFLEVBQUUsU0FBUyxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDdEMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQy9ELE9BQU8sZ0JBQWdCLE1BQU0seUNBQXlDLENBQUM7QUFDdkUsT0FBTyxRQUFRLE1BQU0sbUJBQW1CLENBQUM7QUFFekMsT0FBTyxZQUFZLE1BQU0sZ0JBQWdCLENBQUM7QUFXMUMsSUFBcUIsU0FBUyxHQUE5QixNQUFxQixTQUFVLFNBQVEsU0FBeUI7SUFNOUQsT0FBTyxDQUFDLElBQTJCO1FBQ2pDLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQzlCLElBQUksTUFBTSxFQUFFO1lBQ1YsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2Q7SUFDSCxDQUFDO0lBRUQsTUFBTTtRQUNKLE1BQU0sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUNuRSxNQUFNLEVBQ0osVUFBVSxFQUFFLEVBQUUsb0JBQW9CLEVBQUUsU0FBUyxFQUFFLEdBQ2hELEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUNqQixNQUFNLFNBQVMsR0FBRyxJQUFJLEtBQUssSUFBSSxJQUFJLElBQUksc0JBQW9CLENBQUM7UUFDNUQsTUFBTSxTQUFTLEdBQUcsZ0JBQWdCLEVBQUUsQ0FBQztRQUNyQyxNQUFNLG1CQUFtQixHQUFHLENBQUMsSUFBSSxJQUFJLFNBQVMsSUFBSSxTQUFTLENBQUM7UUFDNUQsTUFBTSxTQUFTLEdBQUcsQ0FDaEIsNkJBQ0UsR0FBRyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQ2pCLFNBQVMsRUFBRSxHQUFHLFNBQVMsT0FBTyxFQUM5QixLQUFLLEVBQUU7Z0JBQ0wsTUFBTSxFQUFFLE9BQU8sQ0FDYixtQkFBbUIsSUFBSSxNQUFNLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQzFFO2dCQUNELFlBQVksRUFBRSxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVM7Z0JBQ25FLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsR0FBRyxDQUFDLFNBQVMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTO2FBQ2pGLEVBQ0QsUUFBUSxFQUFFLFFBQVEsSUFFakIsUUFBUSxDQUNMLENBQ1AsQ0FBQztRQUNGLElBQUksU0FBUyxFQUFFO1lBQ2IsT0FBTyxDQUNMLDZCQUFLLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsb0JBQW9CLENBQUMsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLElBQUcsU0FBUyxDQUFPLENBQzVGLENBQUM7U0FDSDtRQUVELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7Q0FDRixDQUFBO0FBNUNRLHFCQUFXLEdBQUcsV0FBVyxDQUFDO0FBRTFCLHFCQUFXLEdBQUcsWUFBWSxDQUFDO0FBR2xDO0lBREMsUUFBUTt3Q0FNUjtBQVhrQixTQUFTO0lBRDdCLFFBQVE7R0FDWSxTQUFTLENBNkM3QjtlQTdDb0IsU0FBUyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvaHVpaHVhd2svRG9jdW1lbnRzL29wdC9jaG9lcm9kb24tdWkvY29tcG9uZW50cy1wcm8vdGFibGUvVGFibGVCb2R5LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgb2JzZXJ2ZXIgfSBmcm9tICdtb2J4LXJlYWN0JztcbmltcG9ydCB7IHB4VG9SZW0gfSBmcm9tICdjaG9lcm9kb24tdWkvbGliL191dGlsL1VuaXRDb252ZXJ0b3InO1xuaW1wb3J0IG1lYXN1cmVTY3JvbGxiYXIgZnJvbSAnY2hvZXJvZG9uLXVpL2xpYi9fdXRpbC9tZWFzdXJlU2Nyb2xsYmFyJztcbmltcG9ydCBhdXRvYmluZCBmcm9tICcuLi9fdXRpbC9hdXRvYmluZCc7XG5pbXBvcnQgeyBDb2x1bW5Mb2NrIH0gZnJvbSAnLi9lbnVtJztcbmltcG9ydCBUYWJsZUNvbnRleHQgZnJvbSAnLi9UYWJsZUNvbnRleHQnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRhYmxlQm9keVByb3BzIHtcbiAgcHJlZml4Q2xzPzogc3RyaW5nO1xuICBsb2NrPzogQ29sdW1uTG9jayB8IGJvb2xlYW47XG4gIGhlaWdodD86IG51bWJlcjtcbiAgZ2V0UmVmPzogKG5vZGU6IEhUTUxEaXZFbGVtZW50IHwgbnVsbCkgPT4gdm9pZDtcbiAgb25TY3JvbGw/OiAoZSkgPT4gdm9pZDtcbn1cblxuQG9ic2VydmVyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUYWJsZUJvZHkgZXh0ZW5kcyBDb21wb25lbnQ8VGFibGVCb2R5UHJvcHM+IHtcbiAgc3RhdGljIGRpc3BsYXlOYW1lID0gJ1RhYmxlQm9keSc7XG5cbiAgc3RhdGljIGNvbnRleHRUeXBlID0gVGFibGVDb250ZXh0O1xuXG4gIEBhdXRvYmluZFxuICBzYXZlUmVmKG5vZGU6IEhUTUxEaXZFbGVtZW50IHwgbnVsbCkge1xuICAgIGNvbnN0IHsgZ2V0UmVmIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmIChnZXRSZWYpIHtcbiAgICAgIGdldFJlZihub2RlKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBjaGlsZHJlbiwgbG9jaywgcHJlZml4Q2xzLCBoZWlnaHQsIG9uU2Nyb2xsIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHtcbiAgICAgIHRhYmxlU3RvcmU6IHsgbGVmdExlYWZDb2x1bW5zV2lkdGgsIGhhc0Zvb3RlciB9LFxuICAgIH0gPSB0aGlzLmNvbnRleHQ7XG4gICAgY29uc3QgZml4ZWRMZWZ0ID0gbG9jayA9PT0gdHJ1ZSB8fCBsb2NrID09PSBDb2x1bW5Mb2NrLmxlZnQ7XG4gICAgY29uc3Qgc2Nyb2xsYmFyID0gbWVhc3VyZVNjcm9sbGJhcigpO1xuICAgIGNvbnN0IGhhc0Zvb3RlckFuZE5vdExvY2sgPSAhbG9jayAmJiBoYXNGb290ZXIgJiYgc2Nyb2xsYmFyO1xuICAgIGNvbnN0IHRhYmxlQm9keSA9IChcbiAgICAgIDxkaXZcbiAgICAgICAgcmVmPXt0aGlzLnNhdmVSZWZ9XG4gICAgICAgIGNsYXNzTmFtZT17YCR7cHJlZml4Q2xzfS1ib2R5YH1cbiAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICBoZWlnaHQ6IHB4VG9SZW0oXG4gICAgICAgICAgICBoYXNGb290ZXJBbmROb3RMb2NrICYmIGhlaWdodCAhPT0gdW5kZWZpbmVkID8gaGVpZ2h0ICsgc2Nyb2xsYmFyIDogaGVpZ2h0LFxuICAgICAgICAgICksXG4gICAgICAgICAgbWFyZ2luQm90dG9tOiBoYXNGb290ZXJBbmROb3RMb2NrID8gcHhUb1JlbSgtc2Nyb2xsYmFyKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICB3aWR0aDogZml4ZWRMZWZ0ID8gcHhUb1JlbShsZWZ0TGVhZkNvbHVtbnNXaWR0aCArIChzY3JvbGxiYXIgfHwgMjApKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgfX1cbiAgICAgICAgb25TY3JvbGw9e29uU2Nyb2xsfVxuICAgICAgPlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICAgIGlmIChmaXhlZExlZnQpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgd2lkdGg6IHB4VG9SZW0obGVmdExlYWZDb2x1bW5zV2lkdGgpLCBvdmVyZmxvdzogJ2hpZGRlbicgfX0+e3RhYmxlQm9keX08L2Rpdj5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhYmxlQm9keTtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9