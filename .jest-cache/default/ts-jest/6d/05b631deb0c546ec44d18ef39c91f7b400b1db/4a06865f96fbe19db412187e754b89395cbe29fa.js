import React, { Children, cloneElement, Component, } from 'react';
import { findDOMNode } from 'react-dom';
import classNames from 'classnames';
import Icon from '../icon';
import warning from '../_util/warning';
import isFlexSupported from '../_util/isFlexSupported';
import RcTabs, { TabContent, TabPane } from '../rc-components/tabs';
import ScrollableInkTabBar from '../rc-components/tabs/ScrollableInkTabBar';
import { generateKey } from '../rc-components/tabs/utils';
import { getPrefixCls } from '../configure';
export default class Tabs extends Component {
    constructor() {
        super(...arguments);
        this.createNewTab = targetKey => {
            const { onEdit } = this.props;
            if (onEdit) {
                onEdit(targetKey, 'add');
            }
        };
        this.removeTab = (targetKey, e) => {
            e.stopPropagation();
            if (!targetKey) {
                return;
            }
            const { onEdit } = this.props;
            if (onEdit) {
                onEdit(targetKey, 'remove');
            }
        };
        this.handleChange = (activeKey) => {
            const { onChange } = this.props;
            if (onChange) {
                onChange(activeKey);
            }
        };
    }
    componentDidMount() {
        const NO_FLEX = ' no-flex';
        const tabNode = findDOMNode(this);
        if (tabNode && !isFlexSupported() && tabNode.className.indexOf(NO_FLEX) === -1) {
            tabNode.className += NO_FLEX;
        }
    }
    render() {
        const { prefixCls: customizePrefixCls, className = '', size, type = "line" /* line */, tabPosition, children, tabBarStyle, hideAdd, onTabClick, onPrevClick, onNextClick, animated = true, tabBarGutter, } = this.props;
        let { tabBarExtraContent } = this.props;
        const prefixCls = getPrefixCls('tabs', customizePrefixCls);
        const inkBarAnimated = typeof animated === 'object' ? animated.inkBar : animated;
        let tabPaneAnimated = typeof animated === 'object' ? animated.tabPane : animated;
        // card tabs should not have animation
        if (type !== "line" /* line */) {
            tabPaneAnimated = 'animated' in this.props ? tabPaneAnimated : false;
        }
        const isCard = type === "card" /* card */ || type === "editable-card" /* 'editable-card' */;
        warning(!(isCard && (size === "small" /* small */ || size === "large" /* large */)), "Tabs[type=card|editable-card] doesn't have small or large size, it's by designed.");
        const cls = classNames(className, `${prefixCls}-${type}`, {
            [`${prefixCls}-vertical`]: tabPosition === "left" /* left */ || tabPosition === "right" /* right */,
            [`${prefixCls}-${size}`]: !!size,
            [`${prefixCls}-card`]: isCard,
            [`${prefixCls}-no-animation`]: !tabPaneAnimated,
        });
        // only card type tabs can be added and closed
        let childrenWithClose = [];
        if (type === "editable-card" /* 'editable-card' */) {
            childrenWithClose = [];
            Children.forEach(children, (child, index) => {
                let closable = child.props.closable;
                closable = typeof closable === 'undefined' ? true : closable;
                const closeIcon = closable ? (React.createElement(Icon, { type: "close", onClick: e => this.removeTab(child.key, e) })) : null;
                childrenWithClose.push(cloneElement(child, {
                    tab: (React.createElement("div", { className: closable ? undefined : `${prefixCls}-tab-unclosable` },
                        child.props.tab,
                        closeIcon)),
                    key: generateKey(child.key, index),
                }));
            });
            // Add new tab handler
            if (!hideAdd) {
                tabBarExtraContent = (React.createElement("span", null,
                    React.createElement(Icon, { type: "plus", className: `${prefixCls}-new-tab`, onClick: this.createNewTab }),
                    tabBarExtraContent));
            }
        }
        tabBarExtraContent = tabBarExtraContent ? (React.createElement("div", { className: `${prefixCls}-extra-content` }, tabBarExtraContent)) : null;
        const renderTabBar = () => (React.createElement(ScrollableInkTabBar, { inkBarAnimated: inkBarAnimated, extraContent: tabBarExtraContent, onTabClick: onTabClick, onPrevClick: onPrevClick, onNextClick: onNextClick, style: tabBarStyle, tabBarGutter: tabBarGutter }));
        return (React.createElement(RcTabs, Object.assign({}, this.props, { prefixCls: prefixCls, className: cls, tabBarPosition: tabPosition, renderTabBar: renderTabBar, renderTabContent: () => React.createElement(TabContent, { animated: tabPaneAnimated, animatedWithMargin: true }), onChange: this.handleChange }), childrenWithClose.length > 0 ? childrenWithClose : children));
    }
}
Tabs.displayName = 'Tabs';
Tabs.TabPane = TabPane;
Tabs.defaultProps = {
    hideAdd: false,
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,