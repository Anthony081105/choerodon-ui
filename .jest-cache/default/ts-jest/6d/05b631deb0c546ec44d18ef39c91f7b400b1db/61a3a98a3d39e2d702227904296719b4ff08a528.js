import { __decorate } from "tslib";
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { observer, PropTypes as MobxPropTypes } from 'mobx-react';
import { action, observable } from 'mobx';
import { pxToRem } from 'choerodon-ui/lib/_util/UnitConvertor';
import measureScrollbar from 'choerodon-ui/lib/_util/measureScrollbar';
import IconItem from './IconItem';
import Pagination from '../pagination/Pagination';
import autobind from '../_util/autobind';
let IconCategory = class IconCategory extends Component {
    constructor(props) {
        super(props);
        this.setPage(props.page);
    }
    saveRef(node) {
        this.ul = node;
    }
    handlePageChange(page) {
        this.setPage(page);
        const { onPageChange, category } = this.props;
        if (onPageChange) {
            onPageChange(page, category);
        }
    }
    handleItemSelect(icon) {
        const { onSelect } = this.props;
        onSelect(icon);
    }
    componentWillReceiveProps(nextProps) {
        if (nextProps.page && nextProps.page !== this.page) {
            this.setPage(nextProps.page);
        }
    }
    componentDidMount() {
        this.syncItemPosition();
    }
    componentDidUpdate() {
        this.syncItemPosition();
    }
    syncItemPosition() {
        const { props: { value, prefixCls }, ul, } = this;
        if (value && ul) {
            const item = ul.querySelector(`li.${prefixCls}-item-selected`);
            if (item) {
                const { offsetHeight, scrollTop } = ul;
                const { offsetTop, offsetHeight: height } = item;
                if (offsetTop < scrollTop) {
                    ul.scrollTo(0, offsetTop);
                }
                else if (offsetTop + height > scrollTop + offsetHeight) {
                    ul.scrollTo(0, offsetTop + height - offsetHeight);
                }
            }
        }
    }
    setPage(page = 1) {
        this.page = page;
    }
    renderPagination() {
        const { page, props: { paging, pageSize, prefixCls, icons }, } = this;
        const total = icons.length;
        if (paging && total > pageSize) {
            return (React.createElement(Pagination, { key: "page", className: `${prefixCls}-pagination`, total: total, page: page, pageSize: pageSize, showSizeChanger: false, onChange: this.handlePageChange, style: { right: pxToRem(measureScrollbar()) } }));
        }
    }
    renderIcons() {
        const { value, prefixCls } = this.props;
        return this.getIcons().map(icon => (React.createElement(IconItem, { key: icon, prefixCls: prefixCls, type: icon, onSelect: this.handleItemSelect, active: value === icon })));
    }
    getIcons() {
        const { page, props: { paging, pageSize, icons }, } = this;
        if (paging && icons.length > pageSize) {
            return icons.slice((page - 1) * pageSize, page * pageSize);
        }
        return icons;
    }
    render() {
        const { props: { prefixCls }, } = this;
        return (React.createElement("div", { className: `${prefixCls}-category` },
            this.renderPagination(),
            React.createElement("ul", { key: "icon-items", ref: this.saveRef }, this.renderIcons())));
    }
};
IconCategory.displayName = 'IconCategory';
IconCategory.propTypes = {
    prefixCls: PropTypes.string,
    icons: MobxPropTypes.arrayOrObservableArrayOf(PropTypes.string).isRequired,
    value: PropTypes.string,
    onSelect: PropTypes.func.isRequired,
    onPageChange: PropTypes.func,
    pageSize: PropTypes.number,
    page: PropTypes.number,
    paging: PropTypes.bool,
};
IconCategory.defaultProps = {
    paging: true,
};
__decorate([
    observable
], IconCategory.prototype, "page", void 0);
__decorate([
    autobind
], IconCategory.prototype, "saveRef", null);
__decorate([
    autobind
], IconCategory.prototype, "handlePageChange", null);
__decorate([
    autobind
], IconCategory.prototype, "handleItemSelect", null);
__decorate([
    action
], IconCategory.prototype, "setPage", null);
IconCategory = __decorate([
    observer
], IconCategory);
export default IconCategory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,