import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { getPrefixCls } from '../configure';
function generator({ displayName, suffixCls }) {
    return (BasicComponent) => {
        var _a;
        return _a = class Adapter extends Component {
                render() {
                    const { prefixCls: customizePrefixCls } = this.props;
                    return (React.createElement(BasicComponent, Object.assign({}, this.props, { prefixCls: getPrefixCls(suffixCls, customizePrefixCls) })));
                }
            },
            _a.displayName = displayName,
            _a;
    };
}
function Basic(props) {
    const { prefixCls, className, children, ...others } = props;
    const divCls = classNames(className, prefixCls);
    return (React.createElement("div", Object.assign({ className: divCls }, others), children));
}
class BasicLayout extends Component {
    constructor() {
        super(...arguments);
        this.state = { siders: [] };
    }
    getChildContext() {
        const { siders } = this.state;
        return {
            siderHook: {
                addSider: (id) => {
                    this.setState({
                        siders: [...siders, id],
                    });
                },
                removeSider: (id) => {
                    this.setState({
                        siders: siders.filter(currentId => currentId !== id),
                    });
                },
            },
        };
    }
    render() {
        const { prefixCls, className, children, hasSider, ...others } = this.props;
        const { siders } = this.state;
        const divCls = classNames(className, prefixCls, {
            [`${prefixCls}-has-sider`]: hasSider || siders.length > 0,
        });
        return (React.createElement("div", Object.assign({ className: divCls }, others), children));
    }
}
BasicLayout.childContextTypes = {
    siderHook: PropTypes.object,
};
const Layout = generator({
    suffixCls: 'layout',
    displayName: 'Layout',
})(BasicLayout);
const Header = generator({
    suffixCls: 'layout-header',
    displayName: 'Header',
})(Basic);
const Footer = generator({
    suffixCls: 'layout-footer',
    displayName: 'Footer',
})(Basic);
const Content = generator({
    suffixCls: 'layout-content',
    displayName: 'Content',
})(Basic);
Layout.Header = Header;
Layout.Footer = Footer;
Layout.Content = Content;
export default Layout;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvbGF5b3V0L2xheW91dC50c3giLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLEVBQUUsRUFBRSxTQUFTLEVBQXFELE1BQU0sT0FBTyxDQUFDO0FBQzVGLE9BQU8sU0FBUyxNQUFNLFlBQVksQ0FBQztBQUNuQyxPQUFPLFVBQVUsTUFBTSxZQUFZLENBQUM7QUFFcEMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGNBQWMsQ0FBQztBQWE1QyxTQUFTLFNBQVMsQ0FBQyxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQWtCO0lBQzNELE9BQU8sQ0FBQyxjQUEwRSxFQUFPLEVBQUU7O1FBQ3pGLFlBQU8sTUFBTSxPQUFRLFNBQVEsU0FBMEI7Z0JBV3JELE1BQU07b0JBQ0osTUFBTSxFQUFFLFNBQVMsRUFBRSxrQkFBa0IsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7b0JBQ3JELE9BQU8sQ0FDTCxvQkFBQyxjQUFjLG9CQUFLLElBQUksQ0FBQyxLQUFLLElBQUUsU0FBUyxFQUFFLFlBQVksQ0FBQyxTQUFTLEVBQUUsa0JBQWtCLENBQUMsSUFBSSxDQUMzRixDQUFDO2dCQUNKLENBQUM7YUFDRjtZQWhCUSxjQUFXLEdBQUcsV0FBWTtlQWdCakM7SUFDSixDQUFDLENBQUM7QUFDSixDQUFDO0FBRUQsU0FBUyxLQUFLLENBQUMsS0FBaUI7SUFDOUIsTUFBTSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLEdBQUcsTUFBTSxFQUFFLEdBQUcsS0FBSyxDQUFDO0lBQzVELE1BQU0sTUFBTSxHQUFHLFVBQVUsQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDaEQsT0FBTyxDQUNMLDJDQUFLLFNBQVMsRUFBRSxNQUFNLElBQU0sTUFBTSxHQUMvQixRQUFRLENBQ0wsQ0FDUCxDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sV0FBWSxTQUFRLFNBQTBCO0lBQXBEOztRQUtFLFVBQUssR0FBRyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsQ0FBQztJQWdDekIsQ0FBQztJQTlCQyxlQUFlO1FBQ2IsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDOUIsT0FBTztZQUNMLFNBQVMsRUFBRTtnQkFDVCxRQUFRLEVBQUUsQ0FBQyxFQUFVLEVBQUUsRUFBRTtvQkFDdkIsSUFBSSxDQUFDLFFBQVEsQ0FBQzt3QkFDWixNQUFNLEVBQUUsQ0FBQyxHQUFHLE1BQU0sRUFBRSxFQUFFLENBQUM7cUJBQ3hCLENBQUMsQ0FBQztnQkFDTCxDQUFDO2dCQUNELFdBQVcsRUFBRSxDQUFDLEVBQVUsRUFBRSxFQUFFO29CQUMxQixJQUFJLENBQUMsUUFBUSxDQUFDO3dCQUNaLE1BQU0sRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsU0FBUyxLQUFLLEVBQUUsQ0FBQztxQkFDckQsQ0FBQyxDQUFDO2dCQUNMLENBQUM7YUFDRjtTQUNGLENBQUM7SUFDSixDQUFDO0lBRUQsTUFBTTtRQUNKLE1BQU0sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsR0FBRyxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQzNFLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQzlCLE1BQU0sTUFBTSxHQUFHLFVBQVUsQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFO1lBQzlDLENBQUMsR0FBRyxTQUFTLFlBQVksQ0FBQyxFQUFFLFFBQVEsSUFBSSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUM7U0FDMUQsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxDQUNMLDJDQUFLLFNBQVMsRUFBRSxNQUFNLElBQU0sTUFBTSxHQUMvQixRQUFRLENBQ0wsQ0FDUCxDQUFDO0lBQ0osQ0FBQzs7QUFuQ00sNkJBQWlCLEdBQUc7SUFDekIsU0FBUyxFQUFFLFNBQVMsQ0FBQyxNQUFNO0NBQzVCLENBQUM7QUFvQ0osTUFBTSxNQUFNLEdBS1IsU0FBUyxDQUFDO0lBQ1osU0FBUyxFQUFFLFFBQVE7SUFDbkIsV0FBVyxFQUFFLFFBQVE7Q0FDdEIsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBRWhCLE1BQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixTQUFTLEVBQUUsZUFBZTtJQUMxQixXQUFXLEVBQUUsUUFBUTtDQUN0QixDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7QUFFVixNQUFNLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsU0FBUyxFQUFFLGVBQWU7SUFDMUIsV0FBVyxFQUFFLFFBQVE7Q0FDdEIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBRVYsTUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDO0lBQ3hCLFNBQVMsRUFBRSxnQkFBZ0I7SUFDM0IsV0FBVyxFQUFFLFNBQVM7Q0FDdkIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBRVYsTUFBTSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7QUFDdkIsTUFBTSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7QUFDdkIsTUFBTSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7QUFFekIsZUFBZSxNQUFNLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvbGF5b3V0L2xheW91dC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCwgQ29tcG9uZW50Q2xhc3MsIEZ1bmN0aW9uQ29tcG9uZW50LCBIVE1MQXR0cmlidXRlcyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCB7IFNpZGVyUHJvcHMgfSBmcm9tICcuL1NpZGVyJztcbmltcG9ydCB7IGdldFByZWZpeENscyB9IGZyb20gJy4uL2NvbmZpZ3VyZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmFzaWNQcm9wcyBleHRlbmRzIEhUTUxBdHRyaWJ1dGVzPEhUTUxEaXZFbGVtZW50PiB7XG4gIHByZWZpeENscz86IHN0cmluZztcbiAgZGlzcGxheU5hbWU/OiBzdHJpbmc7XG4gIGhhc1NpZGVyPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IHR5cGUgR2VuZXJhdG9yUHJvcHMgPSB7XG4gIHN1ZmZpeENsczogc3RyaW5nO1xuICBkaXNwbGF5TmFtZTogc3RyaW5nO1xufTtcblxuZnVuY3Rpb24gZ2VuZXJhdG9yKHsgZGlzcGxheU5hbWUsIHN1ZmZpeENscyB9OiBHZW5lcmF0b3JQcm9wcykge1xuICByZXR1cm4gKEJhc2ljQ29tcG9uZW50OiBGdW5jdGlvbkNvbXBvbmVudDxCYXNpY1Byb3BzPiB8IENvbXBvbmVudENsYXNzPEJhc2ljUHJvcHM+KTogYW55ID0+IHtcbiAgICByZXR1cm4gY2xhc3MgQWRhcHRlciBleHRlbmRzIENvbXBvbmVudDxCYXNpY1Byb3BzLCBhbnk+IHtcbiAgICAgIHN0YXRpYyBkaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuXG4gICAgICBzdGF0aWMgSGVhZGVyOiBhbnk7XG5cbiAgICAgIHN0YXRpYyBGb290ZXI6IGFueTtcblxuICAgICAgc3RhdGljIENvbnRlbnQ6IGFueTtcblxuICAgICAgc3RhdGljIFNpZGVyOiBhbnk7XG5cbiAgICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyBwcmVmaXhDbHM6IGN1c3RvbWl6ZVByZWZpeENscyB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8QmFzaWNDb21wb25lbnQgey4uLnRoaXMucHJvcHN9IHByZWZpeENscz17Z2V0UHJlZml4Q2xzKHN1ZmZpeENscywgY3VzdG9taXplUHJlZml4Q2xzKX0gLz5cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xufVxuXG5mdW5jdGlvbiBCYXNpYyhwcm9wczogQmFzaWNQcm9wcykge1xuICBjb25zdCB7IHByZWZpeENscywgY2xhc3NOYW1lLCBjaGlsZHJlbiwgLi4ub3RoZXJzIH0gPSBwcm9wcztcbiAgY29uc3QgZGl2Q2xzID0gY2xhc3NOYW1lcyhjbGFzc05hbWUsIHByZWZpeENscyk7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2RpdkNsc30gey4uLm90aGVyc30+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9kaXY+XG4gICk7XG59XG5cbmNsYXNzIEJhc2ljTGF5b3V0IGV4dGVuZHMgQ29tcG9uZW50PEJhc2ljUHJvcHMsIGFueT4ge1xuICBzdGF0aWMgY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gICAgc2lkZXJIb29rOiBQcm9wVHlwZXMub2JqZWN0LFxuICB9O1xuXG4gIHN0YXRlID0geyBzaWRlcnM6IFtdIH07XG5cbiAgZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIGNvbnN0IHsgc2lkZXJzIH0gPSB0aGlzLnN0YXRlO1xuICAgIHJldHVybiB7XG4gICAgICBzaWRlckhvb2s6IHtcbiAgICAgICAgYWRkU2lkZXI6IChpZDogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBzaWRlcnM6IFsuLi5zaWRlcnMsIGlkXSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVtb3ZlU2lkZXI6IChpZDogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBzaWRlcnM6IHNpZGVycy5maWx0ZXIoY3VycmVudElkID0+IGN1cnJlbnRJZCAhPT0gaWQpLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9O1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgcHJlZml4Q2xzLCBjbGFzc05hbWUsIGNoaWxkcmVuLCBoYXNTaWRlciwgLi4ub3RoZXJzIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgc2lkZXJzIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IGRpdkNscyA9IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBwcmVmaXhDbHMsIHtcbiAgICAgIFtgJHtwcmVmaXhDbHN9LWhhcy1zaWRlcmBdOiBoYXNTaWRlciB8fCBzaWRlcnMubGVuZ3RoID4gMCxcbiAgICB9KTtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9e2RpdkNsc30gey4uLm90aGVyc30+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuY29uc3QgTGF5b3V0OiBDb21wb25lbnRDbGFzczxCYXNpY1Byb3BzPiAmIHtcbiAgSGVhZGVyOiBDb21wb25lbnRDbGFzczxCYXNpY1Byb3BzPjtcbiAgRm9vdGVyOiBDb21wb25lbnRDbGFzczxCYXNpY1Byb3BzPjtcbiAgQ29udGVudDogQ29tcG9uZW50Q2xhc3M8QmFzaWNQcm9wcz47XG4gIFNpZGVyOiBDb21wb25lbnRDbGFzczxTaWRlclByb3BzPjtcbn0gPSBnZW5lcmF0b3Ioe1xuICBzdWZmaXhDbHM6ICdsYXlvdXQnLFxuICBkaXNwbGF5TmFtZTogJ0xheW91dCcsXG59KShCYXNpY0xheW91dCk7XG5cbmNvbnN0IEhlYWRlciA9IGdlbmVyYXRvcih7XG4gIHN1ZmZpeENsczogJ2xheW91dC1oZWFkZXInLFxuICBkaXNwbGF5TmFtZTogJ0hlYWRlcicsXG59KShCYXNpYyk7XG5cbmNvbnN0IEZvb3RlciA9IGdlbmVyYXRvcih7XG4gIHN1ZmZpeENsczogJ2xheW91dC1mb290ZXInLFxuICBkaXNwbGF5TmFtZTogJ0Zvb3RlcicsXG59KShCYXNpYyk7XG5cbmNvbnN0IENvbnRlbnQgPSBnZW5lcmF0b3Ioe1xuICBzdWZmaXhDbHM6ICdsYXlvdXQtY29udGVudCcsXG4gIGRpc3BsYXlOYW1lOiAnQ29udGVudCcsXG59KShCYXNpYyk7XG5cbkxheW91dC5IZWFkZXIgPSBIZWFkZXI7XG5MYXlvdXQuRm9vdGVyID0gRm9vdGVyO1xuTGF5b3V0LkNvbnRlbnQgPSBDb250ZW50O1xuXG5leHBvcnQgZGVmYXVsdCBMYXlvdXQ7XG4iXSwidmVyc2lvbiI6M30=