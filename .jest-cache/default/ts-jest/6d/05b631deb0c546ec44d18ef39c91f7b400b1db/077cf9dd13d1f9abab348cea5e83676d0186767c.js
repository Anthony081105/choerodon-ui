import { __decorate } from "tslib";
import React from 'react';
import PropTypes from 'prop-types';
import moment from 'moment';
import classNames from 'classnames';
import noop from 'lodash/noop';
import ViewComponent from '../core/ViewComponent';
import autobind from '../_util/autobind';
import Icon from '../icon';
import { $l } from '../locale-context';
import { stopEvent } from '../_util/EventManager';
export function alwaysValidDate() {
    return true;
}
export default class DaysView extends ViewComponent {
    render() {
        const { prefixCls, props: { className }, } = this;
        const classString = classNames(`${prefixCls}-view`, className);
        return (React.createElement("div", { className: classString },
            this.renderHeader(),
            this.renderBody(),
            this.renderFooter()));
    }
    handlePrevYearClick() {
        this.changeSelectedDate(this.getCloneDate().subtract(1, 'y'), "year" /* year */);
    }
    handlePrevMonthClick() {
        this.changeSelectedDate(this.getCloneDate().subtract(1, 'M'), "month" /* month */);
    }
    handleMonthSelect() {
        this.changeViewMode("month" /* month */);
    }
    handleYearSelect() {
        this.changeViewMode("year" /* year */);
    }
    handleNextYearClick() {
        this.changeSelectedDate(this.getCloneDate().add(1, 'y'), "year" /* year */);
    }
    handleNextMonthClick() {
        this.changeSelectedDate(this.getCloneDate().add(1, 'M'), "month" /* month */);
    }
    handleKeyDownHome(e) {
        stopEvent(e);
        this.changeSelectedDate(this.getCloneDate().startOf('M'));
    }
    handleKeyDownEnd(e) {
        stopEvent(e);
        this.changeSelectedDate(this.getCloneDate().endOf('M'));
    }
    handleKeyDownLeft(e) {
        stopEvent(e);
        if (e.altKey) {
            this.changeViewMode("month" /* month */);
        }
        else {
            this.changeSelectedDate(this.getCloneDate().subtract(1, 'd'));
        }
    }
    handleKeyDownRight(e) {
        stopEvent(e);
        if (!e.altKey) {
            this.changeSelectedDate(this.getCloneDate().add(1, 'd'));
        }
    }
    handleKeyDownUp(e) {
        stopEvent(e);
        this.changeSelectedDate(this.getCloneDate().subtract(1, 'w'));
    }
    handleKeyDownDown(e) {
        stopEvent(e);
        this.changeSelectedDate(this.getCloneDate().add(1, 'w'));
    }
    handleKeyDownPageUp(e) {
        stopEvent(e);
        this.changeSelectedDate(this.getCloneDate().subtract(1, e.altKey ? 'y' : 'M'));
    }
    handleKeyDownPageDown(e) {
        stopEvent(e);
        this.changeSelectedDate(this.getCloneDate().add(1, e.altKey ? 'y' : 'M'));
    }
    handleKeyDownEnter(e) {
        e.preventDefault();
        this.choose(this.props.date);
    }
    handleCellClick(date) {
        this.choose(date);
    }
    choose(date) {
        const { onSelect = noop } = this.props;
        onSelect(date);
    }
    changeSelectedDate(selectedDate, mode) {
        const { onSelectedDateChange = noop } = this.props;
        onSelectedDateChange(selectedDate, mode);
    }
    changeViewMode(mode) {
        const { onViewModeChange = noop } = this.props;
        onViewModeChange(mode);
    }
    renderHeader() {
        const { prefixCls, props: { date }, } = this;
        return (React.createElement("div", { className: `${prefixCls}-header` },
            React.createElement("a", { className: `${prefixCls}-prev-year`, onClick: this.handlePrevYearClick },
                React.createElement(Icon, { type: "first_page" })),
            React.createElement("a", { className: `${prefixCls}-prev-month`, onClick: this.handlePrevMonthClick },
                React.createElement(Icon, { type: "navigate_before" })),
            React.createElement("a", { className: `${prefixCls}-view-select`, onClick: this.handleMonthSelect }, date.localeData().monthsShort(date)),
            React.createElement("a", { className: `${prefixCls}-view-select`, onClick: this.handleYearSelect }, date.year()),
            React.createElement("a", { className: `${prefixCls}-next-year` },
                React.createElement(Icon, { type: "last_page", onClick: this.handleNextYearClick })),
            React.createElement("a", { className: `${prefixCls}-next-month`, onClick: this.handleNextMonthClick },
                React.createElement(Icon, { type: "navigate_next" }))));
    }
    renderBody() {
        return React.createElement("div", { className: `${this.prefixCls}-body` }, this.renderPanel());
    }
    renderPanel() {
        return (React.createElement("table", { className: this.getPanelClass(), cellSpacing: 0 },
            this.renderPanelHead(),
            React.createElement("tbody", null, this.renderPanelBody())));
    }
    renderPanelHead() {
        return (React.createElement("thead", null,
            React.createElement("tr", null, this.getDaysOfWeek())));
    }
    renderFooter() {
        const { prefixCls } = this;
        return (React.createElement("div", { className: `${prefixCls}-footer` },
            React.createElement("a", { onClick: this.choose.bind(this, moment().startOf('d')) }, $l('DatePicker', 'today'))));
    }
    renderCell(props) {
        return React.createElement("td", Object.assign({}, props));
    }
    renderInner(text) {
        const { prefixCls } = this;
        return React.createElement("div", { className: `${prefixCls}-cell-inner` }, text);
    }
    getFirstDay(date) {
        const firstDay = date.clone().subtract(1, 'M');
        return firstDay.date(firstDay.daysInMonth()).startOf('w');
    }
    renderPanelBody() {
        const { prefixCls, props: { date, renderer = this.renderCell, isValidDate = alwaysValidDate }, } = this;
        const selected = date.clone();
        const prevMonth = this.getFirstDay(date);
        const currentYear = date.year();
        const currentMonth = date.month();
        const lastDay = prevMonth.clone().add(42, 'd');
        const rows = [];
        let cells = [];
        while (prevMonth.isBefore(lastDay)) {
            const currentDate = prevMonth.clone();
            const isDisabled = !isValidDate(currentDate, selected);
            const className = classNames(`${prefixCls}-cell`, {
                [`${prefixCls}-old`]: prevMonth.year() < currentYear ||
                    (prevMonth.year() === currentYear && prevMonth.month() < currentMonth),
                [`${prefixCls}-new`]: prevMonth.year() > currentYear ||
                    (prevMonth.year() === currentYear && prevMonth.month() > currentMonth),
                [`${prefixCls}-selected`]: prevMonth.isSame(selected, 'd'),
                [`${prefixCls}-today`]: prevMonth.isSame(moment(), 'd'),
                [`${prefixCls}-disabled`]: isDisabled,
            });
            const text = String(currentDate.date());
            const dayProps = {
                key: prevMonth.format('M_D'),
                className,
                children: this.renderInner(text),
            };
            if (!isDisabled) {
                dayProps.onClick = this.handleCellClick.bind(this, currentDate);
            }
            cells.push(renderer(dayProps, text, currentDate, selected));
            if (cells.length === 7) {
                rows.push(React.createElement("tr", { key: prevMonth.format('M_D') }, cells));
                cells = [];
            }
            prevMonth.add(1, 'd');
        }
        return rows;
    }
    getPanelClass() {
        return `${this.prefixCls}-day-panel`;
    }
    getDaysOfWeek() {
        const locale = this.props.date.localeData();
        const days = locale.weekdaysMin();
        const first = locale.firstDayOfWeek();
        const dow = [];
        let i = 0;
        days.forEach(day => {
            dow[(7 + i++ - first) % 7] = (React.createElement("th", { key: day, title: day }, day));
        });
        return dow;
    }
    getCloneDate() {
        return this.props.date.clone();
    }
}
DaysView.displayName = 'DaysView';
DaysView.propTypes = {
    date: PropTypes.object,
    renderer: PropTypes.func,
    isValidDate: PropTypes.func,
    onSelect: PropTypes.func,
    onSelectedDateChange: PropTypes.func,
    onViewModeChange: PropTypes.func,
    ...ViewComponent.propTypes,
};
DaysView.defaultProps = {
    suffixCls: 'calendar',
};
DaysView.type = "date" /* date */;
__decorate([
    autobind
], DaysView.prototype, "handlePrevYearClick", null);
__decorate([
    autobind
], DaysView.prototype, "handlePrevMonthClick", null);
__decorate([
    autobind
], DaysView.prototype, "handleMonthSelect", null);
__decorate([
    autobind
], DaysView.prototype, "handleYearSelect", null);
__decorate([
    autobind
], DaysView.prototype, "handleNextYearClick", null);
__decorate([
    autobind
], DaysView.prototype, "handleNextMonthClick", null);
__decorate([
    autobind
], DaysView.prototype, "renderCell", null);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMtcHJvL2RhdGUtcGlja2VyL0RheXNWaWV3LnRzeCIsIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxLQUFvQixNQUFNLE9BQU8sQ0FBQztBQUN6QyxPQUFPLFNBQVMsTUFBTSxZQUFZLENBQUM7QUFDbkMsT0FBTyxNQUFrQixNQUFNLFFBQVEsQ0FBQztBQUN4QyxPQUFPLFVBQVUsTUFBTSxZQUFZLENBQUM7QUFDcEMsT0FBTyxJQUFJLE1BQU0sYUFBYSxDQUFDO0FBQy9CLE9BQU8sYUFBcUMsTUFBTSx1QkFBdUIsQ0FBQztBQUMxRSxPQUFPLFFBQVEsTUFBTSxtQkFBbUIsQ0FBQztBQUN6QyxPQUFPLElBQUksTUFBTSxTQUFTLENBQUM7QUFJM0IsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUVsRCxNQUFNLFVBQVUsZUFBZTtJQUM3QixPQUFPLElBQUksQ0FBQztBQUNkLENBQUM7QUFnQkQsTUFBTSxDQUFDLE9BQU8sT0FBTyxRQUFTLFNBQVEsYUFBNEI7SUFvQmhFLE1BQU07UUFDSixNQUFNLEVBQ0osU0FBUyxFQUNULEtBQUssRUFBRSxFQUFFLFNBQVMsRUFBRSxHQUNyQixHQUFHLElBQUksQ0FBQztRQUNULE1BQU0sV0FBVyxHQUFHLFVBQVUsQ0FBQyxHQUFHLFNBQVMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQy9ELE9BQU8sQ0FDTCw2QkFBSyxTQUFTLEVBQUUsV0FBVztZQUN4QixJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ25CLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDakIsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUNoQixDQUNQLENBQUM7SUFDSixDQUFDO0lBR0QsbUJBQW1CO1FBQ2pCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsb0JBQWdCLENBQUM7SUFDL0UsQ0FBQztJQUdELG9CQUFvQjtRQUNsQixJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLHNCQUFpQixDQUFDO0lBQ2hGLENBQUM7SUFHRCxpQkFBaUI7UUFDZixJQUFJLENBQUMsY0FBYyxxQkFBZ0IsQ0FBQztJQUN0QyxDQUFDO0lBR0QsZ0JBQWdCO1FBQ2QsSUFBSSxDQUFDLGNBQWMsbUJBQWUsQ0FBQztJQUNyQyxDQUFDO0lBR0QsbUJBQW1CO1FBQ2pCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsb0JBQWdCLENBQUM7SUFDMUUsQ0FBQztJQUdELG9CQUFvQjtRQUNsQixJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLHNCQUFpQixDQUFDO0lBQzNFLENBQUM7SUFFRCxpQkFBaUIsQ0FBQyxDQUFDO1FBQ2pCLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNiLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDNUQsQ0FBQztJQUVELGdCQUFnQixDQUFDLENBQUM7UUFDaEIsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2IsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBRUQsaUJBQWlCLENBQUMsQ0FBQztRQUNqQixTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDYixJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUU7WUFDWixJQUFJLENBQUMsY0FBYyxxQkFBZ0IsQ0FBQztTQUNyQzthQUFNO1lBQ0wsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDL0Q7SUFDSCxDQUFDO0lBRUQsa0JBQWtCLENBQUMsQ0FBQztRQUNsQixTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDYixJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRTtZQUNiLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQzFEO0lBQ0gsQ0FBQztJQUVELGVBQWUsQ0FBQyxDQUFDO1FBQ2YsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2IsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVELGlCQUFpQixDQUFDLENBQUM7UUFDakIsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2IsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUVELG1CQUFtQixDQUFDLENBQUM7UUFDbkIsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2IsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNqRixDQUFDO0lBRUQscUJBQXFCLENBQUMsQ0FBQztRQUNyQixTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDYixJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzVFLENBQUM7SUFFRCxrQkFBa0IsQ0FBQyxDQUFDO1FBQ2xCLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUNuQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVELGVBQWUsQ0FBQyxJQUFZO1FBQzFCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDcEIsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFZO1FBQ2pCLE1BQU0sRUFBRSxRQUFRLEdBQUcsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUN2QyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakIsQ0FBQztJQUVELGtCQUFrQixDQUFDLFlBQW9CLEVBQUUsSUFBZTtRQUN0RCxNQUFNLEVBQUUsb0JBQW9CLEdBQUcsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUNuRCxvQkFBb0IsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVELGNBQWMsQ0FBQyxJQUFjO1FBQzNCLE1BQU0sRUFBRSxnQkFBZ0IsR0FBRyxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQy9DLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3pCLENBQUM7SUFFRCxZQUFZO1FBQ1YsTUFBTSxFQUNKLFNBQVMsRUFDVCxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsR0FDaEIsR0FBRyxJQUFJLENBQUM7UUFDVCxPQUFPLENBQ0wsNkJBQUssU0FBUyxFQUFFLEdBQUcsU0FBUyxTQUFTO1lBQ25DLDJCQUFHLFNBQVMsRUFBRSxHQUFHLFNBQVMsWUFBWSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsbUJBQW1CO2dCQUN2RSxvQkFBQyxJQUFJLElBQUMsSUFBSSxFQUFDLFlBQVksR0FBRyxDQUN4QjtZQUNKLDJCQUFHLFNBQVMsRUFBRSxHQUFHLFNBQVMsYUFBYSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsb0JBQW9CO2dCQUN6RSxvQkFBQyxJQUFJLElBQUMsSUFBSSxFQUFDLGlCQUFpQixHQUFHLENBQzdCO1lBQ0osMkJBQUcsU0FBUyxFQUFFLEdBQUcsU0FBUyxjQUFjLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxpQkFBaUIsSUFDdEUsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FDbEM7WUFDSiwyQkFBRyxTQUFTLEVBQUUsR0FBRyxTQUFTLGNBQWMsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixJQUNyRSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQ1Y7WUFDSiwyQkFBRyxTQUFTLEVBQUUsR0FBRyxTQUFTLFlBQVk7Z0JBQ3BDLG9CQUFDLElBQUksSUFBQyxJQUFJLEVBQUMsV0FBVyxFQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsbUJBQW1CLEdBQUksQ0FDMUQ7WUFDSiwyQkFBRyxTQUFTLEVBQUUsR0FBRyxTQUFTLGFBQWEsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLG9CQUFvQjtnQkFDekUsb0JBQUMsSUFBSSxJQUFDLElBQUksRUFBQyxlQUFlLEdBQUcsQ0FDM0IsQ0FDQSxDQUNQLENBQUM7SUFDSixDQUFDO0lBRUQsVUFBVTtRQUNSLE9BQU8sNkJBQUssU0FBUyxFQUFFLEdBQUcsSUFBSSxDQUFDLFNBQVMsT0FBTyxJQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBTyxDQUFDO0lBQzlFLENBQUM7SUFFRCxXQUFXO1FBQ1QsT0FBTyxDQUNMLCtCQUFPLFNBQVMsRUFBRSxJQUFJLENBQUMsYUFBYSxFQUFFLEVBQUUsV0FBVyxFQUFFLENBQUM7WUFDbkQsSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUN2QixtQ0FBUSxJQUFJLENBQUMsZUFBZSxFQUFFLENBQVMsQ0FDakMsQ0FDVCxDQUFDO0lBQ0osQ0FBQztJQUVELGVBQWU7UUFDYixPQUFPLENBQ0w7WUFDRSxnQ0FBSyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQU0sQ0FDekIsQ0FDVCxDQUFDO0lBQ0osQ0FBQztJQUVELFlBQVk7UUFDVixNQUFNLEVBQUUsU0FBUyxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBQzNCLE9BQU8sQ0FDTCw2QkFBSyxTQUFTLEVBQUUsR0FBRyxTQUFTLFNBQVM7WUFDbkMsMkJBQUcsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBRyxFQUFFLENBQUMsWUFBWSxFQUFFLE9BQU8sQ0FBQyxDQUFLLENBQ3RGLENBQ1AsQ0FBQztJQUNKLENBQUM7SUFHRCxVQUFVLENBQUMsS0FBYTtRQUN0QixPQUFPLDRDQUFRLEtBQUssRUFBSSxDQUFDO0lBQzNCLENBQUM7SUFFRCxXQUFXLENBQUMsSUFBSTtRQUNkLE1BQU0sRUFBRSxTQUFTLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFDM0IsT0FBTyw2QkFBSyxTQUFTLEVBQUUsR0FBRyxTQUFTLGFBQWEsSUFBRyxJQUFJLENBQU8sQ0FBQztJQUNqRSxDQUFDO0lBRUQsV0FBVyxDQUFDLElBQUk7UUFDZCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUMvQyxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFRCxlQUFlO1FBQ2IsTUFBTSxFQUNKLFNBQVMsRUFDVCxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsV0FBVyxHQUFHLGVBQWUsRUFBRSxHQUMzRSxHQUFHLElBQUksQ0FBQztRQUNULE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUM5QixNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pDLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNoQyxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDbEMsTUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDL0MsTUFBTSxJQUFJLEdBQWdCLEVBQUUsQ0FBQztRQUM3QixJQUFJLEtBQUssR0FBZ0IsRUFBRSxDQUFDO1FBRTVCLE9BQU8sU0FBUyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUNsQyxNQUFNLFdBQVcsR0FBRyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDdEMsTUFBTSxVQUFVLEdBQUcsQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ3ZELE1BQU0sU0FBUyxHQUFHLFVBQVUsQ0FBQyxHQUFHLFNBQVMsT0FBTyxFQUFFO2dCQUNoRCxDQUFDLEdBQUcsU0FBUyxNQUFNLENBQUMsRUFDbEIsU0FBUyxDQUFDLElBQUksRUFBRSxHQUFHLFdBQVc7b0JBQzlCLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxLQUFLLFdBQVcsSUFBSSxTQUFTLENBQUMsS0FBSyxFQUFFLEdBQUcsWUFBWSxDQUFDO2dCQUN4RSxDQUFDLEdBQUcsU0FBUyxNQUFNLENBQUMsRUFDbEIsU0FBUyxDQUFDLElBQUksRUFBRSxHQUFHLFdBQVc7b0JBQzlCLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxLQUFLLFdBQVcsSUFBSSxTQUFTLENBQUMsS0FBSyxFQUFFLEdBQUcsWUFBWSxDQUFDO2dCQUN4RSxDQUFDLEdBQUcsU0FBUyxXQUFXLENBQUMsRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUM7Z0JBQzFELENBQUMsR0FBRyxTQUFTLFFBQVEsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUUsR0FBRyxDQUFDO2dCQUN2RCxDQUFDLEdBQUcsU0FBUyxXQUFXLENBQUMsRUFBRSxVQUFVO2FBQ3RDLENBQUMsQ0FBQztZQUNILE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztZQUN4QyxNQUFNLFFBQVEsR0FBUTtnQkFDcEIsR0FBRyxFQUFFLFNBQVMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO2dCQUM1QixTQUFTO2dCQUNULFFBQVEsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQzthQUNqQyxDQUFDO1lBRUYsSUFBSSxDQUFDLFVBQVUsRUFBRTtnQkFDZixRQUFRLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQzthQUNqRTtZQUVELEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFFNUQsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtnQkFDdEIsSUFBSSxDQUFDLElBQUksQ0FBQyw0QkFBSSxHQUFHLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBRyxLQUFLLENBQU0sQ0FBQyxDQUFDO2dCQUMxRCxLQUFLLEdBQUcsRUFBRSxDQUFDO2FBQ1o7WUFFRCxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztTQUN2QjtRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELGFBQWE7UUFDWCxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsWUFBWSxDQUFDO0lBQ3ZDLENBQUM7SUFFRCxhQUFhO1FBQ1gsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDNUMsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ2xDLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN0QyxNQUFNLEdBQUcsR0FBZ0IsRUFBRSxDQUFDO1FBQzVCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNWLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDakIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQzNCLDRCQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsSUFDckIsR0FBRyxDQUNELENBQ04sQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDO0lBRUQsWUFBWTtRQUNWLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDakMsQ0FBQzs7QUF6Uk0sb0JBQVcsR0FBRyxVQUFVLENBQUM7QUFFekIsa0JBQVMsR0FBRztJQUNqQixJQUFJLEVBQUUsU0FBUyxDQUFDLE1BQU07SUFDdEIsUUFBUSxFQUFFLFNBQVMsQ0FBQyxJQUFJO0lBQ3hCLFdBQVcsRUFBRSxTQUFTLENBQUMsSUFBSTtJQUMzQixRQUFRLEVBQUUsU0FBUyxDQUFDLElBQUk7SUFDeEIsb0JBQW9CLEVBQUUsU0FBUyxDQUFDLElBQUk7SUFDcEMsZ0JBQWdCLEVBQUUsU0FBUyxDQUFDLElBQUk7SUFDaEMsR0FBRyxhQUFhLENBQUMsU0FBUztDQUMzQixDQUFDO0FBRUsscUJBQVksR0FBRztJQUNwQixTQUFTLEVBQUUsVUFBVTtDQUN0QixDQUFDO0FBRUssYUFBSSxxQkFBa0I7QUFrQjdCO0lBREMsUUFBUTttREFHUjtBQUdEO0lBREMsUUFBUTtvREFHUjtBQUdEO0lBREMsUUFBUTtpREFHUjtBQUdEO0lBREMsUUFBUTtnREFHUjtBQUdEO0lBREMsUUFBUTttREFHUjtBQUdEO0lBREMsUUFBUTtvREFHUjtBQW9JRDtJQURDLFFBQVE7MENBR1IiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMtcHJvL2RhdGUtcGlja2VyL0RheXNWaWV3LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBtb21lbnQsIHsgTW9tZW50IH0gZnJvbSAnbW9tZW50JztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IG5vb3AgZnJvbSAnbG9kYXNoL25vb3AnO1xuaW1wb3J0IFZpZXdDb21wb25lbnQsIHsgVmlld0NvbXBvbmVudFByb3BzIH0gZnJvbSAnLi4vY29yZS9WaWV3Q29tcG9uZW50JztcbmltcG9ydCBhdXRvYmluZCBmcm9tICcuLi9fdXRpbC9hdXRvYmluZCc7XG5pbXBvcnQgSWNvbiBmcm9tICcuLi9pY29uJztcbmltcG9ydCB7IERhdGVQaWNrZXJLZXlib2FyZEV2ZW50LCBSZW5kZXJGdW5jdGlvbiwgVGltZVN0ZXAgfSBmcm9tICcuL0RhdGVQaWNrZXInO1xuaW1wb3J0IHsgVmlld01vZGUgfSBmcm9tICcuL2VudW0nO1xuaW1wb3J0IHsgRmllbGRUeXBlIH0gZnJvbSAnLi4vZGF0YS1zZXQvZW51bSc7XG5pbXBvcnQgeyAkbCB9IGZyb20gJy4uL2xvY2FsZS1jb250ZXh0JztcbmltcG9ydCB7IHN0b3BFdmVudCB9IGZyb20gJy4uL191dGlsL0V2ZW50TWFuYWdlcic7XG5cbmV4cG9ydCBmdW5jdGlvbiBhbHdheXNWYWxpZERhdGUoKSB7XG4gIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERhdGVWaWV3UHJvcHMgZXh0ZW5kcyBWaWV3Q29tcG9uZW50UHJvcHMge1xuICBkYXRlOiBNb21lbnQ7XG4gIG1pbj86IE1vbWVudDtcbiAgbWF4PzogTW9tZW50O1xuICBtb2RlOiBWaWV3TW9kZTtcbiAgZm9ybWF0OiBzdHJpbmc7XG4gIHN0ZXA6IFRpbWVTdGVwO1xuICByZW5kZXJlcj86IFJlbmRlckZ1bmN0aW9uO1xuICBpc1ZhbGlkRGF0ZT86IChjdXJyZW50RGF0ZTogTW9tZW50LCBzZWxlY3RlZDogTW9tZW50KSA9PiBib29sZWFuO1xuICBvblNlbGVjdD86IChzZWxlY3RlZERhdGU6IE1vbWVudCkgPT4gdm9pZDtcbiAgb25TZWxlY3RlZERhdGVDaGFuZ2U/OiAoc2VsZWN0ZWREYXRlOiBNb21lbnQsIG1vZGU/OiBWaWV3TW9kZSkgPT4gdm9pZDtcbiAgb25WaWV3TW9kZUNoYW5nZT86IChtb2RlOiBWaWV3TW9kZSkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGF5c1ZpZXcgZXh0ZW5kcyBWaWV3Q29tcG9uZW50PERhdGVWaWV3UHJvcHM+XG4gIGltcGxlbWVudHMgRGF0ZVBpY2tlcktleWJvYXJkRXZlbnQge1xuICBzdGF0aWMgZGlzcGxheU5hbWUgPSAnRGF5c1ZpZXcnO1xuXG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgZGF0ZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICByZW5kZXJlcjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgaXNWYWxpZERhdGU6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9uU2VsZWN0OiBQcm9wVHlwZXMuZnVuYyxcbiAgICBvblNlbGVjdGVkRGF0ZUNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25WaWV3TW9kZUNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgLi4uVmlld0NvbXBvbmVudC5wcm9wVHlwZXMsXG4gIH07XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBzdWZmaXhDbHM6ICdjYWxlbmRhcicsXG4gIH07XG5cbiAgc3RhdGljIHR5cGUgPSBGaWVsZFR5cGUuZGF0ZTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgcHJlZml4Q2xzLFxuICAgICAgcHJvcHM6IHsgY2xhc3NOYW1lIH0sXG4gICAgfSA9IHRoaXM7XG4gICAgY29uc3QgY2xhc3NTdHJpbmcgPSBjbGFzc05hbWVzKGAke3ByZWZpeENsc30tdmlld2AsIGNsYXNzTmFtZSk7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc1N0cmluZ30+XG4gICAgICAgIHt0aGlzLnJlbmRlckhlYWRlcigpfVxuICAgICAgICB7dGhpcy5yZW5kZXJCb2R5KCl9XG4gICAgICAgIHt0aGlzLnJlbmRlckZvb3RlcigpfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBoYW5kbGVQcmV2WWVhckNsaWNrKCkge1xuICAgIHRoaXMuY2hhbmdlU2VsZWN0ZWREYXRlKHRoaXMuZ2V0Q2xvbmVEYXRlKCkuc3VidHJhY3QoMSwgJ3knKSwgVmlld01vZGUueWVhcik7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgaGFuZGxlUHJldk1vbnRoQ2xpY2soKSB7XG4gICAgdGhpcy5jaGFuZ2VTZWxlY3RlZERhdGUodGhpcy5nZXRDbG9uZURhdGUoKS5zdWJ0cmFjdCgxLCAnTScpLCBWaWV3TW9kZS5tb250aCk7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgaGFuZGxlTW9udGhTZWxlY3QoKSB7XG4gICAgdGhpcy5jaGFuZ2VWaWV3TW9kZShWaWV3TW9kZS5tb250aCk7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgaGFuZGxlWWVhclNlbGVjdCgpIHtcbiAgICB0aGlzLmNoYW5nZVZpZXdNb2RlKFZpZXdNb2RlLnllYXIpO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGhhbmRsZU5leHRZZWFyQ2xpY2soKSB7XG4gICAgdGhpcy5jaGFuZ2VTZWxlY3RlZERhdGUodGhpcy5nZXRDbG9uZURhdGUoKS5hZGQoMSwgJ3knKSwgVmlld01vZGUueWVhcik7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgaGFuZGxlTmV4dE1vbnRoQ2xpY2soKSB7XG4gICAgdGhpcy5jaGFuZ2VTZWxlY3RlZERhdGUodGhpcy5nZXRDbG9uZURhdGUoKS5hZGQoMSwgJ00nKSwgVmlld01vZGUubW9udGgpO1xuICB9XG5cbiAgaGFuZGxlS2V5RG93bkhvbWUoZSkge1xuICAgIHN0b3BFdmVudChlKTtcbiAgICB0aGlzLmNoYW5nZVNlbGVjdGVkRGF0ZSh0aGlzLmdldENsb25lRGF0ZSgpLnN0YXJ0T2YoJ00nKSk7XG4gIH1cblxuICBoYW5kbGVLZXlEb3duRW5kKGUpIHtcbiAgICBzdG9wRXZlbnQoZSk7XG4gICAgdGhpcy5jaGFuZ2VTZWxlY3RlZERhdGUodGhpcy5nZXRDbG9uZURhdGUoKS5lbmRPZignTScpKTtcbiAgfVxuXG4gIGhhbmRsZUtleURvd25MZWZ0KGUpIHtcbiAgICBzdG9wRXZlbnQoZSk7XG4gICAgaWYgKGUuYWx0S2V5KSB7XG4gICAgICB0aGlzLmNoYW5nZVZpZXdNb2RlKFZpZXdNb2RlLm1vbnRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jaGFuZ2VTZWxlY3RlZERhdGUodGhpcy5nZXRDbG9uZURhdGUoKS5zdWJ0cmFjdCgxLCAnZCcpKTtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVLZXlEb3duUmlnaHQoZSkge1xuICAgIHN0b3BFdmVudChlKTtcbiAgICBpZiAoIWUuYWx0S2V5KSB7XG4gICAgICB0aGlzLmNoYW5nZVNlbGVjdGVkRGF0ZSh0aGlzLmdldENsb25lRGF0ZSgpLmFkZCgxLCAnZCcpKTtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVLZXlEb3duVXAoZSkge1xuICAgIHN0b3BFdmVudChlKTtcbiAgICB0aGlzLmNoYW5nZVNlbGVjdGVkRGF0ZSh0aGlzLmdldENsb25lRGF0ZSgpLnN1YnRyYWN0KDEsICd3JykpO1xuICB9XG5cbiAgaGFuZGxlS2V5RG93bkRvd24oZSkge1xuICAgIHN0b3BFdmVudChlKTtcbiAgICB0aGlzLmNoYW5nZVNlbGVjdGVkRGF0ZSh0aGlzLmdldENsb25lRGF0ZSgpLmFkZCgxLCAndycpKTtcbiAgfVxuXG4gIGhhbmRsZUtleURvd25QYWdlVXAoZSkge1xuICAgIHN0b3BFdmVudChlKTtcbiAgICB0aGlzLmNoYW5nZVNlbGVjdGVkRGF0ZSh0aGlzLmdldENsb25lRGF0ZSgpLnN1YnRyYWN0KDEsIGUuYWx0S2V5ID8gJ3knIDogJ00nKSk7XG4gIH1cblxuICBoYW5kbGVLZXlEb3duUGFnZURvd24oZSkge1xuICAgIHN0b3BFdmVudChlKTtcbiAgICB0aGlzLmNoYW5nZVNlbGVjdGVkRGF0ZSh0aGlzLmdldENsb25lRGF0ZSgpLmFkZCgxLCBlLmFsdEtleSA/ICd5JyA6ICdNJykpO1xuICB9XG5cbiAgaGFuZGxlS2V5RG93bkVudGVyKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgdGhpcy5jaG9vc2UodGhpcy5wcm9wcy5kYXRlKTtcbiAgfVxuXG4gIGhhbmRsZUNlbGxDbGljayhkYXRlOiBNb21lbnQpOiB2b2lkIHtcbiAgICB0aGlzLmNob29zZShkYXRlKTtcbiAgfVxuXG4gIGNob29zZShkYXRlOiBNb21lbnQpIHtcbiAgICBjb25zdCB7IG9uU2VsZWN0ID0gbm9vcCB9ID0gdGhpcy5wcm9wcztcbiAgICBvblNlbGVjdChkYXRlKTtcbiAgfVxuXG4gIGNoYW5nZVNlbGVjdGVkRGF0ZShzZWxlY3RlZERhdGU6IE1vbWVudCwgbW9kZT86IFZpZXdNb2RlKSB7XG4gICAgY29uc3QgeyBvblNlbGVjdGVkRGF0ZUNoYW5nZSA9IG5vb3AgfSA9IHRoaXMucHJvcHM7XG4gICAgb25TZWxlY3RlZERhdGVDaGFuZ2Uoc2VsZWN0ZWREYXRlLCBtb2RlKTtcbiAgfVxuXG4gIGNoYW5nZVZpZXdNb2RlKG1vZGU6IFZpZXdNb2RlKSB7XG4gICAgY29uc3QgeyBvblZpZXdNb2RlQ2hhbmdlID0gbm9vcCB9ID0gdGhpcy5wcm9wcztcbiAgICBvblZpZXdNb2RlQ2hhbmdlKG1vZGUpO1xuICB9XG5cbiAgcmVuZGVySGVhZGVyKCk6IFJlYWN0Tm9kZSB7XG4gICAgY29uc3Qge1xuICAgICAgcHJlZml4Q2xzLFxuICAgICAgcHJvcHM6IHsgZGF0ZSB9LFxuICAgIH0gPSB0aGlzO1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17YCR7cHJlZml4Q2xzfS1oZWFkZXJgfT5cbiAgICAgICAgPGEgY2xhc3NOYW1lPXtgJHtwcmVmaXhDbHN9LXByZXYteWVhcmB9IG9uQ2xpY2s9e3RoaXMuaGFuZGxlUHJldlllYXJDbGlja30+XG4gICAgICAgICAgPEljb24gdHlwZT1cImZpcnN0X3BhZ2VcIiAvPlxuICAgICAgICA8L2E+XG4gICAgICAgIDxhIGNsYXNzTmFtZT17YCR7cHJlZml4Q2xzfS1wcmV2LW1vbnRoYH0gb25DbGljaz17dGhpcy5oYW5kbGVQcmV2TW9udGhDbGlja30+XG4gICAgICAgICAgPEljb24gdHlwZT1cIm5hdmlnYXRlX2JlZm9yZVwiIC8+XG4gICAgICAgIDwvYT5cbiAgICAgICAgPGEgY2xhc3NOYW1lPXtgJHtwcmVmaXhDbHN9LXZpZXctc2VsZWN0YH0gb25DbGljaz17dGhpcy5oYW5kbGVNb250aFNlbGVjdH0+XG4gICAgICAgICAge2RhdGUubG9jYWxlRGF0YSgpLm1vbnRoc1Nob3J0KGRhdGUpfVxuICAgICAgICA8L2E+XG4gICAgICAgIDxhIGNsYXNzTmFtZT17YCR7cHJlZml4Q2xzfS12aWV3LXNlbGVjdGB9IG9uQ2xpY2s9e3RoaXMuaGFuZGxlWWVhclNlbGVjdH0+XG4gICAgICAgICAge2RhdGUueWVhcigpfVxuICAgICAgICA8L2E+XG4gICAgICAgIDxhIGNsYXNzTmFtZT17YCR7cHJlZml4Q2xzfS1uZXh0LXllYXJgfT5cbiAgICAgICAgICA8SWNvbiB0eXBlPVwibGFzdF9wYWdlXCIgb25DbGljaz17dGhpcy5oYW5kbGVOZXh0WWVhckNsaWNrfSAvPlxuICAgICAgICA8L2E+XG4gICAgICAgIDxhIGNsYXNzTmFtZT17YCR7cHJlZml4Q2xzfS1uZXh0LW1vbnRoYH0gb25DbGljaz17dGhpcy5oYW5kbGVOZXh0TW9udGhDbGlja30+XG4gICAgICAgICAgPEljb24gdHlwZT1cIm5hdmlnYXRlX25leHRcIiAvPlxuICAgICAgICA8L2E+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyQm9keSgpIHtcbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9e2Ake3RoaXMucHJlZml4Q2xzfS1ib2R5YH0+e3RoaXMucmVuZGVyUGFuZWwoKX08L2Rpdj47XG4gIH1cblxuICByZW5kZXJQYW5lbCgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPHRhYmxlIGNsYXNzTmFtZT17dGhpcy5nZXRQYW5lbENsYXNzKCl9IGNlbGxTcGFjaW5nPXswfT5cbiAgICAgICAge3RoaXMucmVuZGVyUGFuZWxIZWFkKCl9XG4gICAgICAgIDx0Ym9keT57dGhpcy5yZW5kZXJQYW5lbEJvZHkoKX08L3Rib2R5PlxuICAgICAgPC90YWJsZT5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyUGFuZWxIZWFkKCk6IFJlYWN0Tm9kZSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDx0aGVhZD5cbiAgICAgICAgPHRyPnt0aGlzLmdldERheXNPZldlZWsoKX08L3RyPlxuICAgICAgPC90aGVhZD5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyRm9vdGVyKCk6IFJlYWN0Tm9kZSB7XG4gICAgY29uc3QgeyBwcmVmaXhDbHMgfSA9IHRoaXM7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtgJHtwcmVmaXhDbHN9LWZvb3RlcmB9PlxuICAgICAgICA8YSBvbkNsaWNrPXt0aGlzLmNob29zZS5iaW5kKHRoaXMsIG1vbWVudCgpLnN0YXJ0T2YoJ2QnKSl9PnskbCgnRGF0ZVBpY2tlcicsICd0b2RheScpfTwvYT5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgcmVuZGVyQ2VsbChwcm9wczogb2JqZWN0KTogUmVhY3ROb2RlIHtcbiAgICByZXR1cm4gPHRkIHsuLi5wcm9wc30gLz47XG4gIH1cblxuICByZW5kZXJJbm5lcih0ZXh0KSB7XG4gICAgY29uc3QgeyBwcmVmaXhDbHMgfSA9IHRoaXM7XG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPXtgJHtwcmVmaXhDbHN9LWNlbGwtaW5uZXJgfT57dGV4dH08L2Rpdj47XG4gIH1cblxuICBnZXRGaXJzdERheShkYXRlKSB7XG4gICAgY29uc3QgZmlyc3REYXkgPSBkYXRlLmNsb25lKCkuc3VidHJhY3QoMSwgJ00nKTtcbiAgICByZXR1cm4gZmlyc3REYXkuZGF0ZShmaXJzdERheS5kYXlzSW5Nb250aCgpKS5zdGFydE9mKCd3Jyk7XG4gIH1cblxuICByZW5kZXJQYW5lbEJvZHkoKTogUmVhY3ROb2RlIHtcbiAgICBjb25zdCB7XG4gICAgICBwcmVmaXhDbHMsXG4gICAgICBwcm9wczogeyBkYXRlLCByZW5kZXJlciA9IHRoaXMucmVuZGVyQ2VsbCwgaXNWYWxpZERhdGUgPSBhbHdheXNWYWxpZERhdGUgfSxcbiAgICB9ID0gdGhpcztcbiAgICBjb25zdCBzZWxlY3RlZCA9IGRhdGUuY2xvbmUoKTtcbiAgICBjb25zdCBwcmV2TW9udGggPSB0aGlzLmdldEZpcnN0RGF5KGRhdGUpO1xuICAgIGNvbnN0IGN1cnJlbnRZZWFyID0gZGF0ZS55ZWFyKCk7XG4gICAgY29uc3QgY3VycmVudE1vbnRoID0gZGF0ZS5tb250aCgpO1xuICAgIGNvbnN0IGxhc3REYXkgPSBwcmV2TW9udGguY2xvbmUoKS5hZGQoNDIsICdkJyk7XG4gICAgY29uc3Qgcm93czogUmVhY3ROb2RlW10gPSBbXTtcbiAgICBsZXQgY2VsbHM6IFJlYWN0Tm9kZVtdID0gW107XG5cbiAgICB3aGlsZSAocHJldk1vbnRoLmlzQmVmb3JlKGxhc3REYXkpKSB7XG4gICAgICBjb25zdCBjdXJyZW50RGF0ZSA9IHByZXZNb250aC5jbG9uZSgpO1xuICAgICAgY29uc3QgaXNEaXNhYmxlZCA9ICFpc1ZhbGlkRGF0ZShjdXJyZW50RGF0ZSwgc2VsZWN0ZWQpO1xuICAgICAgY29uc3QgY2xhc3NOYW1lID0gY2xhc3NOYW1lcyhgJHtwcmVmaXhDbHN9LWNlbGxgLCB7XG4gICAgICAgIFtgJHtwcmVmaXhDbHN9LW9sZGBdOlxuICAgICAgICAgIHByZXZNb250aC55ZWFyKCkgPCBjdXJyZW50WWVhciB8fFxuICAgICAgICAgIChwcmV2TW9udGgueWVhcigpID09PSBjdXJyZW50WWVhciAmJiBwcmV2TW9udGgubW9udGgoKSA8IGN1cnJlbnRNb250aCksXG4gICAgICAgIFtgJHtwcmVmaXhDbHN9LW5ld2BdOlxuICAgICAgICAgIHByZXZNb250aC55ZWFyKCkgPiBjdXJyZW50WWVhciB8fFxuICAgICAgICAgIChwcmV2TW9udGgueWVhcigpID09PSBjdXJyZW50WWVhciAmJiBwcmV2TW9udGgubW9udGgoKSA+IGN1cnJlbnRNb250aCksXG4gICAgICAgIFtgJHtwcmVmaXhDbHN9LXNlbGVjdGVkYF06IHByZXZNb250aC5pc1NhbWUoc2VsZWN0ZWQsICdkJyksXG4gICAgICAgIFtgJHtwcmVmaXhDbHN9LXRvZGF5YF06IHByZXZNb250aC5pc1NhbWUobW9tZW50KCksICdkJyksXG4gICAgICAgIFtgJHtwcmVmaXhDbHN9LWRpc2FibGVkYF06IGlzRGlzYWJsZWQsXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IHRleHQgPSBTdHJpbmcoY3VycmVudERhdGUuZGF0ZSgpKTtcbiAgICAgIGNvbnN0IGRheVByb3BzOiBhbnkgPSB7XG4gICAgICAgIGtleTogcHJldk1vbnRoLmZvcm1hdCgnTV9EJyksXG4gICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICAgY2hpbGRyZW46IHRoaXMucmVuZGVySW5uZXIodGV4dCksXG4gICAgICB9O1xuXG4gICAgICBpZiAoIWlzRGlzYWJsZWQpIHtcbiAgICAgICAgZGF5UHJvcHMub25DbGljayA9IHRoaXMuaGFuZGxlQ2VsbENsaWNrLmJpbmQodGhpcywgY3VycmVudERhdGUpO1xuICAgICAgfVxuXG4gICAgICBjZWxscy5wdXNoKHJlbmRlcmVyKGRheVByb3BzLCB0ZXh0LCBjdXJyZW50RGF0ZSwgc2VsZWN0ZWQpKTtcblxuICAgICAgaWYgKGNlbGxzLmxlbmd0aCA9PT0gNykge1xuICAgICAgICByb3dzLnB1c2goPHRyIGtleT17cHJldk1vbnRoLmZvcm1hdCgnTV9EJyl9PntjZWxsc308L3RyPik7XG4gICAgICAgIGNlbGxzID0gW107XG4gICAgICB9XG5cbiAgICAgIHByZXZNb250aC5hZGQoMSwgJ2QnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcm93cztcbiAgfVxuXG4gIGdldFBhbmVsQ2xhc3MoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYCR7dGhpcy5wcmVmaXhDbHN9LWRheS1wYW5lbGA7XG4gIH1cblxuICBnZXREYXlzT2ZXZWVrKCk6IFJlYWN0Tm9kZVtdIHtcbiAgICBjb25zdCBsb2NhbGUgPSB0aGlzLnByb3BzLmRhdGUubG9jYWxlRGF0YSgpO1xuICAgIGNvbnN0IGRheXMgPSBsb2NhbGUud2Vla2RheXNNaW4oKTtcbiAgICBjb25zdCBmaXJzdCA9IGxvY2FsZS5maXJzdERheU9mV2VlaygpO1xuICAgIGNvbnN0IGRvdzogUmVhY3ROb2RlW10gPSBbXTtcbiAgICBsZXQgaSA9IDA7XG4gICAgZGF5cy5mb3JFYWNoKGRheSA9PiB7XG4gICAgICBkb3dbKDcgKyBpKysgLSBmaXJzdCkgJSA3XSA9IChcbiAgICAgICAgPHRoIGtleT17ZGF5fSB0aXRsZT17ZGF5fT5cbiAgICAgICAgICB7ZGF5fVxuICAgICAgICA8L3RoPlxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBkb3c7XG4gIH1cblxuICBnZXRDbG9uZURhdGUoKTogTW9tZW50IHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5kYXRlLmNsb25lKCk7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==