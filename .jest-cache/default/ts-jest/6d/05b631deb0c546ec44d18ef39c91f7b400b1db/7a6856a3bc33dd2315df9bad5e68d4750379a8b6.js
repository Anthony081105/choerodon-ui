import { __decorate } from "tslib";
import React, { cloneElement, Component } from 'react';
import { observer } from 'mobx-react';
import { pxToRem } from 'choerodon-ui/lib/_util/UnitConvertor';
import { getProPrefixCls } from 'choerodon-ui/lib/configure';
import Button from '../../button/Button';
import Modal from '../../modal';
import Form from '../../form/Form';
import Icon from '../../icon';
import TableContext from '../TableContext';
import { $l } from '../../locale-context';
import autobind from '../../_util/autobind';
import TableButtons from './TableButtons';
/**
 * 去除级联字段
 *
 * @export
 * @param {Fields} fields 待筛选的字段数组
 * @returns {{ [key: string]: Field }} 不含级联字段的字段数组
 */
export function filterBindField(fields) {
    return [...fields.entries()].reduce((newFields, [key, field]) => {
        if (!field.get('bind')) {
            newFields[key] = field;
        }
        return newFields;
    }, {});
}
let TableToolBar = class TableToolBar extends Component {
    handleFieldEnter() {
        this.handleQuery();
        if (this.modal) {
            this.modal.close();
        }
    }
    handleQueryReset() {
        const { queryDataSet } = this.props;
        if (queryDataSet) {
            const { current } = queryDataSet;
            if (current) {
                current.reset();
            }
            this.handleQuery();
        }
    }
    async handleQuery() {
        const { dataSet, queryDataSet } = this.props;
        if (await queryDataSet?.validate()) {
            dataSet.query();
        }
    }
    componentWillUnmount() {
        if (this.modal) {
            this.modal.close(true);
        }
    }
    getQueryBar() {
        const { prefixCls, queryFieldsLimit, queryFields, queryDataSet } = this.props;
        if (queryDataSet && queryFields.length) {
            const currentFields = this.createFields(queryFields.slice(0, queryFieldsLimit), queryDataSet, false);
            const moreFields = this.createFields(queryFields.slice(queryFieldsLimit), queryDataSet, true);
            let more;
            let dirtyInfo;
            if (moreFields.length) {
                more = this.getMoreButton(moreFields);
                dirtyInfo = this.getDirtyInfo(queryDataSet.current, moreFields);
            }
            return (React.createElement("span", { className: `${prefixCls}-query-bar` },
                dirtyInfo,
                currentFields,
                React.createElement(Button, { color: "primary" /* primary */, onClick: this.handleQuery }, $l('Table', 'query_button')),
                more));
        }
    }
    getDirtyInfo(current, moreFields) {
        if (current &&
            moreFields.some(element => {
                const { name } = element.props;
                const field = current.getField(name);
                return field ? field.dirty : false;
            })) {
            const { prefixCls } = this.props;
            return (React.createElement("span", { className: `${prefixCls}-query-bar-dirty-info` },
                React.createElement(Icon, { type: "info" }),
                React.createElement("span", null, $l('Table', 'dirty_info')),
                React.createElement("a", { onClick: this.handleQueryReset }, $l('Table', 'restore'))));
        }
    }
    getMoreButton(moreFields) {
        return (React.createElement(Button, { color: "primary" /* primary */, funcType: "flat" /* flat */, onClick: () => this.openMore(moreFields) }, $l('Table', 'advanced_search')));
    }
    createFields(elements, dataSet, isMore) {
        return elements.map((element, index) => {
            const { name } = element.props;
            const props = {
                autoFocus: isMore && index === 0,
                onEnterDown: this.handleFieldEnter,
                style: isMore ? undefined : { width: pxToRem(130) },
            };
            const field = dataSet.getField(name);
            if (field) {
                const label = field.get('label');
                if (label) {
                    if (isMore) {
                        props.label = label;
                    }
                    else {
                        props.placeholder = label;
                    }
                }
            }
            return cloneElement(element, props);
        });
    }
    openMore(children) {
        this.modal = Modal.open({
            title: $l('Table', 'advanced_search'),
            children: React.createElement(Form, null, children),
            okText: $l('Table', 'query_button'),
            onOk: this.handleQuery,
            style: {
                width: pxToRem(400),
            },
            drawer: true,
        });
    }
    render() {
        const { prefixCls, pagination, buttons } = this.props;
        return [
            React.createElement(TableButtons, { key: "toolbar", prefixCls: prefixCls, buttons: buttons }, this.getQueryBar()),
            pagination,
        ];
    }
};
TableToolBar.displayName = 'TableToolBar';
TableToolBar.contextType = TableContext;
TableToolBar.defaultProps = {
    prefixCls: getProPrefixCls('table'),
    queryFieldsLimit: 1,
    pagination: null,
};
__decorate([
    autobind
], TableToolBar.prototype, "handleFieldEnter", null);
__decorate([
    autobind
], TableToolBar.prototype, "handleQueryReset", null);
__decorate([
    autobind
], TableToolBar.prototype, "handleQuery", null);
TableToolBar = __decorate([
    observer
], TableToolBar);
export default TableToolBar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,