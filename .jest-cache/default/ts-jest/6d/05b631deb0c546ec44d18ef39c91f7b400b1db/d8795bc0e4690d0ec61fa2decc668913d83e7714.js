import { __decorate } from "tslib";
import React from 'react';
import moment from 'moment';
import DaysView from './DaysView';
import TimesView from './TimesView';
import autobind from '../_util/autobind';
import { $l } from '../locale-context';
import { getDateFormatByFieldType } from '../field/utils';
export default class DateTimesView extends DaysView {
    handleTimeSelect() {
        this.changeViewMode("time" /* time */);
    }
    handleKeyDownRight(e) {
        if (e.altKey) {
            this.changeViewMode("time" /* time */);
        }
        else {
            this.changeSelectedDate(this.getCloneDate().add(1, 'd'));
        }
    }
    getFirstDay(date) {
        const firstDay = date.clone().subtract(1, 'M');
        const hour = firstDay.hour();
        const minute = firstDay.minute();
        const second = firstDay.second();
        firstDay.date(firstDay.daysInMonth()).startOf('w');
        firstDay.hour(hour);
        firstDay.minute(minute);
        firstDay.second(second);
        return firstDay;
    }
    renderFooter() {
        const { prefixCls, props: { date }, } = this;
        return (React.createElement("div", { className: `${prefixCls}-footer` },
            React.createElement("a", { className: `${prefixCls}-footer-now-btn`, onClick: this.choose.bind(this, moment()) }, $l('DatePicker', 'now')),
            React.createElement("a", { className: `${prefixCls}-footer-view-select`, onClick: this.handleTimeSelect }, date.format(getDateFormatByFieldType(TimesView.type)))));
    }
}
DateTimesView.displayName = 'DateTimesView';
DateTimesView.type = "dateTime" /* dateTime */;
__decorate([
    autobind
], DateTimesView.prototype, "handleTimeSelect", null);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMtcHJvL2RhdGUtcGlja2VyL0RhdGVUaW1lc1ZpZXcudHN4IiwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEtBQW9CLE1BQU0sT0FBTyxDQUFDO0FBQ3pDLE9BQU8sTUFBTSxNQUFNLFFBQVEsQ0FBQztBQUU1QixPQUFPLFFBQVEsTUFBTSxZQUFZLENBQUM7QUFDbEMsT0FBTyxTQUFTLE1BQU0sYUFBYSxDQUFDO0FBQ3BDLE9BQU8sUUFBUSxNQUFNLG1CQUFtQixDQUFDO0FBR3pDLE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN2QyxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUxRCxNQUFNLENBQUMsT0FBTyxPQUFPLGFBQWMsU0FBUSxRQUFRO0lBTWpELGdCQUFnQjtRQUNkLElBQUksQ0FBQyxjQUFjLG1CQUFlLENBQUM7SUFDckMsQ0FBQztJQUVELGtCQUFrQixDQUFDLENBQUM7UUFDbEIsSUFBSSxDQUFDLENBQUMsTUFBTSxFQUFFO1lBQ1osSUFBSSxDQUFDLGNBQWMsbUJBQWUsQ0FBQztTQUNwQzthQUFNO1lBQ0wsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDMUQ7SUFDSCxDQUFDO0lBRUQsV0FBVyxDQUFDLElBQUk7UUFDZCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUMvQyxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDN0IsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2pDLE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNqQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNuRCxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3BCLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDeEIsUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN4QixPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDO0lBRUQsWUFBWTtRQUNWLE1BQU0sRUFDSixTQUFTLEVBQ1QsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLEdBQ2hCLEdBQUcsSUFBSSxDQUFDO1FBQ1QsT0FBTyxDQUNMLDZCQUFLLFNBQVMsRUFBRSxHQUFHLFNBQVMsU0FBUztZQUNuQywyQkFBRyxTQUFTLEVBQUUsR0FBRyxTQUFTLGlCQUFpQixFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsSUFDbkYsRUFBRSxDQUFDLFlBQVksRUFBRSxLQUFLLENBQUMsQ0FDdEI7WUFDSiwyQkFBRyxTQUFTLEVBQUUsR0FBRyxTQUFTLHFCQUFxQixFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsZ0JBQWdCLElBQzVFLElBQUksQ0FBQyxNQUFNLENBQUMsd0JBQXdCLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQ3BELENBQ0EsQ0FDUCxDQUFDO0lBQ0osQ0FBQzs7QUE1Q00seUJBQVcsR0FBRyxlQUFlLENBQUM7QUFFOUIsa0JBQUksNkJBQXNCO0FBR2pDO0lBREMsUUFBUTtxREFHUiIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvaHVpaHVhd2svRG9jdW1lbnRzL29wdC9jaG9lcm9kb24tdWkvY29tcG9uZW50cy1wcm8vZGF0ZS1waWNrZXIvRGF0ZVRpbWVzVmlldy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcbmltcG9ydCB7IERhdGVQaWNrZXJLZXlib2FyZEV2ZW50IH0gZnJvbSAnLi9EYXRlUGlja2VyJztcbmltcG9ydCBEYXlzVmlldyBmcm9tICcuL0RheXNWaWV3JztcbmltcG9ydCBUaW1lc1ZpZXcgZnJvbSAnLi9UaW1lc1ZpZXcnO1xuaW1wb3J0IGF1dG9iaW5kIGZyb20gJy4uL191dGlsL2F1dG9iaW5kJztcbmltcG9ydCB7IFZpZXdNb2RlIH0gZnJvbSAnLi9lbnVtJztcbmltcG9ydCB7IEZpZWxkVHlwZSB9IGZyb20gJy4uL2RhdGEtc2V0L2VudW0nO1xuaW1wb3J0IHsgJGwgfSBmcm9tICcuLi9sb2NhbGUtY29udGV4dCc7XG5pbXBvcnQgeyBnZXREYXRlRm9ybWF0QnlGaWVsZFR5cGUgfSBmcm9tICcuLi9maWVsZC91dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERhdGVUaW1lc1ZpZXcgZXh0ZW5kcyBEYXlzVmlldyBpbXBsZW1lbnRzIERhdGVQaWNrZXJLZXlib2FyZEV2ZW50IHtcbiAgc3RhdGljIGRpc3BsYXlOYW1lID0gJ0RhdGVUaW1lc1ZpZXcnO1xuXG4gIHN0YXRpYyB0eXBlID0gRmllbGRUeXBlLmRhdGVUaW1lO1xuXG4gIEBhdXRvYmluZFxuICBoYW5kbGVUaW1lU2VsZWN0KCkge1xuICAgIHRoaXMuY2hhbmdlVmlld01vZGUoVmlld01vZGUudGltZSk7XG4gIH1cblxuICBoYW5kbGVLZXlEb3duUmlnaHQoZSkge1xuICAgIGlmIChlLmFsdEtleSkge1xuICAgICAgdGhpcy5jaGFuZ2VWaWV3TW9kZShWaWV3TW9kZS50aW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jaGFuZ2VTZWxlY3RlZERhdGUodGhpcy5nZXRDbG9uZURhdGUoKS5hZGQoMSwgJ2QnKSk7XG4gICAgfVxuICB9XG5cbiAgZ2V0Rmlyc3REYXkoZGF0ZSkge1xuICAgIGNvbnN0IGZpcnN0RGF5ID0gZGF0ZS5jbG9uZSgpLnN1YnRyYWN0KDEsICdNJyk7XG4gICAgY29uc3QgaG91ciA9IGZpcnN0RGF5LmhvdXIoKTtcbiAgICBjb25zdCBtaW51dGUgPSBmaXJzdERheS5taW51dGUoKTtcbiAgICBjb25zdCBzZWNvbmQgPSBmaXJzdERheS5zZWNvbmQoKTtcbiAgICBmaXJzdERheS5kYXRlKGZpcnN0RGF5LmRheXNJbk1vbnRoKCkpLnN0YXJ0T2YoJ3cnKTtcbiAgICBmaXJzdERheS5ob3VyKGhvdXIpO1xuICAgIGZpcnN0RGF5Lm1pbnV0ZShtaW51dGUpO1xuICAgIGZpcnN0RGF5LnNlY29uZChzZWNvbmQpO1xuICAgIHJldHVybiBmaXJzdERheTtcbiAgfVxuXG4gIHJlbmRlckZvb3RlcigpOiBSZWFjdE5vZGUge1xuICAgIGNvbnN0IHtcbiAgICAgIHByZWZpeENscyxcbiAgICAgIHByb3BzOiB7IGRhdGUgfSxcbiAgICB9ID0gdGhpcztcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9e2Ake3ByZWZpeENsc30tZm9vdGVyYH0+XG4gICAgICAgIDxhIGNsYXNzTmFtZT17YCR7cHJlZml4Q2xzfS1mb290ZXItbm93LWJ0bmB9IG9uQ2xpY2s9e3RoaXMuY2hvb3NlLmJpbmQodGhpcywgbW9tZW50KCkpfT5cbiAgICAgICAgICB7JGwoJ0RhdGVQaWNrZXInLCAnbm93Jyl9XG4gICAgICAgIDwvYT5cbiAgICAgICAgPGEgY2xhc3NOYW1lPXtgJHtwcmVmaXhDbHN9LWZvb3Rlci12aWV3LXNlbGVjdGB9IG9uQ2xpY2s9e3RoaXMuaGFuZGxlVGltZVNlbGVjdH0+XG4gICAgICAgICAge2RhdGUuZm9ybWF0KGdldERhdGVGb3JtYXRCeUZpZWxkVHlwZShUaW1lc1ZpZXcudHlwZSkpfVxuICAgICAgICA8L2E+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=