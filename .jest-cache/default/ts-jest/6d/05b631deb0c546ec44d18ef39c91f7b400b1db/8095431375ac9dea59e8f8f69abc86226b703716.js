import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import omit from 'lodash/omit';
import RcSwitch from '../rc-components/switch';
import { getPrefixCls } from '../configure';
export default class Switch extends Component {
    constructor() {
        super(...arguments);
        this.saveSwitch = (node) => {
            this.rcSwitch = node;
        };
    }
    focus() {
        this.rcSwitch.focus();
    }
    blur() {
        this.rcSwitch.blur();
    }
    render() {
        const { prefixCls: customizePrefixCls, size, loading, className = '' } = this.props;
        const prefixCls = getPrefixCls('switch', customizePrefixCls);
        const classes = classNames(className, {
            [`${prefixCls}-small`]: size === "small" /* small */,
            [`${prefixCls}-loading`]: loading,
        });
        return (React.createElement(RcSwitch, Object.assign({}, omit(this.props, ['loading']), { prefixCls: prefixCls, className: classes, ref: this.saveSwitch })));
    }
}
Switch.displayName = 'Switch';
Switch.propTypes = {
    prefixCls: PropTypes.string,
    // size=default and size=large are the same
    size: PropTypes.oneOf(["small" /* small */, "default" /* default */, "large" /* large */]),
    className: PropTypes.string,
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvc3dpdGNoL2luZGV4LnRzeCIsIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssRUFBRSxFQUFFLFNBQVMsRUFBYSxNQUFNLE9BQU8sQ0FBQztBQUNwRCxPQUFPLFNBQVMsTUFBTSxZQUFZLENBQUM7QUFDbkMsT0FBTyxVQUFVLE1BQU0sWUFBWSxDQUFDO0FBQ3BDLE9BQU8sSUFBSSxNQUFNLGFBQWEsQ0FBQztBQUMvQixPQUFPLFFBQVEsTUFBTSx5QkFBeUIsQ0FBQztBQUUvQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBZTVDLE1BQU0sQ0FBQyxPQUFPLE9BQU8sTUFBTyxTQUFRLFNBQTBCO0lBQTlEOztRQXFCRSxlQUFVLEdBQUcsQ0FBQyxJQUFxQixFQUFFLEVBQUU7WUFDckMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFDdkIsQ0FBQyxDQUFDO0lBa0JKLENBQUM7SUE1QkMsS0FBSztRQUNILElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUVELElBQUk7UUFDRixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFNRCxNQUFNO1FBQ0osTUFBTSxFQUFFLFNBQVMsRUFBRSxrQkFBa0IsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLFNBQVMsR0FBRyxFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3BGLE1BQU0sU0FBUyxHQUFHLFlBQVksQ0FBQyxRQUFRLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztRQUM3RCxNQUFNLE9BQU8sR0FBRyxVQUFVLENBQUMsU0FBUyxFQUFFO1lBQ3BDLENBQUMsR0FBRyxTQUFTLFFBQVEsQ0FBQyxFQUFFLElBQUksd0JBQWU7WUFDM0MsQ0FBQyxHQUFHLFNBQVMsVUFBVSxDQUFDLEVBQUUsT0FBTztTQUNsQyxDQUFDLENBQUM7UUFDSCxPQUFPLENBQ0wsb0JBQUMsUUFBUSxvQkFDSCxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQ2pDLFNBQVMsRUFBRSxTQUFTLEVBQ3BCLFNBQVMsRUFBRSxPQUFPLEVBQ2xCLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxJQUNwQixDQUNILENBQUM7SUFDSixDQUFDOztBQXZDTSxrQkFBVyxHQUFHLFFBQVEsQ0FBQztBQUV2QixnQkFBUyxHQUFHO0lBQ2pCLFNBQVMsRUFBRSxTQUFTLENBQUMsTUFBTTtJQUUzQiwyQ0FBMkM7SUFDM0MsSUFBSSxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUMsbUVBQXNDLENBQUM7SUFDN0QsU0FBUyxFQUFFLFNBQVMsQ0FBQyxNQUFNO0NBQzVCLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvc3dpdGNoL2luZGV4LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgb21pdCBmcm9tICdsb2Rhc2gvb21pdCc7XG5pbXBvcnQgUmNTd2l0Y2ggZnJvbSAnLi4vcmMtY29tcG9uZW50cy9zd2l0Y2gnO1xuaW1wb3J0IHsgU2l6ZSB9IGZyb20gJy4uL191dGlsL2VudW0nO1xuaW1wb3J0IHsgZ2V0UHJlZml4Q2xzIH0gZnJvbSAnLi4vY29uZmlndXJlJztcblxuZXhwb3J0IGludGVyZmFjZSBTd2l0Y2hQcm9wcyB7XG4gIHByZWZpeENscz86IHN0cmluZztcbiAgc2l6ZT86IFNpemU7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgY2hlY2tlZD86IGJvb2xlYW47XG4gIGRlZmF1bHRDaGVja2VkPzogYm9vbGVhbjtcbiAgb25DaGFuZ2U/OiAoY2hlY2tlZDogYm9vbGVhbikgPT4gYW55O1xuICBjaGVja2VkQ2hpbGRyZW4/OiBSZWFjdE5vZGU7XG4gIHVuQ2hlY2tlZENoaWxkcmVuPzogUmVhY3ROb2RlO1xuICBkaXNhYmxlZD86IGJvb2xlYW47XG4gIGxvYWRpbmc/OiBib29sZWFuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTd2l0Y2ggZXh0ZW5kcyBDb21wb25lbnQ8U3dpdGNoUHJvcHMsIHt9PiB7XG4gIHN0YXRpYyBkaXNwbGF5TmFtZSA9ICdTd2l0Y2gnO1xuXG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgcHJlZml4Q2xzOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gICAgLy8gc2l6ZT1kZWZhdWx0IGFuZCBzaXplPWxhcmdlIGFyZSB0aGUgc2FtZVxuICAgIHNpemU6IFByb3BUeXBlcy5vbmVPZihbU2l6ZS5zbWFsbCwgU2l6ZS5kZWZhdWx0LCBTaXplLmxhcmdlXSksXG4gICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICB9O1xuXG4gIHByaXZhdGUgcmNTd2l0Y2g6IGFueTtcblxuICBmb2N1cygpIHtcbiAgICB0aGlzLnJjU3dpdGNoLmZvY3VzKCk7XG4gIH1cblxuICBibHVyKCkge1xuICAgIHRoaXMucmNTd2l0Y2guYmx1cigpO1xuICB9XG5cbiAgc2F2ZVN3aXRjaCA9IChub2RlOiBSY1N3aXRjaCB8IG51bGwpID0+IHtcbiAgICB0aGlzLnJjU3dpdGNoID0gbm9kZTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBwcmVmaXhDbHM6IGN1c3RvbWl6ZVByZWZpeENscywgc2l6ZSwgbG9hZGluZywgY2xhc3NOYW1lID0gJycgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgcHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCdzd2l0Y2gnLCBjdXN0b21pemVQcmVmaXhDbHMpO1xuICAgIGNvbnN0IGNsYXNzZXMgPSBjbGFzc05hbWVzKGNsYXNzTmFtZSwge1xuICAgICAgW2Ake3ByZWZpeENsc30tc21hbGxgXTogc2l6ZSA9PT0gU2l6ZS5zbWFsbCxcbiAgICAgIFtgJHtwcmVmaXhDbHN9LWxvYWRpbmdgXTogbG9hZGluZyxcbiAgICB9KTtcbiAgICByZXR1cm4gKFxuICAgICAgPFJjU3dpdGNoXG4gICAgICAgIHsuLi5vbWl0KHRoaXMucHJvcHMsIFsnbG9hZGluZyddKX1cbiAgICAgICAgcHJlZml4Q2xzPXtwcmVmaXhDbHN9XG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlc31cbiAgICAgICAgcmVmPXt0aGlzLnNhdmVTd2l0Y2h9XG4gICAgICAvPlxuICAgICk7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==