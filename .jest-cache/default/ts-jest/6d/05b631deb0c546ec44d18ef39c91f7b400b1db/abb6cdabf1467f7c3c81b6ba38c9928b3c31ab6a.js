import { __decorate } from "tslib";
import React from 'react';
import PropTypes from 'prop-types';
import { observer } from 'mobx-react';
import omit from 'lodash/omit';
import { NumberField } from '../number-field/NumberField';
import autobind from '../_util/autobind';
import EventManager from '../_util/EventManager';
let Range = class Range extends NumberField {
    constructor() {
        super(...arguments);
        this.dragEvent = new EventManager(typeof window !== 'undefined' && document);
        this.type = 'range';
    }
    getFieldType() {
        return "number" /* number */;
    }
    getOtherProps() {
        return omit(super.getOtherProps(), ['vertical']);
    }
    getValue() {
        return super.getValue() || 0;
    }
    getWrapperClassNames() {
        const { props: { vertical }, prefixCls, } = this;
        return super.getWrapperClassNames({
            [`${prefixCls}-vertical`]: vertical,
        });
    }
    renderWrapper() {
        return (React.createElement("label", Object.assign({ key: "wrapper" }, this.getWrapperProps()),
            React.createElement("input", Object.assign({}, this.getOtherProps(), { value: this.getValue() })),
            this.renderTrack(),
            this.renderFloatLabel()));
    }
    renderTrack() {
        const percent = this.getPercent();
        const { props: { vertical }, prefixCls, } = this;
        return (React.createElement("div", { className: `${prefixCls}-track`, onMouseDown: this.isReadOnly() || this.isDisabled() ? undefined : this.handleTrackClick },
            React.createElement("div", { className: `${prefixCls}-draghandle`, style: vertical ? { bottom: percent } : { left: percent } }),
            React.createElement("div", { className: `${prefixCls}-selection`, style: vertical ? { height: percent } : { width: percent } })));
    }
    handleTrackClick(e) {
        this.track = e.currentTarget;
        this.handleDrag(e);
        this.handleDragStart();
    }
    handleDragStart() {
        this.dragEvent
            .addEventListener('mousemove', this.handleDrag)
            .addEventListener('mouseup', this.handleDragEnd);
    }
    handleDragEnd() {
        this.dragEvent
            .removeEventListener('mousemove', this.handleDrag)
            .removeEventListener('mouseup', this.handleDragEnd);
    }
    handleDrag(e) {
        const { track } = this;
        const { vertical } = this.props;
        const max = this.getProp('max');
        const min = this.getProp('min');
        const step = this.getProp('step');
        const { bottom, left } = track.getBoundingClientRect();
        const length = vertical ? bottom - e.clientY : e.clientX - left;
        const totalLength = vertical ? track.clientHeight : track.clientWidth;
        const oneStepLength = (1 / ((max - min) / step)) * totalLength;
        let value = min;
        if (length <= 0) {
            value = min;
        }
        else if (length >= totalLength) {
            value = max;
        }
        else {
            value = Math.round(length / oneStepLength) * step + min;
        }
        this.setValue(value);
    }
    getPercent() {
        const value = this.getValue();
        const max = this.getProp('max');
        const min = this.getProp('min');
        if (value <= min) {
            return 0;
        }
        if (value >= max) {
            return '100%';
        }
        return `${((value - min) / (max - min)) * 100}%`;
    }
};
Range.displayName = 'Range';
Range.propTypes = {
    /**
     * 是否垂直方向
     * @default
     * false
     */
    vertical: PropTypes.bool,
    ...NumberField.propTypes,
};
Range.defaultProps = {
    ...NumberField.defaultProps,
    suffixCls: 'range',
    min: 0,
    step: 1,
    max: 100,
    vertical: false,
};
__decorate([
    autobind
], Range.prototype, "handleTrackClick", null);
__decorate([
    autobind
], Range.prototype, "handleDragStart", null);
__decorate([
    autobind
], Range.prototype, "handleDragEnd", null);
__decorate([
    autobind
], Range.prototype, "handleDrag", null);
Range = __decorate([
    observer
], Range);
export default Range;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,