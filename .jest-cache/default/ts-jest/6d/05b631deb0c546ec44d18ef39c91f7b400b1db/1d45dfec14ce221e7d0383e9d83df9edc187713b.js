import * as React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import clamp from 'lodash/clamp';
import { DOMMouseMoveTracker } from 'dom-lib';
import { defaultClassPrefix, getUnhandledProps } from './utils';
import TableContext from './TableContext';
class ColumnResizeHandler extends React.Component {
    constructor(props) {
        super(props);
        this.columnWidth = 0;
        this.cursorDelta = 0;
        this.onMove = (deltaX) => {
            if (!this.isKeyDown) {
                return;
            }
            const { onColumnResizeMove, defaultColumnWidth, columnLeft, columnFixed } = this.props;
            const { rtl } = this.context;
            this.cursorDelta += deltaX;
            this.columnWidth = clamp(
            // @ts-ignore
            defaultColumnWidth + (rtl ? -this.cursorDelta : this.cursorDelta), 20, 20000);
            onColumnResizeMove?.(this.columnWidth, columnLeft, columnFixed);
        };
        this.onColumnResizeEnd = () => {
            this.isKeyDown = false;
            this.props.onColumnResizeEnd?.(this.columnWidth, this.cursorDelta);
            this.mouseMoveTracker?.releaseMouseMoves?.();
            this.mouseMoveTracker = null;
        };
        this.onColumnResizeMouseDown = (event) => {
            this.mouseMoveTracker = this.getMouseMoveTracker();
            this.mouseMoveTracker.captureMouseMoves(event);
            this.isKeyDown = true;
            this.cursorDelta = 0;
            const client = {
                clientX: event.clientX,
                clientY: event.clientY,
                preventDefault: Function(),
            };
            this.props.onColumnResizeStart?.(client);
        };
        this.columnWidth = props.defaultColumnWidth || 0;
    }
    componentWillUnmount() {
        if (this.mouseMoveTracker) {
            this.mouseMoveTracker.releaseMouseMoves();
            this.mouseMoveTracker = null;
        }
    }
    getMouseMoveTracker() {
        return (this.mouseMoveTracker ||
            new DOMMouseMoveTracker(this.onMove, this.onColumnResizeEnd, document.body));
    }
    render() {
        const { columnLeft = 0, classPrefix, height, className, style, columnFixed, ...rest } = this.props;
        if (columnFixed === 'right') {
            return null;
        }
        const { rtl } = this.context;
        const styles = {
            [rtl ? 'right' : 'left']: this.columnWidth + columnLeft - 2,
            height,
            ...style,
        };
        const classes = classNames(classPrefix, className);
        const unhandled = getUnhandledProps(ColumnResizeHandler, rest);
        return (React.createElement("div", Object.assign({}, unhandled, { className: classes, style: styles, onMouseDown: this.onColumnResizeMouseDown, role: "button", tabIndex: -1 })));
    }
}
ColumnResizeHandler.contextType = TableContext;
ColumnResizeHandler.propTypes = {
    height: PropTypes.number,
    defaultColumnWidth: PropTypes.number,
    columnLeft: PropTypes.number,
    columnFixed: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['left', 'right'])]),
    className: PropTypes.string,
    classPrefix: PropTypes.string,
    style: PropTypes.object,
    onColumnResizeStart: PropTypes.func,
    onColumnResizeEnd: PropTypes.func,
    onColumnResizeMove: PropTypes.func,
};
ColumnResizeHandler.defaultProps = {
    classPrefix: defaultClassPrefix('performance-table-column-resize-spanner'),
};
export default ColumnResizeHandler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,