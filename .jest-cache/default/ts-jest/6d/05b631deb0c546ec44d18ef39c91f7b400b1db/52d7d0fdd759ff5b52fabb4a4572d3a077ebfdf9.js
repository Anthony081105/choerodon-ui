import { Children, isValidElement } from 'react';
import DataSet from '../data-set/DataSet';
import OptGroup from './OptGroup';
import Option from './Option';
function getOptionsFromChildren(elements, data, fields, textField, valueField, disabledField, groups = []) {
    if (elements) {
        Children.forEach(elements, child => {
            if (isValidElement(child)) {
                const { type } = child;
                if (type === OptGroup) {
                    const props = child.props;
                    getOptionsFromChildren(props.children, data, fields, textField, valueField, disabledField, groups.concat(props.label || ''));
                }
                else if (type === Option) {
                    const { value, children, disabled } = child.props;
                    data.push(groups.reduce((obj, group, index) => {
                        const name = `group-${index}`;
                        obj[name] = group;
                        if (!fields.find(field => field.name === name)) {
                            fields.push({
                                name,
                                type: "reactNode" /* reactNode */,
                                group: groups.length - 1,
                            });
                        }
                        return obj;
                    }, {
                        [textField]: children,
                        [valueField]: value === undefined && isValidElement(children) ? children : value,
                        [disabledField]: disabled,
                    }));
                }
            }
        });
    }
}
export default function normalizeOptions({ textField, valueField, disabledField, multiple, children, }) {
    const data = [];
    const fields = [
        {
            name: textField,
            type: "reactNode" /* reactNode */,
        },
        {
            name: valueField,
        },
        {
            name: disabledField,
            type: "boolean" /* boolean */,
        },
    ];
    if (children) {
        getOptionsFromChildren(children, data, fields, textField, valueField, disabledField);
    }
    return new DataSet({
        data,
        fields,
        paging: false,
        selection: multiple ? "multiple" /* multiple */ : "single" /* single */,
        autoLocateFirst: false,
    });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMtcHJvL29wdGlvbi9ub3JtYWxpemVPcHRpb25zLnRzeCIsIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLGNBQWMsRUFBYSxNQUFNLE9BQU8sQ0FBQztBQUM1RCxPQUFPLE9BQU8sTUFBTSxxQkFBcUIsQ0FBQztBQUcxQyxPQUFPLFFBQTJCLE1BQU0sWUFBWSxDQUFDO0FBQ3JELE9BQU8sTUFBdUIsTUFBTSxVQUFVLENBQUM7QUFFL0MsU0FBUyxzQkFBc0IsQ0FDN0IsUUFBcUIsRUFDckIsSUFBYyxFQUNkLE1BQW9CLEVBQ3BCLFNBQWlCLEVBQ2pCLFVBQWtCLEVBQ2xCLGFBQXFCLEVBQ3JCLFNBQW1CLEVBQUU7SUFFckIsSUFBSSxRQUFRLEVBQUU7UUFDWixRQUFRLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsRUFBRTtZQUNqQyxJQUFJLGNBQWMsQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDekIsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQztnQkFDdkIsSUFBSSxJQUFJLEtBQUssUUFBUSxFQUFFO29CQUNyQixNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBcUMsQ0FBQztvQkFDMUQsc0JBQXNCLENBQ3BCLEtBQUssQ0FBQyxRQUFRLEVBQ2QsSUFBSSxFQUNKLE1BQU0sRUFDTixTQUFTLEVBQ1QsVUFBVSxFQUNWLGFBQWEsRUFDYixNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDLENBQ2pDLENBQUM7aUJBQ0g7cUJBQU0sSUFBSSxJQUFJLEtBQUssTUFBTSxFQUFFO29CQUMxQixNQUFNLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsR0FBRyxLQUFLLENBQUMsS0FBbUMsQ0FBQztvQkFDaEYsSUFBSSxDQUFDLElBQUksQ0FDUCxNQUFNLENBQUMsTUFBTSxDQUNYLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRTt3QkFDcEIsTUFBTSxJQUFJLEdBQUcsU0FBUyxLQUFLLEVBQUUsQ0FBQzt3QkFDOUIsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQzt3QkFDbEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFOzRCQUM5QyxNQUFNLENBQUMsSUFBSSxDQUFDO2dDQUNWLElBQUk7Z0NBQ0osSUFBSSw2QkFBcUI7Z0NBQ3pCLEtBQUssRUFBRSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUM7NkJBQ3pCLENBQUMsQ0FBQzt5QkFDSjt3QkFDRCxPQUFPLEdBQUcsQ0FBQztvQkFDYixDQUFDLEVBQ0Q7d0JBQ0UsQ0FBQyxTQUFTLENBQUMsRUFBRSxRQUFRO3dCQUNyQixDQUFDLFVBQVUsQ0FBQyxFQUFFLEtBQUssS0FBSyxTQUFTLElBQUksY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUs7d0JBQ2hGLENBQUMsYUFBYSxDQUFDLEVBQUUsUUFBUTtxQkFDMUIsQ0FDRixDQUNGLENBQUM7aUJBQ0g7YUFDRjtRQUNILENBQUMsQ0FBQyxDQUFDO0tBQ0o7QUFDSCxDQUFDO0FBRUQsTUFBTSxDQUFDLE9BQU8sVUFBVSxnQkFBZ0IsQ0FBQyxFQUN2QyxTQUFTLEVBQ1QsVUFBVSxFQUNWLGFBQWEsRUFDYixRQUFRLEVBQ1IsUUFBUSxHQUNUO0lBQ0MsTUFBTSxJQUFJLEdBQWEsRUFBRSxDQUFDO0lBQzFCLE1BQU0sTUFBTSxHQUFHO1FBQ2I7WUFDRSxJQUFJLEVBQUUsU0FBUztZQUNmLElBQUksNkJBQXFCO1NBQzFCO1FBQ0Q7WUFDRSxJQUFJLEVBQUUsVUFBVTtTQUNqQjtRQUNEO1lBQ0UsSUFBSSxFQUFFLGFBQWE7WUFDbkIsSUFBSSx5QkFBbUI7U0FDeEI7S0FDRixDQUFDO0lBRUYsSUFBSSxRQUFRLEVBQUU7UUFDWixzQkFBc0IsQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0tBQ3RGO0lBQ0QsT0FBTyxJQUFJLE9BQU8sQ0FBQztRQUNqQixJQUFJO1FBQ0osTUFBTTtRQUNOLE1BQU0sRUFBRSxLQUFLO1FBQ2IsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDLDJCQUEyQixDQUFDLHNCQUF3QjtRQUN6RSxlQUFlLEVBQUUsS0FBSztLQUN2QixDQUFDLENBQUM7QUFDTCxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9odWlodWF3ay9Eb2N1bWVudHMvb3B0L2Nob2Vyb2Rvbi11aS9jb21wb25lbnRzLXByby9vcHRpb24vbm9ybWFsaXplT3B0aW9ucy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hpbGRyZW4sIGlzVmFsaWRFbGVtZW50LCBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgRGF0YVNldCBmcm9tICcuLi9kYXRhLXNldC9EYXRhU2V0JztcbmltcG9ydCB7IERhdGFTZXRTZWxlY3Rpb24sIEZpZWxkVHlwZSB9IGZyb20gJy4uL2RhdGEtc2V0L2VudW0nO1xuaW1wb3J0IHsgRmllbGRQcm9wcyB9IGZyb20gJy4uL2RhdGEtc2V0L0ZpZWxkJztcbmltcG9ydCBPcHRHcm91cCwgeyBPcHRHcm91cFByb3BzIH0gZnJvbSAnLi9PcHRHcm91cCc7XG5pbXBvcnQgT3B0aW9uLCB7IE9wdGlvblByb3BzIH0gZnJvbSAnLi9PcHRpb24nO1xuXG5mdW5jdGlvbiBnZXRPcHRpb25zRnJvbUNoaWxkcmVuKFxuICBlbGVtZW50czogUmVhY3ROb2RlW10sXG4gIGRhdGE6IG9iamVjdFtdLFxuICBmaWVsZHM6IEZpZWxkUHJvcHNbXSxcbiAgdGV4dEZpZWxkOiBzdHJpbmcsXG4gIHZhbHVlRmllbGQ6IHN0cmluZyxcbiAgZGlzYWJsZWRGaWVsZDogc3RyaW5nLFxuICBncm91cHM6IHN0cmluZ1tdID0gW10sXG4pIHtcbiAgaWYgKGVsZW1lbnRzKSB7XG4gICAgQ2hpbGRyZW4uZm9yRWFjaChlbGVtZW50cywgY2hpbGQgPT4ge1xuICAgICAgaWYgKGlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgICBjb25zdCB7IHR5cGUgfSA9IGNoaWxkO1xuICAgICAgICBpZiAodHlwZSA9PT0gT3B0R3JvdXApIHtcbiAgICAgICAgICBjb25zdCBwcm9wcyA9IGNoaWxkLnByb3BzIGFzIE9wdEdyb3VwUHJvcHMgJiB7IGNoaWxkcmVuIH07XG4gICAgICAgICAgZ2V0T3B0aW9uc0Zyb21DaGlsZHJlbihcbiAgICAgICAgICAgIHByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgIGZpZWxkcyxcbiAgICAgICAgICAgIHRleHRGaWVsZCxcbiAgICAgICAgICAgIHZhbHVlRmllbGQsXG4gICAgICAgICAgICBkaXNhYmxlZEZpZWxkLFxuICAgICAgICAgICAgZ3JvdXBzLmNvbmNhdChwcm9wcy5sYWJlbCB8fCAnJyksXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBPcHRpb24pIHtcbiAgICAgICAgICBjb25zdCB7IHZhbHVlLCBjaGlsZHJlbiwgZGlzYWJsZWQgfSA9IGNoaWxkLnByb3BzIGFzIE9wdGlvblByb3BzICYgeyBjaGlsZHJlbiB9O1xuICAgICAgICAgIGRhdGEucHVzaChcbiAgICAgICAgICAgIGdyb3Vwcy5yZWR1Y2UoXG4gICAgICAgICAgICAgIChvYmosIGdyb3VwLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBgZ3JvdXAtJHtpbmRleH1gO1xuICAgICAgICAgICAgICAgIG9ialtuYW1lXSA9IGdyb3VwO1xuICAgICAgICAgICAgICAgIGlmICghZmllbGRzLmZpbmQoZmllbGQgPT4gZmllbGQubmFtZSA9PT0gbmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgIGZpZWxkcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogRmllbGRUeXBlLnJlYWN0Tm9kZSxcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXA6IGdyb3Vwcy5sZW5ndGggLSAxLFxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBbdGV4dEZpZWxkXTogY2hpbGRyZW4sXG4gICAgICAgICAgICAgICAgW3ZhbHVlRmllbGRdOiB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSA/IGNoaWxkcmVuIDogdmFsdWUsXG4gICAgICAgICAgICAgICAgW2Rpc2FibGVkRmllbGRdOiBkaXNhYmxlZCxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vcm1hbGl6ZU9wdGlvbnMoe1xuICB0ZXh0RmllbGQsXG4gIHZhbHVlRmllbGQsXG4gIGRpc2FibGVkRmllbGQsXG4gIG11bHRpcGxlLFxuICBjaGlsZHJlbixcbn0pIHtcbiAgY29uc3QgZGF0YTogb2JqZWN0W10gPSBbXTtcbiAgY29uc3QgZmllbGRzID0gW1xuICAgIHtcbiAgICAgIG5hbWU6IHRleHRGaWVsZCxcbiAgICAgIHR5cGU6IEZpZWxkVHlwZS5yZWFjdE5vZGUsXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiB2YWx1ZUZpZWxkLFxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogZGlzYWJsZWRGaWVsZCxcbiAgICAgIHR5cGU6IEZpZWxkVHlwZS5ib29sZWFuLFxuICAgIH0sXG4gIF07XG5cbiAgaWYgKGNoaWxkcmVuKSB7XG4gICAgZ2V0T3B0aW9uc0Zyb21DaGlsZHJlbihjaGlsZHJlbiwgZGF0YSwgZmllbGRzLCB0ZXh0RmllbGQsIHZhbHVlRmllbGQsIGRpc2FibGVkRmllbGQpO1xuICB9XG4gIHJldHVybiBuZXcgRGF0YVNldCh7XG4gICAgZGF0YSxcbiAgICBmaWVsZHMsXG4gICAgcGFnaW5nOiBmYWxzZSxcbiAgICBzZWxlY3Rpb246IG11bHRpcGxlID8gRGF0YVNldFNlbGVjdGlvbi5tdWx0aXBsZSA6IERhdGFTZXRTZWxlY3Rpb24uc2luZ2xlLFxuICAgIGF1dG9Mb2NhdGVGaXJzdDogZmFsc2UsXG4gIH0pO1xufVxuIl0sInZlcnNpb24iOjN9