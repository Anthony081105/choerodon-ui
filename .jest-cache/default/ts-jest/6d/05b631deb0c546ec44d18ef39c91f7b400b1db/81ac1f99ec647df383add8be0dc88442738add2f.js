export function getKey(record, idField) {
    return String(idField ? record.get(idField) : record.id);
}
function getTreeNode(record, children, idField, text, treeNodeRendererProps, loadData) {
    const key = getKey(record, idField);
    return ({
        title: text,
        isLeaf: !loadData && !record.children,
        children,
        ...treeNodeRendererProps,
        selectable: !!(record.dataSet.selection ? record.selectable : false),
        eventKey: key,
        key,
    });
}
export function getTreeNodes(dataSet, records = [], forceRenderKeys, renderer, treeNodeRenderer, loadData, titleField) {
    const { idField } = dataSet.props;
    return records.map(record => {
        if (record.status !== 'delete') {
            const children = forceRenderKeys.indexOf(getKey(record, idField)) !== -1
                ? getTreeNodes(dataSet, record.children, forceRenderKeys, renderer, treeNodeRenderer, loadData)
                : null;
            return getTreeNode(record, children, idField, renderer({ dataSet, record, text: record.get(titleField) }), treeNodeRenderer({ dataSet, record }), loadData);
        }
        return null;
    });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMtcHJvL3RyZWUvdXRpbC50c3giLCJtYXBwaW5ncyI6IkFBbURBLE1BQU0sVUFBVSxNQUFNLENBQUMsTUFBTSxFQUFFLE9BQU87SUFDcEMsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDM0QsQ0FBQztBQUVELFNBQVMsV0FBVyxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBQyxxQkFBcUIsRUFBQyxRQUFRO0lBQ2pGLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDcEMsT0FBTyxDQUNMO1FBQ0UsS0FBSyxFQUFDLElBQUk7UUFDVixNQUFNLEVBQUMsQ0FBQyxRQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUTtRQUNwQyxRQUFRO1FBQ1IsR0FBRyxxQkFBcUI7UUFDeEIsVUFBVSxFQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFBLENBQUMsQ0FBQSxNQUFNLENBQUMsVUFBVSxDQUFBLENBQUMsQ0FBQSxLQUFLLENBQUM7UUFDL0QsUUFBUSxFQUFDLEdBQUc7UUFDWixHQUFHO0tBQ0osQ0FDRixDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sVUFBVSxZQUFZLENBQzFCLE9BQWdCLEVBQ2hCLFVBQW9CLEVBQUUsRUFDdEIsZUFBeUIsRUFDekIsUUFBc0IsRUFDdEIsZ0JBQWlDLEVBQ2pDLFFBQW9ELEVBQ3BELFVBQW1CO0lBRW5CLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDO0lBQ2xDLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUMxQixJQUFHLE1BQU0sQ0FBQyxNQUFNLEtBQUssUUFBUSxFQUFDO1lBQzFCLE1BQU0sUUFBUSxHQUNkLGVBQWUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDckQsQ0FBQyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLFFBQVEsRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFDLGdCQUFnQixFQUFDLFFBQVEsQ0FBQztnQkFDN0YsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUNYLE9BQU8sV0FBVyxDQUNoQixNQUFNLEVBQ04sUUFBUSxFQUNSLE9BQU8sRUFDUCxRQUFRLENBQUMsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFDM0QsZ0JBQWdCLENBQUMsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFDLENBQUMsRUFDcEMsUUFBUSxDQUNULENBQUM7U0FDSDtRQUNELE9BQU8sSUFBSSxDQUFBO0lBQ2IsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9odWlodWF3ay9Eb2N1bWVudHMvb3B0L2Nob2Vyb2Rvbi11aS9jb21wb25lbnRzLXByby90cmVlL3V0aWwudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBUcmVlTm9kZVByb3BzLEV2ZW50RGF0YU5vZGUgfSBmcm9tICdjaG9lcm9kb24tdWkvbGliL3RyZWUnO1xuaW1wb3J0IFJlY29yZCBmcm9tICcuLi9kYXRhLXNldC9SZWNvcmQnO1xuaW1wb3J0IERhdGFTZXQgZnJvbSAnLi4vZGF0YS1zZXQvRGF0YVNldCc7XG5cbmV4cG9ydCB0eXBlIEljb25UeXBlID0gUmVhY3QuUmVhY3ROb2RlIHwgKChwcm9wczogVHJlZU5vZGVQcm9wcykgPT4gUmVhY3QuUmVhY3ROb2RlKTtcbmV4cG9ydCBpbnRlcmZhY2UgRGF0YU5vZGUge1xuICBjaGlsZHJlbj86IERhdGFOb2RlW107XG4gIGtleTogc3RyaW5nIHwgbnVtYmVyO1xuICBldmVudEtleTogc3RyaW5nIHwgbnVtYmVyO1xuICB0aXRsZT86IFJlYWN0LlJlYWN0Tm9kZTtcbiAgc2VsZWN0YWJsZT86IGJvb2xlYW47XG4gIGlzTGVhZj86IGJvb2xlYW47XG4gIHN3aXRjaGVySWNvbj86IEljb25UeXBlO1xuICBjaGVja2FibGU/OiBib29sZWFuO1xuICBkaXNhYmxlZD86IGJvb2xlYW47XG4gIGljb24/OiBJY29uVHlwZTtcbiAgZGlzYWJsZUNoZWNrYm94PzogYm9vbGVhbjtcblxuICAvKiogU2V0IHN0eWxlIG9mIFRyZWVOb2RlLiBUaGlzIGlzIG5vdCByZWNvbW1lbmQgaWYgeW91IGRvbid0IGhhdmUgYW55IGZvcmNlIHJlcXVpcmVtZW50ICovXG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgc3R5bGU/OiBSZWFjdC5DU1NQcm9wZXJ0aWVzO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRyZWVOb2RlUmVuZGVyZXJQcm9wcyB7XG4gIGNoaWxkcmVuPzogVHJlZU5vZGVSZW5kZXJlclByb3BzW107XG4gIHRpdGxlPzogUmVhY3QuUmVhY3ROb2RlO1xuICBpc0xlYWY/OiBib29sZWFuO1xuICBzd2l0Y2hlckljb24/OiBJY29uVHlwZTtcbiAgY2hlY2thYmxlPzogYm9vbGVhbjtcbiAgZGlzYWJsZWQ/OiBib29sZWFuO1xuICBpY29uPzogSWNvblR5cGU7XG4gIGRpc2FibGVDaGVja2JveD86IGJvb2xlYW47XG4gIC8qKiBTZXQgc3R5bGUgb2YgVHJlZU5vZGUuIFRoaXMgaXMgbm90IHJlY29tbWVuZCBpZiB5b3UgZG9uJ3QgaGF2ZSBhbnkgZm9yY2UgcmVxdWlyZW1lbnQgKi9cbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBzdHlsZT86IFJlYWN0LkNTU1Byb3BlcnRpZXM7XG59XG5cblxuZXhwb3J0IHR5cGUgTm9kZVJlbmRlcmVyID0gKHByb3BzOiB7XG4gIHJlY29yZD86IFJlY29yZCB8IG51bGw7XG4gIGRhdGFTZXQ/OiBEYXRhU2V0IHwgbnVsbDtcbiAgdGV4dD86IHN0cmluZztcbn0pID0+IFJlYWN0Tm9kZTtcblxuZXhwb3J0IHR5cGUgVHJlZU5vZGVSZW5kZXJlciA9ICgocHJvcHM6IHtcbiAgcmVjb3JkPzogUmVjb3JkIHwgbnVsbDtcbiAgZGF0YVNldD86IERhdGFTZXQgfCBudWxsO1xufSkgPT4gVHJlZU5vZGVSZW5kZXJlclByb3BzICkgfCAoKChwcm9wczp7cmVjb3JkPzogUmVjb3JkIHwgbnVsbDtcbiAgZGF0YVNldD86IERhdGFTZXQgfCBudWxsO30pID0+IHt9KSkgfCAoKCkgPT4gKHt9KSlcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEtleShyZWNvcmQsIGlkRmllbGQpIHtcbiAgcmV0dXJuIFN0cmluZyhpZEZpZWxkID8gcmVjb3JkLmdldChpZEZpZWxkKSA6IHJlY29yZC5pZCk7XG59XG5cbmZ1bmN0aW9uIGdldFRyZWVOb2RlKHJlY29yZCwgY2hpbGRyZW4sIGlkRmllbGQsIHRleHQsdHJlZU5vZGVSZW5kZXJlclByb3BzLGxvYWREYXRhKTpEYXRhTm9kZSB7XG4gIGNvbnN0IGtleSA9IGdldEtleShyZWNvcmQsIGlkRmllbGQpO1xuICByZXR1cm4gKFxuICAgIHtcbiAgICAgIHRpdGxlOnRleHQsXG4gICAgICBpc0xlYWY6IWxvYWREYXRhICYmICFyZWNvcmQuY2hpbGRyZW4sXG4gICAgICBjaGlsZHJlbixcbiAgICAgIC4uLnRyZWVOb2RlUmVuZGVyZXJQcm9wcyxcbiAgICAgIHNlbGVjdGFibGU6ISEocmVjb3JkLmRhdGFTZXQuc2VsZWN0aW9uP3JlY29yZC5zZWxlY3RhYmxlOmZhbHNlKSxcbiAgICAgIGV2ZW50S2V5OmtleSxcbiAgICAgIGtleSxcbiAgICB9XG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUcmVlTm9kZXMoXG4gIGRhdGFTZXQ6IERhdGFTZXQsXG4gIHJlY29yZHM6IFJlY29yZFtdID0gW10sXG4gIGZvcmNlUmVuZGVyS2V5czogc3RyaW5nW10sXG4gIHJlbmRlcmVyOiBOb2RlUmVuZGVyZXIsXG4gIHRyZWVOb2RlUmVuZGVyZXI6VHJlZU5vZGVSZW5kZXJlcixcbiAgbG9hZERhdGE/Oih0cmVlTm9kZTogRXZlbnREYXRhTm9kZSkgPT4gUHJvbWlzZTx2b2lkPixcbiAgdGl0bGVGaWVsZD86IHN0cmluZyxcbikge1xuICBjb25zdCB7IGlkRmllbGQgfSA9IGRhdGFTZXQucHJvcHM7XG4gIHJldHVybiByZWNvcmRzLm1hcChyZWNvcmQgPT4ge1xuICAgIGlmKHJlY29yZC5zdGF0dXMgIT09ICdkZWxldGUnKXtcbiAgICAgICAgY29uc3QgY2hpbGRyZW4gPVxuICAgICAgICBmb3JjZVJlbmRlcktleXMuaW5kZXhPZihnZXRLZXkocmVjb3JkLCBpZEZpZWxkKSkgIT09IC0xXG4gICAgICAgICAgPyBnZXRUcmVlTm9kZXMoZGF0YVNldCwgcmVjb3JkLmNoaWxkcmVuLCBmb3JjZVJlbmRlcktleXMsIHJlbmRlcmVyLHRyZWVOb2RlUmVuZGVyZXIsbG9hZERhdGEpXG4gICAgICAgICAgOiBudWxsO1xuICAgICAgcmV0dXJuIGdldFRyZWVOb2RlKFxuICAgICAgICByZWNvcmQsXG4gICAgICAgIGNoaWxkcmVuLFxuICAgICAgICBpZEZpZWxkLFxuICAgICAgICByZW5kZXJlcih7IGRhdGFTZXQsIHJlY29yZCwgdGV4dDogcmVjb3JkLmdldCh0aXRsZUZpZWxkKSB9KSxcbiAgICAgICAgdHJlZU5vZGVSZW5kZXJlcih7IGRhdGFTZXQsIHJlY29yZH0pLFxuICAgICAgICBsb2FkRGF0YSxcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBudWxsXG4gIH0pO1xufVxuIl0sInZlcnNpb24iOjN9