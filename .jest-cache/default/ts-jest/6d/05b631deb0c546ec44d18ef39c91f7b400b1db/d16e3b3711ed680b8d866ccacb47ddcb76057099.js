import React, { Children, cloneElement, Component } from 'react';
import classNames from 'classnames';
import warning from '../_util/warning';
import RcDropdown from '../rc-components/dropdown';
import { getPrefixCls } from '../configure';
export default class Dropdown extends Component {
    getTransitionName() {
        const { placement = '', transitionName } = this.props;
        if (transitionName !== undefined) {
            return transitionName;
        }
        if (placement.indexOf('top') >= 0) {
            return 'slide-down';
        }
        return 'slide-up';
    }
    componentDidMount() {
        const { overlay } = this.props;
        const overlayProps = overlay.props;
        warning(!overlayProps.mode || overlayProps.mode === 'vertical', `mode="${overlayProps.mode}" is not supported for Dropdown's Menu.`);
    }
    render() {
        const { children, prefixCls: customizePrefixCls, overlay: overlayElements, trigger, disabled, } = this.props;
        const prefixCls = getPrefixCls('dropdown', customizePrefixCls);
        const child = Children.only(children);
        const overlay = Children.only(overlayElements);
        const dropdownTrigger = cloneElement(child, {
            className: classNames(child.props.className, `${prefixCls}-trigger`),
            disabled,
        });
        // menu cannot be selectable in dropdown defaultly
        const selectable = overlay.props.selectable || false;
        const fixedModeOverlay = cloneElement(overlay, {
            mode: 'vertical',
            selectable,
        });
        return (React.createElement(RcDropdown, Object.assign({}, this.props, { prefixCls: prefixCls, transitionName: this.getTransitionName(), trigger: disabled ? [] : trigger, overlay: fixedModeOverlay }), dropdownTrigger));
    }
}
Dropdown.displayName = 'Dropdown';
Dropdown.defaultProps = {
    mouseEnterDelay: 0.15,
    mouseLeaveDelay: 0.1,
    placement: 'bottomLeft',
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvZHJvcGRvd24vZHJvcGRvd24udHN4IiwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxFQUFFLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQTJCLE1BQU0sT0FBTyxDQUFDO0FBQzFGLE9BQU8sVUFBVSxNQUFNLFlBQVksQ0FBQztBQUVwQyxPQUFPLE9BQU8sTUFBTSxrQkFBa0IsQ0FBQztBQUN2QyxPQUFPLFVBQVUsTUFBTSwyQkFBMkIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBb0I1QyxNQUFNLENBQUMsT0FBTyxPQUFPLFFBQVMsU0FBUSxTQUE2QjtJQVdqRSxpQkFBaUI7UUFDZixNQUFNLEVBQUUsU0FBUyxHQUFHLEVBQUUsRUFBRSxjQUFjLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3RELElBQUksY0FBYyxLQUFLLFNBQVMsRUFBRTtZQUNoQyxPQUFPLGNBQWMsQ0FBQztTQUN2QjtRQUNELElBQUksU0FBUyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDakMsT0FBTyxZQUFZLENBQUM7U0FDckI7UUFDRCxPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDO0lBRUQsaUJBQWlCO1FBQ2YsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDL0IsTUFBTSxZQUFZLEdBQUksT0FBZSxDQUFDLEtBQVksQ0FBQztRQUNuRCxPQUFPLENBQ0wsQ0FBQyxZQUFZLENBQUMsSUFBSSxJQUFJLFlBQVksQ0FBQyxJQUFJLEtBQUssVUFBVSxFQUN0RCxTQUFTLFlBQVksQ0FBQyxJQUFJLHlDQUF5QyxDQUNwRSxDQUFDO0lBQ0osQ0FBQztJQUVELE1BQU07UUFDSixNQUFNLEVBQ0osUUFBUSxFQUNSLFNBQVMsRUFBRSxrQkFBa0IsRUFDN0IsT0FBTyxFQUFFLGVBQWUsRUFDeEIsT0FBTyxFQUNQLFFBQVEsR0FDVCxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDZixNQUFNLFNBQVMsR0FBRyxZQUFZLENBQUMsVUFBVSxFQUFFLGtCQUFrQixDQUFDLENBQUM7UUFFL0QsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQXNCLENBQUM7UUFDM0QsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQXNCLENBQUM7UUFFcEUsTUFBTSxlQUFlLEdBQUcsWUFBWSxDQUFDLEtBQUssRUFBRTtZQUMxQyxTQUFTLEVBQUUsVUFBVSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLEdBQUcsU0FBUyxVQUFVLENBQUM7WUFDcEUsUUFBUTtTQUNULENBQUMsQ0FBQztRQUNILGtEQUFrRDtRQUNsRCxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLFVBQVUsSUFBSSxLQUFLLENBQUM7UUFDckQsTUFBTSxnQkFBZ0IsR0FBRyxZQUFZLENBQUMsT0FBTyxFQUFFO1lBQzdDLElBQUksRUFBRSxVQUFVO1lBQ2hCLFVBQVU7U0FDWCxDQUFDLENBQUM7UUFDSCxPQUFPLENBQ0wsb0JBQUMsVUFBVSxvQkFDTCxJQUFJLENBQUMsS0FBSyxJQUNkLFNBQVMsRUFBRSxTQUFTLEVBQ3BCLGNBQWMsRUFBRSxJQUFJLENBQUMsaUJBQWlCLEVBQUUsRUFDeEMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQ2hDLE9BQU8sRUFBRSxnQkFBZ0IsS0FFeEIsZUFBZSxDQUNMLENBQ2QsQ0FBQztJQUNKLENBQUM7O0FBaEVNLG9CQUFXLEdBQUcsVUFBVSxDQUFDO0FBSXpCLHFCQUFZLEdBQUc7SUFDcEIsZUFBZSxFQUFFLElBQUk7SUFDckIsZUFBZSxFQUFFLEdBQUc7SUFDcEIsU0FBUyxFQUFFLFlBQVk7Q0FDeEIsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvaHVpaHVhd2svRG9jdW1lbnRzL29wdC9jaG9lcm9kb24tdWkvY29tcG9uZW50cy9kcm9wZG93bi9kcm9wZG93bi50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IENoaWxkcmVuLCBjbG9uZUVsZW1lbnQsIENvbXBvbmVudCwgUmVhY3RFbGVtZW50LCBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBEcm9wZG93bkJ1dHRvbiBmcm9tICcuL2Ryb3Bkb3duLWJ1dHRvbic7XG5pbXBvcnQgd2FybmluZyBmcm9tICcuLi9fdXRpbC93YXJuaW5nJztcbmltcG9ydCBSY0Ryb3Bkb3duIGZyb20gJy4uL3JjLWNvbXBvbmVudHMvZHJvcGRvd24nO1xuaW1wb3J0IHsgZ2V0UHJlZml4Q2xzIH0gZnJvbSAnLi4vY29uZmlndXJlJztcbmltcG9ydCB7IFBsYWNlbWVudHMgfSBmcm9tICcuL2VudW0nO1xuXG5leHBvcnQgaW50ZXJmYWNlIERyb3BEb3duUHJvcHMge1xuICB0cmlnZ2VyPzogKCdjbGljaycgfCAnaG92ZXInIHwgJ2NvbnRleHRNZW51JylbXTtcbiAgb3ZlcmxheTogUmVhY3ROb2RlO1xuICBvblZpc2libGVDaGFuZ2U/OiAodmlzaWJsZT86IGJvb2xlYW4pID0+IHZvaWQ7XG4gIHZpc2libGU/OiBib29sZWFuO1xuICBkaXNhYmxlZD86IGJvb2xlYW47XG4gIGFsaWduPzogT2JqZWN0O1xuICBnZXRQb3B1cENvbnRhaW5lcj86ICh0cmlnZ2VyTm9kZTogRWxlbWVudCkgPT4gSFRNTEVsZW1lbnQ7XG4gIHByZWZpeENscz86IHN0cmluZztcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICB0cmFuc2l0aW9uTmFtZT86IHN0cmluZztcbiAgb3ZlcmxheUNsYXNzTmFtZT86c3RyaW5nO1xuICBwbGFjZW1lbnQ/OiAndG9wTGVmdCcgfCAndG9wQ2VudGVyJyB8ICd0b3BSaWdodCcgfCAnYm90dG9tTGVmdCcgfCAnYm90dG9tQ2VudGVyJyB8ICdib3R0b21SaWdodCc7XG4gIGZvcmNlUmVuZGVyPzogYm9vbGVhbjtcbiAgb3ZlcmxheVBsYWNlbWVudHM/OiBQbGFjZW1lbnRzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEcm9wZG93biBleHRlbmRzIENvbXBvbmVudDxEcm9wRG93blByb3BzLCBhbnk+IHtcbiAgc3RhdGljIGRpc3BsYXlOYW1lID0gJ0Ryb3Bkb3duJztcblxuICBzdGF0aWMgQnV0dG9uOiB0eXBlb2YgRHJvcGRvd25CdXR0b247XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBtb3VzZUVudGVyRGVsYXk6IDAuMTUsXG4gICAgbW91c2VMZWF2ZURlbGF5OiAwLjEsXG4gICAgcGxhY2VtZW50OiAnYm90dG9tTGVmdCcsXG4gIH07XG5cbiAgZ2V0VHJhbnNpdGlvbk5hbWUoKSB7XG4gICAgY29uc3QgeyBwbGFjZW1lbnQgPSAnJywgdHJhbnNpdGlvbk5hbWUgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKHRyYW5zaXRpb25OYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0cmFuc2l0aW9uTmFtZTtcbiAgICB9XG4gICAgaWYgKHBsYWNlbWVudC5pbmRleE9mKCd0b3AnKSA+PSAwKSB7XG4gICAgICByZXR1cm4gJ3NsaWRlLWRvd24nO1xuICAgIH1cbiAgICByZXR1cm4gJ3NsaWRlLXVwJztcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGNvbnN0IHsgb3ZlcmxheSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBvdmVybGF5UHJvcHMgPSAob3ZlcmxheSBhcyBhbnkpLnByb3BzIGFzIGFueTtcbiAgICB3YXJuaW5nKFxuICAgICAgIW92ZXJsYXlQcm9wcy5tb2RlIHx8IG92ZXJsYXlQcm9wcy5tb2RlID09PSAndmVydGljYWwnLFxuICAgICAgYG1vZGU9XCIke292ZXJsYXlQcm9wcy5tb2RlfVwiIGlzIG5vdCBzdXBwb3J0ZWQgZm9yIERyb3Bkb3duJ3MgTWVudS5gLFxuICAgICk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgY2hpbGRyZW4sXG4gICAgICBwcmVmaXhDbHM6IGN1c3RvbWl6ZVByZWZpeENscyxcbiAgICAgIG92ZXJsYXk6IG92ZXJsYXlFbGVtZW50cyxcbiAgICAgIHRyaWdnZXIsXG4gICAgICBkaXNhYmxlZCxcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBwcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ2Ryb3Bkb3duJywgY3VzdG9taXplUHJlZml4Q2xzKTtcblxuICAgIGNvbnN0IGNoaWxkID0gQ2hpbGRyZW4ub25seShjaGlsZHJlbikgYXMgUmVhY3RFbGVtZW50PGFueT47XG4gICAgY29uc3Qgb3ZlcmxheSA9IENoaWxkcmVuLm9ubHkob3ZlcmxheUVsZW1lbnRzKSBhcyBSZWFjdEVsZW1lbnQ8YW55PjtcblxuICAgIGNvbnN0IGRyb3Bkb3duVHJpZ2dlciA9IGNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNoaWxkLnByb3BzLmNsYXNzTmFtZSwgYCR7cHJlZml4Q2xzfS10cmlnZ2VyYCksXG4gICAgICBkaXNhYmxlZCxcbiAgICB9KTtcbiAgICAvLyBtZW51IGNhbm5vdCBiZSBzZWxlY3RhYmxlIGluIGRyb3Bkb3duIGRlZmF1bHRseVxuICAgIGNvbnN0IHNlbGVjdGFibGUgPSBvdmVybGF5LnByb3BzLnNlbGVjdGFibGUgfHwgZmFsc2U7XG4gICAgY29uc3QgZml4ZWRNb2RlT3ZlcmxheSA9IGNsb25lRWxlbWVudChvdmVybGF5LCB7XG4gICAgICBtb2RlOiAndmVydGljYWwnLFxuICAgICAgc2VsZWN0YWJsZSxcbiAgICB9KTtcbiAgICByZXR1cm4gKFxuICAgICAgPFJjRHJvcGRvd25cbiAgICAgICAgey4uLnRoaXMucHJvcHN9XG4gICAgICAgIHByZWZpeENscz17cHJlZml4Q2xzfVxuICAgICAgICB0cmFuc2l0aW9uTmFtZT17dGhpcy5nZXRUcmFuc2l0aW9uTmFtZSgpfVxuICAgICAgICB0cmlnZ2VyPXtkaXNhYmxlZCA/IFtdIDogdHJpZ2dlcn1cbiAgICAgICAgb3ZlcmxheT17Zml4ZWRNb2RlT3ZlcmxheX1cbiAgICAgID5cbiAgICAgICAge2Ryb3Bkb3duVHJpZ2dlcn1cbiAgICAgIDwvUmNEcm9wZG93bj5cbiAgICApO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=