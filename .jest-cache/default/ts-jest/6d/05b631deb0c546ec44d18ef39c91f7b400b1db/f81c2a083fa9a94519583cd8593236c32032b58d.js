import { __decorate } from "tslib";
import React from 'react';
import { computed } from 'mobx';
import { observer } from 'mobx-react';
import classNames from 'classnames';
import omit from 'lodash/omit';
import ObserverCheckBox from '../check-box/CheckBox';
import { $l } from '../locale-context';
import ObserverTextField from '../text-field/TextField';
import Icon from '../icon';
import { getItemKey, Select } from '../select/Select';
import autobind from '../_util/autobind';
import { stopPropagation } from '../_util/EventManager';
import ViewComponent from '../core/ViewComponent';
let TransferList = class TransferList extends Select {
    get popup() {
        return true;
    }
    get header() {
        const { prefixCls, multiple, observableProps: { header }, } = this;
        if (multiple || header) {
            return (React.createElement("div", { className: `${prefixCls}-header` },
                this.getHeaderSelected(),
                header && React.createElement("span", { className: `${prefixCls}-header-title` }, header)));
        }
        return undefined;
    }
    get footer() {
        const { prefixCls, filteredOptions, observableProps: { footer }, } = this;
        if (footer) {
            return React.createElement("div", { className: `${prefixCls}-footer` }, footer(filteredOptions));
        }
        return undefined;
    }
    getOtherProps() {
        return omit(super.getOtherProps(), [
            'type',
            'autoComplete',
            'ref',
            'body',
            'footer',
            'header',
            'selected',
            'onChange',
            'onSelect',
            'onSelectAll',
            'onKeyDown',
        ]);
    }
    getObservableProps(props, context) {
        return {
            ...super.getObservableProps(props, context),
            header: props.header,
            footer: props.footer,
        };
    }
    getMenuPrefixCls() {
        return `${this.prefixCls}-content`;
    }
    handleSelectAllChange(value) {
        const { onSelectAll } = this.props;
        if (onSelectAll) {
            onSelectAll(value ? this.filteredOptions : []);
        }
    }
    handleClear() {
        this.setText(undefined);
    }
    getHeaderSelected() {
        const { filteredOptions: { length }, multiple, prefixCls, props: { selected: { length: selectedLength }, }, } = this;
        const selectedText = selectedLength ? `${selectedLength}/` : '';
        if (multiple) {
            return (React.createElement(ObserverCheckBox, { disabled: this.isDisabled(), onChange: this.handleSelectAllChange, onFocus: stopPropagation, checked: !!length && length === selectedLength, indeterminate: !!selectedLength && length !== selectedLength },
                React.createElement("span", { className: `${prefixCls}-header-selected` }, `${selectedText}${length}${$l('Transfer', 'items')}`)));
        }
    }
    getSearchField() {
        const { prefixCls } = this;
        return (React.createElement("div", { className: `${prefixCls}-body-search-wrapper` },
            React.createElement(ObserverTextField, { ref: this.elementReference, onInput: this.handleChange, onClear: this.handleClear, onKeyDown: this.handleKeyDown, suffix: React.createElement(Icon, { type: "search" }), clearButton: true })));
    }
    renderBody() {
        const { prefixCls, searchable, textField, valueField, props: { selected, onSelect }, } = this;
        const searchField = searchable && this.getSearchField();
        const classString = classNames(`${prefixCls}-body`, {
            [`${prefixCls}-body-with-search`]: searchable,
        });
        const selectedKeys = selected.map(record => getItemKey(record, record.get(textField), record.get(valueField)));
        return (React.createElement("div", { className: classString },
            searchField,
            React.createElement("div", { className: `${prefixCls}-content-wrapper`, onFocus: searchable ? stopPropagation : undefined }, this.getMenu({ selectedKeys, onClick: onSelect, focusable: !this.searchable }))));
    }
    getClassName() {
        const { prefixCls, header, footer } = this;
        return super.getClassName({
            [`${prefixCls}-with-header`]: header,
            [`${prefixCls}-with-footer`]: footer,
        });
    }
    removeLastValue() { }
    handleBlur(e) {
        ViewComponent.prototype.handleBlur.call(this, e);
    }
    render() {
        const { header, footer } = this;
        return (React.createElement("div", Object.assign({}, this.getOtherProps()),
            header,
            this.renderBody(),
            footer));
    }
};
__decorate([
    computed
], TransferList.prototype, "popup", null);
__decorate([
    computed
], TransferList.prototype, "header", null);
__decorate([
    computed
], TransferList.prototype, "footer", null);
__decorate([
    autobind
], TransferList.prototype, "handleSelectAllChange", null);
__decorate([
    autobind
], TransferList.prototype, "handleClear", null);
__decorate([
    autobind
], TransferList.prototype, "handleBlur", null);
TransferList = __decorate([
    observer
], TransferList);
export default TransferList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,