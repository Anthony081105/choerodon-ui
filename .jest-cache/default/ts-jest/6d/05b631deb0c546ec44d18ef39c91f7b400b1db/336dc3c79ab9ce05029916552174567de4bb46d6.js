import { __decorate } from "tslib";
import React, { Component } from 'react';
import { findDOMNode } from 'react-dom';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import shallowequal from 'lodash/isEqual';
import omit from 'lodash/omit';
import noop from 'lodash/noop';
import getScroll from '../_util/getScroll';
import { throttleByAnimationFrameDecorator } from '../_util/throttleByAnimationFrame';
import addEventListener from '../_util/addEventListener';
import { getPrefixCls } from '../configure';
function getTargetRect(target) {
    return target !== window
        ? target.getBoundingClientRect()
        : { top: 0, left: 0, bottom: 0 };
}
function getOffset(element, target) {
    const elemRect = element.getBoundingClientRect();
    const targetRect = getTargetRect(target);
    const scrollTop = getScroll(target, true);
    const scrollLeft = getScroll(target, false);
    const docElem = window.document.body;
    const clientTop = docElem.clientTop || 0;
    const clientLeft = docElem.clientLeft || 0;
    return {
        top: elemRect.top - targetRect.top + scrollTop - clientTop,
        left: elemRect.left - targetRect.left + scrollLeft - clientLeft,
        width: elemRect.width,
        height: elemRect.height,
    };
}
function getDefaultTarget() {
    return typeof window !== 'undefined' ? window : null;
}
export default class Affix extends Component {
    constructor() {
        super(...arguments);
        this.state = {
            affixStyle: undefined,
            placeholderStyle: undefined,
        };
        this.eventHandlers = {};
        this.events = [
            'resize',
            'scroll',
            'touchstart',
            'touchmove',
            'touchend',
            'pageshow',
            'load',
        ];
        this.saveFixedNode = (node) => {
            this.fixedNode = node;
        };
        this.savePlaceholderNode = (node) => {
            this.placeholderNode = node;
        };
    }
    setAffixStyle(e, affixStyle) {
        const { onChange = noop, target = getDefaultTarget } = this.props;
        const { affixStyle: originalAffixStyle } = this.state;
        const isWindow = target() === window;
        if (e.type === 'scroll' && originalAffixStyle && affixStyle && isWindow) {
            return;
        }
        if (shallowequal(affixStyle, originalAffixStyle)) {
            return;
        }
        this.setState({ affixStyle: affixStyle }, () => {
            if ((affixStyle && !originalAffixStyle) || (!affixStyle && originalAffixStyle)) {
                const { state } = this;
                onChange(!!state.affixStyle);
            }
        });
    }
    setPlaceholderStyle(placeholderStyle) {
        const { placeholderStyle: originalPlaceholderStyle } = this.state;
        if (shallowequal(placeholderStyle, originalPlaceholderStyle)) {
            return;
        }
        this.setState({ placeholderStyle: placeholderStyle });
    }
    syncPlaceholderStyle(e) {
        const { affixStyle } = this.state;
        if (!affixStyle) {
            return;
        }
        this.placeholderNode.style.cssText = '';
        this.setAffixStyle(e, {
            ...affixStyle,
            width: this.placeholderNode.offsetWidth,
        });
        this.setPlaceholderStyle({
            width: this.placeholderNode.offsetWidth,
        });
    }
    updatePosition(e) {
        const { offsetBottom, offset, target = getDefaultTarget } = this.props;
        let { offsetTop } = this.props;
        const targetNode = target();
        // Backwards support
        offsetTop = typeof offsetTop === 'undefined' ? offset : offsetTop;
        const scrollTop = getScroll(targetNode, true);
        const affixNode = findDOMNode(this);
        const elemOffset = getOffset(affixNode, targetNode);
        const elemSize = {
            width: this.fixedNode.offsetWidth,
            height: this.fixedNode.offsetHeight,
        };
        const offsetMode = {
            top: false,
            bottom: false,
        };
        // Default to `offsetTop=0`.
        if (typeof offsetTop !== 'number' && typeof offsetBottom !== 'number') {
            offsetMode.top = true;
            offsetTop = 0;
        }
        else {
            offsetMode.top = typeof offsetTop === 'number';
            offsetMode.bottom = typeof offsetBottom === 'number';
        }
        const targetRect = getTargetRect(targetNode);
        const targetInnerHeight = targetNode.innerHeight || targetNode.clientHeight;
        if (scrollTop >= elemOffset.top - offsetTop && offsetMode.top) {
            // Fixed Top
            const width = elemOffset.width;
            const top = targetRect.top + offsetTop;
            this.setAffixStyle(e, {
                position: 'fixed',
                top,
                left: targetRect.left + elemOffset.left,
                width,
            });
            this.setPlaceholderStyle({
                width,
                height: elemSize.height,
            });
        }
        else if (scrollTop <=
            elemOffset.top + elemSize.height + offsetBottom - targetInnerHeight &&
            offsetMode.bottom) {
            // Fixed Bottom
            const targetBottomOffet = targetNode === window ? 0 : window.innerHeight - targetRect.bottom;
            const width = elemOffset.width;
            this.setAffixStyle(e, {
                position: 'fixed',
                bottom: targetBottomOffet + offsetBottom,
                left: targetRect.left + elemOffset.left,
                width,
            });
            this.setPlaceholderStyle({
                width,
                height: elemOffset.height,
            });
        }
        else {
            const { affixStyle } = this.state;
            if (e.type === 'resize' &&
                affixStyle &&
                affixStyle.position === 'fixed' &&
                affixNode.offsetWidth) {
                this.setAffixStyle(e, { ...affixStyle, width: affixNode.offsetWidth });
            }
            else {
                this.setAffixStyle(e, null);
            }
            this.setPlaceholderStyle(null);
        }
        if (e.type === 'resize') {
            this.syncPlaceholderStyle(e);
        }
    }
    componentDidMount() {
        const { props } = this;
        const target = props.target || getDefaultTarget;
        // Wait for parent component ref has its value
        this.timeout = setTimeout(() => {
            this.setTargetEventListeners(target);
            // Mock Event object.
            this.updatePosition({});
        });
    }
    componentWillReceiveProps(nextProps) {
        const { offsetTop, offsetBottom, target } = this.props;
        if (target !== nextProps.target) {
            this.clearEventListeners();
            this.setTargetEventListeners(nextProps.target);
            // Mock Event object.
            this.updatePosition({});
        }
        if (offsetTop !== nextProps.offsetTop || offsetBottom !== nextProps.offsetBottom) {
            this.updatePosition({});
        }
    }
    componentWillUnmount() {
        this.clearEventListeners();
        clearTimeout(this.timeout);
        this.updatePosition.cancel();
    }
    setTargetEventListeners(getTarget) {
        const target = getTarget();
        if (!target) {
            return;
        }
        this.clearEventListeners();
        this.events.forEach(eventName => {
            this.eventHandlers[eventName] = addEventListener(target, eventName, this.updatePosition);
        });
    }
    clearEventListeners() {
        this.events.forEach(eventName => {
            const handler = this.eventHandlers[eventName];
            if (handler && handler.remove) {
                handler.remove();
            }
        });
    }
    render() {
        const { prefixCls, style, children } = this.props;
        const { affixStyle, placeholderStyle } = this.state;
        const className = classNames({
            [getPrefixCls('affix', prefixCls)]: affixStyle,
        });
        const props = omit(this.props, [
            'prefixCls',
            'offsetTop',
            'offsetBottom',
            'target',
            'onChange',
        ]);
        return (React.createElement("div", Object.assign({}, props, { style: { ...placeholderStyle, ...style }, ref: this.savePlaceholderNode }),
            React.createElement("div", { className: className, ref: this.saveFixedNode, style: affixStyle }, children)));
    }
}
Affix.displayName = 'Affix';
Affix.propTypes = {
    offsetTop: PropTypes.number,
    offsetBottom: PropTypes.number,
    target: PropTypes.func,
};
__decorate([
    throttleByAnimationFrameDecorator()
], Affix.prototype, "updatePosition", null);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,