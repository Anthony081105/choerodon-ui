import { Children, Component } from 'react';
import PropTypes from 'prop-types';
import moment from 'moment';
import interopDefault from '../_util/interopDefault';
import { changeConfirmLocale } from '../modal/locale';
function setMomentLocale(locale) {
    if (locale && locale.locale) {
        interopDefault(moment).locale(locale.locale);
    }
    else {
        interopDefault(moment).locale('en');
    }
}
export default class LocaleProvider extends Component {
    getChildContext() {
        const { locale } = this.props;
        return {
            c7nLocale: {
                ...locale,
                exist: true,
            },
        };
    }
    componentWillMount() {
        const { locale } = this.props;
        setMomentLocale(locale);
        this.componentDidUpdate();
    }
    componentWillReceiveProps(nextProps) {
        const { locale } = this.props;
        const nextLocale = nextProps.locale;
        if (locale !== nextLocale) {
            setMomentLocale(nextProps.locale);
        }
    }
    componentDidUpdate() {
        const { locale } = this.props;
        changeConfirmLocale(locale && locale.Modal);
    }
    componentWillUnmount() {
        changeConfirmLocale();
    }
    render() {
        const { children } = this.props;
        return Children.only(children);
    }
}
LocaleProvider.propTypes = {
    locale: PropTypes.object,
};
LocaleProvider.defaultProps = {
    locale: {},
};
LocaleProvider.childContextTypes = {
    c7nLocale: PropTypes.object,
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvbG9jYWxlLXByb3ZpZGVyL2luZGV4LnRzeCIsIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBZ0IsTUFBTSxPQUFPLENBQUM7QUFDMUQsT0FBTyxTQUFTLE1BQU0sWUFBWSxDQUFDO0FBQ25DLE9BQU8sTUFBTSxNQUFNLFFBQVEsQ0FBQztBQUM1QixPQUFPLGNBQWMsTUFBTSx5QkFBeUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsbUJBQW1CLEVBQWUsTUFBTSxpQkFBaUIsQ0FBQztBQWdEbkUsU0FBUyxlQUFlLENBQUMsTUFBYztJQUNyQyxJQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFO1FBQzNCLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQzlDO1NBQU07UUFDTCxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3JDO0FBQ0gsQ0FBQztBQUVELE1BQU0sQ0FBQyxPQUFPLE9BQU8sY0FBZSxTQUFRLFNBQW1DO0lBYTdFLGVBQWU7UUFDYixNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUM5QixPQUFPO1lBQ0wsU0FBUyxFQUFFO2dCQUNULEdBQUcsTUFBTTtnQkFDVCxLQUFLLEVBQUUsSUFBSTthQUNaO1NBQ0YsQ0FBQztJQUNKLENBQUM7SUFFRCxrQkFBa0I7UUFDaEIsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDOUIsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFFRCx5QkFBeUIsQ0FBQyxTQUE4QjtRQUN0RCxNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUM5QixNQUFNLFVBQVUsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDO1FBQ3BDLElBQUksTUFBTSxLQUFLLFVBQVUsRUFBRTtZQUN6QixlQUFlLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ25DO0lBQ0gsQ0FBQztJQUVELGtCQUFrQjtRQUNoQixNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUM5QixtQkFBbUIsQ0FBQyxNQUFNLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRCxvQkFBb0I7UUFDbEIsbUJBQW1CLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBRUQsTUFBTTtRQUNKLE1BQU0sRUFBRSxRQUFRLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ2hDLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNqQyxDQUFDOztBQWhETSx3QkFBUyxHQUFHO0lBQ2pCLE1BQU0sRUFBRSxTQUFTLENBQUMsTUFBTTtDQUN6QixDQUFDO0FBRUssMkJBQVksR0FBRztJQUNwQixNQUFNLEVBQUUsRUFBRTtDQUNYLENBQUM7QUFFSyxnQ0FBaUIsR0FBRztJQUN6QixTQUFTLEVBQUUsU0FBUyxDQUFDLE1BQU07Q0FDNUIsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvaHVpaHVhd2svRG9jdW1lbnRzL29wdC9jaG9lcm9kb24tdWkvY29tcG9uZW50cy9sb2NhbGUtcHJvdmlkZXIvaW5kZXgudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoaWxkcmVuLCBDb21wb25lbnQsIFJlYWN0RWxlbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgaW50ZXJvcERlZmF1bHQgZnJvbSAnLi4vX3V0aWwvaW50ZXJvcERlZmF1bHQnO1xuaW1wb3J0IHsgY2hhbmdlQ29uZmlybUxvY2FsZSwgTW9kYWxMb2NhbGUgfSBmcm9tICcuLi9tb2RhbC9sb2NhbGUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIExvY2FsZSB7XG4gIGxvY2FsZTogc3RyaW5nO1xuICBQYWdpbmF0aW9uPzogT2JqZWN0O1xuICBDYXNjYWRlcj86IE9iamVjdDtcbiAgRGF0ZVBpY2tlcj86IE9iamVjdDtcbiAgVGltZVBpY2tlcj86IE9iamVjdDtcbiAgQ2FsZW5kYXI/OiBPYmplY3Q7XG4gIFRhYmxlPzogT2JqZWN0O1xuICBNb2RhbD86IE1vZGFsTG9jYWxlO1xuICBQb3Bjb25maXJtPzogT2JqZWN0O1xuICBUcmFuc2Zlcj86IE9iamVjdDtcbiAgU2VsZWN0PzogT2JqZWN0O1xuICBVcGxvYWQ/OiBPYmplY3Q7XG4gIGltYWdlQ3JvcD86IGltYWdlQ3JvcDtcbiAgcGVyZm9ybWFuY2VUYWJsZT86IFBlcmZvcm1hbmNlVGFibGU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgaW1hZ2VDcm9wIHtcbiAgZWRpdEltYWdlOiBzdHJpbmcsXG4gIGF2YXRhclVwbG9hZEVycm9yOiBzdHJpbmcsXG4gIGF2YXRhclNlcnZlckVycm9yOiBzdHJpbmcsXG4gIGF2YXRhclVwbG9hZDogc3RyaW5nLFxuICBhdmF0YXJSZW1pbmRlcjogc3RyaW5nLFxuICBwcmV2aWV3OiBzdHJpbmcsXG4gIHJlVXBsb2FkOiBzdHJpbmcsXG4gIGltYWdlVG9vTGFyZ2U6IHN0cmluZyxcbiAgaW1hZ2VVcGxvYWRFcnJvcjogc3RyaW5nLFxuICBpbWFnZURyYWdIZXJlOiBzdHJpbmcsXG4gIHBsZWFzZVVwbG9hZDogc3RyaW5nLFxuICB1cGxvYWRUeXBlOiBzdHJpbmcsXG4gIHBpY3R1cmU6IHN0cmluZyxcbiAgY2FuY2VsQnV0dG9uOiBzdHJpbmcsXG4gIHNhdmVCdXR0b246IHN0cmluZyxcbiAgY2hhbmdlQXZhdGFyOiBzdHJpbmcsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGVyZm9ybWFuY2VUYWJsZSB7XG4gIGVtcHR5TWVzc2FnZTogc3RyaW5nO1xuICBsb2FkaW5nOnN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBMb2NhbGVQcm92aWRlclByb3BzIHtcbiAgbG9jYWxlOiBMb2NhbGU7XG4gIGNoaWxkcmVuPzogUmVhY3RFbGVtZW50PGFueT47XG59XG5cbmZ1bmN0aW9uIHNldE1vbWVudExvY2FsZShsb2NhbGU6IExvY2FsZSkge1xuICBpZiAobG9jYWxlICYmIGxvY2FsZS5sb2NhbGUpIHtcbiAgICBpbnRlcm9wRGVmYXVsdChtb21lbnQpLmxvY2FsZShsb2NhbGUubG9jYWxlKTtcbiAgfSBlbHNlIHtcbiAgICBpbnRlcm9wRGVmYXVsdChtb21lbnQpLmxvY2FsZSgnZW4nKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMb2NhbGVQcm92aWRlciBleHRlbmRzIENvbXBvbmVudDxMb2NhbGVQcm92aWRlclByb3BzLCBhbnk+IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBsb2NhbGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIH07XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBsb2NhbGU6IHt9LFxuICB9O1xuXG4gIHN0YXRpYyBjaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgICBjN25Mb2NhbGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIH07XG5cbiAgZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIGNvbnN0IHsgbG9jYWxlIH0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiB7XG4gICAgICBjN25Mb2NhbGU6IHtcbiAgICAgICAgLi4ubG9jYWxlLFxuICAgICAgICBleGlzdDogdHJ1ZSxcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICBjb25zdCB7IGxvY2FsZSB9ID0gdGhpcy5wcm9wcztcbiAgICBzZXRNb21lbnRMb2NhbGUobG9jYWxlKTtcbiAgICB0aGlzLmNvbXBvbmVudERpZFVwZGF0ZSgpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHM6IExvY2FsZVByb3ZpZGVyUHJvcHMpIHtcbiAgICBjb25zdCB7IGxvY2FsZSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBuZXh0TG9jYWxlID0gbmV4dFByb3BzLmxvY2FsZTtcbiAgICBpZiAobG9jYWxlICE9PSBuZXh0TG9jYWxlKSB7XG4gICAgICBzZXRNb21lbnRMb2NhbGUobmV4dFByb3BzLmxvY2FsZSk7XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIGNvbnN0IHsgbG9jYWxlIH0gPSB0aGlzLnByb3BzO1xuICAgIGNoYW5nZUNvbmZpcm1Mb2NhbGUobG9jYWxlICYmIGxvY2FsZS5Nb2RhbCk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBjaGFuZ2VDb25maXJtTG9jYWxlKCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBjaGlsZHJlbiB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gQ2hpbGRyZW4ub25seShjaGlsZHJlbik7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==