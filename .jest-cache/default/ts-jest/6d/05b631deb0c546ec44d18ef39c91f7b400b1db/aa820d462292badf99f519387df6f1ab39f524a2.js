import React, { cloneElement, Component, isValidElement } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import omit from 'lodash/omit';
import isCssAnimationSupported from '../_util/isCssAnimationSupported';
import Animate from '../animate';
import Progress from '../progress/progress';
import { getPrefixCls } from '../configure';
export default class Spin extends Component {
    constructor(props) {
        super(props);
        const spinning = props.spinning;
        this.state = {
            spinning,
        };
    }
    componentDidMount() {
        if (!isCssAnimationSupported()) {
            // Show text in IE9
            this.setState({
                notCssAnimationSupported: true,
            });
        }
    }
    componentWillUnmount() {
        if (this.debounceTimeout) {
            clearTimeout(this.debounceTimeout);
        }
        if (this.delayTimeout) {
            clearTimeout(this.delayTimeout);
        }
    }
    componentWillReceiveProps(nextProps) {
        const { spinning: currentSpinning } = this.props;
        const spinning = nextProps.spinning;
        const { delay } = this.props;
        if (this.debounceTimeout) {
            clearTimeout(this.debounceTimeout);
        }
        if (currentSpinning && !spinning) {
            this.debounceTimeout = window.setTimeout(() => this.setState({ spinning }), 200);
            if (this.delayTimeout) {
                clearTimeout(this.delayTimeout);
            }
        }
        else if (spinning && delay && !isNaN(Number(delay))) {
            if (this.delayTimeout) {
                clearTimeout(this.delayTimeout);
            }
            this.delayTimeout = window.setTimeout(() => this.setState({ spinning }), delay);
        }
        else {
            this.setState({ spinning });
        }
    }
    renderIndicator(prefixCls) {
        const { indicator, size } = this.props;
        const dotClassName = `${prefixCls}-dot`;
        if (isValidElement(indicator)) {
            return cloneElement(indicator, {
                className: classNames(indicator.props.className, dotClassName),
            });
        }
        return (React.createElement(Progress, { size: size, className: dotClassName, type: "loading" /* loading */ }));
    }
    render() {
        const { className, size, prefixCls: customizePrefixCls, tip, wrapperClassName, children, style, ...restProps } = this.props;
        const { spinning, notCssAnimationSupported } = this.state;
        const prefixCls = getPrefixCls('spin', customizePrefixCls);
        const spinClassName = classNames(prefixCls, {
            [`${prefixCls}-sm`]: size === "small" /* small */,
            [`${prefixCls}-lg`]: size === "large" /* large */,
            [`${prefixCls}-spinning`]: spinning,
            [`${prefixCls}-show-text`]: !!tip || notCssAnimationSupported,
        }, className);
        // fix https://fb.me/react-unknown-prop
        const divProps = omit(restProps, ['spinning', 'delay', 'indicator']);
        const spinElement = (React.createElement("div", Object.assign({}, divProps, { className: spinClassName, style: style, key: "loading" }),
            this.renderIndicator(prefixCls),
            tip ? React.createElement("div", { className: `${prefixCls}-text` }, tip) : null));
        if (children) {
            let animateClassName = `${prefixCls}-nested-loading`;
            if (wrapperClassName) {
                animateClassName += ` ${wrapperClassName}`;
            }
            const containerClassName = classNames({
                [`${prefixCls}-container`]: true,
                [`${prefixCls}-blur`]: spinning,
            });
            return (React.createElement(Animate, Object.assign({}, divProps, { component: "div", className: animateClassName, transitionName: "fade" }),
                spinning && spinElement,
                React.createElement("div", { className: containerClassName, key: "container" }, children)));
        }
        return spinElement;
    }
}
Spin.displayName = 'Spin';
Spin.defaultProps = {
    spinning: true,
    size: "default" /* default */,
    wrapperClassName: '',
};
Spin.propTypes = {
    prefixCls: PropTypes.string,
    className: PropTypes.string,
    spinning: PropTypes.bool,
    size: PropTypes.oneOf(["small" /* small */, "default" /* default */, "large" /* large */]),
    wrapperClassName: PropTypes.string,
    indicator: PropTypes.node,
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,