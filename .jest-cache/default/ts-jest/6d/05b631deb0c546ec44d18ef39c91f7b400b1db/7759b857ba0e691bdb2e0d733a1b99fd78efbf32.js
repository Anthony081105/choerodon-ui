import requestAnimationFramePolyfill from 'dom-lib/lib/animation/requestAnimationFramePolyfill';
import cancelAnimationFramePolyfill from 'dom-lib/lib/animation/cancelAnimationFramePolyfill';
export const cancelAnimationTimeout = (frame) => cancelAnimationFramePolyfill(frame.id);
/**
 * Recursively calls requestAnimationFrame until a specified delay has been met or exceeded.
 * When the delay time has been reached the function you're timing out will be called.
 *
 * Credit: Joe Lambert (https://gist.github.com/joelambert/1002116#file-requesttimeout-js)
 */
export const requestAnimationTimeout = (callback, delay) => {
    let start;
    // wait for end of processing current event handler, because event handler may be long
    Promise.resolve().then(() => {
        start = Date.now();
    });
    let frame = null;
    const timeout = () => {
        if (Date.now() - start >= delay) {
            callback.call(null);
        }
        else {
            // @ts-ignore
            frame.id = requestAnimationFramePolyfill(timeout);
        }
    };
    // @ts-ignore
    frame = {
        id: requestAnimationFramePolyfill(timeout),
    };
    // @ts-ignore
    return frame;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMtcHJvL3BlcmZvcm1hbmNlLXRhYmxlL3V0aWxzL3JlcXVlc3RBbmltYXRpb25UaW1lb3V0LnRzIiwibWFwcGluZ3MiOiJBQUFBLE9BQU8sNkJBQTZCLE1BQU0scURBQXFELENBQUM7QUFDaEcsT0FBTyw0QkFBNEIsTUFBTSxvREFBb0QsQ0FBQztBQUU5RixNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRyxDQUFDLEtBQStCLEVBQUUsRUFBRSxDQUN4RSw0QkFBNEIsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7QUFFekM7Ozs7O0dBS0c7QUFDSCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxDQUNyQyxRQUFrQixFQUNsQixLQUFhLEVBQ2EsRUFBRTtJQUM1QixJQUFJLEtBQUssQ0FBQztJQUNWLHNGQUFzRjtJQUN0RixPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtRQUMxQixLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3JCLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDO0lBRWpCLE1BQU0sT0FBTyxHQUFHLEdBQUcsRUFBRTtRQUNuQixJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxLQUFLLElBQUksS0FBSyxFQUFFO1lBQy9CLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDckI7YUFBTTtZQUNMLGFBQWE7WUFDYixLQUFLLENBQUMsRUFBRSxHQUFHLDZCQUE2QixDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ25EO0lBQ0gsQ0FBQyxDQUFDO0lBRUYsYUFBYTtJQUNiLEtBQUssR0FBRztRQUNOLEVBQUUsRUFBRSw2QkFBNkIsQ0FBQyxPQUFPLENBQUM7S0FDM0MsQ0FBQztJQUVGLGFBQWE7SUFDYixPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvaHVpaHVhd2svRG9jdW1lbnRzL29wdC9jaG9lcm9kb24tdWkvY29tcG9uZW50cy1wcm8vcGVyZm9ybWFuY2UtdGFibGUvdXRpbHMvcmVxdWVzdEFuaW1hdGlvblRpbWVvdXQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHJlcXVlc3RBbmltYXRpb25GcmFtZVBvbHlmaWxsIGZyb20gJ2RvbS1saWIvbGliL2FuaW1hdGlvbi9yZXF1ZXN0QW5pbWF0aW9uRnJhbWVQb2x5ZmlsbCc7XG5pbXBvcnQgY2FuY2VsQW5pbWF0aW9uRnJhbWVQb2x5ZmlsbCBmcm9tICdkb20tbGliL2xpYi9hbmltYXRpb24vY2FuY2VsQW5pbWF0aW9uRnJhbWVQb2x5ZmlsbCc7XG5cbmV4cG9ydCBjb25zdCBjYW5jZWxBbmltYXRpb25UaW1lb3V0ID0gKGZyYW1lOiBLZXlmcmFtZUFuaW1hdGlvbk9wdGlvbnMpID0+XG4gIGNhbmNlbEFuaW1hdGlvbkZyYW1lUG9seWZpbGwoZnJhbWUuaWQpO1xuXG4vKipcbiAqIFJlY3Vyc2l2ZWx5IGNhbGxzIHJlcXVlc3RBbmltYXRpb25GcmFtZSB1bnRpbCBhIHNwZWNpZmllZCBkZWxheSBoYXMgYmVlbiBtZXQgb3IgZXhjZWVkZWQuXG4gKiBXaGVuIHRoZSBkZWxheSB0aW1lIGhhcyBiZWVuIHJlYWNoZWQgdGhlIGZ1bmN0aW9uIHlvdSdyZSB0aW1pbmcgb3V0IHdpbGwgYmUgY2FsbGVkLlxuICpcbiAqIENyZWRpdDogSm9lIExhbWJlcnQgKGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2pvZWxhbWJlcnQvMTAwMjExNiNmaWxlLXJlcXVlc3R0aW1lb3V0LWpzKVxuICovXG5leHBvcnQgY29uc3QgcmVxdWVzdEFuaW1hdGlvblRpbWVvdXQgPSAoXG4gIGNhbGxiYWNrOiBGdW5jdGlvbixcbiAgZGVsYXk6IG51bWJlcixcbik6IEtleWZyYW1lQW5pbWF0aW9uT3B0aW9ucyA9PiB7XG4gIGxldCBzdGFydDtcbiAgLy8gd2FpdCBmb3IgZW5kIG9mIHByb2Nlc3NpbmcgY3VycmVudCBldmVudCBoYW5kbGVyLCBiZWNhdXNlIGV2ZW50IGhhbmRsZXIgbWF5IGJlIGxvbmdcbiAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiB7XG4gICAgc3RhcnQgPSBEYXRlLm5vdygpO1xuICB9KTtcblxuICBsZXQgZnJhbWUgPSBudWxsO1xuXG4gIGNvbnN0IHRpbWVvdXQgPSAoKSA9PiB7XG4gICAgaWYgKERhdGUubm93KCkgLSBzdGFydCA+PSBkZWxheSkge1xuICAgICAgY2FsbGJhY2suY2FsbChudWxsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgZnJhbWUuaWQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWVQb2x5ZmlsbCh0aW1lb3V0KTtcbiAgICB9XG4gIH07XG5cbiAgLy8gQHRzLWlnbm9yZVxuICBmcmFtZSA9IHtcbiAgICBpZDogcmVxdWVzdEFuaW1hdGlvbkZyYW1lUG9seWZpbGwodGltZW91dCksXG4gIH07XG5cbiAgLy8gQHRzLWlnbm9yZVxuICByZXR1cm4gZnJhbWU7XG59O1xuIl0sInZlcnNpb24iOjN9