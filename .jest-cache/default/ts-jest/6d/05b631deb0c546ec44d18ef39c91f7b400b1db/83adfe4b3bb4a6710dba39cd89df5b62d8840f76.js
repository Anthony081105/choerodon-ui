import React, { Component } from 'react';
import Button from '../button/Button';
import SelectTrigger from '../rc-components/select/SelectTrigger';
import { Item as MenuItem } from '../rc-components/menu';
import { UNSELECTABLE_ATTRIBUTE, UNSELECTABLE_STYLE } from '../rc-components/select/util';
import { getColumnKey } from './util';
import { getPrefixCls } from '../configure';
export default class ColumnFilter extends Component {
    constructor() {
        super(...arguments);
        this.state = {
            open: false,
        };
        this.onMenuSelect = (item) => {
            item.item.props.value.hidden = false;
            this.fireChange(item);
        };
        this.onMenuDeselect = (item) => {
            item.item.props.value.hidden = true;
            this.fireChange(item);
        };
        this.onDropdownVisibleChange = (open) => {
            const { state } = this;
            if (state.open !== open) {
                this.setState({
                    open,
                });
            }
        };
    }
    render() {
        const { prefixCls, getPopupContainer } = this.props;
        const { open } = this.state;
        return (React.createElement("div", { className: `${prefixCls}-columns-chooser` },
            React.createElement(SelectTrigger, { prefixCls: getPrefixCls('select'), showAction: ['click'], options: this.getOptions(), value: this.getVisibleColumns(), getPopupContainer: getPopupContainer, multiple: true, onDropdownVisibleChange: this.onDropdownVisibleChange, onMenuSelect: this.onMenuSelect, onMenuDeselect: this.onMenuDeselect, visible: open, popupPlacement: "bottomRight", dropdownMatchSelectWidth: false, dropdownStyle: { minWidth: 187 } },
                React.createElement(Button, { shape: "circle", icon: "view_column", size: "small" /* small */ }))));
    }
    fireChange(item) {
        const { onColumnFilterChange } = this.props;
        if (onColumnFilterChange) {
            onColumnFilterChange(item);
        }
    }
    getOptions() {
        const { columns } = this.props;
        const options = [];
        (columns || []).forEach((column, i) => {
            const { title, notDisplay, disableClick } = column;
            if (title && !notDisplay) {
                options.push(React.createElement(MenuItem, { disabled: disableClick, style: UNSELECTABLE_STYLE, attribute: UNSELECTABLE_ATTRIBUTE, value: column, key: getColumnKey(column, i) }, title));
            }
        });
        return options;
    }
    getVisibleColumns() {
        const { columns } = this.props;
        return (columns || []).filter(column => !column.hidden);
    }
}
ColumnFilter.displayName = 'ColumnFilter';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvdGFibGUvQ29sdW1uRmlsdGVyLnRzeCIsIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssRUFBRSxFQUFFLFNBQVMsRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUN6QyxPQUFPLE1BQU0sTUFBTSxrQkFBa0IsQ0FBQztBQUV0QyxPQUFPLGFBQWEsTUFBTSx1Q0FBdUMsQ0FBQztBQUNsRSxPQUFPLEVBQUUsSUFBSSxJQUFJLFFBQVEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3pELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQzFGLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFdEMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGNBQWMsQ0FBQztBQWE1QyxNQUFNLENBQUMsT0FBTyxPQUFPLFlBQWdCLFNBQVEsU0FBa0Q7SUFBL0Y7O1FBR0UsVUFBSyxHQUFHO1lBQ04sSUFBSSxFQUFFLEtBQUs7U0FDWixDQUFDO1FBNEJGLGlCQUFZLEdBQUcsQ0FBQyxJQUFTLEVBQUUsRUFBRTtZQUMzQixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztZQUNyQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hCLENBQUMsQ0FBQztRQUVGLG1CQUFjLEdBQUcsQ0FBQyxJQUFTLEVBQUUsRUFBRTtZQUM3QixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztZQUNwQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hCLENBQUMsQ0FBQztRQUVGLDRCQUF1QixHQUFHLENBQUMsSUFBYSxFQUFFLEVBQUU7WUFDMUMsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLElBQUksQ0FBQztZQUN2QixJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssSUFBSSxFQUFFO2dCQUN2QixJQUFJLENBQUMsUUFBUSxDQUFDO29CQUNaLElBQUk7aUJBQ0wsQ0FBQyxDQUFDO2FBQ0o7UUFDSCxDQUFDLENBQUM7SUFtQ0osQ0FBQztJQTlFQyxNQUFNO1FBQ0osTUFBTSxFQUFFLFNBQVMsRUFBRSxpQkFBaUIsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDcEQsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDNUIsT0FBTyxDQUNMLDZCQUFLLFNBQVMsRUFBRSxHQUFHLFNBQVMsa0JBQWtCO1lBQzVDLG9CQUFDLGFBQWEsSUFDWixTQUFTLEVBQUUsWUFBWSxDQUFDLFFBQVEsQ0FBQyxFQUNqQyxVQUFVLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFDckIsT0FBTyxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFDMUIsS0FBSyxFQUFFLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxFQUMvQixpQkFBaUIsRUFBRSxpQkFBaUIsRUFDcEMsUUFBUSxRQUNSLHVCQUF1QixFQUFFLElBQUksQ0FBQyx1QkFBdUIsRUFDckQsWUFBWSxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQy9CLGNBQWMsRUFBRSxJQUFJLENBQUMsY0FBYyxFQUNuQyxPQUFPLEVBQUUsSUFBSSxFQUNiLGNBQWMsRUFBQyxhQUFhLEVBQzVCLHdCQUF3QixFQUFFLEtBQUssRUFDL0IsYUFBYSxFQUFFLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRTtnQkFFaEMsb0JBQUMsTUFBTSxJQUFDLEtBQUssRUFBQyxRQUFRLEVBQUMsSUFBSSxFQUFDLGFBQWEsRUFBQyxJQUFJLHdCQUFnQixDQUNoRCxDQUNaLENBQ1AsQ0FBQztJQUNKLENBQUM7SUFxQkQsVUFBVSxDQUFDLElBQVU7UUFDbkIsTUFBTSxFQUFFLG9CQUFvQixFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUM1QyxJQUFJLG9CQUFvQixFQUFFO1lBQ3hCLG9CQUFvQixDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzVCO0lBQ0gsQ0FBQztJQUVELFVBQVU7UUFDUixNQUFNLEVBQUUsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUMvQixNQUFNLE9BQU8sR0FBUSxFQUFFLENBQUM7UUFDeEIsQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3BDLE1BQU0sRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxHQUFHLE1BQU0sQ0FBQztZQUNuRCxJQUFJLEtBQUssSUFBSSxDQUFDLFVBQVUsRUFBRTtnQkFDeEIsT0FBTyxDQUFDLElBQUksQ0FDVixvQkFBQyxRQUFRLElBQ1AsUUFBUSxFQUFFLFlBQVksRUFDdEIsS0FBSyxFQUFFLGtCQUFrQixFQUN6QixTQUFTLEVBQUUsc0JBQXNCLEVBQ2pDLEtBQUssRUFBRSxNQUFNLEVBQ2IsR0FBRyxFQUFFLFlBQVksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLElBRTNCLEtBQUssQ0FDRyxDQUNaLENBQUM7YUFDSDtRQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQztJQUVELGlCQUFpQjtRQUNmLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQy9CLE9BQU8sQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDMUQsQ0FBQzs7QUFuRk0sd0JBQVcsR0FBRyxjQUFjLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvdGFibGUvQ29sdW1uRmlsdGVyLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICcuLi9idXR0b24vQnV0dG9uJztcbmltcG9ydCB7IENvbHVtblByb3BzIH0gZnJvbSAnLi9pbnRlcmZhY2UnO1xuaW1wb3J0IFNlbGVjdFRyaWdnZXIgZnJvbSAnLi4vcmMtY29tcG9uZW50cy9zZWxlY3QvU2VsZWN0VHJpZ2dlcic7XG5pbXBvcnQgeyBJdGVtIGFzIE1lbnVJdGVtIH0gZnJvbSAnLi4vcmMtY29tcG9uZW50cy9tZW51JztcbmltcG9ydCB7IFVOU0VMRUNUQUJMRV9BVFRSSUJVVEUsIFVOU0VMRUNUQUJMRV9TVFlMRSB9IGZyb20gJy4uL3JjLWNvbXBvbmVudHMvc2VsZWN0L3V0aWwnO1xuaW1wb3J0IHsgZ2V0Q29sdW1uS2V5IH0gZnJvbSAnLi91dGlsJztcbmltcG9ydCB7IFNpemUgfSBmcm9tICcuLi9fdXRpbC9lbnVtJztcbmltcG9ydCB7IGdldFByZWZpeENscyB9IGZyb20gJy4uL2NvbmZpZ3VyZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29sdW1uRmlsdGVyUHJvcHM8VD4ge1xuICBwcmVmaXhDbHM/OiBzdHJpbmc7XG4gIGNvbHVtbnM/OiBDb2x1bW5Qcm9wczxUPltdO1xuICBvbkNvbHVtbkZpbHRlckNoYW5nZT86IChpdGVtPzogYW55KSA9PiB2b2lkO1xuICBnZXRQb3B1cENvbnRhaW5lcj86ICh0cmlnZ2VyTm9kZT86IEVsZW1lbnQpID0+IEhUTUxFbGVtZW50O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbHVtbkZpbHRlclN0YXRlIHtcbiAgb3BlbjogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29sdW1uRmlsdGVyPFQ+IGV4dGVuZHMgQ29tcG9uZW50PENvbHVtbkZpbHRlclByb3BzPFQ+LCBDb2x1bW5GaWx0ZXJTdGF0ZT4ge1xuICBzdGF0aWMgZGlzcGxheU5hbWUgPSAnQ29sdW1uRmlsdGVyJztcblxuICBzdGF0ZSA9IHtcbiAgICBvcGVuOiBmYWxzZSxcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBwcmVmaXhDbHMsIGdldFBvcHVwQ29udGFpbmVyIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgb3BlbiB9ID0gdGhpcy5zdGF0ZTtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9e2Ake3ByZWZpeENsc30tY29sdW1ucy1jaG9vc2VyYH0+XG4gICAgICAgIDxTZWxlY3RUcmlnZ2VyXG4gICAgICAgICAgcHJlZml4Q2xzPXtnZXRQcmVmaXhDbHMoJ3NlbGVjdCcpfVxuICAgICAgICAgIHNob3dBY3Rpb249e1snY2xpY2snXX1cbiAgICAgICAgICBvcHRpb25zPXt0aGlzLmdldE9wdGlvbnMoKX1cbiAgICAgICAgICB2YWx1ZT17dGhpcy5nZXRWaXNpYmxlQ29sdW1ucygpfVxuICAgICAgICAgIGdldFBvcHVwQ29udGFpbmVyPXtnZXRQb3B1cENvbnRhaW5lcn1cbiAgICAgICAgICBtdWx0aXBsZVxuICAgICAgICAgIG9uRHJvcGRvd25WaXNpYmxlQ2hhbmdlPXt0aGlzLm9uRHJvcGRvd25WaXNpYmxlQ2hhbmdlfVxuICAgICAgICAgIG9uTWVudVNlbGVjdD17dGhpcy5vbk1lbnVTZWxlY3R9XG4gICAgICAgICAgb25NZW51RGVzZWxlY3Q9e3RoaXMub25NZW51RGVzZWxlY3R9XG4gICAgICAgICAgdmlzaWJsZT17b3Blbn1cbiAgICAgICAgICBwb3B1cFBsYWNlbWVudD1cImJvdHRvbVJpZ2h0XCJcbiAgICAgICAgICBkcm9wZG93bk1hdGNoU2VsZWN0V2lkdGg9e2ZhbHNlfVxuICAgICAgICAgIGRyb3Bkb3duU3R5bGU9e3sgbWluV2lkdGg6IDE4NyB9fVxuICAgICAgICA+XG4gICAgICAgICAgPEJ1dHRvbiBzaGFwZT1cImNpcmNsZVwiIGljb249XCJ2aWV3X2NvbHVtblwiIHNpemU9e1NpemUuc21hbGx9IC8+XG4gICAgICAgIDwvU2VsZWN0VHJpZ2dlcj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cblxuICBvbk1lbnVTZWxlY3QgPSAoaXRlbTogYW55KSA9PiB7XG4gICAgaXRlbS5pdGVtLnByb3BzLnZhbHVlLmhpZGRlbiA9IGZhbHNlO1xuICAgIHRoaXMuZmlyZUNoYW5nZShpdGVtKTtcbiAgfTtcblxuICBvbk1lbnVEZXNlbGVjdCA9IChpdGVtOiBhbnkpID0+IHtcbiAgICBpdGVtLml0ZW0ucHJvcHMudmFsdWUuaGlkZGVuID0gdHJ1ZTtcbiAgICB0aGlzLmZpcmVDaGFuZ2UoaXRlbSk7XG4gIH07XG5cbiAgb25Ecm9wZG93blZpc2libGVDaGFuZ2UgPSAob3BlbjogYm9vbGVhbikgPT4ge1xuICAgIGNvbnN0IHsgc3RhdGUgfSA9IHRoaXM7XG4gICAgaWYgKHN0YXRlLm9wZW4gIT09IG9wZW4pIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBvcGVuLFxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIGZpcmVDaGFuZ2UoaXRlbT86IGFueSkge1xuICAgIGNvbnN0IHsgb25Db2x1bW5GaWx0ZXJDaGFuZ2UgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKG9uQ29sdW1uRmlsdGVyQ2hhbmdlKSB7XG4gICAgICBvbkNvbHVtbkZpbHRlckNoYW5nZShpdGVtKTtcbiAgICB9XG4gIH1cblxuICBnZXRPcHRpb25zKCkge1xuICAgIGNvbnN0IHsgY29sdW1ucyB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBvcHRpb25zOiBhbnkgPSBbXTtcbiAgICAoY29sdW1ucyB8fCBbXSkuZm9yRWFjaCgoY29sdW1uLCBpKSA9PiB7XG4gICAgICBjb25zdCB7IHRpdGxlLCBub3REaXNwbGF5LCBkaXNhYmxlQ2xpY2sgfSA9IGNvbHVtbjtcbiAgICAgIGlmICh0aXRsZSAmJiAhbm90RGlzcGxheSkge1xuICAgICAgICBvcHRpb25zLnB1c2goXG4gICAgICAgICAgPE1lbnVJdGVtXG4gICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZUNsaWNrfVxuICAgICAgICAgICAgc3R5bGU9e1VOU0VMRUNUQUJMRV9TVFlMRX1cbiAgICAgICAgICAgIGF0dHJpYnV0ZT17VU5TRUxFQ1RBQkxFX0FUVFJJQlVURX1cbiAgICAgICAgICAgIHZhbHVlPXtjb2x1bW59XG4gICAgICAgICAgICBrZXk9e2dldENvbHVtbktleShjb2x1bW4sIGkpfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHt0aXRsZX1cbiAgICAgICAgICA8L01lbnVJdGVtPixcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gb3B0aW9ucztcbiAgfVxuXG4gIGdldFZpc2libGVDb2x1bW5zKCkge1xuICAgIGNvbnN0IHsgY29sdW1ucyB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gKGNvbHVtbnMgfHwgW10pLmZpbHRlcihjb2x1bW4gPT4gIWNvbHVtbi5oaWRkZW4pO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=