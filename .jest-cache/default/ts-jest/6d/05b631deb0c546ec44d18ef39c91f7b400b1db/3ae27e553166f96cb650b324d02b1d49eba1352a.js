import { isMoment } from 'moment';
import isNil from 'lodash/isNil';
import isEmpty from '../../_util/isEmpty';
import ValidationResult from '../ValidationResult';
import { $l } from '../../locale-context';
import formatReactTemplate from '../../formatter/formatReactTemplate';
import { toRangeValue } from '../../field/utils';
const isOverflow = (value, max, range) => {
    if (range) {
        return toRangeValue(value, range).some(item => !isEmpty(item) && Number(item) > Number(max));
    }
    return !isEmpty(value) && Number(value) > Number(max);
};
export default function rangeOverflow(value, props) {
    const { max, label, format, defaultValidationMessages, range } = props;
    if (!isNil(max) && isOverflow(value, max, range)) {
        const injectionOptions = { max: isMoment(max) ? max.format(format) : max, label };
        const ruleName = 'rangeOverflow';
        const { [ruleName]: validationMessage = $l('Validator', 'range_overflow'), } = defaultValidationMessages;
        return new ValidationResult({
            validationMessage: formatReactTemplate(validationMessage, injectionOptions),
            injectionOptions,
            value,
            ruleName,
        });
    }
    return true;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMtcHJvL3ZhbGlkYXRvci9ydWxlcy9yYW5nZU92ZXJmbG93LnRzeCIsIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ2xDLE9BQU8sS0FBSyxNQUFNLGNBQWMsQ0FBQztBQUNqQyxPQUFPLE9BQU8sTUFBTSxxQkFBcUIsQ0FBQztBQUMxQyxPQUFPLGdCQUFnQixNQUFNLHFCQUFxQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUUxQyxPQUFPLG1CQUFtQixNQUFNLHFDQUFxQyxDQUFDO0FBQ3RFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUVqRCxNQUFNLFVBQVUsR0FBRyxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUU7SUFDdkMsSUFBSSxLQUFLLEVBQUU7UUFDVCxPQUFPLFlBQVksQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0tBQzlGO0lBQ0QsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3hELENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxPQUFPLFVBQVUsYUFBYSxDQUFDLEtBQVUsRUFBRSxLQUFxQjtJQUNyRSxNQUFNLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUseUJBQXlCLEVBQUUsS0FBSyxFQUFFLEdBQUcsS0FBSyxDQUFDO0lBQ3ZFLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksVUFBVSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLEVBQUU7UUFDaEQsTUFBTSxnQkFBZ0IsR0FBRyxFQUFFLEdBQUcsRUFBRSxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQztRQUNsRixNQUFNLFFBQVEsR0FBRyxlQUFlLENBQUM7UUFDakMsTUFBTSxFQUNKLENBQUMsUUFBUSxDQUFDLEVBQUUsaUJBQWlCLEdBQUcsRUFBRSxDQUFDLFdBQVcsRUFBRSxnQkFBZ0IsQ0FBQyxHQUNsRSxHQUFHLHlCQUF5QixDQUFDO1FBQzlCLE9BQU8sSUFBSSxnQkFBZ0IsQ0FBQztZQUMxQixpQkFBaUIsRUFBRSxtQkFBbUIsQ0FBQyxpQkFBaUIsRUFBRSxnQkFBZ0IsQ0FBQztZQUMzRSxnQkFBZ0I7WUFDaEIsS0FBSztZQUNMLFFBQVE7U0FDVCxDQUFDLENBQUM7S0FDSjtJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvaHVpaHVhd2svRG9jdW1lbnRzL29wdC9jaG9lcm9kb24tdWkvY29tcG9uZW50cy1wcm8vdmFsaWRhdG9yL3J1bGVzL3JhbmdlT3ZlcmZsb3cudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzTW9tZW50IH0gZnJvbSAnbW9tZW50JztcbmltcG9ydCBpc05pbCBmcm9tICdsb2Rhc2gvaXNOaWwnO1xuaW1wb3J0IGlzRW1wdHkgZnJvbSAnLi4vLi4vX3V0aWwvaXNFbXB0eSc7XG5pbXBvcnQgVmFsaWRhdGlvblJlc3VsdCBmcm9tICcuLi9WYWxpZGF0aW9uUmVzdWx0JztcbmltcG9ydCB7ICRsIH0gZnJvbSAnLi4vLi4vbG9jYWxlLWNvbnRleHQnO1xuaW1wb3J0IHsgbWV0aG9kUmV0dXJuLCBWYWxpZGF0b3JQcm9wcyB9IGZyb20gJy4nO1xuaW1wb3J0IGZvcm1hdFJlYWN0VGVtcGxhdGUgZnJvbSAnLi4vLi4vZm9ybWF0dGVyL2Zvcm1hdFJlYWN0VGVtcGxhdGUnO1xuaW1wb3J0IHsgdG9SYW5nZVZhbHVlIH0gZnJvbSAnLi4vLi4vZmllbGQvdXRpbHMnO1xuXG5jb25zdCBpc092ZXJmbG93ID0gKHZhbHVlLCBtYXgsIHJhbmdlKSA9PiB7XG4gIGlmIChyYW5nZSkge1xuICAgIHJldHVybiB0b1JhbmdlVmFsdWUodmFsdWUsIHJhbmdlKS5zb21lKGl0ZW0gPT4gIWlzRW1wdHkoaXRlbSkgJiYgTnVtYmVyKGl0ZW0pID4gTnVtYmVyKG1heCkpO1xuICB9XG4gIHJldHVybiAhaXNFbXB0eSh2YWx1ZSkgJiYgTnVtYmVyKHZhbHVlKSA+IE51bWJlcihtYXgpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmFuZ2VPdmVyZmxvdyh2YWx1ZTogYW55LCBwcm9wczogVmFsaWRhdG9yUHJvcHMpOiBtZXRob2RSZXR1cm4ge1xuICBjb25zdCB7IG1heCwgbGFiZWwsIGZvcm1hdCwgZGVmYXVsdFZhbGlkYXRpb25NZXNzYWdlcywgcmFuZ2UgfSA9IHByb3BzO1xuICBpZiAoIWlzTmlsKG1heCkgJiYgaXNPdmVyZmxvdyh2YWx1ZSwgbWF4LCByYW5nZSkpIHtcbiAgICBjb25zdCBpbmplY3Rpb25PcHRpb25zID0geyBtYXg6IGlzTW9tZW50KG1heCkgPyBtYXguZm9ybWF0KGZvcm1hdCkgOiBtYXgsIGxhYmVsIH07XG4gICAgY29uc3QgcnVsZU5hbWUgPSAncmFuZ2VPdmVyZmxvdyc7XG4gICAgY29uc3Qge1xuICAgICAgW3J1bGVOYW1lXTogdmFsaWRhdGlvbk1lc3NhZ2UgPSAkbCgnVmFsaWRhdG9yJywgJ3JhbmdlX292ZXJmbG93JyksXG4gICAgfSA9IGRlZmF1bHRWYWxpZGF0aW9uTWVzc2FnZXM7XG4gICAgcmV0dXJuIG5ldyBWYWxpZGF0aW9uUmVzdWx0KHtcbiAgICAgIHZhbGlkYXRpb25NZXNzYWdlOiBmb3JtYXRSZWFjdFRlbXBsYXRlKHZhbGlkYXRpb25NZXNzYWdlLCBpbmplY3Rpb25PcHRpb25zKSxcbiAgICAgIGluamVjdGlvbk9wdGlvbnMsXG4gICAgICB2YWx1ZSxcbiAgICAgIHJ1bGVOYW1lLFxuICAgIH0pO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuIl0sInZlcnNpb24iOjN9