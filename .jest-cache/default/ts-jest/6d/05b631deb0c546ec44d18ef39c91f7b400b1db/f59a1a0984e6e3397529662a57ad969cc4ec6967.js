import { __decorate } from "tslib";
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { observer } from 'mobx-react';
import { findDOMNode } from 'react-dom';
import QuillImageDropAndPaste from 'quill-image-drop-and-paste';
import 'react-quill/dist/quill.snow.css';
import isEqual from 'lodash/isEqual';
import isObject from 'lodash/isObject';
import omit from 'lodash/omit';
import LightBox from 'react-image-lightbox';
import autobind from '../_util/autobind';
import RichTextViewer from './RichTextViewer';
import Toolbar from './toolbar';
let ReactQuill;
let Quill;
if (typeof window !== 'undefined') {
    // eslint-disable-next-line global-require
    ReactQuill = require('react-quill');
    // eslint-disable-next-line global-require
    Quill = require('react-quill').Quill;
    /**
     * 注册图片拖拽、粘贴
     */
    Quill.register('modules/imageDropAndPaste', QuillImageDropAndPaste);
}
let BaseEditor = class BaseEditor extends Component {
    constructor() {
        super(...arguments);
        this.state = {
            imgOpen: false,
            src: '',
        };
        this.handleOpenLightBox = (e) => {
            if (e.target.nodeName === 'IMG') {
                e.stopPropagation();
                this.setState({
                    imgOpen: true,
                    src: e.target.src,
                });
            }
        };
        this.saveRef = name => (ref) => {
            this[name] = ref;
            const { saveRef } = this.props;
            if (saveRef) {
                saveRef(ref);
            }
        };
    }
    setValue(value) {
        if (this.editor) {
            this.editor.getEditor().setContents(value);
        }
    }
    ;
    handleRichTextChange(_, __, ___, editor) {
        const rtDelta = editor.getContents();
        this.deltaOps = rtDelta.ops;
        const { onChange } = this.props;
        if (onChange && rtDelta && rtDelta.ops) {
            onChange(rtDelta.ops);
        }
    }
    ;
    componentDidUpdate() {
        const { value } = this.props;
        let deltaOps;
        if (!isObject(value) && this.editor) {
            deltaOps = this.editor.getEditor().clipboard.convert(value).ops;
        }
        if ('value' in this.props && !isEqual(this.deltaOps, deltaOps || value) && this.editor) {
            this.editor.getEditor().setContents(deltaOps || value);
        }
    }
    getOtherProps() {
        return omit(this.props, ['style', 'onBlur', 'toolbar', 'className', 'defaultValue', 'onChange', 'value']);
    }
    componentWillUnmount() {
        const thisNode = findDOMNode(this);
        if (thisNode) {
            thisNode.removeEventListener('click', this.handleOpenLightBox);
        }
    }
    componentDidMount() {
        const { autoFocus } = this.props;
        if (autoFocus && this.editor) {
            setTimeout(() => {
                this.editor.focus();
            });
        }
        const thisNode = findDOMNode(this);
        if (thisNode) {
            thisNode.addEventListener('click', this.handleOpenLightBox);
        }
    }
    renderContent() {
        const { style, className, toolbarId, toolbar, dataSet, value, mode } = this.props;
        let deltaOps;
        if (!isObject(value) && this.editor) {
            deltaOps = this.editor.getEditor().clipboard.convert(value).ops;
        }
        if (mode === 'preview') {
            return (React.createElement(RichTextViewer, { className: `${className}-preview`, style: style, deltaOps: deltaOps || value }));
        }
        if (ReactQuill) {
            return (React.createElement(React.Fragment, null,
                React.createElement(Toolbar, { id: toolbarId, dataSet: dataSet, toolbar: toolbar, prefixCls: className }),
                React.createElement(ReactQuill, Object.assign({}, this.getOtherProps(), { className: `${className}-quill`, defaultValue: value, ref: this.saveRef('editor'), onChange: this.handleRichTextChange, bounds: className }))));
        }
    }
    render() {
        const { imgOpen, src } = this.state;
        const { className, style } = this.props;
        const content = this.renderContent();
        return (React.createElement(React.Fragment, null,
            React.createElement("div", { className: className, style: style }, content),
            imgOpen && (React.createElement(LightBox, { mainSrc: src, onCloseRequest: () => this.setState({ imgOpen: false }), imageTitle: "images" }))));
    }
};
BaseEditor.propTypes = {
    value: PropTypes.any,
    onChange: PropTypes.func,
    options: PropTypes.object,
    saveRef: PropTypes.func,
    autoFocus: PropTypes.bool,
    mode: PropTypes.string,
    toolbarId: PropTypes.string,
    toolbar: PropTypes.oneOfType([
        PropTypes.oneOf([
            "none" /* none */,
            "normal" /* normal */,
        ]),
        PropTypes.func,
    ]),
};
__decorate([
    autobind
], BaseEditor.prototype, "setValue", null);
__decorate([
    autobind
], BaseEditor.prototype, "handleRichTextChange", null);
__decorate([
    autobind
], BaseEditor.prototype, "renderContent", null);
BaseEditor = __decorate([
    observer
], BaseEditor);
export default BaseEditor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,