import React from 'react';
import moment from 'moment';
import classNames from 'classnames';
import DaysView from './DaysView';
import { $l } from '../locale-context';
import { stopEvent } from '../_util/EventManager';
export default class WeeksView extends DaysView {
    handleKeyDownLeft(e) {
        stopEvent(e);
        if (e.altKey) {
            this.changeViewMode("month" /* month */);
        }
        else {
            this.changeSelectedDate(this.getCloneDate().subtract(1, 'M'));
        }
    }
    handleKeyDownRight(e) {
        stopEvent(e);
        if (!e.altKey) {
            this.changeSelectedDate(this.getCloneDate().add(1, 'M'));
        }
    }
    renderPanelBody() {
        const { prefixCls, props: { date, renderer = this.renderCell }, } = this;
        const selected = date.clone();
        const firstDay = this.getFirstDay(date);
        const lastDay = firstDay.clone().add(42, 'd');
        const rows = [];
        let cells = [];
        while (firstDay.isBefore(lastDay)) {
            const currentDate = firstDay.clone();
            const className = classNames(`${prefixCls}-cell`, {
                [`${prefixCls}-selected`]: firstDay.isSame(selected, 'w'),
            });
            const text = String(currentDate.date());
            const dayProps = {
                key: firstDay.format('M_D'),
                className,
                children: this.renderInner(text),
            };
            if (cells.length === 0) {
                const weekProps = {
                    key: firstDay.format('Wo'),
                    className: `${className} ${prefixCls}-week-cell`,
                };
                cells.push(this.getWeekCell(weekProps, firstDay.week()));
            }
            cells.push(renderer(dayProps, text, currentDate, selected));
            if (cells.length === 8) {
                rows.push(React.createElement("tr", { onClick: this.handleCellClick.bind(this, currentDate), key: firstDay.format('M_D') }, cells));
                cells = [];
            }
            firstDay.add(1, 'd');
        }
        return rows;
    }
    choose(date) {
        super.choose(date.startOf('W'));
    }
    getPanelClass() {
        return `${this.prefixCls}-week-panel`;
    }
    renderFooter() {
        const { prefixCls } = this;
        return (React.createElement("div", { className: `${prefixCls}-footer` },
            React.createElement("a", { onClick: this.choose.bind(this, moment()) }, $l('DatePicker', 'this_week'))));
    }
    getWeekCell(props, text) {
        const { prefixCls } = this;
        return (React.createElement("td", Object.assign({}, props),
            React.createElement("div", { className: `${prefixCls}-cell-inner` },
                "W",
                text)));
    }
    getDaysOfWeek() {
        return [React.createElement("th", { key: "null" }, "\u00A0"), ...super.getDaysOfWeek()];
    }
}
WeeksView.displayName = 'WeeksView';
WeeksView.type = "week" /* week */;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,