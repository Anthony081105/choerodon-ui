import React, { cloneElement, Component } from 'react';
import classNames from 'classnames';
import Input from './Input';
import Button from '../button';
import { getPrefixCls } from '../configure';
export default class Search extends Component {
    constructor() {
        super(...arguments);
        this.onSearch = () => {
            const { onSearch } = this.props;
            if (onSearch) {
                onSearch(this.input.input.value);
            }
            this.input.focus();
        };
        this.saveInput = (node) => {
            this.input = node;
        };
    }
    focus() {
        this.input.focus();
    }
    blur() {
        this.input.blur();
    }
    getPrefixCls() {
        const { prefixCls } = this.props;
        return getPrefixCls('input-search', prefixCls);
    }
    getButtonOrIcon() {
        const { enterButton, size } = this.props;
        if (!enterButton) {
            return React.createElement(Button, { type: "primary", size: size, shape: "circle", icon: "search" });
        }
        const enterButtonAsElement = enterButton;
        if (enterButtonAsElement.type === Button || enterButtonAsElement.type === 'button') {
            return cloneElement(enterButtonAsElement, enterButtonAsElement.type === Button
                ? {
                    className: `${this.getPrefixCls()}-button`,
                    size,
                    onClick: this.onSearch,
                }
                : {
                    onClick: this.onSearch,
                });
        }
        if (enterButton === true) {
            return (React.createElement(Button, { type: "primary", size: size, shape: "circle", onClick: this.onSearch, icon: "search" }));
        }
        return (React.createElement(Button, { type: "primary", size: size, onClick: this.onSearch, key: "enterButton" }, enterButton));
    }
    render() {
        const { className, inputPrefixCls, size, suffix, enterButton, ...others } = this.props;
        const prefixCls = this.getPrefixCls();
        delete others.onSearch;
        delete others.prefixCls;
        const buttonOrIcon = this.getButtonOrIcon();
        const searchSuffix = suffix ? [suffix, buttonOrIcon] : buttonOrIcon;
        const inputClassName = classNames(prefixCls, className, {
            [`${prefixCls}-enter-button`]: !!enterButton,
            [`${prefixCls}-${size}`]: !!size,
        });
        return (React.createElement(Input, Object.assign({ onPressEnter: this.onSearch }, others, { size: size, className: inputClassName, prefixCls: getPrefixCls('input', inputPrefixCls), suffix: searchSuffix, ref: this.saveInput })));
    }
}
Search.displayName = 'Search';
Search.defaultProps = {
    enterButton: false,
    size: "small" /* small */,
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvaW5wdXQvU2VhcmNoLnRzeCIsIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssRUFBRSxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQTJCLE1BQU0sT0FBTyxDQUFDO0FBQ2hGLE9BQU8sVUFBVSxNQUFNLFlBQVksQ0FBQztBQUNwQyxPQUFPLEtBQXFCLE1BQU0sU0FBUyxDQUFDO0FBQzVDLE9BQU8sTUFBTSxNQUFNLFdBQVcsQ0FBQztBQUUvQixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBUTVDLE1BQU0sQ0FBQyxPQUFPLE9BQU8sTUFBTyxTQUFRLFNBQTJCO0lBQS9EOztRQVVFLGFBQVEsR0FBRyxHQUFHLEVBQUU7WUFDZCxNQUFNLEVBQUUsUUFBUSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUNoQyxJQUFJLFFBQVEsRUFBRTtnQkFDWixRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDbEM7WUFDRCxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3JCLENBQUMsQ0FBQztRQVVGLGNBQVMsR0FBRyxDQUFDLElBQVcsRUFBRSxFQUFFO1lBQzFCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ3BCLENBQUMsQ0FBQztJQThESixDQUFDO0lBeEVDLEtBQUs7UUFDSCxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxJQUFJO1FBQ0YsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBTUQsWUFBWTtRQUNWLE1BQU0sRUFBRSxTQUFTLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ2pDLE9BQU8sWUFBWSxDQUFDLGNBQWMsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQs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aHVhd2svRG9jdW1lbnRzL29wdC9jaG9lcm9kb24tdWkvY29tcG9uZW50cy9pbnB1dC9TZWFyY2gudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBjbG9uZUVsZW1lbnQsIENvbXBvbmVudCwgUmVhY3RFbGVtZW50LCBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBJbnB1dCwgeyBJbnB1dFByb3BzIH0gZnJvbSAnLi9JbnB1dCc7XG5pbXBvcnQgQnV0dG9uIGZyb20gJy4uL2J1dHRvbic7XG5pbXBvcnQgeyBTaXplIH0gZnJvbSAnLi4vX3V0aWwvZW51bSc7XG5pbXBvcnQgeyBnZXRQcmVmaXhDbHMgfSBmcm9tICcuLi9jb25maWd1cmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNlYXJjaFByb3BzIGV4dGVuZHMgSW5wdXRQcm9wcyB7XG4gIGlucHV0UHJlZml4Q2xzPzogc3RyaW5nO1xuICBvblNlYXJjaD86ICh2YWx1ZTogc3RyaW5nKSA9PiBhbnk7XG4gIGVudGVyQnV0dG9uPzogYm9vbGVhbiB8IFJlYWN0Tm9kZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VhcmNoIGV4dGVuZHMgQ29tcG9uZW50PFNlYXJjaFByb3BzLCBhbnk+IHtcbiAgc3RhdGljIGRpc3BsYXlOYW1lID0gJ1NlYXJjaCc7XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBlbnRlckJ1dHRvbjogZmFsc2UsXG4gICAgc2l6ZTogU2l6ZS5zbWFsbCxcbiAgfTtcblxuICBwcml2YXRlIGlucHV0OiBJbnB1dDtcblxuICBvblNlYXJjaCA9ICgpID0+IHtcbiAgICBjb25zdCB7IG9uU2VhcmNoIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmIChvblNlYXJjaCkge1xuICAgICAgb25TZWFyY2godGhpcy5pbnB1dC5pbnB1dC52YWx1ZSk7XG4gICAgfVxuICAgIHRoaXMuaW5wdXQuZm9jdXMoKTtcbiAgfTtcblxuICBmb2N1cygpIHtcbiAgICB0aGlzLmlucHV0LmZvY3VzKCk7XG4gIH1cblxuICBibHVyKCkge1xuICAgIHRoaXMuaW5wdXQuYmx1cigpO1xuICB9XG5cbiAgc2F2ZUlucHV0ID0gKG5vZGU6IElucHV0KSA9PiB7XG4gICAgdGhpcy5pbnB1dCA9IG5vZGU7XG4gIH07XG5cbiAgZ2V0UHJlZml4Q2xzKCkge1xuICAgIGNvbnN0IHsgcHJlZml4Q2xzIH0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiBnZXRQcmVmaXhDbHMoJ2lucHV0LXNlYXJjaCcsIHByZWZpeENscyk7XG4gIH1cblxuICBnZXRCdXR0b25Pckljb24oKSB7XG4gICAgY29uc3QgeyBlbnRlckJ1dHRvbiwgc2l6ZSB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAoIWVudGVyQnV0dG9uKSB7XG4gICAgICByZXR1cm4gPEJ1dHRvbiB0eXBlPVwicHJpbWFyeVwiIHNpemU9e3NpemV9IHNoYXBlPVwiY2lyY2xlXCIgaWNvbj1cInNlYXJjaFwiIC8+O1xuICAgIH1cbiAgICBjb25zdCBlbnRlckJ1dHRvbkFzRWxlbWVudCA9IGVudGVyQnV0dG9uIGFzIFJlYWN0RWxlbWVudDxhbnk+O1xuICAgIGlmIChlbnRlckJ1dHRvbkFzRWxlbWVudC50eXBlID09PSBCdXR0b24gfHwgZW50ZXJCdXR0b25Bc0VsZW1lbnQudHlwZSA9PT0gJ2J1dHRvbicpIHtcbiAgICAgIHJldHVybiBjbG9uZUVsZW1lbnQoXG4gICAgICAgIGVudGVyQnV0dG9uQXNFbGVtZW50LFxuICAgICAgICBlbnRlckJ1dHRvbkFzRWxlbWVudC50eXBlID09PSBCdXR0b25cbiAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOiBgJHt0aGlzLmdldFByZWZpeENscygpfS1idXR0b25gLFxuICAgICAgICAgICAgICBzaXplLFxuICAgICAgICAgICAgICBvbkNsaWNrOiB0aGlzLm9uU2VhcmNoLFxuICAgICAgICAgICAgfVxuICAgICAgICAgIDoge1xuICAgICAgICAgICAgICBvbkNsaWNrOiB0aGlzLm9uU2VhcmNoLFxuICAgICAgICAgICAgfSxcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChlbnRlckJ1dHRvbiA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPEJ1dHRvbiB0eXBlPVwicHJpbWFyeVwiIHNpemU9e3NpemV9IHNoYXBlPVwiY2lyY2xlXCIgb25DbGljaz17dGhpcy5vblNlYXJjaH0gaWNvbj1cInNlYXJjaFwiIC8+XG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgPEJ1dHRvbiB0eXBlPVwicHJpbWFyeVwiIHNpemU9e3NpemV9IG9uQ2xpY2s9e3RoaXMub25TZWFyY2h9IGtleT1cImVudGVyQnV0dG9uXCI+XG4gICAgICAgIHtlbnRlckJ1dHRvbn1cbiAgICAgIDwvQnV0dG9uPlxuICAgICk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBjbGFzc05hbWUsIGlucHV0UHJlZml4Q2xzLCBzaXplLCBzdWZmaXgsIGVudGVyQnV0dG9uLCAuLi5vdGhlcnMgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgcHJlZml4Q2xzID0gdGhpcy5nZXRQcmVmaXhDbHMoKTtcbiAgICBkZWxldGUgKG90aGVycyBhcyBhbnkpLm9uU2VhcmNoO1xuICAgIGRlbGV0ZSAob3RoZXJzIGFzIGFueSkucHJlZml4Q2xzO1xuICAgIGNvbnN0IGJ1dHRvbk9ySWNvbiA9IHRoaXMuZ2V0QnV0dG9uT3JJY29uKCk7XG4gICAgY29uc3Qgc2VhcmNoU3VmZml4ID0gc3VmZml4ID8gW3N1ZmZpeCwgYnV0dG9uT3JJY29uXSA6IGJ1dHRvbk9ySWNvbjtcbiAgICBjb25zdCBpbnB1dENsYXNzTmFtZSA9IGNsYXNzTmFtZXMocHJlZml4Q2xzLCBjbGFzc05hbWUsIHtcbiAgICAgIFtgJHtwcmVmaXhDbHN9LWVudGVyLWJ1dHRvbmBdOiAhIWVudGVyQnV0dG9uLFxuICAgICAgW2Ake3ByZWZpeENsc30tJHtzaXplfWBdOiAhIXNpemUsXG4gICAgfSk7XG4gICAgcmV0dXJuIChcbiAgICAgIDxJbnB1dFxuICAgICAgICBvblByZXNzRW50ZXI9e3RoaXMub25TZWFyY2h9XG4gICAgICAgIHsuLi5vdGhlcnN9XG4gICAgICAgIHNpemU9e3NpemV9XG4gICAgICAgIGNsYXNzTmFtZT17aW5wdXRDbGFzc05hbWV9XG4gICAgICAgIHByZWZpeENscz17Z2V0UHJlZml4Q2xzKCdpbnB1dCcsIGlucHV0UHJlZml4Q2xzKX1cbiAgICAgICAgc3VmZml4PXtzZWFyY2hTdWZmaXh9XG4gICAgICAgIHJlZj17dGhpcy5zYXZlSW5wdXR9XG4gICAgICAvPlxuICAgICk7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==