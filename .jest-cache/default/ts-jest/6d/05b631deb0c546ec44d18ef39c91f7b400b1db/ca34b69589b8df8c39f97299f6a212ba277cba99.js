import { __decorate } from "tslib";
import React from 'react';
import { observer } from 'mobx-react';
import { action, computed, observable } from 'mobx';
import TriggerField from '../trigger-field/TriggerField';
import autobind from '../_util/autobind';
import EventManager from '../_util/EventManager';
import { $l } from '../locale-context';
function getNodeRect(node) {
    return node.getBoundingClientRect();
}
let ColorPicker = class ColorPicker extends TriggerField {
    constructor() {
        super(...arguments);
        this.eventManager = new EventManager(typeof window !== 'undefined' && document);
        this.HSV = {
            h: 0,
            s: 1,
            v: 1,
            a: 1,
        };
        this.saveGradientRef = node => (this.gradient = node);
        this.saveSelectPointerRef = node => (this.selectPointer = node);
        this.saveHuePointerRef = node => (this.huePointer = node);
        this.saveHueRef = node => (this.hue = node);
        this.saveOpacityRef = node => (this.opacity = node);
        this.saveOpacityPointerRef = node => (this.opacityPointer = node);
    }
    get defaultValidationMessages() {
        const label = this.getProp('label');
        return {
            valueMissing: $l('ColorPicker', label ? 'value_missing' : 'value_missing_no_label', {
                label,
            }),
            typeMismatch: $l('ColorPicker', 'type_mismatch'),
        };
    }
    componentDidUpdate() {
        const { popup } = this;
        if (popup) {
            const { h, s, v } = this.HSV;
            const { huePointer, selectPointer, hue, gradient } = this;
            if (huePointer && hue) {
                const { width } = getNodeRect(hue);
                this.setHuePointer((width * h) / 360, huePointer, hue, false);
            }
            if (selectPointer && gradient) {
                const { width, height } = getNodeRect(gradient);
                const left = s * width;
                const top = height - v * height;
                this.setGradientPointer(left, top, selectPointer, gradient, false);
            }
        }
    }
    syncValueOnBlur(value) {
        if (value[0] !== '#' && !value.startsWith('rgb') && !value.startsWith('hls')) {
            value = `#${value}`;
        }
        super.syncValueOnBlur(value);
    }
    getFieldType() {
        return "color" /* color */;
    }
    getValue() {
        return super.getValue() || this.hueColor;
    }
    getPrefix() {
        const { prefixCls } = this;
        return (React.createElement("div", { className: `${prefixCls}-prefix` },
            React.createElement("span", { className: `${prefixCls}-color`, style: { backgroundColor: this.getValue() } })));
    }
    getPopupFooter() {
        const { prefixCls } = this;
        const huePointerProps = {
            onMouseDown: this.handleHPMouseDown,
            ref: this.saveHuePointerRef,
            className: `${prefixCls}-popup-footer-slider-pointer`,
        };
        return (React.createElement("div", { className: `${prefixCls}-popup-footer` },
            React.createElement("div", { ref: this.saveHueRef, className: `${prefixCls}-popup-footer-slider` },
                React.createElement("div", { onClick: this.handleHueClick, className: "hue" }),
                React.createElement("div", Object.assign({}, huePointerProps))),
            React.createElement("div", { ref: this.saveOpacityRef, className: `${prefixCls}-popup-footer-slider opacity` },
                React.createElement("div", { ref: this.saveOpacityPointerRef, className: `${prefixCls}-popup-footer-slider-pointer` }))));
    }
    getPopupContent() {
        const { prefixCls } = this;
        const gradientProps = {
            className: `${prefixCls}-popup-body-gradient`,
            onClick: this.handleGPClick,
            ref: this.saveGradientRef,
        };
        const gradientPointerProps = {
            onMouseDown: this.handleGPMouseDown,
            ref: this.saveSelectPointerRef,
            className: `${prefixCls}-popup-body-selector`,
        };
        return (React.createElement("div", { className: `${prefixCls}-popup-view` },
            React.createElement("div", { className: `${prefixCls}-popup-body`, style: { backgroundColor: this.getValue() } },
                React.createElement("div", Object.assign({}, gradientProps)),
                React.createElement("div", Object.assign({}, gradientPointerProps))),
            this.getPopupFooter()));
    }
    setHSV(h, s, v, a) {
        const { HSV } = this;
        if (h !== undefined && h !== HSV.h) {
            HSV.h = h;
        }
        if (v !== undefined && v !== HSV.v) {
            HSV.v = v;
        }
        if (s !== undefined && s !== HSV.s) {
            HSV.s = s;
        }
        if (a !== undefined && a !== HSV.a) {
            HSV.a = a;
        }
    }
    setHueColor(color) {
        if (color !== this.hueColor) {
            this.hueColor = color;
        }
    }
    setColor(color) {
        if (color !== undefined && color.slice(0, 1) === '#' && color.length > 3) {
            const { gradient, selectPointer, hue, huePointer } = this;
            const { r, g, b, a } = this.hexToRGB(color);
            const { h, s, v } = this.rgbToHSV(r / 255, g / 255, b / 255, a);
            this.setHSV(h, s, v, a);
            const { r: hr, g: hg, b: hb, a: ha } = this.hsvToRGB(h, 1, 1, 1);
            const hueColor = this.rgbToHEX(hr, hg, hb, ha);
            this.setHueColor(hueColor);
            const { height, width } = getNodeRect(gradient);
            const left = s * width;
            const top = height - v * height;
            const { width: hueWidth } = getNodeRect(hue);
            const hueLeft = (h / 360) * hueWidth;
            this.setHuePointer(hueLeft, huePointer, hue, false);
            this.setGradientPointer(left, top, selectPointer, gradient, false);
        }
    }
    positionToHSV(left, top, width, height) {
        const { h, a } = this.HSV;
        if (width < 0) {
            width = 0;
        }
        const s = left / width;
        const v = 1 - top / height;
        return { h, s, v, a };
    }
    rgbToHEX(r, g, b, a) {
        function hex(num) {
            const hexNum = num.toString(16);
            return hexNum.length === 1 ? `0${hexNum}` : hexNum;
        }
        if (a !== 1) {
            return `#${hex(r)}${hex(g)}${hex(b)}${hex((a * 255) / 10)}`;
        }
        return `#${hex(r)}${hex(g)}${hex(b)}`;
    }
    hexToRGB(hex) {
        hex = hex.split('#')[1] || hex.split('#')[0];
        const length = hex.length;
        let results = '';
        const hexArray = hex.split('');
        if (length === 3 || length === 4) {
            for (let i = 0; i < length; i++) {
                results = `${results}${hexArray[i]}${hexArray[i]}`;
            }
        }
        else if (length === 5) {
            results = `${hex}${hexArray[length - 1]}`;
        }
        else {
            results = hex;
        }
        results = results.slice(0, 6);
        const result = /^#?([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i.exec(results);
        return result
            ? {
                r: parseInt(result[1], 16),
                g: parseInt(result[2], 16),
                b: parseInt(result[3], 16),
                a: 1,
            }
            : {
                r: 255,
                g: 0,
                b: 0,
                a: 1,
            };
    }
    rgbToHSV(r, g, b, a) {
        const max = Math.max(r, g, b);
        const min = Math.min(r, g, b);
        const v = max;
        let s;
        let h;
        if (v === 0) {
            s = 0;
        }
        else {
            s = (max - min) / max;
        }
        if (max === min) {
            h = 0;
        }
        else {
            const d = r === min ? g - b : b === min ? r - g : b - r;
            const m = r === min ? 3 : b === min ? 1 : 5;
            h = 60 * (m - d / (max - min));
        }
        if (h < 0) {
            h += 360;
        }
        return { h, s, v, a };
    }
    hsvToRGB(h, s, v, a) {
        h /= 60;
        const h1 = Math.floor(h);
        const f = h - h1;
        const p = v * (1 - s);
        const q = v * (1 - f * s);
        const t = v * (1 - (1 - f) * s);
        let rgb;
        switch (h1) {
            case 0:
                rgb = { r: v, g: t, b: p, a };
                break;
            case 1:
                rgb = { r: q, g: v, b: p, a };
                break;
            case 2:
                rgb = { r: p, g: v, b: t, a };
                break;
            case 3:
                rgb = { r: p, g: q, b: v, a };
                break;
            case 4:
                rgb = { r: t, g: p, b: v, a };
                break;
            default:
                rgb = { r: v, g: p, b: q, a };
                break;
        }
        rgb.r = Math.floor(rgb.r * 255);
        rgb.g = Math.floor(rgb.g * 255);
        rgb.b = Math.floor(rgb.b * 255);
        return rgb;
    }
    setGradientPointer(x, y, pointer, wrap, isClient) {
        const { left: wrapX, top: wrapY, width: wrapW, height: wrapH } = getNodeRect(wrap);
        const { height: pointerH, width: pointerW } = getNodeRect(pointer);
        let left;
        let top;
        if (isClient) {
            left = x - wrapX < 0 ? 0 : x - wrapX > wrapW ? wrapW : x - wrapX;
            top = y - wrapY < 0 ? 0 : y - wrapY > wrapH ? wrapH : y - wrapY;
        }
        else {
            left = x;
            top = y;
        }
        pointer.style.left = `${left - pointerH / 2}px`;
        pointer.style.top = `${top - pointerW / 2}px`;
        return { left, top };
    }
    handleGPClick(e) {
        const { gradient, selectPointer, setGradientPointer } = this;
        if (gradient && selectPointer) {
            const { positionToHSV, rgbToHEX, hsvToRGB } = this;
            const { left, top } = setGradientPointer(e.clientX, e.clientY, selectPointer, gradient, true);
            const { height, width } = getNodeRect(gradient);
            const { h, s, v, a: opacity } = positionToHSV(left, top, width, height);
            this.setHSV(undefined, s, v, undefined);
            const { r, g, b, a } = hsvToRGB(h, s, v, opacity);
            const hexColor = rgbToHEX(r, g, b, a);
            this.prepareSetValue(hexColor);
        }
    }
    setHuePointer(x, pointer, wrap, isClient) {
        const { left: wrapX, width: wrapW } = getNodeRect(wrap);
        const { width: pointerW } = getNodeRect(pointer);
        let left;
        if (isClient) {
            left = x - wrapX < 0 ? 0 : x - wrapX > wrapW ? wrapW : x - wrapX;
        }
        else {
            left = x;
        }
        pointer.style.left = `${left - pointerW / 2}px`;
        if (left === wrapW) {
            return { left: 0, wrapW };
        }
        return { left, wrapW };
    }
    handleHueClick(e) {
        const { hue, huePointer, setHuePointer, hsvToRGB, rgbToHEX } = this;
        if (hue && huePointer) {
            const { left, wrapW } = setHuePointer(e.clientX, huePointer, hue, true);
            const h = Math.floor((left / wrapW) * 360);
            const { s, v, a: opacity } = this.HSV;
            this.setHSV(h, undefined, undefined, undefined);
            const { r, g, b, a } = hsvToRGB(h, 1, 1, 1);
            const { r: valueR, g: valueG, b: valueB, a: valueA } = hsvToRGB(h, s, v, opacity);
            const hueColor = rgbToHEX(r, g, b, a);
            const valueColor = rgbToHEX(valueR, valueG, valueB, valueA);
            this.setHueColor(hueColor);
            this.prepareSetValue(valueColor);
        }
    }
    handleGPMouseDown() {
        this.eventManager
            .addEventListener('mousemove', this.handleGPClick)
            .addEventListener('mouseup', this.onGPMouseUp);
    }
    onGPMouseUp() {
        this.eventManager
            .removeEventListener('mousemove', this.handleGPClick)
            .removeEventListener('mouseup', this.onGPMouseUp);
    }
    handleHPMouseDown() {
        this.eventManager
            .addEventListener('mousemove', this.handleHueClick)
            .addEventListener('mouseup', this.onHPMouseUp);
    }
    onHPMouseUp() {
        this.eventManager
            .removeEventListener('mousemove', this.handleHueClick)
            .removeEventListener('mouseup', this.onHPMouseUp);
    }
    handlePopupAnimateAppear() {
        this.setColor(this.getValue());
    }
    handlePopupAnimateEnd() { }
    getPopupStyleFromAlign() {
        return undefined;
    }
    getTriggerIconFont() {
        return 'palette';
    }
};
ColorPicker.displayName = 'ColorPicker';
ColorPicker.defaultProps = {
    ...TriggerField.defaultProps,
    suffixCls: 'color-picker',
    clearButton: false,
};
__decorate([
    observable
], ColorPicker.prototype, "hueColor", void 0);
__decorate([
    computed
], ColorPicker.prototype, "defaultValidationMessages", null);
__decorate([
    action
], ColorPicker.prototype, "setHueColor", null);
__decorate([
    autobind
], ColorPicker.prototype, "setColor", null);
__decorate([
    autobind
], ColorPicker.prototype, "positionToHSV", null);
__decorate([
    action
], ColorPicker.prototype, "hexToRGB", null);
__decorate([
    autobind
], ColorPicker.prototype, "setGradientPointer", null);
__decorate([
    autobind
], ColorPicker.prototype, "handleGPClick", null);
__decorate([
    autobind
], ColorPicker.prototype, "setHuePointer", null);
__decorate([
    autobind
], ColorPicker.prototype, "handleHueClick", null);
__decorate([
    autobind
], ColorPicker.prototype, "handleGPMouseDown", null);
__decorate([
    autobind
], ColorPicker.prototype, "onGPMouseUp", null);
__decorate([
    autobind
], ColorPicker.prototype, "handleHPMouseDown", null);
__decorate([
    autobind
], ColorPicker.prototype, "onHPMouseUp", null);
__decorate([
    autobind
], ColorPicker.prototype, "handlePopupAnimateAppear", null);
ColorPicker = __decorate([
    observer
], ColorPicker);
export default ColorPicker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMtcHJvL2NvbG9yLXBpY2tlci9Db2xvclBpY2tlci50c3giLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sS0FBbUMsTUFBTSxPQUFPLENBQUM7QUFDeEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN0QyxPQUFPLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDcEQsT0FBTyxZQUFtQyxNQUFNLCtCQUErQixDQUFDO0FBQ2hGLE9BQU8sUUFBUSxNQUFNLG1CQUFtQixDQUFDO0FBQ3pDLE9BQU8sWUFBWSxNQUFNLHVCQUF1QixDQUFDO0FBR2pELE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUV2QyxTQUFTLFdBQVcsQ0FBQyxJQUFJO0lBQ3ZCLE9BQU8sSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7QUFDdEMsQ0FBQztBQUtELElBQXFCLFdBQVcsR0FBaEMsTUFBcUIsV0FBWSxTQUFRLFlBQThCO0lBQXZFOztRQWFFLGlCQUFZLEdBQWlCLElBQUksWUFBWSxDQUFDLE9BQU8sTUFBTSxLQUFLLFdBQVcsSUFBSSxRQUFRLENBQUMsQ0FBQztRQVV6RixRQUFHLEdBQUc7WUFDSixDQUFDLEVBQUUsQ0FBQztZQUNKLENBQUMsRUFBRSxDQUFDO1lBQ0osQ0FBQyxFQUFFLENBQUM7WUFDSixDQUFDLEVBQUUsQ0FBQztTQUNMLENBQUM7UUFlRixvQkFBZSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxDQUFDO1FBRWpELHlCQUFvQixHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxDQUFDO1FBRTNELHNCQUFpQixHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFB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QUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxHQUFHLElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDeEUsTUFBTSxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUUsR0FBRyxFQUFFLFVBQVUsRUFBRSxHQUFHLElBQUksQ0FBQztZQUMxRCxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM1QyxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ2hFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDeEIsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ2pFLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDL0MsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUMzQixNQUFNLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNoRCxNQUFNLElBQUksR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO1lBQ3ZCLE1BQU0sR0FBRyxHQUFHLE1BQU0sR0FBRyxDQUFDLEdBQUcsTUFBTSxD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QUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDaEMsSUFBSSxHQUFHLENBQUM7UUFDUixRQUFRLEVBQUUsRUFBRTtZQUNWLEtBQUssQ0FBQztnQkFDSixHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztnQkFDOUIsTUFBTTtZQUNSLEtBQUssQ0FBQztnQkFDSixHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztnQkFDOUIsTUFBTTtZQUNSLEtBQUssQ0FBQztnQkFDSixHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztnQkFDOUIsTUFBTTtZQUNSLEtBQUssQ0FBQztnQkFDSixHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztnQkFDOUIsTUFBTTtZQUNSLEtBQUssQ0FBQztnQkFDSixHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztnQkFDOUIsTUFBTTtZQUNSO2dCQUNFLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO2dCQUM5QixNQUFNO1NBQ1Q7UUFDRCxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztRQUNoQyxH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UjtBQXVIRDtJQURDLE1BQU07OENBS047QUFHRDtJQURDLFFBQVE7MkNBa0JSO0FBR0Q7SUFEQyxRQUFRO2dEQVNSO0FBZUQ7SUFEQyxNQUFNOzJDQThCTjtBQTZERDtJQURDLFFBQVE7cURBZ0JSO0FBR0Q7SUFEQyxRQUFRO2dEQWFSO0FBR0Q7SUFEQyxRQUFRO2dEQWVSO0FBR0Q7SUFEQyxRQUFRO2lEQWVSO0FBR0Q7SUFEQyxRQUFRO29EQUtSO0FBR0Q7SUFEQyxRQUFROzhDQUtSO0FBR0Q7SUFEQyxRQUFRO29EQUtSO0FBR0Q7SUFEQyxRQUFROzhDQUtSO0FBR0Q7SUFEQyxRQUFROzJEQUdSO0FBN1lrQixXQUFXO0lBRC9CLFFBQVE7R0FDWSxXQUFXLENBd1ovQjtlQXhab0IsV0FBVyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvaHVpaHVhd2svRG9jdW1lbnRzL29wdC9jaG9lcm9kb24tdWkvY29tcG9uZW50cy1wcm8vY29sb3ItcGlja2VyL0NvbG9yUGlja2VyLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgQ1NTUHJvcGVydGllcywgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgb2JzZXJ2ZXIgfSBmcm9tICdtb2J4LXJlYWN0JztcbmltcG9ydCB7IGFjdGlvbiwgY29tcHV0ZWQsIG9ic2VydmFibGUgfSBmcm9tICdtb2J4JztcbmltcG9ydCBUcmlnZ2VyRmllbGQsIHsgVHJpZ2dlckZpZWxkUHJvcHMgfSBmcm9tICcuLi90cmlnZ2VyLWZpZWxkL1RyaWdnZXJGaWVsZCc7XG5pbXBvcnQgYXV0b2JpbmQgZnJvbSAnLi4vX3V0aWwvYXV0b2JpbmQnO1xuaW1wb3J0IEV2ZW50TWFuYWdlciBmcm9tICcuLi9fdXRpbC9FdmVudE1hbmFnZXInO1xuaW1wb3J0IHsgRmllbGRUeXBlIH0gZnJvbSAnLi4vZGF0YS1zZXQvZW51bSc7XG5pbXBvcnQgeyBWYWxpZGF0aW9uTWVzc2FnZXMgfSBmcm9tICcuLi92YWxpZGF0b3IvVmFsaWRhdG9yJztcbmltcG9ydCB7ICRsIH0gZnJvbSAnLi4vbG9jYWxlLWNvbnRleHQnO1xuXG5mdW5jdGlvbiBnZXROb2RlUmVjdChub2RlKTogQ2xpZW50UmVjdCB7XG4gIHJldHVybiBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbG9yUGlja2VyUHJvcHMgZXh0ZW5kcyBUcmlnZ2VyRmllbGRQcm9wcyB7fVxuXG5Ab2JzZXJ2ZXJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbG9yUGlja2VyIGV4dGVuZHMgVHJpZ2dlckZpZWxkPENvbG9yUGlja2VyUHJvcHM+IHtcbiAgc3RhdGljIGRpc3BsYXlOYW1lID0gJ0NvbG9yUGlja2VyJztcblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIC4uLlRyaWdnZXJGaWVsZC5kZWZhdWx0UHJvcHMsXG4gICAgc3VmZml4Q2xzOiAnY29sb3ItcGlja2VyJyxcbiAgICBjbGVhckJ1dHRvbjogZmFsc2UsXG4gIH07XG5cbiAgZ3JhZGllbnQ6IEhUTUxEaXZFbGVtZW50IHwgbnVsbDtcblxuICBzZWxlY3RQb2ludGVyOiBIVE1MRGl2RWxlbWVudCB8IG51bGw7XG5cbiAgZXZlbnRNYW5hZ2VyOiBFdmVudE1hbmFnZXIgPSBuZXcgRXZlbnRNYW5hZ2VyKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50KTtcblxuICBodWU6IEhUTUxEaXZFbGVtZW50IHwgbnVsbDtcblxuICBodWVQb2ludGVyOiBIVE1MRGl2RWxlbWVudCB8IG51bGw7XG5cbiAgb3BhY2l0eTogSFRNTERpdkVsZW1lbnQgfCBudWxsO1xuXG4gIG9wYWNpdHlQb2ludGVyOiBIVE1MRGl2RWxlbWVudCB8IG51bGw7XG5cbiAgSFNWID0ge1xuICAgIGg6IDAsXG4gICAgczogMSxcbiAgICB2OiAxLFxuICAgIGE6IDEsXG4gIH07XG5cbiAgQG9ic2VydmFibGUgaHVlQ29sb3I/OiBzdHJpbmc7XG5cbiAgQGNvbXB1dGVkXG4gIGdldCBkZWZhdWx0VmFsaWRhdGlvbk1lc3NhZ2VzKCk6IFZhbGlkYXRpb25NZXNzYWdlcyB7XG4gICAgY29uc3QgbGFiZWwgPSB0aGlzLmdldFByb3AoJ2xhYmVsJyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlTWlzc2luZzogJGwoJ0NvbG9yUGlja2VyJywgbGFiZWwgPyAndmFsdWVfbWlzc2luZycgOiAndmFsdWVfbWlzc2luZ19ub19sYWJlbCcsIHtcbiAgICAgICAgbGFiZWwsXG4gICAgICB9KSxcbiAgICAgIHR5cGVNaXNtYXRjaDogJGwoJ0NvbG9yUGlja2VyJywgJ3R5cGVfbWlzbWF0Y2gnKSxcbiAgICB9O1xuICB9XG5cbiAgc2F2ZUdyYWRpZW50UmVmID0gbm9kZSA9PiAodGhpcy5ncmFkaWVudCA9IG5vZGUpO1xuXG4gIHNhdmVTZWxlY3RQb2ludGVyUmVmID0gbm9kZSA9PiAodGhpcy5zZWxlY3RQb2ludGVyID0gbm9kZSk7XG5cbiAgc2F2ZUh1ZVBvaW50ZXJSZWYgPSBub2RlID0+ICh0aGlzLmh1ZVBvaW50ZXIgPSBub2RlKTtcblxuICBzYXZlSHVlUmVmID0gbm9kZSA9PiAodGhpcy5odWUgPSBub2RlKTtcblxuICBzYXZlT3BhY2l0eVJlZiA9IG5vZGUgPT4gKHRoaXMub3BhY2l0eSA9IG5vZGUpO1xuXG4gIHNhdmVPcGFjaXR5UG9pbnRlclJlZiA9IG5vZGUgPT4gKHRoaXMub3BhY2l0eVBvaW50ZXIgPSBub2RlKTtcblxuICBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgY29uc3QgeyBwb3B1cCB9ID0gdGhpcztcbiAgICBpZiAocG9wdXApIHtcbiAgICAgIGNvbnN0IHsgaCwgcywgdiB9ID0gdGhpcy5IU1Y7XG4gICAgICBjb25zdCB7IGh1ZVBvaW50ZXIsIHNlbGVjdFBvaW50ZXIsIGh1ZSwgZ3JhZGllbnQgfSA9IHRoaXM7XG4gICAgICBpZiAoaHVlUG9pbnRlciAmJiBodWUpIHtcbiAgICAgICAgY29uc3QgeyB3aWR0aCB9ID0gZ2V0Tm9kZVJlY3QoaHVlKTtcbiAgICAgICAgdGhpcy5zZXRIdWVQb2ludGVyKCh3aWR0aCAqIGgpIC8gMzYwLCBodWVQb2ludGVyLCBodWUsIGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIGlmIChzZWxlY3RQb2ludGVyICYmIGdyYWRpZW50KSB7XG4gICAgICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gZ2V0Tm9kZVJlY3QoZ3JhZGllbnQpO1xuICAgICAgICBjb25zdCBsZWZ0ID0gcyAqIHdpZHRoO1xuICAgICAgICBjb25zdCB0b3AgPSBoZWlnaHQgLSB2ICogaGVpZ2h0O1xuICAgICAgICB0aGlzLnNldEdyYWRpZW50UG9pbnRlcihsZWZ0LCB0b3AsIHNlbGVjdFBvaW50ZXIsIGdyYWRpZW50LCBmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3luY1ZhbHVlT25CbHVyKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlWzBdICE9PSAnIycgJiYgIXZhbHVlLnN0YXJ0c1dpdGgoJ3JnYicpICYmICF2YWx1ZS5zdGFydHNXaXRoKCdobHMnKSkge1xuICAgICAgdmFsdWUgPSBgIyR7dmFsdWV9YDtcbiAgICB9XG4gICAgc3VwZXIuc3luY1ZhbHVlT25CbHVyKHZhbHVlKTtcbiAgfVxuXG4gIGdldEZpZWxkVHlwZSgpOiBGaWVsZFR5cGUge1xuICAgIHJldHVybiBGaWVsZFR5cGUuY29sb3I7XG4gIH1cblxuICBnZXRWYWx1ZSgpIHtcbiAgICByZXR1cm4gc3VwZXIuZ2V0VmFsdWUoKSB8fCB0aGlzLmh1ZUNvbG9yO1xuICB9XG5cbiAgZ2V0UHJlZml4KCk6IFJlYWN0Tm9kZSB7XG4gICAgY29uc3QgeyBwcmVmaXhDbHMgfSA9IHRoaXM7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtgJHtwcmVmaXhDbHN9LXByZWZpeGB9PlxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9e2Ake3ByZWZpeENsc30tY29sb3JgfSBzdHlsZT17eyBiYWNrZ3JvdW5kQ29sb3I6IHRoaXMuZ2V0VmFsdWUoKSB9fSAvPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxuXG4gIGdldFBvcHVwRm9vdGVyKCkge1xuICAgIGNvbnN0IHsgcHJlZml4Q2xzIH0gPSB0aGlzO1xuICAgIGNvbnN0IGh1ZVBvaW50ZXJQcm9wcyA9IHtcbiAgICAgIG9uTW91c2VEb3duOiB0aGlzLmhhbmRsZUhQTW91c2VEb3duLFxuICAgICAgcmVmOiB0aGlzLnNhdmVIdWVQb2ludGVyUmVmLFxuICAgICAgY2xhc3NOYW1lOiBgJHtwcmVmaXhDbHN9LXBvcHVwLWZvb3Rlci1zbGlkZXItcG9pbnRlcmAsXG4gICAgfTtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9e2Ake3ByZWZpeENsc30tcG9wdXAtZm9vdGVyYH0+XG4gICAgICAgIDxkaXYgcmVmPXt0aGlzLnNhdmVIdWVSZWZ9IGNsYXNzTmFtZT17YCR7cHJlZml4Q2xzfS1wb3B1cC1mb290ZXItc2xpZGVyYH0+XG4gICAgICAgICAgPGRpdiBvbkNsaWNrPXt0aGlzLmhhbmRsZUh1ZUNsaWNrfSBjbGFzc05hbWU9XCJodWVcIiAvPlxuICAgICAgICAgIDxkaXYgey4uLmh1ZVBvaW50ZXJQcm9wc30gLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgcmVmPXt0aGlzLnNhdmVPcGFjaXR5UmVmfSBjbGFzc05hbWU9e2Ake3ByZWZpeENsc30tcG9wdXAtZm9vdGVyLXNsaWRlciBvcGFjaXR5YH0+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgcmVmPXt0aGlzLnNhdmVPcGFjaXR5UG9pbnRlclJlZn1cbiAgICAgICAgICAgIGNsYXNzTmFtZT17YCR7cHJlZml4Q2xzfS1wb3B1cC1mb290ZXItc2xpZGVyLXBvaW50ZXJgfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxuXG4gIGdldFBvcHVwQ29udGVudCgpIHtcbiAgICBjb25zdCB7IHByZWZpeENscyB9ID0gdGhpcztcbiAgICBjb25zdCBncmFkaWVudFByb3BzID0ge1xuICAgICAgY2xhc3NOYW1lOiBgJHtwcmVmaXhDbHN9LXBvcHVwLWJvZHktZ3JhZGllbnRgLFxuICAgICAgb25DbGljazogdGhpcy5oYW5kbGVHUENsaWNrLFxuICAgICAgcmVmOiB0aGlzLnNhdmVHcmFkaWVudFJlZixcbiAgICB9O1xuICAgIGNvbnN0IGdyYWRpZW50UG9pbnRlclByb3BzID0ge1xuICAgICAgb25Nb3VzZURvd246IHRoaXMuaGFuZGxlR1BNb3VzZURvd24sXG4gICAgICByZWY6IHRoaXMuc2F2ZVNlbGVjdFBvaW50ZXJSZWYsXG4gICAgICBjbGFzc05hbWU6IGAke3ByZWZpeENsc30tcG9wdXAtYm9keS1zZWxlY3RvcmAsXG4gICAgfTtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9e2Ake3ByZWZpeENsc30tcG9wdXAtdmlld2B9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YCR7cHJlZml4Q2xzfS1wb3B1cC1ib2R5YH0gc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiB0aGlzLmdldFZhbHVlKCkgfX0+XG4gICAgICAgICAgPGRpdiB7Li4uZ3JhZGllbnRQcm9wc30gLz5cbiAgICAgICAgICA8ZGl2IHsuLi5ncmFkaWVudFBvaW50ZXJQcm9wc30gLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIHt0aGlzLmdldFBvcHVwRm9vdGVyKCl9XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgc2V0SFNWKGgsIHMsIHYsIGEpIHtcbiAgICBjb25zdCB7IEhTViB9ID0gdGhpcztcbiAgICBpZiAoaCAhPT0gdW5kZWZpbmVkICYmIGggIT09IEhTVi5oKSB7XG4gICAgICBIU1YuaCA9IGg7XG4gICAgfVxuICAgIGlmICh2ICE9PSB1bmRlZmluZWQgJiYgdiAhPT0gSFNWLnYpIHtcbiAgICAgIEhTVi52ID0gdjtcbiAgICB9XG4gICAgaWYgKHMgIT09IHVuZGVmaW5lZCAmJiBzICE9PSBIU1Yucykge1xuICAgICAgSFNWLnMgPSBzO1xuICAgIH1cbiAgICBpZiAoYSAhPT0gdW5kZWZpbmVkICYmIGEgIT09IEhTVi5hKSB7XG4gICAgICBIU1YuYSA9IGE7XG4gICAgfVxuICB9XG5cbiAgQGFjdGlvblxuICBzZXRIdWVDb2xvcihjb2xvcikge1xuICAgIGlmIChjb2xvciAhPT0gdGhpcy5odWVDb2xvcikge1xuICAgICAgdGhpcy5odWVDb2xvciA9IGNvbG9yO1xuICAgIH1cbiAgfVxuXG4gIEBhdXRvYmluZFxuICBzZXRDb2xvcihjb2xvcikge1xuICAgIGlmIChjb2xvciAhPT0gdW5kZWZpbmVkICYmIGNvbG9yLnNsaWNlKDAsIDEpID09PSAnIycgJiYgY29sb3IubGVuZ3RoID4gMykge1xuICAgICAgY29uc3QgeyBncmFkaWVudCwgc2VsZWN0UG9pbnRlciwgaHVlLCBodWVQb2ludGVyIH0gPSB0aGlzO1xuICAgICAgY29uc3QgeyByLCBnLCBiLCBhIH0gPSB0aGlzLmhleFRvUkdCKGNvbG9yKTtcbiAgICAgIGNvbnN0IHsgaCwgcywgdiB9ID0gdGhpcy5yZ2JUb0hTVihyIC8gMjU1LCBnIC8gMjU1LCBiIC8gMjU1LCBhKTtcbiAgICAgIHRoaXMuc2V0SFNWKGgsIHMsIHYsIGEpO1xuICAgICAgY29uc3QgeyByOiBociwgZzogaGcsIGI6IGhiLCBhOiBoYSB9ID0gdGhpcy5oc3ZUb1JHQihoLCAxLCAxLCAxKTtcbiAgICAgIGNvbnN0IGh1ZUNvbG9yID0gdGhpcy5yZ2JUb0hFWChociwgaGcsIGhiLCBoYSk7XG4gICAgICB0aGlzLnNldEh1ZUNvbG9yKGh1ZUNvbG9yKTtcbiAgICAgIGNvbnN0IHsgaGVpZ2h0LCB3aWR0aCB9ID0gZ2V0Tm9kZVJlY3QoZ3JhZGllbnQpO1xuICAgICAgY29uc3QgbGVmdCA9IHMgKiB3aWR0aDtcbiAgICAgIGNvbnN0IHRvcCA9IGhlaWdodCAtIHYgKiBoZWlnaHQ7XG4gICAgICBjb25zdCB7IHdpZHRoOiBodWVXaWR0aCB9ID0gZ2V0Tm9kZVJlY3QoaHVlKTtcbiAgICAgIGNvbnN0IGh1ZUxlZnQgPSAoaCAvIDM2MCkgKiBodWVXaWR0aDtcbiAgICAgIHRoaXMuc2V0SHVlUG9pbnRlcihodWVMZWZ0LCBodWVQb2ludGVyLCBodWUsIGZhbHNlKTtcbiAgICAgIHRoaXMuc2V0R3JhZGllbnRQb2ludGVyKGxlZnQsIHRvcCwgc2VsZWN0UG9pbnRlciwgZ3JhZGllbnQsIGZhbHNlKTtcbiAgICB9XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgcG9zaXRpb25Ub0hTVihsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICBjb25zdCB7IGgsIGEgfSA9IHRoaXMuSFNWO1xuICAgIGlmICh3aWR0aCA8IDApIHtcbiAgICAgIHdpZHRoID0gMDtcbiAgICB9XG4gICAgY29uc3QgcyA9IGxlZnQgLyB3aWR0aDtcbiAgICBjb25zdCB2ID0gMSAtIHRvcCAvIGhlaWdodDtcbiAgICByZXR1cm4geyBoLCBzLCB2LCBhIH07XG4gIH1cblxuICByZ2JUb0hFWChyLCBnLCBiLCBhKSB7XG4gICAgZnVuY3Rpb24gaGV4KG51bSkge1xuICAgICAgY29uc3QgaGV4TnVtID0gbnVtLnRvU3RyaW5nKDE2KTtcbiAgICAgIHJldHVybiBoZXhOdW0ubGVuZ3RoID09PSAxID8gYDAke2hleE51bX1gIDogaGV4TnVtO1xuICAgIH1cblxuICAgIGlmIChhICE9PSAxKSB7XG4gICAgICByZXR1cm4gYCMke2hleChyKX0ke2hleChnKX0ke2hleChiKX0ke2hleCgoYSAqIDI1NSkgLyAxMCl9YDtcbiAgICB9XG4gICAgcmV0dXJuIGAjJHtoZXgocil9JHtoZXgoZyl9JHtoZXgoYil9YDtcbiAgfVxuXG4gIEBhY3Rpb25cbiAgaGV4VG9SR0IoaGV4KSB7XG4gICAgaGV4ID0gaGV4LnNwbGl0KCcjJylbMV0gfHwgaGV4LnNwbGl0KCcjJylbMF07XG4gICAgY29uc3QgbGVuZ3RoID0gaGV4Lmxlbmd0aDtcbiAgICBsZXQgcmVzdWx0cyA9ICcnO1xuICAgIGNvbnN0IGhleEFycmF5ID0gaGV4LnNwbGl0KCcnKTtcbiAgICBpZiAobGVuZ3RoID09PSAzIHx8IGxlbmd0aCA9PT0gNCkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHRzID0gYCR7cmVzdWx0c30ke2hleEFycmF5W2ldfSR7aGV4QXJyYXlbaV19YDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gNSkge1xuICAgICAgcmVzdWx0cyA9IGAke2hleH0ke2hleEFycmF5W2xlbmd0aCAtIDFdfWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdHMgPSBoZXg7XG4gICAgfVxuICAgIHJlc3VsdHMgPSByZXN1bHRzLnNsaWNlKDAsIDYpO1xuICAgIGNvbnN0IHJlc3VsdCA9IC9eIz8oWzAtOWEtZl17Mn0pKFswLTlhLWZdezJ9KShbMC05YS1mXXsyfSkkL2kuZXhlYyhyZXN1bHRzKTtcbiAgICByZXR1cm4gcmVzdWx0XG4gICAgICA/IHtcbiAgICAgICAgICByOiBwYXJzZUludChyZXN1bHRbMV0sIDE2KSxcbiAgICAgICAgICBnOiBwYXJzZUludChyZXN1bHRbMl0sIDE2KSxcbiAgICAgICAgICBiOiBwYXJzZUludChyZXN1bHRbM10sIDE2KSxcbiAgICAgICAgICBhOiAxLFxuICAgICAgICB9XG4gICAgICA6IHtcbiAgICAgICAgICByOiAyNTUsXG4gICAgICAgICAgZzogMCxcbiAgICAgICAgICBiOiAwLFxuICAgICAgICAgIGE6IDEsXG4gICAgICAgIH07XG4gIH1cblxuICByZ2JUb0hTVihyLCBnLCBiLCBhKSB7XG4gICAgY29uc3QgbWF4ID0gTWF0aC5tYXgociwgZywgYik7XG4gICAgY29uc3QgbWluID0gTWF0aC5taW4ociwgZywgYik7XG4gICAgY29uc3QgdiA9IG1heDtcbiAgICBsZXQgcztcbiAgICBsZXQgaDtcbiAgICBpZiAodiA9PT0gMCkge1xuICAgICAgcyA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMgPSAobWF4IC0gbWluKSAvIG1heDtcbiAgICB9XG4gICAgaWYgKG1heCA9PT0gbWluKSB7XG4gICAgICBoID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZCA9IHIgPT09IG1pbiA/IGcgLSBiIDogYiA9PT0gbWluID8gciAtIGcgOiBiIC0gcjtcbiAgICAgIGNvbnN0IG0gPSByID09PSBtaW4gPyAzIDogYiA9PT0gbWluID8gMSA6IDU7XG4gICAgICBoID0gNjAgKiAobSAtIGQgLyAobWF4IC0gbWluKSk7XG4gICAgfVxuICAgIGlmIChoIDwgMCkge1xuICAgICAgaCArPSAzNjA7XG4gICAgfVxuICAgIHJldHVybiB7IGgsIHMsIHYsIGEgfTtcbiAgfVxuXG4gIGhzdlRvUkdCKGgsIHMsIHYsIGEpIHtcbiAgICBoIC89IDYwO1xuICAgIGNvbnN0IGgxID0gTWF0aC5mbG9vcihoKTtcbiAgICBjb25zdCBmID0gaCAtIGgxO1xuICAgIGNvbnN0IHAgPSB2ICogKDEgLSBzKTtcbiAgICBjb25zdCBxID0gdiAqICgxIC0gZiAqIHMpO1xuICAgIGNvbnN0IHQgPSB2ICogKDEgLSAoMSAtIGYpICogcyk7XG4gICAgbGV0IHJnYjtcbiAgICBzd2l0Y2ggKGgxKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIHJnYiA9IHsgcjogdiwgZzogdCwgYjogcCwgYSB9O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmdiID0geyByOiBxLCBnOiB2LCBiOiBwLCBhIH07XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICByZ2IgPSB7IHI6IHAsIGc6IHYsIGI6IHQsIGEgfTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIHJnYiA9IHsgcjogcCwgZzogcSwgYjogdiwgYSB9O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNDpcbiAgICAgICAgcmdiID0geyByOiB0LCBnOiBwLCBiOiB2LCBhIH07XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmdiID0geyByOiB2LCBnOiBwLCBiOiBxLCBhIH07XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZ2IuciA9IE1hdGguZmxvb3IocmdiLnIgKiAyNTUpO1xuICAgIHJnYi5nID0gTWF0aC5mbG9vcihyZ2IuZyAqIDI1NSk7XG4gICAgcmdiLmIgPSBNYXRoLmZsb29yKHJnYi5iICogMjU1KTtcbiAgICByZXR1cm4gcmdiO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIHNldEdyYWRpZW50UG9pbnRlcih4LCB5LCBwb2ludGVyLCB3cmFwLCBpc0NsaWVudDogYm9vbGVhbikge1xuICAgIGNvbnN0IHsgbGVmdDogd3JhcFgsIHRvcDogd3JhcFksIHdpZHRoOiB3cmFwVywgaGVpZ2h0OiB3cmFwSCB9ID0gZ2V0Tm9kZVJlY3Qod3JhcCk7XG4gICAgY29uc3QgeyBoZWlnaHQ6IHBvaW50ZXJILCB3aWR0aDogcG9pbnRlclcgfSA9IGdldE5vZGVSZWN0KHBvaW50ZXIpO1xuICAgIGxldCBsZWZ0O1xuICAgIGxldCB0b3A7XG4gICAgaWYgKGlzQ2xpZW50KSB7XG4gICAgICBsZWZ0ID0geCAtIHdyYXBYIDwgMCA/IDAgOiB4IC0gd3JhcFggPiB3cmFwVyA/IHdyYXBXIDogeCAtIHdyYXBYO1xuICAgICAgdG9wID0geSAtIHdyYXBZIDwgMCA/IDAgOiB5IC0gd3JhcFkgPiB3cmFwSCA/IHdyYXBIIDogeSAtIHdyYXBZO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZWZ0ID0geDtcbiAgICAgIHRvcCA9IHk7XG4gICAgfVxuICAgIHBvaW50ZXIuc3R5bGUubGVmdCA9IGAke2xlZnQgLSBwb2ludGVySCAvIDJ9cHhgO1xuICAgIHBvaW50ZXIuc3R5bGUudG9wID0gYCR7dG9wIC0gcG9pbnRlclcgLyAyfXB4YDtcbiAgICByZXR1cm4geyBsZWZ0LCB0b3AgfTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBoYW5kbGVHUENsaWNrKGUpIHtcbiAgICBjb25zdCB7IGdyYWRpZW50LCBzZWxlY3RQb2ludGVyLCBzZXRHcmFkaWVudFBvaW50ZXIgfSA9IHRoaXM7XG4gICAgaWYgKGdyYWRpZW50ICYmIHNlbGVjdFBvaW50ZXIpIHtcbiAgICAgIGNvbnN0IHsgcG9zaXRpb25Ub0hTViwgcmdiVG9IRVgsIGhzdlRvUkdCIH0gPSB0aGlzO1xuICAgICAgY29uc3QgeyBsZWZ0LCB0b3AgfSA9IHNldEdyYWRpZW50UG9pbnRlcihlLmNsaWVudFgsIGUuY2xpZW50WSwgc2VsZWN0UG9pbnRlciwgZ3JhZGllbnQsIHRydWUpO1xuICAgICAgY29uc3QgeyBoZWlnaHQsIHdpZHRoIH0gPSBnZXROb2RlUmVjdChncmFkaWVudCk7XG4gICAgICBjb25zdCB7IGgsIHMsIHYsIGE6IG9wYWNpdHkgfSA9IHBvc2l0aW9uVG9IU1YobGVmdCwgdG9wLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgIHRoaXMuc2V0SFNWKHVuZGVmaW5lZCwgcywgdiwgdW5kZWZpbmVkKTtcbiAgICAgIGNvbnN0IHsgciwgZywgYiwgYSB9ID0gaHN2VG9SR0IoaCwgcywgdiwgb3BhY2l0eSk7XG4gICAgICBjb25zdCBoZXhDb2xvciA9IHJnYlRvSEVYKHIsIGcsIGIsIGEpO1xuICAgICAgdGhpcy5wcmVwYXJlU2V0VmFsdWUoaGV4Q29sb3IpO1xuICAgIH1cbiAgfVxuXG4gIEBhdXRvYmluZFxuICBzZXRIdWVQb2ludGVyKHgsIHBvaW50ZXIsIHdyYXAsIGlzQ2xpZW50KSB7XG4gICAgY29uc3QgeyBsZWZ0OiB3cmFwWCwgd2lkdGg6IHdyYXBXIH0gPSBnZXROb2RlUmVjdCh3cmFwKTtcbiAgICBjb25zdCB7IHdpZHRoOiBwb2ludGVyVyB9ID0gZ2V0Tm9kZVJlY3QocG9pbnRlcik7XG4gICAgbGV0IGxlZnQ7XG4gICAgaWYgKGlzQ2xpZW50KSB7XG4gICAgICBsZWZ0ID0geCAtIHdyYXBYIDwgMCA/IDAgOiB4IC0gd3JhcFggPiB3cmFwVyA/IHdyYXBXIDogeCAtIHdyYXBYO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZWZ0ID0geDtcbiAgICB9XG4gICAgcG9pbnRlci5zdHlsZS5sZWZ0ID0gYCR7bGVmdCAtIHBvaW50ZXJXIC8gMn1weGA7XG4gICAgaWYgKGxlZnQgPT09IHdyYXBXKSB7XG4gICAgICByZXR1cm4geyBsZWZ0OiAwLCB3cmFwVyB9O1xuICAgIH1cbiAgICByZXR1cm4geyBsZWZ0LCB3cmFwVyB9O1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGhhbmRsZUh1ZUNsaWNrKGUpIHtcbiAgICBjb25zdCB7IGh1ZSwgaHVlUG9pbnRlciwgc2V0SHVlUG9pbnRlciwgaHN2VG9SR0IsIHJnYlRvSEVYIH0gPSB0aGlzO1xuICAgIGlmIChodWUgJiYgaHVlUG9pbnRlcikge1xuICAgICAgY29uc3QgeyBsZWZ0LCB3cmFwVyB9ID0gc2V0SHVlUG9pbnRlcihlLmNsaWVudFgsIGh1ZVBvaW50ZXIsIGh1ZSwgdHJ1ZSk7XG4gICAgICBjb25zdCBoID0gTWF0aC5mbG9vcigobGVmdCAvIHdyYXBXKSAqIDM2MCk7XG4gICAgICBjb25zdCB7IHMsIHYsIGE6IG9wYWNpdHkgfSA9IHRoaXMuSFNWO1xuICAgICAgdGhpcy5zZXRIU1YoaCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCk7XG4gICAgICBjb25zdCB7IHIsIGcsIGIsIGEgfSA9IGhzdlRvUkdCKGgsIDEsIDEsIDEpO1xuICAgICAgY29uc3QgeyByOiB2YWx1ZVIsIGc6IHZhbHVlRywgYjogdmFsdWVCLCBhOiB2YWx1ZUEgfSA9IGhzdlRvUkdCKGgsIHMsIHYsIG9wYWNpdHkpO1xuICAgICAgY29uc3QgaHVlQ29sb3IgPSByZ2JUb0hFWChyLCBnLCBiLCBhKTtcbiAgICAgIGNvbnN0IHZhbHVlQ29sb3IgPSByZ2JUb0hFWCh2YWx1ZVIsIHZhbHVlRywgdmFsdWVCLCB2YWx1ZUEpO1xuICAgICAgdGhpcy5zZXRIdWVDb2xvcihodWVDb2xvcik7XG4gICAgICB0aGlzLnByZXBhcmVTZXRWYWx1ZSh2YWx1ZUNvbG9yKTtcbiAgICB9XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgaGFuZGxlR1BNb3VzZURvd24oKSB7XG4gICAgdGhpcy5ldmVudE1hbmFnZXJcbiAgICAgIC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLmhhbmRsZUdQQ2xpY2spXG4gICAgICAuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMub25HUE1vdXNlVXApO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIG9uR1BNb3VzZVVwKCkge1xuICAgIHRoaXMuZXZlbnRNYW5hZ2VyXG4gICAgICAucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5oYW5kbGVHUENsaWNrKVxuICAgICAgLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLm9uR1BNb3VzZVVwKTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBoYW5kbGVIUE1vdXNlRG93bigpIHtcbiAgICB0aGlzLmV2ZW50TWFuYWdlclxuICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMuaGFuZGxlSHVlQ2xpY2spXG4gICAgICAuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMub25IUE1vdXNlVXApO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIG9uSFBNb3VzZVVwKCkge1xuICAgIHRoaXMuZXZlbnRNYW5hZ2VyXG4gICAgICAucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5oYW5kbGVIdWVDbGljaylcbiAgICAgIC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5vbkhQTW91c2VVcCk7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgaGFuZGxlUG9wdXBBbmltYXRlQXBwZWFyKCkge1xuICAgIHRoaXMuc2V0Q29sb3IodGhpcy5nZXRWYWx1ZSgpKTtcbiAgfVxuXG4gIGhhbmRsZVBvcHVwQW5pbWF0ZUVuZCgpIHt9XG5cbiAgZ2V0UG9wdXBTdHlsZUZyb21BbGlnbigpOiBDU1NQcm9wZXJ0aWVzIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgZ2V0VHJpZ2dlckljb25Gb250KCkge1xuICAgIHJldHVybiAncGFsZXR0ZSc7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==