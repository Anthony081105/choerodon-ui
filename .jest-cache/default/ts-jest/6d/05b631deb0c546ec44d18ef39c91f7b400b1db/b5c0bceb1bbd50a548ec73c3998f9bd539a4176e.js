// @ts-nocheck
import * as React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { defaultClassPrefix, getUnhandledProps, prefix } from './utils';
import TableContext from './TableContext';
class Row extends React.PureComponent {
    render() {
        const { className, width, height, top, style, isHeaderRow, headerHeight, rowRef, classPrefix, ...rest } = this.props;
        const addPrefix = prefix(classPrefix);
        const classes = classNames(classPrefix, className, {
            [addPrefix('header')]: isHeaderRow,
        });
        const styles = {
            minWidth: width,
            height: isHeaderRow ? headerHeight : height,
            ...style,
        };
        const unhandledProps = getUnhandledProps(Row, rest);
        return (React.createElement(TableContext.Consumer, null, ({ translateDOMPositionXY }) => {
            translateDOMPositionXY?.(styles, 0, top);
            return React.createElement("div", Object.assign({}, unhandledProps, { ref: rowRef, className: classes, style: styles }));
        }));
    }
}
Row.propTypes = {
    width: PropTypes.number,
    height: PropTypes.number,
    headerHeight: PropTypes.number,
    top: PropTypes.number,
    isHeaderRow: PropTypes.bool,
    rowRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
    className: PropTypes.string,
    classPrefix: PropTypes.string,
    style: PropTypes.object,
};
Row.defaultProps = {
    classPrefix: defaultClassPrefix('performance-table-row'),
    height: 46,
    headerHeight: 40,
};
export default Row;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMtcHJvL3BlcmZvcm1hbmNlLXRhYmxlL1Jvdy50c3giLCJtYXBwaW5ncyI6IkFBQUEsY0FBYztBQUNkLE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQy9CLE9BQU8sU0FBUyxNQUFNLFlBQVksQ0FBQztBQUNuQyxPQUFPLFVBQVUsTUFBTSxZQUFZLENBQUM7QUFDcEMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLGlCQUFpQixFQUFFLE1BQU0sRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUN4RSxPQUFPLFlBQVksTUFBTSxnQkFBZ0IsQ0FBQztBQUcxQyxNQUFNLEdBQUksU0FBUSxLQUFLLENBQUMsYUFBdUI7SUFrQjdDLE1BQU07UUFDSixNQUFNLEVBQ0osU0FBUyxFQUNULEtBQUssRUFDTCxNQUFNLEVBQ04sR0FBRyxFQUNILEtBQUssRUFDTCxXQUFXLEVBQ1gsWUFBWSxFQUNaLE1BQU0sRUFDTixXQUFXLEVBQ1gsR0FBRyxJQUFJLEVBQ1IsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBRWYsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3RDLE1BQU0sT0FBTyxHQUFHLFVBQVUsQ0FBQyxXQUFXLEVBQUUsU0FBUyxFQUFFO1lBQ2pELENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsV0FBVztTQUNuQyxDQUFDLENBQUM7UUFFSCxNQUFNLE1BQU0sR0FBRztZQUNiLFFBQVEsRUFBRSxLQUFLO1lBQ2YsTUFBTSxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxNQUFNO1lBQzNDLEdBQUcsS0FBSztTQUNULENBQUM7UUFFRixNQUFNLGNBQWMsR0FBRyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFcEQsT0FBTyxDQUNMLG9CQUFDLFlBQVksQ0FBQyxRQUFRLFFBQ25CLENBQUMsRUFBRSxzQkFBc0IsRUFBRSxFQUFFLEVBQUU7WUFDOUIsc0JBQXNCLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQ3pDLE9BQU8sNkNBQVMsY0FBYyxJQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxJQUFJLENBQUM7UUFDckYsQ0FBQyxDQUNxQixDQUN6QixDQUFDO0lBQ0osQ0FBQzs7QUFwRE0sYUFBUyxHQUFHO0lBQ2pCLEtBQUssRUFBRSxTQUFTLENBQUMsTUFBTTtJQUN2QixNQUFNLEVBQUUsU0FBUyxDQUFDLE1BQU07SUFDeEIsWUFBWSxFQUFFLFNBQVMsQ0FBQyxNQUFNO0lBQzlCLEdBQUcsRUFBRSxTQUFTLENBQUMsTUFBTTtJQUNyQixXQUFXLEVBQUUsU0FBUyxDQUFDLElBQUk7SUFDM0IsTUFBTSxFQUFFLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMvRCxTQUFTLEVBQUUsU0FBUyxDQUFDLE1BQU07SUFDM0IsV0FBVyxFQUFFLFNBQVMsQ0FBQyxNQUFNO0lBQzdCLEtBQUssRUFBRSxTQUFTLENBQUMsTUFBTTtDQUN4QixDQUFDO0FBQ0ssZ0JBQVksR0FBRztJQUNwQixXQUFXLEVBQUUsa0JBQWtCLENBQUMsdUJBQXVCLENBQUM7SUFDeEQsTUFBTSxFQUFFLEVBQUU7SUFDVixZQUFZLEVBQUUsRUFBRTtDQUNqQixDQUFDO0FBd0NKLGVBQWUsR0FBRyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9odWlodWF3ay9Eb2N1bWVudHMvb3B0L2Nob2Vyb2Rvbi11aS9jb21wb25lbnRzLXByby9wZXJmb3JtYW5jZS10YWJsZS9Sb3cudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEB0cy1ub2NoZWNrXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgeyBkZWZhdWx0Q2xhc3NQcmVmaXgsIGdldFVuaGFuZGxlZFByb3BzLCBwcmVmaXggfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCBUYWJsZUNvbnRleHQgZnJvbSAnLi9UYWJsZUNvbnRleHQnO1xuaW1wb3J0IHsgUm93UHJvcHMgfSBmcm9tICcuL1Jvdy5kJztcblxuY2xhc3MgUm93IGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudDxSb3dQcm9wcz4ge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIHdpZHRoOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGhlaWdodDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBoZWFkZXJIZWlnaHQ6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgdG9wOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGlzSGVhZGVyUm93OiBQcm9wVHlwZXMuYm9vbCxcbiAgICByb3dSZWY6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNsYXNzUHJlZml4OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICB9O1xuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIGNsYXNzUHJlZml4OiBkZWZhdWx0Q2xhc3NQcmVmaXgoJ3BlcmZvcm1hbmNlLXRhYmxlLXJvdycpLFxuICAgIGhlaWdodDogNDYsXG4gICAgaGVhZGVySGVpZ2h0OiA0MCxcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgY2xhc3NOYW1lLFxuICAgICAgd2lkdGgsXG4gICAgICBoZWlnaHQsXG4gICAgICB0b3AsXG4gICAgICBzdHlsZSxcbiAgICAgIGlzSGVhZGVyUm93LFxuICAgICAgaGVhZGVySGVpZ2h0LFxuICAgICAgcm93UmVmLFxuICAgICAgY2xhc3NQcmVmaXgsXG4gICAgICAuLi5yZXN0XG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBjb25zdCBhZGRQcmVmaXggPSBwcmVmaXgoY2xhc3NQcmVmaXgpO1xuICAgIGNvbnN0IGNsYXNzZXMgPSBjbGFzc05hbWVzKGNsYXNzUHJlZml4LCBjbGFzc05hbWUsIHtcbiAgICAgIFthZGRQcmVmaXgoJ2hlYWRlcicpXTogaXNIZWFkZXJSb3csXG4gICAgfSk7XG5cbiAgICBjb25zdCBzdHlsZXMgPSB7XG4gICAgICBtaW5XaWR0aDogd2lkdGgsXG4gICAgICBoZWlnaHQ6IGlzSGVhZGVyUm93ID8gaGVhZGVySGVpZ2h0IDogaGVpZ2h0LFxuICAgICAgLi4uc3R5bGUsXG4gICAgfTtcblxuICAgIGNvbnN0IHVuaGFuZGxlZFByb3BzID0gZ2V0VW5oYW5kbGVkUHJvcHMoUm93LCByZXN0KTtcblxuICAgIHJldHVybiAoXG4gICAgICA8VGFibGVDb250ZXh0LkNvbnN1bWVyPlxuICAgICAgICB7KHsgdHJhbnNsYXRlRE9NUG9zaXRpb25YWSB9KSA9PiB7XG4gICAgICAgICAgdHJhbnNsYXRlRE9NUG9zaXRpb25YWT8uKHN0eWxlcywgMCwgdG9wKTtcbiAgICAgICAgICByZXR1cm4gPGRpdiB7Li4udW5oYW5kbGVkUHJvcHN9IHJlZj17cm93UmVmfSBjbGFzc05hbWU9e2NsYXNzZXN9IHN0eWxlPXtzdHlsZXN9IC8+O1xuICAgICAgICB9fVxuICAgICAgPC9UYWJsZUNvbnRleHQuQ29uc3VtZXI+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBSb3c7XG4iXSwidmVyc2lvbiI6M30=