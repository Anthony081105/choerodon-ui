import { __decorate } from "tslib";
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { action } from 'mobx';
import KeyCode from 'choerodon-ui/lib/_util/KeyCode';
import { getConfig } from 'choerodon-ui/lib/configure';
import { pick } from 'lodash';
import Table from '../table/Table';
import TableProfessionalBar from '../table/query-bar/TableProfessionalBar';
export default class LovView extends Component {
    constructor() {
        super(...arguments);
        /* istanbul ignore next */
        this.handleKeyDown = e => {
            if (e.keyCode === KeyCode.ENTER) {
                const { onEnterDown } = this.props;
                onEnterDown();
            }
        };
        this.handleRow = () => {
            const { onDoubleClick } = this.props;
            return {
                onDoubleClick,
            };
        };
    }
    componentWillMount() {
        const { dataSet, dataSet: { selection }, multiple, } = this.props;
        this.selection = selection;
        dataSet.selection = multiple ? "multiple" /* multiple */ : "single" /* single */;
    }
    componentWillUnmount() {
        const { dataSet } = this.props;
        dataSet.selection = this.selection;
    }
    /* istanbul ignore next */
    getColumns() {
        const { config: { lovItems }, } = this.props;
        return lovItems
            ? lovItems
                .filter(({ gridField }) => gridField === 'Y')
                .sort(({ gridFieldSequence: seq1 }, { gridFieldSequence: seq2 }) => seq1 - seq2)
                .map(({ display, gridFieldName, gridFieldWidth, gridFieldAlign }) => ({
                key: gridFieldName,
                header: display,
                name: gridFieldName,
                width: gridFieldWidth,
                align: gridFieldAlign,
            }))
            : undefined;
    }
    render() {
        const { dataSet, config: { height, treeFlag, queryColumns, queryBar }, multiple, tableProps, } = this.props;
        const lovTableProps = {
            ...getConfig('lovTableProps'),
            ...tableProps,
            autoFocus: true,
            mode: treeFlag === 'Y' ? "tree" /* tree */ : "list" /* list */,
            onKeyDown: this.handleKeyDown,
            dataSet,
            columns: this.getColumns(),
            queryFieldsLimit: queryColumns,
            queryBar,
        };
        if (multiple) {
            lovTableProps.selectionMode = "rowbox" /* rowbox */;
        }
        else {
            lovTableProps.selectionMode = tableProps?.selectionMode ? tableProps.selectionMode : "none" /* none */;
            lovTableProps.onRow = this.handleRow;
        }
        if (height) {
            lovTableProps.style = { ...lovTableProps.style, height };
        }
        const isProfessionalBar = getConfig('queryBar') === "professionalBar" /* professionalBar */;
        if (!lovTableProps.queryBar && isProfessionalBar) {
            lovTableProps.queryBar = (props) => React.createElement(TableProfessionalBar, Object.assign({}, props, { queryBarProps: { labelWidth: 80 } }));
        }
        // 优化优先级 让 部分tableProps属性 的优先级大于dataSet的设置
        // 目前需要处理 selectionMode
        Object.assign(lovTableProps, pick({ ...getConfig('lovTableProps'), ...tableProps }, [
            'selectionMode',
        ]));
        return React.createElement(Table, Object.assign({}, lovTableProps));
    }
}
LovView.propTypes = {
    dataSet: PropTypes.object.isRequired,
    config: PropTypes.object.isRequired,
    tableProps: PropTypes.object,
    onDoubleClick: PropTypes.func.isRequired,
    onEnterDown: PropTypes.func.isRequired,
};
__decorate([
    action
], LovView.prototype, "componentWillMount", null);
__decorate([
    action
], LovView.prototype, "componentWillUnmount", null);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,