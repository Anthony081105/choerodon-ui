import React, { Component, } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import LocaleReceiver from '../locale-provider/LocaleReceiver';
import defaultLocale from '../locale-provider/default';
import RcSelect, { OptGroup, Option } from '../rc-components/select';
import { getPrefixCls } from '../configure';
// => It is needless to export the declaration of below two inner components.
// export { Option, OptGroup };
export default class Select extends Component {
    constructor() {
        super(...arguments);
        this.saveSelect = (node) => {
            this.rcSelect = node;
        };
        this.renderSelect = (locale) => {
            const { prefixCls: customizePrefixCls, className = '', size, mode, ...restProps } = this.props;
            const prefixCls = getPrefixCls('select', customizePrefixCls);
            const cls = classNames({
                [`${prefixCls}-lg`]: size === "large" /* large */,
                [`${prefixCls}-sm`]: size === "small" /* small */,
            }, className);
            let { optionLabelProp } = this.props;
            const isCombobox = mode === "combobox" /* combobox */;
            if (isCombobox) {
                // children 带 dom 结构时，无法填入输入框
                optionLabelProp = optionLabelProp || 'value';
            }
            const modeConfig = {
                multiple: mode === "multiple" /* multiple */,
                tags: mode === "tags" /* tags */,
                combobox: isCombobox,
            };
            return (React.createElement(RcSelect, Object.assign({}, restProps, modeConfig, { prefixCls: prefixCls, className: cls, optionLabelProp: optionLabelProp || 'children', filterPlaceholder: locale.filterPlaceholder, notFoundContent: this.getNotFoundContent(locale), ref: this.saveSelect })));
        };
    }
    focus() {
        this.rcSelect.focus();
    }
    blur() {
        this.rcSelect.blur();
    }
    getNotFoundContent(locale) {
        const { notFoundContent, mode } = this.props;
        const isCombobox = mode === "combobox" /* combobox */;
        if (isCombobox) {
            // AutoComplete don't have notFoundContent defaultly
            return notFoundContent === undefined ? null : notFoundContent;
        }
        return notFoundContent === undefined ? locale.notFoundContent : notFoundContent;
    }
    render() {
        return (React.createElement(LocaleReceiver, { componentName: "Select", defaultLocale: defaultLocale.Select }, this.renderSelect));
    }
}
Select.displayName = 'Select';
Select.Option = Option;
Select.OptGroup = OptGroup;
Select.defaultProps = {
    blurChange: true,
    showSearch: false,
    transitionName: 'slide-up',
    choiceTransitionName: 'zoom',
    filter: false,
    showCheckAll: true,
    choiceRemove: true,
    border: true,
};
Select.propTypes = {
    prefixCls: PropTypes.string,
    className: PropTypes.string,
    size: PropTypes.oneOf(["default" /* default */, "large" /* large */, "small" /* small */]),
    combobox: PropTypes.bool,
    notFoundContent: PropTypes.any,
    showSearch: PropTypes.bool,
    optionLabelProp: PropTypes.string,
    transitionName: PropTypes.string,
    choiceTransitionName: PropTypes.string,
    showNotFindInputItem: PropTypes.bool,
    showNotFindSelectedItem: PropTypes.bool,
    filter: PropTypes.bool,
    showCheckAll: PropTypes.bool,
    footer: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),
    choiceRender: PropTypes.func,
    loading: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),
    filterValue: PropTypes.string,
    onFilterChange: PropTypes.func,
    choiceRemove: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),
    onChoiceRemove: PropTypes.func,
    onClear: PropTypes.func,
    border: PropTypes.bool,
    blurChange: PropTypes.bool,
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,