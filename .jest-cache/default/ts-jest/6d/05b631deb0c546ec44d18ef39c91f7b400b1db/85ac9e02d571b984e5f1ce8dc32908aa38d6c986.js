import { __decorate } from "tslib";
import { computed, observable, runInAction } from 'mobx';
export default class Transport {
    constructor(props = {}, dataSet) {
        runInAction(() => {
            this.props = props;
            this.dataSet = dataSet;
        });
    }
    set create(create) {
        runInAction(() => {
            this.props.create = create;
        });
    }
    get create() {
        return this.props.create;
    }
    set read(read) {
        runInAction(() => {
            this.props.read = read;
        });
    }
    get read() {
        return this.props.read || this.dataSet.queryUrl;
    }
    set update(update) {
        runInAction(() => {
            this.props.update = update;
        });
    }
    get update() {
        return this.props.update;
    }
    set destroy(destroy) {
        runInAction(() => {
            this.props.destroy = destroy;
        });
    }
    get destroy() {
        return this.props.destroy;
    }
    set validate(validate) {
        runInAction(() => {
            this.props.validate = validate;
        });
    }
    get validate() {
        return this.props.validate || this.dataSet.validateUrl;
    }
    set submit(submit) {
        runInAction(() => {
            this.props.submit = submit;
        });
    }
    get submit() {
        return this.props.submit || this.dataSet.submitUrl;
    }
    set exports(exports) {
        runInAction(() => {
            this.props.exports = exports;
        });
    }
    get exports() {
        return this.props.exports || this.dataSet.exportUrl;
    }
    set tls(tls) {
        runInAction(() => {
            this.props.tls = tls;
        });
    }
    get tls() {
        return this.props.tls || this.dataSet.tlsUrl;
    }
    set adapter(adapter) {
        runInAction(() => {
            this.props.adapter = adapter;
        });
    }
    get adapter() {
        return this.props.adapter;
    }
}
__decorate([
    observable
], Transport.prototype, "props", void 0);
__decorate([
    computed
], Transport.prototype, "create", null);
__decorate([
    computed
], Transport.prototype, "read", null);
__decorate([
    computed
], Transport.prototype, "update", null);
__decorate([
    computed
], Transport.prototype, "destroy", null);
__decorate([
    computed
], Transport.prototype, "validate", null);
__decorate([
    computed
], Transport.prototype, "submit", null);
__decorate([
    computed
], Transport.prototype, "exports", null);
__decorate([
    computed
], Transport.prototype, "tls", null);
__decorate([
    computed
], Transport.prototype, "adapter", null);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMtcHJvL2RhdGEtc2V0L1RyYW5zcG9ydC50c3giLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQW9DekQsTUFBTSxDQUFDLE9BQU8sT0FBTyxTQUFTO0lBd0c1QixZQUFZLFFBQXdCLEVBQUUsRUFBRSxPQUFnQjtRQUN0RCxXQUFXLENBQUMsR0FBRyxFQUFFO1lBQ2YsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7WUFDbkIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDekIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBeEdELElBQUksTUFBTSxDQUFDLE1BQWlDO1FBQzFDLFdBQVcsQ0FBQyxHQUFHLEVBQUU7WUFDZixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDN0IsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBR0QsSUFBSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQztJQUMzQixDQUFDO0lBRUQsSUFBSSxJQUFJLENBQUMsSUFBK0I7UUFDdEMsV0FBVyxDQUFDLEdBQUcsRUFBRTtZQUNmLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUN6QixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFHRCxJQUFJLElBQUk7UUFDTixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDO0lBQ2xELENBQUM7SUFFRCxJQUFJLE1BQU0sQ0FBQyxNQUFpQztRQUMxQyxXQUFXLENBQUMsR0FBRyxFQUFFO1lBQ2YsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQzdCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUdELElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7SUFDM0IsQ0FBQztJQUVELElBQUksT0FBTyxDQUFDLE9BQWtDO1FBQzVDLFdBQVcsQ0FBQyxHQUFHLEVBQUU7WUFDZixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDL0IsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBR0QsSUFBSSxPQUFPO1FBQ1QsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQztJQUM1QixDQUFDO0lBRUQsSUFBSSxRQUFRLENBQUMsUUFBbUM7UUFDOUMsV0FBVyxDQUFDLEdBQUcsRUFBRTtZQUNmLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUNqQyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFHRCxJQUFJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDO0lBQ3pELENBQUM7SUFFRCxJQUFJLE1BQU0sQ0FBQyxNQUFpQztRQUMxQyxXQUFXLENBQUMsR0FBRyxFQUFFO1lBQ2YsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQzdCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUdELElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUM7SUFDckQsQ0FBQztJQUVELElBQUksT0FBTyxDQUFDLE9BQWtDO1FBQzVDLFdBQVcsQ0FBQyxHQUFHLEVBQUU7WUFDZixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDL0IsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBR0QsSUFBSSxPQUFPO1FBQ1QsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQztJQUN0RCxDQUFDO0lBRUQsSUFBSSxHQUFHLENBQUMsR0FBOEI7UUFDcEMsV0FBVyxDQUFDLEdBQUcsRUFBRTtZQUNmLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUN2QixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFHRCxJQUFJLEdBQUc7UUFDTCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO0lBQy9DLENBQUM7SUFFRCxJQUFJLE9BQU8sQ0FBQyxPQUFxQztRQUMvQyxXQUFXLENBQUMsR0FBRyxFQUFFO1lBQ2YsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQy9CLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUdELElBQUksT0FBTztRQUNULE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUM7SUFDNUIsQ0FBQztDQVFGO0FBN0dhO0lBQVgsVUFBVTt3Q0FBdUI7QUFXbEM7SUFEQyxRQUFRO3VDQUdSO0FBU0Q7SUFEQyxRQUFRO3FDQUdSO0FBU0Q7SUFEQyxRQUFRO3VDQUdSO0FBU0Q7SUFEQyxRQUFRO3dDQUdSO0FBU0Q7SUFEQyxRQUFRO3lDQUdSO0FBU0Q7SUFEQyxRQUFRO3VDQUdSO0FBU0Q7SUFEQyxRQUFRO3dDQUdSO0FBU0Q7SUFEQyxRQUFRO29DQUdSO0FBU0Q7SUFEQyxRQUFRO3dDQUdSIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9odWlodWF3ay9Eb2N1bWVudHMvb3B0L2Nob2Vyb2Rvbi11aS9jb21wb25lbnRzLXByby9kYXRhLXNldC9UcmFuc3BvcnQudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbXB1dGVkLCBvYnNlcnZhYmxlLCBydW5JbkFjdGlvbiB9IGZyb20gJ21vYngnO1xuaW1wb3J0IHsgQXhpb3NSZXF1ZXN0Q29uZmlnIH0gZnJvbSAnYXhpb3MnO1xuaW1wb3J0IERhdGFTZXQgZnJvbSAnLi9EYXRhU2V0JztcblxuZXhwb3J0IHR5cGUgU3VibWl0VHlwZXMgPSAnY3JlYXRlJyB8ICd1cGRhdGUnIHwgJ2Rlc3Ryb3knIHwgJ3N1Ym1pdCc7XG5cbmV4cG9ydCB0eXBlIFRyYW5zcG9ydFR5cGVzID0gU3VibWl0VHlwZXMgfCAncmVhZCcgfCAndmFsaWRhdGUnIHwgJ3RscycgfCAnZXhwb3J0cyc7XG5cbmV4cG9ydCB0eXBlIFRyYW5zcG9ydEFkYXB0ZXIgPSAoXG4gIGNvbmZpZzogQXhpb3NSZXF1ZXN0Q29uZmlnLFxuICB0eXBlOiBUcmFuc3BvcnRUeXBlcyxcbikgPT4gQXhpb3NSZXF1ZXN0Q29uZmlnO1xuXG5leHBvcnQgdHlwZSBUcmFuc3BvcnRIb29rUHJvcHMgPSB7XG4gIGRhdGE/OiBhbnk7XG4gIHBhcmFtcz86IGFueTtcbiAgZGF0YVNldD86IERhdGFTZXQ7XG4gIFtrZXk6IHN0cmluZ106IGFueTtcbn07XG5cbmV4cG9ydCB0eXBlIFRyYW5zcG9ydEhvb2sgPSAocHJvcHM6IFRyYW5zcG9ydEhvb2tQcm9wcykgPT4gQXhpb3NSZXF1ZXN0Q29uZmlnO1xuXG5leHBvcnQgdHlwZSBUcmFuc3BvcnRUeXBlID0gQXhpb3NSZXF1ZXN0Q29uZmlnIHwgVHJhbnNwb3J0SG9vayB8IHN0cmluZztcblxuZXhwb3J0IHR5cGUgVHJhbnNwb3J0UHJvcHMgPSB7XG4gIGNyZWF0ZT86IFRyYW5zcG9ydFR5cGU7XG4gIHJlYWQ/OiBUcmFuc3BvcnRUeXBlO1xuICB1cGRhdGU/OiBUcmFuc3BvcnRUeXBlO1xuICBkZXN0cm95PzogVHJhbnNwb3J0VHlwZTtcbiAgdmFsaWRhdGU/OiBUcmFuc3BvcnRUeXBlO1xuICBzdWJtaXQ/OiBUcmFuc3BvcnRUeXBlO1xuICB0bHM/OiBUcmFuc3BvcnRUeXBlO1xuICBleHBvcnRzPzogVHJhbnNwb3J0VHlwZTtcbiAgYWRhcHRlcj86IFRyYW5zcG9ydEFkYXB0ZXI7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUcmFuc3BvcnQge1xuICBAb2JzZXJ2YWJsZSBwcm9wczogVHJhbnNwb3J0UHJvcHM7XG5cbiAgZGF0YVNldDogRGF0YVNldDtcblxuICBzZXQgY3JlYXRlKGNyZWF0ZTogVHJhbnNwb3J0VHlwZSB8IHVuZGVmaW5lZCkge1xuICAgIHJ1bkluQWN0aW9uKCgpID0+IHtcbiAgICAgIHRoaXMucHJvcHMuY3JlYXRlID0gY3JlYXRlO1xuICAgIH0pO1xuICB9XG5cbiAgQGNvbXB1dGVkXG4gIGdldCBjcmVhdGUoKTogVHJhbnNwb3J0VHlwZSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuY3JlYXRlO1xuICB9XG5cbiAgc2V0IHJlYWQocmVhZDogVHJhbnNwb3J0VHlwZSB8IHVuZGVmaW5lZCkge1xuICAgIHJ1bkluQWN0aW9uKCgpID0+IHtcbiAgICAgIHRoaXMucHJvcHMucmVhZCA9IHJlYWQ7XG4gICAgfSk7XG4gIH1cblxuICBAY29tcHV0ZWRcbiAgZ2V0IHJlYWQoKTogVHJhbnNwb3J0VHlwZSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMucmVhZCB8fCB0aGlzLmRhdGFTZXQucXVlcnlVcmw7XG4gIH1cblxuICBzZXQgdXBkYXRlKHVwZGF0ZTogVHJhbnNwb3J0VHlwZSB8IHVuZGVmaW5lZCkge1xuICAgIHJ1bkluQWN0aW9uKCgpID0+IHtcbiAgICAgIHRoaXMucHJvcHMudXBkYXRlID0gdXBkYXRlO1xuICAgIH0pO1xuICB9XG5cbiAgQGNvbXB1dGVkXG4gIGdldCB1cGRhdGUoKTogVHJhbnNwb3J0VHlwZSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMudXBkYXRlO1xuICB9XG5cbiAgc2V0IGRlc3Ryb3koZGVzdHJveTogVHJhbnNwb3J0VHlwZSB8IHVuZGVmaW5lZCkge1xuICAgIHJ1bkluQWN0aW9uKCgpID0+IHtcbiAgICAgIHRoaXMucHJvcHMuZGVzdHJveSA9IGRlc3Ryb3k7XG4gICAgfSk7XG4gIH1cblxuICBAY29tcHV0ZWRcbiAgZ2V0IGRlc3Ryb3koKTogVHJhbnNwb3J0VHlwZSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuZGVzdHJveTtcbiAgfVxuXG4gIHNldCB2YWxpZGF0ZSh2YWxpZGF0ZTogVHJhbnNwb3J0VHlwZSB8IHVuZGVmaW5lZCkge1xuICAgIHJ1bkluQWN0aW9uKCgpID0+IHtcbiAgICAgIHRoaXMucHJvcHMudmFsaWRhdGUgPSB2YWxpZGF0ZTtcbiAgICB9KTtcbiAgfVxuXG4gIEBjb21wdXRlZFxuICBnZXQgdmFsaWRhdGUoKTogVHJhbnNwb3J0VHlwZSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMudmFsaWRhdGUgfHwgdGhpcy5kYXRhU2V0LnZhbGlkYXRlVXJsO1xuICB9XG5cbiAgc2V0IHN1Ym1pdChzdWJtaXQ6IFRyYW5zcG9ydFR5cGUgfCB1bmRlZmluZWQpIHtcbiAgICBydW5JbkFjdGlvbigoKSA9PiB7XG4gICAgICB0aGlzLnByb3BzLnN1Ym1pdCA9IHN1Ym1pdDtcbiAgICB9KTtcbiAgfVxuXG4gIEBjb21wdXRlZFxuICBnZXQgc3VibWl0KCk6IFRyYW5zcG9ydFR5cGUgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLnByb3BzLnN1Ym1pdCB8fCB0aGlzLmRhdGFTZXQuc3VibWl0VXJsO1xuICB9XG5cbiAgc2V0IGV4cG9ydHMoZXhwb3J0czogVHJhbnNwb3J0VHlwZSB8IHVuZGVmaW5lZCkge1xuICAgIHJ1bkluQWN0aW9uKCgpID0+IHtcbiAgICAgIHRoaXMucHJvcHMuZXhwb3J0cyA9IGV4cG9ydHM7XG4gICAgfSk7XG4gIH1cblxuICBAY29tcHV0ZWRcbiAgZ2V0IGV4cG9ydHMoKTogVHJhbnNwb3J0VHlwZSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuZXhwb3J0cyB8fCB0aGlzLmRhdGFTZXQuZXhwb3J0VXJsO1xuICB9XG5cbiAgc2V0IHRscyh0bHM6IFRyYW5zcG9ydFR5cGUgfCB1bmRlZmluZWQpIHtcbiAgICBydW5JbkFjdGlvbigoKSA9PiB7XG4gICAgICB0aGlzLnByb3BzLnRscyA9IHRscztcbiAgICB9KTtcbiAgfVxuXG4gIEBjb21wdXRlZFxuICBnZXQgdGxzKCk6IFRyYW5zcG9ydFR5cGUgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLnByb3BzLnRscyB8fCB0aGlzLmRhdGFTZXQudGxzVXJsO1xuICB9XG5cbiAgc2V0IGFkYXB0ZXIoYWRhcHRlcjogVHJhbnNwb3J0QWRhcHRlciB8IHVuZGVmaW5lZCkge1xuICAgIHJ1bkluQWN0aW9uKCgpID0+IHtcbiAgICAgIHRoaXMucHJvcHMuYWRhcHRlciA9IGFkYXB0ZXI7XG4gICAgfSk7XG4gIH1cblxuICBAY29tcHV0ZWRcbiAgZ2V0IGFkYXB0ZXIoKTogVHJhbnNwb3J0QWRhcHRlciB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuYWRhcHRlcjtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBUcmFuc3BvcnRQcm9wcyA9IHt9LCBkYXRhU2V0OiBEYXRhU2V0KSB7XG4gICAgcnVuSW5BY3Rpb24oKCkgPT4ge1xuICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgdGhpcy5kYXRhU2V0ID0gZGF0YVNldDtcbiAgICB9KTtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9