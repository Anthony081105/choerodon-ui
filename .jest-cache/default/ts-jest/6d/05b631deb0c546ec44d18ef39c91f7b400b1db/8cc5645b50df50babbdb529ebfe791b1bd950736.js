import { Component } from 'react';
import PropTypes from 'prop-types';
import { get } from 'mobx';
export const defaultMinWidth = 100;
/* eslint-disable react/prefer-stateless-function,react/no-unused-prop-types */
export default class Column extends Component {
}
Column.propTypes = {
    /**
     * 列对照的字段名
     */
    name: PropTypes.string,
    /**
     * 列宽
     * 不推荐给所有列设置宽度，而是给某一列不设置宽度达到自动宽度的效果
     */
    width: PropTypes.number,
    /**
     * 最小列宽
     */
    minWidth: PropTypes.number,
    /**
     * 列内部中最大能撑开的宽度
     */
    innerMaxWidth: PropTypes.number,
    /**
     * 列头
     */
    header: PropTypes.oneOfType([PropTypes.string, PropTypes.element, PropTypes.func]),
    /**
     * 列脚
     */
    footer: PropTypes.oneOfType([PropTypes.string, PropTypes.element, PropTypes.func]),
    /**
     * 单元格渲染回调
     */
    renderer: PropTypes.func,
    /**
     * 编辑器
     */
    editor: PropTypes.oneOfType([PropTypes.element, PropTypes.func, PropTypes.bool]),
    /**
     * 是否锁定
     * 可选值： false | true | 'left' | 'right'
     * @default false
     */
    lock: PropTypes.oneOf(["left" /* left */, "right" /* right */, true, false]),
    /**
     * 文字对齐方式
     * 可选值： 'left' | 'center' | 'right'
     */
    align: PropTypes.oneOf(["left" /* left */, "center" /* center */, "right" /* right */]),
    /**
     * 是否可调整宽度
     * @default true
     */
    resizable: PropTypes.bool,
    /**
     * 是否可排序
     * @default false
     */
    sortable: PropTypes.bool,
    /**
     * 是否可隐藏，设为false时不会出现在列过滤选项中
     * @default true
     */
    hideable: PropTypes.bool,
    /**
     * 是否可排序
     * @default false
     */
    /**
     * 列头提示信息
     */
    help: PropTypes.string,
    /**
     * 显示提示信息的方式
     *
     */
    showHelp: PropTypes.oneOf(["tooltip" /* tooltip */, "newLine" /* newLine */, "none" /* none */]),
    hidden: PropTypes.bool,
    colSpan: PropTypes.number,
    rowSpan: PropTypes.number,
    children: PropTypes.array,
};
Column.defaultProps = {
    hidden: false,
    lock: false,
    resizable: true,
    sortable: false,
    hideable: true,
    minWidth: defaultMinWidth,
    showHelp: "tooltip" /* tooltip */,
};
export function minColumnWidth(col) {
    const hidden = get(col, 'hidden');
    if (hidden) {
        return 0;
    }
    const width = get(col, 'width');
    const min = get(col, 'minWidth');
    const minWidth = min === undefined ? defaultMinWidth : min;
    if (width === undefined) {
        return minWidth;
    }
    return Math.min(width, minWidth);
}
export function columnWidth(col) {
    const hidden = get(col, 'hidden');
    if (hidden) {
        return 0;
    }
    const width = get(col, 'width');
    if (width === undefined) {
        const minWidth = get(col, 'minWidth');
        if (minWidth === undefined) {
            return defaultMinWidth;
        }
        return minWidth;
    }
    return width;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMtcHJvL3RhYmxlL0NvbHVtbi50c3giLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBMEQsTUFBTSxPQUFPLENBQUM7QUFDMUYsT0FBTyxTQUFTLE1BQU0sWUFBWSxDQUFDO0FBQ25DLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFTM0IsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLEdBQUcsQ0FBQztBQXdIbkMsK0VBQStFO0FBQy9FLE1BQU0sQ0FBQyxPQUFPLE9BQU8sTUFBTyxTQUFRLFNBQTJDOztBQUV0RSxnQkFBUyxHQUFHO0lBQ2pCOztPQUVHO0lBQ0gsSUFBSSxFQUFFLFNBQVMsQ0FBQyxNQUFNO0lBQ3RCOzs7T0FHRztJQUNILEtBQUssRUFBRSxTQUFTLENBQUMsTUFBTTtJQUN2Qjs7T0FFRztJQUNILFFBQVEsRUFBRSxTQUFTLENBQUMsTUFBTTtJQUMxQjs7T0FFRztJQUNILGFBQWEsRUFBRSxTQUFTLENBQUMsTUFBTTtJQUMvQjs7T0FFRztJQUNILE1BQU0sRUFBRSxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsRjs7T0FFRztJQUNILE1BQU0sRUFBRSxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsRjs7T0FFRztJQUNILFFBQVEsRUFBRSxTQUFTLENBQUMsSUFBSTtJQUN4Qjs7T0FFRztJQUNILE1BQU0sRUFBRSxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoRjs7OztPQUlHO0lBQ0gsSUFBSSxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUMseUNBQW9DLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztJQUN2RTs7O09BR0c7SUFDSCxLQUFLLEVBQUUsU0FBUyxDQUFDLEtBQUssQ0FBQywrREFBeUQsQ0FBQztJQUNqRjs7O09BR0c7SUFDSCxTQUFTLEVBQUUsU0FBUyxDQUFDLElBQUk7SUFDekI7OztPQUdHO0lBQ0gsUUFBUSxFQUFFLFNBQVMsQ0FBQyxJQUFJO0lBQ3hCOzs7T0FHRztJQUNILFFBQVEsRUFBRSxTQUFTLENBQUMsSUFBSTtJQUN4Qjs7O09BR0c7SUFDSDs7T0FFRztJQUNILElBQUksRUFBRSxTQUFTLENBQUMsTUFBTTtJQUN0Qjs7O09BR0c7SUFDSCxRQUFRLEVBQUUsU0FBUyxDQUFDLEtBQUssQ0FBQyxxRUFBbUQsQ0FBQztJQUM5RSxNQUFNLEVBQUUsU0FBUyxDQUFDLElBQUk7SUFDdEIsT0FBTyxFQUFFLFNBQVMsQ0FBQyxNQUFNO0lBQ3pCLE9BQU8sRUFBRSxTQUFTLENBQUMsTUFBTTtJQUN6QixRQUFRLEVBQUUsU0FBUyxDQUFDLEtBQUs7Q0FDMUIsQ0FBQztBQUVLLG1CQUFZLEdBQUc7SUFDcEIsTUFBTSxFQUFFLEtBQUs7SUFDYixJQUFJLEVBQUUsS0FBSztJQUNYLFNBQVMsRUFBRSxJQUFJO0lBQ2YsUUFBUSxFQUFFLEtBQUs7SUFDZixRQUFRLEVBQUUsSUFBSTtJQUNkLFFBQVEsRUFBRSxlQUFlO0lBQ3pCLFFBQVEseUJBQWtCO0NBQzNCLENBQUM7QUFHSixNQUFNLFVBQVUsY0FBYyxDQUFDLEdBQUc7SUFDaEMsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNsQyxJQUFJLE1BQU0sRUFBRTtRQUNWLE9BQU8sQ0FBQyxDQUFDO0tBQ1Y7SUFDRCxNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2hDLE1BQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDakMsTUFBTSxRQUFRLEdBQUcsR0FBRyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7SUFDM0QsSUFBSSxLQUFLLEtBQUssU0FBUyxFQUFFO1FBQ3ZCLE9BQU8sUUFBUSxDQUFDO0tBQ2pCO0lBQ0QsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztBQUNuQyxDQUFDO0FBRUQsTUFBTSxVQUFVLFdBQVcsQ0FBQyxHQUFHO0lBQzdCLE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDbEMsSUFBSSxNQUFNLEVBQUU7UUFDVixPQUFPLENBQUMsQ0FBQztLQUNWO0lBQ0QsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNoQyxJQUFJLEtBQUssS0FBSyxTQUFTLEVBQUU7UUFDdkIsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLEdBQUcsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUN0QyxJQUFJLFFBQVEsS0FBSyxTQUFTLEVBQUU7WUFDMUIsT0FBTyxlQUFlLENBQUM7U0FDeEI7UUFDRCxPQUFPLFFBQVEsQ0FBQztLQUNqQjtJQUNELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvaHVpaHVhd2svRG9jdW1lbnRzL29wdC9jaG9lcm9kb24tdWkvY29tcG9uZW50cy1wcm8vdGFibGUvQ29sdW1uLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIENvbXBvbmVudFN0YXRlLCBDU1NQcm9wZXJ0aWVzLCBSZWFjdEVsZW1lbnQsIFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBnZXQgfSBmcm9tICdtb2J4JztcbmltcG9ydCBEYXRhU2V0IGZyb20gJy4uL2RhdGEtc2V0L0RhdGFTZXQnO1xuaW1wb3J0IFJlY29yZCBmcm9tICcuLi9kYXRhLXNldC9SZWNvcmQnO1xuaW1wb3J0IHsgRm9ybUZpZWxkUHJvcHMsIFJlbmRlcmVyIH0gZnJvbSAnLi4vZmllbGQvRm9ybUZpZWxkJztcbmltcG9ydCB7IEVsZW1lbnRQcm9wcyB9IGZyb20gJy4uL2NvcmUvVmlld0NvbXBvbmVudCc7XG5pbXBvcnQgeyBDb2x1bW5BbGlnbiwgQ29sdW1uTG9jaywgVGFibGVDb2x1bW5Ub29sdGlwIH0gZnJvbSAnLi9lbnVtJztcbmltcG9ydCB7IFNob3dIZWxwIH0gZnJvbSAnLi4vZmllbGQvZW51bSc7XG5pbXBvcnQgeyBDb21tYW5kcyB9IGZyb20gJy4vVGFibGUnO1xuXG5leHBvcnQgY29uc3QgZGVmYXVsdE1pbldpZHRoID0gMTAwO1xuXG5leHBvcnQgdHlwZSBvbkNlbGxQcm9wcyA9IHsgZGF0YVNldDogRGF0YVNldDsgcmVjb3JkOiBSZWNvcmQ7IGNvbHVtbjogQ29sdW1uUHJvcHM7IH07XG5leHBvcnQgdHlwZSBjb21tYW5kUHJvcHMgPSB7IGRhdGFTZXQ6IERhdGFTZXQ7IHJlY29yZDogUmVjb3JkOyB9O1xuXG5leHBvcnQgaW50ZXJmYWNlIENvbHVtblByb3BzQmFzZSBleHRlbmRzIEVsZW1lbnRQcm9wcyB7XG4gIC8qKlxuICAgKiDliJflr7nnhafnmoTlrZfmrrXlkI1cbiAgICovXG4gIG5hbWU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiDliJflrr1cbiAgICog5LiN5o6o6I2Q57uZ5omA5pyJ5YiX6K6+572u5a695bqm77yM6ICM5piv57uZ5p+Q5LiA5YiX5LiN6K6+572u5a695bqm6L6+5Yiw6Ieq5Yqo5a695bqm55qE5pWI5p6cXG4gICAqL1xuICB3aWR0aD86IG51bWJlcjtcbiAgLyoqXG4gICAqIOacgOWwj+WIl+WuvVxuICAgKi9cbiAgbWluV2lkdGg/OiBudW1iZXI7XG4gIC8qKlxuICAgKiDlhoXpg6jmnIDlpKflrr3luqZcbiAgICovXG4gIGlubmVyTWF4V2lkdGg/OiBudW1iZXI7XG4gIC8qKlxuICAgKiDliJflpLRcbiAgICovXG4gIGhlYWRlcj86IFJlYWN0Tm9kZSB8ICgoZGF0YVNldDogRGF0YVNldCwgbmFtZT86IHN0cmluZykgPT4gUmVhY3ROb2RlKTtcbiAgLyoqXG4gICAqIOWIl+iEmlxuICAgKi9cbiAgZm9vdGVyPzogUmVhY3ROb2RlIHwgKChkYXRhU2V0OiBEYXRhU2V0LCBuYW1lPzogc3RyaW5nKSA9PiBSZWFjdE5vZGUpO1xuICAvKipcbiAgICog5Y2V5YWD5qC85riy5p+T5Zue6LCDXG4gICAqL1xuICByZW5kZXJlcj86IFJlbmRlcmVyO1xuICAvKipcbiAgICog57yW6L6R5ZmoXG4gICAqL1xuICBlZGl0b3I/OlxuICB8IFJlYWN0RWxlbWVudDxGb3JtRmllbGRQcm9wcz5cbiAgfCAoKHJlY29yZDogUmVjb3JkLCBuYW1lPzogc3RyaW5nKSA9PiBSZWFjdEVsZW1lbnQ8Rm9ybUZpZWxkUHJvcHM+IHwgYm9vbGVhbilcbiAgfCBib29sZWFuO1xuICAvKipcbiAgICog5piv5ZCm6ZSB5a6aXG4gICAqIOWPr+mAieWAvO+8miBmYWxzZSB8IHRydWUgfCAnbGVmdCcgfCAncmlnaHQnXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBsb2NrPzogQ29sdW1uTG9jayB8IGJvb2xlYW47XG4gIC8qKlxuICAgKiDmloflrZflr7npvZDmlrnlvI9cbiAgICog5Y+v6YCJ5YC877yaICdsZWZ0JyB8ICdjZW50ZXInIHwgJ3JpZ2h0J1xuICAgKi9cbiAgYWxpZ24/OiBDb2x1bW5BbGlnbjtcbiAgLyoqXG4gICAqIOaYr+WQpuWPr+iwg+aVtOWuveW6plxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICByZXNpemFibGU/OiBib29sZWFuO1xuICAvKipcbiAgICog5piv5ZCm5Y+v5o6S5bqPXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBzb3J0YWJsZT86IGJvb2xlYW47XG4gIC8qKlxuICAgKiDmmK/lkKblj6/pmpDol4/vvIzorr7kuLpmYWxzZeaXtuS4jeS8muWHuueOsOWcqOWIl+i/h+a7pOmAiemhueS4rVxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICBoaWRlYWJsZT86IGJvb2xlYW47XG4gIC8qKlxuICAgKiDliJflpLTlhoXpk77moLflvI9cbiAgICovXG4gIGhlYWRlclN0eWxlPzogQ1NTUHJvcGVydGllcztcbiAgLyoqXG4gICAqIOWIl+WktOagt+W8j+WQjVxuICAgKi9cbiAgaGVhZGVyQ2xhc3NOYW1lPzogc3RyaW5nO1xuICAvKipcbiAgICog5YiX6ISa5YaF6ZO+5qC35byPXG4gICAqL1xuICBmb290ZXJTdHlsZT86IENTU1Byb3BlcnRpZXM7XG4gIC8qKlxuICAgKiDliJfohJrmoLflvI/lkI1cbiAgICovXG4gIGZvb3RlckNsYXNzTmFtZT86IHN0cmluZztcbiAgLyoqXG4gICAqIOWIl+WktOaPkOekuuS/oeaBr1xuICAgKi9cbiAgaGVscD86IHN0cmluZztcbiAgLyoqXG4gICAqIOaYvuekuuaPkOekuuS/oeaBr+eahOaWueW8j1xuICAgKlxuICAgKi9cbiAgc2hvd0hlbHA/OiBTaG93SGVscDtcbiAgLyoqXG4gICAqIOeUqHRvb2x0aXDmmL7npLrljZXlhYPmoLzlhoXlrrlcbiAgICog5Y+v6YCJ5YC877yaYG5vbmVgIGBhbHdheXNgIGBvdmVyZmxvd2BcbiAgICovXG4gIHRvb2x0aXA/OiBUYWJsZUNvbHVtblRvb2x0aXA7XG4gIC8qKlxuICAgKiDorr7nva7ljZXlhYPmoLzlsZ7mgKdcbiAgICogQHBhcmFtIHtvbkNlbGxQcm9wc30gcHJvcHNcbiAgICogQHJldHVybiB7T2JqZWN0fSDljZXlhYPmoLzlsZ7mgKdcbiAgICovXG4gIG9uQ2VsbD86IChwcm9wczogb25DZWxsUHJvcHMpID0+IG9iamVjdDtcbiAgLyoqXG4gICAqIOihjOaTjeS9nOaMiemSrlxuICAgKiDlj6/pgInlgLzvvJpgZWRpdGAgYGRlbGV0ZWAg5oiWIOiHquWumuS5ieaMiemSrlxuICAgKiDnu5nlhoXnva7mjInpkq7liqDlsZ7mgKfvvJpjb21tYW5kPXtbWydlZGl0JywgeyBjb2xvcjogJ3JlZCcgfV0sIC4uLl19XG4gICAqL1xuICBjb21tYW5kPzogQ29tbWFuZHNbXSB8ICgocHJvcHM6IGNvbW1hbmRQcm9wcykgPT4gQ29tbWFuZHNbXSk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29sdW1uUHJvcHMgZXh0ZW5kcyBDb2x1bW5Qcm9wc0Jhc2Uge1xuICBjaGlsZHJlbj86IENvbHVtblByb3BzW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29sdW1uUHJvcHNJbm5lciBleHRlbmRzIENvbHVtblByb3BzQmFzZSB7XG4gIGNoaWxkcmVuPzogUmVhY3RFbGVtZW50PENvbHVtblByb3BzPltdIHwgUmVhY3RFbGVtZW50PENvbHVtblByb3BzPjtcbn1cblxuLyogZXNsaW50LWRpc2FibGUgcmVhY3QvcHJlZmVyLXN0YXRlbGVzcy1mdW5jdGlvbixyZWFjdC9uby11bnVzZWQtcHJvcC10eXBlcyAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29sdW1uIGV4dGVuZHMgQ29tcG9uZW50PENvbHVtblByb3BzSW5uZXIsIENvbXBvbmVudFN0YXRlPiB7XG5cbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICAvKipcbiAgICAgKiDliJflr7nnhafnmoTlrZfmrrXlkI1cbiAgICAgKi9cbiAgICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIC8qKlxuICAgICAqIOWIl+WuvVxuICAgICAqIOS4jeaOqOiNkOe7meaJgOacieWIl+iuvue9ruWuveW6pu+8jOiAjOaYr+e7meafkOS4gOWIl+S4jeiuvue9ruWuveW6pui+vuWIsOiHquWKqOWuveW6pueahOaViOaenFxuICAgICAqL1xuICAgIHdpZHRoOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIC8qKlxuICAgICAqIOacgOWwj+WIl+WuvVxuICAgICAqL1xuICAgIG1pbldpZHRoOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIC8qKlxuICAgICAqIOWIl+WGhemDqOS4reacgOWkp+iDveaSkeW8gOeahOWuveW6plxuICAgICAqL1xuICAgIGlubmVyTWF4V2lkdGg6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgLyoqXG4gICAgICog5YiX5aS0XG4gICAgICovXG4gICAgaGVhZGVyOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuZWxlbWVudCwgUHJvcFR5cGVzLmZ1bmNdKSxcbiAgICAvKipcbiAgICAgKiDliJfohJpcbiAgICAgKi9cbiAgICBmb290ZXI6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5lbGVtZW50LCBQcm9wVHlwZXMuZnVuY10pLFxuICAgIC8qKlxuICAgICAqIOWNleWFg+agvOa4suafk+Wbnuiwg1xuICAgICAqL1xuICAgIHJlbmRlcmVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgICAvKipcbiAgICAgKiDnvJbovpHlmahcbiAgICAgKi9cbiAgICBlZGl0b3I6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5lbGVtZW50LCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLmJvb2xdKSxcbiAgICAvKipcbiAgICAgKiDmmK/lkKbplIHlrppcbiAgICAgKiDlj6/pgInlgLzvvJogZmFsc2UgfCB0cnVlIHwgJ2xlZnQnIHwgJ3JpZ2h0J1xuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG4gICAgbG9jazogUHJvcFR5cGVzLm9uZU9mKFtDb2x1bW5Mb2NrLmxlZnQsIENvbHVtbkxvY2sucmlnaHQsIHRydWUsIGZhbHNlXSksXG4gICAgLyoqXG4gICAgICog5paH5a2X5a+56b2Q5pa55byPXG4gICAgICog5Y+v6YCJ5YC877yaICdsZWZ0JyB8ICdjZW50ZXInIHwgJ3JpZ2h0J1xuICAgICAqL1xuICAgIGFsaWduOiBQcm9wVHlwZXMub25lT2YoW0NvbHVtbkFsaWduLmxlZnQsIENvbHVtbkFsaWduLmNlbnRlciwgQ29sdW1uQWxpZ24ucmlnaHRdKSxcbiAgICAvKipcbiAgICAgKiDmmK/lkKblj6/osIPmlbTlrr3luqZcbiAgICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgICovXG4gICAgcmVzaXphYmxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICAvKipcbiAgICAgKiDmmK/lkKblj6/mjpLluo9cbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuICAgIHNvcnRhYmxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICAvKipcbiAgICAgKiDmmK/lkKblj6/pmpDol4/vvIzorr7kuLpmYWxzZeaXtuS4jeS8muWHuueOsOWcqOWIl+i/h+a7pOmAiemhueS4rVxuICAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAgKi9cbiAgICBoaWRlYWJsZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgLyoqXG4gICAgICog5piv5ZCm5Y+v5o6S5bqPXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiDliJflpLTmj5DnpLrkv6Hmga9cbiAgICAgKi9cbiAgICBoZWxwOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIC8qKlxuICAgICAqIOaYvuekuuaPkOekuuS/oeaBr+eahOaWueW8j1xuICAgICAqXG4gICAgICovXG4gICAgc2hvd0hlbHA6IFByb3BUeXBlcy5vbmVPZihbU2hvd0hlbHAudG9vbHRpcCwgU2hvd0hlbHAubmV3TGluZSwgU2hvd0hlbHAubm9uZV0pLFxuICAgIGhpZGRlbjogUHJvcFR5cGVzLmJvb2wsXG4gICAgY29sU3BhbjogUHJvcFR5cGVzLm51bWJlcixcbiAgICByb3dTcGFuOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMuYXJyYXksXG4gIH07XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBoaWRkZW46IGZhbHNlLFxuICAgIGxvY2s6IGZhbHNlLFxuICAgIHJlc2l6YWJsZTogdHJ1ZSxcbiAgICBzb3J0YWJsZTogZmFsc2UsXG4gICAgaGlkZWFibGU6IHRydWUsXG4gICAgbWluV2lkdGg6IGRlZmF1bHRNaW5XaWR0aCxcbiAgICBzaG93SGVscDogU2hvd0hlbHAudG9vbHRpcCxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1pbkNvbHVtbldpZHRoKGNvbCkge1xuICBjb25zdCBoaWRkZW4gPSBnZXQoY29sLCAnaGlkZGVuJyk7XG4gIGlmIChoaWRkZW4pIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICBjb25zdCB3aWR0aCA9IGdldChjb2wsICd3aWR0aCcpO1xuICBjb25zdCBtaW4gPSBnZXQoY29sLCAnbWluV2lkdGgnKTtcbiAgY29uc3QgbWluV2lkdGggPSBtaW4gPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRNaW5XaWR0aCA6IG1pbjtcbiAgaWYgKHdpZHRoID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gbWluV2lkdGg7XG4gIH1cbiAgcmV0dXJuIE1hdGgubWluKHdpZHRoLCBtaW5XaWR0aCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb2x1bW5XaWR0aChjb2wpIHtcbiAgY29uc3QgaGlkZGVuID0gZ2V0KGNvbCwgJ2hpZGRlbicpO1xuICBpZiAoaGlkZGVuKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgY29uc3Qgd2lkdGggPSBnZXQoY29sLCAnd2lkdGgnKTtcbiAgaWYgKHdpZHRoID09PSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCBtaW5XaWR0aCA9IGdldChjb2wsICdtaW5XaWR0aCcpO1xuICAgIGlmIChtaW5XaWR0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZGVmYXVsdE1pbldpZHRoO1xuICAgIH1cbiAgICByZXR1cm4gbWluV2lkdGg7XG4gIH1cbiAgcmV0dXJuIHdpZHRoO1xufVxuIl0sInZlcnNpb24iOjN9