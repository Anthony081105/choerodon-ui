function on(eventName, fn, el, useCapture) {
    if (el) {
        if (el.addEventListener) {
            el.addEventListener(eventName, fn, useCapture);
        }
        else if (el.attachEvent) {
            el.attachEvent(`on${eventName}`, fn);
        }
    }
}
function off(eventName, fn, el, useCapture) {
    if (el) {
        if (el.removeEventListener) {
            el.removeEventListener(eventName, fn, useCapture);
        }
        else if (el.attachEvent) {
            el.detachEvent(`on${eventName}`, fn);
        }
    }
}
export default class EventManager {
    constructor(el) {
        this.events = {};
        this.el = el;
    }
    addEventListener(eventName, fn, useCapture = false) {
        eventName = eventName.toLowerCase();
        const events = this.events[eventName] || [];
        const index = events.findIndex(([event]) => event === fn);
        if (index === -1) {
            events.push([fn, useCapture]);
            this.events[eventName] = events;
            on(eventName, fn, this.el, useCapture);
        }
        return this;
    }
    removeEventListener(eventName, fn, useCapture = false) {
        eventName = eventName.toLowerCase();
        const events = this.events[eventName];
        if (events) {
            if (fn) {
                const index = events.findIndex(([event]) => event === fn);
                if (index !== -1) {
                    events.splice(index, 1);
                }
                off(eventName, fn, this.el, useCapture);
            }
            else {
                this.events[eventName] = this.el
                    ? (this.events[eventName] || []).filter(([event, capture]) => {
                        off(eventName, event, this.el, capture);
                        return false;
                    })
                    : [];
            }
        }
        return this;
    }
    fireEvent(eventName, ...rest) {
        const events = this.events[eventName.toLowerCase()];
        return events
            ? Promise.all(events.map(([fn]) => fn(...rest))).then(all => all.every(result => result !== false))
            : Promise.resolve(true);
    }
    clear() {
        if (this.el) {
            Object.keys(this.events).forEach(eventName => this.removeEventListener(eventName));
        }
        this.events = {};
        return this;
    }
}
export function preventDefault(e) {
    e.preventDefault();
}
export function stopPropagation(e) {
    e.stopPropagation();
}
export function stopEvent(e) {
    preventDefault(e);
    stopPropagation(e);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvX3V0aWwvRXZlbnRNYW5hZ2VyLnRzeCIsIm1hcHBpbmdzIjoiQUFBQSxTQUFTLEVBQUUsQ0FBQyxTQUFpQixFQUFFLEVBQVksRUFBRSxFQUFRLEVBQUUsVUFBb0I7SUFDekUsSUFBSSxFQUFFLEVBQUU7UUFDTixJQUFJLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRTtZQUN2QixFQUFFLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLEVBQUUsRUFBRSxVQUFVLENBQUMsQ0FBQztTQUNoRDthQUFNLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRTtZQUN6QixFQUFFLENBQUMsV0FBVyxDQUFDLEtBQUssU0FBUyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDdEM7S0FDRjtBQUNILENBQUM7QUFFRCxTQUFTLEdBQUcsQ0FBQyxTQUFpQixFQUFFLEVBQVksRUFBRSxFQUFRLEVBQUUsVUFBb0I7SUFDMUUsSUFBSSxFQUFFLEVBQUU7UUFDTixJQUFJLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRTtZQUMxQixFQUFFLENBQUMsbUJBQW1CLENBQUMsU0FBUyxFQUFFLEVBQUUsRUFBRSxVQUFVLENBQUMsQ0FBQztTQUNuRDthQUFNLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRTtZQUN6QixFQUFFLENBQUMsV0FBVyxDQUFDLEtBQUssU0FBUyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDdEM7S0FDRjtBQUNILENBQUM7QUFJRCxNQUFNLENBQUMsT0FBTyxPQUFPLFlBQVk7SUFLL0IsWUFBWSxFQUFRO1FBSnBCLFdBQU0sR0FBdUMsRUFBRSxDQUFDO1FBSzlDLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO0lBQ2YsQ0FBQztJQUVELGdCQUFnQixDQUFDLFNBQWlCLEVBQUUsRUFBWSxFQUFFLGFBQXNCLEtBQUs7UUFDM0UsU0FBUyxHQUFHLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNwQyxNQUFN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LENBQUM7U0FDcEY7UUFDRCxJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUNqQixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7Q0FDRjtBQUVELE1BQU0sVUFBVSxjQUFjLENBQUMsQ0FBQztJQUM5QixDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDckIsQ0FBQztBQUVELE1BQU0sVUFBVSxlQUFlLENBQUMsQ0FBQztJQUMvQixDQUFDLENBQUMsZUFBZSxFQUFFLENBQUM7QUFDdEIsQ0FBQztBQUVELE1BQU0sVUFBVSxTQUFTLENBQUMsQ0FBQztJQUN6QixjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEIsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3JCLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvX3V0aWwvRXZlbnRNYW5hZ2VyLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBvbihldmVudE5hbWU6IHN0cmluZywgZm46IEZ1bmN0aW9uLCBlbD86IGFueSwgdXNlQ2FwdHVyZT86IGJvb2xlYW4pOiB2b2lkIHtcbiAgaWYgKGVsKSB7XG4gICAgaWYgKGVsLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBmbiwgdXNlQ2FwdHVyZSk7XG4gICAgfSBlbHNlIGlmIChlbC5hdHRhY2hFdmVudCkge1xuICAgICAgZWwuYXR0YWNoRXZlbnQoYG9uJHtldmVudE5hbWV9YCwgZm4pO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBvZmYoZXZlbnROYW1lOiBzdHJpbmcsIGZuOiBGdW5jdGlvbiwgZWw/OiBhbnksIHVzZUNhcHR1cmU/OiBib29sZWFuKTogdm9pZCB7XG4gIGlmIChlbCkge1xuICAgIGlmIChlbC5yZW1vdmVFdmVudExpc3RlbmVyKSB7XG4gICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgZm4sIHVzZUNhcHR1cmUpO1xuICAgIH0gZWxzZSBpZiAoZWwuYXR0YWNoRXZlbnQpIHtcbiAgICAgIGVsLmRldGFjaEV2ZW50KGBvbiR7ZXZlbnROYW1lfWAsIGZuKTtcbiAgICB9XG4gIH1cbn1cblxudHlwZSBoYW5kbGVyID0gW0Z1bmN0aW9uLCBib29sZWFuXTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXZlbnRNYW5hZ2VyIHtcbiAgZXZlbnRzOiB7IFtldmVudE5hbWU6IHN0cmluZ106IGhhbmRsZXJbXSB9ID0ge307XG5cbiAgZWw/OiBhbnk7XG5cbiAgY29uc3RydWN0b3IoZWw/OiBhbnkpIHtcbiAgICB0aGlzLmVsID0gZWw7XG4gIH1cblxuICBhZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZTogc3RyaW5nLCBmbjogRnVuY3Rpb24sIHVzZUNhcHR1cmU6IGJvb2xlYW4gPSBmYWxzZSk6IEV2ZW50TWFuYWdlciB7XG4gICAgZXZlbnROYW1lID0gZXZlbnROYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgY29uc3QgZXZlbnRzOiBoYW5kbGVyW10gPSB0aGlzLmV2ZW50c1tldmVudE5hbWVdIHx8IFtdO1xuICAgIGNvbnN0IGluZGV4ID0gZXZlbnRzLmZpbmRJbmRleCgoW2V2ZW50XSkgPT4gZXZlbnQgPT09IGZuKTtcbiAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICBldmVudHMucHVzaChbZm4sIHVzZUNhcHR1cmVdKTtcbiAgICAgIHRoaXMuZXZlbnRzW2V2ZW50TmFtZV0gPSBldmVudHM7XG4gICAgICBvbihldmVudE5hbWUsIGZuLCB0aGlzLmVsLCB1c2VDYXB0dXJlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICByZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZTogc3RyaW5nLCBmbj86IEZ1bmN0aW9uLCB1c2VDYXB0dXJlOiBib29sZWFuID0gZmFsc2UpOiBFdmVudE1hbmFnZXIge1xuICAgIGV2ZW50TmFtZSA9IGV2ZW50TmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIGNvbnN0IGV2ZW50czogaGFuZGxlcltdID0gdGhpcy5ldmVudHNbZXZlbnROYW1lXTtcbiAgICBpZiAoZXZlbnRzKSB7XG4gICAgICBpZiAoZm4pIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBldmVudHMuZmluZEluZGV4KChbZXZlbnRdKSA9PiBldmVudCA9PT0gZm4pO1xuICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgZXZlbnRzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgb2ZmKGV2ZW50TmFtZSwgZm4sIHRoaXMuZWwsIHVzZUNhcHR1cmUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5ldmVudHNbZXZlbnROYW1lXSA9IHRoaXMuZWxcbiAgICAgICAgICA/ICh0aGlzLmV2ZW50c1tldmVudE5hbWVdIHx8IFtdKS5maWx0ZXIoKFtldmVudCwgY2FwdHVyZV0pID0+IHtcbiAgICAgICAgICAgICAgb2ZmKGV2ZW50TmFtZSwgZXZlbnQsIHRoaXMuZWwsIGNhcHR1cmUpO1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIDogW107XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZmlyZUV2ZW50KGV2ZW50TmFtZTogc3RyaW5nLCAuLi5yZXN0OiBhbnlbXSk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGNvbnN0IGV2ZW50czogaGFuZGxlcltdID0gdGhpcy5ldmVudHNbZXZlbnROYW1lLnRvTG93ZXJDYXNlKCldO1xuICAgIHJldHVybiBldmVudHNcbiAgICAgID8gUHJvbWlzZS5hbGwoZXZlbnRzLm1hcCgoW2ZuXSkgPT4gZm4oLi4ucmVzdCkpKS50aGVuKGFsbCA9PlxuICAgICAgICAgIGFsbC5ldmVyeShyZXN1bHQgPT4gcmVzdWx0ICE9PSBmYWxzZSksXG4gICAgICAgIClcbiAgICAgIDogUHJvbWlzZS5yZXNvbHZlKHRydWUpO1xuICB9XG5cbiAgY2xlYXIoKTogRXZlbnRNYW5hZ2VyIHtcbiAgICBpZiAodGhpcy5lbCkge1xuICAgICAgT2JqZWN0LmtleXModGhpcy5ldmVudHMpLmZvckVhY2goZXZlbnROYW1lID0+IHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUpKTtcbiAgICB9XG4gICAgdGhpcy5ldmVudHMgPSB7fTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJldmVudERlZmF1bHQoZSkge1xuICBlLnByZXZlbnREZWZhdWx0KCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdG9wUHJvcGFnYXRpb24oZSkge1xuICBlLnN0b3BQcm9wYWdhdGlvbigpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RvcEV2ZW50KGUpIHtcbiAgcHJldmVudERlZmF1bHQoZSk7XG4gIHN0b3BQcm9wYWdhdGlvbihlKTtcbn1cbiJdLCJ2ZXJzaW9uIjozfQ==