import { __decorate } from "tslib";
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { observer } from 'mobx-react';
import { action, computed } from 'mobx';
import classes from 'component-classes';
import raf from 'raf';
import { Droppable, Draggable, } from 'react-beautiful-dnd';
import { pxToRem } from 'choerodon-ui/lib/_util/UnitConvertor';
import ReactResizeObserver from 'choerodon-ui/lib/_util/resizeObserver';
import { isFunction } from 'lodash';
import TableContext from './TableContext';
import TableRow from './TableRow';
import ExpandedRow from './ExpandedRow';
import autobind from '../_util/autobind';
import { instance } from './Table';
import { findFirstFocusableInvalidElement } from './utils';
let TableTBody = class TableTBody extends Component {
    get leafColumns() {
        const { tableStore } = this.context;
        const { lock } = this.props;
        if (lock === 'right') {
            return tableStore.rightLeafColumns.filter(({ hidden }) => !hidden);
        }
        if (lock) {
            return tableStore.leftLeafColumns.filter(({ hidden }) => !hidden);
        }
        return tableStore.leafColumns.filter(({ hidden }) => !hidden);
    }
    get leafColumnsBody() {
        const { tableStore } = this.context;
        return tableStore.leafColumns.filter(({ hidden }) => !hidden);
    }
    handleResize() {
        if (this.nextFrameActionId !== undefined) {
            raf.cancel(this.nextFrameActionId);
        }
        this.nextFrameActionId = raf(this.syncBodyHeight);
    }
    saveRef(node) {
        this.tableBody = node;
        this.handleResize();
    }
    /**
     * 虚拟滚动计算可视化数据
     */
    processData() {
        const { tableStore: { data, lastScrollTop = 0, height, rowHeight }, } = this.context;
        const startIndex = Math.max(Math.round((lastScrollTop / rowHeight) - 3), 0);
        const endIndex = Math.min(Math.round((lastScrollTop + height) / rowHeight + 2), data.length);
        return data.slice(startIndex, endIndex);
    }
    render() {
        const { prefixCls, lock, indentSize, dragColumnAlign } = this.props;
        const { leafColumns, leafColumnsBody } = this;
        const { tableStore: { data, dragColumnAlign: propsDragColumnAlign, props: { virtual, rowDragRender = {} }, dataSet, height, dragRow }, } = this.context;
        const { droppableProps, renderClone } = rowDragRender;
        const rowData = virtual && height ? this.processData() : data;
        const rows = data.length
            ? this.getRows(rowData, leafColumns, true, lock)
            : this.getEmptyRow(leafColumns, lock);
        const body = (React.createElement(Droppable, Object.assign({ droppableId: "table", key: "table", isDropDisabled: (dragColumnAlign || propsDragColumnAlign) ? !(dragColumnAlign && propsDragColumnAlign) : !dragRow, renderClone: (provided, snapshot, rubric) => {
                const record = dataSet.get(rubric.source.index);
                if (renderClone && isFunction(renderClone)) {
                    return renderClone({
                        provided,
                        snapshot,
                        key: record.id,
                        hidden: false,
                        lock: false,
                        indentSize,
                        prefixCls,
                        columns: leafColumnsBody,
                        record,
                        index: record.id,
                        dragColumnAlign,
                        rubric,
                    });
                }
                return (React.createElement(TableRow, { provided: provided, snapshot: snapshot, key: record.id, hidden: false, lock: false, indentSize: indentSize, prefixCls: prefixCls, columns: leafColumnsBody, record: record, index: record.id, dragColumnAlign: dragColumnAlign }));
            }, getContainerForClone: () => instance().tbody }, droppableProps), (droppableProvided) => (React.createElement("tbody", Object.assign({ ref: (ref) => {
                if (ref) {
                    this.saveRef(ref);
                    droppableProvided.innerRef(ref);
                }
            } }, droppableProvided.droppableProps, { className: `${prefixCls}-tbody` }),
            rows,
            droppableProvided.placeholder))));
        return lock ? (body) : (React.createElement(ReactResizeObserver, { onResize: this.handleResize, resizeProp: "height" }, body));
    }
    componentWillMount() {
        this.processDataSetListener(true);
    }
    componentWillUnmount() {
        this.processDataSetListener(false);
    }
    processDataSetListener(flag) {
        const { tableStore: { dataSet } } = this.context;
        if (dataSet) {
            const handler = flag ? dataSet.addEventListener : dataSet.removeEventListener;
            handler.call(dataSet, 'validate', this.handleDataSetValidate);
        }
    }
    async handleDataSetValidate({ result }) {
        if (!await result) {
            const cell = this.tableBody ? findFirstFocusableInvalidElement(this.tableBody) : null;
            if (cell) {
                cell.focus();
            }
        }
    }
    componentDidUpdate() {
        const { lock, prefixCls } = this.props;
        if (!lock) {
            const { tableStore: { node }, } = this.context;
            if (classes(node.wrapper).has(`${prefixCls}-focused`) &&
                !node.wrapper.contains(document.activeElement)) {
                node.focus();
            }
        }
    }
    getRows(records, columns, expanded, lock) {
        return records.map((record, index) => this.getRow(columns, record, index, expanded, lock));
    }
    getEmptyRow(columns, lock) {
        const { tableStore: { dataSet, emptyText, width }, } = this.context;
        const { prefixCls } = this.props;
        const style = width
            ? {
                marginLeft: pxToRem(width / 2),
            }
            : {
                transform: 'none',
                display: 'inline-block',
            };
        const tdStyle = width ? {} : { textAlign: 'center' };
        return (React.createElement("tr", { className: `${prefixCls}-empty-row` },
            React.createElement("td", { colSpan: columns.length, style: tdStyle },
                React.createElement("div", { style: style }, !lock && dataSet.status === "ready" /* ready */ && emptyText))));
    }
    renderExpandedRows(columns, record, isExpanded, lock) {
        return this.getRows(record.children || [], columns, isExpanded, lock);
    }
    getRow(columns, record, index, expanded, lock) {
        const { prefixCls, indentSize, dragColumnAlign } = this.props;
        const { tableStore: { isTree, dragColumnAlign: propsDragColumnAlign, props: { rowDragRender = {} }, dragRow }, } = this.context;
        const { draggableProps } = rowDragRender;
        const children = isTree && (React.createElement(ExpandedRow, { record: record, columns: columns, lock: lock }, this.renderExpandedRows));
        return (React.createElement(Draggable, { draggableId: record.key.toString(), index: index, isDragDisabled: (dragColumnAlign || propsDragColumnAlign) ? !(dragColumnAlign && propsDragColumnAlign) : !dragRow, key: record.key }, (provided, snapshot) => (React.createElement(TableRow, Object.assign({ provided: provided, snapshot: snapshot, key: record.key, hidden: !expanded, lock: lock, indentSize: indentSize, prefixCls: prefixCls, columns: columns, record: record, index: index, dragColumnAlign: dragColumnAlign }, draggableProps), children))));
    }
    syncBodyHeight() {
        const { tableStore } = this.context;
        if (this.tableBody && !tableStore.hidden) {
            tableStore.bodyHeight = this.tableBody.offsetHeight;
        }
    }
};
TableTBody.displayName = 'TableTBody';
TableTBody.propTypes = {
    lock: PropTypes.oneOfType([
        PropTypes.bool,
        PropTypes.oneOf(["right" /* right */, "left" /* left */]),
    ]),
    dragColumnAlign: PropTypes.oneOf(["right" /* right */, "left" /* left */]),
    prefixCls: PropTypes.string,
    indentSize: PropTypes.number.isRequired,
};
TableTBody.contextType = TableContext;
__decorate([
    computed
], TableTBody.prototype, "leafColumns", null);
__decorate([
    computed
], TableTBody.prototype, "leafColumnsBody", null);
__decorate([
    autobind
], TableTBody.prototype, "handleResize", null);
__decorate([
    autobind
], TableTBody.prototype, "saveRef", null);
__decorate([
    autobind
], TableTBody.prototype, "processData", null);
__decorate([
    autobind
], TableTBody.prototype, "handleDataSetValidate", null);
__decorate([
    autobind
], TableTBody.prototype, "renderExpandedRows", null);
__decorate([
    autobind,
    action
], TableTBody.prototype, "syncBodyHeight", null);
TableTBody = __decorate([
    observer
], TableTBody);
export default TableTBody;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,