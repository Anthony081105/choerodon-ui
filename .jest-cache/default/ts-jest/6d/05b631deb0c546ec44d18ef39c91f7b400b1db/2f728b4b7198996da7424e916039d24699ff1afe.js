import React, { PureComponent } from 'react';
import { getProPrefixCls } from 'choerodon-ui/lib/configure';
import FilterSelect from './FilterSelect';
import ColumnFilter from './ColumnFilter';
import { $l } from '../../locale-context';
export default class TableFilterBar extends PureComponent {
    renderSuffix() {
        const { prefixCls } = this.props;
        return React.createElement(ColumnFilter, { prefixCls: prefixCls });
    }
    getButtons() {
        const { prefixCls, buttons } = this.props;
        if (buttons.length) {
            return (React.createElement("div", { key: "toolbar", className: `${prefixCls}-toolbar` },
                React.createElement("span", { className: `${prefixCls}-toolbar-button-group` }, buttons)));
        }
    }
    render() {
        const { prefixCls, dataSet, queryDataSet, paramName, placeholder, pagination } = this.props;
        const buttons = this.getButtons();
        return [
            buttons,
            pagination,
            React.createElement(FilterSelect, { key: "filter", prefixCls: `${prefixCls}-filter-select`, optionDataSet: dataSet, queryDataSet: queryDataSet, placeholder: placeholder, suffix: this.renderSuffix(), paramName: paramName }),
        ];
    }
}
TableFilterBar.defaultProps = {
    prefixCls: getProPrefixCls('table'),
    paramName: 'params',
    placeholder: $l('Table', 'filter_bar_placeholder'),
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMtcHJvL3RhYmxlL3F1ZXJ5LWJhci9UYWJsZUZpbHRlckJhci50c3giLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLEVBQUUsRUFBRSxhQUFhLEVBQTJCLE1BQU0sT0FBTyxDQUFDO0FBQ3RFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUM3RCxPQUFPLFlBQVksTUFBTSxnQkFBZ0IsQ0FBQztBQUMxQyxPQUFPLFlBQVksTUFBTSxnQkFBZ0IsQ0FBQztBQUUxQyxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFjMUMsTUFBTSxDQUFDLE9BQU8sT0FBTyxjQUFlLFNBQVEsYUFBa0M7SUFPNUUsWUFBWTtRQUNWLE1BQU0sRUFBRSxTQUFTLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ2pDLE9BQU8sb0JBQUMsWUFBWSxJQUFDLFNBQVMsRUFBRSxTQUFTLEdBQUksQ0FBQztJQUNoRCxDQUFDO0lBRUQsVUFBVTtRQUNSLE1BQU0sRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUMxQyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUU7WUFDbEIsT0FBTyxDQUNMLDZCQUFLLEdBQUcsRUFBQyxTQUFTLEVBQUMsU0FBUyxFQUFFLEdBQUcsU0FBUyxVQUFVO2dCQUNsRCw4QkFBTSxTQUFTLEVBQUUsR0FBRyxTQUFTLHVCQUF1QixJQUFHLE9BQU8sQ0FBUSxDQUNsRSxDQUNQLENBQUM7U0FDSDtJQUNILENBQUM7SUFFRCxNQUFNO1FBQ0osTUFBTSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUM1RixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDbEMsT0FBTztZQUNMLE9BQU87WUFDUCxVQUFVO1lBQ1Ysb0JBQUMsWUFBWSxJQUNYLEdBQUcsRUFBQyxRQUFRLEVBQ1osU0FBUyxFQUFFLEdBQUcsU0FBUyxnQkFBZ0IsRUFDdkMsYUFBYSxFQUFFLE9BQU8sRUFDdEIsWUFBWSxFQUFFLFlBQVksRUFDMUIsV0FBVyxFQUFFLFdBQVcsRUFDeEIsTUFBTSxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsRUFDM0IsU0FBUyxFQUFFLFNBQVMsR0FDcEI7U0FDSCxDQUFDO0lBQ0osQ0FBQzs7QUF0Q00sMkJBQVksR0FBRztJQUNwQixTQUFTLEVBQUUsZUFBZSxDQUFDLE9BQU8sQ0FBQztJQUNuQyxTQUFTLEVBQUUsUUFBUTtJQUNuQixXQUFXLEVBQUUsRUFBRSxDQUFDLE9BQU8sRUFBRSx3QkFBd0IsQ0FBQztDQUNuRCxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9odWlodWF3ay9Eb2N1bWVudHMvb3B0L2Nob2Vyb2Rvbi11aS9jb21wb25lbnRzLXByby90YWJsZS9xdWVyeS1iYXIvVGFibGVGaWx0ZXJCYXIudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBQdXJlQ29tcG9uZW50LCBSZWFjdEVsZW1lbnQsIFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGdldFByb1ByZWZpeENscyB9IGZyb20gJ2Nob2Vyb2Rvbi11aS9saWIvY29uZmlndXJlJztcbmltcG9ydCBGaWx0ZXJTZWxlY3QgZnJvbSAnLi9GaWx0ZXJTZWxlY3QnO1xuaW1wb3J0IENvbHVtbkZpbHRlciBmcm9tICcuL0NvbHVtbkZpbHRlcic7XG5pbXBvcnQgRGF0YVNldCBmcm9tICcuLi8uLi9kYXRhLXNldC9EYXRhU2V0JztcbmltcG9ydCB7ICRsIH0gZnJvbSAnLi4vLi4vbG9jYWxlLWNvbnRleHQnO1xuaW1wb3J0IHsgQnV0dG9uUHJvcHMgfSBmcm9tICcuLi8uLi9idXR0b24vQnV0dG9uJztcbmltcG9ydCB7IFBhZ2luYXRpb25Qcm9wcyB9IGZyb20gJy4uLy4uL3BhZ2luYXRpb24vUGFnaW5hdGlvbic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmlsdGVyQmFyUHJvcHMge1xuICBwcmVmaXhDbHM/OiBzdHJpbmc7XG4gIHBsYWNlaG9sZGVyPzogc3RyaW5nO1xuICBkYXRhU2V0OiBEYXRhU2V0O1xuICBxdWVyeURhdGFTZXQ/OiBEYXRhU2V0O1xuICBwYXJhbU5hbWU6IHN0cmluZztcbiAgYnV0dG9uczogUmVhY3RFbGVtZW50PEJ1dHRvblByb3BzPltdO1xuICBwYWdpbmF0aW9uPzogUmVhY3RFbGVtZW50PFBhZ2luYXRpb25Qcm9wcz47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRhYmxlRmlsdGVyQmFyIGV4dGVuZHMgUHVyZUNvbXBvbmVudDxGaWx0ZXJCYXJQcm9wcywgYW55PiB7XG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgcHJlZml4Q2xzOiBnZXRQcm9QcmVmaXhDbHMoJ3RhYmxlJyksXG4gICAgcGFyYW1OYW1lOiAncGFyYW1zJyxcbiAgICBwbGFjZWhvbGRlcjogJGwoJ1RhYmxlJywgJ2ZpbHRlcl9iYXJfcGxhY2Vob2xkZXInKSxcbiAgfTtcblxuICByZW5kZXJTdWZmaXgoKSB7XG4gICAgY29uc3QgeyBwcmVmaXhDbHMgfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIDxDb2x1bW5GaWx0ZXIgcHJlZml4Q2xzPXtwcmVmaXhDbHN9IC8+O1xuICB9XG5cbiAgZ2V0QnV0dG9ucygpOiBSZWFjdE5vZGUge1xuICAgIGNvbnN0IHsgcHJlZml4Q2xzLCBidXR0b25zIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmIChidXR0b25zLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBrZXk9XCJ0b29sYmFyXCIgY2xhc3NOYW1lPXtgJHtwcmVmaXhDbHN9LXRvb2xiYXJgfT5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9e2Ake3ByZWZpeENsc30tdG9vbGJhci1idXR0b24tZ3JvdXBgfT57YnV0dG9uc308L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBwcmVmaXhDbHMsIGRhdGFTZXQsIHF1ZXJ5RGF0YVNldCwgcGFyYW1OYW1lLCBwbGFjZWhvbGRlciwgcGFnaW5hdGlvbiB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBidXR0b25zID0gdGhpcy5nZXRCdXR0b25zKCk7XG4gICAgcmV0dXJuIFtcbiAgICAgIGJ1dHRvbnMsXG4gICAgICBwYWdpbmF0aW9uLFxuICAgICAgPEZpbHRlclNlbGVjdFxuICAgICAgICBrZXk9XCJmaWx0ZXJcIlxuICAgICAgICBwcmVmaXhDbHM9e2Ake3ByZWZpeENsc30tZmlsdGVyLXNlbGVjdGB9XG4gICAgICAgIG9wdGlvbkRhdGFTZXQ9e2RhdGFTZXR9XG4gICAgICAgIHF1ZXJ5RGF0YVNldD17cXVlcnlEYXRhU2V0fVxuICAgICAgICBwbGFjZWhvbGRlcj17cGxhY2Vob2xkZXJ9XG4gICAgICAgIHN1ZmZpeD17dGhpcy5yZW5kZXJTdWZmaXgoKX1cbiAgICAgICAgcGFyYW1OYW1lPXtwYXJhbU5hbWV9XG4gICAgICAvPixcbiAgICBdO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=