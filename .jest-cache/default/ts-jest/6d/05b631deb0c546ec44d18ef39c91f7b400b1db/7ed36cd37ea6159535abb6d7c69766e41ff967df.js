import { __decorate } from "tslib";
import Set from 'core-js/library/fn/set';
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { observer } from 'mobx-react';
import { computed, action, observable, runInAction } from 'mobx';
import noop from 'lodash/noop';
import C7NTree, { TreeNode, } from 'choerodon-ui/lib/tree';
import autobind from 'choerodon-ui/pro/lib/_util/autobind';
import { getKey, getTreeNodes } from './util';
import Spin from '../spin';
function defaultRenderer({ text }) {
    return text;
}
function defaultNodeCover() {
    return {};
}
const keyPropType = PropTypes.oneOfType([PropTypes.string, PropTypes.number]);
let Tree = class Tree extends Component {
    constructor(props, context) {
        super(props, context);
        this.stateForceRenderKeys = [];
        this.handleExpand = (expandedKeys, eventObj) => {
            if (this.setExpand(eventObj)) {
                runInAction(() => {
                    this.stateExpandedKeys = expandedKeys;
                });
            }
            const { onExpand = noop } = this.props;
            // @ts-ignore
            onExpand(expandedKeys, eventObj);
        };
        this.handleCheck = (checkedKeys, eventObj) => {
            if (this.setCheck(eventObj)) {
                runInAction(() => {
                    this.stateCheckedKeys = checkedKeys;
                });
            }
            const { onCheck = noop } = this.props;
            // @ts-ignore
            onCheck(checkedKeys, eventObj);
        };
        this.handleSelect = (_selectedKeys, eventObj) => {
            const { dataSet } = this.props;
            if (dataSet) {
                const { idField } = dataSet.props;
                const { node, selected } = eventObj;
                const { eventKey } = node;
                const found = dataSet.find(record => eventKey === String(idField ? record.get(idField) : record.id));
                if (found) {
                    if (selected) {
                        dataSet.select(found);
                    }
                    else {
                        dataSet.unSelect(found);
                    }
                }
            }
        };
        runInAction(() => {
            this.stateCheckedKeys = [];
            this.stateExpandedKeys = [];
        });
    }
    componentWillMount() {
        this.handleDataSetLoad();
        this.processDataSetListener(true);
    }
    componentWillReceiveProps(nextProps) {
        const { defaultExpandAll, defaultSelectedKeys, defaultExpandedKeys, defaultCheckedKeys } = this.props;
        if (defaultExpandAll !== nextProps.defaultExpandAll ||
            defaultExpandedKeys !== nextProps.defaultExpandedKeys ||
            defaultCheckedKeys !== nextProps.defaultCheckKeys ||
            defaultSelectedKeys !== nextProps.defaultSelectedKeys) {
            this.processDataSetListener(false);
            this.processDataSetListener(true);
        }
    }
    componentWillUnmount() {
        this.processDataSetListener(false);
    }
    processDataSetListener(flag) {
        const { dataSet } = this.props;
        if (dataSet) {
            const handler = flag ? dataSet.addEventListener : dataSet.removeEventListener;
            handler.call(dataSet, 'load', this.handleDataSetLoad);
        }
    }
    handleDataSetLoad() {
        this.initDefaultExpandedRows();
        this.initDefaultCheckRows();
        this.initDefaultSelectRows();
    }
    initDefaultExpandedRows() {
        const { props: { defaultExpandAll, dataSet, defaultExpandedKeys, }, } = this;
        this.stateExpandedKeys = this.dealDefalutCheckExpand(dataSet, defaultExpandedKeys, defaultExpandAll);
    }
    initDefaultCheckRows() {
        const { props: { dataSet, defaultCheckedKeys, }, } = this;
        this.stateCheckedKeys = this.dealDefalutCheckExpand(dataSet, defaultCheckedKeys);
    }
    initDefaultSelectRows() {
        const { props: { dataSet, defaultSelectedKeys, }, } = this;
        if (dataSet && (defaultSelectedKeys)) {
            const { idField } = dataSet.props;
            defaultSelectedKeys.map(selectKey => {
                const found = dataSet.find(record => selectKey === String(idField ? record.get(idField) : record.id));
                if (found) {
                    dataSet.select(found);
                }
                return null;
            });
        }
    }
    /**
     * 处理tree的props expand check的默认事件
     * @param dataSet
     * @param defalutAll
     * @param defalutKeys
     */
    dealDefalutCheckExpand(dataSet, defalutKeys, defalutAll) {
        let defalutStateKeys = [];
        if (dataSet) {
            const { idField, expandField } = dataSet.props;
            if (defalutAll && !expandField) {
                defalutStateKeys = dataSet.reduce((array, record) => {
                    if (record.children) {
                        array.push(getKey(record, idField));
                    }
                    return array;
                }, []);
            }
            else if (defalutKeys && !expandField) {
                defalutStateKeys = dataSet.reduce((array, record) => {
                    defalutKeys.map((key) => {
                        if (getKey(record, idField) === key) {
                            array.push(key);
                        }
                        return null;
                    });
                    return array;
                }, []);
            }
        }
        return defalutStateKeys;
    }
    get forceRenderKeys() {
        return (this.stateForceRenderKeys = [
            ...new Set([...this.stateForceRenderKeys, ...this.expandedKeys]),
        ]);
    }
    get expandedKeys() {
        const { dataSet } = this.props;
        if (dataSet) {
            const { expandField, idField } = dataSet.props;
            if (expandField) {
                const keys = [];
                dataSet.forEach(record => {
                    if (record.isExpanded) {
                        keys.push(getKey(record, idField));
                    }
                });
                return keys;
            }
        }
        return this.stateExpandedKeys;
    }
    get checkedKeys() {
        const { dataSet } = this.props;
        if (dataSet) {
            const { checkField, idField } = dataSet.props;
            if (checkField) {
                const keys = [];
                dataSet.forEach(record => {
                    const field = record.getField(checkField);
                    if (record.get(checkField) === (field ? field.get("trueValue" /* trueValue */) : true)) {
                        keys.push(getKey(record, idField));
                    }
                });
                return keys;
            }
        }
        return this.stateCheckedKeys;
    }
    get selectedKeys() {
        const { dataSet } = this.props;
        if (dataSet) {
            const { idField } = dataSet.props;
            return dataSet.selected.map(record => getKey(record, idField));
        }
        return [];
    }
    setExpand(eventObj) {
        const { dataSet } = this.props;
        if (dataSet) {
            const { expandField, idField } = dataSet.props;
            if (expandField) {
                const { node, expanded } = eventObj;
                const { eventKey } = node;
                const found = dataSet.find(record => eventKey === getKey(record, idField));
                if (found) {
                    found.isExpanded = !!expanded;
                    return false;
                }
            }
        }
        return true;
    }
    setCheck(eventObj) {
        const { dataSet } = this.props;
        if (dataSet) {
            const { checkField, idField } = dataSet.props;
            if (checkField) {
                const { node, checked } = eventObj;
                const { eventKey } = node;
                const found = dataSet.find(record => eventKey === String(idField ? record.get(idField) : record.id));
                if (found) {
                    const field = found.getField(checkField);
                    found.set(checkField, field
                        ? checked
                            ? field.get("trueValue" /* trueValue */)
                            : field.get("falseValue" /* falseValue */)
                        : checked);
                    return false;
                }
            }
        }
        return true;
    }
    render() {
        const { dataSet, renderer = defaultRenderer, titleField, treeNodeRenderer = defaultNodeCover, loadData, ...otherProps } = this.props;
        if (dataSet) {
            const props = {};
            props.treeData = getTreeNodes(dataSet, dataSet.treeData, this.forceRenderKeys, renderer, 
            // @ts-ignore
            treeNodeRenderer, loadData, titleField);
            // @ts-ignore
            props.onExpand = this.handleExpand;
            // @ts-ignore
            props.onCheck = this.handleCheck;
            // @ts-ignore
            props.onSelect = this.handleSelect;
            props.loadData = loadData;
            props.expandedKeys = this.expandedKeys.slice();
            props.checkedKeys = this.checkedKeys.slice();
            props.multiple = dataSet.props.selection === "multiple" /* multiple */;
            props.selectedKeys = this.selectedKeys.slice();
            return (React.createElement(Spin, { dataSet: dataSet },
                React.createElement(C7NTree, Object.assign({}, otherProps, props))));
        }
        return React.createElement(C7NTree, Object.assign({}, otherProps));
    }
};
Tree.displayName = 'Tree<PRO>';
Tree.propTypes = {
    prefixCls: PropTypes.string,
    className: PropTypes.string,
    style: PropTypes.object,
    tabIndex: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    children: PropTypes.any,
    treeData: PropTypes.array,
    showLine: PropTypes.bool,
    showIcon: PropTypes.bool,
    icon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
    selectable: PropTypes.bool,
    disabled: PropTypes.bool,
    multiple: PropTypes.bool,
    checkable: PropTypes.oneOfType([PropTypes.bool, PropTypes.node]),
    checkStrictly: PropTypes.bool,
    draggable: PropTypes.bool,
    defaultExpandParent: PropTypes.bool,
    autoExpandParent: PropTypes.bool,
    defaultExpandAll: PropTypes.bool,
    defaultExpandedKeys: PropTypes.arrayOf(keyPropType),
    expandedKeys: PropTypes.arrayOf(keyPropType),
    defaultCheckedKeys: PropTypes.arrayOf(keyPropType),
    checkedKeys: PropTypes.oneOfType([
        PropTypes.arrayOf(keyPropType),
        PropTypes.object,
    ]),
    defaultSelectedKeys: PropTypes.arrayOf(keyPropType),
    selectedKeys: PropTypes.arrayOf(keyPropType),
    onClick: PropTypes.func,
    onDoubleClick: PropTypes.func,
    onExpand: PropTypes.func,
    onCheck: PropTypes.func,
    onSelect: PropTypes.func,
    onLoad: PropTypes.func,
    loadData: PropTypes.func,
    loadedKeys: PropTypes.arrayOf(keyPropType),
    onMouseEnter: PropTypes.func,
    onMouseLeave: PropTypes.func,
    onRightClick: PropTypes.func,
    onDragStart: PropTypes.func,
    onDragEnter: PropTypes.func,
    onDragOver: PropTypes.func,
    onDragLeave: PropTypes.func,
    onDragEnd: PropTypes.func,
    onDrop: PropTypes.func,
    filterTreeNode: PropTypes.func,
    motion: PropTypes.object,
    switcherIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
};
Tree.TreeNode = TreeNode;
__decorate([
    observable
], Tree.prototype, "stateCheckedKeys", void 0);
__decorate([
    observable
], Tree.prototype, "stateExpandedKeys", void 0);
__decorate([
    autobind
], Tree.prototype, "handleDataSetLoad", null);
__decorate([
    action
], Tree.prototype, "initDefaultExpandedRows", null);
__decorate([
    action
], Tree.prototype, "initDefaultCheckRows", null);
__decorate([
    action
], Tree.prototype, "initDefaultSelectRows", null);
__decorate([
    computed
], Tree.prototype, "forceRenderKeys", null);
__decorate([
    computed
], Tree.prototype, "expandedKeys", null);
__decorate([
    computed
], Tree.prototype, "checkedKeys", null);
__decorate([
    computed
], Tree.prototype, "selectedKeys", null);
Tree = __decorate([
    observer
], Tree);
export default Tree;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,