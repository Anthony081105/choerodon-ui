/* eslint-disable react/no-danger */
import React, { Component } from 'react';
import { findDOMNode } from 'react-dom';
import LightBox from 'react-image-lightbox';
import omit from 'lodash/omit';
import { toJS } from 'mobx';
import { delta2Html } from './utils';
class RichTextViewer extends Component {
    constructor() {
        super(...arguments);
        this.state = {
            open: false,
            src: '',
        };
        this.open = (src) => {
            this.setState({
                open: true,
                src,
            });
        };
        this.escape = str => str.replace(/<\/script/g, '<\\/script').replace(/<!--/g, '<\\!--');
    }
    componentDidMount() {
        const { deltaOps } = this.props;
        const thisNode = findDOMNode(this);
        if (thisNode) {
            thisNode.addEventListener('click', (e) => {
                // @ts-ignore
                if (e.target?.nodeName === 'IMG' && deltaOps && deltaOps.search(e.target.src) > -1) {
                    e.stopPropagation();
                    // @ts-ignore
                    this.open(e.target.src);
                }
            });
        }
    }
    componentWillUnmount() {
        const thisNode = findDOMNode(this);
        if (thisNode)
            thisNode.removeEventListener('click', this.open);
    }
    getOtherProps() {
        return omit(this.props, ['deltaOps']);
    }
    render() {
        const { deltaOps } = this.props;
        const { open, src } = this.state;
        const html = delta2Html(toJS(deltaOps));
        return (React.createElement("div", Object.assign({}, this.getOtherProps()),
            React.createElement("div", { dangerouslySetInnerHTML: { __html: `${this.escape(html)}` } }),
            open ? (React.createElement(LightBox, { mainSrc: src, onCloseRequest: () => this.setState({ open: false }), imageTitle: "images" })) : null));
    }
}
export default RichTextViewer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMtcHJvL3JpY2gtdGV4dC9SaWNoVGV4dFZpZXdlci50c3giLCJtYXBwaW5ncyI6IkFBQUEsb0NBQW9DO0FBQ3BDLE9BQU8sS0FBSyxFQUFFLEVBQUUsU0FBUyxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxRQUFRLE1BQU0sc0JBQXNCLENBQUM7QUFDNUMsT0FBTyxJQUFJLE1BQU0sYUFBYSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDNUIsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQVFyQyxNQUFNLGNBQWUsU0FBUSxTQUE4QjtJQUEzRDs7UUFDRSxVQUFLLEdBQUc7WUFDTixJQUFJLEVBQUUsS0FBSztZQUNYLEdBQUcsRUFBRSxFQUFFO1NBQ1IsQ0FBQztRQXNCRixTQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsRUFBRTtZQUNiLElBQUksQ0FBQyxRQUFRLENBQUM7Z0JBQ1osSUFBSSxFQUFFLElBQUk7Z0JBQ1YsR0FBRzthQUNKLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQztRQUVGLFdBQU0sR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLFlBQVksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7SUEwQnJGLENBQUM7SUFyREMsaUJBQWlCO1FBQ2YsTUFBTSxFQUFFLFFBQVEsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDaEMsTUFBTSxRQUFRLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ25DLElBQUksUUFBUSxFQUFFO1lBQ1osUUFBUSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFO2dCQUN2QyxhQUFhO2dCQUNiLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxRQUFRLEtBQUssS0FBSyxJQUFJLFFBQVEsSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7b0JBQ2xGLENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQztvQkFDcEIsYUFBYTtvQkFDYixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQ3pCO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7SUFFRCxvQkFBb0I7UUFDbEIsTUFBTSxRQUFRLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ25DLElBQUksUUFBUTtZQUFFLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2pFLENBQUM7SUFXRCxhQUFhO1FBQ1gsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVELE1BQU07UUFDSixNQUFNLEVBQUUsUUFBUSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUNoQyxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDakMsTUFBTSxJQUFJLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBRXhDLE9BQU8sQ0FDTCw2Q0FBUyxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQzNCLDZCQUFLLHVCQUF1QixFQUFFLEVBQUUsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUk7WUFFbEUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUNMLG9CQUFDLFFBQVEsSUFDUCxPQUFPLEVBQUUsR0FBRyxFQUNaLGNBQWMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQ3BELFVBQVUsRUFBQyxRQUFRLEdBQ25CLENBQ0gsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUVOLENBQ1AsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQUVELGVBQWUsY0FBYyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9odWlodWF3ay9Eb2N1bWVudHMvb3B0L2Nob2Vyb2Rvbi11aS9jb21wb25lbnRzLXByby9yaWNoLXRleHQvUmljaFRleHRWaWV3ZXIudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIHJlYWN0L25vLWRhbmdlciAqL1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGZpbmRET01Ob2RlIH0gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBMaWdodEJveCBmcm9tICdyZWFjdC1pbWFnZS1saWdodGJveCc7XG5pbXBvcnQgb21pdCBmcm9tICdsb2Rhc2gvb21pdCc7XG5pbXBvcnQgeyB0b0pTIH0gZnJvbSAnbW9ieCc7XG5pbXBvcnQgeyBkZWx0YTJIdG1sIH0gZnJvbSAnLi91dGlscyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmljaFRleHRWaWV3ZXJQcm9wcyB7XG4gIGRlbHRhT3BzPzogYW55O1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIHN0eWxlPzogUmVhY3QuQ1NTUHJvcGVydGllcztcbn1cblxuY2xhc3MgUmljaFRleHRWaWV3ZXIgZXh0ZW5kcyBDb21wb25lbnQ8UmljaFRleHRWaWV3ZXJQcm9wcz4ge1xuICBzdGF0ZSA9IHtcbiAgICBvcGVuOiBmYWxzZSxcbiAgICBzcmM6ICcnLFxuICB9O1xuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGNvbnN0IHsgZGVsdGFPcHMgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgdGhpc05vZGUgPSBmaW5kRE9NTm9kZSh0aGlzKTtcbiAgICBpZiAodGhpc05vZGUpIHtcbiAgICAgIHRoaXNOb2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBpZiAoZS50YXJnZXQ/Lm5vZGVOYW1lID09PSAnSU1HJyAmJiBkZWx0YU9wcyAmJiBkZWx0YU9wcy5zZWFyY2goZS50YXJnZXQuc3JjKSA+IC0xKSB7XG4gICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgdGhpcy5vcGVuKGUudGFyZ2V0LnNyYyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGNvbnN0IHRoaXNOb2RlID0gZmluZERPTU5vZGUodGhpcyk7XG4gICAgaWYgKHRoaXNOb2RlKSB0aGlzTm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub3Blbik7XG4gIH1cblxuICBvcGVuID0gKHNyYykgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgb3BlbjogdHJ1ZSxcbiAgICAgIHNyYyxcbiAgICB9KTtcbiAgfTtcblxuICBlc2NhcGUgPSBzdHIgPT4gc3RyLnJlcGxhY2UoLzxcXC9zY3JpcHQvZywgJzxcXFxcL3NjcmlwdCcpLnJlcGxhY2UoLzwhLS0vZywgJzxcXFxcIS0tJyk7XG5cbiAgZ2V0T3RoZXJQcm9wcygpIHtcbiAgICByZXR1cm4gb21pdCh0aGlzLnByb3BzLCBbJ2RlbHRhT3BzJ10pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgZGVsdGFPcHMgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBvcGVuLCBzcmMgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgaHRtbCA9IGRlbHRhMkh0bWwodG9KUyhkZWx0YU9wcykpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgey4uLnRoaXMuZ2V0T3RoZXJQcm9wcygpfT5cbiAgICAgICAgPGRpdiBkYW5nZXJvdXNseVNldElubmVySFRNTD17eyBfX2h0bWw6IGAke3RoaXMuZXNjYXBlKGh0bWwpfWAgfX0gLz5cbiAgICAgICAge1xuICAgICAgICAgIG9wZW4gPyAoXG4gICAgICAgICAgICA8TGlnaHRCb3hcbiAgICAgICAgICAgICAgbWFpblNyYz17c3JjfVxuICAgICAgICAgICAgICBvbkNsb3NlUmVxdWVzdD17KCkgPT4gdGhpcy5zZXRTdGF0ZSh7IG9wZW46IGZhbHNlIH0pfVxuICAgICAgICAgICAgICBpbWFnZVRpdGxlPVwiaW1hZ2VzXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKSA6IG51bGxcbiAgICAgICAgfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBSaWNoVGV4dFZpZXdlcjtcbiJdLCJ2ZXJzaW9uIjozfQ==