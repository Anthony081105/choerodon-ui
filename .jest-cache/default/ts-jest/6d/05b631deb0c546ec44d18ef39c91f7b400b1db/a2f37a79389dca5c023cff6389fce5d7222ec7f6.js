import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import Icon from '../icon';
import { Circle } from '../rc-components/progress';
import Loading from './Loading';
import { getPrefixCls } from '../configure';
export default class Progress extends Component {
    constructor() {
        super(...arguments);
        this.renderPointer = () => {
            const props = this.props;
            const { prefixCls: customizePrefixCls, 
            // strokeColor,
            percent = 0, status, successPercent, } = props;
            const prefixCls = getPrefixCls('progress', customizePrefixCls);
            const progressStatus = parseInt(successPercent ? successPercent.toString() : percent.toString(), 10) >= 100 &&
                !('status' in props)
                ? "success" /* success */
                : status || "normal" /* normal */;
            return (React.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: "38", height: "32", viewBox: "0 0 38 32" },
                React.createElement("path", { 
                    // style={{
                    //   fill: strokeColor ? strokeColor : '',
                    // }}
                    className: `${prefixCls}-status-pointer-${progressStatus}`, fill: "#6887E8", d: "M103.371587,49.724578 C103.681687,50.1292204 103.634794,50.6951896 103.280961,51.0440945 L103.186137,51.1265795 L78.8502947,69.7769214 C79.5504585,70.8623565 79.9567807,72.1551739 79.9567807,73.5428929 C79.9567807,77.3850168 76.8421239,80.4996736 73,80.4996736 C69.1578761,80.4996736 66.0432193,77.3850168 66.0432193,73.5428929 C66.0432193,69.700769 69.1578761,66.5861122 73,66.5861122 C74.7317808,66.5861122 76.3157678,67.218893 77.5333601,68.265854 L101.969586,49.5391281 C102.407948,49.2031866 103.035646,49.2862154 103.371587,49.724578 Z M73,68.5861122 C70.2624456,68.5861122 68.0432193,70.8053385 68.0432193,73.5428929 C68.0432193,76.2804473 70.2624456,78.4996736 73,78.4996736 C75.7375544,78.4996736 77.9567807,76.2804473 77.9567807,73.5428929 C77.9567807,70.8053385 75.7375544,68.5861122 73,68.5861122 Z", transform: "translate(-66 -49)" })));
        };
        /**
         * 计算指针角度
         */
        this.getPointerDeg = () => {
            const { percent = 0, gapDegree = 0, } = this.props;
            // 缺口角度
            const gapDeg = gapDegree || 75;
            // percent 角度
            const percentDeg = (360 - gapDeg) * (percent / 100);
            // 初始位置 0 -> 126 + 缺口角度/2 + percent 角度 + diffDeg
            let diffDeg = 0;
            if (percent <= 75 && percent > 50) {
                diffDeg = -3;
            }
            else if (percent > 75) {
                diffDeg = -5;
            }
            else if (percent < 50) {
                diffDeg = 5;
            }
            const deg = 128 + gapDeg / 2 + percentDeg + diffDeg;
            return { transform: `rotate(${deg}deg)` };
        };
    }
    render() {
        const props = this.props;
        const { prefixCls: customizePrefixCls, className, percent = 0, status, format, trailColor, size, successPercent, type, strokeWidth, strokeColor, width, showInfo, gapDegree = 0, gapPosition, showPointer, ...restProps } = props;
        const prefixCls = getPrefixCls('progress', customizePrefixCls);
        const progressStatus = parseInt(successPercent ? successPercent.toString() : percent.toString(), 10) >= 100 &&
            !('status' in props)
            ? "success" /* success */
            : status || "normal" /* normal */;
        let progressInfo;
        let progressCenter;
        let progress;
        const textFormatter = format || (percentNumber => `${percentNumber}%`);
        if (showInfo) {
            let text;
            const circleType = type === "circle" /* circle */ || type === "dashboard" /* dashboard */;
            if (progressStatus === "exception" /* exception */) {
                text = format ? textFormatter(percent) : React.createElement(Icon, { type: circleType ? 'close' : 'cancel' });
            }
            else if (progressStatus === "success" /* success */) {
                text = format ? (textFormatter(percent)) : (React.createElement(Icon, { type: circleType ? 'check' : 'check_circle' }));
            }
            else {
                text = textFormatter(percent);
            }
            progressInfo = React.createElement("span", { className: `${prefixCls}-text` }, text);
            if (showPointer) {
                progressCenter = (React.createElement("div", { className: `${prefixCls}-pointer`, style: this.getPointerDeg() }, this.renderPointer()));
                progressInfo = React.createElement("span", { className: `${prefixCls}-text-bottom` }, text);
            }
        }
        if (type === "line" /* line */) {
            const percentStyle = {
                width: `${percent}%`,
                height: strokeWidth || (size === "small" /* small */ ? 6 : 8),
                background: strokeColor,
            };
            const successPercentStyle = {
                width: `${successPercent}%`,
                height: strokeWidth || (size === "small" /* small */ ? 6 : 8),
            };
            const successSegment = successPercent !== undefined ? (React.createElement("div", { className: `${prefixCls}-success-bg`, style: successPercentStyle })) : null;
            progress = (React.createElement("div", null,
                React.createElement("div", { className: `${prefixCls}-outer` },
                    React.createElement("div", { className: `${prefixCls}-inner` },
                        React.createElement("div", { className: `${prefixCls}-bg`, style: percentStyle }),
                        successSegment)),
                progressInfo));
        }
        else if (type === "circle" /* circle */ || type === "dashboard" /* dashboard */) {
            const circleSize = width || 120;
            const circleStyle = {
                width: circleSize,
                height: circleSize,
                fontSize: circleSize * 0.15 + 6,
            };
            const circleWidth = strokeWidth || 6;
            const gapPos = gapPosition ||
                (type === "dashboard" /* dashboard */ && "bottom" /* bottom */) ||
                "top" /* top */;
            const gapDeg = gapDegree || (type === "dashboard" /* dashboard */ && 75);
            progress = (React.createElement("div", { className: `${prefixCls}-inner`, style: circleStyle },
                React.createElement(Circle, { percent: percent, strokeWidth: circleWidth, trailWidth: circleWidth, trailColor: trailColor, strokeColor: strokeColor, prefixCls: prefixCls, gapDegree: gapDeg, gapPosition: gapPos }),
                progressCenter,
                progressInfo));
        }
        else if (type === "loading" /* loading */) {
            progress = (React.createElement("div", { className: `${prefixCls}-inner` },
                React.createElement(Loading, null)));
        }
        const classString = classNames(prefixCls, {
            [`${prefixCls}-${(type === "dashboard" /* dashboard */ && "circle" /* circle */) || type}`]: true,
            [`${prefixCls}-status-${progressStatus}`]: true,
            [`${prefixCls}-show-info`]: showInfo,
            [`${prefixCls}-${size}`]: size,
        }, className);
        return (React.createElement("div", Object.assign({}, restProps, { className: classString }), progress));
    }
}
Progress.displayName = 'Progress';
Progress.defaultProps = {
    type: "line" /* line */,
    percent: 0,
    showInfo: true,
    showPointer: false,
    trailColor: '#f3f3f3',
    size: "default" /* default */,
};
Progress.propTypes = {
    status: PropTypes.oneOf([
        "normal" /* normal */,
        "exception" /* exception */,
        "active" /* active */,
        "success" /* success */,
    ]),
    type: PropTypes.oneOf([
        "line" /* line */,
        "circle" /* circle */,
        "dashboard" /* dashboard */,
        "loading" /* loading */,
    ]),
    showInfo: PropTypes.bool,
    showPointer: PropTypes.bool,
    percent: PropTypes.number,
    width: PropTypes.number,
    strokeWidth: PropTypes.number,
    strokeColor: PropTypes.string,
    trailColor: PropTypes.string,
    format: PropTypes.func,
    gapDegree: PropTypes.number,
    size: PropTypes.oneOf(["default" /* default */, "small" /* small */, "large" /* large */]),
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,