// @ts-nocheck
import * as React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { defaultClassPrefix, getUnhandledProps, prefix } from './utils';
import TableContext from './TableContext';
class CellGroup extends React.PureComponent {
    constructor() {
        super(...arguments);
        this.addPrefix = (name) => prefix(this.props.classPrefix)(name);
    }
    render() {
        const { fixed, width, left, height, style, classPrefix, className, ...rest } = this.props;
        const classes = classNames(classPrefix, className, {
            [this.addPrefix(`fixed-${fixed || ''}`)]: fixed,
            [this.addPrefix('scroll')]: !fixed,
        });
        const styles = {
            width,
            height,
            ...style,
        };
        const unhandledProps = getUnhandledProps(CellGroup, rest);
        return (React.createElement(TableContext.Consumer, null, ({ translateDOMPositionXY }) => {
            translateDOMPositionXY?.(styles, left, 0);
            return React.createElement("div", Object.assign({}, unhandledProps, { className: classes, style: styles }));
        }));
    }
}
CellGroup.propTypes = {
    fixed: PropTypes.oneOf(['left', 'right']),
    width: PropTypes.number,
    height: PropTypes.number,
    left: PropTypes.number,
    style: PropTypes.object,
    className: PropTypes.string,
    classPrefix: PropTypes.string,
};
CellGroup.defaultProps = {
    classPrefix: defaultClassPrefix('performance-table-cell-group'),
};
export default CellGroup;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMtcHJvL3BlcmZvcm1hbmNlLXRhYmxlL0NlbGxHcm91cC50c3giLCJtYXBwaW5ncyI6IkFBQUEsY0FBYztBQUNkLE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQy9CLE9BQU8sU0FBUyxNQUFNLFlBQVksQ0FBQztBQUNuQyxPQUFPLFVBQVUsTUFBTSxZQUFZLENBQUM7QUFDcEMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLGlCQUFpQixFQUFFLE1BQU0sRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUV4RSxPQUFPLFlBQVksTUFBTSxnQkFBZ0IsQ0FBQztBQUUxQyxNQUFNLFNBQVUsU0FBUSxLQUFLLENBQUMsYUFBNkI7SUFBM0Q7O1FBY0UsY0FBUyxHQUFHLENBQUMsSUFBWSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQXdCckUsQ0FBQztJQXRCQyxNQUFNO1FBQ0osTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxHQUFHLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDMUYsTUFBTSxPQUFPLEdBQUcsVUFBVSxDQUFDLFdBQVcsRUFBRSxTQUFTLEVBQUU7WUFDakQsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsS0FBSyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxLQUFLO1lBQy9DLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSztTQUNuQyxDQUFDLENBQUM7UUFDSCxNQUFNLE1BQU0sR0FBRztZQUNiLEtBQUs7WUFDTCxNQUFNO1lBQ04sR0FBRyxLQUFLO1NBQ1QsQ0FBQztRQUNGLE1BQU0sY0FBYyxHQUFHLGlCQUFpQixDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUUxRCxPQUFPLENBQ0wsb0JBQUMsWUFBWSxDQUFDLFFBQVEsUUFDbkIsQ0FBQyxFQUFFLHNCQUFzQixFQUFFLEVBQUUsRUFBRTtZQUM5QixzQkFBc0IsRUFBRSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDMUMsT0FBTyw2Q0FBUyxjQUFjLElBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxJQUFJLENBQUM7UUFDeEUsQ0FBQyxDQUNxQixDQUN6QixDQUFDO0lBQ0osQ0FBQzs7QUFwQ00sbUJBQVMsR0FBRztJQUNqQixLQUFLLEVBQUUsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN6QyxLQUFLLEVBQUUsU0FBUyxDQUFDLE1BQU07SUFDdkIsTUFBTSxFQUFFLFNBQVMsQ0FBQyxNQUFNO0lBQ3hCLElBQUksRUFBRSxTQUFTLENBQUMsTUFBTTtJQUN0QixLQUFLLEVBQUUsU0FBUyxDQUFDLE1BQU07SUFDdkIsU0FBUyxFQUFFLFNBQVMsQ0FBQyxNQUFNO0lBQzNCLFdBQVcsRUFBRSxTQUFTLENBQUMsTUFBTTtDQUM5QixDQUFDO0FBQ0ssc0JBQVksR0FBRztJQUNwQixXQUFXLEVBQUUsa0JBQWtCLENBQUMsOEJBQThCLENBQUM7Q0FDaEUsQ0FBQztBQTRCSixlQUFlLFNBQVMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvaHVpaHVhd2svRG9jdW1lbnRzL29wdC9jaG9lcm9kb24tdWkvY29tcG9uZW50cy1wcm8vcGVyZm9ybWFuY2UtdGFibGUvQ2VsbEdyb3VwLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAdHMtbm9jaGVja1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHsgZGVmYXVsdENsYXNzUHJlZml4LCBnZXRVbmhhbmRsZWRQcm9wcywgcHJlZml4IH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgeyBDZWxsR3JvdXBQcm9wcyB9IGZyb20gJy4vQ2VsbEdyb3VwLmQnO1xuaW1wb3J0IFRhYmxlQ29udGV4dCBmcm9tICcuL1RhYmxlQ29udGV4dCc7XG5cbmNsYXNzIENlbGxHcm91cCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQ8Q2VsbEdyb3VwUHJvcHM+IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBmaXhlZDogUHJvcFR5cGVzLm9uZU9mKFsnbGVmdCcsICdyaWdodCddKSxcbiAgICB3aWR0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBoZWlnaHQ6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgbGVmdDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2xhc3NQcmVmaXg6IFByb3BUeXBlcy5zdHJpbmcsXG4gIH07XG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgY2xhc3NQcmVmaXg6IGRlZmF1bHRDbGFzc1ByZWZpeCgncGVyZm9ybWFuY2UtdGFibGUtY2VsbC1ncm91cCcpLFxuICB9O1xuXG4gIGFkZFByZWZpeCA9IChuYW1lOiBzdHJpbmcpID0+IHByZWZpeCh0aGlzLnByb3BzLmNsYXNzUHJlZml4KShuYW1lKTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBmaXhlZCwgd2lkdGgsIGxlZnQsIGhlaWdodCwgc3R5bGUsIGNsYXNzUHJlZml4LCBjbGFzc05hbWUsIC4uLnJlc3QgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgY2xhc3NlcyA9IGNsYXNzTmFtZXMoY2xhc3NQcmVmaXgsIGNsYXNzTmFtZSwge1xuICAgICAgW3RoaXMuYWRkUHJlZml4KGBmaXhlZC0ke2ZpeGVkIHx8ICcnfWApXTogZml4ZWQsXG4gICAgICBbdGhpcy5hZGRQcmVmaXgoJ3Njcm9sbCcpXTogIWZpeGVkLFxuICAgIH0pO1xuICAgIGNvbnN0IHN0eWxlcyA9IHtcbiAgICAgIHdpZHRoLFxuICAgICAgaGVpZ2h0LFxuICAgICAgLi4uc3R5bGUsXG4gICAgfTtcbiAgICBjb25zdCB1bmhhbmRsZWRQcm9wcyA9IGdldFVuaGFuZGxlZFByb3BzKENlbGxHcm91cCwgcmVzdCk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFRhYmxlQ29udGV4dC5Db25zdW1lcj5cbiAgICAgICAgeyh7IHRyYW5zbGF0ZURPTVBvc2l0aW9uWFkgfSkgPT4ge1xuICAgICAgICAgIHRyYW5zbGF0ZURPTVBvc2l0aW9uWFk/LihzdHlsZXMsIGxlZnQsIDApO1xuICAgICAgICAgIHJldHVybiA8ZGl2IHsuLi51bmhhbmRsZWRQcm9wc30gY2xhc3NOYW1lPXtjbGFzc2VzfSBzdHlsZT17c3R5bGVzfSAvPjtcbiAgICAgICAgfX1cbiAgICAgIDwvVGFibGVDb250ZXh0LkNvbnN1bWVyPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2VsbEdyb3VwO1xuIl0sInZlcnNpb24iOjN9