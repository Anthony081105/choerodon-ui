import { __decorate } from "tslib";
import React from 'react';
import { observer } from 'mobx-react';
import KeyCode from 'choerodon-ui/lib/_util/KeyCode';
import { CheckBox } from '../check-box/CheckBox';
import autobind from '../_util/autobind';
let Switch = class Switch extends CheckBox {
    handleKeyDown(e) {
        if (e.keyCode === KeyCode.LEFT) {
            this.setChecked(false);
        }
        else if (e.keyCode === KeyCode.RIGHT) {
            this.setChecked(true);
        }
        super.handleKeyDown(e);
    }
    getTextNode() {
        const { prefixCls, props: { children, unCheckedChildren }, } = this;
        const text = this.isChecked() ? children : unCheckedChildren || children;
        return React.createElement("span", { className: `${prefixCls}-label` }, text);
    }
    renderSwitchFloatLabel() {
        const { prefixCls, } = this;
        return (React.createElement("span", { className: `${prefixCls}-float-label` }, this.getLabelChildren()));
    }
    renderInner() {
        return undefined;
    }
};
Switch.displayName = 'Switch';
/**
 * tooltip disable sign
 */
// eslint-disable-next-line camelcase
Switch.__Pro_SWITCH = true;
Switch.defaultProps = {
    ...CheckBox.defaultProps,
    suffixCls: 'switch',
};
__decorate([
    autobind
], Switch.prototype, "handleKeyDown", null);
Switch = __decorate([
    observer
], Switch);
export default Switch;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMtcHJvL3N3aXRjaC9Td2l0Y2gudHN4IiwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEtBQW9CLE1BQU0sT0FBTyxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDdEMsT0FBTyxPQUFPLE1BQU0sZ0NBQWdDLENBQUM7QUFDckQsT0FBTyxFQUFFLFFBQVEsRUFBaUIsTUFBTSx1QkFBdUIsQ0FBQztBQUNoRSxPQUFPLFFBQVEsTUFBTSxtQkFBbUIsQ0FBQztBQUd6QyxJQUFxQixNQUFNLEdBQTNCLE1BQXFCLE1BQU8sU0FBUSxRQUF1QjtJQWV6RCxhQUFhLENBQUMsQ0FBQztRQUNiLElBQUksQ0FBQyxDQUFDLE9BQU8sS0FBSyxPQUFPLENBQUMsSUFBSSxFQUFFO1lBQzlCLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLENBQUMsQ0FBQyxPQUFPLEtBQUssT0FBTyxDQUFDLEtBQUssRUFBRTtZQUN0QyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3ZCO1FBQ0QsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBRUQsV0FBVztRQUNULE1BQU0sRUFDSixTQUFTLEVBQ1QsS0FBSyxFQUFFLEVBQUUsUUFBUSxFQUFFLGlCQUFpQixFQUFFLEdBQ3ZDLEdBQUcsSUFBSSxDQUFDO1FBQ1QsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixJQUFJLFFBQVEsQ0FBQztRQUN6RSxPQUFPLDhCQUFNLFNBQVMsRUFBRSxHQUFHLFNBQVMsUUFBUSxJQUFHLElBQUksQ0FBUSxDQUFDO0lBQzlELENBQUM7SUFFRCxzQkFBc0I7UUFDcEIsTUFBTSxFQUNKLFNBQVMsR0FDVixHQUFHLElBQUksQ0FBQztRQUNULE9BQU8sQ0FDTCw4QkFBTSxTQUFTLEVBQUUsR0FBRyxTQUFTLGNBQWMsSUFDeEMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQ25CLENBQ1IsQ0FBQTtJQUNILENBQUM7SUFFRCxXQUFXO1FBQ1QsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztDQUNGLENBQUE7QUE5Q1Esa0JBQVcsR0FBRyxRQUFRLENBQUM7QUFFOUI7O0dBRUc7QUFDSCxxQ0FBcUM7QUFDOUIsbUJBQVksR0FBRyxJQUFJLENBQUM7QUFFcEIsbUJBQVksR0FBRztJQUNwQixHQUFHLFFBQVEsQ0FBQyxZQUFZO0lBQ3hCLFNBQVMsRUFBRSxRQUFRO0NBQ3BCLENBQUM7QUFHRjtJQURDLFFBQVE7MkNBUVI7QUF0QmtCLE1BQU07SUFEMUIsUUFBUTtHQUNZLE1BQU0sQ0ErQzFCO2VBL0NvQixNQUFNIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9odWlodWF3ay9Eb2N1bWVudHMvb3B0L2Nob2Vyb2Rvbi11aS9jb21wb25lbnRzLXByby9zd2l0Y2gvU3dpdGNoLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgb2JzZXJ2ZXIgfSBmcm9tICdtb2J4LXJlYWN0JztcbmltcG9ydCBLZXlDb2RlIGZyb20gJ2Nob2Vyb2Rvbi11aS9saWIvX3V0aWwvS2V5Q29kZSc7XG5pbXBvcnQgeyBDaGVja0JveCwgQ2hlY2tCb3hQcm9wcyB9IGZyb20gJy4uL2NoZWNrLWJveC9DaGVja0JveCc7XG5pbXBvcnQgYXV0b2JpbmQgZnJvbSAnLi4vX3V0aWwvYXV0b2JpbmQnO1xuXG5Ab2JzZXJ2ZXJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN3aXRjaCBleHRlbmRzIENoZWNrQm94PENoZWNrQm94UHJvcHM+IHtcbiAgc3RhdGljIGRpc3BsYXlOYW1lID0gJ1N3aXRjaCc7XG5cbiAgLyoqXG4gICAqIHRvb2x0aXAgZGlzYWJsZSBzaWduXG4gICAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FtZWxjYXNlXG4gIHN0YXRpYyBfX1Byb19TV0lUQ0ggPSB0cnVlO1xuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgLi4uQ2hlY2tCb3guZGVmYXVsdFByb3BzLFxuICAgIHN1ZmZpeENsczogJ3N3aXRjaCcsXG4gIH07XG5cbiAgQGF1dG9iaW5kXG4gIGhhbmRsZUtleURvd24oZSkge1xuICAgIGlmIChlLmtleUNvZGUgPT09IEtleUNvZGUuTEVGVCkge1xuICAgICAgdGhpcy5zZXRDaGVja2VkKGZhbHNlKTtcbiAgICB9IGVsc2UgaWYgKGUua2V5Q29kZSA9PT0gS2V5Q29kZS5SSUdIVCkge1xuICAgICAgdGhpcy5zZXRDaGVja2VkKHRydWUpO1xuICAgIH1cbiAgICBzdXBlci5oYW5kbGVLZXlEb3duKGUpO1xuICB9XG5cbiAgZ2V0VGV4dE5vZGUoKSB7XG4gICAgY29uc3Qge1xuICAgICAgcHJlZml4Q2xzLFxuICAgICAgcHJvcHM6IHsgY2hpbGRyZW4sIHVuQ2hlY2tlZENoaWxkcmVuIH0sXG4gICAgfSA9IHRoaXM7XG4gICAgY29uc3QgdGV4dCA9IHRoaXMuaXNDaGVja2VkKCkgPyBjaGlsZHJlbiA6IHVuQ2hlY2tlZENoaWxkcmVuIHx8IGNoaWxkcmVuO1xuICAgIHJldHVybiA8c3BhbiBjbGFzc05hbWU9e2Ake3ByZWZpeENsc30tbGFiZWxgfT57dGV4dH08L3NwYW4+O1xuICB9XG5cbiAgcmVuZGVyU3dpdGNoRmxvYXRMYWJlbCgpIHtcbiAgICBjb25zdCB7XG4gICAgICBwcmVmaXhDbHMsXG4gICAgfSA9IHRoaXM7XG4gICAgcmV0dXJuIChcbiAgICAgIDxzcGFuIGNsYXNzTmFtZT17YCR7cHJlZml4Q2xzfS1mbG9hdC1sYWJlbGB9PlxuICAgICAgICB7dGhpcy5nZXRMYWJlbENoaWxkcmVuKCl9XG4gICAgICA8L3NwYW4+XG4gICAgKVxuICB9XG5cbiAgcmVuZGVySW5uZXIoKTogUmVhY3ROb2RlIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=