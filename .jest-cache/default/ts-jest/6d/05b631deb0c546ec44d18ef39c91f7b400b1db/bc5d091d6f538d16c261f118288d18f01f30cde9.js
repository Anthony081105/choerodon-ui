import * as React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { LAYER_WIDTH } from './constants';
import { isNullOrUndefined, defaultClassPrefix, getUnhandledProps, prefix } from './utils';
import TableContext from './TableContext';
import Column from './Column';
export const propTypes = {
    align: PropTypes.oneOf(['left', 'center', 'right']),
    verticalAlign: PropTypes.oneOf(['top', 'middle', 'bottom']),
    className: PropTypes.string,
    classPrefix: PropTypes.string,
    dataKey: PropTypes.string,
    isHeaderCell: PropTypes.bool,
    width: PropTypes.number,
    height: PropTypes.oneOfType([PropTypes.number, PropTypes.func]),
    left: PropTypes.number,
    headerHeight: PropTypes.number,
    style: PropTypes.object,
    firstColumn: PropTypes.bool,
    lastColumn: PropTypes.bool,
    hasChildren: PropTypes.bool,
    children: PropTypes.any,
    rowKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    rowIndex: PropTypes.number,
    rowData: PropTypes.object,
    depth: PropTypes.number,
    onTreeToggle: PropTypes.func,
    renderTreeToggle: PropTypes.func,
    renderCell: PropTypes.func,
    wordWrap: PropTypes.bool,
    removed: PropTypes.bool,
    treeCol: PropTypes.bool,
    expanded: PropTypes.bool,
    groupHeader: PropTypes.node,
    groupCount: PropTypes.number,
};
class Cell extends React.PureComponent {
    constructor() {
        super(...arguments);
        // @ts-ignore
        this.addPrefix = (name) => prefix(this.props.classPrefix)(name);
        this.handleExpandClick = (event) => {
            const { rowKey, rowIndex, rowData } = this.props;
            this.props.onTreeToggle?.(rowKey, rowIndex, rowData, event);
        };
    }
    isTreeCol() {
        const { treeCol, firstColumn } = this.props;
        const { hasCustomTreeCol } = this.context;
        if (treeCol) {
            return true;
        }
        if (!hasCustomTreeCol && firstColumn) {
            return true;
        }
        return false;
    }
    getHeight() {
        const { height, rowData } = this.props;
        // @ts-ignore
        return typeof height === 'function' ? height(rowData) : height;
    }
    renderTreeNodeExpandIcon() {
        const { rowData, renderTreeToggle, hasChildren, expanded } = this.props;
        const expandButton = React.createElement("i", { className: this.addPrefix('expand-icon icon') });
        if (this.isTreeCol() && hasChildren) {
            return (React.createElement("span", { role: "button", tabIndex: -1, className: this.addPrefix('expand-wrapper'), onClick: this.handleExpandClick }, renderTreeToggle ? renderTreeToggle(expandButton, rowData, expanded) : expandButton));
        }
        return null;
    }
    render() {
        const { width, left, style, className, firstColumn, lastColumn, isHeaderCell, headerHeight, align, children, rowData, dataKey, rowIndex, renderCell, removed, wordWrap, classPrefix, depth, verticalAlign, expanded, ...rest } = this.props;
        if (removed) {
            return null;
        }
        const classes = classNames(classPrefix, className, {
            [this.addPrefix('expanded')]: expanded && this.isTreeCol(),
            [this.addPrefix('first')]: firstColumn,
            [this.addPrefix('last')]: lastColumn,
        });
        const { rtl } = this.context;
        const nextHeight = isHeaderCell ? headerHeight : this.getHeight();
        const styles = {
            width,
            height: nextHeight,
            zIndex: depth,
            [rtl ? 'right' : 'left']: left,
        };
        const contentStyles = {
            width,
            height: nextHeight,
            textAlign: align,
            [rtl ? 'paddingRight' : 'paddingLeft']: this.isTreeCol() ? depth * LAYER_WIDTH + 10 : null,
            ...style,
        };
        if (verticalAlign) {
            contentStyles.display = 'table-cell';
            contentStyles.verticalAlign = verticalAlign;
        }
        // @ts-ignore
        let cellContent = isNullOrUndefined(children) && rowData ? rowData[dataKey] : children;
        if (typeof children === 'function') {
            const getChildren = children;
            cellContent = getChildren(rowData, rowIndex);
        }
        const unhandledProps = getUnhandledProps(Cell, getUnhandledProps(Column, rest));
        const cell = renderCell ? renderCell(cellContent) : cellContent;
        const content = wordWrap ? (React.createElement("div", { className: this.addPrefix('wrap') },
            this.renderTreeNodeExpandIcon(),
            cell)) : (React.createElement(React.Fragment, null,
            this.renderTreeNodeExpandIcon(),
            cell));
        return (React.createElement("div", Object.assign({}, unhandledProps, { className: classes, style: styles }),
            React.createElement("div", { className: this.addPrefix('content'), style: contentStyles }, content)));
    }
}
Cell.contextType = TableContext;
Cell.propTypes = propTypes;
Cell.defaultProps = {
    classPrefix: defaultClassPrefix('performance-table-cell'),
    headerHeight: 36,
    depth: 0,
    height: 36,
    width: 0,
    left: 0,
};
export default Cell;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,