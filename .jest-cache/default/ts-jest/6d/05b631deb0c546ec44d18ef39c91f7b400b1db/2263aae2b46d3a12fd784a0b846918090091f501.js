import React, { Component } from 'react';
import { findDOMNode } from 'react-dom';
import Button from '../button';
export default class ActionButton extends Component {
    constructor(props) {
        super(props);
        this.onClick = (props) => {
            const { actionFn, closeModal } = props;
            if (actionFn) {
                let ret;
                if (actionFn.length) {
                    ret = actionFn(closeModal);
                }
                else {
                    ret = actionFn();
                    if (!ret) {
                        closeModal();
                    }
                }
                if (ret && ret.then) {
                    this.setState({ loading: true });
                    ret.then((...args) => {
                        // It's unnecessary to set loading=false, for the Modal will be unmounted after close.
                        // this.setState({ loading: false });
                        closeModal(...args);
                    }, () => {
                        this.setState({ loading: false });
                    });
                }
            }
            else {
                closeModal();
            }
        };
        this.state = {
            loading: false,
        };
    }
    componentDidMount() {
        const { autoFocus } = this.props;
        if (autoFocus) {
            const $this = findDOMNode(this);
            this.timeoutId = setTimeout(() => $this.focus());
        }
    }
    componentWillUnmount() {
        clearTimeout(this.timeoutId);
    }
    render() {
        const { okProps, cancelProps } = this.props;
        const { loading } = this.state;
        const cancelButton = cancelProps && (React.createElement(Button, { disabled: loading, onClick: () => {
                this.onClick(cancelProps);
            } }, cancelProps.text));
        return (React.createElement("div", null,
            cancelButton,
            React.createElement(Button, { loading: loading, type: okProps.type, onClick: () => {
                    this.onClick(okProps);
                } }, okProps.text)));
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvbW9kYWwvQWN0aW9uQnV0dG9uLnRzeCIsIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssRUFBRSxFQUFFLFNBQVMsRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUN6QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sTUFBTSxNQUFNLFdBQVcsQ0FBQztBQVkvQixNQUFNLENBQUMsT0FBTyxPQUFPLFlBQWEsU0FBUSxTQUErQztJQUd2RixZQUFZLEtBQXdCO1FBQ2xDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQWtCZixZQUFPLEdBQUcsQ0FBQyxLQUFVLEVBQUUsRUFBRTtZQUN2QixNQUFNLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxHQUFHLEtBQUssQ0FBQztZQUN2QyxJQUFJLFFBQVEsRUFBRTtnQkFDWixJQUFJLEdBQUcsQ0FBQztnQkFDUixJQUFJLFFBQVEsQ0FBQyxNQUFNLEVBQUU7b0JBQ25CLEdBQUcsR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7aUJBQzVCO3FCQUFNO29CQUNMLEdBQUcsR0FBRyxRQUFRLEVBQUUsQ0FBQztvQkFDakIsSUFBSSxDQUFDLEdBQUcsRUFBRTt3QkFDUixVQUFVLEVBQUUsQ0FBQztxQkFDZDtpQkFDRjtnQkFDRCxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxFQUFFO29CQUNuQixJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7b0JBQ2pDLEdBQUcsQ0FBQyxJQUFJLENBQ04sQ0FBQyxHQUFHLElBQVcsRUFBRSxFQUFFO3dCQUNqQixzRkFBc0Y7d0JBQ3RGLHFDQUFxQzt3QkFDckMsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7b0JBQ3RCLENBQUMsRUFDRCxHQUFHLEVBQUU7d0JBQ0gsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO29CQUNwQyxDQUFDLENBQ0YsQ0FBQztpQkFDSDthQUNGO2lCQUFNO2dCQUNMLFVBQVUsRUFBRSxDQUFDO2FBQ2Q7UUFDSCxDQUFDLENBQUM7UUE3Q0EsSUFBSSxDQUFDLEtBQUssR0FBRztZQUNYLE9BQU8sRUFBRSxLQUFLO1NBQ2YsQ0FBQztJQUNKLENBQUM7SUFFRCxpQkFBaUI7UUFDZixNQUFNLEVBQUUsU0FBUyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUNqQyxJQUFJLFNBQVMsRUFBRTtZQUNiLE1BQU0sS0FBSyxHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQXFCLENBQUM7WUFDcEQsSUFBSSxDQUFDLFNBQVMsR0FBRyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7U0FDbEQ7SUFDSCxDQUFDO0lBRUQsb0JBQW9CO1FBQ2xCLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQWdDRCxNQUFNO1FBQ0osTUFBTSxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQy9CLE1BQU0sWUFBWSxHQUFHLFdBQVcsSUFBSSxDQUNsQyxvQkFBQyxNQUFNLElBQ0wsUUFBUSxFQUFFLE9BQU8sRUFDakIsT0FBTyxFQUFFLEdBQUcsRUFBRTtnQkFDWixJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQzVCLENBQUMsSUFFQSxXQUFXLENBQUMsSUFBSSxDQUNWLENBQ1YsQ0FBQztRQUNGLE9BQU8sQ0FDTDtZQUNHLFlBQVk7WUFDYixvQkFBQyxNQUFNLElBQ0wsT0FBTyxFQUFFLE9BQU8sRUFDaEIsSUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJLEVBQ2xCLE9BQU8sRUFBRSxHQUFHLEVBQUU7b0JBQ1osSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDeEIsQ0FBQyxJQUVBLE9BQU8sQ0FBQyxJQUFJLENBQ04sQ0FDTCxDQUNQLENBQUM7SUFDSixDQUFDO0NBQ0YiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvbW9kYWwvQWN0aW9uQnV0dG9uLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZmluZERPTU5vZGUgfSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICcuLi9idXR0b24nO1xuXG5leHBvcnQgaW50ZXJmYWNlIEFjdGlvbkJ1dHRvblByb3BzIHtcbiAgb2tQcm9wcz86IGFueTtcbiAgY2FuY2VsUHJvcHM/OiBhbnk7XG4gIGF1dG9Gb2N1cz86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWN0aW9uQnV0dG9uU3RhdGUge1xuICBsb2FkaW5nOiBib29sZWFuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBY3Rpb25CdXR0b24gZXh0ZW5kcyBDb21wb25lbnQ8QWN0aW9uQnV0dG9uUHJvcHMsIEFjdGlvbkJ1dHRvblN0YXRlPiB7XG4gIHRpbWVvdXRJZDogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBBY3Rpb25CdXR0b25Qcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgbG9hZGluZzogZmFsc2UsXG4gICAgfTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGNvbnN0IHsgYXV0b0ZvY3VzIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmIChhdXRvRm9jdXMpIHtcbiAgICAgIGNvbnN0ICR0aGlzID0gZmluZERPTU5vZGUodGhpcykgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICAgIHRoaXMudGltZW91dElkID0gc2V0VGltZW91dCgoKSA9PiAkdGhpcy5mb2N1cygpKTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0SWQpO1xuICB9XG5cbiAgb25DbGljayA9IChwcm9wczogYW55KSA9PiB7XG4gICAgY29uc3QgeyBhY3Rpb25GbiwgY2xvc2VNb2RhbCB9ID0gcHJvcHM7XG4gICAgaWYgKGFjdGlvbkZuKSB7XG4gICAgICBsZXQgcmV0O1xuICAgICAgaWYgKGFjdGlvbkZuLmxlbmd0aCkge1xuICAgICAgICByZXQgPSBhY3Rpb25GbihjbG9zZU1vZGFsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldCA9IGFjdGlvbkZuKCk7XG4gICAgICAgIGlmICghcmV0KSB7XG4gICAgICAgICAgY2xvc2VNb2RhbCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocmV0ICYmIHJldC50aGVuKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBsb2FkaW5nOiB0cnVlIH0pO1xuICAgICAgICByZXQudGhlbihcbiAgICAgICAgICAoLi4uYXJnczogYW55W10pID0+IHtcbiAgICAgICAgICAgIC8vIEl0J3MgdW5uZWNlc3NhcnkgdG8gc2V0IGxvYWRpbmc9ZmFsc2UsIGZvciB0aGUgTW9kYWwgd2lsbCBiZSB1bm1vdW50ZWQgYWZ0ZXIgY2xvc2UuXG4gICAgICAgICAgICAvLyB0aGlzLnNldFN0YXRlKHsgbG9hZGluZzogZmFsc2UgfSk7XG4gICAgICAgICAgICBjbG9zZU1vZGFsKC4uLmFyZ3MpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGxvYWRpbmc6IGZhbHNlIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNsb3NlTW9kYWwoKTtcbiAgICB9XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgb2tQcm9wcywgY2FuY2VsUHJvcHMgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBsb2FkaW5nIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IGNhbmNlbEJ1dHRvbiA9IGNhbmNlbFByb3BzICYmIChcbiAgICAgIDxCdXR0b25cbiAgICAgICAgZGlzYWJsZWQ9e2xvYWRpbmd9XG4gICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICB0aGlzLm9uQ2xpY2soY2FuY2VsUHJvcHMpO1xuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICB7Y2FuY2VsUHJvcHMudGV4dH1cbiAgICAgIDwvQnV0dG9uPlxuICAgICk7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIHtjYW5jZWxCdXR0b259XG4gICAgICAgIDxCdXR0b25cbiAgICAgICAgICBsb2FkaW5nPXtsb2FkaW5nfVxuICAgICAgICAgIHR5cGU9e29rUHJvcHMudHlwZX1cbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm9uQ2xpY2sob2tQcm9wcyk7XG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIHtva1Byb3BzLnRleHR9XG4gICAgICAgIDwvQnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9