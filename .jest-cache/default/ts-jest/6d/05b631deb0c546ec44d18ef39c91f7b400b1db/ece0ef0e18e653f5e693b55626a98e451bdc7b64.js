import { __decorate } from "tslib";
import React from 'react';
import PropTypes from 'prop-types';
import omit from 'lodash/omit';
import shallowEqual from 'lodash/isEqual';
import noop from 'lodash/noop';
import isElement from 'lodash/isElement';
import ClassNames from 'classnames';
import Align from 'choerodon-ui/lib/align';
import Portal from 'choerodon-ui/lib/rc-components/util/Portal';
import { getProPrefixCls } from 'choerodon-ui/lib/configure';
import Animate from '../animate';
import ViewComponent from '../core/ViewComponent';
import PopupInner from './PopupInner';
import autobind from '../_util/autobind';
let popupContainer;
/**
 * 记录ID生成器
 */
const PopupKeyGen = (function* (start) {
    while (true) {
        yield `popup-key-${start++}`;
    }
})(1);
export default class Popup extends ViewComponent {
    constructor() {
        super(...arguments);
        this.contentRendered = false;
        this.popupKey = PopupKeyGen.next().value;
        this.saveRef = align => (this.align = align);
    }
    getOtherProps() {
        const otherProps = omit(super.getOtherProps(), [
            'align',
            'transitionName',
            'getRootDomNode',
            'getPopupContainer',
            'getClassNameFromAlign',
            'getStyleFromAlign',
            'onAlign',
            'onAnimateAppear',
            'onAnimateEnter',
            'onAnimateLeave',
            'onAnimateEnd',
        ]);
        return otherProps;
    }
    render() {
        const { hidden, align, transitionName, getRootDomNode, children, onAnimateAppear = noop, onAnimateEnter = noop, onAnimateLeave = noop, onAnimateEnd = noop, } = this.props;
        if (!hidden) {
            this.contentRendered = true;
        }
        return this.contentRendered ? (React.createElement(Portal, { key: this.popupKey, getContainer: this.getContainer },
            React.createElement(Animate, { component: "", exclusive: true, transitionAppear: true, transitionName: transitionName, hiddenProp: "hidden", onAppear: onAnimateAppear, onEnter: onAnimateEnter, onLeave: onAnimateLeave, onEnd: onAnimateEnd },
                React.createElement(Align, { ref: this.saveRef, key: "align", childrenProps: { hidden: 'hidden' }, align: align, onAlign: this.onAlign, target: getRootDomNode, hidden: hidden, monitorWindowResize: true },
                    React.createElement(PopupInner, Object.assign({}, omit(this.getMergedProps(), ['ref'])), children))))) : null;
    }
    getContainer() {
        const { getPopupContainer, getRootDomNode = noop } = this.props;
        if (typeof window !== 'undefined') {
            const doc = window.document;
            popupContainer = doc.createElement('div');
            popupContainer.className = ClassNames(getProPrefixCls('popup-container'));
            const mountNode = getPopupContainer ? getPopupContainer(getRootDomNode()) : doc.body;
            if (isElement(mountNode)) {
                mountNode.appendChild(popupContainer);
            }
            else {
                doc.body.appendChild(popupContainer);
            }
        }
        return popupContainer;
    }
    onAlign(source, align, target) {
        const { getClassNameFromAlign = noop, getStyleFromAlign = noop, onAlign = noop } = this.props;
        const currentAlignClassName = getClassNameFromAlign(align);
        if (this.currentAlignClassName !== currentAlignClassName) {
            this.currentAlignClassName = currentAlignClassName;
            source.className = this.getMergedClassNames(currentAlignClassName);
        }
        const currentAlignStyle = getStyleFromAlign(target, align);
        if (!shallowEqual(this.currentAlignStyle, currentAlignStyle)) {
            this.currentAlignStyle = currentAlignStyle;
            Object.assign(source.style, currentAlignStyle);
        }
        onAlign(source, align, target);
    }
    forceAlign() {
        if (this.align) {
            this.align.forceAlign();
        }
    }
}
Popup.displayName = 'Popup';
Popup.propTypes = {
    align: PropTypes.object,
    onAlign: PropTypes.func,
    getRootDomNode: PropTypes.func,
    getPopupContainer: PropTypes.func,
    transitionName: PropTypes.string,
    onAnimateAppear: PropTypes.func,
    onAnimateEnter: PropTypes.func,
    onAnimateLeave: PropTypes.func,
    onAnimateEnd: PropTypes.func,
    getStyleFromAlign: PropTypes.func,
    getClassNameFromAlign: PropTypes.func,
    ...ViewComponent.propTypes,
};
Popup.defaultProps = {
    suffixCls: 'popup',
    transitionName: 'zoom',
};
__decorate([
    autobind
], Popup.prototype, "getContainer", null);
__decorate([
    autobind
], Popup.prototype, "onAlign", null);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,