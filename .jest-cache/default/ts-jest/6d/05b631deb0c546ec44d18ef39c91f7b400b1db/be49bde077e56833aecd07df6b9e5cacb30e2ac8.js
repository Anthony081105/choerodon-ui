import React, { Component } from 'react';
import classNames from 'classnames';
import omit from 'lodash/omit';
import Animate from '../animate';
import addEventListener from '../_util/addEventListener';
import { getPrefixCls } from '../configure';
import getScroll from '../_util/getScroll';
import scrollTo from '../_util/scrollTo';
function getDefaultTarget() {
    return window;
}
export default class BackTop extends Component {
    constructor() {
        super(...arguments);
        this.state = {
            visible: false,
        };
        this.scrollToTop = (e) => {
            const { target = getDefaultTarget, onClick } = this.props;
            scrollTo(0, {
                getContainer: target,
            });
            if (typeof onClick === 'function') {
                onClick(e);
            }
        };
        this.handleScroll = () => {
            const { visibilityHeight, target = getDefaultTarget } = this.props;
            const scrollTop = getScroll(target(), true);
            this.setState({
                visible: scrollTop > visibilityHeight,
            });
        };
    }
    componentDidMount() {
        const { target = getDefaultTarget } = this.props;
        this.scrollEvent = addEventListener(target(), 'scroll', this.handleScroll);
        this.handleScroll();
    }
    componentWillUnmount() {
        if (this.scrollEvent) {
            this.scrollEvent.remove();
        }
    }
    render() {
        const { prefixCls: customizePrefixCls, className = '', visible: propsVisible, children, } = this.props;
        const { visible: stateVisible } = this.state;
        const prefixCls = getPrefixCls('back-top', customizePrefixCls);
        const classString = classNames(prefixCls, className);
        const defaultElement = (React.createElement("div", { className: `${prefixCls}-content` },
            React.createElement("div", { className: `${prefixCls}-icon` })));
        // fix https://fb.me/react-unknown-prop
        const divProps = omit(this.props, [
            'prefixCls',
            'className',
            'children',
            'visibilityHeight',
            'target',
            'visible',
        ]);
        const visible = 'visible' in this.props ? propsVisible : stateVisible;
        const backTopBtn = visible ? (React.createElement("div", Object.assign({}, divProps, { className: classString, onClick: this.scrollToTop }), children || defaultElement)) : null;
        return (React.createElement(Animate, { component: "", transitionName: "fade" }, backTopBtn));
    }
}
BackTop.displayName = 'BackTop';
BackTop.defaultProps = {
    visibilityHeight: 400,
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvYmFjay10b3AvaW5kZXgudHN4IiwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxFQUFFLEVBQUUsU0FBUyxFQUFpQixNQUFNLE9BQU8sQ0FBQztBQUN4RCxPQUFPLFVBQVUsTUFBTSxZQUFZLENBQUM7QUFDcEMsT0FBTyxJQUFJLE1BQU0sYUFBYSxDQUFDO0FBQy9CLE9BQU8sT0FBTyxNQUFNLFlBQVksQ0FBQztBQUNqQyxPQUFPLGdCQUFnQixNQUFNLDJCQUEyQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDNUMsT0FBTyxTQUFTLE1BQU0sb0JBQW9CLENBQUM7QUFDM0MsT0FBTyxRQUFRLE1BQU0sbUJBQW1CLENBQUM7QUFFekMsU0FBUyxnQkFBZ0I7SUFDdkIsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQVlELE1BQU0sQ0FBQyxPQUFPLE9BQU8sT0FBUSxTQUFRLFNBQTRCO0lBQWpFOztRQVNFLFVBQUssR0FBRztZQUNOLE9BQU8sRUFBRSxLQUFLO1NBQ2YsQ0FBQztRQWNGLGdCQUFXLEdBQUcsQ0FBQyxDQUFtQyxFQUFFLEVBQUU7WUFDcEQsTUFBTSxFQUFFLE1BQU0sR0FBRyxnQkFBZ0IsRUFBRSxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQzFELFFBQVEsQ0FBQyxDQUFDLEVBQUU7Z0JBQ1YsWUFBWSxFQUFFLE1BQU07YUFDckIsQ0FBQyxDQUFDO1lBQ0gsSUFBSSxPQUFPLE9BQU8sS0FBSyxVQUFVLEVBQUU7Z0JBQ2pDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNaO1FBQ0gsQ0FBQyxDQUFDO1FBRUYsaUJBQVksR0FBRyxHQUFHLEVBQUU7WUFDbEIsTUFBTSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sR0FBRyxnQkFBZ0IsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7WUFDbkUsTUFBTSxTQUFTLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQzVDLElBQUksQ0FBQyxRQUFRLENBQUM7Z0JBQ1osT0FBTyxFQUFFLFNBQVMsR0FBSSxnQkFBMkI7YUFDbEQsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDO0lBMkNKLENBQUM7SUF2RUMsaUJBQWlCO1FBQ2YsTUFBTSxFQUFFLE1BQU0sR0FBRyxnQkFBZ0IsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDakQsSUFBSSxDQUFDLFdBQVcsR0FBRyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzNFLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRUQsb0JBQW9CO1FBQ2xCLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNwQixJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQzNCO0lBQ0gsQ0FBQztJQW9CRCxNQUFNO1FBQ0osTUFBTSxFQUNKLFNBQVMsRUFBRSxrQkFBa0IsRUFDN0IsU0FBUyxHQUFHLEVBQUUsRUFDZCxPQUFPLEVBQUUsWUFBWSxFQUNyQixRQUFRLEdBQ1QsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ2YsTUFBTSxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQzdDLE1BQU0sU0FBUyxHQUFHLFlBQVksQ0FBQyxVQUFVLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztRQUMvRCxNQUFNLFdBQVcsR0FBRyxVQUFVLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBRXJELE1BQU0sY0FBYyxHQUFHLENBQ3JCLDZCQUFLLFNBQVMsRUFBRSxHQUFHLFNBQVMsVUFBVTtZQUNwQyw2QkFBSyxTQUFTLEVBQUUsR0FBRyxTQUFTLE9BQU8sR0FBSSxDQUNuQyxDQUNQLENBQUM7UUFFRix1Q0FBdUM7UUFDdkMsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDaEMsV0FBVztZQUNYLFdBQVc7WUFDWCxVQUFVO1lBQ1Ysa0JBQWtCO1lBQ2xCLFFBQVE7WUFDUixTQUFTO1NBQ1YsQ0FBQyxDQUFDO1FBRUgsTUFBTSxPQUFPLEdBQUcsU0FBUyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDO1FBRXRFLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FDM0IsNkNBQVMsUUFBUSxJQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxXQUFXLEtBQ2pFLFFBQVEsSUFBSSxjQUFjLENBQ3ZCLENBQ1AsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBRVQsT0FBTyxDQUNMLG9CQUFDLE9BQU8sSUFBQyxTQUFTLEVBQUMsRUFBRSxFQUFDLGNBQWMsRUFBQyxNQUFNLElBQ3hDLFVBQVUsQ0FDSCxDQUNYLENBQUM7SUFDSixDQUFDOztBQWxGTSxtQkFBVyxHQUFHLFNBQVMsQ0FBQztBQUV4QixvQkFBWSxHQUFHO0lBQ3BCLGdCQUFnQixFQUFFLEdBQUc7Q0FDdEIsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvaHVpaHVhd2svRG9jdW1lbnRzL29wdC9jaG9lcm9kb24tdWkvY29tcG9uZW50cy9iYWNrLXRvcC9pbmRleC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCwgQ1NTUHJvcGVydGllcyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IG9taXQgZnJvbSAnbG9kYXNoL29taXQnO1xuaW1wb3J0IEFuaW1hdGUgZnJvbSAnLi4vYW5pbWF0ZSc7XG5pbXBvcnQgYWRkRXZlbnRMaXN0ZW5lciBmcm9tICcuLi9fdXRpbC9hZGRFdmVudExpc3RlbmVyJztcbmltcG9ydCB7IGdldFByZWZpeENscyB9IGZyb20gJy4uL2NvbmZpZ3VyZSc7XG5pbXBvcnQgZ2V0U2Nyb2xsIGZyb20gJy4uL191dGlsL2dldFNjcm9sbCc7XG5pbXBvcnQgc2Nyb2xsVG8gZnJvbSAnLi4vX3V0aWwvc2Nyb2xsVG8nO1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0VGFyZ2V0KCkge1xuICByZXR1cm4gd2luZG93O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJhY2tUb3BQcm9wcyB7XG4gIHZpc2liaWxpdHlIZWlnaHQ/OiBudW1iZXI7XG4gIG9uQ2xpY2s/OiBSZWFjdC5Nb3VzZUV2ZW50SGFuZGxlcjxIVE1MRWxlbWVudD47XG4gIHRhcmdldD86ICgpID0+IEhUTUxFbGVtZW50IHwgV2luZG93O1xuICBwcmVmaXhDbHM/OiBzdHJpbmc7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgc3R5bGU/OiBDU1NQcm9wZXJ0aWVzO1xuICB2aXNpYmxlPzogYm9vbGVhbjsgLy8gT25seSBmb3IgdGVzdC4gRG9uJ3QgdXNlIGl0LlxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCYWNrVG9wIGV4dGVuZHMgQ29tcG9uZW50PEJhY2tUb3BQcm9wcywgYW55PiB7XG4gIHN0YXRpYyBkaXNwbGF5TmFtZSA9ICdCYWNrVG9wJztcblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIHZpc2liaWxpdHlIZWlnaHQ6IDQwMCxcbiAgfTtcblxuICBzY3JvbGxFdmVudDogYW55O1xuXG4gIHN0YXRlID0ge1xuICAgIHZpc2libGU6IGZhbHNlLFxuICB9O1xuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGNvbnN0IHsgdGFyZ2V0ID0gZ2V0RGVmYXVsdFRhcmdldCB9ID0gdGhpcy5wcm9wcztcbiAgICB0aGlzLnNjcm9sbEV2ZW50ID0gYWRkRXZlbnRMaXN0ZW5lcih0YXJnZXQoKSwgJ3Njcm9sbCcsIHRoaXMuaGFuZGxlU2Nyb2xsKTtcbiAgICB0aGlzLmhhbmRsZVNjcm9sbCgpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMuc2Nyb2xsRXZlbnQpIHtcbiAgICAgIHRoaXMuc2Nyb2xsRXZlbnQucmVtb3ZlKCk7XG4gICAgfVxuICB9XG5cbiAgc2Nyb2xsVG9Ub3AgPSAoZTogUmVhY3QuTW91c2VFdmVudDxIVE1MRGl2RWxlbWVudD4pID0+IHtcbiAgICBjb25zdCB7IHRhcmdldCA9IGdldERlZmF1bHRUYXJnZXQsIG9uQ2xpY2sgfSA9IHRoaXMucHJvcHM7XG4gICAgc2Nyb2xsVG8oMCwge1xuICAgICAgZ2V0Q29udGFpbmVyOiB0YXJnZXQsXG4gICAgfSk7XG4gICAgaWYgKHR5cGVvZiBvbkNsaWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBvbkNsaWNrKGUpO1xuICAgIH1cbiAgfTtcblxuICBoYW5kbGVTY3JvbGwgPSAoKSA9PiB7XG4gICAgY29uc3QgeyB2aXNpYmlsaXR5SGVpZ2h0LCB0YXJnZXQgPSBnZXREZWZhdWx0VGFyZ2V0IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHNjcm9sbFRvcCA9IGdldFNjcm9sbCh0YXJnZXQoKSwgdHJ1ZSk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICB2aXNpYmxlOiBzY3JvbGxUb3AgPiAodmlzaWJpbGl0eUhlaWdodCBhcyBudW1iZXIpLFxuICAgIH0pO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBwcmVmaXhDbHM6IGN1c3RvbWl6ZVByZWZpeENscyxcbiAgICAgIGNsYXNzTmFtZSA9ICcnLFxuICAgICAgdmlzaWJsZTogcHJvcHNWaXNpYmxlLFxuICAgICAgY2hpbGRyZW4sXG4gICAgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyB2aXNpYmxlOiBzdGF0ZVZpc2libGUgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgcHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCdiYWNrLXRvcCcsIGN1c3RvbWl6ZVByZWZpeENscyk7XG4gICAgY29uc3QgY2xhc3NTdHJpbmcgPSBjbGFzc05hbWVzKHByZWZpeENscywgY2xhc3NOYW1lKTtcblxuICAgIGNvbnN0IGRlZmF1bHRFbGVtZW50ID0gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9e2Ake3ByZWZpeENsc30tY29udGVudGB9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YCR7cHJlZml4Q2xzfS1pY29uYH0gLz5cbiAgICAgIDwvZGl2PlxuICAgICk7XG5cbiAgICAvLyBmaXggaHR0cHM6Ly9mYi5tZS9yZWFjdC11bmtub3duLXByb3BcbiAgICBjb25zdCBkaXZQcm9wcyA9IG9taXQodGhpcy5wcm9wcywgW1xuICAgICAgJ3ByZWZpeENscycsXG4gICAgICAnY2xhc3NOYW1lJyxcbiAgICAgICdjaGlsZHJlbicsXG4gICAgICAndmlzaWJpbGl0eUhlaWdodCcsXG4gICAgICAndGFyZ2V0JyxcbiAgICAgICd2aXNpYmxlJyxcbiAgICBdKTtcblxuICAgIGNvbnN0IHZpc2libGUgPSAndmlzaWJsZScgaW4gdGhpcy5wcm9wcyA/IHByb3BzVmlzaWJsZSA6IHN0YXRlVmlzaWJsZTtcblxuICAgIGNvbnN0IGJhY2tUb3BCdG4gPSB2aXNpYmxlID8gKFxuICAgICAgPGRpdiB7Li4uZGl2UHJvcHN9IGNsYXNzTmFtZT17Y2xhc3NTdHJpbmd9IG9uQ2xpY2s9e3RoaXMuc2Nyb2xsVG9Ub3B9PlxuICAgICAgICB7Y2hpbGRyZW4gfHwgZGVmYXVsdEVsZW1lbnR9XG4gICAgICA8L2Rpdj5cbiAgICApIDogbnVsbDtcblxuICAgIHJldHVybiAoXG4gICAgICA8QW5pbWF0ZSBjb21wb25lbnQ9XCJcIiB0cmFuc2l0aW9uTmFtZT1cImZhZGVcIj5cbiAgICAgICAge2JhY2tUb3BCdG59XG4gICAgICA8L0FuaW1hdGU+XG4gICAgKTtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9