import React, { Component } from 'react';
import Checkbox from '../checkbox';
import Radio from '../radio';
export default class SelectionBox extends Component {
    constructor(props) {
        super(props);
        this.state = {
            checked: this.getCheckState(props),
        };
    }
    componentDidMount() {
        this.subscribe();
    }
    componentWillUnmount() {
        if (this.unsubscribe) {
            this.unsubscribe();
        }
    }
    subscribe() {
        const { store } = this.props;
        this.unsubscribe = store.subscribe(() => {
            const checked = this.getCheckState(this.props);
            this.setState({ checked });
        });
    }
    getCheckState(props) {
        const { store, defaultSelection, rowIndex } = props;
        let checked = false;
        if (store.getState().selectionDirty) {
            checked = store.getState().selectedRowKeys.indexOf(rowIndex) >= 0;
        }
        else {
            checked =
                store.getState().selectedRowKeys.indexOf(rowIndex) >= 0 ||
                    defaultSelection.indexOf(rowIndex) >= 0;
        }
        return checked;
    }
    render() {
        const { type, rowIndex, ...rest } = this.props;
        const { checked } = this.state;
        if (type === 'radio') {
            return React.createElement(Radio, Object.assign({ checked: checked, value: rowIndex }, rest));
        }
        return React.createElement(Checkbox, Object.assign({ checked: checked }, rest));
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvdGFibGUvU2VsZWN0aW9uQm94LnRzeCIsIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssRUFBRSxFQUFFLFNBQVMsRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUN6QyxPQUFPLFFBQVEsTUFBTSxhQUFhLENBQUM7QUFDbkMsT0FBTyxLQUFLLE1BQU0sVUFBVSxDQUFDO0FBRzdCLE1BQU0sQ0FBQyxPQUFPLE9BQU8sWUFBYSxTQUFRLFNBQStDO0lBR3ZGLFlBQVksS0FBd0I7UUFDbEMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRWIsSUFBSSxDQUFDLEtBQUssR0FBRztZQUNYLE9BQU8sRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQztTQUNuQyxDQUFDO0lBQ0osQ0FBQztJQUVELGlCQUFpQjtRQUNmLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNuQixDQUFDO0lBRUQsb0JBQW9CO1FBQ2xCLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNwQixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDcEI7SUFDSCxDQUFDO0lBRUQsU0FBUztRQUNQLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQzdCLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7WUFDdEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDL0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDN0IsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsYUFBYSxDQUFDLEtBQXdCO1FBQ3BDLE1BQU0sRUFBRSxLQUFLLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUSxFQUFFLEdBQUcsS0FBSyxDQUFDO1FBQ3BELElBQUksT0FBTyxHQUFHLEtBQUssQ0FBQztRQUNwQixJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxjQUFjLEVBQUU7WUFDbkMsT0FBTyxHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNuRTthQUFNO1lBQ0wsT0FBTztnQkFDTCxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO29CQUN2RCxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzNDO1FBQ0QsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQztJQUVELE1BQU07UUFDSixNQUFNLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxHQUFHLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDL0MsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFFL0IsSUFBSSxJQUFJLEtBQUssT0FBTyxFQUFFO1lBQ3BCLE9BQU8sb0JBQUMsS0FBSyxrQkFBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxRQUFRLElBQU0sSUFBSSxFQUFJLENBQUM7U0FDL0Q7UUFDRCxPQUFPLG9CQUFDLFFBQVEsa0JBQUMsT0FBTyxFQUFFLE9BQU8sSUFBTSxJQUFJLEVBQUksQ0FBQztJQUNsRCxDQUFDO0NBQ0YiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvdGFibGUvU2VsZWN0aW9uQm94LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IENoZWNrYm94IGZyb20gJy4uL2NoZWNrYm94JztcbmltcG9ydCBSYWRpbyBmcm9tICcuLi9yYWRpbyc7XG5pbXBvcnQgeyBTZWxlY3Rpb25Cb3hQcm9wcywgU2VsZWN0aW9uQm94U3RhdGUgfSBmcm9tICcuL2ludGVyZmFjZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlbGVjdGlvbkJveCBleHRlbmRzIENvbXBvbmVudDxTZWxlY3Rpb25Cb3hQcm9wcywgU2VsZWN0aW9uQm94U3RhdGU+IHtcbiAgdW5zdWJzY3JpYmU6ICgpID0+IHZvaWQ7XG5cbiAgY29uc3RydWN0b3IocHJvcHM6IFNlbGVjdGlvbkJveFByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGNoZWNrZWQ6IHRoaXMuZ2V0Q2hlY2tTdGF0ZShwcm9wcyksXG4gICAgfTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuc3Vic2NyaWJlKCk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy51bnN1YnNjcmliZSkge1xuICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgfVxuXG4gIHN1YnNjcmliZSgpIHtcbiAgICBjb25zdCB7IHN0b3JlIH0gPSB0aGlzLnByb3BzO1xuICAgIHRoaXMudW5zdWJzY3JpYmUgPSBzdG9yZS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgY29uc3QgY2hlY2tlZCA9IHRoaXMuZ2V0Q2hlY2tTdGF0ZSh0aGlzLnByb3BzKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBjaGVja2VkIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0Q2hlY2tTdGF0ZShwcm9wczogU2VsZWN0aW9uQm94UHJvcHMpIHtcbiAgICBjb25zdCB7IHN0b3JlLCBkZWZhdWx0U2VsZWN0aW9uLCByb3dJbmRleCB9ID0gcHJvcHM7XG4gICAgbGV0IGNoZWNrZWQgPSBmYWxzZTtcbiAgICBpZiAoc3RvcmUuZ2V0U3RhdGUoKS5zZWxlY3Rpb25EaXJ0eSkge1xuICAgICAgY2hlY2tlZCA9IHN0b3JlLmdldFN0YXRlKCkuc2VsZWN0ZWRSb3dLZXlzLmluZGV4T2Yocm93SW5kZXgpID49IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNoZWNrZWQgPVxuICAgICAgICBzdG9yZS5nZXRTdGF0ZSgpLnNlbGVjdGVkUm93S2V5cy5pbmRleE9mKHJvd0luZGV4KSA+PSAwIHx8XG4gICAgICAgIGRlZmF1bHRTZWxlY3Rpb24uaW5kZXhPZihyb3dJbmRleCkgPj0gMDtcbiAgICB9XG4gICAgcmV0dXJuIGNoZWNrZWQ7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyB0eXBlLCByb3dJbmRleCwgLi4ucmVzdCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IGNoZWNrZWQgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICBpZiAodHlwZSA9PT0gJ3JhZGlvJykge1xuICAgICAgcmV0dXJuIDxSYWRpbyBjaGVja2VkPXtjaGVja2VkfSB2YWx1ZT17cm93SW5kZXh9IHsuLi5yZXN0fSAvPjtcbiAgICB9XG4gICAgcmV0dXJuIDxDaGVja2JveCBjaGVja2VkPXtjaGVja2VkfSB7Li4ucmVzdH0gLz47XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==