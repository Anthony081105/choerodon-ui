import { __decorate } from "tslib";
import React from 'react';
import moment from 'moment';
import classNames from 'classnames';
import { action, computed, observable } from 'mobx';
import { observer } from 'mobx-react';
import autobind from '../_util/autobind';
import DaysView, { alwaysValidDate } from './DaysView';
import { $l } from '../locale-context';
import { stopEvent } from '../_util/EventManager';
const stepMapping = {
    ["h" /* hour */]: 'hour',
    ["m" /* minute */]: 'minute',
    ["s" /* second */]: 'second',
};
let TimesView = class TimesView extends DaysView {
    get showHour() {
        const { format } = this.observableProps;
        return format.indexOf('H') > -1 || format.indexOf('h') > -1 || format.indexOf('k') > -1;
    }
    get showMinute() {
        const { format } = this.observableProps;
        return format.indexOf('m') > -1;
    }
    get showSecond() {
        const { format } = this.observableProps;
        return format.indexOf('s') > -1;
    }
    get use12Hours() {
        const { format } = this.observableProps;
        return format.indexOf('h') > -1 || format.indexOf('a') > -1 || format.indexOf('A') > -1;
    }
    get timeUnitQueue() {
        const { showHour, showMinute, showSecond, use12Hours } = this;
        const queue = [];
        if (showHour) {
            queue.push("h" /* hour */);
        }
        if (showMinute) {
            queue.push("m" /* minute */);
        }
        if (showSecond) {
            queue.push("s" /* second */);
        }
        if (use12Hours) {
            queue.push("a" /* a */);
        }
        return queue;
    }
    get barStyle() {
        return {
            width: `${100 / this.timeUnitQueue.length}%`,
        };
    }
    get activeStyle() {
        const { timeUnitQueue } = this;
        const width = 100 / timeUnitQueue.length;
        return {
            width: `${width}%`,
            left: `${timeUnitQueue.indexOf(this.getCurrentUnit()) * width}%`,
        };
    }
    savePanel(node) {
        this.panel = node;
    }
    getObservableProps(props) {
        return {
            format: props.format,
        };
    }
    componentDidMount() {
        if (this.panel) {
            // 兼容Firefox wheel为通用事件
            this.panel.addEventListener('wheel', this.handleWheel, { passive: false });
        }
    }
    componentWillUnmount() {
        if (this.panel) {
            this.panel.removeEventListener('wheel', this.handleWheel);
        }
    }
    handleDateTimeSelect() {
        this.changeViewMode("dateTime" /* dateTime */);
    }
    handleKeyDownHome(e) {
        this.handleKeyDownPageUp(e);
    }
    handleKeyDownEnd(e) {
        this.handleKeyDownPageDown(e);
    }
    handleKeyDownLeft(e) {
        stopEvent(e);
        if (e.altKey) {
            if (this.props.mode !== "time" /* time */) {
                this.changeViewMode("dateTime" /* dateTime */);
            }
        }
        else {
            this.changeUnit(this.getPrevUnit());
        }
    }
    handleKeyDownRight(e) {
        stopEvent(e);
        if (!e.altKey) {
            this.changeUnit(this.getNextUnit());
        }
    }
    handleKeyDownUp(e) {
        stopEvent(e);
        const unit = this.getCurrentUnit();
        if (unit === "a" /* a */) {
            this.changeSelectedDate(this.getCloneDate().subtract(12, "h" /* hour */));
        }
        else {
            const { step } = this.props;
            const unitStep = step[stepMapping[unit]] || 1;
            const date = this.getCloneDate();
            const parentUnit = unit === "s" /* second */ ? "m" /* minute */ : unit === "m" /* minute */ ? "h" /* hour */ : null;
            if (parentUnit) {
                const parentStep = step[stepMapping[parentUnit]];
                if (parentStep) {
                    const preValue = date.get(parentUnit);
                    date.subtract(unitStep, unit);
                    if (preValue !== date.get(parentUnit)) {
                        date.subtract(parentStep - 1, parentUnit);
                    }
                    this.changeSelectedDate(date);
                    return;
                }
            }
            this.changeSelectedDate(date.subtract(unitStep, unit));
        }
    }
    handleKeyDownDown(e) {
        stopEvent(e);
        const unit = this.getCurrentUnit();
        if (unit === "a" /* a */) {
            this.changeSelectedDate(this.getCloneDate().add(12, "h" /* hour */));
        }
        else {
            const { step } = this.props;
            const unitStep = step[stepMapping[unit]] || 1;
            const date = this.getCloneDate();
            const parentUnit = unit === "s" /* second */ ? "m" /* minute */ : unit === "m" /* minute */ ? "h" /* hour */ : null;
            if (parentUnit) {
                const parentStep = step[stepMapping[parentUnit]];
                if (parentStep) {
                    const preValue = date.get(parentUnit);
                    date.add(unitStep, unit);
                    if (preValue !== date.get(parentUnit)) {
                        date.add(parentStep - 1, parentUnit);
                    }
                    this.changeSelectedDate(date);
                    return;
                }
            }
            this.changeSelectedDate(date.add(unitStep, unit));
        }
    }
    handleKeyDownPageUp(e) {
        stopEvent(e);
        const unit = this.getCurrentUnit();
        if (unit === "a" /* a */) {
            this.changeSelectedDate(this.getCloneDate().set("h" /* hour */, 0));
        }
        else {
            this.changeSelectedDate(this.getCloneDate().set(unit, 0));
        }
    }
    handleKeyDownPageDown(e) {
        stopEvent(e);
        const unit = this.getCurrentUnit();
        if (unit === "a" /* a */) {
            this.changeSelectedDate(this.getCloneDate().set("h" /* hour */, 12));
        }
        else {
            const { step } = this.props;
            const unitStep = step[stepMapping[unit]] || 1;
            const size = unit === "h" /* hour */ ? this.use12Hours ? 12 : 24 : 60;
            this.changeSelectedDate(this.getCloneDate().set(unit, size - unitStep));
        }
    }
    handleTimeCellClick(date, unit) {
        this.changeUnit(unit);
        this.changeSelectedDate(date);
    }
    handleWheel(e) {
        e.preventDefault();
        if (e.deltaY > 0) {
            this.handleKeyDownDown(e);
        }
        else if (e.deltaY < 0) {
            this.handleKeyDownUp(e);
        }
    }
    renderHeader() {
        const { prefixCls, props: { date, mode }, observableProps: { format }, } = this;
        if (mode === "time" /* time */) {
            return (React.createElement("div", { className: `${prefixCls}-header` },
                React.createElement("span", { className: `${prefixCls}-view-select` }, date.format(format))));
        }
        return (React.createElement("div", { className: `${prefixCls}-header` },
            React.createElement("a", { className: `${prefixCls}-view-select`, onClick: this.handleMonthSelect }, date.localeData().monthsShort(date)),
            React.createElement("a", { className: `${prefixCls}-view-select`, onClick: this.handleDateTimeSelect }, date.date()),
            React.createElement("a", { className: `${prefixCls}-view-select`, onClick: this.handleYearSelect }, date.year())));
    }
    renderFooter() {
        const { prefixCls } = this;
        return (React.createElement("div", { className: `${prefixCls}-footer` },
            React.createElement("a", { className: `${prefixCls}-footer-now-btn`, onClick: this.choose.bind(this, moment()) }, $l('DatePicker', 'now')),
            React.createElement("a", { className: `${prefixCls}-footer-view-select`, onClick: this.choose.bind(this, this.props.date) }, $l('DatePicker', 'ok'))));
    }
    renderPanel() {
        const className = this.getPanelClass();
        return (React.createElement("div", { ref: this.savePanel, className: className },
            React.createElement("div", { className: `${className}-inner` }, this.renderPanelBody())));
    }
    renderPanelBody() {
        const { showHour, showMinute, showSecond, use12Hours, activeStyle } = this;
        return [
            showHour && this.getTimeBar("h" /* hour */),
            showMinute && this.getTimeBar("m" /* minute */),
            showSecond && this.getTimeBar("s" /* second */),
            use12Hours && this.getTimeBar("a" /* a */),
            React.createElement("div", { key: "active", style: activeStyle, className: `${this.prefixCls}-time-focus-active` }),
        ];
    }
    renderCell(props) {
        return React.createElement("li", Object.assign({}, props));
    }
    getTimeBar(unit) {
        const { prefixCls, use12Hours, props: { date, renderer = this.renderCell, isValidDate = alwaysValidDate, step }, observableProps: { format }, } = this;
        const isUpperCase = format.indexOf('A') > -1;
        const items = [];
        const selected = date.clone();
        const finalUnit = unit === "a" /* a */ ? "h" /* hour */ : unit;
        const selectedValue = selected.get(finalUnit);
        const size = unit === "a" /* a */ ? 13 : unit === "h" /* hour */ ? use12Hours ? 12 : 24 : 60;
        const begin = unit === "a" /* a */ ? selectedValue % 12 : unit === "h" /* hour */ && use12Hours && selectedValue > 11 ? 12 : 0;
        const pre = date.clone().set(finalUnit, begin);
        const last = pre.clone().add(size, finalUnit);
        while (pre.isBefore(last)) {
            const current = pre.clone();
            const isDisabled = !isValidDate(current, selected);
            const text = unit === "a" /* a */ ?
                current.format(isUpperCase ? 'A' : 'a') :
                String(pre.get(unit) - (use12Hours && pre.get(unit) > 11 ? 12 : 0) || (use12Hours && finalUnit === "h" /* hour */ ? 12 : 0));
            const className = classNames(`${prefixCls}-cell`, {
                [`${prefixCls}-selected`]: unit === "a" /* a */ ? current.get("h" /* hour */) === selectedValue : current.isSame(selected, finalUnit),
                [`${prefixCls}-disabled`]: isDisabled,
            });
            const props = {
                key: text,
                className,
                children: React.createElement("div", { className: `${prefixCls}-cell-inner` }, text),
            };
            if (!isDisabled) {
                props.onClick = this.handleTimeCellClick.bind(this, current, unit);
            }
            items.push(renderer(props, text, current, selected));
            pre.add(unit === "a" /* a */ ? 12 : (step[stepMapping[unit]] || 1), finalUnit);
        }
        const top = unit === "a" /* a */ ?
            -Math.floor(selectedValue / 12) :
            (unit === "h" /* hour */ && use12Hours ?
                -selectedValue % 12 :
                -selectedValue) / (step[stepMapping[unit]] || 1);
        return (React.createElement("div", { key: unit, className: `${prefixCls}-time-list`, onMouseEnter: this.changeUnit.bind(this, unit), style: this.barStyle },
            React.createElement("ul", { style: { top: `${(top + 4.5) * 100}%` } }, items),
            React.createElement("div", { className: `${prefixCls}-time-focus` })));
    }
    getPanelClass() {
        return `${this.prefixCls}-time-panel`;
    }
    getCurrentUnit() {
        const { currentUnit } = this;
        return currentUnit || this.timeUnitQueue[0];
    }
    getPrevUnit() {
        const { timeUnitQueue } = this;
        return timeUnitQueue[timeUnitQueue.indexOf(this.getCurrentUnit()) - 1];
    }
    getNextUnit() {
        const { timeUnitQueue } = this;
        return timeUnitQueue[timeUnitQueue.indexOf(this.getCurrentUnit()) + 1];
    }
    changeUnit(unit) {
        if (unit !== undefined && unit !== this.currentUnit) {
            this.currentUnit = unit;
        }
    }
    choose(date) {
        const { mode } = this.props;
        if (mode !== "time" /* time */) {
            this.changeSelectedDate(date);
            this.changeViewMode(mode);
        }
        super.choose(date);
    }
};
TimesView.displayName = 'TimesView';
TimesView.type = "time" /* time */;
__decorate([
    observable
], TimesView.prototype, "currentUnit", void 0);
__decorate([
    computed
], TimesView.prototype, "showHour", null);
__decorate([
    computed
], TimesView.prototype, "showMinute", null);
__decorate([
    computed
], TimesView.prototype, "showSecond", null);
__decorate([
    computed
], TimesView.prototype, "use12Hours", null);
__decorate([
    computed
], TimesView.prototype, "timeUnitQueue", null);
__decorate([
    computed
], TimesView.prototype, "barStyle", null);
__decorate([
    computed
], TimesView.prototype, "activeStyle", null);
__decorate([
    autobind
], TimesView.prototype, "savePanel", null);
__decorate([
    autobind
], TimesView.prototype, "handleDateTimeSelect", null);
__decorate([
    autobind
], TimesView.prototype, "handleWheel", null);
__decorate([
    autobind
], TimesView.prototype, "renderCell", null);
__decorate([
    action
], TimesView.prototype, "changeUnit", null);
TimesView = __decorate([
    observer
], TimesView);
export default TimesView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,