import { __decorate } from "tslib";
import React from 'react';
import classNames from 'classnames';
import autobind from '../_util/autobind';
import Icon from '../icon';
import DaysView, { alwaysValidDate } from './DaysView';
import { stopEvent } from '../_util/EventManager';
export default class DecadeYearsView extends DaysView {
    handlePrevYearClick() {
        this.changeSelectedDate(this.getCloneDate().subtract(100, 'y'));
    }
    handleNextYearClick() {
        this.changeSelectedDate(this.getCloneDate().add(100, 'y'));
    }
    handleKeyDownHome(e) {
        stopEvent(e);
        const date = this.getCloneDate();
        this.changeSelectedDate(date.subtract(date.year() % 100, 'y'));
    }
    handleKeyDownEnd(e) {
        stopEvent(e);
        const date = this.getCloneDate();
        this.changeSelectedDate(date.add(90 - (date.year() % 100), 'y'));
    }
    handleKeyDownLeft(e) {
        stopEvent(e);
        if (!e.altKey) {
            this.changeSelectedDate(this.getCloneDate().subtract(10, 'y'));
        }
    }
    handleKeyDownRight(e) {
        stopEvent(e);
        if (e.altKey) {
            this.changeViewMode("year" /* year */);
        }
        else {
            this.changeSelectedDate(this.getCloneDate().add(10, 'y'));
        }
    }
    handleKeyDownUp(e) {
        stopEvent(e);
        this.changeSelectedDate(this.getCloneDate().subtract(30, 'y'));
    }
    handleKeyDownDown(e) {
        stopEvent(e);
        this.changeSelectedDate(this.getCloneDate().add(30, 'y'));
    }
    handleKeyDownPageUp(e) {
        stopEvent(e);
        this.changeSelectedDate(this.getCloneDate().subtract(100, 'y'));
    }
    handleKeyDownPageDown(e) {
        stopEvent(e);
        this.changeSelectedDate(this.getCloneDate().add(100, 'y'));
    }
    renderHeader() {
        const { prefixCls, props: { date }, } = this;
        const year = date.year() % 100;
        const from = date.clone().subtract(year, 'y');
        const to = from.clone().add(99, 'y');
        return (React.createElement("div", { className: `${prefixCls}-header` },
            React.createElement("a", { className: `${prefixCls}-prev-year`, onClick: this.handlePrevYearClick },
                React.createElement(Icon, { type: "first_page" })),
            React.createElement("span", { className: `${prefixCls}-view-select` },
                from.year(),
                " - ",
                to.year()),
            React.createElement("a", { className: `${prefixCls}-next-year` },
                React.createElement(Icon, { type: "last_page", onClick: this.handleNextYearClick }))));
    }
    renderPanelHead() {
        return undefined;
    }
    renderPanelBody() {
        const { prefixCls, props: { date, renderer = this.renderCell, isValidDate = alwaysValidDate }, } = this;
        const selected = date.clone().subtract(date.year() % 10, 'y');
        const from = date
            .clone()
            .startOf('y')
            .subtract(date.year() % 100, 'y');
        const to = from.clone().add(100, 'y');
        const prevYear = from.clone().subtract(10, 'y');
        const lastYear = to.clone().add(10, 'y');
        const rows = [];
        let cells = [];
        while (prevYear.isBefore(lastYear)) {
            const currentYear = prevYear.clone();
            const isDisabled = !isValidDate(currentYear, selected);
            const className = classNames(`${prefixCls}-cell`, {
                [`${prefixCls}-old`]: currentYear.isBefore(from, 'y'),
                [`${prefixCls}-new`]: currentYear.isSame(to, 'y'),
                [`${prefixCls}-selected`]: prevYear.isSame(selected, 'y'),
                [`${prefixCls}-disabled`]: isDisabled,
            });
            const text = `${prevYear.year()}-${prevYear
                .clone()
                .add(9, 'y')
                .year()}`;
            const decadeProps = {
                key: text,
                className,
            };
            if (!isDisabled) {
                decadeProps.onClick = this.handleCellClick.bind(this, currentYear);
            }
            cells.push(renderer(decadeProps, text, currentYear, selected));
            if (cells.length === 3) {
                rows.push(React.createElement("tr", { key: text }, cells));
                cells = [];
            }
            prevYear.add(10, 'y');
        }
        return rows;
    }
    renderFooter() {
        return undefined;
    }
    getPanelClass() {
        return `${this.prefixCls}-year-panel`;
    }
    choose(date) {
        this.changeSelectedDate(date);
        this.changeViewMode("year" /* year */);
    }
}
DecadeYearsView.displayName = 'DecadeYearView';
__decorate([
    autobind
], DecadeYearsView.prototype, "handlePrevYearClick", null);
__decorate([
    autobind
], DecadeYearsView.prototype, "handleNextYearClick", null);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,