var Record;
(function (Record) {
    Record[Record["None"] = 0] = "None";
    Record[Record["Start"] = 1] = "Start";
    Record[Record["End"] = 2] = "End";
})(Record || (Record = {}));
function traverseNodesKey(treeData, callback) {
    function processNode(dataNode) {
        const { key, children } = dataNode;
        if (callback(key, dataNode) !== false) {
            traverseNodesKey(children || [], callback);
        }
    }
    treeData.forEach(processNode);
}
/** 计算选中范围，只考虑expanded情况以优化性能 */
export function calcRangeKeys(treeData, expandedKeys, startKey, endKey) {
    const keys = [];
    let record = Record.None;
    if (startKey && startKey === endKey) {
        return [startKey];
    }
    if (!startKey || !endKey) {
        return [];
    }
    function matchKey(key) {
        return key === startKey || key === endKey;
    }
    traverseNodesKey(treeData, (key) => {
        if (record === Record.End) {
            return false;
        }
        if (matchKey(key)) {
            // Match test
            keys.push(key);
            if (record === Record.None) {
                record = Record.Start;
            }
            else if (record === Record.Start) {
                record = Record.End;
                return false;
            }
        }
        else if (record === Record.Start) {
            // Append selection
            keys.push(key);
        }
        if (expandedKeys.indexOf(key) === -1) {
            return false;
        }
        return true;
    });
    return keys;
}
export function convertDirectoryKeysToNodes(treeData, keys) {
    const restKeys = [...keys];
    const nodes = [];
    traverseNodesKey(treeData, (key, node) => {
        const index = restKeys.indexOf(key);
        if (index !== -1) {
            nodes.push(node);
            restKeys.splice(index, 1);
        }
        return !!restKeys.length;
    });
    return nodes;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvdHJlZS91dGlscy9kaWN0VXRpbC50cyIsIm1hcHBpbmdzIjoiQUFFQSxJQUFLLE1BSUo7QUFKRCxXQUFLLE1BQU07SUFDVCxtQ0FBSSxDQUFBO0lBQ0oscUNBQUssQ0FBQTtJQUNMLGlDQUFHLENBQUE7QUFDTCxDQUFDLEVBSkksTUFBTSxLQUFOLE1BQU0sUUFJVjtBQUVELFNBQVMsZ0JBQWdCLENBQ3ZCLFFBQW9CLEVBQ3BCLFFBQWtFO0lBRWxFLFNBQVMsV0FBVyxDQUFDLFFBQWtCO1FBQ3JDLE1BQU0sRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLEdBQUcsUUFBUSxDQUFDO1FBQ25DLElBQUksUUFBUSxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsS0FBSyxLQUFLLEVBQUU7WUFDckMsZ0JBQWdCLENBQUMsUUFBUSxJQUFJLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztTQUM1QztJQUNILENBQUM7SUFFRCxRQUFRLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ2hDLENBQUM7QUFFRCxnQ0FBZ0M7QUFDaEMsTUFBTSxVQUFVLGFBQWEsQ0FDM0IsUUFBb0IsRUFDcEIsWUFBc0IsRUFDdEIsUUFBaUIsRUFDakIsTUFBZTtJQUVmLE1BQU0sSUFBSSxHQUFhLEVBQUUsQ0FBQztJQUMxQixJQUFJLE1BQU0sR0FBVyxNQUFNLENBQUMsSUFBSSxDQUFDO0lBRWpDLElBQUksUUFBUSxJQUFJLFFBQVEsS0FBSyxNQUFNLEVBQUU7UUFDbkMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ25CO0lBQ0QsSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUN4QixPQUFPLEVBQUUsQ0FBQztLQUNYO0lBRUQsU0FBUyxRQUFRLENBQUMsR0FBVztRQUMzQixPQUFPLEdBQUcsS0FBSyxRQUFRLElBQUksR0FBRyxLQUFLLE1BQU0sQ0FBQztJQUM1QyxDQUFDO0lBRUQsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBVyxFQUFFLEVBQUU7UUFDekMsSUFBSSxNQUFNLEtBQUssTUFBTSxDQUFDLEdBQUcsRUFBRTtZQUN6QixPQUFPLEtBQUssQ0FBQztTQUNkO1FBRUQsSUFBSSxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDakIsYUFBYTtZQUNiLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFFZixJQUFJLE1BQU0sS0FBSyxNQUFNLENBQUMsSUFBSSxFQUFFO2dCQUMxQixNQUFNLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQzthQUN2QjtpQkFBTSxJQUFJLE1BQU0sS0FBSyxNQUFNLENBQUMsS0FBSyxFQUFFO2dCQUNsQyxNQUFNLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQztnQkFDcEIsT0FBTyxLQUFLLENBQUM7YUFDZDtTQUNGO2FBQU0sSUFBSSxNQUFNLEtBQUssTUFBTSxDQUFDLEtBQUssRUFBRTtZQUNsQyxtQkFBbUI7WUFDbkIsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNoQjtRQUVELElBQUksWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtZQUNwQyxPQUFPLEtBQUssQ0FBQztTQUNkO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQUVELE1BQU0sVUFBVSwyQkFBMkIsQ0FBQyxRQUFvQixFQUFFLElBQWM7SUFDOUUsTUFBTSxRQUFRLEdBQWEsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQ3JDLE1BQU0sS0FBSyxHQUFlLEVBQUUsQ0FBQztJQUM3QixnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFXLEVBQUUsSUFBYyxFQUFFLEVBQUU7UUFDekQsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNwQyxJQUFJLEtBQUssS0FBSyxDQUFDLENBQUMsRUFBRTtZQUNoQixLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2pCLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQzNCO1FBRUQsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztJQUMzQixDQUFDLENBQUMsQ0FBQztJQUNILE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvaHVpaHVhd2svRG9jdW1lbnRzL29wdC9jaG9lcm9kb24tdWkvY29tcG9uZW50cy90cmVlL3V0aWxzL2RpY3RVdGlsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERhdGFOb2RlIH0gZnJvbSAnLi4vLi4vcmMtY29tcG9uZW50cy90cmVlL2ludGVyZmFjZSc7XG5cbmVudW0gUmVjb3JkIHtcbiAgTm9uZSxcbiAgU3RhcnQsXG4gIEVuZCxcbn1cblxuZnVuY3Rpb24gdHJhdmVyc2VOb2Rlc0tleShcbiAgdHJlZURhdGE6IERhdGFOb2RlW10sXG4gIGNhbGxiYWNrOiAoa2V5OiBzdHJpbmcgfCBudW1iZXIgfCBudWxsLCBub2RlOiBEYXRhTm9kZSkgPT4gYm9vbGVhbixcbikge1xuICBmdW5jdGlvbiBwcm9jZXNzTm9kZShkYXRhTm9kZTogRGF0YU5vZGUpIHtcbiAgICBjb25zdCB7IGtleSwgY2hpbGRyZW4gfSA9IGRhdGFOb2RlO1xuICAgIGlmIChjYWxsYmFjayhrZXksIGRhdGFOb2RlKSAhPT0gZmFsc2UpIHtcbiAgICAgIHRyYXZlcnNlTm9kZXNLZXkoY2hpbGRyZW4gfHwgW10sIGNhbGxiYWNrKTtcbiAgICB9XG4gIH1cblxuICB0cmVlRGF0YS5mb3JFYWNoKHByb2Nlc3NOb2RlKTtcbn1cblxuLyoqIOiuoeeul+mAieS4reiMg+WbtO+8jOWPquiAg+iZkWV4cGFuZGVk5oOF5Ya15Lul5LyY5YyW5oCn6IO9ICovXG5leHBvcnQgZnVuY3Rpb24gY2FsY1JhbmdlS2V5cyhcbiAgdHJlZURhdGE6IERhdGFOb2RlW10sXG4gIGV4cGFuZGVkS2V5czogc3RyaW5nW10sXG4gIHN0YXJ0S2V5Pzogc3RyaW5nLFxuICBlbmRLZXk/OiBzdHJpbmcsXG4pOiBzdHJpbmdbXSB7XG4gIGNvbnN0IGtleXM6IHN0cmluZ1tdID0gW107XG4gIGxldCByZWNvcmQ6IFJlY29yZCA9IFJlY29yZC5Ob25lO1xuXG4gIGlmIChzdGFydEtleSAmJiBzdGFydEtleSA9PT0gZW5kS2V5KSB7XG4gICAgcmV0dXJuIFtzdGFydEtleV07XG4gIH1cbiAgaWYgKCFzdGFydEtleSB8fCAhZW5kS2V5KSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgZnVuY3Rpb24gbWF0Y2hLZXkoa2V5OiBzdHJpbmcpIHtcbiAgICByZXR1cm4ga2V5ID09PSBzdGFydEtleSB8fCBrZXkgPT09IGVuZEtleTtcbiAgfVxuXG4gIHRyYXZlcnNlTm9kZXNLZXkodHJlZURhdGEsIChrZXk6IHN0cmluZykgPT4ge1xuICAgIGlmIChyZWNvcmQgPT09IFJlY29yZC5FbmQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAobWF0Y2hLZXkoa2V5KSkge1xuICAgICAgLy8gTWF0Y2ggdGVzdFxuICAgICAga2V5cy5wdXNoKGtleSk7XG5cbiAgICAgIGlmIChyZWNvcmQgPT09IFJlY29yZC5Ob25lKSB7XG4gICAgICAgIHJlY29yZCA9IFJlY29yZC5TdGFydDtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkID09PSBSZWNvcmQuU3RhcnQpIHtcbiAgICAgICAgcmVjb3JkID0gUmVjb3JkLkVuZDtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocmVjb3JkID09PSBSZWNvcmQuU3RhcnQpIHtcbiAgICAgIC8vIEFwcGVuZCBzZWxlY3Rpb25cbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cblxuICAgIGlmIChleHBhbmRlZEtleXMuaW5kZXhPZihrZXkpID09PSAtMSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9KTtcblxuICByZXR1cm4ga2V5cztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnREaXJlY3RvcnlLZXlzVG9Ob2Rlcyh0cmVlRGF0YTogRGF0YU5vZGVbXSwga2V5czogc3RyaW5nW10pIHtcbiAgY29uc3QgcmVzdEtleXM6IHN0cmluZ1tdID0gWy4uLmtleXNdO1xuICBjb25zdCBub2RlczogRGF0YU5vZGVbXSA9IFtdO1xuICB0cmF2ZXJzZU5vZGVzS2V5KHRyZWVEYXRhLCAoa2V5OiBzdHJpbmcsIG5vZGU6IERhdGFOb2RlKSA9PiB7XG4gICAgY29uc3QgaW5kZXggPSByZXN0S2V5cy5pbmRleE9mKGtleSk7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgbm9kZXMucHVzaChub2RlKTtcbiAgICAgIHJlc3RLZXlzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuXG4gICAgcmV0dXJuICEhcmVzdEtleXMubGVuZ3RoO1xuICB9KTtcbiAgcmV0dXJuIG5vZGVzO1xufVxuIl0sInZlcnNpb24iOjN9