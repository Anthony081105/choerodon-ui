import * as React from 'react';
import classNames from 'classnames';
import PropTypes from 'prop-types';
import { defaultClassPrefix, prefix } from './utils';
const classPrefix = defaultClassPrefix('performance-table-column-group');
const addPrefix = (name) => prefix(classPrefix)(name);
const ColumnGroup = React.forwardRef((props, ref) => {
    const { header, className, children, headerHeight = 80, verticalAlign, width, ...rest } = props;
    const height = headerHeight / 2;
    const styles = {
        height,
        width,
    };
    const contentStyles = { ...styles, verticalAlign };
    return (React.createElement("div", Object.assign({ ref: ref, className: classNames(classPrefix, className) }, rest),
        React.createElement("div", { className: addPrefix('header'), style: styles },
            React.createElement("div", { className: addPrefix('header-content'), style: contentStyles }, header)),
        React.Children.map(children, (node) => {
            const nodeStyles = { height, ...node.props?.style, top: styles.height };
            const width = node.props?.style?.width;
            const nodeContentStyles = { height, width, verticalAlign };
            return React.cloneElement(node, {
                className: addPrefix('cell'),
                style: nodeStyles,
                children: (React.createElement("div", { className: addPrefix('cell-content'), style: nodeContentStyles }, node.props.children)),
            });
        })));
});
ColumnGroup.displayName = 'ColumnGroup';
ColumnGroup.propTypes = {
    header: PropTypes.node,
    verticalAlign: PropTypes.oneOf(['top', 'middle', 'bottom']),
};
export default ColumnGroup;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMtcHJvL3BlcmZvcm1hbmNlLXRhYmxlL0NvbHVtbkdyb3VwLnRzeCIsIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMvQixPQUFPLFVBQVUsTUFBTSxZQUFZLENBQUM7QUFDcEMsT0FBTyxTQUFTLE1BQU0sWUFBWSxDQUFDO0FBRW5DLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFckQsTUFBTSxXQUFXLEdBQUcsa0JBQWtCLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztBQUN6RSxNQUFNLFNBQVMsR0FBRyxDQUFDLElBQVksRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBRTlELE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxLQUF1QixFQUFFLEdBQThCLEVBQUUsRUFBRTtJQUMvRixNQUFNLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsWUFBWSxHQUFHLEVBQUUsRUFBRSxhQUFhLEVBQUUsS0FBSyxFQUFFLEdBQUcsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDO0lBQ2hHLE1BQU0sTUFBTSxHQUFHLFlBQVksR0FBRyxDQUFDLENBQUM7SUFDaEMsTUFBTSxNQUFNLEdBQXdCO1FBQ2xDLE1BQU07UUFDTixLQUFLO0tBQ04sQ0FBQztJQUNGLE1BQU0sYUFBYSxHQUFHLEVBQUUsR0FBRyxNQUFNLEVBQUUsYUFBYSxFQUFFLENBQUM7SUFFbkQsT0FBTyxDQUNMLDJDQUFLLEdBQUcsRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLFVBQVUsQ0FBQyxXQUFXLEVBQUUsU0FBUyxDQUFDLElBQU0sSUFBSTtRQUNwRSw2QkFBSyxTQUFTLEVBQUUsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFLEtBQUssRUFBRSxNQUFNO1lBQ2hELDZCQUFLLFNBQVMsRUFBRSxTQUFTLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxLQUFLLEVBQUUsYUFBYSxJQUM5RCxNQUFNLENBQ0gsQ0FDRjtRQUVMLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQXdCLEVBQUUsRUFBRTtZQUN6RCxNQUFNLFVBQVUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDeEUsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDO1lBQ3ZDLE1BQU0saUJBQWlCLEdBQUcsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLGFBQWEsRUFBRSxDQUFDO1lBRTNELE9BQU8sS0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUU7Z0JBQzlCLFNBQVMsRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDO2dCQUM1QixLQUFLLEVBQUUsVUFBVTtnQkFDakIsUUFBUSxFQUFFLENBQ1IsNkJBQUssU0FBUyxFQUFFLFNBQVMsQ0FBQyxjQUFjLENBQUMsRUFBRSxLQUFLLEVBQUUsaUJBQWlCLElBQ2hFLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUNoQixDQUNQO2FBQ0YsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQ0UsQ0FDUCxDQUFDO0FBQ0osQ0FBQyxDQUFDLENBQUM7QUFFSCxXQUFXLENBQUMsV0FBVyxHQUFHLGFBQWEsQ0FBQztBQUV4QyxXQUFXLENBQUMsU0FBUyxHQUFHO0lBQ3RCLE1BQU0sRUFBRSxTQUFTLENBQUMsSUFBSTtJQUN0QixhQUFhLEVBQUUsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7Q0FDNUQsQ0FBQztBQUVGLGVBQWUsV0FBVyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9odWlodWF3ay9Eb2N1bWVudHMvb3B0L2Nob2Vyb2Rvbi11aS9jb21wb25lbnRzLXByby9wZXJmb3JtYW5jZS10YWJsZS9Db2x1bW5Hcm91cC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgQ29sdW1uR3JvdXBQcm9wcyB9IGZyb20gJy4vQ29sdW1uR3JvdXAuZCc7XG5pbXBvcnQgeyBkZWZhdWx0Q2xhc3NQcmVmaXgsIHByZWZpeCB9IGZyb20gJy4vdXRpbHMnO1xuXG5jb25zdCBjbGFzc1ByZWZpeCA9IGRlZmF1bHRDbGFzc1ByZWZpeCgncGVyZm9ybWFuY2UtdGFibGUtY29sdW1uLWdyb3VwJyk7XG5jb25zdCBhZGRQcmVmaXggPSAobmFtZTogc3RyaW5nKSA9PiBwcmVmaXgoY2xhc3NQcmVmaXgpKG5hbWUpO1xuXG5jb25zdCBDb2x1bW5Hcm91cCA9IFJlYWN0LmZvcndhcmRSZWYoKHByb3BzOiBDb2x1bW5Hcm91cFByb3BzLCByZWY6IFJlYWN0LlJlZjxIVE1MRGl2RWxlbWVudD4pID0+IHtcbiAgY29uc3QgeyBoZWFkZXIsIGNsYXNzTmFtZSwgY2hpbGRyZW4sIGhlYWRlckhlaWdodCA9IDgwLCB2ZXJ0aWNhbEFsaWduLCB3aWR0aCwgLi4ucmVzdCB9ID0gcHJvcHM7XG4gIGNvbnN0IGhlaWdodCA9IGhlYWRlckhlaWdodCAvIDI7XG4gIGNvbnN0IHN0eWxlczogUmVhY3QuQ1NTUHJvcGVydGllcyA9IHtcbiAgICBoZWlnaHQsXG4gICAgd2lkdGgsXG4gIH07XG4gIGNvbnN0IGNvbnRlbnRTdHlsZXMgPSB7IC4uLnN0eWxlcywgdmVydGljYWxBbGlnbiB9O1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiByZWY9e3JlZn0gY2xhc3NOYW1lPXtjbGFzc05hbWVzKGNsYXNzUHJlZml4LCBjbGFzc05hbWUpfSB7Li4ucmVzdH0+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17YWRkUHJlZml4KCdoZWFkZXInKX0gc3R5bGU9e3N0eWxlc30+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXthZGRQcmVmaXgoJ2hlYWRlci1jb250ZW50Jyl9IHN0eWxlPXtjb250ZW50U3R5bGVzfT5cbiAgICAgICAgICB7aGVhZGVyfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuXG4gICAgICB7UmVhY3QuQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCAobm9kZTogUmVhY3QuUmVhY3RFbGVtZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IG5vZGVTdHlsZXMgPSB7IGhlaWdodCwgLi4ubm9kZS5wcm9wcz8uc3R5bGUsIHRvcDogc3R5bGVzLmhlaWdodCB9O1xuICAgICAgICBjb25zdCB3aWR0aCA9IG5vZGUucHJvcHM/LnN0eWxlPy53aWR0aDtcbiAgICAgICAgY29uc3Qgbm9kZUNvbnRlbnRTdHlsZXMgPSB7IGhlaWdodCwgd2lkdGgsIHZlcnRpY2FsQWxpZ24gfTtcblxuICAgICAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KG5vZGUsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IGFkZFByZWZpeCgnY2VsbCcpLFxuICAgICAgICAgIHN0eWxlOiBub2RlU3R5bGVzLFxuICAgICAgICAgIGNoaWxkcmVuOiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YWRkUHJlZml4KCdjZWxsLWNvbnRlbnQnKX0gc3R5bGU9e25vZGVDb250ZW50U3R5bGVzfT5cbiAgICAgICAgICAgICAge25vZGUucHJvcHMuY2hpbGRyZW59XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICApLFxuICAgICAgICB9KTtcbiAgICAgIH0pfVxuICAgIDwvZGl2PlxuICApO1xufSk7XG5cbkNvbHVtbkdyb3VwLmRpc3BsYXlOYW1lID0gJ0NvbHVtbkdyb3VwJztcblxuQ29sdW1uR3JvdXAucHJvcFR5cGVzID0ge1xuICBoZWFkZXI6IFByb3BUeXBlcy5ub2RlLFxuICB2ZXJ0aWNhbEFsaWduOiBQcm9wVHlwZXMub25lT2YoWyd0b3AnLCAnbWlkZGxlJywgJ2JvdHRvbSddKSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IENvbHVtbkdyb3VwO1xuIl0sInZlcnNpb24iOjN9