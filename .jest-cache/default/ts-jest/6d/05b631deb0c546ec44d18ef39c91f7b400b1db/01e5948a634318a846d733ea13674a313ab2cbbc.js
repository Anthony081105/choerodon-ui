import { getConfig } from 'choerodon-ui/lib/configure';
import Cache, { refreshCacheOptions } from '../_util/Cache';
import { buildURLWithAxiosConfig, isCacheLike } from './utils';
function getDefaultCache() {
    const cache = new Cache(getConfig('lookupCache'));
    refreshCacheOptions(cache);
    return cache;
}
export default function cacheAdapterEnhancer(adapter, options = {}) {
    const { enabledByDefault = true, cacheFlag = 'cache', defaultCache = getDefaultCache(), } = options;
    return config => {
        const useCache = config[cacheFlag] !== undefined && config[cacheFlag] !== null
            ? config[cacheFlag]
            : enabledByDefault;
        if (useCache) {
            const cache = isCacheLike(useCache) ? useCache : defaultCache;
            const index = buildURLWithAxiosConfig(config);
            let responsePromise = cache.get(index);
            if (!responsePromise) {
                responsePromise = (async () => {
                    try {
                        return await adapter(config);
                    }
                    catch (reason) {
                        cache.del(index);
                        throw reason;
                    }
                })();
                if (process.env.LOGGER_LEVEL === 'info') {
                    // eslint-disable-next-line no-console
                    console.info(`request: ${index}`);
                }
                cache.set(index, responsePromise);
                return responsePromise;
            }
            if (process.env.LOGGER_LEVEL === 'info') {
                // eslint-disable-next-line no-console
                console.info(`request cached by cache adapter: ${index}`);
            }
            return responsePromise;
        }
        return adapter(config);
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMtcHJvL2F4aW9zL2NhY2hlQWRhcHRlckVuaGFuY2VyLnRzeCIsIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDdkQsT0FBTyxLQUFLLEVBQUUsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzVELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxXQUFXLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFnQi9ELFNBQVMsZUFBZTtJQUN0QixNQUFNLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBdUIsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7SUFDeEUsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDM0IsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDO0FBRUQsTUFBTSxDQUFDLE9BQU8sVUFBVSxvQkFBb0IsQ0FDMUMsT0FBcUIsRUFDckIsVUFBbUIsRUFBRTtJQUVyQixNQUFNLEVBQ0osZ0JBQWdCLEdBQUcsSUFBSSxFQUN2QixTQUFTLEdBQUcsT0FBTyxFQUNuQixZQUFZLEdBQUcsZUFBZSxFQUFFLEdBQ2pDLEdBQUcsT0FBTyxDQUFDO0lBRVosT0FBTyxNQUFNLENBQUMsRUFBRTtRQUNkLE1BQU0sUUFBUSxHQUNaLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxTQUFTLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLElBQUk7WUFDM0QsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUM7WUFDbkIsQ0FBQyxDQUFDLGdCQUFnQixDQUFDO1FBQ3ZCLElBQUksUUFBUSxFQUFFO1lBQ1osTUFBTSxLQUFLLEdBQTZCLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUM7WUFDeEYsTUFBTSxLQUFLLEdBQUcsdUJBQXVCLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDOUMsSUFBSSxlQUFlLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUV2QyxJQUFJLENBQUMsZUFBZSxFQUFFO2dCQUNwQixlQUFlLEdBQUcsQ0FBQyxLQUFLLElBQUksRUFBRTtvQkFDNUIsSUFBSTt3QkFDRixPQUFPLE1BQU0sT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO3FCQUM5QjtvQkFBQyxPQUFPLE1BQU0sRUFBRTt3QkFDZixLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO3dCQUNqQixNQUFNLE1BQU0sQ0FBQztxQkFDZDtnQkFDSCxDQUFDLENBQUMsRUFBRSxDQUFDO2dCQUVMLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEtBQUssTUFBTSxFQUFFO29CQUN2QyxzQ0FBc0M7b0JBQ3RDLE9BQU8sQ0FBQyxJQUFJLENBQUMsWUFBWSxLQUFLLEVBQUUsQ0FBQyxDQUFDO2lCQUNuQztnQkFDRCxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxlQUFlLENBQUMsQ0FBQztnQkFFbEMsT0FBTyxlQUFlLENBQUM7YUFDeEI7WUFFRCxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxLQUFLLE1BQU0sRUFBRTtnQkFDdkMsc0NBQXNDO2dCQUN0QyxPQUFPLENBQUMsSUFBSSxDQUFDLG9DQUFvQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO2FBQzNEO1lBRUQsT0FBTyxlQUFlLENBQUM7U0FDeEI7UUFFRCxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN6QixDQUFDLENBQUM7QUFDSixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9odWlodWF3ay9Eb2N1bWVudHMvb3B0L2Nob2Vyb2Rvbi11aS9jb21wb25lbnRzLXByby9heGlvcy9jYWNoZUFkYXB0ZXJFbmhhbmNlci50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXhpb3NBZGFwdGVyLCBBeGlvc1Byb21pc2UgfSBmcm9tICdheGlvcyc7XG5pbXBvcnQgeyBnZXRDb25maWcgfSBmcm9tICdjaG9lcm9kb24tdWkvbGliL2NvbmZpZ3VyZSc7XG5pbXBvcnQgQ2FjaGUsIHsgcmVmcmVzaENhY2hlT3B0aW9ucyB9IGZyb20gJy4uL191dGlsL0NhY2hlJztcbmltcG9ydCB7IGJ1aWxkVVJMV2l0aEF4aW9zQ29uZmlnLCBpc0NhY2hlTGlrZSB9IGZyb20gJy4vdXRpbHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElDYWNoZUxpa2U8VD4ge1xuICBnZXQoa2V5OiBzdHJpbmcpOiBUIHwgdW5kZWZpbmVkO1xuXG4gIHNldChrZXk6IHN0cmluZywgdmFsdWU6IFQsIG1heEFnZT86IG51bWJlcik6IGJvb2xlYW47XG5cbiAgZGVsKGtleTogc3RyaW5nKTogdm9pZDtcbn1cblxuZXhwb3J0IHR5cGUgT3B0aW9ucyA9IHtcbiAgZW5hYmxlZEJ5RGVmYXVsdD86IGJvb2xlYW47XG4gIGNhY2hlRmxhZz86IHN0cmluZztcbiAgZGVmYXVsdENhY2hlPzogSUNhY2hlTGlrZTxBeGlvc1Byb21pc2U+O1xufTtcblxuZnVuY3Rpb24gZ2V0RGVmYXVsdENhY2hlKCkge1xuICBjb25zdCBjYWNoZSA9IG5ldyBDYWNoZTxzdHJpbmcsIEF4aW9zUHJvbWlzZT4oZ2V0Q29uZmlnKCdsb29rdXBDYWNoZScpKTtcbiAgcmVmcmVzaENhY2hlT3B0aW9ucyhjYWNoZSk7XG4gIHJldHVybiBjYWNoZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2FjaGVBZGFwdGVyRW5oYW5jZXIoXG4gIGFkYXB0ZXI6IEF4aW9zQWRhcHRlcixcbiAgb3B0aW9uczogT3B0aW9ucyA9IHt9LFxuKTogQXhpb3NBZGFwdGVyIHtcbiAgY29uc3Qge1xuICAgIGVuYWJsZWRCeURlZmF1bHQgPSB0cnVlLFxuICAgIGNhY2hlRmxhZyA9ICdjYWNoZScsXG4gICAgZGVmYXVsdENhY2hlID0gZ2V0RGVmYXVsdENhY2hlKCksXG4gIH0gPSBvcHRpb25zO1xuXG4gIHJldHVybiBjb25maWcgPT4ge1xuICAgIGNvbnN0IHVzZUNhY2hlID1cbiAgICAgIGNvbmZpZ1tjYWNoZUZsYWddICE9PSB1bmRlZmluZWQgJiYgY29uZmlnW2NhY2hlRmxhZ10gIT09IG51bGxcbiAgICAgICAgPyBjb25maWdbY2FjaGVGbGFnXVxuICAgICAgICA6IGVuYWJsZWRCeURlZmF1bHQ7XG4gICAgaWYgKHVzZUNhY2hlKSB7XG4gICAgICBjb25zdCBjYWNoZTogSUNhY2hlTGlrZTxBeGlvc1Byb21pc2U+ID0gaXNDYWNoZUxpa2UodXNlQ2FjaGUpID8gdXNlQ2FjaGUgOiBkZWZhdWx0Q2FjaGU7XG4gICAgICBjb25zdCBpbmRleCA9IGJ1aWxkVVJMV2l0aEF4aW9zQ29uZmlnKGNvbmZpZyk7XG4gICAgICBsZXQgcmVzcG9uc2VQcm9taXNlID0gY2FjaGUuZ2V0KGluZGV4KTtcblxuICAgICAgaWYgKCFyZXNwb25zZVByb21pc2UpIHtcbiAgICAgICAgcmVzcG9uc2VQcm9taXNlID0gKGFzeW5jICgpID0+IHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGFkYXB0ZXIoY29uZmlnKTtcbiAgICAgICAgICB9IGNhdGNoIChyZWFzb24pIHtcbiAgICAgICAgICAgIGNhY2hlLmRlbChpbmRleCk7XG4gICAgICAgICAgICB0aHJvdyByZWFzb247XG4gICAgICAgICAgfVxuICAgICAgICB9KSgpO1xuXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5MT0dHRVJfTEVWRUwgPT09ICdpbmZvJykge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgY29uc29sZS5pbmZvKGByZXF1ZXN0OiAke2luZGV4fWApO1xuICAgICAgICB9XG4gICAgICAgIGNhY2hlLnNldChpbmRleCwgcmVzcG9uc2VQcm9taXNlKTtcblxuICAgICAgICByZXR1cm4gcmVzcG9uc2VQcm9taXNlO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTE9HR0VSX0xFVkVMID09PSAnaW5mbycpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS5pbmZvKGByZXF1ZXN0IGNhY2hlZCBieSBjYWNoZSBhZGFwdGVyOiAke2luZGV4fWApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzcG9uc2VQcm9taXNlO1xuICAgIH1cblxuICAgIHJldHVybiBhZGFwdGVyKGNvbmZpZyk7XG4gIH07XG59XG4iXSwidmVyc2lvbiI6M30=