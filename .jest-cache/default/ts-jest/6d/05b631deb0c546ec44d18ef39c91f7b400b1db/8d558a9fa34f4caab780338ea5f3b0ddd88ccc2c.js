import { __decorate } from "tslib";
import React, { cloneElement, Component } from 'react';
import { observer } from 'mobx-react';
import { pxToRem } from 'choerodon-ui/lib/_util/UnitConvertor';
import { getProPrefixCls } from 'choerodon-ui/lib/configure';
import Button from '../../button';
import TableContext from '../TableContext';
import { $l } from '../../locale-context';
import autobind from '../../_util/autobind';
import TableButtons from './TableButtons';
import FilterSelect from './FilterSelect';
import Modal from '../../modal';
import Form from '../../form/Form';
let TableAdvancedQueryBar = class TableAdvancedQueryBar extends Component {
    componentWillUnmount() {
        if (this.modal) {
            this.modal.close(true);
        }
    }
    handleFieldEnter() {
        this.handleQuery();
        if (this.modal) {
            this.modal.close();
        }
    }
    handleQuery() {
        const { dataSet } = this.props;
        dataSet.query();
    }
    valueFilter(value) {
        const { queryFields, queryFieldsLimit } = this.props;
        return queryFields.slice(0, queryFieldsLimit).every(element => element.props.name !== value);
    }
    getMoreFieldsButton(fields) {
        if (fields.length) {
            return (React.createElement(Button, { funcType: "raised" /* raised */, color: "primary" /* primary */, onClick: () => this.openMore(fields) }, $l('Table', 'advanced_query')));
        }
    }
    openMore(children) {
        this.modal = Modal.open({
            title: $l('Table', 'advanced_query'),
            children: React.createElement(Form, { labelLayout: "float" /* float */ }, children),
            okText: $l('Table', 'query_button'),
            onOk: this.handleQuery,
            style: {
                width: pxToRem(380),
            },
            drawer: true,
        });
    }
    getResetButton() {
        return (React.createElement(Button, { funcType: "raised" /* raised */, onClick: this.handleQueryReset }, $l('Table', 'reset_button')));
    }
    getQueryBar() {
        const { prefixCls, queryFieldsLimit, queryFields, buttons, queryDataSet } = this.props;
        if (queryDataSet && queryFields.length) {
            const currentFields = this.createFields(queryFields.slice(0, queryFieldsLimit), queryDataSet, false);
            const moreFields = this.createFields(queryFields.slice(queryFieldsLimit), queryDataSet, true);
            const moreFieldsButton = this.getMoreFieldsButton(moreFields);
            return (React.createElement("div", { key: "toolbar", className: `${prefixCls}-advanced-query-bar` },
                currentFields,
                React.createElement("span", { className: `${prefixCls}-advanced-query-bar-button` },
                    this.getResetButton(),
                    moreFieldsButton,
                    buttons)));
        }
    }
    createFields(elements, dataSet, isMore) {
        return elements.map(element => {
            const { name, style } = element.props;
            const newStyle = {};
            if (!isMore) {
                newStyle.width = pxToRem(260);
                newStyle.marginRight = pxToRem(10);
            }
            const props = {
                onEnterDown: this.handleFieldEnter,
                labelLayout: "float" /* float */,
                style: {
                    marginRight: !isMore ? pxToRem(10) : 0,
                    ...style,
                },
            };
            const field = dataSet.getField(name);
            if (field) {
                const label = field.get('label');
                if (label) {
                    if (isMore) {
                        props.label = label;
                    }
                    else {
                        props.placeholder = label;
                    }
                }
            }
            return cloneElement(element, props);
        });
    }
    handleQueryReset() {
        const { queryDataSet, dataSet, queryFields } = this.props;
        if (queryDataSet) {
            const { current } = queryDataSet;
            if (current) {
                current.reset();
            }
            dataSet.fireEvent('queryBarReset', {
                dataSet,
                queryFields,
            });
            this.handleQuery();
        }
    }
    getFilterSelect() {
        const { prefixCls, dataSet, queryDataSet } = this.props;
        return (React.createElement(FilterSelect, { key: "filter", prefixCls: `${prefixCls}-filter-select`, className: `${prefixCls}-advanced-query-bar-options`, optionDataSet: dataSet, queryDataSet: queryDataSet, prefix: `${$l('Table', 'advanced_query_conditions')}:`, editable: false, filter: this.valueFilter, hiddenIfNone: true }));
    }
    render() {
        const { buttons, prefixCls } = this.props;
        const queryBar = this.getQueryBar();
        if (queryBar) {
            return [queryBar, this.getFilterSelect()];
        }
        return React.createElement(TableButtons, { key: "toolbar", prefixCls: prefixCls, buttons: buttons });
    }
};
TableAdvancedQueryBar.contextType = TableContext;
TableAdvancedQueryBar.defaultProps = {
    prefixCls: getProPrefixCls('table'),
    queryFieldsLimit: 1,
};
__decorate([
    autobind
], TableAdvancedQueryBar.prototype, "handleFieldEnter", null);
__decorate([
    autobind
], TableAdvancedQueryBar.prototype, "handleQuery", null);
__decorate([
    autobind
], TableAdvancedQueryBar.prototype, "valueFilter", null);
__decorate([
    autobind
], TableAdvancedQueryBar.prototype, "handleQueryReset", null);
TableAdvancedQueryBar = __decorate([
    observer
], TableAdvancedQueryBar);
export default TableAdvancedQueryBar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,