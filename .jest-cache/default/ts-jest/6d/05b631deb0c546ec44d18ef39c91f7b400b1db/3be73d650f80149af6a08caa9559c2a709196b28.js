import * as React from 'react';
import isFunction from 'lodash/isFunction';
import get from 'lodash/get';
import ColumnGroup from '../ColumnGroup';
import isNullOrUndefined from './isNullOrUndefined';
function cloneCell(Cell, props) {
    return React.cloneElement(Cell, props);
}
function mergeCells(cells) {
    const nextCells = [];
    for (let i = 0; i < cells.length; i += 1) {
        const { width, colSpan, groupCount, groupHeader, isHeaderCell, headerHeight, verticalAlign, } = cells[i].props;
        const groupChildren = [];
        /**
         * 为列头添加分组
         */
        if (groupCount && isHeaderCell) {
            let nextWidth = width;
            let left = 0;
            for (let j = 0; j < groupCount; j += 1) {
                const nextCell = cells[i + j];
                const { width: nextCellWidth, children } = nextCell.props;
                if (j !== 0) {
                    nextWidth += nextCellWidth;
                    left += cells[i + j - 1].props.width;
                    cells[i + j] = cloneCell(nextCell, { removed: true });
                }
                groupChildren.push(
                // @ts-ignore
                React.createElement("div", { key: j, style: { width: nextCellWidth, left } }, children));
            }
            nextCells.push(
            // @ts-ignore
            cloneCell(cells[i], {
                width: nextWidth,
                children: (React.createElement(ColumnGroup, { width: nextWidth, headerHeight: headerHeight, header: groupHeader, verticalAlign: verticalAlign }, groupChildren)),
            }));
            continue;
        }
        else if (colSpan) {
            /**
             * 如果存在 colSpan 属性，就去找它的下一个 Cell,
             * 看看值是否是 isNullOrUndefined，，如果为空这可以合并这个单元格
             */
            let nextWidth = width;
            for (let j = 0; j < colSpan; j += 1) {
                const nextCell = cells[i + j];
                if (nextCell) {
                    const { rowData, rowIndex, children, width: colSpanWidth, isHeaderCell, dataKey, } = nextCell.props;
                    const cellText = isFunction(children)
                        ? children(rowData, rowIndex)
                        : get(rowData, dataKey);
                    if ((rowData && isNullOrUndefined(cellText)) ||
                        (isHeaderCell && isNullOrUndefined(children))) {
                        nextWidth += colSpanWidth;
                        cells[i + j] = cloneCell(nextCell, {
                            removed: true,
                        });
                    }
                }
            }
            // @ts-ignore
            nextCells.push(cloneCell(cells[i], { width: nextWidth }));
            continue;
        }
        // @ts-ignore
        nextCells.push(cells[i]);
    }
    return nextCells;
}
export default mergeCells;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMtcHJvL3BlcmZvcm1hbmNlLXRhYmxlL3V0aWxzL21lcmdlQ2VsbHMudHN4IiwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQy9CLE9BQU8sVUFBVSxNQUFNLG1CQUFtQixDQUFDO0FBQzNDLE9BQU8sR0FBRyxNQUFNLFlBQVksQ0FBQztBQUM3QixPQUFPLFdBQVcsTUFBTSxnQkFBZ0IsQ0FBQztBQUV6QyxPQUFPLGlCQUFpQixNQUFNLHFCQUFxQixDQUFDO0FBRXBELFNBQVMsU0FBUyxDQUFDLElBQUksRUFBRSxLQUFLO0lBQzVCLE9BQU8sS0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDekMsQ0FBQztBQUVELFNBQVMsVUFBVSxDQUFDLEtBQUs7SUFDdkIsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDO0lBQ3JCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDeEMsTUFBTSxFQUNKLEtBQUssRUFDTCxPQUFPLEVBQ1AsVUFBVSxFQUNWLFdBQVcsRUFDWCxZQUFZLEVBQ1osWUFBWSxFQUNaLGFBQWEsR0FDZCxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFFbkIsTUFBTSxhQUFhLEdBQUcsRUFBRSxDQUFDO1FBRXpCOztXQUVHO1FBQ0gsSUFBSSxVQUFVLElBQUksWUFBWSxFQUFFO1lBQzlCLElBQUksU0FBUyxHQUFHLEtBQUssQ0FBQztZQUN0QixJQUFJLElBQUksR0FBRyxDQUFDLENBQUM7WUFDYixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsVUFBVSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ3RDLE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQzlCLE1BQU0sRUFBRSxLQUFLLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUM7Z0JBRTFELElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtvQkFDWCxTQUFTLElBQUksYUFBYSxDQUFDO29CQUMzQixJQUFJLElBQUksS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQztvQkFDckMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUMsUUFBUSxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7aUJBQ3ZEO2dCQUNELGFBQWEsQ0FBQyxJQUFJO2dCQUNoQixhQUFhO2dCQUNiLDZCQUFLLEdBQUcsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsSUFDL0MsUUFBUSxDQUNMLENBQ1AsQ0FBQzthQUNIO1lBQ0QsU0FBUyxDQUFDLElBQUk7WUFDWixhQUFhO1lBQ2IsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDbEIsS0FBSyxFQUFFLFNBQVM7Z0JBQ2hCLFFBQVEsRUFBRSxDQUNSLG9CQUFDLFdBQVcsSUFDVixLQUFLLEVBQUUsU0FBUyxFQUNoQixZQUFZLEVBQUUsWUFBWSxFQUMxQixNQUFNLEVBQUUsV0FBVyxFQUNuQixhQUFhLEVBQUUsYUFBYSxJQUUzQixhQUFhLENBQ0YsQ0FDZjthQUNGLENBQUMsQ0FDSCxDQUFDO1lBQ0YsU0FBUztTQUNWO2FBQU0sSUFBSSxPQUFPLEVBQUU7WUFDbEI7OztlQUdHO1lBQ0gsSUFBSSxTQUFTLEdBQUcsS0FBSyxDQUFDO1lBQ3RCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDbkMsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDOUIsSUFBSSxRQUFRLEVBQUU7b0JBQ1osTUFBTSxFQUNKLE9BQU8sRUFDUCxRQUFRLEVBQ1IsUUFBUSxFQUNSLEtBQUssRUFBRSxZQUFZLEVBQ25CLFlBQVksRUFDWixPQUFPLEdBQ1IsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDO29CQUVuQixNQUFNLFFBQVEsR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDO3dCQUNuQyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUM7d0JBQzdCLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO29CQUUxQixJQUNFLENBQUMsT0FBTyxJQUFJLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxDQUFDO3dCQUN4QyxDQUFDLFlBQVksSUFBSSxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUM3Qzt3QkFDQSxTQUFTLElBQUksWUFBWSxDQUFDO3dCQUMxQixLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxRQUFRLEVBQUU7NEJBQ2pDLE9BQU8sRUFBRSxJQUFJO3lCQUNkLENBQUMsQ0FBQztxQkFDSjtpQkFDRjthQUNGO1lBRUQsYUFBYTtZQUNiLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDMUQsU0FBUztTQUNWO1FBQ0QsYUFBYTtRQUNiLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDMUI7SUFDRCxPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDO0FBRUQsZUFBZSxVQUFVLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMtcHJvL3BlcmZvcm1hbmNlLXRhYmxlL3V0aWxzL21lcmdlQ2VsbHMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJ2xvZGFzaC9pc0Z1bmN0aW9uJztcbmltcG9ydCBnZXQgZnJvbSAnbG9kYXNoL2dldCc7XG5pbXBvcnQgQ29sdW1uR3JvdXAgZnJvbSAnLi4vQ29sdW1uR3JvdXAnO1xuXG5pbXBvcnQgaXNOdWxsT3JVbmRlZmluZWQgZnJvbSAnLi9pc051bGxPclVuZGVmaW5lZCc7XG5cbmZ1bmN0aW9uIGNsb25lQ2VsbChDZWxsLCBwcm9wcykge1xuICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KENlbGwsIHByb3BzKTtcbn1cblxuZnVuY3Rpb24gbWVyZ2VDZWxscyhjZWxscykge1xuICBjb25zdCBuZXh0Q2VsbHMgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjZWxscy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IHtcbiAgICAgIHdpZHRoLFxuICAgICAgY29sU3BhbixcbiAgICAgIGdyb3VwQ291bnQsXG4gICAgICBncm91cEhlYWRlcixcbiAgICAgIGlzSGVhZGVyQ2VsbCxcbiAgICAgIGhlYWRlckhlaWdodCxcbiAgICAgIHZlcnRpY2FsQWxpZ24sXG4gICAgfSA9IGNlbGxzW2ldLnByb3BzO1xuXG4gICAgY29uc3QgZ3JvdXBDaGlsZHJlbiA9IFtdO1xuXG4gICAgLyoqXG4gICAgICog5Li65YiX5aS05re75Yqg5YiG57uEXG4gICAgICovXG4gICAgaWYgKGdyb3VwQ291bnQgJiYgaXNIZWFkZXJDZWxsKSB7XG4gICAgICBsZXQgbmV4dFdpZHRoID0gd2lkdGg7XG4gICAgICBsZXQgbGVmdCA9IDA7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGdyb3VwQ291bnQ7IGogKz0gMSkge1xuICAgICAgICBjb25zdCBuZXh0Q2VsbCA9IGNlbGxzW2kgKyBqXTtcbiAgICAgICAgY29uc3QgeyB3aWR0aDogbmV4dENlbGxXaWR0aCwgY2hpbGRyZW4gfSA9IG5leHRDZWxsLnByb3BzO1xuXG4gICAgICAgIGlmIChqICE9PSAwKSB7XG4gICAgICAgICAgbmV4dFdpZHRoICs9IG5leHRDZWxsV2lkdGg7XG4gICAgICAgICAgbGVmdCArPSBjZWxsc1tpICsgaiAtIDFdLnByb3BzLndpZHRoO1xuICAgICAgICAgIGNlbGxzW2kgKyBqXSA9IGNsb25lQ2VsbChuZXh0Q2VsbCwgeyByZW1vdmVkOiB0cnVlIH0pO1xuICAgICAgICB9XG4gICAgICAgIGdyb3VwQ2hpbGRyZW4ucHVzaChcbiAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgPGRpdiBrZXk9e2p9IHN0eWxlPXt7IHdpZHRoOiBuZXh0Q2VsbFdpZHRoLCBsZWZ0IH19PlxuICAgICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICAgIDwvZGl2PixcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIG5leHRDZWxscy5wdXNoKFxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGNsb25lQ2VsbChjZWxsc1tpXSwge1xuICAgICAgICAgIHdpZHRoOiBuZXh0V2lkdGgsXG4gICAgICAgICAgY2hpbGRyZW46IChcbiAgICAgICAgICAgIDxDb2x1bW5Hcm91cFxuICAgICAgICAgICAgICB3aWR0aD17bmV4dFdpZHRofVxuICAgICAgICAgICAgICBoZWFkZXJIZWlnaHQ9e2hlYWRlckhlaWdodH1cbiAgICAgICAgICAgICAgaGVhZGVyPXtncm91cEhlYWRlcn1cbiAgICAgICAgICAgICAgdmVydGljYWxBbGlnbj17dmVydGljYWxBbGlnbn1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge2dyb3VwQ2hpbGRyZW59XG4gICAgICAgICAgICA8L0NvbHVtbkdyb3VwPlxuICAgICAgICAgICksXG4gICAgICAgIH0pLFxuICAgICAgKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH0gZWxzZSBpZiAoY29sU3Bhbikge1xuICAgICAgLyoqXG4gICAgICAgKiDlpoLmnpzlrZjlnKggY29sU3BhbiDlsZ7mgKfvvIzlsLHljrvmib7lroPnmoTkuIvkuIDkuKogQ2VsbCxcbiAgICAgICAqIOeci+eci+WAvOaYr+WQpuaYryBpc051bGxPclVuZGVmaW5lZO+8jO+8jOWmguaenOS4uuepuui/meWPr+S7peWQiOW5tui/meS4quWNleWFg+agvFxuICAgICAgICovXG4gICAgICBsZXQgbmV4dFdpZHRoID0gd2lkdGg7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNvbFNwYW47IGogKz0gMSkge1xuICAgICAgICBjb25zdCBuZXh0Q2VsbCA9IGNlbGxzW2kgKyBqXTtcbiAgICAgICAgaWYgKG5leHRDZWxsKSB7XG4gICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgcm93RGF0YSxcbiAgICAgICAgICAgIHJvd0luZGV4LFxuICAgICAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgICAgICB3aWR0aDogY29sU3BhbldpZHRoLFxuICAgICAgICAgICAgaXNIZWFkZXJDZWxsLFxuICAgICAgICAgICAgZGF0YUtleSxcbiAgICAgICAgICB9ID0gbmV4dENlbGwucHJvcHM7XG5cbiAgICAgICAgICBjb25zdCBjZWxsVGV4dCA9IGlzRnVuY3Rpb24oY2hpbGRyZW4pXG4gICAgICAgICAgICA/IGNoaWxkcmVuKHJvd0RhdGEsIHJvd0luZGV4KVxuICAgICAgICAgICAgOiBnZXQocm93RGF0YSwgZGF0YUtleSk7XG5cbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAocm93RGF0YSAmJiBpc051bGxPclVuZGVmaW5lZChjZWxsVGV4dCkpIHx8XG4gICAgICAgICAgICAoaXNIZWFkZXJDZWxsICYmIGlzTnVsbE9yVW5kZWZpbmVkKGNoaWxkcmVuKSlcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIG5leHRXaWR0aCArPSBjb2xTcGFuV2lkdGg7XG4gICAgICAgICAgICBjZWxsc1tpICsgal0gPSBjbG9uZUNlbGwobmV4dENlbGwsIHtcbiAgICAgICAgICAgICAgcmVtb3ZlZDogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBuZXh0Q2VsbHMucHVzaChjbG9uZUNlbGwoY2VsbHNbaV0sIHsgd2lkdGg6IG5leHRXaWR0aCB9KSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIG5leHRDZWxscy5wdXNoKGNlbGxzW2ldKTtcbiAgfVxuICByZXR1cm4gbmV4dENlbGxzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtZXJnZUNlbGxzO1xuIl0sInZlcnNpb24iOjN9