import { __decorate } from "tslib";
import React, { cloneElement, isValidElement } from 'react';
import PropTypes from 'prop-types';
import omit from 'lodash/omit';
import defer from 'lodash/defer';
import noop from 'lodash/noop';
import isNil from 'lodash/isNil';
import classNames from 'classnames';
import classes from 'component-classes';
import { pxToRem } from 'choerodon-ui/lib/_util/UnitConvertor';
import KeyCode from 'choerodon-ui/lib/_util/KeyCode';
import { getConfig } from 'choerodon-ui/lib/configure';
import ViewComponent from '../core/ViewComponent';
import Icon from '../icon';
import autobind from '../_util/autobind';
import Button from '../button/Button';
import EventManager from '../_util/EventManager';
import isEmpty from '../_util/isEmpty';
import asyncComponent from '../_util/AsyncComponent';
import message from '../message';
import exception from '../_util/exception';
import { $l } from '../locale-context';
import DataSetRequestError from '../data-set/DataSetRequestError';
import { suffixCls } from './utils';
export const destroyFns = [];
export default class Modal extends ViewComponent {
    constructor() {
        super(...arguments);
        this.moveEvent = new EventManager(typeof window === 'undefined' ? undefined : document);
        this.okCancelEvent = new EventManager();
        this.saveCancelRef = node => (this.cancelButton = node);
        this.handleKeyDown = e => {
            const { cancelButton } = this;
            if (cancelButton && !cancelButton.isDisabled() && e.keyCode === KeyCode.ESC) {
                cancelButton.handleClickWait(e);
            }
        };
        this.registerOk = ok => {
            this.okCancelEvent.removeEventListener('ok');
            this.okCancelEvent.addEventListener('ok', ok);
        };
        this.registerCancel = cancel => {
            this.okCancelEvent.removeEventListener('cancel');
            this.okCancelEvent.addEventListener('cancel', cancel);
        };
        this.getDefaultFooter = (okBtn, cancelBtn) => {
            const { okCancel, drawer, okFirst = getConfig('modalOkFirst') } = this.props;
            let buttons = [okBtn];
            const drawerOkFirst = getConfig('drawerOkFirst');
            if (okCancel) {
                if (okFirst) {
                    buttons.push(cancelBtn);
                }
                else {
                    buttons.unshift(cancelBtn);
                }
                if (drawer && !isNil(drawerOkFirst)) {
                    if (drawerOkFirst) {
                        buttons = [okBtn, cancelBtn];
                    }
                    else {
                        buttons = [cancelBtn, okBtn];
                    }
                }
            }
            return React.createElement("div", null, buttons);
        };
    }
    getOtherProps() {
        const otherProps = omit(super.getOtherProps(), [
            'closable',
            'movable',
            'maskClosable',
            'maskStyle',
            'mask',
            'maskClassName',
            'keyboardClosable',
            'fullScreen',
            'title',
            'footer',
            'close',
            'update',
            'okText',
            'cancelText',
            'okCancel',
            'onClose',
            'onOk',
            'onCancel',
            'destroyOnClose',
            'drawer',
            'afterClose',
            'okProps',
            'cancelProps',
            'border',
            'okFirst',
            'drawerTransitionName',
        ]);
        if (this.props.keyboardClosable) {
            otherProps.autoFocus = true;
            otherProps.tabIndex = -1;
            otherProps.onKeyDown = this.handleKeyDown;
        }
        return otherProps;
    }
    getClassName() {
        const { prefixCls, props: { style = {}, fullScreen, drawer, border = getConfig('modalSectionBorder') }, } = this;
        return super.getClassName({
            [`${prefixCls}-center`]: !drawer && !('left' in style || 'right' in style) && !this.offset,
            [`${prefixCls}-fullscreen`]: fullScreen,
            [`${prefixCls}-drawer`]: drawer,
            [`${prefixCls}-border`]: border,
        });
    }
    render() {
        const { prefixCls } = this;
        const header = this.getHeader();
        const body = this.getBody();
        const footer = this.getFooter();
        return (React.createElement("div", Object.assign({}, this.getMergedProps()),
            React.createElement("div", { className: `${prefixCls}-content` },
                header,
                body,
                footer)));
    }
    componentWillUpdate({ hidden }) {
        if (hidden === false && hidden !== this.props.hidden) {
            defer(() => this.focus());
        }
    }
    componentWillUnmount() {
        this.moveEvent.clear();
        this.okCancelEvent.clear();
    }
    handleHeaderMouseDown(downEvent) {
        const { element } = this;
        if (element) {
            const { prefixCls } = this;
            const { clientX, clientY } = downEvent;
            const { offsetLeft, offsetTop } = element;
            this.moveEvent
                .addEventListener('mousemove', (moveEvent) => {
                const { clientX: moveX, clientY: moveY } = moveEvent;
                classes(element).remove(`${prefixCls}-center`);
                const left = pxToRem(Math.max(offsetLeft + moveX - clientX, 0));
                const top = pxToRem(Math.max(offsetTop + moveY - clientY, 0));
                this.offset = [left, top];
                Object.assign(element.style, {
                    left,
                    top,
                });
            })
                .addEventListener('mouseup', () => {
                this.moveEvent.clear();
            });
        }
    }
    async handleOk() {
        const { onOk = noop } = this.props;
        const promise = Promise.all([onOk(), this.okCancelEvent.fireEvent('ok')]);
        try {
            const [ret1, ret2] = await promise;
            if (ret1 !== false && ret2) {
                this.close();
            }
        }
        catch (e) {
            if (!(e instanceof DataSetRequestError)) {
                message.error(exception(e));
            }
            throw e;
        }
    }
    async handleCancel() {
        const { onCancel = noop } = this.props;
        const promise = Promise.all([onCancel(), this.okCancelEvent.fireEvent('cancel')]);
        try {
            const [ret1, ret2] = await promise;
            if (ret1 !== false && ret2) {
                this.close();
            }
        }
        catch (e) {
            if (!(e instanceof DataSetRequestError)) {
                message.error(exception(e));
            }
            throw e;
        }
    }
    getTitle() {
        const { props: { title }, prefixCls, } = this;
        if (title) {
            return React.createElement("div", { className: `${prefixCls}-title` }, title);
        }
    }
    getHeader() {
        const { prefixCls, props: { closable, movable, fullScreen, drawer }, } = this;
        const title = this.getTitle();
        const buttons = this.getHeaderButtons();
        if (title || closable || movable) {
            const headerProps = {
                className: classNames(`${prefixCls}-header`, {
                    [`${prefixCls}-movable`]: movable && !fullScreen && !drawer,
                }),
            };
            if (movable && !fullScreen && !drawer) {
                headerProps.onMouseDown = this.handleHeaderMouseDown;
            }
            return (React.createElement("div", Object.assign({}, headerProps),
                title,
                buttons));
        }
    }
    getHeaderButtons() {
        const { prefixCls } = this;
        const closeButton = this.getCloseButton();
        if (closeButton) {
            return React.createElement("div", { className: `${prefixCls}-header-buttons` }, closeButton);
        }
    }
    getCloseButton() {
        const { prefixCls, props: { closable }, } = this;
        if (closable) {
            return (React.createElement("button", { type: "button", className: `${prefixCls}-header-button`, onClick: this.close },
                React.createElement(Icon, { type: "close" })));
        }
    }
    renderChildren(children) {
        if (children) {
            const { prefixCls, props } = this;
            const { close = noop, update = noop } = props;
            const modal = {
                close,
                update,
                props,
                handleOk: this.registerOk,
                handleCancel: this.registerCancel,
            };
            return (React.createElement("div", { className: `${prefixCls}-body` }, isValidElement(children) ? cloneElement(children, { modal }) : children));
        }
    }
    getBody() {
        const { children } = this.props;
        return this.renderChildren(typeof children === 'function'
            ? asyncComponent(children)
            : children);
    }
    getFooter() {
        const { okProps, cancelProps, drawer, okText = $l('Modal', 'ok'), cancelText = $l('Modal', 'cancel'), footer = this.getDefaultFooter, } = this.props;
        const funcType = drawer
            ? "raised" /* raised */
            : getConfig('buttonFuncType');
        const okBtn = (React.createElement(Button, Object.assign({ key: "ok", funcType: funcType, color: "primary" /* primary */, onClick: this.handleOk }, okProps), okText));
        const cancelBtn = (React.createElement(Button, Object.assign({ key: "cancel", ref: this.saveCancelRef, funcType: funcType, onClick: this.handleCancel }, cancelProps), cancelText));
        if (typeof footer === 'function') {
            return this.getWrappedFooter(footer(okBtn, cancelBtn));
        }
        if (!isEmpty(footer, true)) {
            return this.getWrappedFooter(footer);
        }
    }
    getWrappedFooter(footer) {
        const { prefixCls } = this;
        const { drawer } = this.props;
        const className = classNames(`${prefixCls}-footer`, {
            [`${prefixCls}-footer-drawer`]: !!drawer,
        });
        return React.createElement("div", { className: className }, footer);
    }
    close() {
        const { close = noop } = this.props;
        close();
    }
}
Modal.displayName = 'Modal';
Modal.propTypes = {
    ...ViewComponent.propTypes,
    closable: PropTypes.bool,
    movable: PropTypes.bool,
    fullScreen: PropTypes.bool,
    maskClosable: PropTypes.bool,
    maskStyle: PropTypes.object,
    mask: PropTypes.bool,
    maskClassName: PropTypes.string,
    keyboardClosable: PropTypes.bool,
    footer: PropTypes.oneOfType([PropTypes.func, PropTypes.node, PropTypes.bool]),
    destroyOnClose: PropTypes.bool,
    okText: PropTypes.node,
    cancelText: PropTypes.node,
    okProps: PropTypes.object,
    cancelProps: PropTypes.object,
    onClose: PropTypes.func,
    onOk: PropTypes.func,
    onCancel: PropTypes.func,
    afterClose: PropTypes.func,
    okCancel: PropTypes.bool,
    drawer: PropTypes.bool,
    // title: PropTypes.node,
    // 此处原本允许title传入node，但是类型为PropTypes.node时无法正确继承ViewComponent
    // 父类中的title指的是HTML元素的title属性，此处title指modal标题，产生歧义，暂时设置为string
    // TODO: 添加modalTitle属性替代此处的title
    title: PropTypes.string,
    okFirst: PropTypes.bool,
};
Modal.defaultProps = {
    suffixCls,
    closable: false,
    movable: true,
    maskClosable: false,
    mask: true,
    keyboardClosable: true,
    okCancel: true,
    destroyOnClose: true,
    fullScreen: false,
    drawer: false,
    autoFocus: true,
};
__decorate([
    autobind
], Modal.prototype, "handleHeaderMouseDown", null);
__decorate([
    autobind
], Modal.prototype, "handleOk", null);
__decorate([
    autobind
], Modal.prototype, "handleCancel", null);
__decorate([
    autobind
], Modal.prototype, "close", null);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,