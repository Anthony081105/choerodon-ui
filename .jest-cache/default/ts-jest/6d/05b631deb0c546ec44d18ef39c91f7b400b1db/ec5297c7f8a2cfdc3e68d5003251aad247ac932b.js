import React, { Children, cloneElement, Component, } from 'react';
import classNames from 'classnames';
import TimelineItem from './TimelineItem';
import Icon from '../icon';
import { getPrefixCls } from '../configure';
export default class Timeline extends Component {
    render() {
        const { prefixCls: customizePrefixCls, children, pending, pendingDot, className, ...restProps } = this.props;
        const pendingNode = typeof pending === 'boolean' ? null : pending;
        const prefixCls = getPrefixCls('timeline', customizePrefixCls);
        const classString = classNames(prefixCls, {
            [`${prefixCls}-pending`]: !!pending,
        }, className);
        // Remove falsy items
        const falsylessItems = Children.toArray(children).filter(item => !!item);
        const items = Children.map(falsylessItems, (ele, idx) => cloneElement(ele, {
            last: idx === Children.count(falsylessItems) - 1,
        }));
        const pendingItem = pending ? (React.createElement(TimelineItem, { pending: !!pending, dot: pendingDot || React.createElement(Icon, { type: "loading" }) }, pendingNode)) : null;
        return (React.createElement("ul", Object.assign({}, restProps, { className: classString }),
            items,
            pendingItem));
    }
}
Timeline.displayName = 'Timeline';
Timeline.Item = TimelineItem;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvdGltZWxpbmUvVGltZWxpbmUudHN4IiwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxFQUFFLEVBQ1osUUFBUSxFQUNSLFlBQVksRUFDWixTQUFTLEdBSVYsTUFBTSxPQUFPLENBQUM7QUFDZixPQUFPLFVBQVUsTUFBTSxZQUFZLENBQUM7QUFDcEMsT0FBTyxZQUFZLE1BQU0sZ0JBQWdCLENBQUM7QUFDMUMsT0FBTyxJQUFJLE1BQU0sU0FBUyxDQUFDO0FBQzNCLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFXNUMsTUFBTSxDQUFDLE9BQU8sT0FBTyxRQUFTLFNBQVEsU0FBNkI7SUFLakUsTUFBTTtRQUNKLE1BQU0sRUFDSixTQUFTLEVBQUUsa0JBQWtCLEVBQzdCLFFBQVEsRUFDUixPQUFPLEVBQ1AsVUFBVSxFQUNWLFNBQVMsRUFDVCxHQUFHLFNBQVMsRUFDYixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDZixNQUFNLFdBQVcsR0FBRyxPQUFPLE9BQU8sS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO1FBQ2xFLE1BQU0sU0FBUyxHQUFHLFlBQVksQ0FBQyxVQUFVLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztRQUMvRCxNQUFNLFdBQVcsR0FBRyxVQUFVLENBQzVCLFNBQVMsRUFDVDtZQUNFLENBQUMsR0FBRyxTQUFTLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPO1NBQ3BDLEVBQ0QsU0FBUyxDQUNWLENBQUM7UUFDRixxQkFBcUI7UUFDckIsTUFBTSxjQUFjLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDekUsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxHQUFzQixFQUFFLEdBQUcsRUFBRSxFQUFFLENBQ3pFLFlBQVksQ0FBQyxHQUFHLEVBQUU7WUFDaEIsSUFBSSxFQUFFLEdBQUcsS0FBSyxRQUFRLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUM7U0FDakQsQ0FBQyxDQUNILENBQUM7UUFDRixNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQzVCLG9CQUFDLFlBQVksSUFBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsVUFBVSxJQUFJLG9CQUFDLElBQUksSUFBQyxJQUFJLEVBQUMsU0FBUyxHQUFHLElBQ3pFLFdBQVcsQ0FDQyxDQUNoQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDVCxPQUFPLENBQ0wsNENBQVEsU0FBUyxJQUFFLFNBQVMsRUFBRSxXQUFXO1lBQ3RDLEtBQUs7WUFDTCxXQUFXLENBQ1QsQ0FDTixDQUFDO0lBQ0osQ0FBQzs7QUF4Q00sb0JBQVcsR0FBRyxVQUFVLENBQUM7QUFFekIsYUFBSSxHQUFHLFlBQVksQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvaHVpaHVhd2svRG9jdW1lbnRzL29wdC9jaG9lcm9kb24tdWkvY29tcG9uZW50cy90aW1lbGluZS9UaW1lbGluZS50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7XG4gIENoaWxkcmVuLFxuICBjbG9uZUVsZW1lbnQsXG4gIENvbXBvbmVudCxcbiAgQ1NTUHJvcGVydGllcyxcbiAgUmVhY3RFbGVtZW50LFxuICBSZWFjdE5vZGUsXG59IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFRpbWVsaW5lSXRlbSBmcm9tICcuL1RpbWVsaW5lSXRlbSc7XG5pbXBvcnQgSWNvbiBmcm9tICcuLi9pY29uJztcbmltcG9ydCB7IGdldFByZWZpeENscyB9IGZyb20gJy4uL2NvbmZpZ3VyZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGltZWxpbmVQcm9wcyB7XG4gIHByZWZpeENscz86IHN0cmluZztcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICAvKiog5oyH5a6a5pyA5ZCO5LiA5Liq5bm954G16IqC54K55piv5ZCm5a2Y5Zyo5oiW5YaF5a65ICovXG4gIHBlbmRpbmc/OiBSZWFjdE5vZGU7XG4gIHBlbmRpbmdEb3Q/OiBSZWFjdE5vZGU7XG4gIHN0eWxlPzogQ1NTUHJvcGVydGllcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGltZWxpbmUgZXh0ZW5kcyBDb21wb25lbnQ8VGltZWxpbmVQcm9wcywgYW55PiB7XG4gIHN0YXRpYyBkaXNwbGF5TmFtZSA9ICdUaW1lbGluZSc7XG5cbiAgc3RhdGljIEl0ZW0gPSBUaW1lbGluZUl0ZW07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHByZWZpeENsczogY3VzdG9taXplUHJlZml4Q2xzLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBwZW5kaW5nLFxuICAgICAgcGVuZGluZ0RvdCxcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIC4uLnJlc3RQcm9wc1xuICAgIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHBlbmRpbmdOb2RlID0gdHlwZW9mIHBlbmRpbmcgPT09ICdib29sZWFuJyA/IG51bGwgOiBwZW5kaW5nO1xuICAgIGNvbnN0IHByZWZpeENscyA9IGdldFByZWZpeENscygndGltZWxpbmUnLCBjdXN0b21pemVQcmVmaXhDbHMpO1xuICAgIGNvbnN0IGNsYXNzU3RyaW5nID0gY2xhc3NOYW1lcyhcbiAgICAgIHByZWZpeENscyxcbiAgICAgIHtcbiAgICAgICAgW2Ake3ByZWZpeENsc30tcGVuZGluZ2BdOiAhIXBlbmRpbmcsXG4gICAgICB9LFxuICAgICAgY2xhc3NOYW1lLFxuICAgICk7XG4gICAgLy8gUmVtb3ZlIGZhbHN5IGl0ZW1zXG4gICAgY29uc3QgZmFsc3lsZXNzSXRlbXMgPSBDaGlsZHJlbi50b0FycmF5KGNoaWxkcmVuKS5maWx0ZXIoaXRlbSA9PiAhIWl0ZW0pO1xuICAgIGNvbnN0IGl0ZW1zID0gQ2hpbGRyZW4ubWFwKGZhbHN5bGVzc0l0ZW1zLCAoZWxlOiBSZWFjdEVsZW1lbnQ8YW55PiwgaWR4KSA9PlxuICAgICAgY2xvbmVFbGVtZW50KGVsZSwge1xuICAgICAgICBsYXN0OiBpZHggPT09IENoaWxkcmVuLmNvdW50KGZhbHN5bGVzc0l0ZW1zKSAtIDEsXG4gICAgICB9KSxcbiAgICApO1xuICAgIGNvbnN0IHBlbmRpbmdJdGVtID0gcGVuZGluZyA/IChcbiAgICAgIDxUaW1lbGluZUl0ZW0gcGVuZGluZz17ISFwZW5kaW5nfSBkb3Q9e3BlbmRpbmdEb3QgfHwgPEljb24gdHlwZT1cImxvYWRpbmdcIiAvPn0+XG4gICAgICAgIHtwZW5kaW5nTm9kZX1cbiAgICAgIDwvVGltZWxpbmVJdGVtPlxuICAgICkgOiBudWxsO1xuICAgIHJldHVybiAoXG4gICAgICA8dWwgey4uLnJlc3RQcm9wc30gY2xhc3NOYW1lPXtjbGFzc1N0cmluZ30+XG4gICAgICAgIHtpdGVtc31cbiAgICAgICAge3BlbmRpbmdJdGVtfVxuICAgICAgPC91bD5cbiAgICApO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=