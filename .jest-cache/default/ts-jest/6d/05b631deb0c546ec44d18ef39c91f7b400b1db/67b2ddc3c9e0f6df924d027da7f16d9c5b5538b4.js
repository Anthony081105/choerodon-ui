import React, { Children, cloneElement, Component } from 'react';
import classNames from 'classnames';
import PropTypes from 'prop-types';
import omit from 'lodash/omit';
import Responsive from '../responsive/Responsive';
import { getPrefixCls } from '../configure';
const defaultGutter = 0;
export default class Row extends Component {
    constructor() {
        super(...arguments);
        this.renderRow = ([gutter = defaultGutter]) => {
            const { type, justify, align, className, style, children, prefixCls: customizePrefixCls, ...others } = this.props;
            const prefixCls = getPrefixCls('row', customizePrefixCls);
            const classes = classNames({
                [prefixCls]: !type,
                [`${prefixCls}-${type}`]: type,
                [`${prefixCls}-${type}-${justify}`]: type && justify,
                [`${prefixCls}-${type}-${align}`]: type && align,
            }, className);
            const rowStyle = gutter > 0
                ? {
                    marginLeft: gutter / -2,
                    marginRight: gutter / -2,
                    ...style,
                }
                : style;
            const cols = Children.map(children, (col) => {
                if (!col) {
                    return null;
                }
                if (col.props && gutter > 0) {
                    return cloneElement(col, {
                        style: {
                            paddingLeft: gutter / 2,
                            paddingRight: gutter / 2,
                            ...col.props.style,
                        },
                    });
                }
                return col;
            });
            const otherProps = { ...others };
            delete otherProps.gutter;
            return (React.createElement("div", Object.assign({}, omit(otherProps, ['rowIndex', 'colIndex']), { className: classes, style: rowStyle }), cols));
        };
    }
    render() {
        const { gutter } = this.props;
        return React.createElement(Responsive, { items: [gutter] }, this.renderRow);
    }
}
Row.displayName = 'Row';
Row.defaultProps = {
    gutter: defaultGutter,
};
Row.propTypes = {
    type: PropTypes.string,
    align: PropTypes.string,
    justify: PropTypes.string,
    className: PropTypes.string,
    children: PropTypes.node,
    gutter: PropTypes.oneOfType([PropTypes.object, PropTypes.number]),
    prefixCls: PropTypes.string,
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvZ3JpZC9yb3cudHN4IiwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxFQUFFLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQWdDLE1BQU0sT0FBTyxDQUFDO0FBQy9GLE9BQU8sVUFBVSxNQUFNLFlBQVksQ0FBQztBQUNwQyxPQUFPLFNBQVMsTUFBTSxZQUFZLENBQUM7QUFDbkMsT0FBTyxJQUFJLE1BQU0sYUFBYSxDQUFDO0FBQy9CLE9BQU8sVUFBNkIsTUFBTSwwQkFBMEIsQ0FBQztBQUNyRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBVTVDLE1BQU0sYUFBYSxHQUFHLENBQUMsQ0FBQztBQUV4QixNQUFNLENBQUMsT0FBTyxPQUFPLEdBQUksU0FBUSxTQUFtQjtJQUFwRDs7UUFpQkUsY0FBUyxHQUFHLENBQUMsQ0FBQyxNQUFNLEdBQUcsYUFBYSxDQUFDLEVBQUUsRUFBRTtZQUN2QyxNQUFNLEVBQ0osSUFBSSxFQUNKLE9BQU8sRUFDUCxLQUFLLEVBQ0wsU0FBUyxFQUNULEtBQUssRUFDTCxRQUFRLEVBQ1IsU0FBUyxFQUFFLGtCQUFrQixFQUM3QixHQUFHLE1BQU0sRUFDVixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7WUFDZixNQUFNLFNBQVMsR0FBRyxZQUFZLENBQUMsS0FBSyxFQUFFLGtCQUFrQixDQUFDLENBQUM7WUFDMUQsTUFBTSxPQUFPLEdBQUcsVUFBVSxDQUN4QjtnQkFDRSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsSUFBSTtnQkFDbEIsQ0FBQyxHQUFHLFNBQVMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUk7Z0JBQzlCLENBQUMsR0FBRyxTQUFTLElBQUksSUFBSSxJQUFJLE9BQU8sRUFBRSxDQUFDLEVBQUUsSUFBSSxJQUFJLE9BQU87Z0JBQ3BELENBQUMsR0FBRyxTQUFTLElBQUksSUFBSSxJQUFJLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxJQUFJLEtBQUs7YUFDakQsRUFDRCxTQUFTLENBQ1YsQ0FBQztZQUNGLE1BQU0sUUFBUSxHQUNYLE1BQWlCLEdBQUcsQ0FBQztnQkFDcEIsQ0FBQyxDQUFDO29CQUNFLFVBQVUsRUFBRyxNQUFpQixHQUFHLENBQUMsQ0FBQztvQkFDbkMsV0FBVyxFQUFHLE1BQWlCLEdBQUcsQ0FBQyxDQUFDO29CQUNwQyxHQUFHLEtBQUs7aUJBQ1Q7Z0JBQ0gsQ0FBQyxDQUFDLEtBQUssQ0FBQztZQUNaLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBaUMsRUFBRSxFQUFFO2dCQUN4RSxJQUFJLENBQUMsR0FBRyxFQUFFO29CQUNSLE9BQU8sSUFBSSxDQUFDO2lCQUNiO2dCQUNELElBQUksR0FBRyxDQUFDLEtBQUssSUFBSyxNQUFpQixHQUFHLENBQUMsRUFBRTtvQkFDdkMsT0FBTyxZQUFZLENBQUMsR0FBRyxFQUFFO3dCQUN2QixLQUFLLEVBQUU7NEJBQ0wsV0FBVyxFQUFHLE1BQWlCLEdBQUcsQ0FBQzs0QkFDbkMsWUFBWSxFQUFHLE1BQWlCLEdBQUcsQ0FBQzs0QkFDcEMsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUs7eUJBQ25CO3FCQUNGLENBQUMsQ0FBQztpQkFDSjtnQkFDRCxPQUFPLEdBQUcsQ0FBQztZQUNiLENBQUMsQ0FBQyxDQUFDO1lBQ0gsTUFBTSxVQUFVLEdBQUcsRUFBRSxHQUFHLE1BQU0sRUFBRSxDQUFDO1lBQ2pDLE9BQU8sVUFBVSxDQUFDLE1BQU0sQ0FBQztZQUN6QixPQUFPLENBQ0wsNkNBQVMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQyxJQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLFFBQVEsS0FDckYsSUFBSSxDQUNELENBQ1AsQ0FBQztRQUNKLENBQUMsQ0FBQztJQU1KLENBQUM7SUFKQyxNQUFNO1FBQ0osTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDOUIsT0FBTyxvQkFBQyxVQUFVLElBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBYyxDQUFDO0lBQ3BFLENBQUM7O0FBeEVNLGVBQVcsR0FBRyxLQUFLLENBQUM7QUFFcEIsZ0JBQVksR0FBRztJQUNwQixNQUFNLEVBQUUsYUFBYTtDQUN0QixDQUFDO0FBRUssYUFBUyxHQUFHO0lBQ2pCLElBQUksRUFBRSxTQUFTLENBQUMsTUFBTTtJQUN0QixLQUFLLEVBQUUsU0FBUyxDQUFDLE1BQU07SUFDdkIsT0FBTyxFQUFFLFNBQVMsQ0FBQyxNQUFNO0lBQ3pCLFNBQVMsRUFBRSxTQUFTLENBQUMsTUFBTTtJQUMzQixRQUFRLEVBQUUsU0FBUyxDQUFDLElBQUk7SUFDeEIsTUFBTSxFQUFFLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNqRSxTQUFTLEVBQUUsU0FBUyxDQUFDLE1BQU07Q0FDNUIsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvaHVpaHVhd2svRG9jdW1lbnRzL29wdC9jaG9lcm9kb24tdWkvY29tcG9uZW50cy9ncmlkL3Jvdy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IENoaWxkcmVuLCBjbG9uZUVsZW1lbnQsIENvbXBvbmVudCwgSFRNTEF0dHJpYnV0ZXMsIFJlYWN0RWxlbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBvbWl0IGZyb20gJ2xvZGFzaC9vbWl0JztcbmltcG9ydCBSZXNwb25zaXZlLCB7IEJyZWFrcG9pbnRNYXAgfSBmcm9tICcuLi9yZXNwb25zaXZlL1Jlc3BvbnNpdmUnO1xuaW1wb3J0IHsgZ2V0UHJlZml4Q2xzIH0gZnJvbSAnLi4vY29uZmlndXJlJztcblxuZXhwb3J0IGludGVyZmFjZSBSb3dQcm9wcyBleHRlbmRzIEhUTUxBdHRyaWJ1dGVzPEhUTUxEaXZFbGVtZW50PiB7XG4gIGd1dHRlcj86IG51bWJlciB8IEJyZWFrcG9pbnRNYXA7XG4gIHR5cGU/OiAnZmxleCc7XG4gIGFsaWduPzogJ3RvcCcgfCAnbWlkZGxlJyB8ICdib3R0b20nO1xuICBqdXN0aWZ5PzogJ3N0YXJ0JyB8ICdlbmQnIHwgJ2NlbnRlcicgfCAnc3BhY2UtYXJvdW5kJyB8ICdzcGFjZS1iZXR3ZWVuJztcbiAgcHJlZml4Q2xzPzogc3RyaW5nO1xufVxuXG5jb25zdCBkZWZhdWx0R3V0dGVyID0gMDtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUm93IGV4dGVuZHMgQ29tcG9uZW50PFJvd1Byb3BzPiB7XG4gIHN0YXRpYyBkaXNwbGF5TmFtZSA9ICdSb3cnO1xuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgZ3V0dGVyOiBkZWZhdWx0R3V0dGVyLFxuICB9O1xuXG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgdHlwZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBhbGlnbjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBqdXN0aWZ5OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgZ3V0dGVyOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMubnVtYmVyXSksXG4gICAgcHJlZml4Q2xzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICB9O1xuXG4gIHJlbmRlclJvdyA9IChbZ3V0dGVyID0gZGVmYXVsdEd1dHRlcl0pID0+IHtcbiAgICBjb25zdCB7XG4gICAgICB0eXBlLFxuICAgICAganVzdGlmeSxcbiAgICAgIGFsaWduLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgc3R5bGUsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIHByZWZpeENsczogY3VzdG9taXplUHJlZml4Q2xzLFxuICAgICAgLi4ub3RoZXJzXG4gICAgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgcHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCdyb3cnLCBjdXN0b21pemVQcmVmaXhDbHMpO1xuICAgIGNvbnN0IGNsYXNzZXMgPSBjbGFzc05hbWVzKFxuICAgICAge1xuICAgICAgICBbcHJlZml4Q2xzXTogIXR5cGUsXG4gICAgICAgIFtgJHtwcmVmaXhDbHN9LSR7dHlwZX1gXTogdHlwZSxcbiAgICAgICAgW2Ake3ByZWZpeENsc30tJHt0eXBlfS0ke2p1c3RpZnl9YF06IHR5cGUgJiYganVzdGlmeSxcbiAgICAgICAgW2Ake3ByZWZpeENsc30tJHt0eXBlfS0ke2FsaWdufWBdOiB0eXBlICYmIGFsaWduLFxuICAgICAgfSxcbiAgICAgIGNsYXNzTmFtZSxcbiAgICApO1xuICAgIGNvbnN0IHJvd1N0eWxlID1cbiAgICAgIChndXR0ZXIgYXMgbnVtYmVyKSA+IDBcbiAgICAgICAgPyB7XG4gICAgICAgICAgICBtYXJnaW5MZWZ0OiAoZ3V0dGVyIGFzIG51bWJlcikgLyAtMixcbiAgICAgICAgICAgIG1hcmdpblJpZ2h0OiAoZ3V0dGVyIGFzIG51bWJlcikgLyAtMixcbiAgICAgICAgICAgIC4uLnN0eWxlLFxuICAgICAgICAgIH1cbiAgICAgICAgOiBzdHlsZTtcbiAgICBjb25zdCBjb2xzID0gQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCAoY29sOiBSZWFjdEVsZW1lbnQ8SFRNTERpdkVsZW1lbnQ+KSA9PiB7XG4gICAgICBpZiAoIWNvbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmIChjb2wucHJvcHMgJiYgKGd1dHRlciBhcyBudW1iZXIpID4gMCkge1xuICAgICAgICByZXR1cm4gY2xvbmVFbGVtZW50KGNvbCwge1xuICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICBwYWRkaW5nTGVmdDogKGd1dHRlciBhcyBudW1iZXIpIC8gMixcbiAgICAgICAgICAgIHBhZGRpbmdSaWdodDogKGd1dHRlciBhcyBudW1iZXIpIC8gMixcbiAgICAgICAgICAgIC4uLmNvbC5wcm9wcy5zdHlsZSxcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb2w7XG4gICAgfSk7XG4gICAgY29uc3Qgb3RoZXJQcm9wcyA9IHsgLi4ub3RoZXJzIH07XG4gICAgZGVsZXRlIG90aGVyUHJvcHMuZ3V0dGVyO1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IHsuLi5vbWl0KG90aGVyUHJvcHMsIFsncm93SW5kZXgnLCAnY29sSW5kZXgnXSl9IGNsYXNzTmFtZT17Y2xhc3Nlc30gc3R5bGU9e3Jvd1N0eWxlfT5cbiAgICAgICAge2NvbHN9XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGd1dHRlciB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gPFJlc3BvbnNpdmUgaXRlbXM9e1tndXR0ZXJdfT57dGhpcy5yZW5kZXJSb3d9PC9SZXNwb25zaXZlPjtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9