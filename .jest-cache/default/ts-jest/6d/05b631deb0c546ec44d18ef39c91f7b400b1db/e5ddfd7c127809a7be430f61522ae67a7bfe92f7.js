import React, { cloneElement, Component, } from 'react';
import classNames from 'classnames';
import DirectoryTree from './DirectoryTree';
import animation from '../_util/openAnimation';
import RcTree, { TreeNode } from '../rc-components/tree';
import Icon from '../icon';
import Progress from '../progress';
import { getPrefixCls } from '../configure';
export { TreeNode };
export default class Tree extends Component {
    constructor() {
        super(...arguments);
        this.renderSwitcherIcon = ({ isLeaf, loading }) => {
            const { showLine, switcherIcon } = this.props;
            const prefixCls = this.getPrefixCls();
            if (loading) {
                return (React.createElement(Progress, { type: "loading" /* loading */, className: `${prefixCls}-switcher-loading-icon`, size: "small" /* small */ }));
            }
            const switcherCls = `${prefixCls}-switcher-icon`;
            if (showLine) {
                if (isLeaf) {
                    return React.createElement(Icon, { type: "note", className: `${prefixCls}-switcher-line-icon` });
                }
                return React.createElement(Icon, { type: "arrow_drop_down", className: switcherCls });
            }
            if (isLeaf) {
                return null;
            }
            if (switcherIcon) {
                const switcherOriginCls = switcherIcon.props.className || '';
                return cloneElement(switcherIcon, {
                    className: [switcherOriginCls, switcherCls],
                });
            }
            return React.createElement(Icon, { type: "arrow_drop_down", className: switcherCls });
        };
        this.setTreeRef = (node) => {
            this.tree = node;
        };
    }
    getPrefixCls() {
        const { prefixCls } = this.props;
        return getPrefixCls('tree', prefixCls);
    }
    render() {
        const props = this.props;
        const { className, showIcon, children } = props;
        const { checkable } = props;
        const prefixCls = this.getPrefixCls();
        return (React.createElement(RcTree, Object.assign({ itemHeight: 20, ref: this.setTreeRef }, props, { className: classNames(!showIcon && `${prefixCls}-icon-hide`, className), checkable: checkable ? React.createElement("span", { className: `${prefixCls}-checkbox-inner` }) : 0, switcherIcon: this.renderSwitcherIcon, prefixCls: prefixCls }), children));
    }
}
Tree.displayName = 'Tree';
Tree.TreeNode = TreeNode;
Tree.DirectoryTree = DirectoryTree;
Tree.defaultProps = {
    checkable: false,
    showIcon: false,
    openAnimation: animation,
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,