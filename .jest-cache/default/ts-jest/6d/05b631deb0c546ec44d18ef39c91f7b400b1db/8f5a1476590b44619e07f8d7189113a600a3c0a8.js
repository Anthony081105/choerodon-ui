import { __decorate } from "tslib";
import React from 'react';
import PropTypes from 'prop-types';
import { action, computed, isArrayLike, observable, runInAction } from 'mobx';
import { observer } from 'mobx-react';
import omit from 'lodash/omit';
import flatten from 'lodash/flatten';
import KeyCode from 'choerodon-ui/lib/_util/KeyCode';
import { getConfig } from 'choerodon-ui/lib/configure';
import TriggerField from '../trigger-field/TriggerField';
import Icon from '../icon';
import Tabs from '../tabs';
import { $l } from '../locale-context';
import IconCategory from './IconCategory';
import autobind from '../_util/autobind';
import { stopEvent } from '../_util/EventManager';
const COLUMNS = 5;
let IconPicker = class IconPicker extends TriggerField {
    constructor(props, context) {
        super(props, context);
        runInAction(() => {
            this.categoryPages = {};
            this.activeCategory = this.categoryKeys[0];
        });
    }
    get categories() {
        const icons = getConfig('icons');
        return isArrayLike(icons) ? { default: icons } : icons;
    }
    get categoryKeys() {
        return Object.keys(this.categories);
    }
    get selectedIndex() {
        return this.categories[this.activeCategory].indexOf(this.selectedIcon);
    }
    get filteredIcons() {
        const { text, categories } = this;
        if (text) {
            return flatten(this.categoryKeys.map(category => categories[category].filter(icon => icon.startsWith(text))));
        }
        return [];
    }
    get selectedIcon() {
        const { categories } = this;
        return this.selected || this.getValue() || categories[this.activeCategory][0];
    }
    getOtherProps() {
        return omit(super.getOtherProps(), ['pageSize']);
    }
    setActiveCategory(category) {
        this.activeCategory = category;
        const page = this.categoryPages[category];
        this.changeSelected(this.categories[category][(page - 1) * this.props.pageSize]);
    }
    setCategoryPage(page, category) {
        this.categoryPages[category] = page;
        this.changeSelected(this.categories[category][(page - 1) * this.props.pageSize]);
    }
    handleTabsChange(category) {
        this.setActiveCategory(category);
    }
    handleItemSelect(icon) {
        this.choose(icon);
    }
    handlePageChange(page, category) {
        this.setCategoryPage(page, category);
    }
    handleKeyDown(e) {
        if (!this.isDisabled() && !this.isReadOnly()) {
            if (this.popup) {
                switch (e.keyCode) {
                    case KeyCode.RIGHT:
                        stopEvent(e);
                        this.handleKeyDownRight();
                        break;
                    case KeyCode.LEFT:
                        stopEvent(e);
                        this.handleKeyDownLeft();
                        break;
                    case KeyCode.DOWN:
                        stopEvent(e);
                        this.handleKeyDownDown();
                        break;
                    case KeyCode.UP:
                        stopEvent(e);
                        this.handleKeyDownUp();
                        break;
                    case KeyCode.END:
                        stopEvent(e);
                        this.handleKeyDownEnd();
                        break;
                    case KeyCode.HOME:
                        stopEvent(e);
                        this.handleKeyDownHome();
                        break;
                    case KeyCode.PAGE_UP:
                        stopEvent(e);
                        this.handleKeyDownPageUp();
                        break;
                    case KeyCode.PAGE_DOWN:
                        stopEvent(e);
                        this.handleKeyDownPageDown();
                        break;
                    case KeyCode.ENTER:
                        e.preventDefault();
                        this.handleKeyDownEnter();
                        break;
                    case KeyCode.TAB:
                        this.handleKeyDownTab();
                        break;
                    case KeyCode.ESC:
                        e.preventDefault();
                        this.handleKeyDownEsc();
                        break;
                    default:
                }
            }
            else if (e.keyCode === KeyCode.SPACE) {
                e.preventDefault();
                this.handleKeyDownSpace();
            }
        }
        super.handleKeyDown(e);
    }
    handleKeyDownHome() {
        const { activeCategory, categoryPages, props: { pageSize }, } = this;
        const category = this.categories[activeCategory];
        const page = categoryPages[activeCategory] || 1;
        this.changeSelected(category[(page - 1) * pageSize]);
    }
    handleKeyDownEnd() {
        const { activeCategory, categoryPages, props: { pageSize }, } = this;
        const category = this.categories[activeCategory];
        const page = categoryPages[activeCategory] || 1;
        this.changeSelected(category[page * pageSize - 1] || category[category.length - 1]);
    }
    handleKeyDownLeftOrRight(isLeft) {
        const { activeCategory, selectedIndex, categoryPages, categories, categoryKeys, props: { pageSize }, } = this;
        const step = isLeft ? -1 : 1;
        let category = categories[activeCategory];
        let index = selectedIndex;
        if (index % COLUMNS === (isLeft ? 0 : COLUMNS - 1) ||
            (!isLeft && index === category.length - 1)) {
            const activeCategoryIndex = categoryKeys.indexOf(activeCategory);
            if (activeCategoryIndex !== (isLeft ? 0 : categoryKeys.length - 1)) {
                const newTabIndex = activeCategoryIndex + step;
                const newKey = categoryKeys[newTabIndex];
                this.setActiveCategory(newKey);
                const page = categoryPages[activeCategory] || 1;
                category = categories[newKey];
                const newPage = categoryPages[newKey] || 1;
                index += (newPage - page) * pageSize;
                if (!category[index]) {
                    index = isLeft ? category.length - 1 : (newPage - 1) * pageSize;
                }
            }
        }
        else {
            index += step;
        }
        if (category[index]) {
            this.changeSelected(category[index]);
        }
    }
    handleKeyDownUpOrDown(isUP) {
        const { activeCategory, selectedIndex, categoryPages, props: { pageSize }, } = this;
        const step = isUP ? -1 : 1;
        const category = this.categories[activeCategory];
        let index = selectedIndex;
        const page = categoryPages[activeCategory] || 1;
        if (isUP
            ? index < (page - 1) * pageSize + COLUMNS && page > 1
            : index > page * pageSize - COLUMNS && page < Math.ceil(category.length / pageSize)) {
            this.setCategoryPage(page + step, activeCategory);
        }
        index += step * COLUMNS;
        if (category[index]) {
            this.changeSelected(category[index]);
        }
    }
    handleKeyDownLeft() {
        this.handleKeyDownLeftOrRight(true);
    }
    handleKeyDownRight() {
        this.handleKeyDownLeftOrRight(false);
    }
    handleKeyDownUp() {
        this.handleKeyDownUpOrDown(true);
    }
    handleKeyDownDown() {
        if (this.popup) {
            this.handleKeyDownUpOrDown(false);
        }
        else {
            this.expand();
        }
    }
    handleKeyDownPageUp() {
        const { activeCategory, selectedIndex, categoryPages, props: { pageSize }, } = this;
        const page = categoryPages[activeCategory] || 1;
        const category = this.categories[activeCategory];
        if (page > 1) {
            this.setCategoryPage(page - 1, activeCategory);
            this.changeSelected(category[selectedIndex - pageSize]);
        }
    }
    handleKeyDownPageDown() {
        const { activeCategory, selectedIndex, categoryPages, props: { pageSize }, } = this;
        const page = categoryPages[activeCategory] || 1;
        const category = this.categories[activeCategory];
        if (page < Math.ceil(category.length / pageSize)) {
            this.setCategoryPage(page + 1, activeCategory);
            this.changeSelected(category[selectedIndex + pageSize] || category[category.length - 1]);
        }
    }
    handleKeyDownEnter() {
        this.choose(this.selectedIcon);
    }
    handleKeyDownEsc() {
        this.collapse();
    }
    handleKeyDownTab() {
        this.collapse();
    }
    handleKeyDownSpace() {
        this.expand();
    }
    changeSelected(selected) {
        this.selected = selected;
    }
    choose(icon) {
        this.prepareSetValue(icon);
        this.changeSelected(icon);
        if (!this.multiple) {
            this.collapse();
        }
    }
    syncValueOnBlur(value) {
        if (this.filteredIcons.indexOf(value) !== -1) {
            this.choose(value);
        }
        else {
            this.setText(undefined);
        }
    }
    handlePopupAnimateAppear() { }
    handlePopupAnimateEnd() { }
    getPopupStyleFromAlign() {
        return undefined;
    }
    getTriggerIconFont() {
        return 'developer_board';
    }
    getPopupContent() {
        const { text } = this;
        if (text) {
            return this.renderFilteredIcons();
        }
        return this.renderIconCategories();
    }
    getPrefix() {
        const value = this.getValue();
        if (value) {
            return this.wrapperPrefix(React.createElement(Icon, { type: value }));
        }
    }
    renderFilteredIcons() {
        const { prefixCls } = this;
        return (React.createElement("div", { className: `${prefixCls}-single-tab` },
            React.createElement(IconCategory, { paging: false, value: this.selectedIcon, icons: this.filteredIcons, prefixCls: prefixCls, onSelect: this.handleItemSelect })));
    }
    renderIconCategories() {
        const { activeCategory, prefixCls, props: { pageSize }, categories, categoryKeys, categoryPages, } = this;
        const { TabPane } = Tabs;
        if (categoryKeys.length > 1) {
            const tabs = categoryKeys.map(category => (React.createElement(TabPane, { key: category, tab: $l('Icon', category), className: `${prefixCls}-tab` },
                React.createElement(IconCategory, { page: categoryPages[category], pageSize: pageSize, category: category, value: category === activeCategory ? this.selectedIcon : undefined, icons: categories[category], prefixCls: prefixCls, onSelect: this.handleItemSelect, onPageChange: this.handlePageChange }))));
            return (React.createElement("div", null,
                React.createElement(Tabs, { onChange: this.handleTabsChange, activeKey: activeCategory }, tabs)));
        }
        const category = categoryKeys[0];
        return (React.createElement("div", { className: `${prefixCls}-single-tab` },
            React.createElement(IconCategory, { page: categoryPages[category], pageSize: pageSize, category: category, value: category === activeCategory ? this.selectedIcon : undefined, icons: categories[category], prefixCls: prefixCls, onSelect: this.handleItemSelect, onPageChange: this.handlePageChange })));
    }
};
IconPicker.displayName = 'IconPicker';
IconPicker.propTypes = {
    ...TriggerField.propTypes,
    pageSize: PropTypes.number,
};
IconPicker.defaultProps = {
    ...TriggerField.defaultProps,
    suffixCls: 'icon-picker',
    pageSize: 100,
};
__decorate([
    observable
], IconPicker.prototype, "activeCategory", void 0);
__decorate([
    observable
], IconPicker.prototype, "selected", void 0);
__decorate([
    observable
], IconPicker.prototype, "categoryPages", void 0);
__decorate([
    computed
], IconPicker.prototype, "categories", null);
__decorate([
    computed
], IconPicker.prototype, "categoryKeys", null);
__decorate([
    computed
], IconPicker.prototype, "selectedIndex", null);
__decorate([
    computed
], IconPicker.prototype, "filteredIcons", null);
__decorate([
    computed
], IconPicker.prototype, "selectedIcon", null);
__decorate([
    action
], IconPicker.prototype, "setActiveCategory", null);
__decorate([
    action
], IconPicker.prototype, "setCategoryPage", null);
__decorate([
    autobind
], IconPicker.prototype, "handleTabsChange", null);
__decorate([
    autobind
], IconPicker.prototype, "handleItemSelect", null);
__decorate([
    autobind
], IconPicker.prototype, "handlePageChange", null);
__decorate([
    autobind
], IconPicker.prototype, "handleKeyDown", null);
__decorate([
    action
], IconPicker.prototype, "changeSelected", null);
IconPicker = __decorate([
    observer
], IconPicker);
export default IconPicker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,