import React, { Component } from 'react';
import classnames from 'classnames';
import omit from 'lodash/omit';
export default function createTableRow(Cmp = 'tr') {
    class BodyRow extends Component {
        constructor(props) {
            super(props);
            this.store = props.store;
            const { selectedRowKeys } = this.store.getState();
            this.state = {
                selected: selectedRowKeys.indexOf(props.rowKey) >= 0,
            };
        }
        componentDidMount() {
            this.subscribe();
        }
        componentWillUnmount() {
            if (this.unsubscribe) {
                this.unsubscribe();
            }
        }
        subscribe() {
            const { store, rowKey } = this.props;
            this.unsubscribe = store.subscribe(() => {
                const { state } = this;
                const { selectedRowKeys } = this.store.getState();
                const selected = selectedRowKeys.indexOf(rowKey) >= 0;
                if (selected !== state.selected) {
                    this.setState({ selected });
                }
            });
        }
        render() {
            const { props } = this;
            const { selected } = this.state;
            const { className, prefixCls, children } = props;
            const otherProps = omit(props, ['prefixCls', 'rowKey', 'store', 'children']);
            const classString = classnames(className, {
                [`${prefixCls}-row-selected`]: selected,
            });
            return (React.createElement(Cmp, Object.assign({}, otherProps, { className: classString }), children));
        }
    }
    return BodyRow;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvdGFibGUvY3JlYXRlQm9keVJvdy50c3giLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLEVBQUUsRUFBRSxTQUFTLEVBQWtCLE1BQU0sT0FBTyxDQUFDO0FBQ3pELE9BQU8sVUFBVSxNQUFNLFlBQVksQ0FBQztBQUNwQyxPQUFPLElBQUksTUFBTSxhQUFhLENBQUM7QUFnQi9CLE1BQU0sQ0FBQyxPQUFPLFVBQVUsY0FBYyxDQUFDLEdBQUcsR0FBRyxJQUFJO0lBQy9DLE1BQU0sT0FBUSxTQUFRLFNBQXFDO1FBS3pELFlBQVksS0FBbUI7WUFDN0IsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBRWIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDO1lBQ3pCLE1BQU0sRUFBRSxlQUFlLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBRWxELElBQUksQ0FBQyxLQUFLLEdBQUc7Z0JBQ1gsUUFBUSxFQUFFLGVBQWUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7YUFDckQsQ0FBQztRQUNKLENBQUM7UUFFRCxpQkFBaUI7WUFDZixJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDbkIsQ0FBQztRQUVELG9CQUFvQjtZQUNsQixJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7Z0JBQ3BCLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQzthQUNwQjtRQUNILENBQUM7UUFFRCxTQUFTO1lBQ1AsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQ3JDLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7Z0JBQ3RDLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUM7Z0JBQ3ZCLE1BQU0sRUFBRSxlQUFlLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUNsRCxNQUFNLFFBQVEsR0FBRyxlQUFlLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDdEQsSUFBSSxRQUFRLEtBQUssS0FBSyxDQUFDLFFBQVEsRUFBRTtvQkFDL0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7aUJBQzdCO1lBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDO1FBRUQsTUFBTTtZQUNKLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUM7WUFDdkIsTUFBTSxFQUFFLFFBQVEsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7WUFDaEMsTUFBTSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLEdBQUcsS0FBSyxDQUFDO1lBQ2pELE1BQU0sVUFBVSxHQUFRLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxXQUFXLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDO1lBQ2xGLE1BQU0sV0FBVyxHQUFHLFVBQVUsQ0FBQyxTQUFTLEVBQUU7Z0JBQ3hDLENBQUMsR0FBRyxTQUFTLGVBQWUsQ0FBQyxFQUFFLFFBQVE7YUFDeEMsQ0FBQyxDQUFDO1lBRUgsT0FBTyxDQUNMLG9CQUFDLEdBQUcsb0JBQUssVUFBVSxJQUFFLFNBQVMsRUFBRSxXQUFXLEtBQ3hDLFFBQVEsQ0FDTCxDQUNQLENBQUM7UUFDSixDQUFDO0tBQ0Y7SUFFRCxPQUFPLE9BQXVCLENBQUM7QUFDakMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvaHVpaHVhd2svRG9jdW1lbnRzL29wdC9jaG9lcm9kb24tdWkvY29tcG9uZW50cy90YWJsZS9jcmVhdGVCb2R5Um93LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBDb21wb25lbnRDbGFzcyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IG9taXQgZnJvbSAnbG9kYXNoL29taXQnO1xuaW1wb3J0IHsgU3RvcmUgfSBmcm9tICcuL2NyZWF0ZVN0b3JlJztcblxuaW50ZXJmYWNlIEJvZHlSb3dQcm9wcyB7XG4gIHN0b3JlOiBTdG9yZTtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICByb3dLZXk6IHN0cmluZztcbiAgcHJlZml4Q2xzOiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBCb2R5Um93U3RhdGUge1xuICBzZWxlY3RlZDogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCb2R5Um93Q2xhc3MgZXh0ZW5kcyBDb21wb25lbnRDbGFzcyB7fVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVUYWJsZVJvdyhDbXAgPSAndHInKSB7XG4gIGNsYXNzIEJvZHlSb3cgZXh0ZW5kcyBDb21wb25lbnQ8Qm9keVJvd1Byb3BzLCBCb2R5Um93U3RhdGU+IHtcbiAgICBwcml2YXRlIHN0b3JlOiBTdG9yZTtcblxuICAgIHByaXZhdGUgdW5zdWJzY3JpYmU6ICgpID0+IHZvaWQ7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogQm9keVJvd1Byb3BzKSB7XG4gICAgICBzdXBlcihwcm9wcyk7XG5cbiAgICAgIHRoaXMuc3RvcmUgPSBwcm9wcy5zdG9yZTtcbiAgICAgIGNvbnN0IHsgc2VsZWN0ZWRSb3dLZXlzIH0gPSB0aGlzLnN0b3JlLmdldFN0YXRlKCk7XG5cbiAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgIHNlbGVjdGVkOiBzZWxlY3RlZFJvd0tleXMuaW5kZXhPZihwcm9wcy5yb3dLZXkpID49IDAsXG4gICAgICB9O1xuICAgIH1cblxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5zdWJzY3JpYmUoKTtcbiAgICB9XG5cbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLnVuc3Vic2NyaWJlKSB7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzdWJzY3JpYmUoKSB7XG4gICAgICBjb25zdCB7IHN0b3JlLCByb3dLZXkgfSA9IHRoaXMucHJvcHM7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gc3RvcmUuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgY29uc3QgeyBzdGF0ZSB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyBzZWxlY3RlZFJvd0tleXMgfSA9IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWQgPSBzZWxlY3RlZFJvd0tleXMuaW5kZXhPZihyb3dLZXkpID49IDA7XG4gICAgICAgIGlmIChzZWxlY3RlZCAhPT0gc3RhdGUuc2VsZWN0ZWQpIHtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgc2VsZWN0ZWQgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgIGNvbnN0IHsgcHJvcHMgfSA9IHRoaXM7XG4gICAgICBjb25zdCB7IHNlbGVjdGVkIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgY29uc3QgeyBjbGFzc05hbWUsIHByZWZpeENscywgY2hpbGRyZW4gfSA9IHByb3BzO1xuICAgICAgY29uc3Qgb3RoZXJQcm9wczogYW55ID0gb21pdChwcm9wcywgWydwcmVmaXhDbHMnLCAncm93S2V5JywgJ3N0b3JlJywgJ2NoaWxkcmVuJ10pO1xuICAgICAgY29uc3QgY2xhc3NTdHJpbmcgPSBjbGFzc25hbWVzKGNsYXNzTmFtZSwge1xuICAgICAgICBbYCR7cHJlZml4Q2xzfS1yb3ctc2VsZWN0ZWRgXTogc2VsZWN0ZWQsXG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPENtcCB7Li4ub3RoZXJQcm9wc30gY2xhc3NOYW1lPXtjbGFzc1N0cmluZ30+XG4gICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICA8L0NtcD5cbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIEJvZHlSb3cgYXMgQm9keVJvd0NsYXNzO1xufVxuIl0sInZlcnNpb24iOjN9