import React, { Component } from 'react';
import { findDOMNode } from 'react-dom';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import addEventListener from '../_util/addEventListener';
import Affix from '../affix';
import { getPrefixCls } from '../configure';
import scrollTo from '../_util/scrollTo';
import getScroll from '../_util/getScroll';
function getDefaultContainer() {
    return window;
}
function getOffsetTop(element, container) {
    if (!element) {
        return 0;
    }
    if (!element.getClientRects().length) {
        return 0;
    }
    const rect = element.getBoundingClientRect();
    if (rect.width || rect.height) {
        if (container === window && element.ownerDocument) {
            container = element.ownerDocument.documentElement;
            return rect.top - container.clientTop;
        }
        return rect.top - container.getBoundingClientRect().top;
    }
    return rect.top;
}
const sharpMatcherRegx = /#([^#]+)$/;
export default class Anchor extends Component {
    constructor() {
        super(...arguments);
        this.state = {
            activeLink: null,
        };
        this.links = [];
        this.handleScrollTo = (link) => {
            const { offsetTop, getContainer, targetOffset } = this.props;
            this.setState({ activeLink: link });
            const container = getContainer();
            const scrollTop = getScroll(container, true);
            const sharpLinkMatch = sharpMatcherRegx.exec(link);
            if (!sharpLinkMatch) {
                return;
            }
            const targetElement = document.getElementById(sharpLinkMatch[1]);
            if (!targetElement) {
                return;
            }
            const eleOffsetTop = getOffsetTop(targetElement, container);
            let y = scrollTop + eleOffsetTop;
            y -= targetOffset !== undefined ? targetOffset : offsetTop || 0;
            this.animating = true;
            scrollTo(y, {
                callback: () => {
                    this.animating = false;
                },
                getContainer,
            });
        };
        this.saveInkNode = (node) => {
            this.inkNode = node;
        };
        this.handleScroll = () => {
            if (this.animating) {
                return;
            }
            const { activeLink } = this.state;
            const { offsetTop, bounds, targetOffset } = this.props;
            const currentActiveLink = this.getCurrentAnchor(targetOffset !== undefined ? targetOffset : offsetTop || 0, bounds);
            if (activeLink !== currentActiveLink) {
                this.setState({
                    activeLink: currentActiveLink,
                });
            }
        };
        this.updateInk = () => {
            if (typeof document === 'undefined') {
                return;
            }
            const prefixCls = this.getPrefixCls();
            const linkNode = findDOMNode(this).getElementsByClassName(`${prefixCls}-link-title-active`)[0];
            if (linkNode) {
                this.inkNode.style.top = `${linkNode.offsetTop + linkNode.clientHeight / 2 - 4.5}px`;
            }
        };
    }
    getChildContext() {
        const { onClick } = this.props;
        const { activeLink } = this.state;
        const c7nAnchor = {
            registerLink: (link) => {
                if (!this.links.includes(link)) {
                    this.links.push(link);
                }
            },
            unregisterLink: (link) => {
                const index = this.links.indexOf(link);
                if (index !== -1) {
                    this.links.splice(index, 1);
                }
            },
            activeLink,
            scrollTo: this.handleScrollTo,
            onClick,
        };
        return { c7nAnchor };
    }
    componentDidMount() {
        const { getContainer } = this.props;
        this.scrollContainer = getContainer();
        this.scrollEvent = addEventListener(this.scrollContainer, 'scroll', this.handleScroll);
        this.handleScroll();
    }
    componentDidUpdate() {
        if (this.scrollEvent) {
            const { getContainer } = this.props;
            const currentContainer = getContainer();
            if (this.scrollContainer !== currentContainer) {
                this.scrollContainer = currentContainer;
                this.scrollEvent.remove();
                this.scrollEvent = addEventListener(this.scrollContainer, 'scroll', this.handleScroll);
                this.handleScroll();
            }
        }
        this.updateInk();
    }
    componentWillUnmount() {
        if (this.scrollEvent) {
            this.scrollEvent.remove();
        }
    }
    getCurrentAnchor(offsetTop = 0, bounds = 5) {
        const { getCurrentAnchor } = this.props;
        if (typeof getCurrentAnchor === 'function') {
            return getCurrentAnchor();
        }
        const activeLink = '';
        if (typeof document === 'undefined') {
            return activeLink;
        }
        const linkSections = [];
        const { getContainer } = this.props;
        const container = getContainer();
        this.links.forEach(link => {
            const sharpLinkMatch = sharpMatcherRegx.exec(link.toString());
            if (!sharpLinkMatch) {
                return;
            }
            const target = document.getElementById(sharpLinkMatch[1]);
            if (target) {
                const top = getOffsetTop(target, container);
                if (top < offsetTop + bounds) {
                    linkSections.push({
                        link,
                        top,
                    });
                }
            }
        });
        if (linkSections.length) {
            const maxSection = linkSections.reduce((prev, curr) => (curr.top > prev.top ? curr : prev));
            return maxSection.link;
        }
        return '';
    }
    getPrefixCls() {
        const { prefixCls } = this.props;
        return getPrefixCls('anchor', prefixCls);
    }
    render() {
        const { className = '', style, offsetTop, affix, showInkInFixed, children, getContainer, } = this.props;
        const { activeLink } = this.state;
        const prefixCls = this.getPrefixCls();
        const inkClass = classNames(`${prefixCls}-ink-ball`, {
            visible: activeLink,
        });
        const wrapperClass = classNames(className, `${prefixCls}-wrapper`);
        const anchorClass = classNames(prefixCls, {
            fixed: !affix && !showInkInFixed,
        });
        const wrapperStyle = {
            maxHeight: offsetTop ? `calc(100vh - ${offsetTop}px)` : '100vh',
            ...style,
        };
        const anchorContent = (React.createElement("div", { className: wrapperClass, style: wrapperStyle },
            React.createElement("div", { className: anchorClass },
                React.createElement("div", { className: `${prefixCls}-ink` },
                    React.createElement("span", { className: inkClass, ref: this.saveInkNode })),
                children)));
        return !affix ? (anchorContent) : (React.createElement(Affix, { offsetTop: offsetTop, target: getContainer }, anchorContent));
    }
}
Anchor.displayName = 'Anchor';
Anchor.defaultProps = {
    affix: true,
    showInkInFixed: false,
    getContainer: getDefaultContainer,
};
Anchor.childContextTypes = {
    c7nAnchor: PropTypes.object,
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvYW5jaG9yL0FuY2hvci50c3giLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLEVBQUUsRUFBRSxTQUFTLEVBQXdDLE1BQU0sT0FBTyxDQUFDO0FBQy9FLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxTQUFTLE1BQU0sWUFBWSxDQUFDO0FBQ25DLE9BQU8sVUFBVSxNQUFNLFlBQVksQ0FBQztBQUNwQyxPQUFPLGdCQUFnQixNQUFNLDJCQUEyQixDQUFDO0FBQ3pELE9BQU8sS0FBSyxNQUFNLFVBQVUsQ0FBQztBQUU3QixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzVDLE9BQU8sUUFBUSxNQUFNLG1CQUFtQixDQUFDO0FBQ3pDLE9BQU8sU0FBUyxNQUFNLG9CQUFvQixDQUFDO0FBRTNDLFNBQVMsbUJBQW1CO0lBQzFCLE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUM7QUFFRCxTQUFTLFlBQVksQ0FBQyxPQUFvQixFQUFFLFNBQTBCO0lBQ3BFLElBQUksQ0FBQyxPQUFPLEVBQUU7UUFDWixPQUFPLENBQUMsQ0FBQztLQUNWO0lBRUQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsQ0FBQyxNQUFNLEVBQUU7UUFDcEMsT0FBTyxDQUFDLENBQUM7S0FDVjtJQUVELE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO0lBRTdDLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQzdCLElBQUksU0FBUyxLQUFLLE1BQU0sSUFBSSxPQUFPLENBQUMsYUFBYSxFQUFFO1lBQ2pELFNBQVMsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQztZQUNsRCxPQUFPLElBQUksQ0FBQyxHQUFHLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQztTQUN2QztRQUNELE9BQU8sSUFB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QUUsR0FBRyxFQUFFLElBQUksQ0FBQyxXQUFXLEdBQUksQ0FDaEQ7Z0JBQ0wsUUFBUSxDQUNMLENBQ0YsQ0FDUCxDQUFDO1FBRUYsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FDZCxhQUFhLENBQ2QsQ0FBQyxDQUFDLENBQUMsQ0FDRixvQkFBQyxLQUFLLElBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsWUFBWSxJQUM5QyxhQUFhLENBQ1IsQ0FDVCxDQUFDO0lBQ0osQ0FBQzs7QUFyT00sa0JBQVcsR0FBRyxRQUFRLENBQUM7QUFJdkIsbUJBQVksR0FBRztJQUNwQixLQUFLLEVBQUUsSUFBSTtJQUNYLGNBQWMsRUFBRSxLQUFLO0lBQ3JCLFlBQVksRUFBRSxtQkFBbUI7Q0FDbEMsQ0FBQztBQUVLLHdCQUFpQixHQUFHO0lBQ3pCLFNBQVMsRUFBRSxTQUFTLENBQUMsTUFBTTtDQUM1QixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9odWlodWF3ay9Eb2N1bWVudHMvb3B0L2Nob2Vyb2Rvbi11aS9jb21wb25lbnRzL2FuY2hvci9BbmNob3IudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIENTU1Byb3BlcnRpZXMsIE1vdXNlRXZlbnQsIFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGZpbmRET01Ob2RlIH0gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBhZGRFdmVudExpc3RlbmVyIGZyb20gJy4uL191dGlsL2FkZEV2ZW50TGlzdGVuZXInO1xuaW1wb3J0IEFmZml4IGZyb20gJy4uL2FmZml4JztcbmltcG9ydCBBbmNob3JMaW5rIGZyb20gJy4vQW5jaG9yTGluayc7XG5pbXBvcnQgeyBnZXRQcmVmaXhDbHMgfSBmcm9tICcuLi9jb25maWd1cmUnO1xuaW1wb3J0IHNjcm9sbFRvIGZyb20gJy4uL191dGlsL3Njcm9sbFRvJztcbmltcG9ydCBnZXRTY3JvbGwgZnJvbSAnLi4vX3V0aWwvZ2V0U2Nyb2xsJztcblxuZnVuY3Rpb24gZ2V0RGVmYXVsdENvbnRhaW5lcigpIHtcbiAgcmV0dXJuIHdpbmRvdztcbn1cblxuZnVuY3Rpb24gZ2V0T2Zmc2V0VG9wKGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBjb250YWluZXI6IEFuY2hvckNvbnRhaW5lcik6IG51bWJlciB7XG4gIGlmICghZWxlbWVudCkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgaWYgKCFlbGVtZW50LmdldENsaWVudFJlY3RzKCkubGVuZ3RoKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBjb25zdCByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICBpZiAocmVjdC53aWR0aCB8fCByZWN0LmhlaWdodCkge1xuICAgIGlmIChjb250YWluZXIgPT09IHdpbmRvdyAmJiBlbGVtZW50Lm93bmVyRG9jdW1lbnQpIHtcbiAgICAgIGNvbnRhaW5lciA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICByZXR1cm4gcmVjdC50b3AgLSBjb250YWluZXIuY2xpZW50VG9wO1xuICAgIH1cbiAgICByZXR1cm4gcmVjdC50b3AgLSAoY29udGFpbmVyIGFzIEhUTUxFbGVtZW50KS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XG4gIH1cblxuICByZXR1cm4gcmVjdC50b3A7XG59XG5cbmNvbnN0IHNoYXJwTWF0Y2hlclJlZ3ggPSAvIyhbXiNdKykkLztcblxudHlwZSBTZWN0aW9uID0ge1xuICBsaW5rOiBzdHJpbmc7XG4gIHRvcDogbnVtYmVyO1xufTtcblxuZXhwb3J0IHR5cGUgQW5jaG9yQ29udGFpbmVyID0gSFRNTEVsZW1lbnQgfCBXaW5kb3c7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQW5jaG9yUHJvcHMge1xuICBwcmVmaXhDbHM/OiBzdHJpbmc7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgc3R5bGU/OiBDU1NQcm9wZXJ0aWVzO1xuICBjaGlsZHJlbj86IFJlYWN0Tm9kZTtcbiAgb2Zmc2V0VG9wPzogbnVtYmVyO1xuICBib3VuZHM/OiBudW1iZXI7XG4gIGFmZml4PzogYm9vbGVhbjtcbiAgc2hvd0lua0luRml4ZWQ/OiBib29sZWFuO1xuICBnZXRDb250YWluZXI/OiAoKSA9PiBBbmNob3JDb250YWluZXI7XG4gIC8qKiBSZXR1cm4gY3VzdG9taXplIGhpZ2hsaWdodCBhbmNob3IgKi9cbiAgZ2V0Q3VycmVudEFuY2hvcj86ICgpID0+IHN0cmluZztcbiAgb25DbGljaz86IChlOiBNb3VzZUV2ZW50PEhUTUxFbGVtZW50PiwgbGluazogeyB0aXRsZTogUmVhY3ROb2RlOyBocmVmOiBzdHJpbmcgfSkgPT4gdm9pZDtcbiAgdGFyZ2V0T2Zmc2V0PzogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFuY2hvclN0YXRlIHtcbiAgYWN0aXZlTGluazogbnVsbCB8IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBbmNob3JEZWZhdWx0UHJvcHMgZXh0ZW5kcyBBbmNob3JQcm9wcyB7XG4gIHByZWZpeENsczogc3RyaW5nO1xuICBhZmZpeDogYm9vbGVhbjtcbiAgc2hvd0lua0luRml4ZWQ6IGJvb2xlYW47XG4gIGdldENvbnRhaW5lcjogKCkgPT4gQW5jaG9yQ29udGFpbmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEM3TkFuY2hvciB7XG4gIHJlZ2lzdGVyTGluazogKGxpbms6IHN0cmluZykgPT4gdm9pZDtcbiAgdW5yZWdpc3Rlckxpbms6IChsaW5rOiBzdHJpbmcpID0+IHZvaWQ7XG4gIGFjdGl2ZUxpbms6IHN0cmluZyB8IG51bGw7XG4gIHNjcm9sbFRvOiAobGluazogc3RyaW5nKSA9PiB2b2lkO1xuICBvbkNsaWNrPzogKFxuICAgIGU6IFJlYWN0Lk1vdXNlRXZlbnQ8SFRNTEVsZW1lbnQ+LFxuICAgIGxpbms6IHsgdGl0bGU6IFJlYWN0LlJlYWN0Tm9kZTsgaHJlZjogc3RyaW5nIH0sXG4gICkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQW5jaG9yIGV4dGVuZHMgQ29tcG9uZW50PEFuY2hvclByb3BzLCBBbmNob3JTdGF0ZT4ge1xuICBzdGF0aWMgZGlzcGxheU5hbWUgPSAnQW5jaG9yJztcblxuICBzdGF0aWMgTGluazogdHlwZW9mIEFuY2hvckxpbms7XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBhZmZpeDogdHJ1ZSxcbiAgICBzaG93SW5rSW5GaXhlZDogZmFsc2UsXG4gICAgZ2V0Q29udGFpbmVyOiBnZXREZWZhdWx0Q29udGFpbmVyLFxuICB9O1xuXG4gIHN0YXRpYyBjaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgICBjN25BbmNob3I6IFByb3BUeXBlcy5vYmplY3QsXG4gIH07XG5cbiAgc3RhdGUgPSB7XG4gICAgYWN0aXZlTGluazogbnVsbCxcbiAgfTtcblxuICBwcml2YXRlIGlua05vZGU6IEhUTUxTcGFuRWxlbWVudDtcblxuICAvLyBzY3JvbGwgc2NvcGUncyBjb250YWluZXJcbiAgcHJpdmF0ZSBzY3JvbGxDb250YWluZXI6IEhUTUxFbGVtZW50IHwgV2luZG93O1xuXG4gIHByaXZhdGUgbGlua3M6IHN0cmluZ1tdID0gW107XG5cbiAgcHJpdmF0ZSBzY3JvbGxFdmVudDogYW55O1xuXG4gIHByaXZhdGUgYW5pbWF0aW5nOiBib29sZWFuO1xuXG4gIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICBjb25zdCB7IG9uQ2xpY2sgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBhY3RpdmVMaW5rIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IGM3bkFuY2hvcjogQzdOQW5jaG9yID0ge1xuICAgICAgcmVnaXN0ZXJMaW5rOiAobGluazogc3RyaW5nKSA9PiB7XG4gICAgICAgIGlmICghdGhpcy5saW5rcy5pbmNsdWRlcyhsaW5rKSkge1xuICAgICAgICAgIHRoaXMubGlua3MucHVzaChsaW5rKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHVucmVnaXN0ZXJMaW5rOiAobGluazogc3RyaW5nKSA9PiB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5saW5rcy5pbmRleE9mKGxpbmspO1xuICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgdGhpcy5saW5rcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgYWN0aXZlTGluayxcbiAgICAgIHNjcm9sbFRvOiB0aGlzLmhhbmRsZVNjcm9sbFRvLFxuICAgICAgb25DbGljayxcbiAgICB9O1xuICAgIHJldHVybiB7IGM3bkFuY2hvciB9O1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgY29uc3QgeyBnZXRDb250YWluZXIgfSA9IHRoaXMucHJvcHMgYXMgQW5jaG9yRGVmYXVsdFByb3BzO1xuICAgIHRoaXMuc2Nyb2xsQ29udGFpbmVyID0gZ2V0Q29udGFpbmVyKCk7XG4gICAgdGhpcy5zY3JvbGxFdmVudCA9IGFkZEV2ZW50TGlzdGVuZXIodGhpcy5zY3JvbGxDb250YWluZXIsICdzY3JvbGwnLCB0aGlzLmhhbmRsZVNjcm9sbCk7XG4gICAgdGhpcy5oYW5kbGVTY3JvbGwoKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICBpZiAodGhpcy5zY3JvbGxFdmVudCkge1xuICAgICAgY29uc3QgeyBnZXRDb250YWluZXIgfSA9IHRoaXMucHJvcHMgYXMgQW5jaG9yRGVmYXVsdFByb3BzO1xuICAgICAgY29uc3QgY3VycmVudENvbnRhaW5lciA9IGdldENvbnRhaW5lcigpO1xuICAgICAgaWYgKHRoaXMuc2Nyb2xsQ29udGFpbmVyICE9PSBjdXJyZW50Q29udGFpbmVyKSB7XG4gICAgICAgIHRoaXMuc2Nyb2xsQ29udGFpbmVyID0gY3VycmVudENvbnRhaW5lcjtcbiAgICAgICAgdGhpcy5zY3JvbGxFdmVudC5yZW1vdmUoKTtcbiAgICAgICAgdGhpcy5zY3JvbGxFdmVudCA9IGFkZEV2ZW50TGlzdGVuZXIodGhpcy5zY3JvbGxDb250YWluZXIsICdzY3JvbGwnLCB0aGlzLmhhbmRsZVNjcm9sbCk7XG4gICAgICAgIHRoaXMuaGFuZGxlU2Nyb2xsKCk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMudXBkYXRlSW5rKCk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy5zY3JvbGxFdmVudCkge1xuICAgICAgdGhpcy5zY3JvbGxFdmVudC5yZW1vdmUoKTtcbiAgICB9XG4gIH1cblxuICBnZXRDdXJyZW50QW5jaG9yKG9mZnNldFRvcCA9IDAsIGJvdW5kcyA9IDUpOiBzdHJpbmcge1xuICAgIGNvbnN0IHsgZ2V0Q3VycmVudEFuY2hvciB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmICh0eXBlb2YgZ2V0Q3VycmVudEFuY2hvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIGdldEN1cnJlbnRBbmNob3IoKTtcbiAgICB9XG5cbiAgICBjb25zdCBhY3RpdmVMaW5rID0gJyc7XG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiBhY3RpdmVMaW5rO1xuICAgIH1cblxuICAgIGNvbnN0IGxpbmtTZWN0aW9uczogQXJyYXk8U2VjdGlvbj4gPSBbXTtcbiAgICBjb25zdCB7IGdldENvbnRhaW5lciB9ID0gdGhpcy5wcm9wcyBhcyBBbmNob3JEZWZhdWx0UHJvcHM7XG4gICAgY29uc3QgY29udGFpbmVyID0gZ2V0Q29udGFpbmVyKCk7XG4gICAgdGhpcy5saW5rcy5mb3JFYWNoKGxpbmsgPT4ge1xuICAgICAgY29uc3Qgc2hhcnBMaW5rTWF0Y2ggPSBzaGFycE1hdGNoZXJSZWd4LmV4ZWMobGluay50b1N0cmluZygpKTtcbiAgICAgIGlmICghc2hhcnBMaW5rTWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgdGFyZ2V0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoc2hhcnBMaW5rTWF0Y2hbMV0pO1xuICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICBjb25zdCB0b3AgPSBnZXRPZmZzZXRUb3AodGFyZ2V0LCBjb250YWluZXIpO1xuICAgICAgICBpZiAodG9wIDwgb2Zmc2V0VG9wICsgYm91bmRzKSB7XG4gICAgICAgICAgbGlua1NlY3Rpb25zLnB1c2goe1xuICAgICAgICAgICAgbGluayxcbiAgICAgICAgICAgIHRvcCxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKGxpbmtTZWN0aW9ucy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IG1heFNlY3Rpb24gPSBsaW5rU2VjdGlvbnMucmVkdWNlKChwcmV2LCBjdXJyKSA9PiAoY3Vyci50b3AgPiBwcmV2LnRvcCA/IGN1cnIgOiBwcmV2KSk7XG4gICAgICByZXR1cm4gbWF4U2VjdGlvbi5saW5rO1xuICAgIH1cbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICBoYW5kbGVTY3JvbGxUbyA9IChsaW5rOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCB7IG9mZnNldFRvcCwgZ2V0Q29udGFpbmVyLCB0YXJnZXRPZmZzZXQgfSA9IHRoaXMucHJvcHMgYXMgQW5jaG9yRGVmYXVsdFByb3BzO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7IGFjdGl2ZUxpbms6IGxpbmsgfSk7XG4gICAgY29uc3QgY29udGFpbmVyID0gZ2V0Q29udGFpbmVyKCk7XG4gICAgY29uc3Qgc2Nyb2xsVG9wID0gZ2V0U2Nyb2xsKGNvbnRhaW5lciwgdHJ1ZSk7XG4gICAgY29uc3Qgc2hhcnBMaW5rTWF0Y2ggPSBzaGFycE1hdGNoZXJSZWd4LmV4ZWMobGluayk7XG4gICAgaWYgKCFzaGFycExpbmtNYXRjaCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB0YXJnZXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoc2hhcnBMaW5rTWF0Y2hbMV0pO1xuICAgIGlmICghdGFyZ2V0RWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGVsZU9mZnNldFRvcCA9IGdldE9mZnNldFRvcCh0YXJnZXRFbGVtZW50LCBjb250YWluZXIpO1xuICAgIGxldCB5ID0gc2Nyb2xsVG9wICsgZWxlT2Zmc2V0VG9wO1xuICAgIHkgLT0gdGFyZ2V0T2Zmc2V0ICE9PSB1bmRlZmluZWQgPyB0YXJnZXRPZmZzZXQgOiBvZmZzZXRUb3AgfHwgMDtcbiAgICB0aGlzLmFuaW1hdGluZyA9IHRydWU7XG5cbiAgICBzY3JvbGxUbyh5LCB7XG4gICAgICBjYWxsYmFjazogKCkgPT4ge1xuICAgICAgICB0aGlzLmFuaW1hdGluZyA9IGZhbHNlO1xuICAgICAgfSxcbiAgICAgIGdldENvbnRhaW5lcixcbiAgICB9KTtcbiAgfTtcblxuICBzYXZlSW5rTm9kZSA9IChub2RlOiBIVE1MU3BhbkVsZW1lbnQpID0+IHtcbiAgICB0aGlzLmlua05vZGUgPSBub2RlO1xuICB9O1xuXG4gIGhhbmRsZVNjcm9sbCA9ICgpID0+IHtcbiAgICBpZiAodGhpcy5hbmltYXRpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgeyBhY3RpdmVMaW5rIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHsgb2Zmc2V0VG9wLCBib3VuZHMsIHRhcmdldE9mZnNldCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBjdXJyZW50QWN0aXZlTGluayA9IHRoaXMuZ2V0Q3VycmVudEFuY2hvcihcbiAgICAgIHRhcmdldE9mZnNldCAhPT0gdW5kZWZpbmVkID8gdGFyZ2V0T2Zmc2V0IDogb2Zmc2V0VG9wIHx8IDAsXG4gICAgICBib3VuZHMsXG4gICAgKTtcbiAgICBpZiAoYWN0aXZlTGluayAhPT0gY3VycmVudEFjdGl2ZUxpbmspIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBhY3RpdmVMaW5rOiBjdXJyZW50QWN0aXZlTGluayxcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB1cGRhdGVJbmsgPSAoKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcHJlZml4Q2xzID0gdGhpcy5nZXRQcmVmaXhDbHMoKTtcbiAgICBjb25zdCBsaW5rTm9kZSA9IChmaW5kRE9NTm9kZSh0aGlzIGFzIGFueSkgYXMgSFRNTEVsZW1lbnQpLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXG4gICAgICBgJHtwcmVmaXhDbHN9LWxpbmstdGl0bGUtYWN0aXZlYCxcbiAgICApWzBdO1xuICAgIGlmIChsaW5rTm9kZSkge1xuICAgICAgdGhpcy5pbmtOb2RlLnN0eWxlLnRvcCA9IGAkeyhsaW5rTm9kZSBhcyBhbnkpLm9mZnNldFRvcCArIGxpbmtOb2RlLmNsaWVudEhlaWdodCAvIDIgLSA0LjV9cHhgO1xuICAgIH1cbiAgfTtcblxuICBnZXRQcmVmaXhDbHMoKSB7XG4gICAgY29uc3QgeyBwcmVmaXhDbHMgfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIGdldFByZWZpeENscygnYW5jaG9yJywgcHJlZml4Q2xzKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBjbGFzc05hbWUgPSAnJyxcbiAgICAgIHN0eWxlLFxuICAgICAgb2Zmc2V0VG9wLFxuICAgICAgYWZmaXgsXG4gICAgICBzaG93SW5rSW5GaXhlZCxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgZ2V0Q29udGFpbmVyLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgYWN0aXZlTGluayB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCBwcmVmaXhDbHMgPSB0aGlzLmdldFByZWZpeENscygpO1xuICAgIGNvbnN0IGlua0NsYXNzID0gY2xhc3NOYW1lcyhgJHtwcmVmaXhDbHN9LWluay1iYWxsYCwge1xuICAgICAgdmlzaWJsZTogYWN0aXZlTGluayxcbiAgICB9KTtcblxuICAgIGNvbnN0IHdyYXBwZXJDbGFzcyA9IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBgJHtwcmVmaXhDbHN9LXdyYXBwZXJgKTtcblxuICAgIGNvbnN0IGFuY2hvckNsYXNzID0gY2xhc3NOYW1lcyhwcmVmaXhDbHMsIHtcbiAgICAgIGZpeGVkOiAhYWZmaXggJiYgIXNob3dJbmtJbkZpeGVkLFxuICAgIH0pO1xuXG4gICAgY29uc3Qgd3JhcHBlclN0eWxlID0ge1xuICAgICAgbWF4SGVpZ2h0OiBvZmZzZXRUb3AgPyBgY2FsYygxMDB2aCAtICR7b2Zmc2V0VG9wfXB4KWAgOiAnMTAwdmgnLFxuICAgICAgLi4uc3R5bGUsXG4gICAgfTtcblxuICAgIGNvbnN0IGFuY2hvckNvbnRlbnQgPSAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17d3JhcHBlckNsYXNzfSBzdHlsZT17d3JhcHBlclN0eWxlfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2FuY2hvckNsYXNzfT5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YCR7cHJlZml4Q2xzfS1pbmtgfT5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT17aW5rQ2xhc3N9IHJlZj17dGhpcy5zYXZlSW5rTm9kZX0gLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcblxuICAgIHJldHVybiAhYWZmaXggPyAoXG4gICAgICBhbmNob3JDb250ZW50XG4gICAgKSA6IChcbiAgICAgIDxBZmZpeCBvZmZzZXRUb3A9e29mZnNldFRvcH0gdGFyZ2V0PXtnZXRDb250YWluZXJ9PlxuICAgICAgICB7YW5jaG9yQ29udGVudH1cbiAgICAgIDwvQWZmaXg+XG4gICAgKTtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9