import React, { Component } from 'react';
import Tooltip from '../tooltip';
import Icon from '../icon';
import Button from '../button';
import LocaleReceiver from '../locale-provider/LocaleReceiver';
import defaultLocale from '../locale-provider/default';
import { getPrefixCls } from '../configure';
export default class Popconfirm extends Component {
    constructor(props) {
        super(props);
        this.onConfirm = e => {
            this.setVisible(false);
            const { onConfirm } = this.props;
            if (onConfirm) {
                onConfirm.call(this, e);
            }
        };
        this.onCancel = e => {
            this.setVisible(false);
            const { onCancel } = this.props;
            if (onCancel) {
                onCancel.call(this, e);
            }
        };
        this.onVisibleChange = (visible) => {
            this.setVisible(visible);
        };
        this.saveTooltip = (node) => {
            this.tooltip = node;
        };
        this.renderOverlay = (popconfirmLocale) => {
            const { title, cancelText, okText, okType } = this.props;
            const prefixCls = this.getPrefixCls();
            return (React.createElement("div", null,
                React.createElement("div", { className: `${prefixCls}-inner-content` },
                    React.createElement("div", { className: `${prefixCls}-message` },
                        React.createElement(Icon, { type: "warning" }),
                        React.createElement("div", { className: `${prefixCls}-message-title` }, title)),
                    React.createElement("div", { className: `${prefixCls}-buttons` },
                        React.createElement(Button, { onClick: this.onCancel, size: "small" /* small */ }, cancelText || popconfirmLocale.cancelText),
                        React.createElement(Button, { onClick: this.onConfirm, type: okType, size: "small" /* small */ }, okText || popconfirmLocale.okText)))));
        };
        this.state = {
            visible: props.visible,
        };
    }
    componentWillReceiveProps(nextProps) {
        if ('visible' in nextProps) {
            this.setState({ visible: nextProps.visible });
        }
    }
    getPopupDomNode() {
        return this.tooltip.getPopupDomNode();
    }
    setVisible(visible) {
        const props = this.props;
        if (!('visible' in props)) {
            this.setState({ visible });
        }
        const { onVisibleChange } = props;
        if (onVisibleChange) {
            onVisibleChange(visible);
        }
    }
    getPrefixCls() {
        const { prefixCls } = this.props;
        return getPrefixCls('popover', prefixCls);
    }
    render() {
        const { placement, ...restProps } = this.props;
        const { visible } = this.state;
        const overlay = (React.createElement(LocaleReceiver, { componentName: "Popconfirm", defaultLocale: defaultLocale.Popconfirm }, this.renderOverlay));
        return (React.createElement(Tooltip, Object.assign({}, restProps, { prefixCls: this.getPrefixCls(), placement: placement, onVisibleChange: this.onVisibleChange, visible: visible, overlay: overlay, ref: this.saveTooltip })));
    }
}
Popconfirm.displayName = 'Popconfirm';
Popconfirm.defaultProps = {
    transitionName: 'zoom-big',
    placement: 'top',
    trigger: 'click',
    okType: 'primary',
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,