import { __decorate } from "tslib";
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { observer } from 'mobx-react';
import omit from 'lodash/omit';
import classNames from 'classnames';
import { pxToRem } from 'choerodon-ui/lib/_util/UnitConvertor';
import TableContext from './TableContext';
import { getAlignByField } from './utils';
let TableFooterCell = class TableFooterCell extends Component {
    getFooter(footer, dataSet) {
        switch (typeof footer) {
            case 'function': {
                const { column } = this.props;
                return footer(dataSet, column.name);
            }
            case 'string':
                return React.createElement("span", null, footer);
            default:
                return footer;
        }
    }
    render() {
        const { column, prefixCls, dataSet } = this.props;
        const { tableStore: { rowHeight }, } = this.context;
        const { footer, footerClassName, footerStyle = {}, align, name, command } = column;
        const classString = classNames(`${prefixCls}-cell`, footerClassName);
        const innerProps = {
            className: `${prefixCls}-cell-inner`,
        };
        if (rowHeight !== 'auto') {
            innerProps.style = {
                height: pxToRem(rowHeight),
            };
        }
        const cellStyle = {
            textAlign: align || (command ? "center" /* center */ : getAlignByField(dataSet.getField(name))),
            ...footerStyle,
        };
        return (React.createElement("th", { className: classString, style: omit(cellStyle, ['width', 'height']) },
            React.createElement("div", Object.assign({}, innerProps), this.getFooter(footer, dataSet))));
    }
};
TableFooterCell.displayName = 'TableFooterCell';
TableFooterCell.propTypes = {
    column: PropTypes.object.isRequired,
};
TableFooterCell.contextType = TableContext;
TableFooterCell = __decorate([
    observer
], TableFooterCell);
export default TableFooterCell;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMtcHJvL3RhYmxlL1RhYmxlRm9vdGVyQ2VsbC50c3giLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sS0FBSyxFQUFFLEVBQUUsU0FBUyxFQUE0QixNQUFNLE9BQU8sQ0FBQztBQUNuRSxPQUFPLFNBQVMsTUFBTSxZQUFZLENBQUM7QUFDbkMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN0QyxPQUFPLElBQUksTUFBTSxhQUFhLENBQUM7QUFDL0IsT0FBTyxVQUFVLE1BQU0sWUFBWSxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUUvRCxPQUFPLFlBQVksTUFBTSxnQkFBZ0IsQ0FBQztBQUcxQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBUzFDLElBQXFCLGVBQWUsR0FBcEMsTUFBcUIsZUFBZ0IsU0FBUSxTQUFvQztJQVMvRSxTQUFTLENBQUMsTUFBTSxFQUFFLE9BQU87UUFDdkIsUUFBUSxPQUFPLE1BQU0sRUFBRTtZQUNyQixLQUFLLFVBQVUsQ0FBQyxDQUFDO2dCQUNmLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO2dCQUM5QixPQUFPLE1BQU0sQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ3JDO1lBQ0QsS0FBSyxRQUFRO2dCQUNYLE9BQU8sa0NBQU8sTUFBTSxDQUFRLENBQUM7WUFDL0I7Z0JBQ0UsT0FBTyxNQUFNLENBQUM7U0FDakI7SUFDSCxDQUFDO0lBRUQsTUFBTTtRQUNKLE1BQU0sRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDbEQsTUFBTSxFQUNKLFVBQVUsRUFBRSxFQUFFLFNBQVMsRUFBRSxHQUMxQixHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDakIsTUFBTSxFQUFFLE1BQU0sRUFBRSxlQUFlLEVBQUUsV0FBVyxHQUFHLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxHQUFHLE1BQU0sQ0FBQztRQUNuRixNQUFNLFdBQVcsR0FBRyxVQUFVLENBQUMsR0FBRyxTQUFTLE9BQU8sRUFBRSxlQUFlLENBQUMsQ0FBQztRQUNyRSxNQUFNLFVBQVUsR0FBUTtZQUN0QixTQUFTLEVBQUUsR0FBRyxTQUFTLGFBQWE7U0FDckMsQ0FBQztRQUNGLElBQUksU0FBUyxLQUFLLE1BQU0sRUFBRTtZQUN4QixVQUFVLENBQUMsS0FBSyxHQUFHO2dCQUNqQixNQUFNLEVBQUUsT0FBTyxDQUFDLFNBQVMsQ0FBQzthQUMzQixDQUFDO1NBQ0g7UUFDRCxNQUFNLFNBQVMsR0FBa0I7WUFDL0IsU0FBUyxFQUFFLEtBQUssSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLHVCQUFvQixDQUFDLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUM1RixHQUFHLFdBQVc7U0FDZixDQUFDO1FBQ0YsT0FBTyxDQUNMLDRCQUFJLFNBQVMsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDckUsNkNBQVMsVUFBVSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFPLENBQ3pELENBQ04sQ0FBQztJQUNKLENBQUM7Q0FDRixDQUFBO0FBOUNRLDJCQUFXLEdBQUcsaUJBQWlCLENBQUM7QUFFaEMseUJBQVMsR0FBRztJQUNqQixNQUFNLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxVQUFVO0NBQ3BDLENBQUM7QUFFSywyQkFBVyxHQUFHLFlBQVksQ0FBQztBQVBmLGVBQWU7SUFEbkMsUUFBUTtHQUNZLGVBQWUsQ0ErQ25DO2VBL0NvQixlQUFlIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9odWlodWF3ay9Eb2N1bWVudHMvb3B0L2Nob2Vyb2Rvbi11aS9jb21wb25lbnRzLXByby90YWJsZS9UYWJsZUZvb3RlckNlbGwudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIENTU1Byb3BlcnRpZXMsIFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBvYnNlcnZlciB9IGZyb20gJ21vYngtcmVhY3QnO1xuaW1wb3J0IG9taXQgZnJvbSAnbG9kYXNoL29taXQnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgeyBweFRvUmVtIH0gZnJvbSAnY2hvZXJvZG9uLXVpL2xpYi9fdXRpbC9Vbml0Q29udmVydG9yJztcbmltcG9ydCB7IENvbHVtblByb3BzIH0gZnJvbSAnLi9Db2x1bW4nO1xuaW1wb3J0IFRhYmxlQ29udGV4dCBmcm9tICcuL1RhYmxlQ29udGV4dCc7XG5pbXBvcnQgeyBFbGVtZW50UHJvcHMgfSBmcm9tICcuLi9jb3JlL1ZpZXdDb21wb25lbnQnO1xuaW1wb3J0IERhdGFTZXQgZnJvbSAnLi4vZGF0YS1zZXQvRGF0YVNldCc7XG5pbXBvcnQgeyBnZXRBbGlnbkJ5RmllbGQgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IENvbHVtbkFsaWduIH0gZnJvbSAnLi9lbnVtJztcblxuZXhwb3J0IGludGVyZmFjZSBUYWJsZUZvb3RlckNlbGxQcm9wcyBleHRlbmRzIEVsZW1lbnRQcm9wcyB7XG4gIGRhdGFTZXQ6IERhdGFTZXQ7XG4gIGNvbHVtbjogQ29sdW1uUHJvcHM7XG59XG5cbkBvYnNlcnZlclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGFibGVGb290ZXJDZWxsIGV4dGVuZHMgQ29tcG9uZW50PFRhYmxlRm9vdGVyQ2VsbFByb3BzLCBhbnk+IHtcbiAgc3RhdGljIGRpc3BsYXlOYW1lID0gJ1RhYmxlRm9vdGVyQ2VsbCc7XG5cbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBjb2x1bW46IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgfTtcblxuICBzdGF0aWMgY29udGV4dFR5cGUgPSBUYWJsZUNvbnRleHQ7XG5cbiAgZ2V0Rm9vdGVyKGZvb3RlciwgZGF0YVNldCk6IFJlYWN0Tm9kZSB7XG4gICAgc3dpdGNoICh0eXBlb2YgZm9vdGVyKSB7XG4gICAgICBjYXNlICdmdW5jdGlvbic6IHtcbiAgICAgICAgY29uc3QgeyBjb2x1bW4gfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIHJldHVybiBmb290ZXIoZGF0YVNldCwgY29sdW1uLm5hbWUpO1xuICAgICAgfVxuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgcmV0dXJuIDxzcGFuPntmb290ZXJ9PC9zcGFuPjtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmb290ZXI7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgY29sdW1uLCBwcmVmaXhDbHMsIGRhdGFTZXQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3Qge1xuICAgICAgdGFibGVTdG9yZTogeyByb3dIZWlnaHQgfSxcbiAgICB9ID0gdGhpcy5jb250ZXh0O1xuICAgIGNvbnN0IHsgZm9vdGVyLCBmb290ZXJDbGFzc05hbWUsIGZvb3RlclN0eWxlID0ge30sIGFsaWduLCBuYW1lLCBjb21tYW5kIH0gPSBjb2x1bW47XG4gICAgY29uc3QgY2xhc3NTdHJpbmcgPSBjbGFzc05hbWVzKGAke3ByZWZpeENsc30tY2VsbGAsIGZvb3RlckNsYXNzTmFtZSk7XG4gICAgY29uc3QgaW5uZXJQcm9wczogYW55ID0ge1xuICAgICAgY2xhc3NOYW1lOiBgJHtwcmVmaXhDbHN9LWNlbGwtaW5uZXJgLFxuICAgIH07XG4gICAgaWYgKHJvd0hlaWdodCAhPT0gJ2F1dG8nKSB7XG4gICAgICBpbm5lclByb3BzLnN0eWxlID0ge1xuICAgICAgICBoZWlnaHQ6IHB4VG9SZW0ocm93SGVpZ2h0KSxcbiAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IGNlbGxTdHlsZTogQ1NTUHJvcGVydGllcyA9IHtcbiAgICAgIHRleHRBbGlnbjogYWxpZ24gfHwgKGNvbW1hbmQgPyBDb2x1bW5BbGlnbi5jZW50ZXIgOiBnZXRBbGlnbkJ5RmllbGQoZGF0YVNldC5nZXRGaWVsZChuYW1lKSkpLFxuICAgICAgLi4uZm9vdGVyU3R5bGUsXG4gICAgfTtcbiAgICByZXR1cm4gKFxuICAgICAgPHRoIGNsYXNzTmFtZT17Y2xhc3NTdHJpbmd9IHN0eWxlPXtvbWl0KGNlbGxTdHlsZSwgWyd3aWR0aCcsICdoZWlnaHQnXSl9PlxuICAgICAgICA8ZGl2IHsuLi5pbm5lclByb3BzfT57dGhpcy5nZXRGb290ZXIoZm9vdGVyLCBkYXRhU2V0KX08L2Rpdj5cbiAgICAgIDwvdGg+XG4gICAgKTtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9