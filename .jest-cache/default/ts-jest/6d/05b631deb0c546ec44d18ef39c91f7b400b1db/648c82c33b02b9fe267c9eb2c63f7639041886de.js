import isObject from 'lodash/isObject';
import isNil from 'lodash/isNil';
import { isArrayLike } from 'mobx';
import moment from 'moment';
import { getConfig } from 'choerodon-ui/lib/configure';
export function toRangeValue(value, range) {
    if (isArrayLike(range)) {
        if (isObject(value)) {
            const [start, end] = range;
            return [value[start], value[end]];
        }
    }
    else if (isArrayLike(value)) {
        return value.slice(0, 2);
    }
    return [undefined, undefined];
}
export function fromRangeValue(value, range) {
    if (isArrayLike(range)) {
        const [start, end] = range;
        return {
            [start]: value[0],
            [end]: value[1],
        };
    }
    return value;
}
export function toMultipleValue(value, range) {
    if (!isNil(value)) {
        const multipleValue = isArrayLike(value) ? value.slice() : [value];
        if (range) {
            return multipleValue.map(item => toRangeValue(item, range));
        }
        return multipleValue;
    }
    return [];
}
export function getDateFormatByFieldType(type) {
    const formatter = getConfig('formatter');
    switch (type) {
        case "date" /* date */:
            return formatter.date;
        case "dateTime" /* dateTime */:
            return formatter.dateTime;
        case "week" /* week */:
            return formatter.week;
        case "month" /* month */:
            return formatter.month;
        case "year" /* year */:
            return formatter.year;
        case "time" /* time */:
            return formatter.time;
        default:
            return formatter.date;
    }
}
export function getDateFormatByField(field, type) {
    if (field) {
        return field.get('format') || getDateFormatByFieldType(type || field.type);
    }
    if (type) {
        return getDateFormatByFieldType(type);
    }
    return getConfig('formatter').jsonDate || moment.defaultFormat;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMtcHJvL2ZpZWxkL3V0aWxzLnRzeCIsIm1hcHBpbmdzIjoiQUFBQSxPQUFPLFFBQVEsTUFBTSxpQkFBaUIsQ0FBQztBQUN2QyxPQUFPLEtBQUssTUFBTSxjQUFjLENBQUM7QUFDakMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNuQyxPQUFPLE1BQU0sTUFBTSxRQUFRLENBQUM7QUFDNUIsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBSXZELE1BQU0sVUFBVSxZQUFZLENBQUMsS0FBVSxFQUFFLEtBQWtDO0lBQ3pFLElBQUksV0FBVyxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ3RCLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ25CLE1BQU0sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO1lBQzNCLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDbkM7S0FDRjtTQUFNLElBQUksV0FBVyxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQzdCLE9BQU8sS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFlLENBQUM7S0FDeEM7SUFDRCxPQUFPLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ2hDLENBQUM7QUFFRCxNQUFNLFVBQVUsY0FBYyxDQUFDLEtBQVksRUFBRSxLQUFrQztJQUM3RSxJQUFJLFdBQVcsQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUN0QixNQUFNLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUMzQixPQUFPO1lBQ0wsQ0FBQyxLQUFLLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ2pCLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztTQUNoQixDQUFDO0tBQ0g7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFFRCxNQUFNLFVBQVUsZUFBZSxDQUFDLEtBQVUsRUFBRSxLQUFrQztJQUM1RSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ2pCLE1BQU0sYUFBYSxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ25FLElBQUksS0FBSyxFQUFFO1lBQ1QsT0FBTyxhQUFhLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO1NBQzdEO1FBQ0QsT0FBTyxhQUFhLENBQUM7S0FDdEI7SUFDRCxPQUFPLEVBQUUsQ0FBQztBQUNaLENBQUM7QUFFRCxNQUFNLFVBQVUsd0JBQXdCLENBQUMsSUFBZTtJQUN0RCxNQUFNLFNBQVMsR0FBRyxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDekMsUUFBUSxJQUFJLEVBQUU7UUFDWjtZQUNFLE9BQU8sU0FBUyxDQUFDLElBQUksQ0FBQztRQUN4QjtZQUNFLE9BQU8sU0FBUyxDQUFDLFFBQVEsQ0FBQztRQUM1QjtZQUNFLE9BQU8sU0FBUyxDQUFDLElBQUksQ0FBQztRQUN4QjtZQUNFLE9BQU8sU0FBUyxDQUFDLEtBQUssQ0FBQztRQUN6QjtZQUNFLE9BQU8sU0FBUyxDQUFDLElBQUksQ0FBQztRQUN4QjtZQUNFLE9BQU8sU0FBUyxDQUFDLElBQUksQ0FBQztRQUN4QjtZQUNFLE9BQU8sU0FBUyxDQUFDLElBQUksQ0FBQztLQUN6QjtBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsb0JBQW9CLENBQUMsS0FBYSxFQUFFLElBQWdCO0lBQ2xFLElBQUksS0FBSyxFQUFFO1FBQ1QsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLHdCQUF3QixDQUFDLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDNUU7SUFDRCxJQUFJLElBQUksRUFBRTtRQUNSLE9BQU8sd0JBQXdCLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDdkM7SUFDRCxPQUFPLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxRQUFRLElBQUksTUFBTSxDQUFDLGFBQWEsQ0FBQztBQUNqRSxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9odWlodWF3ay9Eb2N1bWVudHMvb3B0L2Nob2Vyb2Rvbi11aS9jb21wb25lbnRzLXByby9maWVsZC91dGlscy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGlzT2JqZWN0IGZyb20gJ2xvZGFzaC9pc09iamVjdCc7XG5pbXBvcnQgaXNOaWwgZnJvbSAnbG9kYXNoL2lzTmlsJztcbmltcG9ydCB7IGlzQXJyYXlMaWtlIH0gZnJvbSAnbW9ieCc7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgeyBnZXRDb25maWcgfSBmcm9tICdjaG9lcm9kb24tdWkvbGliL2NvbmZpZ3VyZSc7XG5pbXBvcnQgeyBGaWVsZFR5cGUgfSBmcm9tICcuLi9kYXRhLXNldC9lbnVtJztcbmltcG9ydCBGaWVsZCBmcm9tICcuLi9kYXRhLXNldC9GaWVsZCc7XG5cbmV4cG9ydCBmdW5jdGlvbiB0b1JhbmdlVmFsdWUodmFsdWU6IGFueSwgcmFuZ2U/OiBib29sZWFuIHwgW3N0cmluZywgc3RyaW5nXSk6IFthbnksIGFueV0ge1xuICBpZiAoaXNBcnJheUxpa2UocmFuZ2UpKSB7XG4gICAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgY29uc3QgW3N0YXJ0LCBlbmRdID0gcmFuZ2U7XG4gICAgICByZXR1cm4gW3ZhbHVlW3N0YXJ0XSwgdmFsdWVbZW5kXV07XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZS5zbGljZSgwLCAyKSBhcyBbYW55LCBhbnldO1xuICB9XG4gIHJldHVybiBbdW5kZWZpbmVkLCB1bmRlZmluZWRdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVJhbmdlVmFsdWUodmFsdWU6IGFueVtdLCByYW5nZT86IGJvb2xlYW4gfCBbc3RyaW5nLCBzdHJpbmddKTogYW55IHtcbiAgaWYgKGlzQXJyYXlMaWtlKHJhbmdlKSkge1xuICAgIGNvbnN0IFtzdGFydCwgZW5kXSA9IHJhbmdlO1xuICAgIHJldHVybiB7XG4gICAgICBbc3RhcnRdOiB2YWx1ZVswXSxcbiAgICAgIFtlbmRdOiB2YWx1ZVsxXSxcbiAgICB9O1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvTXVsdGlwbGVWYWx1ZSh2YWx1ZTogYW55LCByYW5nZT86IGJvb2xlYW4gfCBbc3RyaW5nLCBzdHJpbmddKSB7XG4gIGlmICghaXNOaWwodmFsdWUpKSB7XG4gICAgY29uc3QgbXVsdGlwbGVWYWx1ZSA9IGlzQXJyYXlMaWtlKHZhbHVlKSA/IHZhbHVlLnNsaWNlKCkgOiBbdmFsdWVdO1xuICAgIGlmIChyYW5nZSkge1xuICAgICAgcmV0dXJuIG11bHRpcGxlVmFsdWUubWFwKGl0ZW0gPT4gdG9SYW5nZVZhbHVlKGl0ZW0sIHJhbmdlKSk7XG4gICAgfVxuICAgIHJldHVybiBtdWx0aXBsZVZhbHVlO1xuICB9XG4gIHJldHVybiBbXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldERhdGVGb3JtYXRCeUZpZWxkVHlwZSh0eXBlOiBGaWVsZFR5cGUpIHtcbiAgY29uc3QgZm9ybWF0dGVyID0gZ2V0Q29uZmlnKCdmb3JtYXR0ZXInKTtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBGaWVsZFR5cGUuZGF0ZTpcbiAgICAgIHJldHVybiBmb3JtYXR0ZXIuZGF0ZTtcbiAgICBjYXNlIEZpZWxkVHlwZS5kYXRlVGltZTpcbiAgICAgIHJldHVybiBmb3JtYXR0ZXIuZGF0ZVRpbWU7XG4gICAgY2FzZSBGaWVsZFR5cGUud2VlazpcbiAgICAgIHJldHVybiBmb3JtYXR0ZXIud2VlaztcbiAgICBjYXNlIEZpZWxkVHlwZS5tb250aDpcbiAgICAgIHJldHVybiBmb3JtYXR0ZXIubW9udGg7XG4gICAgY2FzZSBGaWVsZFR5cGUueWVhcjpcbiAgICAgIHJldHVybiBmb3JtYXR0ZXIueWVhcjtcbiAgICBjYXNlIEZpZWxkVHlwZS50aW1lOlxuICAgICAgcmV0dXJuIGZvcm1hdHRlci50aW1lO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZm9ybWF0dGVyLmRhdGU7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldERhdGVGb3JtYXRCeUZpZWxkKGZpZWxkPzogRmllbGQsIHR5cGU/OiBGaWVsZFR5cGUpOiBzdHJpbmcge1xuICBpZiAoZmllbGQpIHtcbiAgICByZXR1cm4gZmllbGQuZ2V0KCdmb3JtYXQnKSB8fCBnZXREYXRlRm9ybWF0QnlGaWVsZFR5cGUodHlwZSB8fCBmaWVsZC50eXBlKTtcbiAgfVxuICBpZiAodHlwZSkge1xuICAgIHJldHVybiBnZXREYXRlRm9ybWF0QnlGaWVsZFR5cGUodHlwZSk7XG4gIH1cbiAgcmV0dXJuIGdldENvbmZpZygnZm9ybWF0dGVyJykuanNvbkRhdGUgfHwgbW9tZW50LmRlZmF1bHRGb3JtYXQ7XG59XG4iXSwidmVyc2lvbiI6M30=