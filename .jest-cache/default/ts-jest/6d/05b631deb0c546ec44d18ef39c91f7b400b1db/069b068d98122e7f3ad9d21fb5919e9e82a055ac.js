import { cloneElement, PureComponent } from 'react';
import PropTypes from 'prop-types';
function wrapEvent(element, eventName, callback) {
    return e => {
        const originalEvent = element.props[eventName];
        if (originalEvent) {
            originalEvent(e);
        }
        callback(e);
    };
}
export default class MouseDown extends PureComponent {
    constructor() {
        super(...arguments);
        this.state = {};
        this.show = e => {
            const { currentTarget } = e;
            const pos = currentTarget.getBoundingClientRect();
            this.setState({
                size: {
                    x: e.clientX - pos.left,
                    y: e.clientY - pos.top,
                    width: currentTarget.clientWidth,
                    height: currentTarget.clientHeight,
                    position: document.defaultView && document.defaultView.getComputedStyle(currentTarget).position,
                },
            });
        };
        this.hide = () => {
            this.setState({
                size: undefined,
            });
        };
    }
    render() {
        const { children, rippleChild } = this.props;
        const { size } = this.state;
        const element = children(rippleChild, size);
        const newProps = {
            onMouseDown: wrapEvent(element, 'onMouseDown', this.show),
        };
        if (size) {
            Object.assign(newProps, {
                onMouseUp: wrapEvent(element, 'onMouseUp', this.hide),
                onMouseLeave: wrapEvent(element, 'onMouseLeave', this.hide),
                onDragEnd: wrapEvent(element, 'onDragEnd', this.hide),
            });
        }
        return cloneElement(element, newProps);
    }
}
MouseDown.displayName = 'MouseDown';
MouseDown.propTypes = { rippleChild: PropTypes.node };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvcmlwcGxlL01vdXNlRG93bi50c3giLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBcUIsYUFBYSxFQUFnQixNQUFNLE9BQU8sQ0FBQztBQUNyRixPQUFPLFNBQVMsTUFBTSxZQUFZLENBQUM7QUFFbkMsU0FBUyxTQUFTLENBQ2hCLE9BQTBCLEVBQzFCLFNBQWlCLEVBQ2pCLFFBQXdDO0lBRXhDLE9BQU8sQ0FBQyxDQUFDLEVBQUU7UUFDVCxNQUFNLGFBQWEsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQy9DLElBQUksYUFBYSxFQUFFO1lBQ2pCLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNsQjtRQUNELFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNkLENBQUMsQ0FBQztBQUNKLENBQUM7QUFhRCxNQUFNLENBQUMsT0FBTyxPQUFPLFNBQVUsU0FBUSxhQUE2QjtJQUFwRTs7UUFLRSxVQUFLLEdBQW1CLEVBQUUsQ0FBQztRQW1CM0IsU0FBSSxHQUFtQyxDQUFDLENBQUMsRUFBRTtZQUN6QyxNQUFNLEVBQUUsYUFBYSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQzVCLE1BQU0sR0FBRyxHQUFlLGFBQWEsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO1lBQzlELElBQUksQ0FBQyxRQUFRLENBQUM7Z0JBQ1osSUFBSSxFQUFFO29CQUNKLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQyxJQUFJO29CQUN2QixDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUMsR0FBRztvQkFDdEIsS0FBSyxFQUFFLGFBQWEsQ0FBQyxXQUFXO29CQUNoQyxNQUFNLEVBQUUsYUFBYSxDQUFDLFlBQVk7b0JBQ2xDLFFBQVEsRUFDTixRQUFRLENBQUMsV0FBVyxJQUFJLFFBQVEsQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLENBQUMsUUFBUTtpQkFDeEY7YUFDRixDQUFDLENBQUM7UUFDTCxDQUFDLENBQUM7UUFFRixTQUFJLEdBQUcsR0FBRyxFQUFFO1lBQ1YsSUFBSSxDQUFDLFFBQVEsQ0FBQztnQkFDWixJQUFJLEVBQUUsU0FBUzthQUNoQixDQUFDLENBQUM7UUFDTCxDQUFDLENBQUM7SUFDSixDQUFDO0lBckNDLE1BQU07UUFDSixNQUFNLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDN0MsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDNUIsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM1QyxNQUFNLFFBQVEsR0FBRztZQUNmLFdBQVcsRUFBRSxTQUFTLENBQUMsT0FBTyxFQUFFLGFBQWEsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDO1NBQzFELENBQUM7UUFDRixJQUFJLElBQUksRUFBRTtZQUNSLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFO2dCQUN0QixTQUFTLEVBQUUsU0FBUyxDQUFDLE9BQU8sRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQztnQkFDckQsWUFBWSxFQUFFLFNBQVMsQ0FBQyxPQUFPLEVBQUUsY0FBYyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUM7Z0JBQzNELFNBQVMsRUFBRSxTQUFTLENBQUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDO2FBQ3RELENBQUMsQ0FBQztTQUNKO1FBQ0QsT0FBTyxZQUFZLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7O0FBckJNLHFCQUFXLEdBQUcsV0FBVyxDQUFDO0FBRTFCLG1CQUFTLEdBQUcsRUFBRSxXQUFXLEVBQUUsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9odWlodWF3ay9Eb2N1bWVudHMvb3B0L2Nob2Vyb2Rvbi11aS9jb21wb25lbnRzL3JpcHBsZS9Nb3VzZURvd24udHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNsb25lRWxlbWVudCwgTW91c2VFdmVudEhhbmRsZXIsIFB1cmVDb21wb25lbnQsIFJlYWN0RWxlbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmZ1bmN0aW9uIHdyYXBFdmVudChcbiAgZWxlbWVudDogUmVhY3RFbGVtZW50PGFueT4sXG4gIGV2ZW50TmFtZTogc3RyaW5nLFxuICBjYWxsYmFjazogTW91c2VFdmVudEhhbmRsZXI8SFRNTEVsZW1lbnQ+LFxuKTogTW91c2VFdmVudEhhbmRsZXI8SFRNTEVsZW1lbnQ+IHtcbiAgcmV0dXJuIGUgPT4ge1xuICAgIGNvbnN0IG9yaWdpbmFsRXZlbnQgPSBlbGVtZW50LnByb3BzW2V2ZW50TmFtZV07XG4gICAgaWYgKG9yaWdpbmFsRXZlbnQpIHtcbiAgICAgIG9yaWdpbmFsRXZlbnQoZSk7XG4gICAgfVxuICAgIGNhbGxiYWNrKGUpO1xuICB9O1xufVxuXG5leHBvcnQgdHlwZSBTaXplID0geyB4OiBudW1iZXI7IHk6IG51bWJlcjsgd2lkdGg6IG51bWJlcjsgaGVpZ2h0OiBudW1iZXI7IHBvc2l0aW9uOiBzdHJpbmcgfTtcblxuZXhwb3J0IGludGVyZmFjZSBNb3VzZURvd25Qcm9wcyB7XG4gIGNoaWxkcmVuOiAoY2hpbGQ6IFJlYWN0RWxlbWVudDxhbnk+LCBzaXplPzogU2l6ZSkgPT4gUmVhY3RFbGVtZW50PGFueT47XG4gIHJpcHBsZUNoaWxkOiBSZWFjdEVsZW1lbnQ8YW55Pjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNb3VzZURvd25TdGF0ZSB7XG4gIHNpemU/OiBTaXplO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb3VzZURvd24gZXh0ZW5kcyBQdXJlQ29tcG9uZW50PE1vdXNlRG93blByb3BzPiB7XG4gIHN0YXRpYyBkaXNwbGF5TmFtZSA9ICdNb3VzZURvd24nO1xuXG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7IHJpcHBsZUNoaWxkOiBQcm9wVHlwZXMubm9kZSB9O1xuXG4gIHN0YXRlOiBNb3VzZURvd25TdGF0ZSA9IHt9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGNoaWxkcmVuLCByaXBwbGVDaGlsZCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHNpemUgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgZWxlbWVudCA9IGNoaWxkcmVuKHJpcHBsZUNoaWxkLCBzaXplKTtcbiAgICBjb25zdCBuZXdQcm9wcyA9IHtcbiAgICAgIG9uTW91c2VEb3duOiB3cmFwRXZlbnQoZWxlbWVudCwgJ29uTW91c2VEb3duJywgdGhpcy5zaG93KSxcbiAgICB9O1xuICAgIGlmIChzaXplKSB7XG4gICAgICBPYmplY3QuYXNzaWduKG5ld1Byb3BzLCB7XG4gICAgICAgIG9uTW91c2VVcDogd3JhcEV2ZW50KGVsZW1lbnQsICdvbk1vdXNlVXAnLCB0aGlzLmhpZGUpLFxuICAgICAgICBvbk1vdXNlTGVhdmU6IHdyYXBFdmVudChlbGVtZW50LCAnb25Nb3VzZUxlYXZlJywgdGhpcy5oaWRlKSxcbiAgICAgICAgb25EcmFnRW5kOiB3cmFwRXZlbnQoZWxlbWVudCwgJ29uRHJhZ0VuZCcsIHRoaXMuaGlkZSksXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGNsb25lRWxlbWVudChlbGVtZW50LCBuZXdQcm9wcyk7XG4gIH1cblxuICBzaG93OiBNb3VzZUV2ZW50SGFuZGxlcjxIVE1MRWxlbWVudD4gPSBlID0+IHtcbiAgICBjb25zdCB7IGN1cnJlbnRUYXJnZXQgfSA9IGU7XG4gICAgY29uc3QgcG9zOiBDbGllbnRSZWN0ID0gY3VycmVudFRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHNpemU6IHtcbiAgICAgICAgeDogZS5jbGllbnRYIC0gcG9zLmxlZnQsXG4gICAgICAgIHk6IGUuY2xpZW50WSAtIHBvcy50b3AsXG4gICAgICAgIHdpZHRoOiBjdXJyZW50VGFyZ2V0LmNsaWVudFdpZHRoLFxuICAgICAgICBoZWlnaHQ6IGN1cnJlbnRUYXJnZXQuY2xpZW50SGVpZ2h0LFxuICAgICAgICBwb3NpdGlvbjpcbiAgICAgICAgICBkb2N1bWVudC5kZWZhdWx0VmlldyAmJiBkb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKGN1cnJlbnRUYXJnZXQpLnBvc2l0aW9uLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfTtcblxuICBoaWRlID0gKCkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgc2l6ZTogdW5kZWZpbmVkLFxuICAgIH0pO1xuICB9O1xufVxuIl0sInZlcnNpb24iOjN9