import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { getPrefixCls } from '../configure';
export default class AnchorLink extends Component {
    constructor() {
        super(...arguments);
        this.handleClick = (e) => {
            const { c7nAnchor: { scrollTo, onClick }, } = this.context;
            const { href, title } = this.props;
            if (onClick) {
                onClick(e, { title, href });
            }
            scrollTo(href);
        };
    }
    componentDidMount() {
        const { c7nAnchor } = this.context;
        const { href } = this.props;
        c7nAnchor.registerLink(href);
    }
    componentDidUpdate({ href: prevHref }) {
        const { href } = this.props;
        if (prevHref !== href) {
            const { c7nAnchor } = this.context;
            c7nAnchor.unregisterLink(prevHref);
            c7nAnchor.registerLink(href);
        }
    }
    componentWillUnmount() {
        const { c7nAnchor } = this.context;
        const { href } = this.props;
        c7nAnchor.unregisterLink(href);
    }
    render() {
        const { c7nAnchor } = this.context;
        const { prefixCls: customizePrefixCls, href, title, children, className } = this.props;
        const prefixCls = getPrefixCls('anchor', customizePrefixCls);
        const active = c7nAnchor.activeLink === href;
        const wrapperClassName = classNames(className, `${prefixCls}-link`, {
            [`${prefixCls}-link-active`]: active,
        });
        const titleClassName = classNames(`${prefixCls}-link-title`, {
            [`${prefixCls}-link-title-active`]: active,
        });
        return (React.createElement("div", { className: wrapperClassName },
            React.createElement("a", { className: titleClassName, href: href, title: typeof title === 'string' ? title : '', onClick: this.handleClick }, title),
            children));
    }
}
AnchorLink.displayName = 'AnchorLink';
AnchorLink.defaultProps = {
    href: '#',
};
AnchorLink.contextTypes = {
    c7nAnchor: PropTypes.object,
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvYW5jaG9yL0FuY2hvckxpbmsudHN4IiwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxFQUFFLEVBQUUsU0FBUyxFQUFhLE1BQU0sT0FBTyxDQUFDO0FBQ3BELE9BQU8sU0FBUyxNQUFNLFlBQVksQ0FBQztBQUNuQyxPQUFPLFVBQVUsTUFBTSxZQUFZLENBQUM7QUFFcEMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGNBQWMsQ0FBQztBQVU1QyxNQUFNLENBQUMsT0FBTyxPQUFPLFVBQVcsU0FBUSxTQUErQjtJQUF2RTs7UUFvQ0UsZ0JBQVcsR0FBRyxDQUFDLENBQWdDLEVBQUUsRUFBRTtZQUNqRCxNQUFNLEVBQ0osU0FBUyxFQUFFLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxHQUNqQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDakIsTUFBTSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQ25DLElBQUksT0FBTyxFQUFFO2dCQUNYLE9BQU8sQ0FBQyxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQzthQUM3QjtZQUNELFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqQixDQUFDLENBQUM7SUEyQkosQ0FBQztJQXpEQyxpQkFBaUI7UUFDZixNQUFNLEVBQUUsU0FBUyxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUNuQyxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUM1QixTQUFTLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFRCxrQkFBa0IsQ0FBQyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQW1CO1FBQ3BELE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQzVCLElBQUksUUFBUSxLQUFLLElBQUksRUFBRTtZQUNyQixNQUFNLEVBQUUsU0FBUyxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUNuQyxTQUFTLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ25DLFNBQVMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDOUI7SUFDSCxDQUFDO0lBRUQsb0JBQW9CO1FBQ2xCLE1BQU0sRUFBRSxTQUFTLEVBQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ25DLE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQzVCLFNBQVMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakMsQ0FBQztJQWFELE1BQU07UUFDSixNQUFNLEVBQUUsU0FBUyxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUNuQyxNQUFNLEVBQUUsU0FBUyxFQUFFLGtCQUFrQixFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDdkYsTUFBTSxTQUFTLEdBQUcsWUFBWSxDQUFDLFFBQVEsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1FBQzdELE1BQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxVQUFVLEtBQUssSUFBSSxDQUFDO1FBQzdDLE1BQU0sZ0JBQWdCLEdBQUcsVUFBVSxDQUFDLFNBQVMsRUFBRSxHQUFHLFNBQVMsT0FBTyxFQUFFO1lBQ2xFLENBQUMsR0FBRyxTQUFTLGNBQWMsQ0FBQyxFQUFFLE1BQU07U0FDckMsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxjQUFjLEdBQUcsVUFBVSxDQUFDLEdBQUcsU0FBUyxhQUFhLEVBQUU7WUFDM0QsQ0FBQyxHQUFHLFNBQVMsb0JBQW9CLENBQUMsRUFBRSxNQUFNO1NBQzNDLENBQUMsQ0FBQztRQUNILE9BQU8sQ0FDTCw2QkFBSyxTQUFTLEVBQUUsZ0JBQWdCO1lBQzlCLDJCQUNFLFNBQVMsRUFBRSxjQUFjLEVBQ3pCLElBQUksRUFBRSxJQUFJLEVBQ1YsS0FBSyxFQUFFLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQzdDLE9BQU8sRUFBRSxJQUFJLENBQUMsV0FBVyxJQUV4QixLQUFLLENBQ0o7WUFDSCxRQUFRLENBQ0wsQ0FDUCxDQUFDO0lBQ0osQ0FBQzs7QUF0RU0sc0JBQVcsR0FBRyxZQUFZLENBQUM7QUFFM0IsdUJBQVksR0FBRztJQUNwQixJQUFJLEVBQUUsR0FBRztDQUNWLENBQUM7QUFFSyx1QkFBWSxHQUFHO0lBQ3BCLFNBQVMsRUFBRSxTQUFTLENBQUMsTUFBTTtDQUM1QixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9odWlodWF3ay9Eb2N1bWVudHMvb3B0L2Nob2Vyb2Rvbi11aS9jb21wb25lbnRzL2FuY2hvci9BbmNob3JMaW5rLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgeyBDN05BbmNob3IgfSBmcm9tICcuL0FuY2hvcic7XG5pbXBvcnQgeyBnZXRQcmVmaXhDbHMgfSBmcm9tICcuLi9jb25maWd1cmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEFuY2hvckxpbmtQcm9wcyB7XG4gIHByZWZpeENscz86IHN0cmluZztcbiAgaHJlZjogc3RyaW5nO1xuICB0aXRsZTogUmVhY3ROb2RlO1xuICBjaGlsZHJlbj86IGFueTtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBbmNob3JMaW5rIGV4dGVuZHMgQ29tcG9uZW50PEFuY2hvckxpbmtQcm9wcywgYW55PiB7XG4gIHN0YXRpYyBkaXNwbGF5TmFtZSA9ICdBbmNob3JMaW5rJztcblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIGhyZWY6ICcjJyxcbiAgfTtcblxuICBzdGF0aWMgY29udGV4dFR5cGVzID0ge1xuICAgIGM3bkFuY2hvcjogUHJvcFR5cGVzLm9iamVjdCxcbiAgfTtcblxuICBjb250ZXh0OiB7XG4gICAgYzduQW5jaG9yOiBDN05BbmNob3I7XG4gIH07XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgY29uc3QgeyBjN25BbmNob3IgfSA9IHRoaXMuY29udGV4dDtcbiAgICBjb25zdCB7IGhyZWYgfSA9IHRoaXMucHJvcHM7XG4gICAgYzduQW5jaG9yLnJlZ2lzdGVyTGluayhocmVmKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZSh7IGhyZWY6IHByZXZIcmVmIH06IEFuY2hvckxpbmtQcm9wcykge1xuICAgIGNvbnN0IHsgaHJlZiB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAocHJldkhyZWYgIT09IGhyZWYpIHtcbiAgICAgIGNvbnN0IHsgYzduQW5jaG9yIH0gPSB0aGlzLmNvbnRleHQ7XG4gICAgICBjN25BbmNob3IudW5yZWdpc3RlckxpbmsocHJldkhyZWYpO1xuICAgICAgYzduQW5jaG9yLnJlZ2lzdGVyTGluayhocmVmKTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBjb25zdCB7IGM3bkFuY2hvciB9ID0gdGhpcy5jb250ZXh0O1xuICAgIGNvbnN0IHsgaHJlZiB9ID0gdGhpcy5wcm9wcztcbiAgICBjN25BbmNob3IudW5yZWdpc3RlckxpbmsoaHJlZik7XG4gIH1cblxuICBoYW5kbGVDbGljayA9IChlOiBSZWFjdC5Nb3VzZUV2ZW50PEhUTUxFbGVtZW50PikgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIGM3bkFuY2hvcjogeyBzY3JvbGxUbywgb25DbGljayB9LFxuICAgIH0gPSB0aGlzLmNvbnRleHQ7XG4gICAgY29uc3QgeyBocmVmLCB0aXRsZSB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAob25DbGljaykge1xuICAgICAgb25DbGljayhlLCB7IHRpdGxlLCBocmVmIH0pO1xuICAgIH1cbiAgICBzY3JvbGxUbyhocmVmKTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBjN25BbmNob3IgfSA9IHRoaXMuY29udGV4dDtcbiAgICBjb25zdCB7IHByZWZpeENsczogY3VzdG9taXplUHJlZml4Q2xzLCBocmVmLCB0aXRsZSwgY2hpbGRyZW4sIGNsYXNzTmFtZSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBwcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ2FuY2hvcicsIGN1c3RvbWl6ZVByZWZpeENscyk7XG4gICAgY29uc3QgYWN0aXZlID0gYzduQW5jaG9yLmFjdGl2ZUxpbmsgPT09IGhyZWY7XG4gICAgY29uc3Qgd3JhcHBlckNsYXNzTmFtZSA9IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBgJHtwcmVmaXhDbHN9LWxpbmtgLCB7XG4gICAgICBbYCR7cHJlZml4Q2xzfS1saW5rLWFjdGl2ZWBdOiBhY3RpdmUsXG4gICAgfSk7XG4gICAgY29uc3QgdGl0bGVDbGFzc05hbWUgPSBjbGFzc05hbWVzKGAke3ByZWZpeENsc30tbGluay10aXRsZWAsIHtcbiAgICAgIFtgJHtwcmVmaXhDbHN9LWxpbmstdGl0bGUtYWN0aXZlYF06IGFjdGl2ZSxcbiAgICB9KTtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9e3dyYXBwZXJDbGFzc05hbWV9PlxuICAgICAgICA8YVxuICAgICAgICAgIGNsYXNzTmFtZT17dGl0bGVDbGFzc05hbWV9XG4gICAgICAgICAgaHJlZj17aHJlZn1cbiAgICAgICAgICB0aXRsZT17dHlwZW9mIHRpdGxlID09PSAnc3RyaW5nJyA/IHRpdGxlIDogJyd9XG4gICAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVDbGlja31cbiAgICAgICAgPlxuICAgICAgICAgIHt0aXRsZX1cbiAgICAgICAgPC9hPlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=