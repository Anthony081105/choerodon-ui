import * as React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import ColumnResizeHandler from './ColumnResizeHandler';
import { isNullOrUndefined, getUnhandledProps, defaultClassPrefix, prefix } from './utils';
import Cell from './Cell';
class HeaderCell extends React.PureComponent {
    constructor(props) {
        super(props);
        this.handleColumnResizeStart = () => {
            const { left, fixed, onColumnResizeStart } = this.props;
            onColumnResizeStart?.(this.state.columnWidth, left, !!fixed);
        };
        this.handleColumnResizeEnd = (columnWidth, cursorDelta) => {
            const { dataKey, index, onColumnResizeEnd, onResize } = this.props;
            this.setState({ columnWidth });
            onColumnResizeEnd?.(columnWidth, cursorDelta, dataKey, index);
            onResize?.(columnWidth, dataKey);
        };
        this.handleClick = () => {
            if (this.props.sortable) {
                this.props.onSortColumn?.(this.props.dataKey);
            }
        };
        // @ts-ignore
        this.addPrefix = (name) => prefix(this.props.classPrefix)(name);
        this.state = {
            width: props.width,
            flexGrow: props.flexGrow,
            columnWidth: isNullOrUndefined(props.flexGrow) ? props.width : 0,
        };
    }
    static getDerivedStateFromProps(nextProps, prevState) {
        if (nextProps.width !== prevState.width || nextProps.flexGrow !== prevState.flexGrow) {
            return {
                width: nextProps.width,
                flexGrow: nextProps.flexGrow,
                columnWidth: isNullOrUndefined(nextProps.flexGrow) ? nextProps.width : 0,
            };
        }
        return null;
    }
    renderResizeSpanner() {
        const { resizable, left, onColumnResizeMove, fixed, headerHeight } = this.props;
        const { columnWidth } = this.state;
        if (!resizable) {
            return null;
        }
        return (React.createElement(ColumnResizeHandler, { defaultColumnWidth: columnWidth, key: columnWidth, columnLeft: left, columnFixed: fixed, height: headerHeight ? headerHeight - 1 : undefined, onColumnResizeMove: onColumnResizeMove, onColumnResizeStart: this.handleColumnResizeStart, onColumnResizeEnd: this.handleColumnResizeEnd }));
    }
    renderSortColumn() {
        const { sortable, sortColumn, sortType = '', dataKey } = this.props;
        if (sortable) {
            const iconClasses = classNames(this.addPrefix('icon-sort icon'), {
                [this.addPrefix(`icon-sort-${sortType}`)]: sortColumn === dataKey,
            });
            return (React.createElement("span", { className: this.addPrefix('sort-wrapper') },
                React.createElement("i", { className: iconClasses })));
        }
        return null;
    }
    render() {
        const { className, width, dataKey, headerHeight, children, left, sortable, classPrefix, ...rest } = this.props;
        const classes = classNames(classPrefix, className, {
            [this.addPrefix('sortable')]: sortable,
        });
        const unhandledProps = getUnhandledProps(HeaderCell, rest);
        return (React.createElement("div", { className: classes },
            React.createElement(Cell, Object.assign({}, unhandledProps, { width: width, dataKey: dataKey, left: left, headerHeight: headerHeight, isHeaderCell: true, onClick: this.handleClick }),
                children,
                this.renderSortColumn()),
            this.renderResizeSpanner()));
    }
}
HeaderCell.propTypes = {
    index: PropTypes.number,
    sortColumn: PropTypes.string,
    sortType: PropTypes.oneOf(['desc', 'asc']),
    sortable: PropTypes.bool,
    resizable: PropTypes.bool,
    onColumnResizeStart: PropTypes.func,
    onColumnResizeEnd: PropTypes.func,
    onResize: PropTypes.func,
    onColumnResizeMove: PropTypes.func,
    onSortColumn: PropTypes.func,
    flexGrow: PropTypes.number,
    fixed: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['left', 'right'])]),
};
HeaderCell.defaultProps = {
    classPrefix: defaultClassPrefix('performance-table-cell-header'),
};
export default HeaderCell;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,