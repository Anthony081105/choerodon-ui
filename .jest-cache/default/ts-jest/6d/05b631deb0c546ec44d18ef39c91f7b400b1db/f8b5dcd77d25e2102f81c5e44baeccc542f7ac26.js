export function findExpandedKeys(prev = [], next = []) {
    const prevLen = prev.length;
    const nextLen = next.length;
    if (Math.abs(prevLen - nextLen) !== 1) {
        return { add: false, key: null };
    }
    function find(shorter, longer) {
        const cache = new Map();
        shorter.forEach(key => {
            cache.set(key, true);
        });
        const keys = longer.filter(key => !cache.has(key));
        return keys.length === 1 ? keys[0] : null;
    }
    if (prevLen < nextLen) {
        return {
            add: true,
            key: find(prev, next),
        };
    }
    return {
        add: false,
        key: find(next, prev),
    };
}
export function getExpandRange(shorter, longer, key) {
    const shorterStartIndex = shorter.findIndex(({ data }) => data.key === key);
    const shorterEndNode = shorter[shorterStartIndex + 1];
    const longerStartIndex = longer.findIndex(({ data }) => data.key === key);
    if (shorterEndNode) {
        const longerEndIndex = longer.findIndex(({ data }) => data.key === shorterEndNode.data.key);
        return longer.slice(longerStartIndex + 1, longerEndIndex);
    }
    return longer.slice(longerStartIndex + 1);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvcmMtY29tcG9uZW50cy90cmVlL3V0aWxzL2RpZmZVdGlsLnRzIiwibWFwcGluZ3MiOiJBQUVBLE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxPQUFjLEVBQUUsRUFBRSxPQUFjLEVBQUU7SUFDakUsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUM1QixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBRTVCLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ3JDLE9BQU8sRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsQ0FBQztLQUNsQztJQUVELFNBQVMsSUFBSSxDQUFDLE9BQWMsRUFBRSxNQUFhO1FBQ3pDLE1BQU0sS0FBSyxHQUFzQixJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQzNDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDcEIsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDdkIsQ0FBQyxDQUFDLENBQUM7UUFFSCxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFbkQsT0FBTyxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDNUMsQ0FBQztJQUVELElBQUksT0FBTyxHQUFHLE9BQU8sRUFBRTtRQUNyQixPQUFPO1lBQ0wsR0FBRyxFQUFFLElBQUk7WUFDVCxHQUFHLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUM7U0FDdEIsQ0FBQztLQUNIO0lBRUQsT0FBTztRQUNMLEdBQUcsRUFBRSxLQUFLO1FBQ1YsR0FBRyxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO0tBQ3RCLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxVQUFVLGNBQWMsQ0FBQyxPQUFzQixFQUFFLE1BQXFCLEVBQUUsR0FBUTtJQUNwRixNQUFNLGlCQUFpQixHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQzVFLE1BQU0sY0FBYyxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN0RCxNQUFNLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBRTFFLElBQUksY0FBYyxFQUFFO1FBQ2xCLE1BQU0sY0FBYyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLGNBQWMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDNUYsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLGdCQUFnQixHQUFHLENBQUMsRUFBRSxjQUFjLENBQUMsQ0FBQztLQUMzRDtJQUNELE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUM1QyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9odWlodWF3ay9Eb2N1bWVudHMvb3B0L2Nob2Vyb2Rvbi11aS9jb21wb25lbnRzL3JjLWNvbXBvbmVudHMvdHJlZS91dGlscy9kaWZmVXRpbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBLZXksIEZsYXR0ZW5Ob2RlIH0gZnJvbSAnLi4vaW50ZXJmYWNlJztcblxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRFeHBhbmRlZEtleXMocHJldjogS2V5W10gPSBbXSwgbmV4dDogS2V5W10gPSBbXSkge1xuICBjb25zdCBwcmV2TGVuID0gcHJldi5sZW5ndGg7XG4gIGNvbnN0IG5leHRMZW4gPSBuZXh0Lmxlbmd0aDtcblxuICBpZiAoTWF0aC5hYnMocHJldkxlbiAtIG5leHRMZW4pICE9PSAxKSB7XG4gICAgcmV0dXJuIHsgYWRkOiBmYWxzZSwga2V5OiBudWxsIH07XG4gIH1cblxuICBmdW5jdGlvbiBmaW5kKHNob3J0ZXI6IEtleVtdLCBsb25nZXI6IEtleVtdKSB7XG4gICAgY29uc3QgY2FjaGU6IE1hcDxLZXksIGJvb2xlYW4+ID0gbmV3IE1hcCgpO1xuICAgIHNob3J0ZXIuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgY2FjaGUuc2V0KGtleSwgdHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBjb25zdCBrZXlzID0gbG9uZ2VyLmZpbHRlcihrZXkgPT4gIWNhY2hlLmhhcyhrZXkpKTtcblxuICAgIHJldHVybiBrZXlzLmxlbmd0aCA9PT0gMSA/IGtleXNbMF0gOiBudWxsO1xuICB9XG5cbiAgaWYgKHByZXZMZW4gPCBuZXh0TGVuKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFkZDogdHJ1ZSxcbiAgICAgIGtleTogZmluZChwcmV2LCBuZXh0KSxcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBhZGQ6IGZhbHNlLFxuICAgIGtleTogZmluZChuZXh0LCBwcmV2KSxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEV4cGFuZFJhbmdlKHNob3J0ZXI6IEZsYXR0ZW5Ob2RlW10sIGxvbmdlcjogRmxhdHRlbk5vZGVbXSwga2V5OiBLZXkpIHtcbiAgY29uc3Qgc2hvcnRlclN0YXJ0SW5kZXggPSBzaG9ydGVyLmZpbmRJbmRleCgoeyBkYXRhIH0pID0+IGRhdGEua2V5ID09PSBrZXkpO1xuICBjb25zdCBzaG9ydGVyRW5kTm9kZSA9IHNob3J0ZXJbc2hvcnRlclN0YXJ0SW5kZXggKyAxXTtcbiAgY29uc3QgbG9uZ2VyU3RhcnRJbmRleCA9IGxvbmdlci5maW5kSW5kZXgoKHsgZGF0YSB9KSA9PiBkYXRhLmtleSA9PT0ga2V5KTtcblxuICBpZiAoc2hvcnRlckVuZE5vZGUpIHtcbiAgICBjb25zdCBsb25nZXJFbmRJbmRleCA9IGxvbmdlci5maW5kSW5kZXgoKHsgZGF0YSB9KSA9PiBkYXRhLmtleSA9PT0gc2hvcnRlckVuZE5vZGUuZGF0YS5rZXkpO1xuICAgIHJldHVybiBsb25nZXIuc2xpY2UobG9uZ2VyU3RhcnRJbmRleCArIDEsIGxvbmdlckVuZEluZGV4KTtcbiAgfVxuICByZXR1cm4gbG9uZ2VyLnNsaWNlKGxvbmdlclN0YXJ0SW5kZXggKyAxKTtcbn1cbiJdLCJ2ZXJzaW9uIjozfQ==