import { __decorate } from "tslib";
import React, { Children, Component } from 'react';
import classNames from 'classnames';
import omit from 'lodash/omit';
import Grid from './Grid';
import Meta from './Meta';
import Tabs from '../tabs';
import { throttleByAnimationFrameDecorator } from '../_util/throttleByAnimationFrame';
import warning from '../_util/warning';
import addEventListener from '../_util/addEventListener';
import { getPrefixCls } from '../configure';
export default class Card extends Component {
    constructor() {
        super(...arguments);
        this.state = {
            widerPadding: false,
        };
        this.onTabChange = (key) => {
            const { onTabChange } = this.props;
            if (onTabChange) {
                onTabChange(key);
            }
        };
        this.saveRef = (node) => {
            this.container = node;
        };
    }
    componentDidMount() {
        this.updateWiderPadding();
        this.resizeEvent = addEventListener(window, 'resize', this.updateWiderPadding);
        if ('noHovering' in this.props) {
            const { noHovering } = this.props;
            warning(!noHovering, '`noHovering` of Card is deperated, you can remove it safely or use `hoverable` instead.');
            warning(!!noHovering, '`noHovering={false}` of Card is deperated, use `hoverable` instead.');
        }
    }
    componentWillUnmount() {
        if (this.resizeEvent) {
            this.resizeEvent.remove();
        }
        this.updateWiderPadding.cancel();
    }
    updateWiderPadding() {
        if (!this.container) {
            return;
        }
        // 936 is a magic card width pixer number indicated by designer
        const WIDTH_BOUDARY_PX = 936;
        const { widerPadding } = this.state;
        if (this.container.offsetWidth >= WIDTH_BOUDARY_PX && !widerPadding) {
            this.setState({ widerPadding: true }, () => {
                this.updateWiderPaddingCalled = true; // first render without css transition
            });
        }
        if (this.container.offsetWidth < WIDTH_BOUDARY_PX && widerPadding) {
            this.setState({ widerPadding: false }, () => {
                this.updateWiderPaddingCalled = true; // first render without css transition
            });
        }
    }
    isContainGrid() {
        const { children } = this.props;
        return Children.toArray(children).some((element) => element && element.type && element.type === Grid);
    }
    getAction(actions) {
        if (!actions || !actions.length) {
            return null;
        }
        const actionList = actions.map((action, index) => (React.createElement("li", { style: { width: `${100 / actions.length}%` }, key: `action-${String(index)}` },
            React.createElement("span", null, action))));
        return actionList;
    }
    // For 2.x compatible
    getCompatibleHoverable() {
        const { noHovering, hoverable } = this.props;
        if ('noHovering' in this.props) {
            return !noHovering || hoverable;
        }
        return !!hoverable;
    }
    render() {
        const { prefixCls: customizePrefixCls, className, extra, bodyStyle, title, loading, bordered = true, type, cover, actions, tabList, children, activeTabKey, defaultActiveTabKey, onHeadClick, ...others } = this.props;
        const { widerPadding } = this.state;
        const prefixCls = getPrefixCls('card', customizePrefixCls);
        const classString = classNames(prefixCls, className, {
            [`${prefixCls}-loading`]: loading,
            [`${prefixCls}-bordered`]: bordered,
            [`${prefixCls}-hoverable`]: this.getCompatibleHoverable(),
            [`${prefixCls}-wider-padding`]: widerPadding,
            [`${prefixCls}-padding-transition`]: this.updateWiderPaddingCalled,
            [`${prefixCls}-contain-grid`]: this.isContainGrid(),
            [`${prefixCls}-contain-tabs`]: tabList && tabList.length,
            [`${prefixCls}-type-${type}`]: !!type,
        });
        const loadingBlock = (React.createElement("div", { className: `${prefixCls}-loading-content` },
            React.createElement("p", { className: `${prefixCls}-loading-block`, style: { width: '94%' } }),
            React.createElement("p", null,
                React.createElement("span", { className: `${prefixCls}-loading-block`, style: { width: '28%' } }),
                React.createElement("span", { className: `${prefixCls}-loading-block`, style: { width: '62%' } })),
            React.createElement("p", null,
                React.createElement("span", { className: `${prefixCls}-loading-block`, style: { width: '22%' } }),
                React.createElement("span", { className: `${prefixCls}-loading-block`, style: { width: '66%' } })),
            React.createElement("p", null,
                React.createElement("span", { className: `${prefixCls}-loading-block`, style: { width: '56%' } }),
                React.createElement("span", { className: `${prefixCls}-loading-block`, style: { width: '39%' } })),
            React.createElement("p", null,
                React.createElement("span", { className: `${prefixCls}-loading-block`, style: { width: '21%' } }),
                React.createElement("span", { className: `${prefixCls}-loading-block`, style: { width: '15%' } }),
                React.createElement("span", { className: `${prefixCls}-loading-block`, style: { width: '40%' } }))));
        const hasActiveTabKey = activeTabKey !== undefined;
        const extraProps = {
            [hasActiveTabKey ? 'activeKey' : 'defaultActiveKey']: hasActiveTabKey
                ? activeTabKey
                : defaultActiveTabKey,
        };
        let head;
        const tabs = tabList && tabList.length ? (React.createElement(Tabs, Object.assign({}, extraProps, { className: `${prefixCls}-head-tabs`, size: "large" /* large */, onChange: this.onTabChange }), tabList.map(item => (React.createElement(Tabs.TabPane, { tab: item.tab, key: item.key }))))) : null;
        if (title || extra || tabs) {
            head = (React.createElement("div", { className: `${prefixCls}-head`, onClick: onHeadClick },
                React.createElement("div", { className: `${prefixCls}-head-wrapper` },
                    title && React.createElement("div", { className: `${prefixCls}-head-title` }, title),
                    extra && React.createElement("div", { className: `${prefixCls}-extra` }, extra)),
                tabs));
        }
        const coverDom = cover ? React.createElement("div", { className: `${prefixCls}-cover` }, cover) : null;
        const body = (React.createElement("div", { className: `${prefixCls}-body`, style: bodyStyle }, loading ? loadingBlock : children));
        const actionDom = actions && actions.length ? (React.createElement("ul", { className: `${prefixCls}-actions` }, this.getAction(actions))) : null;
        const divProps = omit(others, ['onTabChange', 'noHovering', 'hoverable']);
        return (React.createElement("div", Object.assign({}, divProps, { className: classString, ref: this.saveRef }),
            head,
            coverDom,
            body,
            actionDom));
    }
}
Card.displayName = 'Card';
Card.Grid = Grid;
Card.Meta = Meta;
__decorate([
    throttleByAnimationFrameDecorator()
], Card.prototype, "updateWiderPadding", null);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvY2FyZC9pbmRleC50c3giLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sS0FBSyxFQUFFLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBK0MsTUFBTSxPQUFPLENBQUM7QUFDaEcsT0FBTyxVQUFVLE1BQU0sWUFBWSxDQUFDO0FBQ3BDLE9BQU8sSUFBSSxNQUFNLGFBQWEsQ0FBQztBQUUvQixPQUFPLElBQUksTUFBTSxRQUFRLENBQUM7QUFDMUIsT0FBTyxJQUFJLE1BQU0sUUFBUSxDQUFDO0FBQzFCLE9BQU8sSUFBSSxNQUFNLFNBQVMsQ0FBQztBQUMzQixPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUN0RixPQUFPLE9BQU8sTUFBTSxrQkFBa0IsQ0FBQztBQUN2QyxPQUFPLGdCQUFnQixNQUFNLDJCQUEyQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFtQzVDLE1BQU0sQ0FBQyxPQUFPLE9BQU8sSUFBSyxTQUFRLFNBQXdCO0lBQTFEOztRQVdFLFVBQUssR0FBRztZQUNOLFlBQVksRUFBRSxLQUFLO1NBQ3BCLENBQUM7UUE2Q0YsZ0JBQVcsR0FBRyxDQUFDLEdBQVcsRUFBRSxFQUFFO1lBQzVCLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQ25DLElBQUksV0FBVyxFQUFFO2dCQUNmLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUNsQjtRQUNILENBQUMsQ0FBQztRQUVGLFlBQU8sR0FBRyxDQUFDLElBQW9CLEVBQUUsRUFBRTtZQUNqQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztRQUN4QixDQUFDLENBQUM7SUEwSUosQ0FBQztJQTVMQyxpQkFBaUI7UUFDZixJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztRQUMxQixJQUFJLENBQUMsV0FBVyxHQUFHLGdCQUFnQixDQUFD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QUUsR0FBRyxTQUFTLFFBQVEsSUFBRyxLQUFLLENBQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ3BGLE1BQU0sSUFBSSxHQUFHLENBQ1gsNkJBQUssU0FBUyxFQUFFLEdBQUcsU0FBUyxPQUFPLEVBQUUsS0FBSyxFQUFFLFNBQVMsSUFDbEQsT0FBTyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FDOUIsQ0FDUCxDQUFDO1FBQ0YsTUFBTSxTQUFTLEdBQ2IsT0FBTyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQzFCLDRCQUFJLFNBQVMsRUFBRSxHQUFHLFNBQVMsVUFBVSxJQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQU0sQ0FDdEUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ1gsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLGFBQWEsRUFBRSxZQUFZLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQztRQUMxRSxPQUFPLENBQ0wsNkNBQVMsUUFBUSxJQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxPQUFPO1lBQ3pELElBQUk7WUFDSixRQUFRO1lBQ1IsSUFBSTtZQUNKLFNBQVMsQ0FDTixDQUNQLENBQUM7SUFDSixDQUFDOztBQTNNTSxnQkFBVyxHQUFHLE1BQU0sQ0FBQztBQUVyQixTQUFJLEdBQWdCLElBQUksQ0FBQztBQUV6QixTQUFJLEdBQWdCLElBQUksQ0FBQztBQWtDaEM7SUFEQyxpQ0FBaUMsRUFBRTs4Q0FrQm5DIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9odWlodWF3ay9Eb2N1bWVudHMvb3B0L2Nob2Vyb2Rvbi11aS9jb21wb25lbnRzL2NhcmQvaW5kZXgudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBDaGlsZHJlbiwgQ29tcG9uZW50LCBDU1NQcm9wZXJ0aWVzLCBNb3VzZUV2ZW50SGFuZGxlciwgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgb21pdCBmcm9tICdsb2Rhc2gvb21pdCc7XG5pbXBvcnQgeyBTaXplIH0gZnJvbSAnLi4vX3V0aWwvZW51bSc7XG5pbXBvcnQgR3JpZCBmcm9tICcuL0dyaWQnO1xuaW1wb3J0IE1ldGEgZnJvbSAnLi9NZXRhJztcbmltcG9ydCBUYWJzIGZyb20gJy4uL3RhYnMnO1xuaW1wb3J0IHsgdGhyb3R0bGVCeUFuaW1hdGlvbkZyYW1lRGVjb3JhdG9yIH0gZnJvbSAnLi4vX3V0aWwvdGhyb3R0bGVCeUFuaW1hdGlvbkZyYW1lJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJy4uL191dGlsL3dhcm5pbmcnO1xuaW1wb3J0IGFkZEV2ZW50TGlzdGVuZXIgZnJvbSAnLi4vX3V0aWwvYWRkRXZlbnRMaXN0ZW5lcic7XG5pbXBvcnQgeyBnZXRQcmVmaXhDbHMgfSBmcm9tICcuLi9jb25maWd1cmUnO1xuXG5leHBvcnQgeyBDYXJkR3JpZFByb3BzIH0gZnJvbSAnLi9HcmlkJztcbmV4cG9ydCB7IENhcmRNZXRhUHJvcHMgfSBmcm9tICcuL01ldGEnO1xuXG5leHBvcnQgdHlwZSBDYXJkVHlwZSA9ICdpbm5lcic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2FyZFRhYkxpc3RUeXBlIHtcbiAga2V5OiBzdHJpbmc7XG4gIHRhYjogUmVhY3ROb2RlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENhcmRQcm9wcyB7XG4gIHByZWZpeENscz86IHN0cmluZztcbiAgdGl0bGU/OiBSZWFjdE5vZGU7XG4gIGV4dHJhPzogUmVhY3ROb2RlO1xuICBib3JkZXJlZD86IGJvb2xlYW47XG4gIGJvZHlTdHlsZT86IENTU1Byb3BlcnRpZXM7XG4gIHN0eWxlPzogQ1NTUHJvcGVydGllcztcbiAgbG9hZGluZz86IGJvb2xlYW47XG4gIG5vSG92ZXJpbmc/OiBib29sZWFuO1xuICBob3ZlcmFibGU/OiBib29sZWFuO1xuICBjaGlsZHJlbj86IFJlYWN0Tm9kZTtcbiAgaWQ/OiBzdHJpbmc7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgdHlwZT86IENhcmRUeXBlO1xuICBjb3Zlcj86IFJlYWN0Tm9kZTtcbiAgYWN0aW9ucz86IFJlYWN0Tm9kZVtdO1xuICB0YWJMaXN0PzogQ2FyZFRhYkxpc3RUeXBlW107XG4gIG9uVGFiQ2hhbmdlPzogKGtleTogc3RyaW5nKSA9PiB2b2lkO1xuICBvbkhlYWRDbGljaz86IE1vdXNlRXZlbnRIYW5kbGVyPGFueT47XG4gIGFjdGl2ZVRhYktleT86IHN0cmluZztcbiAgZGVmYXVsdEFjdGl2ZVRhYktleT86IHN0cmluZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FyZCBleHRlbmRzIENvbXBvbmVudDxDYXJkUHJvcHMsIHt9PiB7XG4gIHN0YXRpYyBkaXNwbGF5TmFtZSA9ICdDYXJkJztcblxuICBzdGF0aWMgR3JpZDogdHlwZW9mIEdyaWQgPSBHcmlkO1xuXG4gIHN0YXRpYyBNZXRhOiB0eXBlb2YgTWV0YSA9IE1ldGE7XG5cbiAgcmVzaXplRXZlbnQ6IGFueTtcblxuICB1cGRhdGVXaWRlclBhZGRpbmdDYWxsZWQ6IGJvb2xlYW47XG5cbiAgc3RhdGUgPSB7XG4gICAgd2lkZXJQYWRkaW5nOiBmYWxzZSxcbiAgfTtcblxuICBwcml2YXRlIGNvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQ7XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy51cGRhdGVXaWRlclBhZGRpbmcoKTtcbiAgICB0aGlzLnJlc2l6ZUV2ZW50ID0gYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3csICdyZXNpemUnLCB0aGlzLnVwZGF0ZVdpZGVyUGFkZGluZyk7XG5cbiAgICBpZiAoJ25vSG92ZXJpbmcnIGluIHRoaXMucHJvcHMpIHtcbiAgICAgIGNvbnN0IHsgbm9Ib3ZlcmluZyB9ID0gdGhpcy5wcm9wcztcbiAgICAgIHdhcm5pbmcoXG4gICAgICAgICFub0hvdmVyaW5nLFxuICAgICAgICAnYG5vSG92ZXJpbmdgIG9mIENhcmQgaXMgZGVwZXJhdGVkLCB5b3UgY2FuIHJlbW92ZSBpdCBzYWZlbHkgb3IgdXNlIGBob3ZlcmFibGVgIGluc3RlYWQuJyxcbiAgICAgICk7XG4gICAgICB3YXJuaW5nKCEhbm9Ib3ZlcmluZywgJ2Bub0hvdmVyaW5nPXtmYWxzZX1gIG9mIENhcmQgaXMgZGVwZXJhdGVkLCB1c2UgYGhvdmVyYWJsZWAgaW5zdGVhZC4nKTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy5yZXNpemVFdmVudCkge1xuICAgICAgdGhpcy5yZXNpemVFdmVudC5yZW1vdmUoKTtcbiAgICB9XG4gICAgKHRoaXMudXBkYXRlV2lkZXJQYWRkaW5nIGFzIGFueSkuY2FuY2VsKCk7XG4gIH1cblxuICBAdGhyb3R0bGVCeUFuaW1hdGlvbkZyYW1lRGVjb3JhdG9yKClcbiAgdXBkYXRlV2lkZXJQYWRkaW5nKCkge1xuICAgIGlmICghdGhpcy5jb250YWluZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gOTM2IGlzIGEgbWFnaWMgY2FyZCB3aWR0aCBwaXhlciBudW1iZXIgaW5kaWNhdGVkIGJ5IGRlc2lnbmVyXG4gICAgY29uc3QgV0lEVEhfQk9VREFSWV9QWCA9IDkzNjtcbiAgICBjb25zdCB7IHdpZGVyUGFkZGluZyB9ID0gdGhpcy5zdGF0ZTtcbiAgICBpZiAodGhpcy5jb250YWluZXIub2Zmc2V0V2lkdGggPj0gV0lEVEhfQk9VREFSWV9QWCAmJiAhd2lkZXJQYWRkaW5nKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgd2lkZXJQYWRkaW5nOiB0cnVlIH0sICgpID0+IHtcbiAgICAgICAgdGhpcy51cGRhdGVXaWRlclBhZGRpbmdDYWxsZWQgPSB0cnVlOyAvLyBmaXJzdCByZW5kZXIgd2l0aG91dCBjc3MgdHJhbnNpdGlvblxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmICh0aGlzLmNvbnRhaW5lci5vZmZzZXRXaWR0aCA8IFdJRFRIX0JPVURBUllfUFggJiYgd2lkZXJQYWRkaW5nKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgd2lkZXJQYWRkaW5nOiBmYWxzZSB9LCAoKSA9PiB7XG4gICAgICAgIHRoaXMudXBkYXRlV2lkZXJQYWRkaW5nQ2FsbGVkID0gdHJ1ZTsgLy8gZmlyc3QgcmVuZGVyIHdpdGhvdXQgY3NzIHRyYW5zaXRpb25cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIG9uVGFiQ2hhbmdlID0gKGtleTogc3RyaW5nKSA9PiB7XG4gICAgY29uc3QgeyBvblRhYkNoYW5nZSB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAob25UYWJDaGFuZ2UpIHtcbiAgICAgIG9uVGFiQ2hhbmdlKGtleSk7XG4gICAgfVxuICB9O1xuXG4gIHNhdmVSZWYgPSAobm9kZTogSFRNTERpdkVsZW1lbnQpID0+IHtcbiAgICB0aGlzLmNvbnRhaW5lciA9IG5vZGU7XG4gIH07XG5cbiAgaXNDb250YWluR3JpZCgpIHtcbiAgICBjb25zdCB7IGNoaWxkcmVuIH0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiBDaGlsZHJlbi50b0FycmF5KGNoaWxkcmVuKS5zb21lKFxuICAgICAgKGVsZW1lbnQ6IEpTWC5FbGVtZW50KSA9PiBlbGVtZW50ICYmIGVsZW1lbnQudHlwZSAmJiBlbGVtZW50LnR5cGUgPT09IEdyaWQsXG4gICAgKTtcbiAgfVxuXG4gIGdldEFjdGlvbihhY3Rpb25zOiBSZWFjdE5vZGVbXSkge1xuICAgIGlmICghYWN0aW9ucyB8fCAhYWN0aW9ucy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCBhY3Rpb25MaXN0ID0gYWN0aW9ucy5tYXAoKGFjdGlvbiwgaW5kZXgpID0+IChcbiAgICAgIDxsaSBzdHlsZT17eyB3aWR0aDogYCR7MTAwIC8gYWN0aW9ucy5sZW5ndGh9JWAgfX0ga2V5PXtgYWN0aW9uLSR7U3RyaW5nKGluZGV4KX1gfT5cbiAgICAgICAgPHNwYW4+e2FjdGlvbn08L3NwYW4+XG4gICAgICA8L2xpPlxuICAgICkpO1xuICAgIHJldHVybiBhY3Rpb25MaXN0O1xuICB9XG5cbiAgLy8gRm9yIDIueCBjb21wYXRpYmxlXG4gIGdldENvbXBhdGlibGVIb3ZlcmFibGUoKSB7XG4gICAgY29uc3QgeyBub0hvdmVyaW5nLCBob3ZlcmFibGUgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKCdub0hvdmVyaW5nJyBpbiB0aGlzLnByb3BzKSB7XG4gICAgICByZXR1cm4gIW5vSG92ZXJpbmcgfHwgaG92ZXJhYmxlO1xuICAgIH1cbiAgICByZXR1cm4gISFob3ZlcmFibGU7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgcHJlZml4Q2xzOiBjdXN0b21pemVQcmVmaXhDbHMsXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBleHRyYSxcbiAgICAgIGJvZHlTdHlsZSxcbiAgICAgIHRpdGxlLFxuICAgICAgbG9hZGluZyxcbiAgICAgIGJvcmRlcmVkID0gdHJ1ZSxcbiAgICAgIHR5cGUsXG4gICAgICBjb3ZlcixcbiAgICAgIGFjdGlvbnMsXG4gICAgICB0YWJMaXN0LFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBhY3RpdmVUYWJLZXksXG4gICAgICBkZWZhdWx0QWN0aXZlVGFiS2V5LFxuICAgICAgb25IZWFkQ2xpY2ssXG4gICAgICAuLi5vdGhlcnNcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHdpZGVyUGFkZGluZyB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCBwcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ2NhcmQnLCBjdXN0b21pemVQcmVmaXhDbHMpO1xuXG4gICAgY29uc3QgY2xhc3NTdHJpbmcgPSBjbGFzc05hbWVzKHByZWZpeENscywgY2xhc3NOYW1lLCB7XG4gICAgICBbYCR7cHJlZml4Q2xzfS1sb2FkaW5nYF06IGxvYWRpbmcsXG4gICAgICBbYCR7cHJlZml4Q2xzfS1ib3JkZXJlZGBdOiBib3JkZXJlZCxcbiAgICAgIFtgJHtwcmVmaXhDbHN9LWhvdmVyYWJsZWBdOiB0aGlzLmdldENvbXBhdGlibGVIb3ZlcmFibGUoKSxcbiAgICAgIFtgJHtwcmVmaXhDbHN9LXdpZGVyLXBhZGRpbmdgXTogd2lkZXJQYWRkaW5nLFxuICAgICAgW2Ake3ByZWZpeENsc30tcGFkZGluZy10cmFuc2l0aW9uYF06IHRoaXMudXBkYXRlV2lkZXJQYWRkaW5nQ2FsbGVkLFxuICAgICAgW2Ake3ByZWZpeENsc30tY29udGFpbi1ncmlkYF06IHRoaXMuaXNDb250YWluR3JpZCgpLFxuICAgICAgW2Ake3ByZWZpeENsc30tY29udGFpbi10YWJzYF06IHRhYkxpc3QgJiYgdGFiTGlzdC5sZW5ndGgsXG4gICAgICBbYCR7cHJlZml4Q2xzfS10eXBlLSR7dHlwZX1gXTogISF0eXBlLFxuICAgIH0pO1xuXG4gICAgY29uc3QgbG9hZGluZ0Jsb2NrID0gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9e2Ake3ByZWZpeENsc30tbG9hZGluZy1jb250ZW50YH0+XG4gICAgICAgIDxwIGNsYXNzTmFtZT17YCR7cHJlZml4Q2xzfS1sb2FkaW5nLWJsb2NrYH0gc3R5bGU9e3sgd2lkdGg6ICc5NCUnIH19IC8+XG4gICAgICAgIDxwPlxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT17YCR7cHJlZml4Q2xzfS1sb2FkaW5nLWJsb2NrYH0gc3R5bGU9e3sgd2lkdGg6ICcyOCUnIH19IC8+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtgJHtwcmVmaXhDbHN9LWxvYWRpbmctYmxvY2tgfSBzdHlsZT17eyB3aWR0aDogJzYyJScgfX0gLz5cbiAgICAgICAgPC9wPlxuICAgICAgICA8cD5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9e2Ake3ByZWZpeENsc30tbG9hZGluZy1ibG9ja2B9IHN0eWxlPXt7IHdpZHRoOiAnMjIlJyB9fSAvPlxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT17YCR7cHJlZml4Q2xzfS1sb2FkaW5nLWJsb2NrYH0gc3R5bGU9e3sgd2lkdGg6ICc2NiUnIH19IC8+XG4gICAgICAgIDwvcD5cbiAgICAgICAgPHA+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtgJHtwcmVmaXhDbHN9LWxvYWRpbmctYmxvY2tgfSBzdHlsZT17eyB3aWR0aDogJzU2JScgfX0gLz5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9e2Ake3ByZWZpeENsc30tbG9hZGluZy1ibG9ja2B9IHN0eWxlPXt7IHdpZHRoOiAnMzklJyB9fSAvPlxuICAgICAgICA8L3A+XG4gICAgICAgIDxwPlxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT17YCR7cHJlZml4Q2xzfS1sb2FkaW5nLWJsb2NrYH0gc3R5bGU9e3sgd2lkdGg6ICcyMSUnIH19IC8+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtgJHtwcmVmaXhDbHN9LWxvYWRpbmctYmxvY2tgfSBzdHlsZT17eyB3aWR0aDogJzE1JScgfX0gLz5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9e2Ake3ByZWZpeENsc30tbG9hZGluZy1ibG9ja2B9IHN0eWxlPXt7IHdpZHRoOiAnNDAlJyB9fSAvPlxuICAgICAgICA8L3A+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuXG4gICAgY29uc3QgaGFzQWN0aXZlVGFiS2V5ID0gYWN0aXZlVGFiS2V5ICE9PSB1bmRlZmluZWQ7XG4gICAgY29uc3QgZXh0cmFQcm9wcyA9IHtcbiAgICAgIFtoYXNBY3RpdmVUYWJLZXkgPyAnYWN0aXZlS2V5JyA6ICdkZWZhdWx0QWN0aXZlS2V5J106IGhhc0FjdGl2ZVRhYktleVxuICAgICAgICA/IGFjdGl2ZVRhYktleVxuICAgICAgICA6IGRlZmF1bHRBY3RpdmVUYWJLZXksXG4gICAgfTtcblxuICAgIGxldCBoZWFkO1xuICAgIGNvbnN0IHRhYnMgPVxuICAgICAgdGFiTGlzdCAmJiB0YWJMaXN0Lmxlbmd0aCA/IChcbiAgICAgICAgPFRhYnNcbiAgICAgICAgICB7Li4uZXh0cmFQcm9wc31cbiAgICAgICAgICBjbGFzc05hbWU9e2Ake3ByZWZpeENsc30taGVhZC10YWJzYH1cbiAgICAgICAgICBzaXplPXtTaXplLmxhcmdlfVxuICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uVGFiQ2hhbmdlfVxuICAgICAgICA+XG4gICAgICAgICAge3RhYkxpc3QubWFwKGl0ZW0gPT4gKFxuICAgICAgICAgICAgPFRhYnMuVGFiUGFuZSB0YWI9e2l0ZW0udGFifSBrZXk9e2l0ZW0ua2V5fSAvPlxuICAgICAgICAgICkpfVxuICAgICAgICA8L1RhYnM+XG4gICAgICApIDogbnVsbDtcbiAgICBpZiAodGl0bGUgfHwgZXh0cmEgfHwgdGFicykge1xuICAgICAgaGVhZCA9IChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2Ake3ByZWZpeENsc30taGVhZGB9IG9uQ2xpY2s9e29uSGVhZENsaWNrfT5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YCR7cHJlZml4Q2xzfS1oZWFkLXdyYXBwZXJgfT5cbiAgICAgICAgICAgIHt0aXRsZSAmJiA8ZGl2IGNsYXNzTmFtZT17YCR7cHJlZml4Q2xzfS1oZWFkLXRpdGxlYH0+e3RpdGxlfTwvZGl2Pn1cbiAgICAgICAgICAgIHtleHRyYSAmJiA8ZGl2IGNsYXNzTmFtZT17YCR7cHJlZml4Q2xzfS1leHRyYWB9PntleHRyYX08L2Rpdj59XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAge3RhYnN9XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9XG4gICAgY29uc3QgY292ZXJEb20gPSBjb3ZlciA/IDxkaXYgY2xhc3NOYW1lPXtgJHtwcmVmaXhDbHN9LWNvdmVyYH0+e2NvdmVyfTwvZGl2PiA6IG51bGw7XG4gICAgY29uc3QgYm9keSA9IChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtgJHtwcmVmaXhDbHN9LWJvZHlgfSBzdHlsZT17Ym9keVN0eWxlfT5cbiAgICAgICAge2xvYWRpbmcgPyBsb2FkaW5nQmxvY2sgOiBjaGlsZHJlbn1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gICAgY29uc3QgYWN0aW9uRG9tID1cbiAgICAgIGFjdGlvbnMgJiYgYWN0aW9ucy5sZW5ndGggPyAoXG4gICAgICAgIDx1bCBjbGFzc05hbWU9e2Ake3ByZWZpeENsc30tYWN0aW9uc2B9Pnt0aGlzLmdldEFjdGlvbihhY3Rpb25zKX08L3VsPlxuICAgICAgKSA6IG51bGw7XG4gICAgY29uc3QgZGl2UHJvcHMgPSBvbWl0KG90aGVycywgWydvblRhYkNoYW5nZScsICdub0hvdmVyaW5nJywgJ2hvdmVyYWJsZSddKTtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiB7Li4uZGl2UHJvcHN9IGNsYXNzTmFtZT17Y2xhc3NTdHJpbmd9IHJlZj17dGhpcy5zYXZlUmVmfT5cbiAgICAgICAge2hlYWR9XG4gICAgICAgIHtjb3ZlckRvbX1cbiAgICAgICAge2JvZHl9XG4gICAgICAgIHthY3Rpb25Eb219XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=