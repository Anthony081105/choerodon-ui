import React, { Component } from 'react';
import classNames from 'classnames';
import omit from 'lodash/omit';
import { icons } from 'choerodon-ui-font';
import Icon from '../icon';
import Select from '../select';
import Pagination from '../pagination';
import Tooltip from '../tooltip';
import { getPrefixCls } from '../configure';
const Option = Select.Option;
export default class IconSelect extends Component {
    constructor(props) {
        super(props);
        this.handleRender = (label) => {
            if (typeof label === 'string' && label) {
                return (React.createElement("span", null,
                    React.createElement(Icon, { type: label }),
                    " ",
                    label));
            }
            if (typeof label === 'object' && label.props) {
                const { children } = label.props;
                return children ? React.createElement("span", null, children) : null;
            }
            return null;
        };
        this.handlePageChange = (current, pageSize) => {
            const { filterValue } = this.state;
            this.initIcon(current, pageSize, filterValue);
        };
        this.handleFilter = (value) => {
            this.initIcon(1, 20, value);
        };
        this.saveRef = (node) => {
            if (node) {
                this.rcSelect = node;
            }
        };
        this.state = {
            current: 1,
            total: 0,
            pageSize: 20,
            filterValue: '',
            data: [],
        };
    }
    componentDidMount() {
        this.initIcon();
    }
    initIcon(current = 1, pageSize = 20, filterValue = '') {
        const { showAll } = this.props;
        const minIndex = (current - 1) * pageSize;
        const maxIndex = current * pageSize;
        let items;
        if (showAll) {
            items = icons.default;
            if (filterValue) {
                items = icons.favorite.filter(name => {
                    return name.toLowerCase().indexOf(filterValue.toLowerCase()) !== -1;
                });
            }
        }
        else {
            items = icons.favorite;
            if (filterValue) {
                items = icons.favorite.filter(name => {
                    return name.toLowerCase().indexOf(filterValue.toLowerCase()) !== -1;
                });
            }
        }
        const total = items.length || 0;
        const currentData = items.filter((name, index) => {
            return name && index >= minIndex && index < maxIndex;
        });
        this.setState({
            data: currentData,
            total,
            pageSize,
            current,
            filterValue,
        });
    }
    renderOption() {
        const { data } = this.state;
        return data.map((icon) => {
            return (React.createElement(Option, { key: icon, value: icon },
                React.createElement(Tooltip, { placement: "bottomLeft", title: icon },
                    React.createElement(Icon, { type: icon }),
                    React.createElement("span", { className: "text" }, icon))));
        });
    }
    renderFooter() {
        const { total, pageSize, current } = this.state;
        return (React.createElement(Pagination, { total: total, onChange: this.handlePageChange, pageSizeOptions: ['20', '40', '80'], pageSize: pageSize, onShowSizeChange: this.handlePageChange, current: current }));
    }
    render() {
        const { className, prefixCls: customizePrefixCls, dropdownClassName } = this.props;
        const { filterValue } = this.state;
        const prefixCls = getPrefixCls('icon-select', customizePrefixCls);
        const selectCls = classNames(className, prefixCls);
        const dropDownCls = classNames(dropdownClassName, `${prefixCls}-dropdown`);
        const selectProps = {
            ...this.props,
            className: selectCls,
            dropdownClassName: dropDownCls,
        };
        const otherProps = omit(selectProps, ['prefixCls']);
        return (React.createElement(Select, Object.assign({}, otherProps, { footer: this.renderFooter(), onFilterChange: this.handleFilter, filterValue: filterValue, choiceRender: this.handleRender, filter: true, ref: this.saveRef }), this.renderOption()));
    }
}
IconSelect.displayName = 'IconSelect';
IconSelect.defaultProps = {
    filter: true,
    showArrow: false,
    showCheckAll: false,
    showAll: false,
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,