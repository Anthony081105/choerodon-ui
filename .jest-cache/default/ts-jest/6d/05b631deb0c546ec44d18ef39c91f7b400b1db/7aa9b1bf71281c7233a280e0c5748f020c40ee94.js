import React, { Component } from 'react';
import { findDOMNode } from 'react-dom';
import classNames from 'classnames';
import omit from 'lodash/omit';
import Icon from '../icon';
import CheckableTag from './CheckableTag';
import Animate from '../animate';
import { getPrefixCls } from '../configure';
export default class Tag extends Component {
    constructor() {
        super(...arguments);
        this.state = {
            closing: false,
            closed: false,
        };
        this.close = e => {
            const { onClose } = this.props;
            if (onClose) {
                onClose(e);
            }
            if (e.defaultPrevented) {
                return;
            }
            const dom = findDOMNode(this);
            dom.style.width = `${dom.getBoundingClientRect().width}px`;
            // It's Magic Code, don't know why
            dom.style.width = `${dom.getBoundingClientRect().width}px`;
            this.setState({
                closing: true,
            });
        };
        this.animationEnd = (_, existed) => {
            const { closed } = this.state;
            if (!existed && !closed) {
                this.setState({
                    closed: true,
                    closing: false,
                });
                const { afterClose } = this.props;
                if (afterClose) {
                    afterClose();
                }
            }
        };
    }
    isPresetColor(color) {
        if (!color) {
            return false;
        }
        return /^(pink|red|yellow|orange|cyan|green|blue|purple|geekblue|magenta|volcano|gold|lime)(-inverse)?$/.test(color);
    }
    render() {
        const { prefixCls: customizePrefixCls, closable, color, className, children, style, ...otherProps } = this.props;
        const prefixCls = getPrefixCls('tag', customizePrefixCls);
        const { closing, closed } = this.state;
        const closeIcon = closable ? React.createElement(Icon, { type: "close", onClick: this.close }) : '';
        const isPresetColor = this.isPresetColor(color);
        const classString = classNames(prefixCls, {
            [`${prefixCls}-${color}`]: isPresetColor,
            [`${prefixCls}-has-color`]: color && !isPresetColor,
            [`${prefixCls}-close`]: closing,
        }, className);
        // fix https://fb.me/react-unknown-prop
        const divProps = omit(otherProps, ['onClose', 'afterClose']);
        const tagStyle = {
            ...style,
        };
        if (color && !isPresetColor) {
            tagStyle.backgroundColor = color;
        }
        const tag = closed ? null : (React.createElement("div", Object.assign({ hidden: closing }, divProps, { className: classString, style: tagStyle }),
            children,
            closeIcon));
        return (React.createElement(Animate, { component: "", hiddenProp: "hidden", transitionName: `${prefixCls}-zoom`, transitionAppear: true, onEnd: this.animationEnd }, tag));
    }
}
Tag.displayName = 'Tag';
Tag.CheckableTag = CheckableTag;
Tag.defaultProps = {
    closable: false,
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvdGFnL2luZGV4LnRzeCIsIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssRUFBRSxFQUFFLFNBQVMsRUFBb0MsTUFBTSxPQUFPLENBQUM7QUFDM0UsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLFVBQVUsTUFBTSxZQUFZLENBQUM7QUFDcEMsT0FBTyxJQUFJLE1BQU0sYUFBYSxDQUFDO0FBQy9CLE9BQU8sSUFBSSxNQUFNLFNBQVMsQ0FBQztBQUMzQixPQUFPLFlBQVksTUFBTSxnQkFBZ0IsQ0FBQztBQUMxQyxPQUFPLE9BQU8sTUFBTSxZQUFZLENBQUM7QUFDakMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGNBQWMsQ0FBQztBQXNCNUMsTUFBTSxDQUFDLE9BQU8sT0FBTyxHQUFJLFNBQVEsU0FBNkI7SUFBOUQ7O1FBU0UsVUFBSyxHQUFHO1lBQ04sT0FBTyxFQUFFLEtBQUs7WUFDZCxNQUFNLEVBQUUsS0FBSztTQUNkLENBQUM7UUFFRixVQUFLLEdBQW1DLENBQUMsQ0FBQyxFQUFFO1lBQzFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQy9CLElBQUksT0FBTyxFQUFFO2dCQUNYLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNaO1lBQ0QsSUFBSSxDQUFDLENBQUMsZ0JBQWdCLEVBQUU7Z0JBQ3RCLE9BQU87YUFDUjtZQUNELE1BQU0sR0FBRyxHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQWdCLENBQUM7WUFDN0MsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsR0FBRyxHQUFHLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxLQUFLLElBQUksQ0FBQztZQUMzRCxrQ0FBa0M7WUFDbEMsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsR0FBRyxHQUFHLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxLQUFLLElB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QUFXLEdBQUcsS0FBSyxDQUFDO0FBRXBCLGdCQUFZLEdBQUcsWUFBWSxDQUFDO0FBRTVCLGdCQUFZLEdBQUc7SUFDcEIsUUFBUSxFQUFFLEtBQUs7Q0FDaEIsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvaHVpaHVhd2svRG9jdW1lbnRzL29wdC9jaG9lcm9kb24tdWkvY29tcG9uZW50cy90YWcvaW5kZXgudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIENTU1Byb3BlcnRpZXMsIE1vdXNlRXZlbnRIYW5kbGVyIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZmluZERPTU5vZGUgfSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgb21pdCBmcm9tICdsb2Rhc2gvb21pdCc7XG5pbXBvcnQgSWNvbiBmcm9tICcuLi9pY29uJztcbmltcG9ydCBDaGVja2FibGVUYWcgZnJvbSAnLi9DaGVja2FibGVUYWcnO1xuaW1wb3J0IEFuaW1hdGUgZnJvbSAnLi4vYW5pbWF0ZSc7XG5pbXBvcnQgeyBnZXRQcmVmaXhDbHMgfSBmcm9tICcuLi9jb25maWd1cmUnO1xuXG5leHBvcnQgeyBDaGVja2FibGVUYWdQcm9wcyB9IGZyb20gJy4vQ2hlY2thYmxlVGFnJztcblxuZXhwb3J0IGludGVyZmFjZSBUYWdQcm9wcyB7XG4gIHByZWZpeENscz86IHN0cmluZztcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBjb2xvcj86IHN0cmluZztcbiAgLyoqIOagh+etvuaYr+WQpuWPr+S7peWFs+mXrSAqL1xuICBjbG9zYWJsZT86IGJvb2xlYW47XG4gIC8qKiDlhbPpl63ml7bnmoTlm57osIMgKi9cbiAgb25DbG9zZT86IEZ1bmN0aW9uO1xuICAvKiog5Yqo55S75YWz6Zet5ZCO55qE5Zue6LCDICovXG4gIGFmdGVyQ2xvc2U/OiBGdW5jdGlvbjtcbiAgc3R5bGU/OiBDU1NQcm9wZXJ0aWVzO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRhZ1N0YXRlIHtcbiAgY2xvc2luZzogYm9vbGVhbjtcbiAgY2xvc2VkOiBib29sZWFuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUYWcgZXh0ZW5kcyBDb21wb25lbnQ8VGFnUHJvcHMsIFRhZ1N0YXRlPiB7XG4gIHN0YXRpYyBkaXNwbGF5TmFtZSA9ICdUYWcnO1xuXG4gIHN0YXRpYyBDaGVja2FibGVUYWcgPSBDaGVja2FibGVUYWc7XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBjbG9zYWJsZTogZmFsc2UsXG4gIH07XG5cbiAgc3RhdGUgPSB7XG4gICAgY2xvc2luZzogZmFsc2UsXG4gICAgY2xvc2VkOiBmYWxzZSxcbiAgfTtcblxuICBjbG9zZTogTW91c2VFdmVudEhhbmRsZXI8SFRNTEVsZW1lbnQ+ID0gZSA9PiB7XG4gICAgY29uc3QgeyBvbkNsb3NlIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmIChvbkNsb3NlKSB7XG4gICAgICBvbkNsb3NlKGUpO1xuICAgIH1cbiAgICBpZiAoZS5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGRvbSA9IGZpbmRET01Ob2RlKHRoaXMpIGFzIEhUTUxFbGVtZW50O1xuICAgIGRvbS5zdHlsZS53aWR0aCA9IGAke2RvbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aH1weGA7XG4gICAgLy8gSXQncyBNYWdpYyBDb2RlLCBkb24ndCBrbm93IHdoeVxuICAgIGRvbS5zdHlsZS53aWR0aCA9IGAke2RvbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aH1weGA7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBjbG9zaW5nOiB0cnVlLFxuICAgIH0pO1xuICB9O1xuXG4gIGFuaW1hdGlvbkVuZCA9IChfOiBzdHJpbmcsIGV4aXN0ZWQ6IGJvb2xlYW4pID0+IHtcbiAgICBjb25zdCB7IGNsb3NlZCB9ID0gdGhpcy5zdGF0ZTtcbiAgICBpZiAoIWV4aXN0ZWQgJiYgIWNsb3NlZCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGNsb3NlZDogdHJ1ZSxcbiAgICAgICAgY2xvc2luZzogZmFsc2UsXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IHsgYWZ0ZXJDbG9zZSB9ID0gdGhpcy5wcm9wcztcblxuICAgICAgaWYgKGFmdGVyQ2xvc2UpIHtcbiAgICAgICAgYWZ0ZXJDbG9zZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBpc1ByZXNldENvbG9yKGNvbG9yPzogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgaWYgKCFjb2xvcikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gL14ocGlua3xyZWR8eWVsbG93fG9yYW5nZXxjeWFufGdyZWVufGJsdWV8cHVycGxlfGdlZWtibHVlfG1hZ2VudGF8dm9sY2Fub3xnb2xkfGxpbWUpKC1pbnZlcnNlKT8kLy50ZXN0KFxuICAgICAgY29sb3IsXG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBwcmVmaXhDbHM6IGN1c3RvbWl6ZVByZWZpeENscyxcbiAgICAgIGNsb3NhYmxlLFxuICAgICAgY29sb3IsXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIHN0eWxlLFxuICAgICAgLi4ub3RoZXJQcm9wc1xuICAgIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHByZWZpeENscyA9IGdldFByZWZpeENscygndGFnJywgY3VzdG9taXplUHJlZml4Q2xzKTtcbiAgICBjb25zdCB7IGNsb3NpbmcsIGNsb3NlZCB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCBjbG9zZUljb24gPSBjbG9zYWJsZSA/IDxJY29uIHR5cGU9XCJjbG9zZVwiIG9uQ2xpY2s9e3RoaXMuY2xvc2V9IC8+IDogJyc7XG4gICAgY29uc3QgaXNQcmVzZXRDb2xvciA9IHRoaXMuaXNQcmVzZXRDb2xvcihjb2xvcik7XG4gICAgY29uc3QgY2xhc3NTdHJpbmcgPSBjbGFzc05hbWVzKFxuICAgICAgcHJlZml4Q2xzLFxuICAgICAge1xuICAgICAgICBbYCR7cHJlZml4Q2xzfS0ke2NvbG9yfWBdOiBpc1ByZXNldENvbG9yLFxuICAgICAgICBbYCR7cHJlZml4Q2xzfS1oYXMtY29sb3JgXTogY29sb3IgJiYgIWlzUHJlc2V0Q29sb3IsXG4gICAgICAgIFtgJHtwcmVmaXhDbHN9LWNsb3NlYF06IGNsb3NpbmcsXG4gICAgICB9LFxuICAgICAgY2xhc3NOYW1lLFxuICAgICk7XG4gICAgLy8gZml4IGh0dHBzOi8vZmIubWUvcmVhY3QtdW5rbm93bi1wcm9wXG4gICAgY29uc3QgZGl2UHJvcHMgPSBvbWl0KG90aGVyUHJvcHMsIFsnb25DbG9zZScsICdhZnRlckNsb3NlJ10pO1xuICAgIGNvbnN0IHRhZ1N0eWxlOiBDU1NQcm9wZXJ0aWVzID0ge1xuICAgICAgLi4uc3R5bGUsXG4gICAgfTtcbiAgICBpZiAoY29sb3IgJiYgIWlzUHJlc2V0Q29sb3IpIHtcbiAgICAgIHRhZ1N0eWxlLmJhY2tncm91bmRDb2xvciA9IGNvbG9yO1xuICAgIH1cbiAgICBjb25zdCB0YWcgPSBjbG9zZWQgPyBudWxsIDogKFxuICAgICAgPGRpdiBoaWRkZW49e2Nsb3Npbmd9IHsuLi5kaXZQcm9wc30gY2xhc3NOYW1lPXtjbGFzc1N0cmluZ30gc3R5bGU9e3RhZ1N0eWxlfT5cbiAgICAgICAge2NoaWxkcmVufVxuICAgICAgICB7Y2xvc2VJY29ufVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgICByZXR1cm4gKFxuICAgICAgPEFuaW1hdGVcbiAgICAgICAgY29tcG9uZW50PVwiXCJcbiAgICAgICAgaGlkZGVuUHJvcD1cImhpZGRlblwiXG4gICAgICAgIHRyYW5zaXRpb25OYW1lPXtgJHtwcmVmaXhDbHN9LXpvb21gfVxuICAgICAgICB0cmFuc2l0aW9uQXBwZWFyXG4gICAgICAgIG9uRW5kPXt0aGlzLmFuaW1hdGlvbkVuZH1cbiAgICAgID5cbiAgICAgICAge3RhZ31cbiAgICAgIDwvQW5pbWF0ZT5cbiAgICApO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=