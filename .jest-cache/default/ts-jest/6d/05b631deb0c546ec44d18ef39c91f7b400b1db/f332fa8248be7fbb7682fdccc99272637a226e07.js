import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import shallowEqual from 'lodash/isEqual';
import RcCheckbox from '../rc-components/checkbox';
import { getPrefixCls } from '../configure';
export default class Radio extends Component {
    constructor() {
        super(...arguments);
        this.saveCheckbox = (node) => {
            this.rcCheckbox = node;
        };
        this.onChange = (e) => {
            const { onChange } = this.props;
            const { radioGroup } = this.context;
            if (onChange) {
                onChange(e);
            }
            if (radioGroup && radioGroup.onChange) {
                radioGroup.onChange(e);
            }
        };
    }
    shouldComponentUpdate(nextProps, nextState, nextContext) {
        const { radioGroup } = this.context;
        return (!shallowEqual(this.props, nextProps) ||
            !shallowEqual(this.state, nextState) ||
            !shallowEqual(radioGroup, nextContext.radioGroup));
    }
    focus() {
        this.rcCheckbox.focus();
    }
    blur() {
        this.rcCheckbox.blur();
    }
    render() {
        const { props, context } = this;
        const { prefixCls: customizePrefixCls, className, children, style, ...restProps } = props;
        const prefixCls = getPrefixCls('radio', customizePrefixCls);
        const { radioGroup } = context;
        const radioProps = { ...restProps };
        if (radioGroup) {
            radioProps.name = radioGroup.name;
            radioProps.onChange = this.onChange;
            radioProps.checked = props.value === radioGroup.value;
            radioProps.disabled = props.disabled || radioGroup.disabled;
        }
        const wrapperClassString = classNames(className, {
            [`${prefixCls}-wrapper`]: true,
            [`${prefixCls}-wrapper-checked`]: radioProps.checked,
            [`${prefixCls}-wrapper-disabled`]: radioProps.disabled,
        });
        return (React.createElement("label", { className: wrapperClassString, style: style, onMouseEnter: props.onMouseEnter, onMouseLeave: props.onMouseLeave },
            React.createElement(RcCheckbox, Object.assign({}, radioProps, { prefixCls: prefixCls, ref: this.saveCheckbox })),
            children !== undefined ? React.createElement("span", null, children) : null));
    }
}
Radio.displayName = 'Radio';
Radio.defaultProps = {
    type: 'radio',
};
Radio.contextTypes = {
    radioGroup: PropTypes.any,
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvcmFkaW8vcmFkaW8udHN4IiwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxFQUFFLEVBQUUsU0FBUyxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBQ3pDLE9BQU8sU0FBUyxNQUFNLFlBQVksQ0FBQztBQUNuQyxPQUFPLFVBQVUsTUFBTSxZQUFZLENBQUM7QUFDcEMsT0FBTyxZQUFZLE1BQU0sZ0JBQWdCLENBQUM7QUFJMUMsT0FBTyxVQUFVLE1BQU0sMkJBQTJCLENBQUM7QUFDbkQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUU1QyxNQUFNLENBQUMsT0FBTyxPQUFPLEtBQU0sU0FBUSxTQUF5QjtJQUE1RDs7UUEwQkUsaUJBQVksR0FBRyxDQUFDLElBQVMsRUFBRSxFQUFFO1lBQzNCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1FBQ3pCLENBQUMsQ0FBQztRQUVGLGFBQVEsR0FBRyxDQUFDLENBQW1CLEVBQUUsRUFBRTtZQUNqQyxNQUFNLEVBQUUsUUFBUSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUNoQyxNQUFNLEVBQUUsVUFBVSxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUNwQyxJQUFJLFFBQVEsRUFBRTtnQkFDWixRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDYjtZQUNELElBQUksVUFBVSxJQUFJLFVBQVUsQ0FBQyxRQUFRLEVBQUU7Z0JBQ3JDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDeEI7UUFDSCxDQUFDLENBQUM7SUF3Q0osQ0FBQztJQTlEQyxxQkFBcUIsQ0FBQyxTQUFxQixFQUFFLFNBQWEsRUFBRSxXQUE4QjtRQUN4RixNQUFNLEVBQUUsVUFBVSxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUNwQyxPQUFPLENBQ0wsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUM7WUFDcEMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUM7WUFDcEMsQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FDbEQsQ0FBQztJQUNKLENBQUM7SUFpQkQsS0FBSztRQUNILElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVELElBQUk7UUFDRixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxNQUFNO1FBQ0osTUFBTSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFDaEMsTUFBTSxFQUFFLFNBQVMsRUFBRSxrQkFBa0IsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxHQUFHLFNBQVMsRUFBRSxHQUFHLEtBQUssQ0FBQztRQUMxRixNQUFNLFNBQVMsR0FBRyxZQUFZLENBQUMsT0FBTyxFQUFFLGtCQUFrQixDQUFDLENBQUM7UUFDNUQsTUFBTSxFQUFFLFVBQVUsRUFBRSxHQUFHLE9BQU8sQ0FBQztRQUMvQixNQUFNLFVBQVUsR0FBZSxFQUFFLEdBQUcsU0FBUyxFQUFFLENBQUM7UUFDaEQsSUFBSSxVQUFVLEVBQUU7WUFDZCxVQUFVLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUM7WUFDbEMsVUFBVSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1lBQ3BDLFVBQVUsQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLEtBQUssS0FBSyxVQUFVLENBQUMsS0FBSyxDQUFDO1lBQ3RELFVBQVUsQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDO1NBQzdEO1FBQ0QsTUFBTSxrQkFBa0IsR0FBRyxVQUFVLENBQUMsU0FBUyxFQUFFO1lBQy9DLENBQUMsR0FBRyxTQUFTLFVBQVUsQ0FBQyxFQUFFLElBQUk7WUFDOUIsQ0FBQyxHQUFHLFNBQVMsa0JBQWtCLENBQUMsRUFBRSxVQUFVLENBQUMsT0FBTztZQUNwRCxDQUFDLEdBQUcsU0FBUyxtQkFBbUIsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxRQUFRO1NBQ3ZELENBQUMsQ0FBQztRQUVILE9BQU8sQ0FDTCwrQkFDRSxTQUFTLEVBQUUsa0JBQWtCLEVBQzdCLEtBQUssRUFBRSxLQUFLLEVBQ1osWUFBWSxFQUFFLEtBQUssQ0FBQyxZQUFZLEVBQ2hDLFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWTtZQUVoQyxvQkFBQyxVQUFVLG9CQUFLLFVBQVUsSUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsWUFBWSxJQUFJO1lBQzNFLFFBQVEsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLGtDQUFPLFFBQVEsQ0FBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQ2xELENBQ1QsQ0FBQztJQUNKLENBQUM7O0FBN0VNLGlCQUFXLEdBQUcsT0FBTyxDQUFDO0FBTXRCLGtCQUFZLEdBQUc7SUFDcEIsSUFBSSxFQUFFLE9BQU87Q0FDZCxDQUFDO0FBRUssa0JBQVksR0FBRztJQUNwQixVQUFVLEVBQUUsU0FBUyxDQUFDLEdBQUc7Q0FDMUIsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvaHVpaHVhd2svRG9jdW1lbnRzL29wdC9jaG9lcm9kb24tdWkvY29tcG9uZW50cy9yYWRpby9yYWRpby50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBzaGFsbG93RXF1YWwgZnJvbSAnbG9kYXNoL2lzRXF1YWwnO1xuaW1wb3J0IFJhZGlvR3JvdXAgZnJvbSAnLi9ncm91cCc7XG5pbXBvcnQgUmFkaW9CdXR0b24gZnJvbSAnLi9yYWRpb0J1dHRvbic7XG5pbXBvcnQgeyBSYWRpb0NoYW5nZUV2ZW50LCBSYWRpb0dyb3VwQ29udGV4dCwgUmFkaW9Qcm9wcyB9IGZyb20gJy4vaW50ZXJmYWNlJztcbmltcG9ydCBSY0NoZWNrYm94IGZyb20gJy4uL3JjLWNvbXBvbmVudHMvY2hlY2tib3gnO1xuaW1wb3J0IHsgZ2V0UHJlZml4Q2xzIH0gZnJvbSAnLi4vY29uZmlndXJlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmFkaW8gZXh0ZW5kcyBDb21wb25lbnQ8UmFkaW9Qcm9wcywge30+IHtcbiAgc3RhdGljIGRpc3BsYXlOYW1lID0gJ1JhZGlvJztcblxuICBzdGF0aWMgR3JvdXA6IHR5cGVvZiBSYWRpb0dyb3VwO1xuXG4gIHN0YXRpYyBCdXR0b246IHR5cGVvZiBSYWRpb0J1dHRvbjtcblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIHR5cGU6ICdyYWRpbycsXG4gIH07XG5cbiAgc3RhdGljIGNvbnRleHRUeXBlcyA9IHtcbiAgICByYWRpb0dyb3VwOiBQcm9wVHlwZXMuYW55LFxuICB9O1xuXG4gIHByaXZhdGUgcmNDaGVja2JveDogYW55O1xuXG4gIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHM6IFJhZGlvUHJvcHMsIG5leHRTdGF0ZToge30sIG5leHRDb250ZXh0OiBSYWRpb0dyb3VwQ29udGV4dCkge1xuICAgIGNvbnN0IHsgcmFkaW9Hcm91cCB9ID0gdGhpcy5jb250ZXh0O1xuICAgIHJldHVybiAoXG4gICAgICAhc2hhbGxvd0VxdWFsKHRoaXMucHJvcHMsIG5leHRQcm9wcykgfHxcbiAgICAgICFzaGFsbG93RXF1YWwodGhpcy5zdGF0ZSwgbmV4dFN0YXRlKSB8fFxuICAgICAgIXNoYWxsb3dFcXVhbChyYWRpb0dyb3VwLCBuZXh0Q29udGV4dC5yYWRpb0dyb3VwKVxuICAgICk7XG4gIH1cblxuICBzYXZlQ2hlY2tib3ggPSAobm9kZTogYW55KSA9PiB7XG4gICAgdGhpcy5yY0NoZWNrYm94ID0gbm9kZTtcbiAgfTtcblxuICBvbkNoYW5nZSA9IChlOiBSYWRpb0NoYW5nZUV2ZW50KSA9PiB7XG4gICAgY29uc3QgeyBvbkNoYW5nZSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHJhZGlvR3JvdXAgfSA9IHRoaXMuY29udGV4dDtcbiAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgIG9uQ2hhbmdlKGUpO1xuICAgIH1cbiAgICBpZiAocmFkaW9Hcm91cCAmJiByYWRpb0dyb3VwLm9uQ2hhbmdlKSB7XG4gICAgICByYWRpb0dyb3VwLm9uQ2hhbmdlKGUpO1xuICAgIH1cbiAgfTtcblxuICBmb2N1cygpIHtcbiAgICB0aGlzLnJjQ2hlY2tib3guZm9jdXMoKTtcbiAgfVxuXG4gIGJsdXIoKSB7XG4gICAgdGhpcy5yY0NoZWNrYm94LmJsdXIoKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHByb3BzLCBjb250ZXh0IH0gPSB0aGlzO1xuICAgIGNvbnN0IHsgcHJlZml4Q2xzOiBjdXN0b21pemVQcmVmaXhDbHMsIGNsYXNzTmFtZSwgY2hpbGRyZW4sIHN0eWxlLCAuLi5yZXN0UHJvcHMgfSA9IHByb3BzO1xuICAgIGNvbnN0IHByZWZpeENscyA9IGdldFByZWZpeENscygncmFkaW8nLCBjdXN0b21pemVQcmVmaXhDbHMpO1xuICAgIGNvbnN0IHsgcmFkaW9Hcm91cCB9ID0gY29udGV4dDtcbiAgICBjb25zdCByYWRpb1Byb3BzOiBSYWRpb1Byb3BzID0geyAuLi5yZXN0UHJvcHMgfTtcbiAgICBpZiAocmFkaW9Hcm91cCkge1xuICAgICAgcmFkaW9Qcm9wcy5uYW1lID0gcmFkaW9Hcm91cC5uYW1lO1xuICAgICAgcmFkaW9Qcm9wcy5vbkNoYW5nZSA9IHRoaXMub25DaGFuZ2U7XG4gICAgICByYWRpb1Byb3BzLmNoZWNrZWQgPSBwcm9wcy52YWx1ZSA9PT0gcmFkaW9Hcm91cC52YWx1ZTtcbiAgICAgIHJhZGlvUHJvcHMuZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCB8fCByYWRpb0dyb3VwLmRpc2FibGVkO1xuICAgIH1cbiAgICBjb25zdCB3cmFwcGVyQ2xhc3NTdHJpbmcgPSBjbGFzc05hbWVzKGNsYXNzTmFtZSwge1xuICAgICAgW2Ake3ByZWZpeENsc30td3JhcHBlcmBdOiB0cnVlLFxuICAgICAgW2Ake3ByZWZpeENsc30td3JhcHBlci1jaGVja2VkYF06IHJhZGlvUHJvcHMuY2hlY2tlZCxcbiAgICAgIFtgJHtwcmVmaXhDbHN9LXdyYXBwZXItZGlzYWJsZWRgXTogcmFkaW9Qcm9wcy5kaXNhYmxlZCxcbiAgICB9KTtcblxuICAgIHJldHVybiAoXG4gICAgICA8bGFiZWxcbiAgICAgICAgY2xhc3NOYW1lPXt3cmFwcGVyQ2xhc3NTdHJpbmd9XG4gICAgICAgIHN0eWxlPXtzdHlsZX1cbiAgICAgICAgb25Nb3VzZUVudGVyPXtwcm9wcy5vbk1vdXNlRW50ZXJ9XG4gICAgICAgIG9uTW91c2VMZWF2ZT17cHJvcHMub25Nb3VzZUxlYXZlfVxuICAgICAgPlxuICAgICAgICA8UmNDaGVja2JveCB7Li4ucmFkaW9Qcm9wc30gcHJlZml4Q2xzPXtwcmVmaXhDbHN9IHJlZj17dGhpcy5zYXZlQ2hlY2tib3h9IC8+XG4gICAgICAgIHtjaGlsZHJlbiAhPT0gdW5kZWZpbmVkID8gPHNwYW4+e2NoaWxkcmVufTwvc3Bhbj4gOiBudWxsfVxuICAgICAgPC9sYWJlbD5cbiAgICApO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=