import { __decorate } from "tslib";
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { observer } from 'mobx-react';
import { computed, get } from 'mobx';
import { pxToRem } from 'choerodon-ui/lib/_util/UnitConvertor';
import TableContext from './TableContext';
import TableFooterCell from './TableFooterCell';
import { getColumnKey } from './utils';
import { DRAG_KEY } from './TableStore';
let TableFooter = class TableFooter extends Component {
    render() {
        const { prefixCls, lock, dataSet } = this.props;
        const { tableStore: { lockColumnsFootRowsHeight, overflowY, rowHeight }, } = this.context;
        const tds = this.leafColumns.map(column => {
            return (React.createElement(TableFooterCell, { key: getColumnKey(column), prefixCls: prefixCls, dataSet: dataSet, column: column }));
        });
        if (overflowY && lock !== "left" /* left */) {
            tds.push(React.createElement("th", { key: "fixed-column", className: `${prefixCls}-cell` }, "\u00A0"));
        }
        return (React.createElement("tfoot", { className: `${prefixCls}-tfoot` },
            React.createElement("tr", { style: {
                    height: lock && rowHeight === 'auto' ? pxToRem(get(lockColumnsFootRowsHeight, 0)) : undefined,
                } }, tds)));
    }
    get leafColumns() {
        const { tableStore } = this.context;
        const { lock } = this.props;
        const filterDrag = (columnItem) => {
            const { dragColumnAlign } = this.props;
            if (dragColumnAlign) {
                return columnItem.key === DRAG_KEY;
            }
            return true;
        };
        if (lock === 'right') {
            return tableStore.rightLeafColumns.filter(filterDrag).filter(({ hidden }) => !hidden);
        }
        if (lock) {
            return tableStore.leftLeafColumns.filter(filterDrag).filter(({ hidden }) => !hidden);
        }
        return tableStore.leafColumns.filter(({ hidden }) => !hidden);
    }
};
TableFooter.displayName = 'TableFooter';
TableFooter.propTypes = {
    prefixCls: PropTypes.string,
    lock: PropTypes.oneOfType([
        PropTypes.bool,
        PropTypes.oneOf(["right" /* right */, "left" /* left */]),
    ]),
    dragColumnAlign: PropTypes.oneOf(["right" /* right */, "left" /* left */]),
};
TableFooter.contextType = TableContext;
__decorate([
    computed
], TableFooter.prototype, "leafColumns", null);
TableFooter = __decorate([
    observer
], TableFooter);
export default TableFooter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMtcHJvL3RhYmxlL1RhYmxlRm9vdGVyLnRzeCIsIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxLQUFLLEVBQUUsRUFBRSxTQUFTLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDekMsT0FBTyxTQUFTLE1BQU0sWUFBWSxDQUFDO0FBQ25DLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDdEMsT0FBTyxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDckMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBRy9ELE9BQU8sWUFBWSxNQUFNLGdCQUFnQixDQUFDO0FBRzFDLE9BQU8sZUFBZSxNQUFNLG1CQUFtQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDdkMsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGNBQWMsQ0FBQztBQVN0QyxJQUFxQixXQUFXLEdBQWhDLE1BQXFCLFdBQVksU0FBUSxTQUFnQztJQWN2RSxNQUFNO1FBQ0osTUFBTSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUNoRCxNQUFNLEVBQ0osVUFBVSxFQUFFLEVBQUUseUJBQXlCLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxHQUNoRSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDakIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDeEMsT0FBTyxDQUNMLG9CQUFDLGVBQWUsSUFDZCxHQUFHLEVBQUUsWUFBWSxDQUFDLE1BQU0sQ0FBQyxFQUN6QixTQUFTLEVBQUUsU0FBUyxFQUNwQixPQUFPLEVBQUUsT0FBTyxFQUNoQixNQUFNLEVBQUUsTUFBTSxHQUNkLENBQ0gsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxTQUFTLElBQUksSUFBSSxzQkFBb0IsRUFBRTtZQUN6QyxHQUFHLENBQUMsSUFBSSxDQUNOLDRCQUFJLEdBQUcsRUFBQyxjQUFjLEVBQUMsU0FBUyxFQUFFLEdBQUcsU0FBUyxPQUFPLGFBRWhELENBQ04sQ0FBQztTQUNIO1FBQ0QsT0FBTyxDQUNMLCtCQUFPLFNBQVMsRUFBRSxHQUFHLFNBQVMsUUFBUTtZQUNwQyw0QkFDRSxLQUFLLEVBQUU7b0JBQ0wsTUFBTSxFQUNKLElBQUksSUFBSSxTQUFTLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLHlCQUF5QixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVM7aUJBQ3hGLElBRUEsR0FBRyxDQUNELENBQ0MsQ0FDVCxDQUFDO0lBQ0osQ0FBQztJQUdELElBQUksV0FBVztRQUNiLE1BQU0sRUFBRSxVQUFVLEVBQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ3BDLE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQzVCLE1BQU0sVUFBVSxHQUFHLENBQUMsVUFBc0IsRUFBVSxFQUFFO1lBQ3BELE1BQU0sRUFBQyxlQUFlLEVBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFBO1lBQ3BDLElBQUcsZUFBZSxFQUFDO2dCQUNqQixPQUFPLFVBQVUsQ0FBQyxHQUFHLEtBQUssUUFBUSxDQUFBO2FBQ25DO1lBQ0QsT0FBTyxJQUFJLENBQUE7UUFDYixDQUFDLENBQUE7UUFDRCxJQUFJLElBQUksS0FBSyxPQUFPLEVBQUU7WUFDcEIsT0FBTyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkY7UUFDRCxJQUFJLElBQUksRUFBRTtZQUNSLE9BQU8sVUFBVSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN0RjtRQUNELE9BQU8sVUFBVSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2hFLENBQUM7Q0FDRixDQUFBO0FBcEVRLHVCQUFXLEdBQUcsYUFBYSxDQUFDO0FBRTVCLHFCQUFTLEdBQUc7SUFDakIsU0FBUyxFQUFFLFNBQVMsQ0FBQyxNQUFNO0lBQzNCLElBQUksRUFBRSxTQUFTLENBQUMsU0FBUyxDQUFDO1FBQ3hCLFNBQVMsQ0FBQyxJQUFJO1FBQ2QsU0FBUyxDQUFDLEtBQUssQ0FBQyx3Q0FBbUMsQ0FBQztLQUNyRCxDQUFDO0lBQ0YsZUFBZSxFQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsd0NBQTZDLENBQUM7Q0FDL0UsQ0FBQztBQUVLLHVCQUFXLEdBQUcsWUFBWSxDQUFDO0FBdUNsQztJQURDLFFBQVE7OENBa0JSO0FBcEVrQixXQUFXO0lBRC9CLFFBQVE7R0FDWSxXQUFXLENBcUUvQjtlQXJFb0IsV0FBVyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvaHVpaHVhd2svRG9jdW1lbnRzL29wdC9jaG9lcm9kb24tdWkvY29tcG9uZW50cy1wcm8vdGFibGUvVGFibGVGb290ZXIudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgb2JzZXJ2ZXIgfSBmcm9tICdtb2J4LXJlYWN0JztcbmltcG9ydCB7IGNvbXB1dGVkLCBnZXQgfSBmcm9tICdtb2J4JztcbmltcG9ydCB7IHB4VG9SZW0gfSBmcm9tICdjaG9lcm9kb24tdWkvbGliL191dGlsL1VuaXRDb252ZXJ0b3InO1xuaW1wb3J0IHsgQ29sdW1uUHJvcHMgfSBmcm9tICcuL0NvbHVtbic7XG5pbXBvcnQgeyBFbGVtZW50UHJvcHMgfSBmcm9tICcuLi9jb3JlL1ZpZXdDb21wb25lbnQnO1xuaW1wb3J0IFRhYmxlQ29udGV4dCBmcm9tICcuL1RhYmxlQ29udGV4dCc7XG5pbXBvcnQgeyBDb2x1bW5Mb2NrLERyYWdDb2x1bW5BbGlnbiB9IGZyb20gJy4vZW51bSc7XG5pbXBvcnQgRGF0YVNldCBmcm9tICcuLi9kYXRhLXNldC9EYXRhU2V0JztcbmltcG9ydCBUYWJsZUZvb3RlckNlbGwgZnJvbSAnLi9UYWJsZUZvb3RlckNlbGwnO1xuaW1wb3J0IHsgZ2V0Q29sdW1uS2V5IH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQge0RSQUdfS0VZfSBmcm9tICcuL1RhYmxlU3RvcmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRhYmxlRm9vdGVyUHJvcHMgZXh0ZW5kcyBFbGVtZW50UHJvcHMge1xuICBkYXRhU2V0OiBEYXRhU2V0O1xuICBsb2NrPzogQ29sdW1uTG9jayB8IGJvb2xlYW47XG4gIGRyYWdDb2x1bW5BbGlnbj86RHJhZ0NvbHVtbkFsaWduO1xufVxuXG5Ab2JzZXJ2ZXJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRhYmxlRm9vdGVyIGV4dGVuZHMgQ29tcG9uZW50PFRhYmxlRm9vdGVyUHJvcHMsIGFueT4ge1xuICBzdGF0aWMgZGlzcGxheU5hbWUgPSAnVGFibGVGb290ZXInO1xuXG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgcHJlZml4Q2xzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGxvY2s6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgUHJvcFR5cGVzLmJvb2wsXG4gICAgICBQcm9wVHlwZXMub25lT2YoW0NvbHVtbkxvY2sucmlnaHQsIENvbHVtbkxvY2subGVmdF0pLFxuICAgIF0pLFxuICAgIGRyYWdDb2x1bW5BbGlnbjpQcm9wVHlwZXMub25lT2YoW0RyYWdDb2x1bW5BbGlnbi5yaWdodCwgRHJhZ0NvbHVtbkFsaWduLmxlZnRdKSxcbiAgfTtcblxuICBzdGF0aWMgY29udGV4dFR5cGUgPSBUYWJsZUNvbnRleHQ7XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgcHJlZml4Q2xzLCBsb2NrLCBkYXRhU2V0IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHtcbiAgICAgIHRhYmxlU3RvcmU6IHsgbG9ja0NvbHVtbnNGb290Um93c0hlaWdodCwgb3ZlcmZsb3dZLCByb3dIZWlnaHQgfSxcbiAgICB9ID0gdGhpcy5jb250ZXh0O1xuICAgIGNvbnN0IHRkcyA9IHRoaXMubGVhZkNvbHVtbnMubWFwKGNvbHVtbiA9PiB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8VGFibGVGb290ZXJDZWxsXG4gICAgICAgICAga2V5PXtnZXRDb2x1bW5LZXkoY29sdW1uKX1cbiAgICAgICAgICBwcmVmaXhDbHM9e3ByZWZpeENsc31cbiAgICAgICAgICBkYXRhU2V0PXtkYXRhU2V0fVxuICAgICAgICAgIGNvbHVtbj17Y29sdW1ufVxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICB9KTtcbiAgICBpZiAob3ZlcmZsb3dZICYmIGxvY2sgIT09IENvbHVtbkxvY2subGVmdCkge1xuICAgICAgdGRzLnB1c2goXG4gICAgICAgIDx0aCBrZXk9XCJmaXhlZC1jb2x1bW5cIiBjbGFzc05hbWU9e2Ake3ByZWZpeENsc30tY2VsbGB9PlxuICAgICAgICAgICZuYnNwO1xuICAgICAgICA8L3RoPixcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICA8dGZvb3QgY2xhc3NOYW1lPXtgJHtwcmVmaXhDbHN9LXRmb290YH0+XG4gICAgICAgIDx0clxuICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICBoZWlnaHQ6XG4gICAgICAgICAgICAgIGxvY2sgJiYgcm93SGVpZ2h0ID09PSAnYXV0bycgPyBweFRvUmVtKGdldChsb2NrQ29sdW1uc0Zvb3RSb3dzSGVpZ2h0LCAwKSkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIHt0ZHN9XG4gICAgICAgIDwvdHI+XG4gICAgICA8L3Rmb290PlxuICAgICk7XG4gIH1cblxuICBAY29tcHV0ZWRcbiAgZ2V0IGxlYWZDb2x1bW5zKCk6IENvbHVtblByb3BzW10ge1xuICAgIGNvbnN0IHsgdGFibGVTdG9yZSB9ID0gdGhpcy5jb250ZXh0O1xuICAgIGNvbnN0IHsgbG9jayB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBmaWx0ZXJEcmFnID0gKGNvbHVtbkl0ZW06Q29sdW1uUHJvcHMpOmJvb2xlYW4gPT4ge1xuICAgICAgY29uc3Qge2RyYWdDb2x1bW5BbGlnbn0gPSB0aGlzLnByb3BzXG4gICAgICBpZihkcmFnQ29sdW1uQWxpZ24pe1xuICAgICAgICByZXR1cm4gY29sdW1uSXRlbS5rZXkgPT09IERSQUdfS0VZXG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICBpZiAobG9jayA9PT0gJ3JpZ2h0Jykge1xuICAgICAgcmV0dXJuIHRhYmxlU3RvcmUucmlnaHRMZWFmQ29sdW1ucy5maWx0ZXIoZmlsdGVyRHJhZykuZmlsdGVyKCh7IGhpZGRlbiB9KSA9PiAhaGlkZGVuKTtcbiAgICB9XG4gICAgaWYgKGxvY2spIHtcbiAgICAgIHJldHVybiB0YWJsZVN0b3JlLmxlZnRMZWFmQ29sdW1ucy5maWx0ZXIoZmlsdGVyRHJhZykuZmlsdGVyKCh7IGhpZGRlbiB9KSA9PiAhaGlkZGVuKTtcbiAgICB9XG4gICAgcmV0dXJuIHRhYmxlU3RvcmUubGVhZkNvbHVtbnMuZmlsdGVyKCh7IGhpZGRlbiB9KSA9PiAhaGlkZGVuKTtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9