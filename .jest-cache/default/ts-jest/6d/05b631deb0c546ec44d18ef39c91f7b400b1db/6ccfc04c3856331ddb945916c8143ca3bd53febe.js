import { __decorate } from "tslib";
import React from 'react';
import PropTypes from 'prop-types';
import { observer } from 'mobx-react';
import { computed, isArrayLike } from 'mobx';
import omit from 'lodash/omit';
import { Select } from '../select/Select';
import ObserverRadio from '../radio/Radio';
import ObserverCheckBox from '../check-box/CheckBox';
import autobind from '../_util/autobind';
import Option from '../option/Option';
import OptGroup from '../option/OptGroup';
import { $l } from '../locale-context';
const GroupIdGen = (function* (id) {
    while (true) {
        yield `__group-${id++}__`;
    }
})(1);
let SelectBox = class SelectBox extends Select {
    get defaultValidationMessages() {
        const label = this.getProp('label');
        return {
            valueMissing: $l('SelectBox', label ? 'value_missing' : 'value_missing_no_label', {
                label,
            }),
        };
    }
    get name() {
        return this.observableProps.name || GroupIdGen.next().value;
    }
    getOtherProps() {
        return omit(super.getOtherProps(), ['vertical']);
    }
    getClassName() {
        const { prefixCls, props: { vertical }, } = this;
        return super.getClassName({
            [`${prefixCls}-vertical`]: vertical,
        });
    }
    isEmpty() {
        return false;
    }
    renderWrapper() {
        const { options, textField, valueField } = this;
        const { autoFocus, mode, onOption } = this.props;
        const items = options.data.map((record, index) => {
            const optionProps = onOption({ dataSet: options, record });
            return this.renderItem({
                ...optionProps,
                key: index,
                dataSet: null,
                record: null,
                value: record.get(valueField),
                checked: this.isChecked(this.getValue(), record.get(valueField)),
                name: this.name,
                onChange: this.handleItemChange,
                children: record.get(textField),
                autoFocus: autoFocus && index === 0,
                readOnly: this.isReadOnly(),
                disabled: this.isDisabled() || (optionProps && optionProps.disabled),
                mode,
                noValidate: true,
                labelLayout: "none" /* none */,
            });
        });
        const { className } = this.getOtherProps();
        const Element = this.context.formNode ? 'div' : 'form';
        return (React.createElement("span", Object.assign({ key: "wrapper" }, this.getWrapperProps()),
            React.createElement(Element, { className: className }, items),
            this.renderFloatLabel()));
    }
    handleItemChange(value, oldValue) {
        if (this.multiple) {
            const values = this.getValues();
            if (!value) {
                values.splice(values.indexOf(oldValue), 1);
            }
            else {
                values.push(value);
            }
            this.setValue(values);
        }
        else {
            this.setValue(value);
        }
    }
    isChecked(value, checkedValue) {
        if (isArrayLike(value)) {
            return value.indexOf(checkedValue) !== -1;
        }
        return value === checkedValue;
    }
    renderItem(props) {
        if (this.multiple) {
            return React.createElement(ObserverCheckBox, Object.assign({}, props));
        }
        return React.createElement(ObserverRadio, Object.assign({}, props));
    }
};
SelectBox.displayName = 'SelectBox';
SelectBox.propTypes = {
    /**
     * 是否垂直显示
     */
    vertical: PropTypes.bool,
    ...Select.propTypes,
};
SelectBox.defaultProps = {
    ...Select.defaultProps,
    suffixCls: 'select-box',
    vertical: false,
};
SelectBox.Option = Option;
SelectBox.OptGroup = OptGroup;
__decorate([
    computed
], SelectBox.prototype, "defaultValidationMessages", null);
__decorate([
    computed
], SelectBox.prototype, "name", null);
__decorate([
    autobind
], SelectBox.prototype, "handleItemChange", null);
SelectBox = __decorate([
    observer
], SelectBox);
export default SelectBox;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,