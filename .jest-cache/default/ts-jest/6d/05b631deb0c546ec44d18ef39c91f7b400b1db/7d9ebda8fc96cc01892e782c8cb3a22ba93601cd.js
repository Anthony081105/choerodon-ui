import React from 'react';
import classNames from 'classnames';
import { getPrefixCls } from '../configure';
const TimelineItem = props => {
    const { prefixCls: customizePrefixCls, className, color = '', last, children, pending, dot, ...restProps } = props;
    const prefixCls = getPrefixCls('timeline', customizePrefixCls);
    const itemClassName = classNames({
        [`${prefixCls}-item`]: true,
        [`${prefixCls}-item-last`]: last,
        [`${prefixCls}-item-pending`]: pending,
    }, className);
    const dotClassName = classNames({
        [`${prefixCls}-item-head`]: true,
        [`${prefixCls}-item-head-custom`]: dot,
        [`${prefixCls}-item-head-${color}`]: true,
    });
    return (React.createElement("li", Object.assign({}, restProps, { className: itemClassName }),
        React.createElement("div", { className: `${prefixCls}-item-tail` }),
        React.createElement("div", { className: dotClassName, style: { borderColor: /blue|red|green/.test(color) ? undefined : color } }, dot),
        React.createElement("div", { className: `${prefixCls}-item-content` }, children)));
};
TimelineItem.displayName = 'TimelineItem';
TimelineItem.defaultProps = {
    color: 'blue',
    last: false,
    pending: false,
};
export default TimelineItem;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvdGltZWxpbmUvVGltZWxpbmVJdGVtLnRzeCIsIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQXNELE1BQU0sT0FBTyxDQUFDO0FBQzNFLE9BQU8sVUFBVSxNQUFNLFlBQVksQ0FBQztBQUNwQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBWTVDLE1BQU0sWUFBWSxHQUF5QyxLQUFLLENBQUMsRUFBRTtJQUNqRSxNQUFNLEVBQ0osU0FBUyxFQUFFLGtCQUFrQixFQUM3QixTQUFTLEVBQ1QsS0FBSyxHQUFHLEVBQUUsRUFDVixJQUFJLEVBQ0osUUFBUSxFQUNSLE9BQU8sRUFDUCxHQUFHLEVBQ0gsR0FBRyxTQUFTLEVBQ2IsR0FBRyxLQUFLLENBQUM7SUFDVixNQUFNLFNBQVMsR0FBRyxZQUFZLENBQUMsVUFBVSxFQUFFLGtCQUFrQixDQUFDLENBQUM7SUFFL0QsTUFBTSxhQUFhLEdBQUcsVUFBVSxDQUM5QjtRQUNFLENBQUMsR0FBRyxTQUFTLE9BQU8sQ0FBQyxFQUFFLElBQUk7UUFDM0IsQ0FBQyxHQUFHLFNBQVMsWUFBWSxDQUFDLEVBQUUsSUFBSTtRQUNoQyxDQUFDLEdBQUcsU0FBUyxlQUFlLENBQUMsRUFBRSxPQUFPO0tBQ3ZDLEVBQ0QsU0FBUyxDQUNWLENBQUM7SUFFRixNQUFNLFlBQVksR0FBRyxVQUFVLENBQUM7UUFDOUIsQ0FBQyxHQUFHLFNBQVMsWUFBWSxDQUFDLEVBQUUsSUFBSTtRQUNoQyxDQUFDLEdBQUcsU0FBUyxtQkFBbUIsQ0FBQyxFQUFFLEdBQUc7UUFDdEMsQ0FBQyxHQUFHLFNBQVMsY0FBYyxLQUFLLEVBQUUsQ0FBQyxFQUFFLElBQUk7S0FDMUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxDQUNMLDRDQUFRLFNBQVMsSUFBRSxTQUFTLEVBQUUsYUFBYTtRQUN6Qyw2QkFBSyxTQUFTLEVBQUUsR0FBRyxTQUFTLFlBQVksR0FBSTtRQUM1Qyw2QkFDRSxTQUFTLEVBQUUsWUFBWSxFQUN2QixLQUFLLEVBQUUsRUFBRSxXQUFXLEVBQUUsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxJQUV2RSxHQUFHLENBQ0E7UUFDTiw2QkFBSyxTQUFTLEVBQUUsR0FBRyxTQUFTLGVBQWUsSUFBRyxRQUFRLENBQU8sQ0FDMUQsQ0FDTixDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsWUFBWSxDQUFDLFdBQVcsR0FBRyxjQUFjLENBQUM7QUFFMUMsWUFBWSxDQUFDLFlBQVksR0FBRztJQUMxQixLQUFLLEVBQUUsTUFBTTtJQUNiLElBQUksRUFBRSxLQUFLO0lBQ1gsT0FBTyxFQUFFLEtBQUs7Q0FDZixDQUFDO0FBRUYsZUFBZSxZQUFZLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvdGltZWxpbmUvVGltZWxpbmVJdGVtLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgQ1NTUHJvcGVydGllcywgRnVuY3Rpb25Db21wb25lbnQsIFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHsgZ2V0UHJlZml4Q2xzIH0gZnJvbSAnLi4vY29uZmlndXJlJztcblxuZXhwb3J0IGludGVyZmFjZSBUaW1lTGluZUl0ZW1Qcm9wcyB7XG4gIHByZWZpeENscz86IHN0cmluZztcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBjb2xvcj86IHN0cmluZztcbiAgZG90PzogUmVhY3ROb2RlO1xuICBwZW5kaW5nPzogYm9vbGVhbjtcbiAgbGFzdD86IGJvb2xlYW47XG4gIHN0eWxlPzogQ1NTUHJvcGVydGllcztcbn1cblxuY29uc3QgVGltZWxpbmVJdGVtOiBGdW5jdGlvbkNvbXBvbmVudDxUaW1lTGluZUl0ZW1Qcm9wcz4gPSBwcm9wcyA9PiB7XG4gIGNvbnN0IHtcbiAgICBwcmVmaXhDbHM6IGN1c3RvbWl6ZVByZWZpeENscyxcbiAgICBjbGFzc05hbWUsXG4gICAgY29sb3IgPSAnJyxcbiAgICBsYXN0LFxuICAgIGNoaWxkcmVuLFxuICAgIHBlbmRpbmcsXG4gICAgZG90LFxuICAgIC4uLnJlc3RQcm9wc1xuICB9ID0gcHJvcHM7XG4gIGNvbnN0IHByZWZpeENscyA9IGdldFByZWZpeENscygndGltZWxpbmUnLCBjdXN0b21pemVQcmVmaXhDbHMpO1xuXG4gIGNvbnN0IGl0ZW1DbGFzc05hbWUgPSBjbGFzc05hbWVzKFxuICAgIHtcbiAgICAgIFtgJHtwcmVmaXhDbHN9LWl0ZW1gXTogdHJ1ZSxcbiAgICAgIFtgJHtwcmVmaXhDbHN9LWl0ZW0tbGFzdGBdOiBsYXN0LFxuICAgICAgW2Ake3ByZWZpeENsc30taXRlbS1wZW5kaW5nYF06IHBlbmRpbmcsXG4gICAgfSxcbiAgICBjbGFzc05hbWUsXG4gICk7XG5cbiAgY29uc3QgZG90Q2xhc3NOYW1lID0gY2xhc3NOYW1lcyh7XG4gICAgW2Ake3ByZWZpeENsc30taXRlbS1oZWFkYF06IHRydWUsXG4gICAgW2Ake3ByZWZpeENsc30taXRlbS1oZWFkLWN1c3RvbWBdOiBkb3QsXG4gICAgW2Ake3ByZWZpeENsc30taXRlbS1oZWFkLSR7Y29sb3J9YF06IHRydWUsXG4gIH0pO1xuXG4gIHJldHVybiAoXG4gICAgPGxpIHsuLi5yZXN0UHJvcHN9IGNsYXNzTmFtZT17aXRlbUNsYXNzTmFtZX0+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17YCR7cHJlZml4Q2xzfS1pdGVtLXRhaWxgfSAvPlxuICAgICAgPGRpdlxuICAgICAgICBjbGFzc05hbWU9e2RvdENsYXNzTmFtZX1cbiAgICAgICAgc3R5bGU9e3sgYm9yZGVyQ29sb3I6IC9ibHVlfHJlZHxncmVlbi8udGVzdChjb2xvcikgPyB1bmRlZmluZWQgOiBjb2xvciB9fVxuICAgICAgPlxuICAgICAgICB7ZG90fVxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17YCR7cHJlZml4Q2xzfS1pdGVtLWNvbnRlbnRgfT57Y2hpbGRyZW59PC9kaXY+XG4gICAgPC9saT5cbiAgKTtcbn07XG5cblRpbWVsaW5lSXRlbS5kaXNwbGF5TmFtZSA9ICdUaW1lbGluZUl0ZW0nO1xuXG5UaW1lbGluZUl0ZW0uZGVmYXVsdFByb3BzID0ge1xuICBjb2xvcjogJ2JsdWUnLFxuICBsYXN0OiBmYWxzZSxcbiAgcGVuZGluZzogZmFsc2UsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBUaW1lbGluZUl0ZW07XG4iXSwidmVyc2lvbiI6M30=