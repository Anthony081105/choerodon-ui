import React from 'react';
import classNames from 'classnames';
import Button from '../button';
import Icon from '../icon';
import Dropdown from './dropdown';
import { getPrefixCls } from '../configure';
const ButtonGroup = Button.Group;
export default function DropdownButton(props) {
    const { prefixCls: customizePrefixCls, type, disabled, onClick, children, className, overlay, trigger, align, visible, onVisibleChange, placement, getPopupContainer, ...restProps } = props;
    const prefixCls = getPrefixCls('dropdown-button', customizePrefixCls);
    const dropdownProps = {
        align,
        overlay,
        disabled,
        trigger: disabled ? [] : trigger,
        onVisibleChange,
        placement,
        getPopupContainer,
    };
    if ('visible' in props) {
        dropdownProps.visible = visible;
    }
    return (React.createElement(ButtonGroup, Object.assign({}, restProps, { className: classNames(prefixCls, className) }),
        React.createElement(Button, { type: type, disabled: disabled, onClick: onClick }, children),
        React.createElement(Dropdown, Object.assign({}, dropdownProps),
            React.createElement(Button, { type: type },
                React.createElement(Icon, { type: "arrow_drop_down" })))));
}
DropdownButton.displayName = 'DropdownButton';
DropdownButton.defaultProps = {
    placement: 'bottomRight',
    type: 'default',
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvZHJvcGRvd24vZHJvcGRvd24tYnV0dG9uLnRzeCIsIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQTRCLE1BQU0sT0FBTyxDQUFDO0FBQ2pELE9BQU8sVUFBVSxNQUFNLFlBQVksQ0FBQztBQUNwQyxPQUFPLE1BQU0sTUFBTSxXQUFXLENBQUM7QUFFL0IsT0FBTyxJQUFJLE1BQU0sU0FBUyxDQUFDO0FBQzNCLE9BQU8sUUFBMkIsTUFBTSxZQUFZLENBQUM7QUFDckQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUU1QyxNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDO0FBU2pDLE1BQU0sQ0FBQyxPQUFPLFVBQVUsY0FBYyxDQUFDLEtBQTBCO0lBQy9ELE1BQU0sRUFDSixTQUFTLEVBQUUsa0JBQWtCLEVBQzdCLElBQUksRUFDSixRQUFRLEVBQ1IsT0FBTyxFQUNQLFFBQVEsRUFDUixTQUFTLEVBQ1QsT0FBTyxFQUNQLE9BQU8sRUFDUCxLQUFLLEVBQ0wsT0FBTyxFQUNQLGVBQWUsRUFDZixTQUFTLEVBQ1QsaUJBQWlCLEVBQ2pCLEdBQUcsU0FBUyxFQUNiLEdBQUcsS0FBSyxDQUFDO0lBRVYsTUFBTSxTQUFTLEdBQUcsWUFBWSxDQUFDLGlCQUFpQixFQUFFLGtCQUFrQixDQUFDLENBQUM7SUFDdEUsTUFBTSxhQUFhLEdBQUc7UUFDcEIsS0FBSztRQUNMLE9BQU87UUFDUCxRQUFRO1FBQ1IsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPO1FBQ2hDLGVBQWU7UUFDZixTQUFTO1FBQ1QsaUJBQWlCO0tBQ2xCLENBQUM7SUFDRixJQUFJLFNBQVMsSUFBSSxLQUFLLEVBQUU7UUFDckIsYUFBcUIsQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0tBQzFDO0lBRUQsT0FBTyxDQUNMLG9CQUFDLFdBQVcsb0JBQUssU0FBUyxJQUFFLFNBQVMsRUFBRSxVQUFVLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQztRQUNyRSxvQkFBQyxNQUFNLElBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxPQUFPLElBQ3JELFFBQVEsQ0FDRjtRQUNULG9CQUFDLFFBQVEsb0JBQUssYUFBYTtZQUN6QixvQkFBQyxNQUFNLElBQUMsSUFBSSxFQUFFLElBQUk7Z0JBQ2hCLG9CQUFDLElBQUksSUFBQyxJQUFJLEVBQUMsaUJBQWlCLEdBQUcsQ0FDeEIsQ0FDQSxDQUNDLENBQ2YsQ0FBQztBQUNKLENBQUM7QUFFRCxjQUFjLENBQUMsV0FBVyxHQUFHLGdCQUFnQixDQUFDO0FBRTlDLGNBQWMsQ0FBQyxZQUFZLEdBQUc7SUFDNUIsU0FBUyxFQUFFLGFBQWE7SUFDeEIsSUFBSSxFQUFFLFNBQVM7Q0FDaEIsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvaHVpaHVhd2svRG9jdW1lbnRzL29wdC9jaG9lcm9kb24tdWkvY29tcG9uZW50cy9kcm9wZG93bi9kcm9wZG93bi1idXR0b24udHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBNb3VzZUV2ZW50SGFuZGxlciB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICcuLi9idXR0b24nO1xuaW1wb3J0IHsgQnV0dG9uR3JvdXBQcm9wcyB9IGZyb20gJy4uL2J1dHRvbi9CdXR0b25Hcm91cCc7XG5pbXBvcnQgSWNvbiBmcm9tICcuLi9pY29uJztcbmltcG9ydCBEcm9wZG93biwgeyBEcm9wRG93blByb3BzIH0gZnJvbSAnLi9kcm9wZG93bic7XG5pbXBvcnQgeyBnZXRQcmVmaXhDbHMgfSBmcm9tICcuLi9jb25maWd1cmUnO1xuXG5jb25zdCBCdXR0b25Hcm91cCA9IEJ1dHRvbi5Hcm91cDtcblxuZXhwb3J0IGludGVyZmFjZSBEcm9wZG93bkJ1dHRvblByb3BzIGV4dGVuZHMgQnV0dG9uR3JvdXBQcm9wcywgRHJvcERvd25Qcm9wcyB7XG4gIHR5cGU/OiAncHJpbWFyeScgfCAnZ2hvc3QnIHwgJ2Rhc2hlZCc7XG4gIGRpc2FibGVkPzogYm9vbGVhbjtcbiAgb25DbGljaz86IE1vdXNlRXZlbnRIYW5kbGVyPGFueT47XG4gIGNoaWxkcmVuPzogYW55O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBEcm9wZG93bkJ1dHRvbihwcm9wczogRHJvcGRvd25CdXR0b25Qcm9wcykge1xuICBjb25zdCB7XG4gICAgcHJlZml4Q2xzOiBjdXN0b21pemVQcmVmaXhDbHMsXG4gICAgdHlwZSxcbiAgICBkaXNhYmxlZCxcbiAgICBvbkNsaWNrLFxuICAgIGNoaWxkcmVuLFxuICAgIGNsYXNzTmFtZSxcbiAgICBvdmVybGF5LFxuICAgIHRyaWdnZXIsXG4gICAgYWxpZ24sXG4gICAgdmlzaWJsZSxcbiAgICBvblZpc2libGVDaGFuZ2UsXG4gICAgcGxhY2VtZW50LFxuICAgIGdldFBvcHVwQ29udGFpbmVyLFxuICAgIC4uLnJlc3RQcm9wc1xuICB9ID0gcHJvcHM7XG5cbiAgY29uc3QgcHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCdkcm9wZG93bi1idXR0b24nLCBjdXN0b21pemVQcmVmaXhDbHMpO1xuICBjb25zdCBkcm9wZG93blByb3BzID0ge1xuICAgIGFsaWduLFxuICAgIG92ZXJsYXksXG4gICAgZGlzYWJsZWQsXG4gICAgdHJpZ2dlcjogZGlzYWJsZWQgPyBbXSA6IHRyaWdnZXIsXG4gICAgb25WaXNpYmxlQ2hhbmdlLFxuICAgIHBsYWNlbWVudCxcbiAgICBnZXRQb3B1cENvbnRhaW5lcixcbiAgfTtcbiAgaWYgKCd2aXNpYmxlJyBpbiBwcm9wcykge1xuICAgIChkcm9wZG93blByb3BzIGFzIGFueSkudmlzaWJsZSA9IHZpc2libGU7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxCdXR0b25Hcm91cCB7Li4ucmVzdFByb3BzfSBjbGFzc05hbWU9e2NsYXNzTmFtZXMocHJlZml4Q2xzLCBjbGFzc05hbWUpfT5cbiAgICAgIDxCdXR0b24gdHlwZT17dHlwZX0gZGlzYWJsZWQ9e2Rpc2FibGVkfSBvbkNsaWNrPXtvbkNsaWNrfT5cbiAgICAgICAge2NoaWxkcmVufVxuICAgICAgPC9CdXR0b24+XG4gICAgICA8RHJvcGRvd24gey4uLmRyb3Bkb3duUHJvcHN9PlxuICAgICAgICA8QnV0dG9uIHR5cGU9e3R5cGV9PlxuICAgICAgICAgIDxJY29uIHR5cGU9XCJhcnJvd19kcm9wX2Rvd25cIiAvPlxuICAgICAgICA8L0J1dHRvbj5cbiAgICAgIDwvRHJvcGRvd24+XG4gICAgPC9CdXR0b25Hcm91cD5cbiAgKTtcbn1cblxuRHJvcGRvd25CdXR0b24uZGlzcGxheU5hbWUgPSAnRHJvcGRvd25CdXR0b24nO1xuXG5Ecm9wZG93bkJ1dHRvbi5kZWZhdWx0UHJvcHMgPSB7XG4gIHBsYWNlbWVudDogJ2JvdHRvbVJpZ2h0JyxcbiAgdHlwZTogJ2RlZmF1bHQnLFxufTtcbiJdLCJ2ZXJzaW9uIjozfQ==