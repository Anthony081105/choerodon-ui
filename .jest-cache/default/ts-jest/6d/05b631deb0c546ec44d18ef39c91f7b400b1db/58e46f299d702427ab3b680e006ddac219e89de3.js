import React, { Component } from 'react';
import { createPortal, render } from 'react-dom';
import classNames from 'classnames';
import findLast from 'lodash/findLast.js';
import noop from 'lodash/noop';
import measureScrollbar from 'choerodon-ui/lib/_util/measureScrollbar';
import { pxToRem } from 'choerodon-ui/lib/_util/UnitConvertor';
import warning from 'choerodon-ui/lib/_util/warning';
import { getProPrefixCls } from 'choerodon-ui/lib/configure';
import Modal, { destroyFns } from '../modal/Modal';
import Animate from '../animate';
import Mask from './Mask';
import { stopEvent } from '../_util/EventManager';
import { suffixCls } from '../modal/utils';
const KeyGen = (function* (id) {
    while (true) {
        yield `${getProPrefixCls(suffixCls)}-${id}`;
        id += 1;
    }
})(1);
const containerInstanses = [];
function removeInstanse(instanse) {
    const index = containerInstanses.indexOf(instanse);
    if (index > -1) {
        containerInstanses.splice(index, 1);
    }
}
function addInstanse(instanse) {
    removeInstanse(instanse);
    containerInstanses.push(instanse);
}
export function getKey() {
    return KeyGen.next().value;
}
let root;
let defaultBodyStyle;
function getRoot() {
    if (typeof window !== 'undefined') {
        const doc = window.document;
        if (root) {
            if (!root.parentNode) {
                doc.body.appendChild(root);
            }
        }
        else {
            root = doc.createElement('div');
            root.className = `${getProPrefixCls(suffixCls)}-container`;
            doc.body.appendChild(root);
        }
    }
    return root;
}
/**
 * 判断body是否有滚动条
 *
 * @returns {boolean}
 */
function hasScrollBar() {
    const { scrollHeight, clientHeight } = document.body;
    return scrollHeight > clientHeight;
}
function hideBodyScrollBar() {
    const { style } = document.body;
    if (!defaultBodyStyle) {
        defaultBodyStyle = {
            overflow: style.overflow,
            paddingRight: style.paddingRight,
        };
        style.overflow = 'hidden';
        if (hasScrollBar()) {
            style.paddingRight = pxToRem(measureScrollbar()) || '';
        }
    }
}
function showBodyScrollBar() {
    const { style } = document.body;
    if (defaultBodyStyle) {
        const { overflow, paddingRight } = defaultBodyStyle;
        defaultBodyStyle = undefined;
        style.overflow = overflow;
        style.paddingRight = paddingRight;
    }
}
export default class ModalContainer extends Component {
    constructor(props, context) {
        super(props, context);
        this.state = {
            modals: [],
        };
        this.handleAnimationEnd = (modalKey, isEnter) => {
            if (!isEnter) {
                const { modals } = this.state;
                const index = this.findIndex(modalKey);
                if (index !== -1) {
                    const props = modals[index];
                    modals.splice(index, 1);
                    if (!props.destroyOnClose) {
                        modals.unshift(props);
                    }
                    if (props.afterClose) {
                        props.afterClose();
                    }
                    this.setState({ modals });
                }
            }
        };
        this.handleMaskClick = async () => {
            const { modals } = this.state;
            const modal = findLast(modals, ({ hidden }) => !hidden);
            if (modal) {
                const { close = noop, onCancel = noop, maskClosable } = modal;
                if (maskClosable) {
                    const ret = await onCancel();
                    if (ret !== false) {
                        close();
                    }
                }
            }
        };
        this.top();
    }
    top() {
        addInstanse(this);
        return this;
    }
    componentWillUpdate(nextProps) {
        const { location } = nextProps;
        const { location: currentLocation } = this.props;
        if (location && currentLocation && location.pathname !== currentLocation.pathname) {
            this.clear();
        }
        this.top();
    }
    componentWillUnmount() {
        removeInstanse(this);
    }
    findIndex(modalKey) {
        const { modals } = this.state;
        return modals.findIndex(({ key }) => key === modalKey);
    }
    open(props) {
        const { modals } = this.state;
        if (!props.key) {
            props.key = getKey();
            warning(!!props.destroyOnClose, `The modal which opened has no key, please provide a key or set the \`destroyOnClose\` as true.`);
        }
        else {
            const index = this.findIndex(props.key);
            if (index !== -1) {
                modals.splice(index, 1);
            }
        }
        modals.push({ ...props, hidden: false });
        this.setState({ modals });
    }
    close(props) {
        const { modals } = this.state;
        const target = modals.find(({ key }) => key === props.key);
        if (target) {
            Object.assign(target, props, { hidden: true });
            this.setState({ modals });
        }
    }
    update(props) {
        const { modals: originModals } = this.state;
        const modals = [...originModals];
        if (props.key) {
            const index = this.findIndex(props.key);
            if (index !== -1) {
                modals[index] = props;
                this.setState({ modals });
            }
        }
    }
    clear() {
        const { modals } = this.state;
        modals.forEach(modal => this.close({ ...modal, destroyOnClose: true }));
    }
    getOffset(modals, idx) {
        const MARGIN_RIGHT_ARRAY = [];
        const DEFAULT = 150;
        const drawers = modals.filter(modal => modal.drawer && !modal.hidden);
        const indexInDrawers = drawers.findIndex(drawer => drawer.key === modals[idx].key);
        if (indexInDrawers === -1) {
            return 0;
        }
        for (let i = drawers.length - 1; i >= indexInDrawers; i--) {
            if (i === drawers.length - 1) {
                MARGIN_RIGHT_ARRAY.push(0);
            }
            else {
                const CURRENT_WIDTH = this.getModalWidth(drawers[i]);
                const NEXT_WIDTH = this.getModalWidth(drawers[i + 1]);
                const NEXT_MARGIN = MARGIN_RIGHT_ARRAY[drawers.length - i - 2];
                if (CURRENT_WIDTH >= NEXT_MARGIN + NEXT_WIDTH + DEFAULT) {
                    MARGIN_RIGHT_ARRAY.push(0);
                }
                else {
                    MARGIN_RIGHT_ARRAY.push(NEXT_MARGIN + NEXT_WIDTH + DEFAULT - CURRENT_WIDTH);
                }
            }
        }
        return MARGIN_RIGHT_ARRAY[MARGIN_RIGHT_ARRAY.length - 1];
    }
    getModalWidth(modal) {
        return (modal && modal.style && modal.style.width) || 520;
    }
    getComponent() {
        let hidden = true;
        const { modals } = this.state;
        const items = modals.map((props, index) => {
            const thisHidden = props.hidden;
            const { drawerTransitionName = 'slide-right' } = props;
            if (hidden && !thisHidden) {
                hidden = false;
            }
            const newProps = {};
            if (props.drawer) {
                newProps.style = {
                    marginRight: this.getOffset(modals, index),
                    ...props.style,
                };
            }
            if (index === modals.length - 1) {
                newProps.className = classNames(props.className, `${getProPrefixCls(suffixCls)}-active`);
            }
            return (React.createElement(Animate, { key: props.key, component: "div", transitionAppear: true, transitionName: props.drawer ? drawerTransitionName : 'zoom', hiddenProp: "hidden", onEnd: this.handleAnimationEnd },
                React.createElement(Modal, Object.assign({ key: props.key }, props, newProps))));
        });
        const animationProps = {};
        if (typeof window !== 'undefined') {
            if (hidden) {
                animationProps.onEnd = showBodyScrollBar;
            }
            else {
                hideBodyScrollBar();
            }
        }
        const modal = findLast(modals, ({ hidden: modalHidden }) => !modalHidden);
        const { maskStyle, mask, maskClassName } = modal || {};
        return (React.createElement(React.Fragment, null,
            React.createElement(Animate, Object.assign({ component: "", transitionAppear: true, transitionName: "fade", hiddenProp: "hidden" }, animationProps), mask ? (React.createElement(Mask, { style: maskStyle, className: maskClassName, hidden: hidden, onClick: this.handleMaskClick, onMouseDown: stopEvent })) : React.createElement("div", { hidden: hidden })),
            items));
    }
    render() {
        const mount = getRoot();
        if (mount) {
            return createPortal(this.getComponent(), mount);
        }
        return null;
    }
}
ModalContainer.displayName = 'ModalContainer';
export function getContainer(loop) {
    const { length } = containerInstanses;
    if (length) {
        return containerInstanses[length - 1];
    }
    if (loop !== true) {
        render(React.createElement(ModalContainer, null), getRoot());
        return getContainer(true);
    }
}
export function open(props) {
    const container = getContainer();
    async function close(destroy) {
        const { onClose = noop } = props;
        if ((await onClose()) !== false) {
            if (destroy) {
                container.close({ ...props, destroyOnClose: true });
            }
            else {
                container.close(props);
            }
        }
    }
    function update(newProps) {
        container.update({ ...props, ...newProps });
    }
    props = {
        close,
        update,
        ...Modal.defaultProps,
        ...props,
    };
    container.open(props);
    destroyFns.push(close);
    function show(newProps) {
        container.open({ ...props, ...newProps });
    }
    return {
        close,
        open: show,
        update,
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,