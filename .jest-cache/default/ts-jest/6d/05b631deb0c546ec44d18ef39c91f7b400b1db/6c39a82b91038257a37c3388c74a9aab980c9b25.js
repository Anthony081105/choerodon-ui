import { __decorate } from "tslib";
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { observer } from 'mobx-react';
import classNames from 'classnames';
import { computed, get } from 'mobx';
import { Droppable, Draggable, } from 'react-beautiful-dnd';
import { pxToRem } from 'choerodon-ui/lib/_util/UnitConvertor';
import { isFunction } from 'lodash';
import TableHeaderCell from './TableHeaderCell';
import TableContext from './TableContext';
import { getColumnKey } from './utils';
import autobind from '../_util/autobind';
import { instance } from './Table';
import { DRAG_KEY } from './TableStore';
let TableHeader = class TableHeader extends Component {
    constructor() {
        super(...arguments);
        this.columnDeep = 0;
    }
    saveRef(node) {
        this.node = node;
    }
    getHeaderNode() {
        return this.node;
    }
    render() {
        const { prefixCls, lock, dataSet, dragColumnAlign } = this.props;
        const { groupedColumns } = this;
        const { tableStore: { overflowY, columnMaxDeep, columnResizable, dragColumn, props: { columnsDragRender = {} } }, } = this.context;
        const { droppableProps, draggableProps, renderClone } = columnsDragRender;
        const { tableStore } = this.context;
        const rows = this.getTableHeaderRows(groupedColumns);
        const filterDrag = (columnItem) => {
            if (columnItem && columnItem.column && dragColumnAlign) {
                return columnItem.column.key === DRAG_KEY;
            }
            return true;
        };
        tableStore.columnMaxDeep = (rows.length || 0);
        const trs = rows.map((row, rowIndex) => {
            if (row.length) {
                let prevColumn;
                const tds = row.filter(filterDrag).map(({ hidden, column, rowSpan, colSpan, lastLeaf }, index) => {
                    if (!hidden) {
                        return (React.createElement(Draggable, Object.assign({ draggableId: getColumnKey(column).toString(), index: index, key: getColumnKey(column), isDragDisabled: getColumnKey(column) === DRAG_KEY || (!dragColumn || columnMaxDeep > 1) }, draggableProps), (provided, snapshot) => {
                            const props = {
                                key: getColumnKey(column),
                                prefixCls,
                                dataSet,
                                prevColumn,
                                column,
                                resizeColumn: lastLeaf,
                                getHeaderNode: this.getHeaderNode,
                                provided,
                                snapshot,
                            };
                            if (rowSpan > 1) {
                                props.rowSpan = rowSpan;
                            }
                            if (colSpan > 1) {
                                props.colSpan = colSpan;
                            }
                            prevColumn = lastLeaf;
                            return (React.createElement(TableHeaderCell, Object.assign({}, props)));
                        }));
                    }
                    return undefined;
                });
                if (overflowY && lock !== "left" /* left */ && rowIndex === 0) {
                    tds.push(React.createElement("th", { key: "fixed-column", className: `${prefixCls}-cell`, rowSpan: rows.length }, "\u00A0"));
                }
                return (React.createElement(Droppable, Object.assign({ droppableId: "tableHeader", key: row.length > 1 ? `tableHeader${rowIndex}` : "tableHeader", direction: "horizontal", isDropDisabled: (!dragColumn || columnMaxDeep > 1), renderClone: (provided, snapshot, rubric) => {
                        const rowProps = row[rubric.source.index];
                        const { column, rowSpan, colSpan, lastLeaf } = rowProps;
                        const props = {
                            key: getColumnKey(column),
                            prefixCls,
                            dataSet,
                            prevColumn,
                            column,
                            resizeColumn: lastLeaf,
                            getHeaderNode: this.getHeaderNode,
                            provided,
                            snapshot,
                        };
                        if (rowSpan > 1) {
                            props.rowSpan = rowSpan;
                        }
                        if (colSpan > 1) {
                            props.colSpan = colSpan;
                        }
                        if (renderClone && isFunction(renderClone)) {
                            return renderClone(props);
                        }
                        return (React.createElement(TableHeaderCell, Object.assign({}, props)));
                    }, getContainerForClone: () => instance().headtr }, droppableProps), (droppableProvided) => (React.createElement("tr", Object.assign({ key: String(rowIndex), style: {
                        height: lock ? this.getHeaderRowStyle(rows, rowIndex, columnResizable) : undefined,
                    }, ref: (ref) => {
                        if (ref) {
                            this.saveRef(ref);
                            droppableProvided.innerRef(ref);
                        }
                    } }, droppableProvided.droppableProps),
                    tds,
                    droppableProvided.placeholder))));
            }
            return undefined;
        });
        const classString = classNames(`${prefixCls}-thead`, {
            [`${prefixCls}-column-resizable`]: columnResizable,
        });
        return (React.createElement("thead", { ref: this.saveRef, className: classString }, trs));
    }
    getTableHeaderRows(columns, currentRow = 0, rows = []) {
        rows[currentRow] = rows[currentRow] || [];
        columns.forEach(column => {
            const { hidden, rowSpan, colSpan, children } = column;
            if (!hidden) {
                if (rowSpan && rows.length < rowSpan) {
                    while (rows.length < rowSpan) {
                        rows.push([]);
                    }
                }
                if (children) {
                    this.getTableHeaderRows(children.columns, currentRow + rowSpan, rows);
                }
                if (colSpan !== 0) {
                    rows[currentRow].push(column);
                }
            }
        });
        return rows;
    }
    getHeaderRowStyle(rows, rowIndex, columnResizable) {
        const { tableStore: { rowHeight }, } = this.context;
        const height = rowHeight === 'auto' ? this.getRowHeight(rowIndex++) : rowHeight;
        return pxToRem(rows
            .slice(rowIndex)
            .reduce((total, r, index) => r.length
            ? total
            : total +
                (rowHeight === 'auto'
                    ? this.getRowHeight(index + rowIndex)
                    : rowHeight + (columnResizable ? 4 : 3)), height));
    }
    getRowHeight(index) {
        const { tableStore } = this.context;
        return get(tableStore.lockColumnsHeadRowsHeight, index) || 0;
    }
    get groupedColumns() {
        const { tableStore } = this.context;
        const { lock } = this.props;
        switch (lock) {
            case "left" /* left */:
            case true:
                return tableStore.leftGroupedColumns;
            case "right" /* right */:
                return tableStore.rightGroupedColumns;
            default:
                return tableStore.groupedColumns;
        }
    }
};
TableHeader.displayName = 'TableHeader';
TableHeader.propTypes = {
    prefixCls: PropTypes.string,
    lock: PropTypes.oneOfType([
        PropTypes.bool,
        PropTypes.oneOf(["right" /* right */, "left" /* left */]),
    ]),
    dragColumnAlign: PropTypes.oneOf(["right" /* right */, "left" /* left */]),
};
TableHeader.contextType = TableContext;
__decorate([
    autobind
], TableHeader.prototype, "saveRef", null);
__decorate([
    autobind
], TableHeader.prototype, "getHeaderNode", null);
__decorate([
    computed
], TableHeader.prototype, "groupedColumns", null);
TableHeader = __decorate([
    observer
], TableHeader);
export default TableHeader;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,