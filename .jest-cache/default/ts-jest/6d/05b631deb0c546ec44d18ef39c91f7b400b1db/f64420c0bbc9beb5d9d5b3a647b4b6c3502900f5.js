import { __decorate } from "tslib";
import React from 'react';
import classNames from 'classnames';
import autobind from '../_util/autobind';
import Icon from '../icon';
import DaysView, { alwaysValidDate } from './DaysView';
import { stopEvent } from '../_util/EventManager';
export default class YearsView extends DaysView {
    handlePrevYearClick() {
        this.changeSelectedDate(this.getCloneDate().subtract(10, 'y'));
    }
    handleYearSelect() {
        this.changeViewMode("decade" /* decade */);
    }
    handleNextYearClick() {
        this.changeSelectedDate(this.getCloneDate().add(10, 'y'));
    }
    handleKeyDownHome(e) {
        stopEvent(e);
        const date = this.getCloneDate();
        this.changeSelectedDate(date.subtract(date.year() % 10, 'y'));
    }
    handleKeyDownEnd(e) {
        stopEvent(e);
        const date = this.getCloneDate();
        this.changeSelectedDate(date.add(9 - (date.year() % 10), 'y'));
    }
    handleKeyDownLeft(e) {
        stopEvent(e);
        if (e.altKey) {
            this.changeViewMode("decade" /* decade */);
        }
        else {
            this.changeSelectedDate(this.getCloneDate().subtract(1, 'y'));
        }
    }
    handleKeyDownRight(e) {
        stopEvent(e);
        if (e.altKey) {
            if (this.props.mode !== "year" /* year */) {
                this.changeViewMode("month" /* month */);
            }
        }
        else {
            this.changeSelectedDate(this.getCloneDate().add(1, 'y'));
        }
    }
    handleKeyDownUp(e) {
        stopEvent(e);
        this.changeSelectedDate(this.getCloneDate().subtract(3, 'y'));
    }
    handleKeyDownDown(e) {
        stopEvent(e);
        this.changeSelectedDate(this.getCloneDate().add(3, 'y'));
    }
    handleKeyDownPageUp(e) {
        stopEvent(e);
        this.changeSelectedDate(this.getCloneDate().subtract(e.altKey ? 100 : 10, 'y'));
    }
    handleKeyDownPageDown(e) {
        stopEvent(e);
        this.changeSelectedDate(this.getCloneDate().add(e.altKey ? 100 : 10, 'y'));
    }
    renderHeader() {
        const { prefixCls, props: { date }, } = this;
        const year = date.year() % 10;
        const from = date.clone().subtract(year, 'y');
        const to = from.clone().add(9, 'y');
        return (React.createElement("div", { className: `${prefixCls}-header` },
            React.createElement("a", { className: `${prefixCls}-prev-year`, onClick: this.handlePrevYearClick },
                React.createElement(Icon, { type: "first_page" })),
            React.createElement("a", { className: `${prefixCls}-view-select`, onClick: this.handleYearSelect },
                from.year(),
                " - ",
                to.year()),
            React.createElement("a", { className: `${prefixCls}-next-year` },
                React.createElement(Icon, { type: "last_page", onClick: this.handleNextYearClick }))));
    }
    renderPanelHead() {
        return undefined;
    }
    renderPanelBody() {
        const { prefixCls, props: { date, renderer = this.renderCell, isValidDate = alwaysValidDate }, } = this;
        const selected = date.clone();
        const from = date
            .clone()
            .startOf('y')
            .subtract(date.year() % 10, 'y');
        const to = from.clone().add(10, 'y');
        const prevYear = from.clone().subtract(1, 'y');
        const lastYear = to.clone().add(1, 'y');
        const rows = [];
        let cells = [];
        while (prevYear.isBefore(lastYear)) {
            const currentYear = prevYear.clone();
            const isDisabled = !isValidDate(currentYear, selected);
            const className = classNames(`${prefixCls}-cell`, {
                [`${prefixCls}-old`]: currentYear.isBefore(from, 'y'),
                [`${prefixCls}-new`]: currentYear.isSame(to, 'y'),
                [`${prefixCls}-selected`]: prevYear.isSame(selected, 'y'),
                [`${prefixCls}-disabled`]: isDisabled,
            });
            const text = String(prevYear.year());
            const yearProps = {
                key: text,
                className,
                children: this.renderInner(text),
            };
            if (!isDisabled) {
                yearProps.onClick = this.handleCellClick.bind(this, currentYear);
            }
            cells.push(renderer(yearProps, text, currentYear, selected));
            if (cells.length === 3) {
                rows.push(React.createElement("tr", { key: text }, cells));
                cells = [];
            }
            prevYear.add(1, 'y');
        }
        return rows;
    }
    renderFooter() {
        return undefined;
    }
    getPanelClass() {
        return `${this.prefixCls}-year-panel`;
    }
    choose(date) {
        const { mode } = this.props;
        if (mode !== "year" /* year */) {
            this.changeSelectedDate(date);
            this.changeViewMode("month" /* month */);
        }
        else {
            super.choose(date);
        }
    }
}
YearsView.displayName = 'YearsView';
YearsView.type = "year" /* year */;
__decorate([
    autobind
], YearsView.prototype, "handlePrevYearClick", null);
__decorate([
    autobind
], YearsView.prototype, "handleYearSelect", null);
__decorate([
    autobind
], YearsView.prototype, "handleNextYearClick", null);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,