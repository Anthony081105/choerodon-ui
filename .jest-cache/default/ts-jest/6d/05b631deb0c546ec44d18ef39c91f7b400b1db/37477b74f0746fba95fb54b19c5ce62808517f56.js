import React from 'react';
import classnames from 'classnames';
import isObject from 'lodash/isObject';
import { getPrefixCls, getConfig } from '../configure';
import Icon from '../icon';
import NotFound from './noFound';
import ServerError from './serverError';
import Nnauthorized from './unauthorized';
import warning from '../_util/warning';
const renderStatus = (prefixCls, { status, icon, statusRenderer }) => {
    const className = classnames(`${prefixCls}-icon`);
    warning(!(typeof icon === 'string' && icon.length > 2), `\`icon\` is using ReactNode instead of string naming . Please check \`${icon}\` at https://choerodon.github.io/choerodon-ui/zh/cmp/general/icon`);
    // 初始化map
    const iconMap = new Map([
        ['403', React.createElement(Nnauthorized, { key: "403" })],
        ['404', React.createElement(NotFound, { key: "404" })],
        ['500', React.createElement(ServerError, { key: "500" })],
        ['success', React.createElement(Icon, { key: "success", type: "check_circle" })],
        ['error', React.createElement(Icon, { key: "error", type: "error" })],
        ['info', React.createElement(Icon, { key: "info", type: "info" })],
        ['warning', React.createElement(Icon, { key: "warning", type: "warning" })],
    ]);
    // 注入全局的config
    const statusRendererAll = { ...getConfig('resultStatusRenderer'), ...statusRenderer };
    if (isObject(statusRendererAll)) {
        if (Object.keys(statusRendererAll).length > 0) {
            Object.keys(statusRendererAll).forEach((item) => {
                iconMap.set(item, statusRendererAll[item]);
            });
        }
    }
    // @ts-ignore
    if (iconMap.get(`${status}`) && iconMap.get(`${status}`)?.type !== Icon) {
        return (React.createElement("div", { className: `${className} ${prefixCls}-image`, style: icon || statusRenderer ? {} : (`${status}` === '500' ? { width: 400 } : { width: 800 }) }, icon || iconMap.get(`${status}`)));
    }
    return (React.createElement("div", { className: `${className}` }, icon || iconMap.get(`${status}`)));
};
const renderExtra = (prefixCls, { extra }) => extra && React.createElement("div", { className: `${prefixCls}-extra` }, extra);
const Result = (props) => {
    const { prefixCls: customizePrefixCls, className: customizeClassName, subTitle, title, style, children, status, } = props;
    const prefixCls = getPrefixCls('result', customizePrefixCls);
    const className = classnames(prefixCls, `${prefixCls}-${status}`, customizeClassName);
    return (React.createElement("div", { className: className, style: style },
        renderStatus(prefixCls, props),
        React.createElement("div", { className: `${prefixCls}-title` }, title),
        subTitle && React.createElement("div", { className: `${prefixCls}-subtitle` }, subTitle),
        children && React.createElement("div", { className: `${prefixCls}-content` }, children),
        renderExtra(prefixCls, props)));
};
Result.defaultProps = {
    status: 'info',
};
export default Result;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,