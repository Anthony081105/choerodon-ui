import { createElement, Fragment, isValidElement } from 'react';
import format from 'string-template';
import isString from 'lodash/isString';
import isNil from 'lodash/isNil';
import flatMap from 'lodash/flatMap';
export default function formatReactTemplate(template, map) {
    let result = [template];
    Object.keys(map).forEach(key => {
        const node = map[key];
        if (!isNil(node)) {
            result = flatMap(result, text => {
                if (isString(text)) {
                    let stringText = text;
                    if (isValidElement(node)) {
                        const placeholder = `{${key}}`;
                        const { length } = placeholder;
                        const textArr = [];
                        let index = stringText.indexOf(placeholder);
                        while (index > -1) {
                            if (index > 0) {
                                textArr.push(stringText.slice(0, index));
                            }
                            textArr.push(node);
                            stringText = stringText.slice(index + length);
                            index = stringText.indexOf(placeholder);
                        }
                        if (stringText) {
                            textArr.push(stringText);
                        }
                        return textArr;
                    }
                    return format(text, map);
                }
                return text;
            });
        }
    });
    if (result.every(isString)) {
        return result.join('');
    }
    return createElement(Fragment, {}, ...result);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMtcHJvL2Zvcm1hdHRlci9mb3JtYXRSZWFjdFRlbXBsYXRlLnRzeCIsIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxjQUFjLEVBQWEsTUFBTSxPQUFPLENBQUM7QUFDM0UsT0FBTyxNQUFNLE1BQU0saUJBQWlCLENBQUM7QUFDckMsT0FBTyxRQUFRLE1BQU0saUJBQWlCLENBQUM7QUFDdkMsT0FBTyxLQUFLLE1BQU0sY0FBYyxDQUFDO0FBQ2pDLE9BQU8sT0FBTyxNQUFNLGdCQUFnQixDQUFDO0FBRXJDLE1BQU0sQ0FBQyxPQUFPLFVBQVUsbUJBQW1CLENBQ3pDLFFBQWdCLEVBQ2hCLEdBQWlDO0lBRWpDLElBQUksTUFBTSxHQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3JDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQzdCLE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN0QixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2hCLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFO2dCQUM5QixJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRTtvQkFDbEIsSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDO29CQUN0QixJQUFJLGNBQWMsQ0FBQyxJQUFJLENBQUMsRUFBRTt3QkFDeEIsTUFBTSxXQUFXLEdBQUcsSUFBSSxHQUFHLEdBQUcsQ0FBQzt3QkFDL0IsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLFdBQVcsQ0FBQzt3QkFDL0IsTUFBTSxPQUFPLEdBQWdCLEVBQUUsQ0FBQzt3QkFDaEMsSUFBSSxLQUFLLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQzt3QkFDNUMsT0FBTyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEVBQUU7NEJBQ2pCLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRTtnQ0FDYixPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7NkJBQzFDOzRCQUNELE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7NEJBQ25CLFVBQVUsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsQ0FBQzs0QkFDOUMsS0FBSyxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7eUJBQ3pDO3dCQUNELElBQUksVUFBVSxFQUFFOzRCQUNkLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7eUJBQzFCO3dCQUNELE9BQU8sT0FBTyxDQUFDO3FCQUNoQjtvQkFDRCxPQUFPLE1BQU0sQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7aUJBQzFCO2dCQUNELE9BQU8sSUFBSSxDQUFDO1lBQ2QsQ0FBQyxDQUFDLENBQUM7U0FDSjtJQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0gsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1FBQzFCLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUN4QjtJQUNELE9BQU8sYUFBYSxDQUFDLFFBQVEsRUFBRSxFQUFFLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQztBQUNoRCxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9odWlodWF3ay9Eb2N1bWVudHMvb3B0L2Nob2Vyb2Rvbi11aS9jb21wb25lbnRzLXByby9mb3JtYXR0ZXIvZm9ybWF0UmVhY3RUZW1wbGF0ZS50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlRWxlbWVudCwgRnJhZ21lbnQsIGlzVmFsaWRFbGVtZW50LCBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgZm9ybWF0IGZyb20gJ3N0cmluZy10ZW1wbGF0ZSc7XG5pbXBvcnQgaXNTdHJpbmcgZnJvbSAnbG9kYXNoL2lzU3RyaW5nJztcbmltcG9ydCBpc05pbCBmcm9tICdsb2Rhc2gvaXNOaWwnO1xuaW1wb3J0IGZsYXRNYXAgZnJvbSAnbG9kYXNoL2ZsYXRNYXAnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRSZWFjdFRlbXBsYXRlKFxuICB0ZW1wbGF0ZTogc3RyaW5nLFxuICBtYXA6IHsgW2tleTogc3RyaW5nXTogUmVhY3ROb2RlIH0sXG4pOiBSZWFjdE5vZGUge1xuICBsZXQgcmVzdWx0OiBSZWFjdE5vZGVbXSA9IFt0ZW1wbGF0ZV07XG4gIE9iamVjdC5rZXlzKG1hcCkuZm9yRWFjaChrZXkgPT4ge1xuICAgIGNvbnN0IG5vZGUgPSBtYXBba2V5XTtcbiAgICBpZiAoIWlzTmlsKG5vZGUpKSB7XG4gICAgICByZXN1bHQgPSBmbGF0TWFwKHJlc3VsdCwgdGV4dCA9PiB7XG4gICAgICAgIGlmIChpc1N0cmluZyh0ZXh0KSkge1xuICAgICAgICAgIGxldCBzdHJpbmdUZXh0ID0gdGV4dDtcbiAgICAgICAgICBpZiAoaXNWYWxpZEVsZW1lbnQobm9kZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHBsYWNlaG9sZGVyID0gYHske2tleX19YDtcbiAgICAgICAgICAgIGNvbnN0IHsgbGVuZ3RoIH0gPSBwbGFjZWhvbGRlcjtcbiAgICAgICAgICAgIGNvbnN0IHRleHRBcnI6IFJlYWN0Tm9kZVtdID0gW107XG4gICAgICAgICAgICBsZXQgaW5kZXggPSBzdHJpbmdUZXh0LmluZGV4T2YocGxhY2Vob2xkZXIpO1xuICAgICAgICAgICAgd2hpbGUgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgICAgaWYgKGluZGV4ID4gMCkge1xuICAgICAgICAgICAgICAgIHRleHRBcnIucHVzaChzdHJpbmdUZXh0LnNsaWNlKDAsIGluZGV4KSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdGV4dEFyci5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgICBzdHJpbmdUZXh0ID0gc3RyaW5nVGV4dC5zbGljZShpbmRleCArIGxlbmd0aCk7XG4gICAgICAgICAgICAgIGluZGV4ID0gc3RyaW5nVGV4dC5pbmRleE9mKHBsYWNlaG9sZGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdHJpbmdUZXh0KSB7XG4gICAgICAgICAgICAgIHRleHRBcnIucHVzaChzdHJpbmdUZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0ZXh0QXJyO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZm9ybWF0KHRleHQsIG1hcCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuICBpZiAocmVzdWx0LmV2ZXJ5KGlzU3RyaW5nKSkge1xuICAgIHJldHVybiByZXN1bHQuam9pbignJyk7XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoRnJhZ21lbnQsIHt9LCAuLi5yZXN1bHQpO1xufVxuIl0sInZlcnNpb24iOjN9