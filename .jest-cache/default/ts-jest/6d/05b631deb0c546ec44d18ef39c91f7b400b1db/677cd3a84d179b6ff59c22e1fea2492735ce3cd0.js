import { __decorate } from "tslib";
import React from 'react';
import PropTypes from 'prop-types';
import { observer } from 'mobx-react';
import { action, observable, runInAction } from 'mobx';
import { Select } from '../select/Select';
import Option from '../option/Option';
import OptGroup from '../option/OptGroup';
import TransferList from './TransferList';
import TransferOperation from './TransferOperation';
import autobind from '../_util/autobind';
import isSameLike from '../_util/isSameLike';
let Transfer = class Transfer extends Select {
    constructor(props, context) {
        super(props, context);
        runInAction(() => {
            this.sourceSelected = [];
            this.targetSelected = [];
        });
    }
    sourceFilter(record, index, array) {
        const { valueField, props: { optionsFilter }, } = this;
        if (optionsFilter && !optionsFilter(record, index, array)) {
            return false;
        }
        const values = this.getValues();
        if (values.length) {
            return values.every(v => !isSameLike(record.get(valueField), v));
        }
        return true;
    }
    targetFilter(record, index, array) {
        const { valueField, props: { optionsFilter }, } = this;
        if (optionsFilter && !optionsFilter(record, index, array)) {
            return false;
        }
        const values = this.getValues();
        if (values.length) {
            return values.some(v => isSameLike(record.get(valueField), v));
        }
        return false;
    }
    handleMenuClick({ item: { props: { value }, }, }) {
        if (this.multiple) {
            this.selectRecord(value, this.sourceSelected);
        }
        else {
            this.prepareSetValue(this.processRecordToObject(value));
        }
    }
    handleTargetMenuClick({ item: { props: { value }, }, }) {
        if (this.multiple) {
            this.selectRecord(value, this.targetSelected);
        }
        else {
            this.removeValue(value);
        }
    }
    handleMoveToLeft() {
        const { valueField } = this;
        this.removeValues(this.targetSelected.map(record => record.get(valueField)));
        this.targetSelected = [];
    }
    handleMoveToRight() {
        const { valueField } = this;
        this.prepareSetValue(...this.sourceSelected.map(record => record.get(valueField)));
        this.sourceSelected = [];
    }
    handleSourceSelectAllChange(selected) {
        this.sourceSelected = selected;
    }
    handleTargetSelectAllChange(selected) {
        this.targetSelected = selected;
    }
    selectRecord(value, selected) {
        const index = selected.indexOf(value);
        if (index !== -1) {
            selected.splice(index, 1);
        }
        else {
            selected.push(value);
        }
    }
    renderWrapper() {
        const { prefixCls, targetSelected, sourceSelected, multiple, props: { titles = [] }, } = this;
        const disabled = this.isDisabled();
        return (React.createElement("span", { key: "wrapper", className: `${prefixCls}-wrapper` },
            React.createElement(TransferList, Object.assign({}, this.props, { options: this.options, selected: sourceSelected, header: titles[0], onSelectAll: this.handleSourceSelectAllChange, onSelect: this.handleMenuClick, optionsFilter: this.sourceFilter })),
            React.createElement(TransferOperation, { className: `${prefixCls}-operation`, leftActive: !(!targetSelected.length || disabled), rightActive: !(!sourceSelected.length || disabled), moveToLeft: this.handleMoveToLeft, moveToRight: this.handleMoveToRight, multiple: multiple }),
            React.createElement(TransferList, Object.assign({}, this.props, { options: this.options, selected: targetSelected, header: titles[1], onSelectAll: this.handleTargetSelectAllChange, onSelect: this.handleTargetMenuClick, optionsFilter: this.targetFilter }))));
    }
};
Transfer.displayName = 'Transfer';
Transfer.propTypes = {
    ...Select.propTypes,
    titles: PropTypes.arrayOf(PropTypes.node),
};
Transfer.defaultProps = {
    ...Select.defaultProps,
    suffixCls: 'transfer',
    multiple: true,
};
Transfer.Option = Option;
Transfer.OptGroup = OptGroup;
__decorate([
    observable
], Transfer.prototype, "sourceSelected", void 0);
__decorate([
    observable
], Transfer.prototype, "targetSelected", void 0);
__decorate([
    autobind
], Transfer.prototype, "sourceFilter", null);
__decorate([
    autobind
], Transfer.prototype, "targetFilter", null);
__decorate([
    autobind
], Transfer.prototype, "handleMenuClick", null);
__decorate([
    autobind
], Transfer.prototype, "handleTargetMenuClick", null);
__decorate([
    autobind,
    action
], Transfer.prototype, "handleMoveToLeft", null);
__decorate([
    autobind,
    action
], Transfer.prototype, "handleMoveToRight", null);
__decorate([
    autobind,
    action
], Transfer.prototype, "handleSourceSelectAllChange", null);
__decorate([
    autobind,
    action
], Transfer.prototype, "handleTargetSelectAllChange", null);
__decorate([
    action
], Transfer.prototype, "selectRecord", null);
Transfer = __decorate([
    observer
], Transfer);
export default Transfer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,