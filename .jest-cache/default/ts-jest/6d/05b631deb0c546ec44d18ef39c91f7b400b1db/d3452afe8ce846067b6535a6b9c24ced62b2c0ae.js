import cssAnimation from 'css-animation';
import raf from 'raf';
function animate(node, show, done) {
    let height;
    let requestAnimationFrameId;
    return cssAnimation(node, 'c7n-motion-collapse', {
        start() {
            if (!show) {
                node.style.height = `${node.offsetHeight}px`;
                node.style.opacity = '1';
            }
            else {
                height = node.offsetHeight;
                node.style.height = '0px';
                node.style.opacity = '0';
            }
        },
        active() {
            if (requestAnimationFrameId) {
                raf.cancel(requestAnimationFrameId);
            }
            requestAnimationFrameId = raf(() => {
                node.style.height = `${show ? height : 0}px`;
                node.style.opacity = show ? '1' : '0';
            });
        },
        end() {
            if (requestAnimationFrameId) {
                raf.cancel(requestAnimationFrameId);
            }
            node.style.height = '';
            node.style.opacity = '';
            done();
        },
    });
}
const animation = {
    enter(node, done) {
        return animate(node, true, done);
    },
    leave(node, done) {
        return animate(node, false, done);
    },
    appear(node, done) {
        return animate(node, true, done);
    },
};
export default animation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvX3V0aWwvb3BlbkFuaW1hdGlvbi50c3giLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxZQUFZLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sR0FBRyxNQUFNLEtBQUssQ0FBQztBQUV0QixTQUFTLE9BQU8sQ0FBQyxJQUFpQixFQUFFLElBQWEsRUFBRSxJQUFnQjtJQUNqRSxJQUFJLE1BQWMsQ0FBQztJQUNuQixJQUFJLHVCQUErQixDQUFDO0lBQ3BDLE9BQU8sWUFBWSxDQUFDLElBQUksRUFBRSxxQkFBcUIsRUFBRTtRQUMvQyxLQUFLO1lBQ0gsSUFBSSxDQUFDLElBQUksRUFBRTtnQkFDVCxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxZQUFZLElBQUksQ0FBQztnQkFDN0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDO2FBQzFCO2lCQUFNO2dCQUNMLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO2dCQUMzQixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7Z0JBQzFCLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQzthQUMxQjtRQUNILENBQUM7UUFDRCxNQUFNO1lBQ0osSUFBSSx1QkFBdUIsRUFBRTtnQkFDM0IsR0FBRyxDQUFDLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO2FBQ3JDO1lBQ0QsdUJBQXVCLEdBQUcsR0FBRyxDQUFDLEdBQUcsRUFBRTtnQkFDakMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQzdDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7WUFDeEMsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDO1FBQ0QsR0FBRztZQUNELElBQUksdUJBQXVCLEVBQUU7Z0JBQzNCLEdBQUcsQ0FBQyxNQUFNLENBQUMsdUJBQXVCLENBQUMsQ0FBQzthQUNyQztZQUNELElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztZQUN2QixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7WUFDeEIsSUFBSSxFQUFFLENBQUM7UUFDVCxDQUFDO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELE1BQU0sU0FBUyxHQUFHO0lBQ2hCLEtBQUssQ0FBQyxJQUFpQixFQUFFLElBQWdCO1FBQ3ZDLE9BQU8sT0FBTyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUNELEtBQUssQ0FBQyxJQUFpQixFQUFFLElBQWdCO1FBQ3ZDLE9BQU8sT0FBTyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUNELE1BQU0sQ0FBQyxJQUFpQixFQUFFLElBQWdCO1FBQ3hDLE9BQU8sT0FBTyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDbkMsQ0FBQztDQUNGLENBQUM7QUFFRixlQUFlLFNBQVMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvaHVpaHVhd2svRG9jdW1lbnRzL29wdC9jaG9lcm9kb24tdWkvY29tcG9uZW50cy9fdXRpbC9vcGVuQW5pbWF0aW9uLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3NzQW5pbWF0aW9uIGZyb20gJ2Nzcy1hbmltYXRpb24nO1xuaW1wb3J0IHJhZiBmcm9tICdyYWYnO1xuXG5mdW5jdGlvbiBhbmltYXRlKG5vZGU6IEhUTUxFbGVtZW50LCBzaG93OiBib29sZWFuLCBkb25lOiAoKSA9PiB2b2lkKSB7XG4gIGxldCBoZWlnaHQ6IG51bWJlcjtcbiAgbGV0IHJlcXVlc3RBbmltYXRpb25GcmFtZUlkOiBudW1iZXI7XG4gIHJldHVybiBjc3NBbmltYXRpb24obm9kZSwgJ2M3bi1tb3Rpb24tY29sbGFwc2UnLCB7XG4gICAgc3RhcnQoKSB7XG4gICAgICBpZiAoIXNob3cpIHtcbiAgICAgICAgbm9kZS5zdHlsZS5oZWlnaHQgPSBgJHtub2RlLm9mZnNldEhlaWdodH1weGA7XG4gICAgICAgIG5vZGUuc3R5bGUub3BhY2l0eSA9ICcxJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhlaWdodCA9IG5vZGUub2Zmc2V0SGVpZ2h0O1xuICAgICAgICBub2RlLnN0eWxlLmhlaWdodCA9ICcwcHgnO1xuICAgICAgICBub2RlLnN0eWxlLm9wYWNpdHkgPSAnMCc7XG4gICAgICB9XG4gICAgfSxcbiAgICBhY3RpdmUoKSB7XG4gICAgICBpZiAocmVxdWVzdEFuaW1hdGlvbkZyYW1lSWQpIHtcbiAgICAgICAgcmFmLmNhbmNlbChyZXF1ZXN0QW5pbWF0aW9uRnJhbWVJZCk7XG4gICAgICB9XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWVJZCA9IHJhZigoKSA9PiB7XG4gICAgICAgIG5vZGUuc3R5bGUuaGVpZ2h0ID0gYCR7c2hvdyA/IGhlaWdodCA6IDB9cHhgO1xuICAgICAgICBub2RlLnN0eWxlLm9wYWNpdHkgPSBzaG93ID8gJzEnIDogJzAnO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBlbmQoKSB7XG4gICAgICBpZiAocmVxdWVzdEFuaW1hdGlvbkZyYW1lSWQpIHtcbiAgICAgICAgcmFmLmNhbmNlbChyZXF1ZXN0QW5pbWF0aW9uRnJhbWVJZCk7XG4gICAgICB9XG4gICAgICBub2RlLnN0eWxlLmhlaWdodCA9ICcnO1xuICAgICAgbm9kZS5zdHlsZS5vcGFjaXR5ID0gJyc7XG4gICAgICBkb25lKCk7XG4gICAgfSxcbiAgfSk7XG59XG5cbmNvbnN0IGFuaW1hdGlvbiA9IHtcbiAgZW50ZXIobm9kZTogSFRNTEVsZW1lbnQsIGRvbmU6ICgpID0+IHZvaWQpIHtcbiAgICByZXR1cm4gYW5pbWF0ZShub2RlLCB0cnVlLCBkb25lKTtcbiAgfSxcbiAgbGVhdmUobm9kZTogSFRNTEVsZW1lbnQsIGRvbmU6ICgpID0+IHZvaWQpIHtcbiAgICByZXR1cm4gYW5pbWF0ZShub2RlLCBmYWxzZSwgZG9uZSk7XG4gIH0sXG4gIGFwcGVhcihub2RlOiBIVE1MRWxlbWVudCwgZG9uZTogKCkgPT4gdm9pZCkge1xuICAgIHJldHVybiBhbmltYXRlKG5vZGUsIHRydWUsIGRvbmUpO1xuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgYW5pbWF0aW9uO1xuIl0sInZlcnNpb24iOjN9