import React from 'react';
import classNames from 'classnames';
import Icon from '../icon';
import DaysView, { alwaysValidDate } from './DaysView';
import { stopEvent } from '../_util/EventManager';
export default class MonthsView extends DaysView {
    handleKeyDownHome(e) {
        stopEvent(e);
        this.changeSelectedDate(this.getCloneDate().startOf('y'));
    }
    handleKeyDownEnd(e) {
        stopEvent(e);
        this.changeSelectedDate(this.getCloneDate().endOf('y'));
    }
    handleKeyDownLeft(e) {
        stopEvent(e);
        if (e.altKey) {
            this.changeViewMode("year" /* year */);
        }
        else {
            this.changeSelectedDate(this.getCloneDate().subtract(1, 'M'));
        }
    }
    handleKeyDownRight(e) {
        stopEvent(e);
        if (e.altKey) {
            const { mode } = this.props;
            if (mode !== "month" /* month */) {
                this.changeViewMode(mode);
            }
        }
        else {
            this.changeSelectedDate(this.getCloneDate().add(1, 'M'));
        }
    }
    handleKeyDownUp(e) {
        stopEvent(e);
        this.changeSelectedDate(this.getCloneDate().subtract(3, 'M'));
    }
    handleKeyDownDown(e) {
        stopEvent(e);
        this.changeSelectedDate(this.getCloneDate().add(3, 'M'));
    }
    handleKeyDownPageUp(e) {
        stopEvent(e);
        this.changeSelectedDate(this.getCloneDate().subtract(e.altKey ? 10 : 1, 'y'));
    }
    handleKeyDownPageDown(e) {
        stopEvent(e);
        this.changeSelectedDate(this.getCloneDate().add(e.altKey ? 10 : 1, 'y'));
    }
    renderHeader() {
        const { prefixCls, props: { date }, } = this;
        return (React.createElement("div", { className: `${prefixCls}-header` },
            React.createElement("a", { className: `${prefixCls}-prev-year`, onClick: this.handlePrevYearClick },
                React.createElement(Icon, { type: "first_page" })),
            React.createElement("a", { className: `${prefixCls}-view-select`, onClick: this.handleYearSelect }, date.year()),
            React.createElement("a", { className: `${prefixCls}-next-year` },
                React.createElement(Icon, { type: "last_page", onClick: this.handleNextYearClick }))));
    }
    renderPanelHead() {
        return undefined;
    }
    renderPanelBody() {
        const { prefixCls, props: { date, renderer = this.renderCell, isValidDate = alwaysValidDate }, } = this;
        const selected = date.clone();
        const prevMonth = date.clone().startOf('y');
        const lastMonth = prevMonth.clone().add(12, 'M');
        const rows = [];
        let cells = [];
        while (prevMonth.isBefore(lastMonth)) {
            const currentMonth = prevMonth.clone();
            const isDisabled = !isValidDate(currentMonth, selected);
            const className = classNames(`${prefixCls}-cell`, {
                [`${prefixCls}-selected`]: prevMonth.isSame(selected, 'M'),
                [`${prefixCls}-disabled`]: isDisabled,
            });
            const text = prevMonth.localeData().monthsShort(prevMonth);
            const monthProps = {
                key: text,
                className,
                children: this.renderInner(text),
            };
            if (!isDisabled) {
                monthProps.onClick = this.handleCellClick.bind(this, currentMonth);
            }
            cells.push(renderer(monthProps, text, currentMonth, selected));
            if (cells.length === 3) {
                rows.push(React.createElement("tr", { key: text }, cells));
                cells = [];
            }
            prevMonth.add(1, 'M');
        }
        return rows;
    }
    renderFooter() {
        return undefined;
    }
    getPanelClass() {
        return `${this.prefixCls}-month-panel`;
    }
    choose(date) {
        const { mode } = this.props;
        if (mode !== "month" /* month */) {
            this.changeSelectedDate(date);
            this.changeViewMode(mode);
        }
        else {
            super.choose(date);
        }
    }
}
MonthsView.displayName = 'MonthsView';
MonthsView.type = "month" /* month */;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMtcHJvL2RhdGUtcGlja2VyL01vbnRoc1ZpZXcudHN4IiwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBb0IsTUFBTSxPQUFPLENBQUM7QUFFekMsT0FBTyxVQUFVLE1BQU0sWUFBWSxDQUFDO0FBQ3BDLE9BQU8sSUFBSSxNQUFNLFNBQVMsQ0FBQztBQUMzQixPQUFPLFFBQVEsRUFBRSxFQUFFLGVBQWUsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUd2RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFbEQsTUFBTSxDQUFDLE9BQU8sT0FBTyxVQUFXLFNBQVEsUUFBUTtJQUs5QyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ2pCLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNiLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDNUQsQ0FBQztJQUVELGdCQUFnQixDQUFDLENBQUM7UUFDaEIsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2IsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBRUQsaUJBQWlCLENBQUMsQ0FBQztRQUNqQixTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDYixJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUU7WUFDWixJQUFJLENBQUMsY0FBYyxtQkFBZSxDQUFDO1NBQ3BDO2FBQU07WUFDTCxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUMvRDtJQUNILENBQUM7SUFFRCxrQkFBa0IsQ0FBQyxDQUFDO1FBQ2xCLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNiLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRTtZQUNaLE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQzVCLElBQUksSUFBSSx3QkFBbUIsRUFBRTtnQkFDM0IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUMzQjtTQUNGO2FBQU07WUFDTCxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUMxRDtJQUNILENBQUM7SUFFRCxlQUFlLENBQUMsQ0FBQztRQUNmLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNiLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFFRCxpQkFBaUIsQ0FBQyxDQUFDO1FBQ2pCLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNiLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFRCxtQkFBbUIsQ0FBQyxDQUFDO1FBQ25CLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNiLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDaEYsQ0FBQztJQUVELHFCQUFxQixDQUFDLENBQUM7UUFDckIsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2IsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMzRSxDQUFDO0lBRUQsWUFBWTtRQUNWLE1BQU0sRUFDSixTQUFTLEVBQ1QsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLEdBQ2hCLEdBQUcsSUFBSSxDQUFDO1FBQ1QsT0FBTyxDQUNMLDZCQUFLLFNBQVMsRUFBRSxHQUFHLFNBQVMsU0FBUztZQUNuQywyQkFBRyxTQUFTLEVBQUUsR0FBRyxTQUFTLFlBQVksRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLG1CQUFtQjtnQkFDdkUsb0JBQUMsSUFBSSxJQUFDLElBQUksRUFBQyxZQUFZLEdBQUcsQ0FDeEI7WUFDSiwyQkFBRyxTQUFTLEVBQUUsR0FBRyxTQUFTLGNBQWMsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixJQUNyRSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQ1Y7WUFDSiwyQkFBRyxTQUFTLEVBQUUsR0FBRyxTQUFTLFlBQVk7Z0JBQ3BDLG9CQUFDLElBQUksSUFBQyxJQUFJLEVBQUMsV0FBVyxFQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsbUJBQW1CLEdBQUksQ0FDMUQsQ0FDQSxDQUNQLENBQUM7SUFDSixDQUFDO0lBRUQsZUFBZTtRQUNiLE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7SUFFRCxlQUFlO1FBQ2IsTUFBTSxFQUNKLFNBQVMsRUFDVCxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsV0FBVyxHQUFHLGVBQWUsRUFBRSxHQUMzRSxHQUFHLElBQUksQ0FBQztRQUNULE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUM5QixNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzVDLE1BQU0sU0FBUyxHQUFHLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ2pELE1BQU0sSUFBSSxHQUFnQixFQUFFLENBQUM7UUFDN0IsSUFBSSxLQUFLLEdBQWdCLEVBQUUsQ0FBQztRQUU1QixPQUFPLFNBQVMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDcEMsTUFBTSxZQUFZLEdBQUcsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ3ZDLE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQztZQUN4RCxNQUFNLFNBQVMsR0FBRyxVQUFVLENBQUMsR0FBRyxTQUFTLE9BQU8sRUFBRTtnQkFDaEQsQ0FBQyxHQUFHLFNBQVMsV0FBVyxDQUFDLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDO2dCQUMxRCxDQUFDLEdBQUcsU0FBUyxXQUFXLENBQUMsRUFBRSxVQUFVO2FBQ3RDLENBQUMsQ0FBQztZQUNILE1BQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7WUFFM0QsTUFBTSxVQUFVLEdBQVE7Z0JBQ3RCLEdBQUcsRUFBRSxJQUFJO2dCQUNULFNBQVM7Z0JBQ1QsUUFBUSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDO2FBQ2pDLENBQUM7WUFDRixJQUFJLENBQUMsVUFBVSxFQUFFO2dCQUNmLFVBQVUsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFlBQVksQ0FBQyxDQUFDO2FBQ3BFO1lBRUQsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUUvRCxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO2dCQUN0QixJQUFJLENBQUMsSUFBSSxDQUFDLDRCQUFJLEdBQUcsRUFBRSxJQUFJLElBQUcsS0FBSyxDQUFNLENBQUMsQ0FBQztnQkFDdkMsS0FBSyxHQUFHLEVBQUUsQ0FBQzthQUNaO1lBRUQsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7U0FDdkI7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxZQUFZO1FBQ1YsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztJQUVELGFBQWE7UUFDWCxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsY0FBYyxDQUFDO0lBQ3pDLENBQUM7SUFFRCxNQUFNLENBQUMsSUFBWTtRQUNqQixNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUM1QixJQUFJLElBQUksd0JBQW1CLEVBQUU7WUFDM0IsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzlCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDM0I7YUFBTTtZQUNMLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDcEI7SUFDSCxDQUFDOztBQXpJTSxzQkFBVyxHQUFHLFlBQVksQ0FBQztBQUUzQixlQUFJLHVCQUFtQiIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvaHVpaHVhd2svRG9jdW1lbnRzL29wdC9jaG9lcm9kb24tdWkvY29tcG9uZW50cy1wcm8vZGF0ZS1waWNrZXIvTW9udGhzVmlldy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IE1vbWVudCB9IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBJY29uIGZyb20gJy4uL2ljb24nO1xuaW1wb3J0IERheXNWaWV3LCB7IGFsd2F5c1ZhbGlkRGF0ZSB9IGZyb20gJy4vRGF5c1ZpZXcnO1xuaW1wb3J0IHsgVmlld01vZGUgfSBmcm9tICcuL2VudW0nO1xuaW1wb3J0IHsgRmllbGRUeXBlIH0gZnJvbSAnLi4vZGF0YS1zZXQvZW51bSc7XG5pbXBvcnQgeyBzdG9wRXZlbnQgfSBmcm9tICcuLi9fdXRpbC9FdmVudE1hbmFnZXInO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb250aHNWaWV3IGV4dGVuZHMgRGF5c1ZpZXcge1xuICBzdGF0aWMgZGlzcGxheU5hbWUgPSAnTW9udGhzVmlldyc7XG5cbiAgc3RhdGljIHR5cGUgPSBGaWVsZFR5cGUubW9udGg7XG5cbiAgaGFuZGxlS2V5RG93bkhvbWUoZSkge1xuICAgIHN0b3BFdmVudChlKTtcbiAgICB0aGlzLmNoYW5nZVNlbGVjdGVkRGF0ZSh0aGlzLmdldENsb25lRGF0ZSgpLnN0YXJ0T2YoJ3knKSk7XG4gIH1cblxuICBoYW5kbGVLZXlEb3duRW5kKGUpIHtcbiAgICBzdG9wRXZlbnQoZSk7XG4gICAgdGhpcy5jaGFuZ2VTZWxlY3RlZERhdGUodGhpcy5nZXRDbG9uZURhdGUoKS5lbmRPZigneScpKTtcbiAgfVxuXG4gIGhhbmRsZUtleURvd25MZWZ0KGUpIHtcbiAgICBzdG9wRXZlbnQoZSk7XG4gICAgaWYgKGUuYWx0S2V5KSB7XG4gICAgICB0aGlzLmNoYW5nZVZpZXdNb2RlKFZpZXdNb2RlLnllYXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNoYW5nZVNlbGVjdGVkRGF0ZSh0aGlzLmdldENsb25lRGF0ZSgpLnN1YnRyYWN0KDEsICdNJykpO1xuICAgIH1cbiAgfVxuXG4gIGhhbmRsZUtleURvd25SaWdodChlKSB7XG4gICAgc3RvcEV2ZW50KGUpO1xuICAgIGlmIChlLmFsdEtleSkge1xuICAgICAgY29uc3QgeyBtb2RlIH0gPSB0aGlzLnByb3BzO1xuICAgICAgaWYgKG1vZGUgIT09IFZpZXdNb2RlLm1vbnRoKSB7XG4gICAgICAgIHRoaXMuY2hhbmdlVmlld01vZGUobW9kZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY2hhbmdlU2VsZWN0ZWREYXRlKHRoaXMuZ2V0Q2xvbmVEYXRlKCkuYWRkKDEsICdNJykpO1xuICAgIH1cbiAgfVxuXG4gIGhhbmRsZUtleURvd25VcChlKSB7XG4gICAgc3RvcEV2ZW50KGUpO1xuICAgIHRoaXMuY2hhbmdlU2VsZWN0ZWREYXRlKHRoaXMuZ2V0Q2xvbmVEYXRlKCkuc3VidHJhY3QoMywgJ00nKSk7XG4gIH1cblxuICBoYW5kbGVLZXlEb3duRG93bihlKSB7XG4gICAgc3RvcEV2ZW50KGUpO1xuICAgIHRoaXMuY2hhbmdlU2VsZWN0ZWREYXRlKHRoaXMuZ2V0Q2xvbmVEYXRlKCkuYWRkKDMsICdNJykpO1xuICB9XG5cbiAgaGFuZGxlS2V5RG93blBhZ2VVcChlKSB7XG4gICAgc3RvcEV2ZW50KGUpO1xuICAgIHRoaXMuY2hhbmdlU2VsZWN0ZWREYXRlKHRoaXMuZ2V0Q2xvbmVEYXRlKCkuc3VidHJhY3QoZS5hbHRLZXkgPyAxMCA6IDEsICd5JykpO1xuICB9XG5cbiAgaGFuZGxlS2V5RG93blBhZ2VEb3duKGUpIHtcbiAgICBzdG9wRXZlbnQoZSk7XG4gICAgdGhpcy5jaGFuZ2VTZWxlY3RlZERhdGUodGhpcy5nZXRDbG9uZURhdGUoKS5hZGQoZS5hbHRLZXkgPyAxMCA6IDEsICd5JykpO1xuICB9XG5cbiAgcmVuZGVySGVhZGVyKCk6IFJlYWN0Tm9kZSB7XG4gICAgY29uc3Qge1xuICAgICAgcHJlZml4Q2xzLFxuICAgICAgcHJvcHM6IHsgZGF0ZSB9LFxuICAgIH0gPSB0aGlzO1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17YCR7cHJlZml4Q2xzfS1oZWFkZXJgfT5cbiAgICAgICAgPGEgY2xhc3NOYW1lPXtgJHtwcmVmaXhDbHN9LXByZXYteWVhcmB9IG9uQ2xpY2s9e3RoaXMuaGFuZGxlUHJldlllYXJDbGlja30+XG4gICAgICAgICAgPEljb24gdHlwZT1cImZpcnN0X3BhZ2VcIiAvPlxuICAgICAgICA8L2E+XG4gICAgICAgIDxhIGNsYXNzTmFtZT17YCR7cHJlZml4Q2xzfS12aWV3LXNlbGVjdGB9IG9uQ2xpY2s9e3RoaXMuaGFuZGxlWWVhclNlbGVjdH0+XG4gICAgICAgICAge2RhdGUueWVhcigpfVxuICAgICAgICA8L2E+XG4gICAgICAgIDxhIGNsYXNzTmFtZT17YCR7cHJlZml4Q2xzfS1uZXh0LXllYXJgfT5cbiAgICAgICAgICA8SWNvbiB0eXBlPVwibGFzdF9wYWdlXCIgb25DbGljaz17dGhpcy5oYW5kbGVOZXh0WWVhckNsaWNrfSAvPlxuICAgICAgICA8L2E+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyUGFuZWxIZWFkKCk6IFJlYWN0Tm9kZSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIHJlbmRlclBhbmVsQm9keSgpOiBSZWFjdE5vZGUge1xuICAgIGNvbnN0IHtcbiAgICAgIHByZWZpeENscyxcbiAgICAgIHByb3BzOiB7IGRhdGUsIHJlbmRlcmVyID0gdGhpcy5yZW5kZXJDZWxsLCBpc1ZhbGlkRGF0ZSA9IGFsd2F5c1ZhbGlkRGF0ZSB9LFxuICAgIH0gPSB0aGlzO1xuICAgIGNvbnN0IHNlbGVjdGVkID0gZGF0ZS5jbG9uZSgpO1xuICAgIGNvbnN0IHByZXZNb250aCA9IGRhdGUuY2xvbmUoKS5zdGFydE9mKCd5Jyk7XG4gICAgY29uc3QgbGFzdE1vbnRoID0gcHJldk1vbnRoLmNsb25lKCkuYWRkKDEyLCAnTScpO1xuICAgIGNvbnN0IHJvd3M6IFJlYWN0Tm9kZVtdID0gW107XG4gICAgbGV0IGNlbGxzOiBSZWFjdE5vZGVbXSA9IFtdO1xuXG4gICAgd2hpbGUgKHByZXZNb250aC5pc0JlZm9yZShsYXN0TW9udGgpKSB7XG4gICAgICBjb25zdCBjdXJyZW50TW9udGggPSBwcmV2TW9udGguY2xvbmUoKTtcbiAgICAgIGNvbnN0IGlzRGlzYWJsZWQgPSAhaXNWYWxpZERhdGUoY3VycmVudE1vbnRoLCBzZWxlY3RlZCk7XG4gICAgICBjb25zdCBjbGFzc05hbWUgPSBjbGFzc05hbWVzKGAke3ByZWZpeENsc30tY2VsbGAsIHtcbiAgICAgICAgW2Ake3ByZWZpeENsc30tc2VsZWN0ZWRgXTogcHJldk1vbnRoLmlzU2FtZShzZWxlY3RlZCwgJ00nKSxcbiAgICAgICAgW2Ake3ByZWZpeENsc30tZGlzYWJsZWRgXTogaXNEaXNhYmxlZCxcbiAgICAgIH0pO1xuICAgICAgY29uc3QgdGV4dCA9IHByZXZNb250aC5sb2NhbGVEYXRhKCkubW9udGhzU2hvcnQocHJldk1vbnRoKTtcblxuICAgICAgY29uc3QgbW9udGhQcm9wczogYW55ID0ge1xuICAgICAgICBrZXk6IHRleHQsXG4gICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICAgY2hpbGRyZW46IHRoaXMucmVuZGVySW5uZXIodGV4dCksXG4gICAgICB9O1xuICAgICAgaWYgKCFpc0Rpc2FibGVkKSB7XG4gICAgICAgIG1vbnRoUHJvcHMub25DbGljayA9IHRoaXMuaGFuZGxlQ2VsbENsaWNrLmJpbmQodGhpcywgY3VycmVudE1vbnRoKTtcbiAgICAgIH1cblxuICAgICAgY2VsbHMucHVzaChyZW5kZXJlcihtb250aFByb3BzLCB0ZXh0LCBjdXJyZW50TW9udGgsIHNlbGVjdGVkKSk7XG5cbiAgICAgIGlmIChjZWxscy5sZW5ndGggPT09IDMpIHtcbiAgICAgICAgcm93cy5wdXNoKDx0ciBrZXk9e3RleHR9PntjZWxsc308L3RyPik7XG4gICAgICAgIGNlbGxzID0gW107XG4gICAgICB9XG5cbiAgICAgIHByZXZNb250aC5hZGQoMSwgJ00nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcm93cztcbiAgfVxuXG4gIHJlbmRlckZvb3RlcigpOiBSZWFjdE5vZGUge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBnZXRQYW5lbENsYXNzKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGAke3RoaXMucHJlZml4Q2xzfS1tb250aC1wYW5lbGA7XG4gIH1cblxuICBjaG9vc2UoZGF0ZTogTW9tZW50KSB7XG4gICAgY29uc3QgeyBtb2RlIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmIChtb2RlICE9PSBWaWV3TW9kZS5tb250aCkge1xuICAgICAgdGhpcy5jaGFuZ2VTZWxlY3RlZERhdGUoZGF0ZSk7XG4gICAgICB0aGlzLmNoYW5nZVZpZXdNb2RlKG1vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdXBlci5jaG9vc2UoZGF0ZSk7XG4gICAgfVxuICB9XG59XG4iXSwidmVyc2lvbiI6M30=