import React, { createContext, useCallback, useContext, useEffect, useMemo, useRef, } from 'react';
import noop from 'lodash/noop';
import ModalContainer from '../modal-container/ModalContainer';
import Modal from '../modal/Modal';
const ModalContext = createContext({ open: noop });
const ModalProvider = (props) => {
    const { location, children } = props;
    const ref = useRef(null);
    const prepareToOpen = useMemo(() => [], []);
    const open = useCallback((modalProps) => {
        const container = ref.current;
        if (container) {
            const close = async (destroy) => {
                const { onClose = noop } = modalProps;
                if ((await onClose()) !== false) {
                    if (destroy) {
                        container.close({ ...modalProps, destroyOnClose: true });
                    }
                    else {
                        container.close(modalProps);
                    }
                }
            };
            const show = () => {
                container.top().open(modalProps);
            };
            const update = newProps => {
                container.top().update({ ...modalProps, ...newProps });
            };
            modalProps = {
                close,
                update,
                ...Modal.defaultProps,
                ...modalProps,
            };
            container.top().open(modalProps);
            return {
                close,
                open: show,
                update,
            };
        }
        prepareToOpen.push(modalProps);
    }, []);
    useEffect(() => {
        if (ref.current) {
            prepareToOpen.forEach(prepare => open(prepare));
        }
    }, [ref, open]);
    const context = { open };
    return (React.createElement(ModalContext.Provider, { value: context },
        React.createElement(ModalContainer, { ref: ref, location: location }),
        children));
};
const useModal = () => {
    return useContext(ModalContext);
};
const injectModal = Target => {
    const Hoc = props => {
        const modal = useModal();
        return React.createElement(Target, Object.assign({}, props, { Modal: modal }));
    };
    Hoc.displayName = `${Target.displayName || 'Anonymous'}-with-inject-modal`;
    return Hoc;
};
ModalProvider.displayName = 'ModalProvider';
ModalProvider.useModal = useModal;
ModalProvider.injectModal = injectModal;
export default ModalProvider;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMtcHJvL21vZGFsLXByb3ZpZGVyL01vZGFsUHJvdmlkZXIudHN4IiwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxFQUFFLEVBQ1osYUFBYSxFQUViLFdBQVcsRUFDWCxVQUFVLEVBQ1YsU0FBUyxFQUNULE9BQU8sRUFDUCxNQUFNLEdBQ1AsTUFBTSxPQUFPLENBQUM7QUFDZixPQUFPLElBQUksTUFBTSxhQUFhLENBQUM7QUFDL0IsT0FBTyxjQUF1QyxNQUFNLG1DQUFtQyxDQUFDO0FBQ3hGLE9BQU8sS0FBcUIsTUFBTSxnQkFBZ0IsQ0FBQztBQU1uRCxNQUFNLFlBQVksR0FBRyxhQUFhLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUVuRCxNQUFNLGFBQWEsR0FBRyxDQUFDLEtBQXlCLEVBQUUsRUFBRTtJQUNsRCxNQUFNLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxHQUFHLEtBQUssQ0FBQztJQUNyQyxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQWlCLElBQUksQ0FBQyxDQUFDO0lBQ3pDLE1BQU0sYUFBYSxHQUFHLE9BQU8sQ0FDM0IsR0FBRyxFQUFFLENBQUMsRUFBbUMsRUFDekMsRUFBRSxDQUNILENBQUM7SUFFRixNQUFNLElBQUksR0FBRyxXQUFXLENBQUMsQ0FBQyxVQUFxQyxFQUFFLEVBQUU7UUFDakUsTUFBTSxTQUFTLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQztRQUM5QixJQUFJLFNBQVMsRUFBRTtZQUNiLE1BQU0sS0FBSyxHQUFHLEtBQUssRUFBRSxPQUFpQixFQUFFLEVBQUU7Z0JBQ3hDLE1BQU0sRUFBRSxPQUFPLEdBQUcsSUFBSSxFQUFFLEdBQUcsVUFBVSxDQUFDO2dCQUN0QyxJQUFJLENBQUMsTUFBTSxPQUFPLEVBQUUsQ0FBQyxLQUFLLEtBQUssRUFBRTtvQkFDL0IsSUFBSSxPQUFPLEVBQUU7d0JBQ1gsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsVUFBVSxFQUFFLGNBQWMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO3FCQUMxRDt5QkFBTTt3QkFDTCxTQUFTLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO3FCQUM3QjtpQkFDRjtZQUNILENBQUMsQ0FBQztZQUVGLE1BQU0sSUFBSSxHQUFHLEdBQUcsRUFBRTtnQkFDaEIsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNuQyxDQUFDLENBQUM7WUFFRixNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsRUFBRTtnQkFDeEIsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEdBQUcsVUFBVSxFQUFFLEdBQUcsUUFBUSxFQUFFLENBQUMsQ0FBQztZQUN6RCxDQUFDLENBQUM7WUFFRixVQUFVLEdBQUc7Z0JBQ1gsS0FBSztnQkFDTCxNQUFNO2dCQUNOLEdBQUcsS0FBSyxDQUFDLFlBQVk7Z0JBQ3JCLEdBQUcsVUFBVTthQUNkLENBQUM7WUFDRixTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBRWpDLE9BQU87Z0JBQ0wsS0FBSztnQkFDTCxJQUFJLEVBQUUsSUFBSTtnQkFDVixNQUFNO2FBQ1AsQ0FBQztTQUNIO1FBQ0QsYUFBYSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNqQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFFUCxTQUFTLENBQUMsR0FBRyxFQUFFO1FBQ2IsSUFBSSxHQUFHLENBQUMsT0FBTyxFQUFFO1lBQ2YsYUFBYSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1NBQ2pEO0lBQ0gsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7SUFFaEIsTUFBTSxPQUFPLEdBQUcsRUFBRSxJQUFJLEVBQUUsQ0FBQztJQUV6QixPQUFPLENBQ0wsb0JBQUMsWUFBWSxDQUFDLFFBQVEsSUFBQyxLQUFLLEVBQUUsT0FBTztRQUNuQyxvQkFBQyxjQUFjLElBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsUUFBUSxHQUFJO1FBQy9DLFFBQVEsQ0FDYSxDQUN6QixDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsTUFBTSxRQUFRLEdBQUcsR0FBRyxFQUFFO0lBQ3BCLE9BQU8sVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ2xDLENBQUMsQ0FBQztBQUVGLE1BQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxFQUFFO0lBQzNCLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxFQUFFO1FBQ2xCLE1BQU0sS0FBSyxHQUFHLFFBQVEsRUFBRSxDQUFDO1FBQ3pCLE9BQU8sb0JBQUMsTUFBTSxvQkFBSyxLQUFLLElBQUUsS0FBSyxFQUFFLEtBQUssSUFBSSxDQUFDO0lBQzdDLENBQUMsQ0FBQztJQUVGLEdBQUcsQ0FBQyxXQUFXLEdBQUcsR0FBRyxNQUFNLENBQUMsV0FBVyxJQUFJLFdBQVcsb0JBQW9CLENBQUM7SUFFM0UsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDLENBQUM7QUFFRixhQUFhLENBQUMsV0FBVyxHQUFHLGVBQWUsQ0FBQztBQUU1QyxhQUFhLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztBQUVsQyxhQUFhLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztBQUV4QyxlQUFlLGFBQWEsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvaHVpaHVhd2svRG9jdW1lbnRzL29wdC9jaG9lcm9kb24tdWkvY29tcG9uZW50cy1wcm8vbW9kYWwtcHJvdmlkZXIvTW9kYWxQcm92aWRlci50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7XG4gIGNyZWF0ZUNvbnRleHQsXG4gIFJlYWN0Tm9kZSxcbiAgdXNlQ2FsbGJhY2ssXG4gIHVzZUNvbnRleHQsXG4gIHVzZUVmZmVjdCxcbiAgdXNlTWVtbyxcbiAgdXNlUmVmLFxufSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgbm9vcCBmcm9tICdsb2Rhc2gvbm9vcCc7XG5pbXBvcnQgTW9kYWxDb250YWluZXIsIHsgTW9kYWxDb250YWluZXJQcm9wcyB9IGZyb20gJy4uL21vZGFsLWNvbnRhaW5lci9Nb2RhbENvbnRhaW5lcic7XG5pbXBvcnQgTW9kYWwsIHsgTW9kYWxQcm9wcyB9IGZyb20gJy4uL21vZGFsL01vZGFsJztcblxuZXhwb3J0IGludGVyZmFjZSBNb2RhbFByb3ZpZGVyUHJvcHMgZXh0ZW5kcyBNb2RhbENvbnRhaW5lclByb3BzIHtcbiAgY2hpbGRyZW4/OiBSZWFjdE5vZGU7XG59XG5cbmNvbnN0IE1vZGFsQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQoeyBvcGVuOiBub29wIH0pO1xuXG5jb25zdCBNb2RhbFByb3ZpZGVyID0gKHByb3BzOiBNb2RhbFByb3ZpZGVyUHJvcHMpID0+IHtcbiAgY29uc3QgeyBsb2NhdGlvbiwgY2hpbGRyZW4gfSA9IHByb3BzO1xuICBjb25zdCByZWYgPSB1c2VSZWY8TW9kYWxDb250YWluZXI+KG51bGwpO1xuICBjb25zdCBwcmVwYXJlVG9PcGVuID0gdXNlTWVtbzwoTW9kYWxQcm9wcyAmIHsgY2hpbGRyZW4gfSlbXT4oXG4gICAgKCkgPT4gW10gYXMgKE1vZGFsUHJvcHMgJiB7IGNoaWxkcmVuIH0pW10sXG4gICAgW10sXG4gICk7XG5cbiAgY29uc3Qgb3BlbiA9IHVzZUNhbGxiYWNrKChtb2RhbFByb3BzOiBNb2RhbFByb3BzICYgeyBjaGlsZHJlbiB9KSA9PiB7XG4gICAgY29uc3QgY29udGFpbmVyID0gcmVmLmN1cnJlbnQ7XG4gICAgaWYgKGNvbnRhaW5lcikge1xuICAgICAgY29uc3QgY2xvc2UgPSBhc3luYyAoZGVzdHJveT86IGJvb2xlYW4pID0+IHtcbiAgICAgICAgY29uc3QgeyBvbkNsb3NlID0gbm9vcCB9ID0gbW9kYWxQcm9wcztcbiAgICAgICAgaWYgKChhd2FpdCBvbkNsb3NlKCkpICE9PSBmYWxzZSkge1xuICAgICAgICAgIGlmIChkZXN0cm95KSB7XG4gICAgICAgICAgICBjb250YWluZXIuY2xvc2UoeyAuLi5tb2RhbFByb3BzLCBkZXN0cm95T25DbG9zZTogdHJ1ZSB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29udGFpbmVyLmNsb3NlKG1vZGFsUHJvcHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgY29uc3Qgc2hvdyA9ICgpID0+IHtcbiAgICAgICAgY29udGFpbmVyLnRvcCgpLm9wZW4obW9kYWxQcm9wcyk7XG4gICAgICB9O1xuXG4gICAgICBjb25zdCB1cGRhdGUgPSBuZXdQcm9wcyA9PiB7XG4gICAgICAgIGNvbnRhaW5lci50b3AoKS51cGRhdGUoeyAuLi5tb2RhbFByb3BzLCAuLi5uZXdQcm9wcyB9KTtcbiAgICAgIH07XG5cbiAgICAgIG1vZGFsUHJvcHMgPSB7XG4gICAgICAgIGNsb3NlLFxuICAgICAgICB1cGRhdGUsXG4gICAgICAgIC4uLk1vZGFsLmRlZmF1bHRQcm9wcyxcbiAgICAgICAgLi4ubW9kYWxQcm9wcyxcbiAgICAgIH07XG4gICAgICBjb250YWluZXIudG9wKCkub3Blbihtb2RhbFByb3BzKTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY2xvc2UsXG4gICAgICAgIG9wZW46IHNob3csXG4gICAgICAgIHVwZGF0ZSxcbiAgICAgIH07XG4gICAgfVxuICAgIHByZXBhcmVUb09wZW4ucHVzaChtb2RhbFByb3BzKTtcbiAgfSwgW10pO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHJlZi5jdXJyZW50KSB7XG4gICAgICBwcmVwYXJlVG9PcGVuLmZvckVhY2gocHJlcGFyZSA9PiBvcGVuKHByZXBhcmUpKTtcbiAgICB9XG4gIH0sIFtyZWYsIG9wZW5dKTtcblxuICBjb25zdCBjb250ZXh0ID0geyBvcGVuIH07XG5cbiAgcmV0dXJuIChcbiAgICA8TW9kYWxDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtjb250ZXh0fT5cbiAgICAgIDxNb2RhbENvbnRhaW5lciByZWY9e3JlZn0gbG9jYXRpb249e2xvY2F0aW9ufSAvPlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvTW9kYWxDb250ZXh0LlByb3ZpZGVyPlxuICApO1xufTtcblxuY29uc3QgdXNlTW9kYWwgPSAoKSA9PiB7XG4gIHJldHVybiB1c2VDb250ZXh0KE1vZGFsQ29udGV4dCk7XG59O1xuXG5jb25zdCBpbmplY3RNb2RhbCA9IFRhcmdldCA9PiB7XG4gIGNvbnN0IEhvYyA9IHByb3BzID0+IHtcbiAgICBjb25zdCBtb2RhbCA9IHVzZU1vZGFsKCk7XG4gICAgcmV0dXJuIDxUYXJnZXQgey4uLnByb3BzfSBNb2RhbD17bW9kYWx9IC8+O1xuICB9O1xuXG4gIEhvYy5kaXNwbGF5TmFtZSA9IGAke1RhcmdldC5kaXNwbGF5TmFtZSB8fCAnQW5vbnltb3VzJ30td2l0aC1pbmplY3QtbW9kYWxgO1xuXG4gIHJldHVybiBIb2M7XG59O1xuXG5Nb2RhbFByb3ZpZGVyLmRpc3BsYXlOYW1lID0gJ01vZGFsUHJvdmlkZXInO1xuXG5Nb2RhbFByb3ZpZGVyLnVzZU1vZGFsID0gdXNlTW9kYWw7XG5cbk1vZGFsUHJvdmlkZXIuaW5qZWN0TW9kYWwgPSBpbmplY3RNb2RhbDtcblxuZXhwb3J0IGRlZmF1bHQgTW9kYWxQcm92aWRlcjtcbiJdLCJ2ZXJzaW9uIjozfQ==