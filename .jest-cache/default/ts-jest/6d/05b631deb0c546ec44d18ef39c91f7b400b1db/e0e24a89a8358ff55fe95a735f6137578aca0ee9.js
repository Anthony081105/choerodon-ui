import { __decorate } from "tslib";
import React, { Component } from 'react';
import { action, observable } from 'mobx';
import { observer } from 'mobx-react';
import Menu, { Item } from 'choerodon-ui/lib/rc-components/menu/index';
import Button from '../../button/Button';
import Dropdown from '../../dropdown/Dropdown';
import TableContext from '../TableContext';
import { getColumnKey, getHeader } from '../utils';
import { stopEvent, stopPropagation } from '../../_util/EventManager';
import autobind from '../../_util/autobind';
function handleMenuClick({ domEvent }) {
    domEvent.preventDefault();
}
let ColumnFilter = class ColumnFilter extends Component {
    constructor(props, context) {
        super(props, context);
        this.setDropDownHidden(true);
    }
    saveMenu(node) {
        this.menu = node;
    }
    handleHiddenChange(hidden) {
        this.setDropDownHidden(hidden);
    }
    handleKeyDown(e) {
        if (this.menu && this.menu.onKeyDown(e)) {
            stopEvent(e);
        }
    }
    setDropDownHidden(hidden) {
        this.hidden = hidden;
    }
    render() {
        const { prefixCls: rootPrefixCls } = this.props;
        const prefixCls = `${rootPrefixCls}-columns-chooser`;
        return (React.createElement("div", { className: prefixCls, onFocus: stopPropagation, onMouseDown: stopPropagation, tabIndex: -1 },
            React.createElement(Dropdown, { placement: "bottomRight" /* bottomRight */, overlay: this.getMenu(prefixCls), hidden: this.hidden, onHiddenChange: this.handleHiddenChange },
                React.createElement(Button, { funcType: "flat" /* flat */, icon: "view_column", size: "small" /* small */, onKeyDown: this.handleKeyDown }))));
    }
    handleMenuSelect({ item: { props: { value }, }, }) {
        value.hidden = false;
    }
    handleMenuUnSelect({ item: { props: { value }, }, }) {
        value.hidden = true;
    }
    getMenu(prefixCls) {
        const { tableStore: { leafColumns, dataSet }, } = this.context;
        const selectedKeys = [];
        const columns = [];
        leafColumns.forEach(column => {
            if (column.hideable) {
                const header = getHeader(column, dataSet);
                if (header) {
                    const key = getColumnKey(column);
                    if (!column.hidden) {
                        selectedKeys.push(key);
                    }
                    columns.push([column, header, key]);
                }
            }
        });
        return (React.createElement(Menu, { ref: this.saveMenu, multiple: true, defaultActiveFirst: true, prefixCls: `${prefixCls}-dropdown-menu`, selectedKeys: selectedKeys, onSelect: this.handleMenuSelect, onDeselect: this.handleMenuUnSelect, onClick: handleMenuClick }, this.getOptions(columns)));
    }
    getOptions(columns) {
        return columns.map(([column, header, key]) => (React.createElement(Item, { key: key, value: column },
            React.createElement("span", null, header))));
    }
};
ColumnFilter.displayName = 'ColumnFilter';
ColumnFilter.contextType = TableContext;
__decorate([
    observable
], ColumnFilter.prototype, "hidden", void 0);
__decorate([
    autobind
], ColumnFilter.prototype, "saveMenu", null);
__decorate([
    autobind
], ColumnFilter.prototype, "handleHiddenChange", null);
__decorate([
    autobind
], ColumnFilter.prototype, "handleKeyDown", null);
__decorate([
    action
], ColumnFilter.prototype, "setDropDownHidden", null);
__decorate([
    action
], ColumnFilter.prototype, "handleMenuSelect", null);
__decorate([
    action
], ColumnFilter.prototype, "handleMenuUnSelect", null);
ColumnFilter = __decorate([
    observer
], ColumnFilter);
export default ColumnFilter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,