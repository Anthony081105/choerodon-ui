import Cache from '../_util/Cache';
import { buildURLWithAxiosConfig } from './utils';
export default function throttleAdapterEnhancer(adapter, options = {}) {
    const { threshold = 1000, cache = new Cache({ max: 10 }) } = options;
    const recordCacheWithRequest = (index, config) => {
        const responsePromise = (async () => {
            try {
                const response = await adapter(config);
                cache.set(index, {
                    timestamp: Date.now(),
                    value: Promise.resolve(response),
                });
                return response;
            }
            catch (reason) {
                cache.del(index);
                throw reason;
            }
        })();
        cache.set(index, {
            timestamp: Date.now(),
            value: responsePromise,
        });
        return responsePromise;
    };
    return config => {
        const index = buildURLWithAxiosConfig(config);
        const now = Date.now();
        const cachedRecord = cache.get(index) || { timestamp: now };
        if (now - cachedRecord.timestamp <= threshold) {
            const responsePromise = cachedRecord.value;
            if (responsePromise) {
                if (process.env.LOGGER_LEVEL === 'info') {
                    // eslint-disable-next-line no-console
                    console.info(`request cached by throttle adapter: ${index}`);
                }
                return responsePromise;
            }
        }
        return recordCacheWithRequest(index, config);
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMtcHJvL2F4aW9zL3Rocm90dGxlQWRhcHRlckVuaGFuY2VyLnRzeCIsIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEtBQUssTUFBTSxnQkFBZ0IsQ0FBQztBQUVuQyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFZbEQsTUFBTSxDQUFDLE9BQU8sVUFBVSx1QkFBdUIsQ0FDN0MsT0FBcUIsRUFDckIsVUFBbUIsRUFBRTtJQUVyQixNQUFNLEVBQUUsU0FBUyxHQUFHLElBQUksRUFBRSxLQUFLLEdBQUcsSUFBSSxLQUFLLENBQXdCLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxPQUFPLENBQUM7SUFFNUYsTUFBTSxzQkFBc0IsR0FBRyxDQUFDLEtBQWEsRUFBRSxNQUEwQixFQUFFLEVBQUU7UUFDM0UsTUFBTSxlQUFlLEdBQUcsQ0FBQyxLQUFLLElBQUksRUFBRTtZQUNsQyxJQUFJO2dCQUNGLE1BQU0sUUFBUSxHQUFHLE1BQU0sT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUN2QyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRTtvQkFDZixTQUFTLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRTtvQkFDckIsS0FBSyxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDO2lCQUNqQyxDQUFDLENBQUM7Z0JBQ0gsT0FBTyxRQUFRLENBQUM7YUFDakI7WUFBQyxPQUFPLE1BQU0sRUFBRTtnQkFDZixLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUNqQixNQUFNLE1BQU0sQ0FBQzthQUNkO1FBQ0gsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUVMLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFO1lBQ2YsU0FBUyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDckIsS0FBSyxFQUFFLGVBQWU7U0FDdkIsQ0FBQyxDQUFDO1FBRUgsT0FBTyxlQUFlLENBQUM7SUFDekIsQ0FBQyxDQUFDO0lBRUYsT0FBTyxNQUFNLENBQUMsRUFBRTtRQUNkLE1BQU0sS0FBSyxHQUFHLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzlDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN2QixNQUFNLFlBQVksR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQzVELElBQUksR0FBRyxHQUFHLFlBQVksQ0FBQyxTQUFTLElBQUksU0FBUyxFQUFFO1lBQzdDLE1BQU0sZUFBZSxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUM7WUFDM0MsSUFBSSxlQUFlLEVBQUU7Z0JBQ25CLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEtBQUssTUFBTSxFQUFFO29CQUN2QyxzQ0FBc0M7b0JBQ3RDLE9BQU8sQ0FBQyxJQUFJLENBQUMsdUNBQXVDLEtBQUssRUFBRSxDQUFDLENBQUM7aUJBQzlEO2dCQUNELE9BQU8sZUFBZSxDQUFDO2FBQ3hCO1NBQ0Y7UUFFRCxPQUFPLHNCQUFzQixDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMvQyxDQUFDLENBQUM7QUFDSixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9odWlodWF3ay9Eb2N1bWVudHMvb3B0L2Nob2Vyb2Rvbi11aS9jb21wb25lbnRzLXByby9heGlvcy90aHJvdHRsZUFkYXB0ZXJFbmhhbmNlci50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXhpb3NBZGFwdGVyLCBBeGlvc1Byb21pc2UsIEF4aW9zUmVxdWVzdENvbmZpZyB9IGZyb20gJ2F4aW9zJztcbmltcG9ydCBDYWNoZSBmcm9tICcuLi9fdXRpbC9DYWNoZSc7XG5pbXBvcnQgeyBJQ2FjaGVMaWtlIH0gZnJvbSAnLi9jYWNoZUFkYXB0ZXJFbmhhbmNlcic7XG5pbXBvcnQgeyBidWlsZFVSTFdpdGhBeGlvc0NvbmZpZyB9IGZyb20gJy4vdXRpbHMnO1xuXG5leHBvcnQgdHlwZSBSZWNvcmRlZENhY2hlID0ge1xuICB0aW1lc3RhbXA6IG51bWJlcjtcbiAgdmFsdWU/OiBBeGlvc1Byb21pc2U7XG59O1xuXG5leHBvcnQgdHlwZSBPcHRpb25zID0ge1xuICB0aHJlc2hvbGQ/OiBudW1iZXI7XG4gIGNhY2hlPzogSUNhY2hlTGlrZTxSZWNvcmRlZENhY2hlPjtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRocm90dGxlQWRhcHRlckVuaGFuY2VyKFxuICBhZGFwdGVyOiBBeGlvc0FkYXB0ZXIsXG4gIG9wdGlvbnM6IE9wdGlvbnMgPSB7fSxcbik6IEF4aW9zQWRhcHRlciB7XG4gIGNvbnN0IHsgdGhyZXNob2xkID0gMTAwMCwgY2FjaGUgPSBuZXcgQ2FjaGU8c3RyaW5nLCBSZWNvcmRlZENhY2hlPih7IG1heDogMTAgfSkgfSA9IG9wdGlvbnM7XG5cbiAgY29uc3QgcmVjb3JkQ2FjaGVXaXRoUmVxdWVzdCA9IChpbmRleDogc3RyaW5nLCBjb25maWc6IEF4aW9zUmVxdWVzdENvbmZpZykgPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlUHJvbWlzZSA9IChhc3luYyAoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFkYXB0ZXIoY29uZmlnKTtcbiAgICAgICAgY2FjaGUuc2V0KGluZGV4LCB7XG4gICAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxuICAgICAgICAgIHZhbHVlOiBQcm9taXNlLnJlc29sdmUocmVzcG9uc2UpLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgfSBjYXRjaCAocmVhc29uKSB7XG4gICAgICAgIGNhY2hlLmRlbChpbmRleCk7XG4gICAgICAgIHRocm93IHJlYXNvbjtcbiAgICAgIH1cbiAgICB9KSgpO1xuXG4gICAgY2FjaGUuc2V0KGluZGV4LCB7XG4gICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICB2YWx1ZTogcmVzcG9uc2VQcm9taXNlLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlUHJvbWlzZTtcbiAgfTtcblxuICByZXR1cm4gY29uZmlnID0+IHtcbiAgICBjb25zdCBpbmRleCA9IGJ1aWxkVVJMV2l0aEF4aW9zQ29uZmlnKGNvbmZpZyk7XG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICBjb25zdCBjYWNoZWRSZWNvcmQgPSBjYWNoZS5nZXQoaW5kZXgpIHx8IHsgdGltZXN0YW1wOiBub3cgfTtcbiAgICBpZiAobm93IC0gY2FjaGVkUmVjb3JkLnRpbWVzdGFtcCA8PSB0aHJlc2hvbGQpIHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlUHJvbWlzZSA9IGNhY2hlZFJlY29yZC52YWx1ZTtcbiAgICAgIGlmIChyZXNwb25zZVByb21pc2UpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52LkxPR0dFUl9MRVZFTCA9PT0gJ2luZm8nKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICBjb25zb2xlLmluZm8oYHJlcXVlc3QgY2FjaGVkIGJ5IHRocm90dGxlIGFkYXB0ZXI6ICR7aW5kZXh9YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlUHJvbWlzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVjb3JkQ2FjaGVXaXRoUmVxdWVzdChpbmRleCwgY29uZmlnKTtcbiAgfTtcbn1cbiJdLCJ2ZXJzaW9uIjozfQ==