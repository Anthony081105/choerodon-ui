import React, { Children, Component, isValidElement } from 'react';
import PropTypes from 'prop-types';
import { getProPrefixCls } from 'choerodon-ui/lib/configure';
import Trigger from '../trigger/Trigger';
import getPlacements from './placements';
const splitObject = (obj, keys) => {
    const picked = {};
    const ommitted = { ...obj };
    keys.forEach(key => {
        if (obj && key in obj) {
            picked[key] = obj[key];
            delete ommitted[key];
        }
    });
    return { picked, ommitted };
};
/**
 * Fix the tooltip won't hide when child element is button
 * @param element ReactElement
 */
function getDisabledCompatobleChildren(element) {
    const elementType = element.type;
    if ((elementType.__Pro_BUTTON === true ||
        elementType.__Pro_SWITCH === true ||
        elementType.__Pro_CHECKBOX === true ||
        element.type.__ANT_BUTTON ||
        element.type === 'button') &&
        element.props.disabled) {
        const { picked, ommitted } = splitObject(element.props.style, [
            'position',
            'left',
            'right',
            'top',
            'bottom',
            'float',
            'display',
            'zIndex',
        ]);
        const spanStyle = {
            display: 'inline-block',
            ...picked,
            cursor: 'not-allowed',
            width: element.props.block ? '100%' : null,
        };
        const buttonStyle = {
            ...ommitted,
            pointerEvents: 'none',
        };
        const child = React.cloneElement(element, {
            style: buttonStyle,
            className: null,
        });
        return (React.createElement("span", { style: spanStyle, className: element.props.classNames }, child));
    }
    return element;
}
export default class Tooltip extends Component {
    get prefixCls() {
        const { suffixCls, prefixCls } = this.props;
        return getProPrefixCls(suffixCls, prefixCls);
    }
    get popupContent() {
        const { title } = this.props;
        if (!title) {
            return null;
        }
        const { prefixCls, props: { overlay, theme }, } = this;
        let content = '';
        if (typeof overlay === 'function') {
            content = overlay();
        }
        else if (overlay) {
            content = overlay;
        }
        else {
            content = title || '';
        }
        const arrowCls = `${prefixCls}-popup-arrow`;
        const contentCls = `${prefixCls}-popup-inner`;
        return (React.createElement("div", null,
            React.createElement("div", { className: `${arrowCls} ${arrowCls}-${theme}`, key: "arrow" }),
            React.createElement("div", { className: `${contentCls} ${contentCls}-${theme}`, key: "content" }, content)));
    }
    get placements() {
        const { builtinPlacements, arrowPointAtCenter, autoAdjustOverflow } = this.props;
        return (builtinPlacements ||
            getPlacements({
                arrowPointAtCenter,
                verticalArrowShift: 8,
                autoAdjustOverflow,
            }));
    }
    render() {
        const { prefixCls, popupContent, props: { children, placement, onHiddenChange, trigger, defaultHidden, hidden, ...restProps }, } = this;
        const child = Children.map(children, node => {
            node = getDisabledCompatobleChildren(isValidElement(node) ? node : React.createElement("span", { key: `text-${node}` }, node));
            return node;
        });
        const extraProps = { ...restProps };
        if ('hidden' in this.props) {
            extraProps.popupHidden = hidden;
        }
        return (React.createElement(Trigger, Object.assign({ prefixCls: prefixCls, action: trigger, builtinPlacements: this.placements, popupPlacement: placement, popupContent: popupContent, onPopupHiddenChange: onHiddenChange, defaultPopupHidden: defaultHidden }, extraProps), child));
    }
}
Tooltip.displayName = 'Tooltip';
Tooltip.propTypes = {
    title: PropTypes.any,
    arrowPointAtCenter: PropTypes.bool,
    autoAdjustOverflow: PropTypes.bool,
    defaultHidden: PropTypes.bool,
    mouseEnterDelay: PropTypes.number,
    mouseLeaveDelay: PropTypes.number,
    placement: PropTypes.oneOf([
        'top',
        'topLeft',
        'topRight',
        'bottom',
        'bottomLeft',
        'bottomRight',
        'left',
        'leftTop',
        'leftBottom',
        'right',
        'rightTop',
        'rightBottom',
    ]),
    trigger: PropTypes.arrayOf(PropTypes.oneOf(["click" /* click */, "hover" /* hover */, "contextMenu" /* contextMenu */, "focus" /* focus */])),
    hidden: PropTypes.bool,
    onHiddenChange: PropTypes.func,
    suffixCls: PropTypes.string,
    transitionName: PropTypes.string,
    theme: PropTypes.oneOf(['light', 'dark']),
};
Tooltip.defaultProps = {
    suffixCls: 'tooltip',
    placement: 'bottom',
    transitionName: 'zoom-big-fast',
    mouseEnterDelay: 100,
    mouseLeaveDelay: 100,
    arrowPointAtCenter: false,
    autoAdjustOverflow: true,
    theme: 'dark',
    defaultHidden: true,
    trigger: ["hover" /* hover */],
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,