import { isMoment } from 'moment';
import isEmpty from '../../_util/isEmpty';
import ValidationResult from '../ValidationResult';
import { $l } from '../../locale-context';
import { getNearStepValues } from '../../number-field/utils';
import formatReactTemplate from '../../formatter/formatReactTemplate';
import { toRangeValue } from '../../field/utils';
function isStepMismatch(value, step, min, max, range) {
    if (range) {
        let nearStepValues;
        toRangeValue(value, range).every(item => {
            if (!isEmpty(item)) {
                nearStepValues = getNearStepValues(isMoment(item) ? item : Number(item), step, min, max);
            }
            return !nearStepValues;
        });
        return nearStepValues;
    }
    if (!isEmpty(value)) {
        return getNearStepValues(isMoment(value) ? value : Number(value), step, min, max);
    }
}
export default function stepMismatch(value, props) {
    const { step, min, max, defaultValidationMessages, range, format, nonStrictStep } = props;
    if (step !== undefined && nonStrictStep === false) {
        const nearStepValues = isStepMismatch(value, step, min, max, range);
        if (nearStepValues !== undefined) {
            const [before, after] = nearStepValues;
            const injectionOptions = {
                0: isMoment(before) ? before.format(format) : before,
                1: isMoment(after) ? after.format(format) : after,
            };
            const ruleName = nearStepValues.length === 2 ? 'stepMismatchBetween' : 'stepMismatch';
            const key = nearStepValues.length === 2 ? 'step_mismatch_between' : 'step_mismatch';
            const { [ruleName]: validationMessage = $l('Validator', key) } = defaultValidationMessages;
            return new ValidationResult({
                validationMessage: formatReactTemplate(validationMessage, injectionOptions),
                injectionOptions,
                value: isMoment(value) ? value.format(format) : value,
                ruleName,
            });
        }
    }
    return true;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMtcHJvL3ZhbGlkYXRvci9ydWxlcy9zdGVwTWlzbWF0Y2gudHN4IiwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDbEMsT0FBTyxPQUFPLE1BQU0scUJBQXFCLENBQUM7QUFDMUMsT0FBTyxnQkFBZ0IsTUFBTSxxQkFBcUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDMUMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFN0QsT0FBTyxtQkFBbUIsTUFBTSxxQ0FBcUMsQ0FBQztBQUN0RSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFakQsU0FBUyxjQUFjLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEtBQUs7SUFDbEQsSUFBSSxLQUFLLEVBQUU7UUFDVCxJQUFJLGNBQWMsQ0FBQztRQUNuQixZQUFZLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN0QyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUNsQixjQUFjLEdBQUcsaUJBQWlCLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2FBQzFGO1lBQ0QsT0FBTyxDQUFDLGNBQWMsQ0FBQztRQUN6QixDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sY0FBYyxDQUFDO0tBQ3ZCO0lBQ0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUNuQixPQUFPLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztLQUNuRjtBQUNILENBQUM7QUFFRCxNQUFNLENBQUMsT0FBTyxVQUFVLFlBQVksQ0FBQyxLQUFVLEVBQUUsS0FBcUI7SUFDcEUsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLHlCQUF5QixFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLEdBQUcsS0FBSyxDQUFDO0lBQzFGLElBQUksSUFBSSxLQUFLLFNBQVMsSUFBSSxhQUFhLEtBQUssS0FBSyxFQUFFO1FBQ2pELE1BQU0sY0FBYyxHQUFHLGNBQWMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDcEUsSUFBSSxjQUFjLEtBQUssU0FBUyxFQUFFO1lBQ2hDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLEdBQUcsY0FBYyxDQUFDO1lBQ3ZDLE1BQU0sZ0JBQWdCLEdBQUc7Z0JBQ3ZCLENBQUMsRUFBRSxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU07Z0JBQ3BELENBQUMsRUFBRSxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUs7YUFDbEQsQ0FBQztZQUNGLE1BQU0sUUFBUSxHQUFHLGNBQWMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDO1lBQ3RGLE1BQU0sR0FBRyxHQUFHLGNBQWMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDO1lBQ3BGLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFLGlCQUFpQixHQUFHLEVBQUUsQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLEVBQUUsR0FBRyx5QkFBeUIsQ0FBQztZQUMzRixPQUFPLElBQUksZ0JBQWdCLENBQUM7Z0JBQzFCLGlCQUFpQixFQUFFLG1CQUFtQixDQUFDLGlCQUFpQixFQUFFLGdCQUFnQixDQUFDO2dCQUMzRSxnQkFBZ0I7Z0JBQ2hCLEtBQUssRUFBRSxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUs7Z0JBQ3JELFFBQVE7YUFDVCxDQUFDLENBQUM7U0FDSjtLQUNGO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9odWlodWF3ay9Eb2N1bWVudHMvb3B0L2Nob2Vyb2Rvbi11aS9jb21wb25lbnRzLXByby92YWxpZGF0b3IvcnVsZXMvc3RlcE1pc21hdGNoLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc01vbWVudCB9IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgaXNFbXB0eSBmcm9tICcuLi8uLi9fdXRpbC9pc0VtcHR5JztcbmltcG9ydCBWYWxpZGF0aW9uUmVzdWx0IGZyb20gJy4uL1ZhbGlkYXRpb25SZXN1bHQnO1xuaW1wb3J0IHsgJGwgfSBmcm9tICcuLi8uLi9sb2NhbGUtY29udGV4dCc7XG5pbXBvcnQgeyBnZXROZWFyU3RlcFZhbHVlcyB9IGZyb20gJy4uLy4uL251bWJlci1maWVsZC91dGlscyc7XG5pbXBvcnQgeyBtZXRob2RSZXR1cm4sIFZhbGlkYXRvclByb3BzIH0gZnJvbSAnLic7XG5pbXBvcnQgZm9ybWF0UmVhY3RUZW1wbGF0ZSBmcm9tICcuLi8uLi9mb3JtYXR0ZXIvZm9ybWF0UmVhY3RUZW1wbGF0ZSc7XG5pbXBvcnQgeyB0b1JhbmdlVmFsdWUgfSBmcm9tICcuLi8uLi9maWVsZC91dGlscyc7XG5cbmZ1bmN0aW9uIGlzU3RlcE1pc21hdGNoKHZhbHVlLCBzdGVwLCBtaW4sIG1heCwgcmFuZ2UpIHtcbiAgaWYgKHJhbmdlKSB7XG4gICAgbGV0IG5lYXJTdGVwVmFsdWVzO1xuICAgIHRvUmFuZ2VWYWx1ZSh2YWx1ZSwgcmFuZ2UpLmV2ZXJ5KGl0ZW0gPT4ge1xuICAgICAgaWYgKCFpc0VtcHR5KGl0ZW0pKSB7XG4gICAgICAgIG5lYXJTdGVwVmFsdWVzID0gZ2V0TmVhclN0ZXBWYWx1ZXMoaXNNb21lbnQoaXRlbSkgPyBpdGVtIDogTnVtYmVyKGl0ZW0pLCBzdGVwLCBtaW4sIG1heCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gIW5lYXJTdGVwVmFsdWVzO1xuICAgIH0pO1xuICAgIHJldHVybiBuZWFyU3RlcFZhbHVlcztcbiAgfVxuICBpZiAoIWlzRW1wdHkodmFsdWUpKSB7XG4gICAgcmV0dXJuIGdldE5lYXJTdGVwVmFsdWVzKGlzTW9tZW50KHZhbHVlKSA/IHZhbHVlIDogTnVtYmVyKHZhbHVlKSwgc3RlcCwgbWluLCBtYXgpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0ZXBNaXNtYXRjaCh2YWx1ZTogYW55LCBwcm9wczogVmFsaWRhdG9yUHJvcHMpOiBtZXRob2RSZXR1cm4ge1xuICBjb25zdCB7IHN0ZXAsIG1pbiwgbWF4LCBkZWZhdWx0VmFsaWRhdGlvbk1lc3NhZ2VzLCByYW5nZSwgZm9ybWF0LCBub25TdHJpY3RTdGVwIH0gPSBwcm9wcztcbiAgaWYgKHN0ZXAgIT09IHVuZGVmaW5lZCAmJiBub25TdHJpY3RTdGVwID09PSBmYWxzZSkge1xuICAgIGNvbnN0IG5lYXJTdGVwVmFsdWVzID0gaXNTdGVwTWlzbWF0Y2godmFsdWUsIHN0ZXAsIG1pbiwgbWF4LCByYW5nZSk7XG4gICAgaWYgKG5lYXJTdGVwVmFsdWVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnN0IFtiZWZvcmUsIGFmdGVyXSA9IG5lYXJTdGVwVmFsdWVzO1xuICAgICAgY29uc3QgaW5qZWN0aW9uT3B0aW9ucyA9IHtcbiAgICAgICAgMDogaXNNb21lbnQoYmVmb3JlKSA/IGJlZm9yZS5mb3JtYXQoZm9ybWF0KSA6IGJlZm9yZSxcbiAgICAgICAgMTogaXNNb21lbnQoYWZ0ZXIpID8gYWZ0ZXIuZm9ybWF0KGZvcm1hdCkgOiBhZnRlcixcbiAgICAgIH07XG4gICAgICBjb25zdCBydWxlTmFtZSA9IG5lYXJTdGVwVmFsdWVzLmxlbmd0aCA9PT0gMiA/ICdzdGVwTWlzbWF0Y2hCZXR3ZWVuJyA6ICdzdGVwTWlzbWF0Y2gnO1xuICAgICAgY29uc3Qga2V5ID0gbmVhclN0ZXBWYWx1ZXMubGVuZ3RoID09PSAyID8gJ3N0ZXBfbWlzbWF0Y2hfYmV0d2VlbicgOiAnc3RlcF9taXNtYXRjaCc7XG4gICAgICBjb25zdCB7IFtydWxlTmFtZV06IHZhbGlkYXRpb25NZXNzYWdlID0gJGwoJ1ZhbGlkYXRvcicsIGtleSkgfSA9IGRlZmF1bHRWYWxpZGF0aW9uTWVzc2FnZXM7XG4gICAgICByZXR1cm4gbmV3IFZhbGlkYXRpb25SZXN1bHQoe1xuICAgICAgICB2YWxpZGF0aW9uTWVzc2FnZTogZm9ybWF0UmVhY3RUZW1wbGF0ZSh2YWxpZGF0aW9uTWVzc2FnZSwgaW5qZWN0aW9uT3B0aW9ucyksXG4gICAgICAgIGluamVjdGlvbk9wdGlvbnMsXG4gICAgICAgIHZhbHVlOiBpc01vbWVudCh2YWx1ZSkgPyB2YWx1ZS5mb3JtYXQoZm9ybWF0KSA6IHZhbHVlLFxuICAgICAgICBydWxlTmFtZSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cbiJdLCJ2ZXJzaW9uIjozfQ==