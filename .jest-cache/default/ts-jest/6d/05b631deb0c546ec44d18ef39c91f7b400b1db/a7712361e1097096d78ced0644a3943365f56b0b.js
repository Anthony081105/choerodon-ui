import { isMoment } from 'moment';
import isNil from 'lodash/isNil';
import isEmpty from '../../_util/isEmpty';
import ValidationResult from '../ValidationResult';
import { $l } from '../../locale-context';
import formatReactTemplate from '../../formatter/formatReactTemplate';
import { toRangeValue } from '../../field/utils';
const isUnderflow = (value, min, range) => {
    if (range) {
        return toRangeValue(value, range).some(item => !isEmpty(item) && Number(item) < Number(min));
    }
    return !isEmpty(value) && Number(value) < Number(min);
};
export default function rangeUnderflow(value, props) {
    const { min, label, format, defaultValidationMessages, range } = props;
    if (!isNil(min) && isUnderflow(value, min, range)) {
        const injectionOptions = { min: isMoment(min) ? min.format(format) : min, label };
        const ruleName = 'rangeUnderflow';
        const { [ruleName]: validationMessage = $l('Validator', 'range_underflow'), } = defaultValidationMessages;
        return new ValidationResult({
            validationMessage: formatReactTemplate(validationMessage, injectionOptions),
            injectionOptions,
            value,
            ruleName,
        });
    }
    return true;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMtcHJvL3ZhbGlkYXRvci9ydWxlcy9yYW5nZVVuZGVyZmxvdy50c3giLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNsQyxPQUFPLEtBQUssTUFBTSxjQUFjLENBQUM7QUFDakMsT0FBTyxPQUFPLE1BQU0scUJBQXFCLENBQUM7QUFDMUMsT0FBTyxnQkFBZ0IsTUFBTSxxQkFBcUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFMUMsT0FBTyxtQkFBbUIsTUFBTSxxQ0FBcUMsQ0FBQztBQUN0RSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFakQsTUFBTSxXQUFXLEdBQUcsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFO0lBQ3hDLElBQUksS0FBSyxFQUFFO1FBQ1QsT0FBTyxZQUFZLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztLQUM5RjtJQUNELE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN4RCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsT0FBTyxVQUFVLGNBQWMsQ0FBQyxLQUFVLEVBQUUsS0FBcUI7SUFDdEUsTUFBTSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLHlCQUF5QixFQUFFLEtBQUssRUFBRSxHQUFHLEtBQUssQ0FBQztJQUN2RSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxFQUFFO1FBQ2pELE1BQU0sZ0JBQWdCLEdBQUcsRUFBRSxHQUFHLEVBQUUsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUM7UUFDbEYsTUFBTSxRQUFRLEdBQUcsZ0JBQWdCLENBQUM7UUFDbEMsTUFBTSxFQUNKLENBQUMsUUFBUSxDQUFDLEVBQUUsaUJBQWlCLEdBQUcsRUFBRSxDQUFDLFdBQVcsRUFBRSxpQkFBaUIsQ0FBQyxHQUNuRSxHQUFHLHlCQUF5QixDQUFDO1FBQzlCLE9BQU8sSUFBSSxnQkFBZ0IsQ0FBQztZQUMxQixpQkFBaUIsRUFBRSxtQkFBbUIsQ0FBQyxpQkFBaUIsRUFBRSxnQkFBZ0IsQ0FBQztZQUMzRSxnQkFBZ0I7WUFDaEIsS0FBSztZQUNMLFFBQVE7U0FDVCxDQUFDLENBQUM7S0FDSjtJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvaHVpaHVhd2svRG9jdW1lbnRzL29wdC9jaG9lcm9kb24tdWkvY29tcG9uZW50cy1wcm8vdmFsaWRhdG9yL3J1bGVzL3JhbmdlVW5kZXJmbG93LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc01vbWVudCB9IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgaXNOaWwgZnJvbSAnbG9kYXNoL2lzTmlsJztcbmltcG9ydCBpc0VtcHR5IGZyb20gJy4uLy4uL191dGlsL2lzRW1wdHknO1xuaW1wb3J0IFZhbGlkYXRpb25SZXN1bHQgZnJvbSAnLi4vVmFsaWRhdGlvblJlc3VsdCc7XG5pbXBvcnQgeyAkbCB9IGZyb20gJy4uLy4uL2xvY2FsZS1jb250ZXh0JztcbmltcG9ydCB7IG1ldGhvZFJldHVybiwgVmFsaWRhdG9yUHJvcHMgfSBmcm9tICcuJztcbmltcG9ydCBmb3JtYXRSZWFjdFRlbXBsYXRlIGZyb20gJy4uLy4uL2Zvcm1hdHRlci9mb3JtYXRSZWFjdFRlbXBsYXRlJztcbmltcG9ydCB7IHRvUmFuZ2VWYWx1ZSB9IGZyb20gJy4uLy4uL2ZpZWxkL3V0aWxzJztcblxuY29uc3QgaXNVbmRlcmZsb3cgPSAodmFsdWUsIG1pbiwgcmFuZ2UpID0+IHtcbiAgaWYgKHJhbmdlKSB7XG4gICAgcmV0dXJuIHRvUmFuZ2VWYWx1ZSh2YWx1ZSwgcmFuZ2UpLnNvbWUoaXRlbSA9PiAhaXNFbXB0eShpdGVtKSAmJiBOdW1iZXIoaXRlbSkgPCBOdW1iZXIobWluKSk7XG4gIH1cbiAgcmV0dXJuICFpc0VtcHR5KHZhbHVlKSAmJiBOdW1iZXIodmFsdWUpIDwgTnVtYmVyKG1pbik7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByYW5nZVVuZGVyZmxvdyh2YWx1ZTogYW55LCBwcm9wczogVmFsaWRhdG9yUHJvcHMpOiBtZXRob2RSZXR1cm4ge1xuICBjb25zdCB7IG1pbiwgbGFiZWwsIGZvcm1hdCwgZGVmYXVsdFZhbGlkYXRpb25NZXNzYWdlcywgcmFuZ2UgfSA9IHByb3BzO1xuICBpZiAoIWlzTmlsKG1pbikgJiYgaXNVbmRlcmZsb3codmFsdWUsIG1pbiwgcmFuZ2UpKSB7XG4gICAgY29uc3QgaW5qZWN0aW9uT3B0aW9ucyA9IHsgbWluOiBpc01vbWVudChtaW4pID8gbWluLmZvcm1hdChmb3JtYXQpIDogbWluLCBsYWJlbCB9O1xuICAgIGNvbnN0IHJ1bGVOYW1lID0gJ3JhbmdlVW5kZXJmbG93JztcbiAgICBjb25zdCB7XG4gICAgICBbcnVsZU5hbWVdOiB2YWxpZGF0aW9uTWVzc2FnZSA9ICRsKCdWYWxpZGF0b3InLCAncmFuZ2VfdW5kZXJmbG93JyksXG4gICAgfSA9IGRlZmF1bHRWYWxpZGF0aW9uTWVzc2FnZXM7XG4gICAgcmV0dXJuIG5ldyBWYWxpZGF0aW9uUmVzdWx0KHtcbiAgICAgIHZhbGlkYXRpb25NZXNzYWdlOiBmb3JtYXRSZWFjdFRlbXBsYXRlKHZhbGlkYXRpb25NZXNzYWdlLCBpbmplY3Rpb25PcHRpb25zKSxcbiAgICAgIGluamVjdGlvbk9wdGlvbnMsXG4gICAgICB2YWx1ZSxcbiAgICAgIHJ1bGVOYW1lLFxuICAgIH0pO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuIl0sInZlcnNpb24iOjN9