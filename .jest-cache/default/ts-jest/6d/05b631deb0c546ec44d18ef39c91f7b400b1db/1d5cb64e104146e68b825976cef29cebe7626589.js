import isNumber from 'lodash/isNumber';
export const defaultLabelWidth = 100;
export const defaultLabelLayout = "horizontal" /* horizontal */;
export const defaultColumns = 1;
export const FIELD_SUFFIX = 'field';
export function normalizeLabelWidth(labelWidth, columns) {
    if (isNumber(labelWidth)) {
        return new Array(columns).fill(labelWidth);
    }
    const labelWidths = new Array(columns).fill(defaultLabelWidth);
    labelWidth.slice(0, columns).forEach((width, index) => (labelWidths[index] = width));
    return labelWidths;
}
export function getProperty(props, key, dataSet, record) {
    if (props[key]) {
        return props[key];
    }
    const { name } = props;
    const field = record ? record.getField(name) : dataSet && dataSet.getField(name);
    if (field) {
        const fieldProperty = field.get(key);
        if (fieldProperty) {
            return fieldProperty;
        }
    }
}
export const defaultExcludeUseColonTag = ['div', 'button', 'Button'];
function findFocusableElement(node) {
    if (node.children) {
        let found;
        [...node.children].some(child => {
            if (child.tabIndex > -1) {
                found = child;
            }
            else {
                found = findFocusableElement(child);
            }
            return !!found;
        });
        return found;
    }
}
export function findFirstInvalidElement(node) {
    if (node.children) {
        let found;
        [...node.children].some(child => {
            if (child.className.includes('invalid')) {
                found = findFocusableElement(child);
            }
            else {
                found = findFirstInvalidElement(child);
            }
            return !!found;
        });
        return found;
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMtcHJvL2Zvcm0vdXRpbHMudHN4IiwibWFwcGluZ3MiOiJBQUFBLE9BQU8sUUFBUSxNQUFNLGlCQUFpQixDQUFDO0FBS3ZDLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFXLEdBQUcsQ0FBQztBQUU3QyxNQUFNLENBQUMsTUFBTSxrQkFBa0IsZ0NBQXNDLENBQUM7QUFFdEUsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFXLENBQUMsQ0FBQztBQUV4QyxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDO0FBRXBDLE1BQU0sVUFBVSxtQkFBbUIsQ0FBQyxVQUFVLEVBQUUsT0FBTztJQUNyRCxJQUFJLFFBQVEsQ0FBQyxVQUFVLENBQUMsRUFBRTtRQUN4QixPQUFPLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztLQUM1QztJQUNELE1BQU0sV0FBVyxHQUFHLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQy9ELFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDckYsT0FBTyxXQUFXLENBQUM7QUFDckIsQ0FBQztBQUVELE1BQU0sVUFBVSxXQUFXLENBQUMsS0FBVSxFQUFFLEdBQVcsRUFBRSxPQUFpQixFQUFFLE1BQWU7SUFDckYsSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDZCxPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUNuQjtJQUNELE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUM7SUFFdkIsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVqRixJQUFJLEtBQUssRUFBRTtRQUNULE1BQU0sYUFBYSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDckMsSUFBSSxhQUFhLEVBQUU7WUFDakIsT0FBTyxhQUFhLENBQUM7U0FDdEI7S0FDRjtBQUNILENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBYSxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFFL0UsU0FBUyxvQkFBb0IsQ0FBQyxJQUFpQjtJQUM3QyxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7UUFDakIsSUFBSSxLQUE4QixDQUFDO1FBQ25DLENBQUMsR0FBSSxJQUFJLENBQUMsUUFBMEMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNqRSxJQUFJLEtBQUssQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLEVBQUU7Z0JBQ3ZCLEtBQUssR0FBRyxLQUFLLENBQUM7YUFDZjtpQkFBTTtnQkFDTCxLQUFLLEdBQUcsb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDckM7WUFDRCxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDakIsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLEtBQUssQ0FBQztLQUNkO0FBQ0gsQ0FBQztBQUVELE1BQU0sVUFBVSx1QkFBdUIsQ0FBQyxJQUFpQjtJQUN2RCxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7UUFDakIsSUFBSSxLQUE4QixDQUFDO1FBQ25DLENBQUMsR0FBSSxJQUFJLENBQUMsUUFBMEMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNqRSxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxFQUFFO2dCQUN2QyxLQUFLLEdBQUcsb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDckM7aUJBQU07Z0JBQ0wsS0FBSyxHQUFHLHVCQUF1QixDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3hDO1lBQ0QsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQ2pCLENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxLQUFLLENBQUM7S0FDZDtBQUNILENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMtcHJvL2Zvcm0vdXRpbHMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBpc051bWJlciBmcm9tICdsb2Rhc2gvaXNOdW1iZXInO1xuaW1wb3J0IERhdGFTZXQgZnJvbSAnLi4vZGF0YS1zZXQvRGF0YVNldCc7XG5pbXBvcnQgUmVjb3JkIGZyb20gJy4uL2RhdGEtc2V0L1JlY29yZCc7XG5pbXBvcnQgeyBMYWJlbExheW91dCB9IGZyb20gJy4vZW51bSc7XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0TGFiZWxXaWR0aDogbnVtYmVyID0gMTAwO1xuXG5leHBvcnQgY29uc3QgZGVmYXVsdExhYmVsTGF5b3V0OiBMYWJlbExheW91dCA9IExhYmVsTGF5b3V0Lmhvcml6b250YWw7XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0Q29sdW1uczogbnVtYmVyID0gMTtcblxuZXhwb3J0IGNvbnN0IEZJRUxEX1NVRkZJWCA9ICdmaWVsZCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVMYWJlbFdpZHRoKGxhYmVsV2lkdGgsIGNvbHVtbnMpIHtcbiAgaWYgKGlzTnVtYmVyKGxhYmVsV2lkdGgpKSB7XG4gICAgcmV0dXJuIG5ldyBBcnJheShjb2x1bW5zKS5maWxsKGxhYmVsV2lkdGgpO1xuICB9XG4gIGNvbnN0IGxhYmVsV2lkdGhzID0gbmV3IEFycmF5KGNvbHVtbnMpLmZpbGwoZGVmYXVsdExhYmVsV2lkdGgpO1xuICBsYWJlbFdpZHRoLnNsaWNlKDAsIGNvbHVtbnMpLmZvckVhY2goKHdpZHRoLCBpbmRleCkgPT4gKGxhYmVsV2lkdGhzW2luZGV4XSA9IHdpZHRoKSk7XG4gIHJldHVybiBsYWJlbFdpZHRocztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFByb3BlcnR5KHByb3BzOiBhbnksIGtleTogc3RyaW5nLCBkYXRhU2V0PzogRGF0YVNldCwgcmVjb3JkPzogUmVjb3JkKTogYW55IHtcbiAgaWYgKHByb3BzW2tleV0pIHtcbiAgICByZXR1cm4gcHJvcHNba2V5XTtcbiAgfVxuICBjb25zdCB7IG5hbWUgfSA9IHByb3BzO1xuXG4gIGNvbnN0IGZpZWxkID0gcmVjb3JkID8gcmVjb3JkLmdldEZpZWxkKG5hbWUpIDogZGF0YVNldCAmJiBkYXRhU2V0LmdldEZpZWxkKG5hbWUpO1xuXG4gIGlmIChmaWVsZCkge1xuICAgIGNvbnN0IGZpZWxkUHJvcGVydHkgPSBmaWVsZC5nZXQoa2V5KTtcbiAgICBpZiAoZmllbGRQcm9wZXJ0eSkge1xuICAgICAgcmV0dXJuIGZpZWxkUHJvcGVydHk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0RXhjbHVkZVVzZUNvbG9uVGFnOiBzdHJpbmdbXSA9IFsnZGl2JywgJ2J1dHRvbicsICdCdXR0b24nXTtcblxuZnVuY3Rpb24gZmluZEZvY3VzYWJsZUVsZW1lbnQobm9kZTogSFRNTEVsZW1lbnQpOiBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZCB7XG4gIGlmIChub2RlLmNoaWxkcmVuKSB7XG4gICAgbGV0IGZvdW5kOiBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZDtcbiAgICBbLi4uKG5vZGUuY2hpbGRyZW4gYXMgSFRNTENvbGxlY3Rpb25PZjxIVE1MRWxlbWVudD4pXS5zb21lKGNoaWxkID0+IHtcbiAgICAgIGlmIChjaGlsZC50YWJJbmRleCA+IC0xKSB7XG4gICAgICAgIGZvdW5kID0gY2hpbGQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3VuZCA9IGZpbmRGb2N1c2FibGVFbGVtZW50KGNoaWxkKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAhIWZvdW5kO1xuICAgIH0pO1xuICAgIHJldHVybiBmb3VuZDtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZmluZEZpcnN0SW52YWxpZEVsZW1lbnQobm9kZTogSFRNTEVsZW1lbnQpOiBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZCB7XG4gIGlmIChub2RlLmNoaWxkcmVuKSB7XG4gICAgbGV0IGZvdW5kOiBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZDtcbiAgICBbLi4uKG5vZGUuY2hpbGRyZW4gYXMgSFRNTENvbGxlY3Rpb25PZjxIVE1MRWxlbWVudD4pXS5zb21lKGNoaWxkID0+IHtcbiAgICAgIGlmIChjaGlsZC5jbGFzc05hbWUuaW5jbHVkZXMoJ2ludmFsaWQnKSkge1xuICAgICAgICBmb3VuZCA9IGZpbmRGb2N1c2FibGVFbGVtZW50KGNoaWxkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvdW5kID0gZmluZEZpcnN0SW52YWxpZEVsZW1lbnQoY2hpbGQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuICEhZm91bmQ7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZvdW5kO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=