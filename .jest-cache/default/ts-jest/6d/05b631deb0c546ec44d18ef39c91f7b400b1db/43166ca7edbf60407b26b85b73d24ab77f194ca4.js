import React, { Component } from 'react';
import { findDOMNode } from 'react-dom';
import classNames from 'classnames';
import Icon from '../icon';
import Animate from '../animate';
import { getPrefixCls } from '../configure';
export default class Alert extends Component {
    constructor() {
        super(...arguments);
        this.state = {
            closing: true,
            closed: false,
        };
        this.handleClose = (e) => {
            e.preventDefault();
            const dom = findDOMNode(this);
            dom.style.height = `${dom.offsetHeight}px`;
            // Magic code
            // 重复一次后才能正确设置 height
            dom.style.height = `${dom.offsetHeight}px`;
            this.setState({
                closing: false,
            });
            const { onClose } = this.props;
            if (onClose) {
                onClose(e);
            }
        };
        this.animationEnd = () => {
            this.setState({
                closed: true,
                closing: true,
            });
            const { afterClose } = this.props;
            if (afterClose) {
                afterClose();
            }
        };
    }
    render() {
        const { props } = this;
        const { description, prefixCls: customizePrefixCls, message, closeText, banner, className = '', style, } = props;
        let { closable, showIcon, type, iconType } = props;
        const { closing, closed } = this.state;
        const prefixCls = getPrefixCls('alert', customizePrefixCls);
        // banner模式默认有 Icon
        showIcon = banner && showIcon === undefined ? true : showIcon;
        // banner模式默认为警告
        type = banner && type === undefined ? 'warning' : type || 'info';
        if (!iconType) {
            switch (type) {
                case 'success':
                    iconType = 'check_circle';
                    break;
                case 'info':
                    iconType = 'info';
                    break;
                case 'error':
                    iconType = 'error';
                    break;
                case 'warning':
                    iconType = 'warning';
                    break;
                default:
                    iconType = 'default';
            }
        }
        const alertCls = classNames(prefixCls, {
            [`${prefixCls}-${type}`]: true,
            [`${prefixCls}-close`]: !closing,
            [`${prefixCls}-with-description`]: !!description,
            [`${prefixCls}-no-icon`]: !showIcon,
            [`${prefixCls}-banner`]: !!banner,
        }, className);
        // closeable when closeText is assigned
        if (closeText) {
            closable = true;
        }
        const closeIcon = closable ? (React.createElement("a", { onClick: this.handleClose, className: `${prefixCls}-close-icon` }, closeText || React.createElement(Icon, { type: "close" }))) : null;
        return closed ? null : (React.createElement(Animate, { component: "", hiddenProp: "hidden", transitionName: `${prefixCls}-slide-up`, onEnd: this.animationEnd },
            React.createElement("div", { hidden: !closing, className: alertCls, style: style },
                showIcon ? React.createElement(Icon, { className: `${prefixCls}-icon`, type: iconType }) : null,
                React.createElement("span", { className: `${prefixCls}-message` }, message),
                React.createElement("span", { className: `${prefixCls}-description` }, description),
                closeIcon)));
    }
}
Alert.displayName = 'Alert';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvYWxlcnQvaW5kZXgudHN4IiwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxFQUFFLEVBQUUsU0FBUyxFQUErQyxNQUFNLE9BQU8sQ0FBQztBQUN0RixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sVUFBVSxNQUFNLFlBQVksQ0FBQztBQUNwQyxPQUFPLElBQUksTUFBTSxTQUFTLENBQUM7QUFDM0IsT0FBTyxPQUFPLE1BQU0sWUFBWSxDQUFDO0FBQ2pDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxjQUFjLENBQUM7QUE0QjVDLE1BQU0sQ0FBQyxPQUFPLE9BQU8sS0FBTSxTQUFRLFNBQTBCO0lBQTdEOztRQUdFLFVBQUssR0FBRztZQUNOLE9BQU8sRUFBRSxJQUFJO1lBQ2IsTUFBTSxFQUFFLEtBQUs7U0FDZCxDQUFDO1FBRUYsZ0JBQVcsR0FBRyxDQUFDLENBQXNDLEVBQUUsRUFBRTtZQUN2RCxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDbkIsTUFBTSxHQUFHLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBZ0IsQ0FBQztZQUM3QyxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxZQUFZLElBQUksQ0FBQztZQUMzQyxhQUFhO1lBQ2IscUJBQXFCO1lBQ3JCLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLEdBQUcsR0FBRyxDQUFDLFlBQVksSUFBSSxDQUFDO1lBRTNDLElBQUksQ0FBQyxRQUFRLENBQUM7Z0JBQ1osT0FBTyxFQUFFLEtBQUs7YUFDZixDQUFDLENBQUM7WUFDSCxNQUFNLEVBQUUsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUMvQixJQUFJLE9BQU8sRUFBRTtnQkFDWCxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDWjtRQUNILENBQUMsQ0FBQztRQUVGLGlCQUFZLEdB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LFdBQVcsRUFDdkMsS0FBSyxFQUFFLElBQUksQ0FBQyxZQUFZO1lBRXhCLDZCQUFLLE1BQU0sRUFBRSxDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxLQUFLO2dCQUNyRCxRQUFRLENBQUMsQ0FBQyxDQUFDLG9CQUFDLElBQUksSUFBQyxTQUFTLEVBQUUsR0FBRyxTQUFTLE9BQU8sRUFBRSxJQUFJLEVBQUUsUUFBUSxHQUFJLENBQUMsQ0FBQyxDQUFDLElBQUk7Z0JBQzNFLDhCQUFNLFNBQVMsRUFBRSxHQUFHLFNBQVMsVUFBVSxJQUFHLE9BQU8sQ0FBUTtnQkFDekQsOEJBQU0sU0FBUyxFQUFFLEdBQUcsU0FBUyxjQUFjLElBQUcsV0FBVyxDQUFRO2dCQUNoRSxTQUFTLENBQ04sQ0FDRSxDQUNYLENBQUM7SUFDSixDQUFDOztBQWhITSxpQkFBVyxHQUFHLE9BQU8sQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvaHVpaHVhd2svRG9jdW1lbnRzL29wdC9jaG9lcm9kb24tdWkvY29tcG9uZW50cy9hbGVydC9pbmRleC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCwgQ1NTUHJvcGVydGllcywgTW91c2VFdmVudEhhbmRsZXIsIFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGZpbmRET01Ob2RlIH0gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IEljb24gZnJvbSAnLi4vaWNvbic7XG5pbXBvcnQgQW5pbWF0ZSBmcm9tICcuLi9hbmltYXRlJztcbmltcG9ydCB7IGdldFByZWZpeENscyB9IGZyb20gJy4uL2NvbmZpZ3VyZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWxlcnRQcm9wcyB7XG4gIC8qKlxuICAgKiBUeXBlIG9mIEFsZXJ0IHN0eWxlcywgb3B0aW9uczpgc3VjY2Vzc2AsIGBpbmZvYCwgYHdhcm5pbmdgLCBgZXJyb3JgXG4gICAqL1xuICB0eXBlPzogJ3N1Y2Nlc3MnIHwgJ2luZm8nIHwgJ3dhcm5pbmcnIHwgJ2Vycm9yJztcbiAgLyoqIFdoZXRoZXIgQWxlcnQgY2FuIGJlIGNsb3NlZCAqL1xuICBjbG9zYWJsZT86IGJvb2xlYW47XG4gIC8qKiBDbG9zZSB0ZXh0IHRvIHNob3cgKi9cbiAgY2xvc2VUZXh0PzogUmVhY3ROb2RlO1xuICAvKiogQ29udGVudCBvZiBBbGVydCAqL1xuICBtZXNzYWdlOiBSZWFjdE5vZGU7XG4gIC8qKiBBZGRpdGlvbmFsIGNvbnRlbnQgb2YgQWxlcnQgKi9cbiAgZGVzY3JpcHRpb24/OiBSZWFjdE5vZGU7XG4gIC8qKiBDYWxsYmFjayB3aGVuIGNsb3NlIEFsZXJ0ICovXG4gIG9uQ2xvc2U/OiBNb3VzZUV2ZW50SGFuZGxlcjxIVE1MQW5jaG9yRWxlbWVudD47XG4gIC8qKiBUcmlnZ2VyIHdoZW4gYW5pbWF0aW9uIGVuZGluZyBvZiBBbGVydCAqL1xuICBhZnRlckNsb3NlPzogKCkgPT4gdm9pZDtcbiAgLyoqIFdoZXRoZXIgdG8gc2hvdyBpY29uICovXG4gIHNob3dJY29uPzogYm9vbGVhbjtcbiAgaWNvblR5cGU/OiBzdHJpbmc7XG4gIHN0eWxlPzogQ1NTUHJvcGVydGllcztcbiAgcHJlZml4Q2xzPzogc3RyaW5nO1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIGJhbm5lcj86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFsZXJ0IGV4dGVuZHMgQ29tcG9uZW50PEFsZXJ0UHJvcHMsIGFueT4ge1xuICBzdGF0aWMgZGlzcGxheU5hbWUgPSAnQWxlcnQnO1xuXG4gIHN0YXRlID0ge1xuICAgIGNsb3Npbmc6IHRydWUsXG4gICAgY2xvc2VkOiBmYWxzZSxcbiAgfTtcblxuICBoYW5kbGVDbG9zZSA9IChlOiBSZWFjdC5Nb3VzZUV2ZW50PEhUTUxBbmNob3JFbGVtZW50PikgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCBkb20gPSBmaW5kRE9NTm9kZSh0aGlzKSBhcyBIVE1MRWxlbWVudDtcbiAgICBkb20uc3R5bGUuaGVpZ2h0ID0gYCR7ZG9tLm9mZnNldEhlaWdodH1weGA7XG4gICAgLy8gTWFnaWMgY29kZVxuICAgIC8vIOmHjeWkjeS4gOasoeWQjuaJjeiDveato+ehruiuvue9riBoZWlnaHRcbiAgICBkb20uc3R5bGUuaGVpZ2h0ID0gYCR7ZG9tLm9mZnNldEhlaWdodH1weGA7XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGNsb3Npbmc6IGZhbHNlLFxuICAgIH0pO1xuICAgIGNvbnN0IHsgb25DbG9zZSB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAob25DbG9zZSkge1xuICAgICAgb25DbG9zZShlKTtcbiAgICB9XG4gIH07XG5cbiAgYW5pbWF0aW9uRW5kID0gKCkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgY2xvc2VkOiB0cnVlLFxuICAgICAgY2xvc2luZzogdHJ1ZSxcbiAgICB9KTtcbiAgICBjb25zdCB7IGFmdGVyQ2xvc2UgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKGFmdGVyQ2xvc2UpIHtcbiAgICAgIGFmdGVyQ2xvc2UoKTtcbiAgICB9XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgcHJvcHMgfSA9IHRoaXM7XG4gICAgY29uc3Qge1xuICAgICAgZGVzY3JpcHRpb24sXG4gICAgICBwcmVmaXhDbHM6IGN1c3RvbWl6ZVByZWZpeENscyxcbiAgICAgIG1lc3NhZ2UsXG4gICAgICBjbG9zZVRleHQsXG4gICAgICBiYW5uZXIsXG4gICAgICBjbGFzc05hbWUgPSAnJyxcbiAgICAgIHN0eWxlLFxuICAgIH0gPSBwcm9wcztcbiAgICBsZXQgeyBjbG9zYWJsZSwgc2hvd0ljb24sIHR5cGUsIGljb25UeXBlIH0gPSBwcm9wcztcbiAgICBjb25zdCB7IGNsb3NpbmcsIGNsb3NlZCB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCBwcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ2FsZXJ0JywgY3VzdG9taXplUHJlZml4Q2xzKTtcblxuICAgIC8vIGJhbm5lcuaooeW8j+m7mOiupOaciSBJY29uXG4gICAgc2hvd0ljb24gPSBiYW5uZXIgJiYgc2hvd0ljb24gPT09IHVuZGVmaW5lZCA/IHRydWUgOiBzaG93SWNvbjtcbiAgICAvLyBiYW5uZXLmqKHlvI/pu5jorqTkuLrorablkYpcbiAgICB0eXBlID0gYmFubmVyICYmIHR5cGUgPT09IHVuZGVmaW5lZCA/ICd3YXJuaW5nJyA6IHR5cGUgfHwgJ2luZm8nO1xuXG4gICAgaWYgKCFpY29uVHlwZSkge1xuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgJ3N1Y2Nlc3MnOlxuICAgICAgICAgIGljb25UeXBlID0gJ2NoZWNrX2NpcmNsZSc7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2luZm8nOlxuICAgICAgICAgIGljb25UeXBlID0gJ2luZm8nO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdlcnJvcic6XG4gICAgICAgICAgaWNvblR5cGUgPSAnZXJyb3InO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICd3YXJuaW5nJzpcbiAgICAgICAgICBpY29uVHlwZSA9ICd3YXJuaW5nJztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBpY29uVHlwZSA9ICdkZWZhdWx0JztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBhbGVydENscyA9IGNsYXNzTmFtZXMoXG4gICAgICBwcmVmaXhDbHMsXG4gICAgICB7XG4gICAgICAgIFtgJHtwcmVmaXhDbHN9LSR7dHlwZX1gXTogdHJ1ZSxcbiAgICAgICAgW2Ake3ByZWZpeENsc30tY2xvc2VgXTogIWNsb3NpbmcsXG4gICAgICAgIFtgJHtwcmVmaXhDbHN9LXdpdGgtZGVzY3JpcHRpb25gXTogISFkZXNjcmlwdGlvbixcbiAgICAgICAgW2Ake3ByZWZpeENsc30tbm8taWNvbmBdOiAhc2hvd0ljb24sXG4gICAgICAgIFtgJHtwcmVmaXhDbHN9LWJhbm5lcmBdOiAhIWJhbm5lcixcbiAgICAgIH0sXG4gICAgICBjbGFzc05hbWUsXG4gICAgKTtcblxuICAgIC8vIGNsb3NlYWJsZSB3aGVuIGNsb3NlVGV4dCBpcyBhc3NpZ25lZFxuICAgIGlmIChjbG9zZVRleHQpIHtcbiAgICAgIGNsb3NhYmxlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBjbG9zZUljb24gPSBjbG9zYWJsZSA/IChcbiAgICAgIDxhIG9uQ2xpY2s9e3RoaXMuaGFuZGxlQ2xvc2V9IGNsYXNzTmFtZT17YCR7cHJlZml4Q2xzfS1jbG9zZS1pY29uYH0+XG4gICAgICAgIHtjbG9zZVRleHQgfHwgPEljb24gdHlwZT1cImNsb3NlXCIgLz59XG4gICAgICA8L2E+XG4gICAgKSA6IG51bGw7XG5cbiAgICByZXR1cm4gY2xvc2VkID8gbnVsbCA6IChcbiAgICAgIDxBbmltYXRlXG4gICAgICAgIGNvbXBvbmVudD1cIlwiXG4gICAgICAgIGhpZGRlblByb3A9XCJoaWRkZW5cIlxuICAgICAgICB0cmFuc2l0aW9uTmFtZT17YCR7cHJlZml4Q2xzfS1zbGlkZS11cGB9XG4gICAgICAgIG9uRW5kPXt0aGlzLmFuaW1hdGlvbkVuZH1cbiAgICAgID5cbiAgICAgICAgPGRpdiBoaWRkZW49eyFjbG9zaW5nfSBjbGFzc05hbWU9e2FsZXJ0Q2xzfSBzdHlsZT17c3R5bGV9PlxuICAgICAgICAgIHtzaG93SWNvbiA/IDxJY29uIGNsYXNzTmFtZT17YCR7cHJlZml4Q2xzfS1pY29uYH0gdHlwZT17aWNvblR5cGV9IC8+IDogbnVsbH1cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9e2Ake3ByZWZpeENsc30tbWVzc2FnZWB9PnttZXNzYWdlfTwvc3Bhbj5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9e2Ake3ByZWZpeENsc30tZGVzY3JpcHRpb25gfT57ZGVzY3JpcHRpb259PC9zcGFuPlxuICAgICAgICAgIHtjbG9zZUljb259XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9BbmltYXRlPlxuICAgICk7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==