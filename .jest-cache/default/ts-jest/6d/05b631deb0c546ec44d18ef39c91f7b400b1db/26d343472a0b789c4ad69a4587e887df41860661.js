import { __decorate } from "tslib";
import React from 'react';
import { observer } from 'mobx-react';
import isString from 'lodash/isString';
import omit from 'lodash/omit';
import PropTypes from 'prop-types';
import { TextField } from '../text-field/TextField';
import calculateNodeHeight from './calculateNodeHeight';
let TextArea = class TextArea extends TextField {
    getOtherProps() {
        const { resize } = this.props;
        const otherProps = omit(super.getOtherProps(), ['resize', 'autoSize']);
        const { style = {} } = otherProps;
        style.resize = resize;
        if (resize !== "none" /* none */) {
            style.transition = 'none';
        }
        const { autoSize } = this.props;
        let textAreaStyles = {};
        if (autoSize) {
            const { minRows, maxRows } = autoSize;
            otherProps.rows = minRows;
            if (this.element) {
                textAreaStyles = calculateNodeHeight(this.element, true, minRows, maxRows);
            }
        }
        otherProps.style = { ...style, ...textAreaStyles };
        return otherProps;
    }
    renderWrapper() {
        const text = this.getTextNode();
        return (React.createElement("div", Object.assign({ key: "wrapper" }, this.getWrapperProps()),
            this.renderPlaceHolder(),
            React.createElement("label", null,
                React.createElement("textarea", Object.assign({}, this.getOtherProps(), { placeholder: this.hasFloatLabel ? undefined : this.getPlaceholders()[0], readOnly: !this.editable, value: isString(text) ? text : this.getText(this.getValue()) })),
                this.renderFloatLabel())));
    }
    handleEnterDown() { }
};
TextArea.displayName = 'TextArea';
TextArea.propTypes = {
    cols: PropTypes.number,
    rows: PropTypes.number,
    resize: PropTypes.oneOf([
        "vertical" /* vertical */,
        "horizontal" /* horizontal */,
        "none" /* none */,
        "both" /* both */,
    ]),
    autoSize: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),
    ...TextField.propTypes,
};
TextArea.defaultProps = {
    ...TextField.defaultProps,
    suffixCls: 'textarea',
    resize: "none" /* none */,
    rows: 4,
    autoSize: false,
};
TextArea = __decorate([
    observer
], TextArea);
export default TextArea;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMtcHJvL3RleHQtYXJlYS9UZXh0QXJlYS50c3giLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sS0FBb0IsTUFBTSxPQUFPLENBQUM7QUFDekMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN0QyxPQUFPLFFBQVEsTUFBTSxpQkFBaUIsQ0FBQztBQUN2QyxPQUFPLElBQUksTUFBTSxhQUFhLENBQUM7QUFDL0IsT0FBTyxTQUFTLE1BQU0sWUFBWSxDQUFDO0FBQ25DLE9BQU8sRUFBRSxTQUFTLEVBQWtCLE1BQU0seUJBQXlCLENBQUM7QUFFcEUsT0FBTyxtQkFBbUIsTUFBTSx1QkFBdUIsQ0FBQztBQVV4RCxJQUFxQixRQUFRLEdBQTdCLE1BQXFCLFFBQWtDLFNBQVEsU0FBWTtJQXdCekUsYUFBYTtRQUNYLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQzlCLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLEVBQUUsQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUN2RSxNQUFNLEVBQUUsS0FBSyxHQUFHLEVBQUUsRUFBRSxHQUFHLFVBQVUsQ0FBQztRQUNsQyxLQUFLLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUN0QixJQUFJLE1BQU0sc0JBQW9CLEVBQUU7WUFDOUIsS0FBSyxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUM7U0FDM0I7UUFDRCxNQUFNLEVBQUUsUUFBUSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUNoQyxJQUFJLGNBQWMsR0FBRyxFQUFFLENBQUM7UUFDeEIsSUFBSSxRQUFRLEVBQUU7WUFDWixNQUFNLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxHQUFHLFFBQXdCLENBQUM7WUFDdEQsVUFBVSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUM7WUFDMUIsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO2dCQUNoQixjQUFjLEdBQUcsbUJBQW1CLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO2FBQzVFO1NBQ0Y7UUFDRCxVQUFVLENBQUMsS0FBSyxHQUFHLEVBQUUsR0FBRyxLQUFLLEVBQUUsR0FBRyxjQUFjLEVBQUUsQ0FBQztRQUNuRCxPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDO0lBRUQsYUFBYTtRQUNYLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNoQyxPQUFPLENBQ0wsMkNBQUssR0FBRyxFQUFDLFNBQVMsSUFBSyxJQUFJLENBQUMsZUFBZSxFQUFFO1lBQzFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtZQUN6QjtnQkFDRSxrREFDTSxJQUFJLENBQUMsYUFBYSxFQUFFLElBQ3hCLFdBQVcsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDdkUsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFDeEIsS0FBSyxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUM1RDtnQkFDRCxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FDbEIsQ0FDSixDQUNQLENBQUM7SUFDSixDQUFDO0lBRUQsZUFBZSxLQUFJLENBQUM7Q0FDckIsQ0FBQTtBQS9EUSxvQkFBVyxHQUFHLFVBQVUsQ0FBQztBQUV6QixrQkFBUyxHQUFHO0lBQ2pCLElBQUksRUFBRSxTQUFTLENBQUMsTUFBTTtJQUN0QixJQUFJLEVBQUUsU0FBUyxDQUFDLE1BQU07SUFDdEIsTUFBTSxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUM7Ozs7O0tBS3ZCLENBQUM7SUFDRixRQUFRLEVBQUUsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2pFLEdBQUcsU0FBUyxDQUFDLFNBQVM7Q0FDdkIsQ0FBQztBQUVLLHFCQUFZLEdBQUc7SUFDcEIsR0FBRyxTQUFTLENBQUMsWUFBWTtJQUN6QixTQUFTLEVBQUUsVUFBVTtJQUNyQixNQUFNLG1CQUFpQjtJQUN2QixJQUFJLEVBQUUsQ0FBQztJQUNQLFFBQVEsRUFBRSxLQUFLO0NBQ2hCLENBQUM7QUF0QmlCLFFBQVE7SUFENUIsUUFBUTtHQUNZLFFBQVEsQ0FnRTVCO2VBaEVvQixRQUFRIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9odWlodWF3ay9Eb2N1bWVudHMvb3B0L2Nob2Vyb2Rvbi11aS9jb21wb25lbnRzLXByby90ZXh0LWFyZWEvVGV4dEFyZWEudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBvYnNlcnZlciB9IGZyb20gJ21vYngtcmVhY3QnO1xuaW1wb3J0IGlzU3RyaW5nIGZyb20gJ2xvZGFzaC9pc1N0cmluZyc7XG5pbXBvcnQgb21pdCBmcm9tICdsb2Rhc2gvb21pdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgVGV4dEZpZWxkLCBUZXh0RmllbGRQcm9wcyB9IGZyb20gJy4uL3RleHQtZmllbGQvVGV4dEZpZWxkJztcbmltcG9ydCB7IFJlc2l6ZVR5cGUsIEF1dG9TaXplVHlwZSB9IGZyb20gJy4vZW51bSc7XG5pbXBvcnQgY2FsY3VsYXRlTm9kZUhlaWdodCBmcm9tICcuL2NhbGN1bGF0ZU5vZGVIZWlnaHQnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRleHRBcmVhUHJvcHMgZXh0ZW5kcyBUZXh0RmllbGRQcm9wcyB7XG4gIGNvbHM/OiBudW1iZXI7XG4gIHJvd3M/OiBudW1iZXI7XG4gIHJlc2l6ZT86IFJlc2l6ZVR5cGU7XG4gIGF1dG9TaXplPzogYm9vbGVhbiB8IEF1dG9TaXplVHlwZTtcbn1cblxuQG9ic2VydmVyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZXh0QXJlYTxUIGV4dGVuZHMgVGV4dEFyZWFQcm9wcz4gZXh0ZW5kcyBUZXh0RmllbGQ8VD4ge1xuICBzdGF0aWMgZGlzcGxheU5hbWUgPSAnVGV4dEFyZWEnO1xuXG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgY29sczogUHJvcFR5cGVzLm51bWJlcixcbiAgICByb3dzOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIHJlc2l6ZTogUHJvcFR5cGVzLm9uZU9mKFtcbiAgICAgIFJlc2l6ZVR5cGUudmVydGljYWwsXG4gICAgICBSZXNpemVUeXBlLmhvcml6b250YWwsXG4gICAgICBSZXNpemVUeXBlLm5vbmUsXG4gICAgICBSZXNpemVUeXBlLmJvdGgsXG4gICAgXSksXG4gICAgYXV0b1NpemU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ib29sLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gICAgLi4uVGV4dEZpZWxkLnByb3BUeXBlcyxcbiAgfTtcblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIC4uLlRleHRGaWVsZC5kZWZhdWx0UHJvcHMsXG4gICAgc3VmZml4Q2xzOiAndGV4dGFyZWEnLFxuICAgIHJlc2l6ZTogUmVzaXplVHlwZS5ub25lLFxuICAgIHJvd3M6IDQsXG4gICAgYXV0b1NpemU6IGZhbHNlLFxuICB9O1xuXG4gIGdldE90aGVyUHJvcHMoKSB7XG4gICAgY29uc3QgeyByZXNpemUgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3Qgb3RoZXJQcm9wcyA9IG9taXQoc3VwZXIuZ2V0T3RoZXJQcm9wcygpLCBbJ3Jlc2l6ZScsICdhdXRvU2l6ZSddKTtcbiAgICBjb25zdCB7IHN0eWxlID0ge30gfSA9IG90aGVyUHJvcHM7XG4gICAgc3R5bGUucmVzaXplID0gcmVzaXplO1xuICAgIGlmIChyZXNpemUgIT09IFJlc2l6ZVR5cGUubm9uZSkge1xuICAgICAgc3R5bGUudHJhbnNpdGlvbiA9ICdub25lJztcbiAgICB9XG4gICAgY29uc3QgeyBhdXRvU2l6ZSB9ID0gdGhpcy5wcm9wcztcbiAgICBsZXQgdGV4dEFyZWFTdHlsZXMgPSB7fTtcbiAgICBpZiAoYXV0b1NpemUpIHtcbiAgICAgIGNvbnN0IHsgbWluUm93cywgbWF4Um93cyB9ID0gYXV0b1NpemUgYXMgQXV0b1NpemVUeXBlO1xuICAgICAgb3RoZXJQcm9wcy5yb3dzID0gbWluUm93cztcbiAgICAgIGlmICh0aGlzLmVsZW1lbnQpIHtcbiAgICAgICAgdGV4dEFyZWFTdHlsZXMgPSBjYWxjdWxhdGVOb2RlSGVpZ2h0KHRoaXMuZWxlbWVudCwgdHJ1ZSwgbWluUm93cywgbWF4Um93cyk7XG4gICAgICB9XG4gICAgfVxuICAgIG90aGVyUHJvcHMuc3R5bGUgPSB7IC4uLnN0eWxlLCAuLi50ZXh0QXJlYVN0eWxlcyB9O1xuICAgIHJldHVybiBvdGhlclByb3BzO1xuICB9XG5cbiAgcmVuZGVyV3JhcHBlcigpOiBSZWFjdE5vZGUge1xuICAgIGNvbnN0IHRleHQgPSB0aGlzLmdldFRleHROb2RlKCk7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYga2V5PVwid3JhcHBlclwiIHsuLi50aGlzLmdldFdyYXBwZXJQcm9wcygpfT5cbiAgICAgICAge3RoaXMucmVuZGVyUGxhY2VIb2xkZXIoKX1cbiAgICAgICAgPGxhYmVsPlxuICAgICAgICAgIDx0ZXh0YXJlYVxuICAgICAgICAgICAgey4uLnRoaXMuZ2V0T3RoZXJQcm9wcygpfVxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9e3RoaXMuaGFzRmxvYXRMYWJlbCA/IHVuZGVmaW5lZCA6IHRoaXMuZ2V0UGxhY2Vob2xkZXJzKClbMF19XG4gICAgICAgICAgICByZWFkT25seT17IXRoaXMuZWRpdGFibGV9XG4gICAgICAgICAgICB2YWx1ZT17aXNTdHJpbmcodGV4dCkgPyB0ZXh0IDogdGhpcy5nZXRUZXh0KHRoaXMuZ2V0VmFsdWUoKSl9XG4gICAgICAgICAgLz5cbiAgICAgICAgICB7dGhpcy5yZW5kZXJGbG9hdExhYmVsKCl9XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgaGFuZGxlRW50ZXJEb3duKCkge31cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==