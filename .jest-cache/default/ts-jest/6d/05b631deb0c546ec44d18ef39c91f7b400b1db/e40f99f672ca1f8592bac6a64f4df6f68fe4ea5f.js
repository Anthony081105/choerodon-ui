import { __decorate } from "tslib";
import React, { Component } from 'react';
import { observer } from 'mobx-react';
import PropTypes from 'prop-types';
import { getConfig } from 'choerodon-ui/lib/configure';
import ObserverTextField from '../text-field/TextField';
import Form from '../form/Form';
import localeContext from '../locale-context';
let IntlList = class IntlList extends Component {
    renderOptions() {
        const { name, lang, maxLengths } = this.props;
        const { supports } = localeContext;
        const tlsKey = getConfig('tlsKey');
        return Object.keys(supports).map(key => {
            const maxLengthProps = maxLengths && maxLengths[key] ? { maxLength: maxLengths[key] } : {};
            return (React.createElement(ObserverTextField, Object.assign({}, maxLengthProps, { name: name ? `${tlsKey}.${name}.${key}` : key, autoFocus: key === lang, key: key })));
        });
    }
    render() {
        const { record } = this.props;
        return React.createElement(Form, { record: record }, this.renderOptions());
    }
};
IntlList.propTypes = {
    record: PropTypes.object,
    name: PropTypes.string,
    lang: PropTypes.string,
    maxLengths: PropTypes.object,
};
IntlList = __decorate([
    observer
], IntlList);
export default IntlList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMtcHJvL2ludGwtZmllbGQvSW50bExpc3QudHN4IiwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEtBQUssRUFBRSxFQUFFLFNBQVMsRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUN6QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3RDLE9BQU8sU0FBUyxNQUFNLFlBQVksQ0FBQztBQUNuQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDdkQsT0FBTyxpQkFBaUIsTUFBTSx5QkFBeUIsQ0FBQztBQUN4RCxPQUFPLElBQUksTUFBTSxjQUFjLENBQUM7QUFDaEMsT0FBTyxhQUFhLE1BQU0sbUJBQW1CLENBQUM7QUFZOUMsSUFBcUIsUUFBUSxHQUE3QixNQUFxQixRQUFTLFNBQVEsU0FBd0I7SUFRNUQsYUFBYTtRQUNYLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDOUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxHQUFHLGFBQWEsQ0FBQztRQUNuQyxNQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDbkMsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNyQyxNQUFNLGNBQWMsR0FBRyxVQUFVLElBQUksVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLFNBQVMsRUFBRSxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQzNGLE9BQU8sQ0FDTCxvQkFBQyxpQkFBaUIsb0JBQ1osY0FBYyxJQUNsQixJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sSUFBSSxJQUFJLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFDN0MsU0FBUyxFQUFFLEdBQUcsS0FBSyxJQUFJLEVBQ3ZCLEdBQUcsRUFBRSxHQUFHLElBQ1IsQ0FDSCxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsTUFBTTtRQUNKLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQzlCLE9BQU8sb0JBQUMsSUFBSSxJQUFDLE1BQU0sRUFBRSxNQUFNLElBQUcsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFRLENBQUM7SUFDN0QsQ0FBQztDQUNGLENBQUE7QUE1QlEsa0JBQVMsR0FBRztJQUNqQixNQUFNLEVBQUUsU0FBUyxDQUFDLE1BQU07SUFDeEIsSUFBSSxFQUFFLFNBQVMsQ0FBQyxNQUFNO0lBQ3RCLElBQUksRUFBRSxTQUFTLENBQUMsTUFBTTtJQUN0QixVQUFVLEVBQUUsU0FBUyxDQUFDLE1BQU07Q0FDN0IsQ0FBQztBQU5pQixRQUFRO0lBRDVCLFFBQVE7R0FDWSxRQUFRLENBNkI1QjtlQTdCb0IsUUFBUSIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvaHVpaHVhd2svRG9jdW1lbnRzL29wdC9jaG9lcm9kb24tdWkvY29tcG9uZW50cy1wcm8vaW50bC1maWVsZC9JbnRsTGlzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IG9ic2VydmVyIH0gZnJvbSAnbW9ieC1yZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgZ2V0Q29uZmlnIH0gZnJvbSAnY2hvZXJvZG9uLXVpL2xpYi9jb25maWd1cmUnO1xuaW1wb3J0IE9ic2VydmVyVGV4dEZpZWxkIGZyb20gJy4uL3RleHQtZmllbGQvVGV4dEZpZWxkJztcbmltcG9ydCBGb3JtIGZyb20gJy4uL2Zvcm0vRm9ybSc7XG5pbXBvcnQgbG9jYWxlQ29udGV4dCBmcm9tICcuLi9sb2NhbGUtY29udGV4dCc7XG5pbXBvcnQgUmVjb3JkIGZyb20gJy4uL2RhdGEtc2V0L1JlY29yZCc7XG5pbXBvcnQgeyBMYW5nIH0gZnJvbSAnLi4vbG9jYWxlLWNvbnRleHQvZW51bSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW50bExpc3RQcm9wcyB7XG4gIHJlY29yZD86IFJlY29yZDtcbiAgbmFtZT86IHN0cmluZztcbiAgbGFuZzogTGFuZztcbiAgbWF4TGVuZ3Rocz86IG9iamVjdDtcbn1cblxuQG9ic2VydmVyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbnRsTGlzdCBleHRlbmRzIENvbXBvbmVudDxJbnRsTGlzdFByb3BzPiB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgcmVjb3JkOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgbGFuZzogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBtYXhMZW5ndGhzOiBQcm9wVHlwZXMub2JqZWN0LFxuICB9O1xuXG4gIHJlbmRlck9wdGlvbnMoKSB7XG4gICAgY29uc3QgeyBuYW1lLCBsYW5nLCBtYXhMZW5ndGhzIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgc3VwcG9ydHMgfSA9IGxvY2FsZUNvbnRleHQ7XG4gICAgY29uc3QgdGxzS2V5ID0gZ2V0Q29uZmlnKCd0bHNLZXknKTtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoc3VwcG9ydHMpLm1hcChrZXkgPT4ge1xuICAgICAgY29uc3QgbWF4TGVuZ3RoUHJvcHMgPSBtYXhMZW5ndGhzICYmIG1heExlbmd0aHNba2V5XSA/IHsgbWF4TGVuZ3RoOiBtYXhMZW5ndGhzW2tleV0gfSA6IHt9O1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPE9ic2VydmVyVGV4dEZpZWxkXG4gICAgICAgICAgey4uLm1heExlbmd0aFByb3BzfVxuICAgICAgICAgIG5hbWU9e25hbWUgPyBgJHt0bHNLZXl9LiR7bmFtZX0uJHtrZXl9YCA6IGtleX1cbiAgICAgICAgICBhdXRvRm9jdXM9e2tleSA9PT0gbGFuZ31cbiAgICAgICAgICBrZXk9e2tleX1cbiAgICAgICAgLz5cbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyByZWNvcmQgfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIDxGb3JtIHJlY29yZD17cmVjb3JkfT57dGhpcy5yZW5kZXJPcHRpb25zKCl9PC9Gb3JtPjtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9