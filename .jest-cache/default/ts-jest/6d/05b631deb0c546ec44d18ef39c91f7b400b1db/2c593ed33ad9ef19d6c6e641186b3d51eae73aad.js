import { isMoment } from 'moment';
import isNumber from 'lodash/isNumber';
import defaultTo from 'lodash/defaultTo';
export const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 2 ** 53 - 1;
export function getPrecision(value) {
    const valueString = value.toString();
    if (valueString.indexOf('e-') >= 0) {
        return parseInt(valueString.slice(valueString.indexOf('e-') + 2), 10);
    }
    if (valueString.indexOf('.') >= 0) {
        return valueString.length - valueString.indexOf('.') - 1;
    }
    return 0;
}
function getMaxPrecision(value, step) {
    const stepPrecision = getPrecision(step);
    const currentValuePrecision = getPrecision(value);
    if (!value) {
        return stepPrecision;
    }
    return Math.max(currentValuePrecision, stepPrecision);
}
function getPrecisionFactor(value, step) {
    return 10 ** getMaxPrecision(value, step);
}
function precisionFix(value, precisionFactor) {
    return Math.round(value * precisionFactor);
}
export function plus(...values) {
    if (values.length > 2) {
        return plus(values.shift(), plus(...values));
    }
    if (values.length < 2) {
        return values[0];
    }
    const v1 = values[0];
    const v2 = values[1];
    const precisionFactor = getPrecisionFactor(v1, v2);
    return (precisionFix(v1, precisionFactor) + precisionFix(v2, precisionFactor)) / precisionFactor;
}
function getBeforeStepValue(value, minFactor, stepFactor) {
    return value - ((value - minFactor) % stepFactor);
}
function getNearStepMoments(value, step, unit) {
    const unitValue = value.get(unit);
    const mod = unitValue % step;
    if (mod !== 0) {
        const before = unitValue - mod;
        const after = before + step;
        return [value.clone().set(unit, before), value.clone().set(unit, after)];
    }
}
export function getNearStepValues(value, step, min, max) {
    if (isNumber(step)) {
        if (isNumber(value)) {
            min = defaultTo(Number(min), -MAX_SAFE_INTEGER);
            max = defaultTo(Number(max), MAX_SAFE_INTEGER);
            const precisionFactor = getPrecisionFactor(value, step);
            const valueFactor = precisionFix(value, precisionFactor);
            const minFactor = precisionFix(min, precisionFactor);
            const minFactorBase = min === -MAX_SAFE_INTEGER ? 0 : minFactor;
            const maxFactor = precisionFix(max, precisionFactor);
            const stepFactor = precisionFix(step, precisionFactor);
            let beforeStepFactor = getBeforeStepValue(valueFactor, minFactorBase, stepFactor);
            if (beforeStepFactor === valueFactor) {
                return undefined;
            }
            if (beforeStepFactor > maxFactor) {
                beforeStepFactor = getBeforeStepValue(maxFactor, minFactorBase, stepFactor);
            }
            else if (beforeStepFactor < minFactor) {
                beforeStepFactor = minFactor;
            }
            const afterStepFactor = beforeStepFactor + stepFactor;
            const values = [beforeStepFactor / precisionFactor];
            if (afterStepFactor <= maxFactor) {
                values.push(afterStepFactor / precisionFactor);
            }
            return values;
        }
    }
    else if (isMoment(value)) {
        const { hour, minute, second } = step;
        if (second) {
            return getNearStepMoments(value, second, "s" /* second */);
        }
        if (minute) {
            return getNearStepMoments(value, minute, "m" /* minute */);
        }
        if (hour) {
            return getNearStepMoments(value, hour, "h" /* hour */);
        }
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,