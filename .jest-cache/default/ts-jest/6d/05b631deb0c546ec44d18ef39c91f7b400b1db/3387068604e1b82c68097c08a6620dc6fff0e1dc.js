import * as React from 'react';
import classNames from 'classnames';
// @ts-ignore
import CSSMotion from 'rc-animate/lib/CSSMotion';
// @ts-ignore
import TreeNode from './TreeNode';
import { getTreeNodeProps } from './utils/treeUtil';
import { TreeContext } from './contextTypes';
// @ts-ignore
const MotionTreeNode = ({ className, style, motion, motionNodes, motionType, onMotionEnd, active, treeNodeRequiredProps, ...props }, ref) => {
    const [visible, setVisible] = React.useState(true);
    // @ts-ignore
    const { prefixCls } = React.useContext(TreeContext);
    React.useEffect(() => {
        if (motionNodes && motionType === 'hide' && visible) {
            setVisible(false);
        }
    }, [motionNodes]);
    if (motionNodes) {
        return (React.createElement(CSSMotion, Object.assign({ ref: ref, visible: visible }, motion, { motionAppear: motionType === 'show', onAppearEnd: onMotionEnd, onLeaveEnd: onMotionEnd }), ({ className: motionClassName, style: motionStyle }, motionRef) => (React.createElement("div", { ref: motionRef, className: classNames(`${prefixCls}-treenode-motion`, motionClassName), style: motionStyle }, motionNodes.map((treeNode) => {
            const { data: { key, ...restProps }, isStart, isEnd, } = treeNode;
            delete restProps.children;
            const treeNodeProps = getTreeNodeProps(key, treeNodeRequiredProps);
            return (React.createElement(TreeNode, Object.assign({}, restProps, treeNodeProps, { active: active, data: treeNode.data, key: key, isStart: isStart, isEnd: isEnd })));
        })))));
    }
    return (React.createElement(TreeNode, Object.assign({ domRef: ref, className: className, style: style }, props, { active: active })));
};
MotionTreeNode.displayName = 'MotionTreeNode';
const RefMotionTreeNode = React.forwardRef(MotionTreeNode);
export default RefMotionTreeNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvcmMtY29tcG9uZW50cy90cmVlL01vdGlvblRyZWVOb2RlLnRzeCIsIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMvQixPQUFPLFVBQVUsTUFBTSxZQUFZLENBQUM7QUFDcEMsYUFBYTtBQUNiLE9BQU8sU0FBUyxNQUFNLDBCQUEwQixDQUFDO0FBQ2pELGFBQWE7QUFDYixPQUFPLFFBQTJCLE1BQU0sWUFBWSxDQUFDO0FBRXJELE9BQU8sRUFBRSxnQkFBZ0IsRUFBeUIsTUFBTSxrQkFBa0IsQ0FBQztBQUMzRSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFXN0MsYUFBYTtBQUNiLE1BQU0sY0FBYyxHQUdoQixDQUNGLEVBQ0UsU0FBUyxFQUNULEtBQUssRUFDTCxNQUFNLEVBQ04sV0FBVyxFQUNYLFVBQVUsRUFDVixXQUFXLEVBQ1gsTUFBTSxFQUNOLHFCQUFxQixFQUNyQixHQUFHLEtBQUssRUFDVCxFQUNELEdBQUcsRUFDSCxFQUFFO0lBQ0YsTUFBTSxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ25ELGFBQWE7SUFDYixNQUFNLEVBQUUsU0FBUyxFQUFFLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUVwRCxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtRQUNuQixJQUFJLFdBQVcsSUFBSSxVQUFVLEtBQUssTUFBTSxJQUFJLE9BQU8sRUFBRTtZQUNuRCxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDbkI7SUFDSCxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO0lBRWxCLElBQUksV0FBVyxFQUFFO1FBQ2YsT0FBTyxDQUNMLG9CQUFDLFNBQVMsa0JBQ1IsR0FBRyxFQUFFLEdBQUcsRUFDUixPQUFPLEVBQUUsT0FBTyxJQUNaLE1BQU0sSUFDVixZQUFZLEVBQUUsVUFBVSxLQUFLLE1BQU0sRUFDbkMsV0FBVyxFQUFFLFdBQVcsRUFDeEIsVUFBVSxFQUFFLFdBQVcsS0FFdEIsQ0FBQyxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxFQUFFLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FDbEUsNkJBQ0UsR0FBRyxFQUFFLFNBQVMsRUFDZCxTQUFTLEVBQUUsVUFBVSxDQUNuQixHQUFHLFNBQVMsa0JBQWtCLEVBQzlCLGVBQWUsQ0FDaEIsRUFDRCxLQUFLLEVBQUUsV0FBVyxJQUVqQixXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBcUIsRUFBRSxFQUFFO1lBQ3pDLE1BQU0sRUFDSixJQUFJLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxTQUFTLEVBQUUsRUFDM0IsT0FBTyxFQUNQLEtBQUssR0FDTixHQUFHLFFBQVEsQ0FBQztZQUNiLE9BQU8sU0FBUyxDQUFDLFFBQVEsQ0FBQztZQUUxQixNQUFNLGFBQWEsR0FBRyxnQkFBZ0IsQ0FDcEMsR0FBRyxFQUNILHFCQUFxQixDQUN0QixDQUFDO1lBRUYsT0FBTyxDQUNMLG9CQUFDLFFBQVEsb0JBQ0gsU0FBUyxFQUNULGFBQWEsSUFDakIsTUFBTSxFQUFFLE1BQU0sRUFDZCxJQUFJLEVBQUUsUUFBUSxDQUFDLElBQUksRUFDbkIsR0FBRyxFQUFFLEdBQUcsRUFDUixPQUFPLEVBQUUsT0FBTyxFQUNoQixLQUFLLEVBQUUsS0FBSyxJQUNaLENBQ0gsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUNFLENBQ1AsQ0FDUyxDQUNiLENBQUM7S0FDSDtJQUNELE9BQU8sQ0FDTCxvQkFBQyxRQUFRLGtCQUNQLE1BQU0sRUFBRSxHQUFHLEVBQ1gsU0FBUyxFQUFFLFNBQVMsRUFDcEIsS0FBSyxFQUFFLEtBQUssSUFDUixLQUFLLElBQ1QsTUFBTSxFQUFFLE1BQU0sSUFDZCxDQUNILENBQUM7QUFDSixDQUFDLENBQUM7QUFFRixjQUFjLENBQUMsV0FBVyxHQUFHLGdCQUFnQixDQUFDO0FBRTlDLE1BQU0saUJBQWlCLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUUzRCxlQUFlLGlCQUFpQixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9odWlodWF3ay9Eb2N1bWVudHMvb3B0L2Nob2Vyb2Rvbi11aS9jb21wb25lbnRzL3JjLWNvbXBvbmVudHMvdHJlZS9Nb3Rpb25UcmVlTm9kZS50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgQ1NTTW90aW9uIGZyb20gJ3JjLWFuaW1hdGUvbGliL0NTU01vdGlvbic7XG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgVHJlZU5vZGUsIHsgVHJlZU5vZGVQcm9wcyB9IGZyb20gJy4vVHJlZU5vZGUnO1xuaW1wb3J0IHsgRmxhdHRlbk5vZGUgfSBmcm9tICcuL2ludGVyZmFjZSc7XG5pbXBvcnQgeyBnZXRUcmVlTm9kZVByb3BzLCBUcmVlTm9kZVJlcXVpcmVkUHJvcHMgfSBmcm9tICcuL3V0aWxzL3RyZWVVdGlsJztcbmltcG9ydCB7IFRyZWVDb250ZXh0IH0gZnJvbSAnLi9jb250ZXh0VHlwZXMnO1xuXG5pbnRlcmZhY2UgTW90aW9uVHJlZU5vZGVQcm9wcyBleHRlbmRzIE9taXQ8VHJlZU5vZGVQcm9wcywgJ2RvbVJlZic+IHtcbiAgYWN0aXZlOiBib29sZWFuO1xuICBtb3Rpb24/OiBhbnk7XG4gIG1vdGlvbk5vZGVzPzogRmxhdHRlbk5vZGVbXTtcbiAgb25Nb3Rpb25FbmQ6ICgpID0+IHZvaWQ7XG4gIG1vdGlvblR5cGU/OiAnc2hvdycgfCAnaGlkZSc7XG5cbiAgdHJlZU5vZGVSZXF1aXJlZFByb3BzOiBUcmVlTm9kZVJlcXVpcmVkUHJvcHM7XG59XG4vLyBAdHMtaWdub3JlXG5jb25zdCBNb3Rpb25UcmVlTm9kZTogUmVhY3QuRm9yd2FyZFJlZlJlbmRlckZ1bmN0aW9uPFxuICBDU1NNb3Rpb24sXG4gIE1vdGlvblRyZWVOb2RlUHJvcHNcbj4gPSAoXG4gIHtcbiAgICBjbGFzc05hbWUsXG4gICAgc3R5bGUsXG4gICAgbW90aW9uLFxuICAgIG1vdGlvbk5vZGVzLFxuICAgIG1vdGlvblR5cGUsXG4gICAgb25Nb3Rpb25FbmQsXG4gICAgYWN0aXZlLFxuICAgIHRyZWVOb2RlUmVxdWlyZWRQcm9wcyxcbiAgICAuLi5wcm9wc1xuICB9LFxuICByZWYsXG4pID0+IHtcbiAgY29uc3QgW3Zpc2libGUsIHNldFZpc2libGVdID0gUmVhY3QudXNlU3RhdGUodHJ1ZSk7XG4gIC8vIEB0cy1pZ25vcmVcbiAgY29uc3QgeyBwcmVmaXhDbHMgfSA9IFJlYWN0LnVzZUNvbnRleHQoVHJlZUNvbnRleHQpO1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKG1vdGlvbk5vZGVzICYmIG1vdGlvblR5cGUgPT09ICdoaWRlJyAmJiB2aXNpYmxlKSB7XG4gICAgICBzZXRWaXNpYmxlKGZhbHNlKTtcbiAgICB9XG4gIH0sIFttb3Rpb25Ob2Rlc10pO1xuXG4gIGlmIChtb3Rpb25Ob2Rlcykge1xuICAgIHJldHVybiAoXG4gICAgICA8Q1NTTW90aW9uXG4gICAgICAgIHJlZj17cmVmfVxuICAgICAgICB2aXNpYmxlPXt2aXNpYmxlfVxuICAgICAgICB7Li4ubW90aW9ufVxuICAgICAgICBtb3Rpb25BcHBlYXI9e21vdGlvblR5cGUgPT09ICdzaG93J31cbiAgICAgICAgb25BcHBlYXJFbmQ9e29uTW90aW9uRW5kfVxuICAgICAgICBvbkxlYXZlRW5kPXtvbk1vdGlvbkVuZH1cbiAgICAgID5cbiAgICAgICAgeyh7IGNsYXNzTmFtZTogbW90aW9uQ2xhc3NOYW1lLCBzdHlsZTogbW90aW9uU3R5bGUgfSwgbW90aW9uUmVmKSA9PiAoXG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgcmVmPXttb3Rpb25SZWZ9XG4gICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoXG4gICAgICAgICAgICAgIGAke3ByZWZpeENsc30tdHJlZW5vZGUtbW90aW9uYCxcbiAgICAgICAgICAgICAgbW90aW9uQ2xhc3NOYW1lLFxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIHN0eWxlPXttb3Rpb25TdHlsZX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7bW90aW9uTm9kZXMubWFwKCh0cmVlTm9kZTogRmxhdHRlbk5vZGUpID0+IHtcbiAgICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICAgIGRhdGE6IHsga2V5LCAuLi5yZXN0UHJvcHMgfSxcbiAgICAgICAgICAgICAgICBpc1N0YXJ0LFxuICAgICAgICAgICAgICAgIGlzRW5kLFxuICAgICAgICAgICAgICB9ID0gdHJlZU5vZGU7XG4gICAgICAgICAgICAgIGRlbGV0ZSByZXN0UHJvcHMuY2hpbGRyZW47XG5cbiAgICAgICAgICAgICAgY29uc3QgdHJlZU5vZGVQcm9wcyA9IGdldFRyZWVOb2RlUHJvcHMoXG4gICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgIHRyZWVOb2RlUmVxdWlyZWRQcm9wcyxcbiAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxUcmVlTm9kZVxuICAgICAgICAgICAgICAgICAgey4uLnJlc3RQcm9wc31cbiAgICAgICAgICAgICAgICAgIHsuLi50cmVlTm9kZVByb3BzfVxuICAgICAgICAgICAgICAgICAgYWN0aXZlPXthY3RpdmV9XG4gICAgICAgICAgICAgICAgICBkYXRhPXt0cmVlTm9kZS5kYXRhfVxuICAgICAgICAgICAgICAgICAga2V5PXtrZXl9XG4gICAgICAgICAgICAgICAgICBpc1N0YXJ0PXtpc1N0YXJ0fVxuICAgICAgICAgICAgICAgICAgaXNFbmQ9e2lzRW5kfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKX1cbiAgICAgIDwvQ1NTTW90aW9uPlxuICAgICk7XG4gIH1cbiAgcmV0dXJuIChcbiAgICA8VHJlZU5vZGVcbiAgICAgIGRvbVJlZj17cmVmfVxuICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWV9XG4gICAgICBzdHlsZT17c3R5bGV9XG4gICAgICB7Li4ucHJvcHN9XG4gICAgICBhY3RpdmU9e2FjdGl2ZX1cbiAgICAvPlxuICApO1xufTtcblxuTW90aW9uVHJlZU5vZGUuZGlzcGxheU5hbWUgPSAnTW90aW9uVHJlZU5vZGUnO1xuXG5jb25zdCBSZWZNb3Rpb25UcmVlTm9kZSA9IFJlYWN0LmZvcndhcmRSZWYoTW90aW9uVHJlZU5vZGUpO1xuXG5leHBvcnQgZGVmYXVsdCBSZWZNb3Rpb25UcmVlTm9kZTtcbiJdLCJ2ZXJzaW9uIjozfQ==