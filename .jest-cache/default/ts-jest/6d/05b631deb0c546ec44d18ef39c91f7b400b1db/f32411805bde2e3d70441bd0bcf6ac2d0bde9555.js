import React, { Component } from 'react';
import classNames from 'classnames';
import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';
import Icon from '../icon';
import Tooltip from '../tooltip';
import Progress from '../progress';
import Animate from '../animate';
import { getPrefixCls } from '../configure';
import { previewImage } from './utils';
const isImageUrl = (url) => {
    return /^data:image\//.test(url) || /\.(webp|svg|png|gif|jpg|jpeg)$/.test(url);
};
// a little function to help us with reordering the result
const reorder = (list, startIndex, endIndex) => {
    const result = Array.from(list);
    const [removed] = result.splice(startIndex, 1);
    result.splice(endIndex, 0, removed);
    return result;
};
export default class UploadList extends Component {
    constructor() {
        super(...arguments);
        this.handleClose = (file) => {
            const { onRemove } = this.props;
            if (onRemove) {
                onRemove(file);
            }
        };
        this.handlePreview = (file, e) => {
            const { onPreview } = this.props;
            if (!onPreview) {
                return;
            }
            e.preventDefault();
            return onPreview(file);
        };
        /**
         * 拖拽事件
         * @param result
         */
        this.onDragEnd = (result) => {
            const { items, onDragEnd } = this.props;
            // dropped outside the list
            if (!result.destination) {
                return;
            }
            const dragItems = reorder(items, result.source.index, result.destination.index);
            onDragEnd(dragItems);
        };
    }
    componentDidUpdate() {
        const { listType, items, previewFile } = this.props;
        if (listType !== 'picture' && listType !== 'picture-card') {
            return;
        }
        (items || []).forEach(file => {
            if (typeof document === 'undefined' ||
                typeof window === 'undefined' ||
                !window.FileReader ||
                !window.File ||
                !(file.originFileObj instanceof File || file.originFileObj instanceof Blob) ||
                file.thumbUrl !== undefined) {
                return;
            }
            file.thumbUrl = '';
            if (previewFile) {
                previewFile(file.originFileObj).then((previewDataUrl) => {
                    // Need append '' to avoid dead loop
                    file.thumbUrl = previewDataUrl || '';
                    this.forceUpdate();
                });
            }
        });
    }
    render() {
        const { prefixCls: customizePrefixCls, items = [], listType, showPreviewIcon, showRemoveIcon, locale, dragUploadList, } = this.props;
        const prefixCls = getPrefixCls('upload', customizePrefixCls);
        const list = items.map((file, index) => {
            let progress;
            let icon = React.createElement(Icon, { type: file.status === 'uploading' ? 'loading' : 'attach_file' });
            if (listType === 'picture' || listType === 'picture-card') {
                if (listType === 'picture-card' && file.status === 'uploading') {
                    icon = React.createElement("div", { className: `${prefixCls}-list-item-uploading-text` }, locale.uploading);
                }
                else if (!file.thumbUrl && !file.url) {
                    icon = React.createElement(Icon, { className: `${prefixCls}-list-item-thumbnail`, type: "picture" });
                }
                else {
                    const thumbnail = isImageUrl((file.thumbUrl || file.url)) ? (React.createElement("img", { src: file.thumbUrl || file.url, alt: file.name })) : (React.createElement(Icon, { type: "file", style: { fontSize: 48, color: 'rgba(0,0,0,0.5)' } }));
                    icon = (React.createElement("a", { className: `${prefixCls}-list-item-thumbnail`, onClick: e => this.handlePreview(file, e), href: file.url || file.thumbUrl, target: "_blank", rel: "noopener noreferrer" }, thumbnail));
                }
            }
            if (file.status === 'uploading') {
                const { progressAttr } = this.props;
                // show loading icon if upload progress listener is disabled
                const loadingProgress = 'percent' in file ? (React.createElement(Progress, Object.assign({ type: "line" /* line */ }, progressAttr, { percent: file.percent }))) : null;
                progress = (React.createElement("div", { className: `${prefixCls}-list-item-progress`, key: "progress" }, loadingProgress));
            }
            const infoUploadingClass = classNames({
                [`${prefixCls}-list-item`]: true,
                [`${prefixCls}-list-item-${file.status}`]: true,
            });
            const preview = file.url ? (React.createElement("a", Object.assign({}, file.linkProps, { href: file.url, target: "_blank", rel: "noopener noreferrer", className: `${prefixCls}-list-item-name`, onClick: e => this.handlePreview(file, e), title: file.name }), file.name)) : (React.createElement("span", { className: `${prefixCls}-list-item-name`, onClick: e => this.handlePreview(file, e), title: file.name }, file.name));
            const style = file.url || file.thumbUrl
                ? undefined
                : {
                    pointerEvents: 'none',
                    opacity: 0.5,
                };
            const previewIcon = showPreviewIcon ? (React.createElement("a", { href: file.url || file.thumbUrl, target: "_blank", rel: "noopener noreferrer", style: style, onClick: e => this.handlePreview(file, e), title: locale.previewFile },
                React.createElement(Icon, { type: "visibility" }))) : null;
            const removeIcon = showRemoveIcon ? (React.createElement(Icon, { type: "delete", title: locale.removeFile, onClick: () => this.handleClose(file) })) : null;
            const removeIconCross = showRemoveIcon ? (React.createElement(Icon, { type: "close", title: locale.removeFile, onClick: () => this.handleClose(file) })) : null;
            const actions = listType === 'picture-card' && file.status !== 'uploading' ? (React.createElement("span", { className: `${prefixCls}-list-item-actions` },
                previewIcon,
                removeIcon)) : (removeIconCross);
            let message;
            if (file.response && typeof file.response === 'string') {
                message = file.response;
            }
            else {
                message = (file.error && file.error.statusText) || locale.uploadError;
            }
            const iconAndPreview = file.status === 'error' ? (React.createElement(Tooltip, { title: message },
                icon,
                preview)) : (React.createElement("span", null,
                icon,
                preview));
            if (dragUploadList) {
                return (React.createElement(Draggable, { key: file.uid, draggableId: String(file.uid), index: index }, provided => (React.createElement("div", Object.assign({ className: infoUploadingClass, key: file.uid, ref: provided.innerRef }, provided.draggableProps, provided.dragHandleProps),
                    React.createElement("div", { className: `${prefixCls}-list-item-info` }, iconAndPreview),
                    actions,
                    React.createElement(Animate, { transitionName: "fade", component: "" }, progress)))));
            }
            return (React.createElement("div", { className: infoUploadingClass, key: file.uid },
                React.createElement("div", { className: `${prefixCls}-list-item-info` }, iconAndPreview),
                actions,
                React.createElement(Animate, { transitionName: "fade", component: "" }, progress)));
        });
        const listClassNames = classNames({
            [`${prefixCls}-list`]: true,
            [`${prefixCls}-list-${listType}`]: true,
            [`${prefixCls}-list-drag`]: dragUploadList,
        });
        const animationDirection = listType === 'picture-card' ? 'animate-inline' : 'animate';
        if (dragUploadList) {
            return (React.createElement(DragDropContext, { onDragEnd: this.onDragEnd },
                React.createElement(Droppable, { droppableId: "droppable", direction: "horizontal" }, (provided, snapshot) => (React.createElement("div", Object.assign({ ref: provided.innerRef, style: {
                        background: snapshot.isDraggingOver ? '#f2f9f4' : '',
                        border: snapshot.isDraggingOver ? '2px dashed #1ab16f' : '',
                        display: 'inline-flex',
                        maxWidth: '100%',
                        flexWrap: 'wrap',
                        overflow: 'auto',
                    } }, provided.droppableProps, { className: listClassNames }),
                    list,
                    provided.placeholder)))));
        }
        return (React.createElement(Animate, { transitionName: `${prefixCls}-${animationDirection}`, component: "div", className: listClassNames }, list));
    }
}
UploadList.displayName = 'UploadList';
UploadList.defaultProps = {
    listType: 'text',
    progressAttr: {
        strokeWidth: 2,
        showInfo: false,
    },
    previewFile: previewImage,
    showRemoveIcon: true,
    showPreviewIcon: true,
    dragUploadList: false,
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,