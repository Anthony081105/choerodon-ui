import React, { Component } from 'react';
import classNames from 'classnames';
import LocaleReceiver from '../locale-provider/LocaleReceiver';
import warning from '../_util/warning';
import RcTreeSelect, { SHOW_ALL, SHOW_CHILD, SHOW_PARENT, TreeNode, } from '../rc-components/tree-select';
import { getPrefixCls } from '../configure';
export default class TreeSelect extends Component {
    constructor(props) {
        super(props);
        this.saveTreeSelect = (node) => {
            this.rcTreeSelect = node;
        };
        this.renderTreeSelect = (locale) => {
            const { prefixCls: customizePrefixCls, className, size, notFoundContent, dropdownStyle, dropdownClassName, ...restProps } = this.props;
            const prefixCls = getPrefixCls('select', customizePrefixCls);
            const cls = classNames({
                [`${prefixCls}-lg`]: size === "large" /* large */,
                [`${prefixCls}-sm`]: size === "small" /* small */,
            }, className);
            let checkable = restProps.treeCheckable;
            if (checkable) {
                checkable = React.createElement("span", { className: `${prefixCls}-tree-checkbox-inner` });
            }
            return (React.createElement(RcTreeSelect, Object.assign({}, restProps, { dropdownClassName: classNames(dropdownClassName, `${prefixCls}-tree-dropdown`), prefixCls: prefixCls, className: cls, dropdownStyle: { maxHeight: '100vh', overflow: 'auto', ...dropdownStyle }, treeCheckable: checkable, notFoundContent: notFoundContent || locale.notFoundContent, ref: this.saveTreeSelect })));
        };
        warning(props.multiple !== false || !props.treeCheckable, '`multiple` will alway be `true` when `treeCheckable` is true');
    }
    focus() {
        this.rcTreeSelect.focus();
    }
    blur() {
        this.rcTreeSelect.blur();
    }
    render() {
        return (React.createElement(LocaleReceiver, { componentName: "Select", defaultLocale: {} }, this.renderTreeSelect));
    }
}
TreeSelect.displayName = 'TreeSelect';
TreeSelect.TreeNode = TreeNode;
TreeSelect.SHOW_ALL = SHOW_ALL;
TreeSelect.SHOW_PARENT = SHOW_PARENT;
TreeSelect.SHOW_CHILD = SHOW_CHILD;
TreeSelect.defaultProps = {
    transitionName: 'slide-up',
    choiceTransitionName: 'zoom',
    showSearch: false,
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvdHJlZS1zZWxlY3QvaW5kZXgudHN4IiwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxFQUFFLEVBQUUsU0FBUyxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBQ3pDLE9BQU8sVUFBVSxNQUFNLFlBQVksQ0FBQztBQUdwQyxPQUFPLGNBQWMsTUFBTSxtQ0FBbUMsQ0FBQztBQUMvRCxPQUFPLE9BQU8sTUFBTSxrQkFBa0IsQ0FBQztBQUN2QyxPQUFPLFlBQVksRUFBRSxFQUNuQixRQUFRLEVBQ1IsVUFBVSxFQUNWLFdBQVcsRUFDWCxRQUFRLEdBQ1QsTUFBTSw4QkFBOEIsQ0FBQztBQUV0QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBSTVDLE1BQU0sQ0FBQyxPQUFPLE9BQU8sVUFBVyxTQUFRLFNBQStCO0lBbUJyRSxZQUFZLEtBQXNCO1FBQ2hDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQWdCZixtQkFBYyxHQUFHLENBQUMsSUFBeUIsRUFBRSxFQUFFO1lBQzdDLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1FBQzNCLENBQUMsQ0FBQztRQUVGLHFCQUFnQixHQUFHLENBQUMsTUFBb0IsRUFBRSxFQUFFO1lBQzFDLE1BQU0sRUFDSixTQUFTLEVBQUUsa0JBQWtCLEVBQzdCLFNBQVMsRUFDVCxJQUFJLEVBQ0osZUFBZSxFQUNmLGFBQWEsRUFDYixpQkFBaUIsRUFDakIsR0FBRyxTQUFTLEVBQ2IsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBRWYsTUFBTSxTQUFTLEdBQUcsWUFBWSxDQUFDLFFBQVEsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1lBQzdELE1BQU0sR0FBRyxHQUFHLFVBQVUsQ0FDcEI7Z0JBQ0UsQ0FBQyxHQUFHLFNBQVMsS0FBSyxDQUFDLEVBQUUsSUFBSSx3QkFBZTtnQkFDeEMsQ0FBQyxHQUFHLFNBQVMsS0FBSyxDQUFDLEVBQUUsSUFBSSx3QkFBZTthQUN6QyxFQUNELFNBQVMsQ0FDVixDQUFDO1lBRUYsSUFBSSxTQUFTLEdBQUcsU0FBUyxDQUFDLGFBQWEsQ0FBQztZQUN4QyxJQUFJLFNBQVMsRUFBRTtnQkFDYixTQUFTLEdBQUcsOEJBQU0sU0FBUyxFQUFFLEdBQUcsU0FBUyxzQkFBc0IsR0FBSSxDQUFDO2FBQ3JFO1lBQ0QsT0FBTyxDQUNMLG9CQUFDLFlBQVksb0JBQ1AsU0FBUyxJQUNiLGlCQUFpQixFQUFFLFVBQVUsQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLFNBQVMsZ0JBQWdCLENBQUMsRUFDOUUsU0FBUyxFQUFFLFNBQVMsRUFDcEIsU0FBUyxFQUFFLEdBQUcsRUFDZCxhQUFhLEVBQUUsRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsR0FBRyxhQUFhLEVBQUUsRUFDekUsYUFBYSxFQUFFLFNBQVMsRUFDeEIsZUFBZSxFQUFFLGVBQWUsSUFBSSxNQUFNLENBQUMsZUFBZSxFQUMxRCxHQUFHLEVBQUUsSUFBSSxDQUFDLGNBQWMsSUFDeEIsQ0FDSCxDQUFDO1FBQ0osQ0FBQyxDQUFDO1FBdERBLE9BQU8sQ0FDTCxLQUFLLENBQUMsUUFBUSxLQUFLLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQ2hELDhEQUE4RCxDQUMvRCxDQUFDO0lBQ0osQ0FBQztJQUVELEtBQUs7UUFDSCxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFFRCxJQUFJO1FBQ0YsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBNENELE1BQU07UUFDSixPQUFPLENBQ0wsb0JBQUMsY0FBYyxJQUFDLGFBQWEsRUFBQyxRQUFRLEVBQUMsYUFBYSxFQUFFLEVBQUUsSUFDckQsSUFBSSxDQUFDLGdCQUFnQixDQUNQLENBQ2xCLENBQUM7SUFDSixDQUFDOztBQW5GTSxzQkFBVyxHQUFHLFlBQVksQ0FBQztBQUUzQixtQkFBUSxHQUFHLFFBQVEsQ0FBQztBQUVwQixtQkFBUSxHQUFHLFFBQVEsQ0FBQztBQUVwQixzQkFBVyxHQUFHLFdBQVcsQ0FBQztBQUUxQixxQkFBVSxHQUFHLFVBQVUsQ0FBQztBQUV4Qix1QkFBWSxHQUFHO0lBQ3BCLGNBQWMsRUFBRSxVQUFVO0lBQzFCLG9CQUFvQixFQUFFLE1BQU07SUFDNUIsVUFBVSxFQUFFLEtBQUs7Q0FDbEIsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvaHVpaHVhd2svRG9jdW1lbnRzL29wdC9jaG9lcm9kb24tdWkvY29tcG9uZW50cy90cmVlLXNlbGVjdC9pbmRleC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHsgVHJlZVNlbGVjdFByb3BzIH0gZnJvbSAnLi9pbnRlcmZhY2UnO1xuaW1wb3J0IHsgU2VsZWN0TG9jYWxlIH0gZnJvbSAnLi4vc2VsZWN0JztcbmltcG9ydCBMb2NhbGVSZWNlaXZlciBmcm9tICcuLi9sb2NhbGUtcHJvdmlkZXIvTG9jYWxlUmVjZWl2ZXInO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnLi4vX3V0aWwvd2FybmluZyc7XG5pbXBvcnQgUmNUcmVlU2VsZWN0LCB7XG4gIFNIT1dfQUxMLFxuICBTSE9XX0NISUxELFxuICBTSE9XX1BBUkVOVCxcbiAgVHJlZU5vZGUsXG59IGZyb20gJy4uL3JjLWNvbXBvbmVudHMvdHJlZS1zZWxlY3QnO1xuaW1wb3J0IHsgU2l6ZSB9IGZyb20gJy4uL191dGlsL2VudW0nO1xuaW1wb3J0IHsgZ2V0UHJlZml4Q2xzIH0gZnJvbSAnLi4vY29uZmlndXJlJztcblxuZXhwb3J0IHsgVHJlZURhdGEsIFRyZWVTZWxlY3RQcm9wcyB9IGZyb20gJy4vaW50ZXJmYWNlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVHJlZVNlbGVjdCBleHRlbmRzIENvbXBvbmVudDxUcmVlU2VsZWN0UHJvcHMsIGFueT4ge1xuICBzdGF0aWMgZGlzcGxheU5hbWUgPSAnVHJlZVNlbGVjdCc7XG5cbiAgc3RhdGljIFRyZWVOb2RlID0gVHJlZU5vZGU7XG5cbiAgc3RhdGljIFNIT1dfQUxMID0gU0hPV19BTEw7XG5cbiAgc3RhdGljIFNIT1dfUEFSRU5UID0gU0hPV19QQVJFTlQ7XG5cbiAgc3RhdGljIFNIT1dfQ0hJTEQgPSBTSE9XX0NISUxEO1xuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgdHJhbnNpdGlvbk5hbWU6ICdzbGlkZS11cCcsXG4gICAgY2hvaWNlVHJhbnNpdGlvbk5hbWU6ICd6b29tJyxcbiAgICBzaG93U2VhcmNoOiBmYWxzZSxcbiAgfTtcblxuICBwcml2YXRlIHJjVHJlZVNlbGVjdDogYW55O1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBUcmVlU2VsZWN0UHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICB3YXJuaW5nKFxuICAgICAgcHJvcHMubXVsdGlwbGUgIT09IGZhbHNlIHx8ICFwcm9wcy50cmVlQ2hlY2thYmxlLFxuICAgICAgJ2BtdWx0aXBsZWAgd2lsbCBhbHdheSBiZSBgdHJ1ZWAgd2hlbiBgdHJlZUNoZWNrYWJsZWAgaXMgdHJ1ZScsXG4gICAgKTtcbiAgfVxuXG4gIGZvY3VzKCkge1xuICAgIHRoaXMucmNUcmVlU2VsZWN0LmZvY3VzKCk7XG4gIH1cblxuICBibHVyKCkge1xuICAgIHRoaXMucmNUcmVlU2VsZWN0LmJsdXIoKTtcbiAgfVxuXG4gIHNhdmVUcmVlU2VsZWN0ID0gKG5vZGU6IFJjVHJlZVNlbGVjdCB8IG51bGwpID0+IHtcbiAgICB0aGlzLnJjVHJlZVNlbGVjdCA9IG5vZGU7XG4gIH07XG5cbiAgcmVuZGVyVHJlZVNlbGVjdCA9IChsb2NhbGU6IFNlbGVjdExvY2FsZSkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHByZWZpeENsczogY3VzdG9taXplUHJlZml4Q2xzLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgc2l6ZSxcbiAgICAgIG5vdEZvdW5kQ29udGVudCxcbiAgICAgIGRyb3Bkb3duU3R5bGUsXG4gICAgICBkcm9wZG93bkNsYXNzTmFtZSxcbiAgICAgIC4uLnJlc3RQcm9wc1xuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgcHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCdzZWxlY3QnLCBjdXN0b21pemVQcmVmaXhDbHMpO1xuICAgIGNvbnN0IGNscyA9IGNsYXNzTmFtZXMoXG4gICAgICB7XG4gICAgICAgIFtgJHtwcmVmaXhDbHN9LWxnYF06IHNpemUgPT09IFNpemUubGFyZ2UsXG4gICAgICAgIFtgJHtwcmVmaXhDbHN9LXNtYF06IHNpemUgPT09IFNpemUuc21hbGwsXG4gICAgICB9LFxuICAgICAgY2xhc3NOYW1lLFxuICAgICk7XG5cbiAgICBsZXQgY2hlY2thYmxlID0gcmVzdFByb3BzLnRyZWVDaGVja2FibGU7XG4gICAgaWYgKGNoZWNrYWJsZSkge1xuICAgICAgY2hlY2thYmxlID0gPHNwYW4gY2xhc3NOYW1lPXtgJHtwcmVmaXhDbHN9LXRyZWUtY2hlY2tib3gtaW5uZXJgfSAvPjtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDxSY1RyZWVTZWxlY3RcbiAgICAgICAgey4uLnJlc3RQcm9wc31cbiAgICAgICAgZHJvcGRvd25DbGFzc05hbWU9e2NsYXNzTmFtZXMoZHJvcGRvd25DbGFzc05hbWUsIGAke3ByZWZpeENsc30tdHJlZS1kcm9wZG93bmApfVxuICAgICAgICBwcmVmaXhDbHM9e3ByZWZpeENsc31cbiAgICAgICAgY2xhc3NOYW1lPXtjbHN9XG4gICAgICAgIGRyb3Bkb3duU3R5bGU9e3sgbWF4SGVpZ2h0OiAnMTAwdmgnLCBvdmVyZmxvdzogJ2F1dG8nLCAuLi5kcm9wZG93blN0eWxlIH19XG4gICAgICAgIHRyZWVDaGVja2FibGU9e2NoZWNrYWJsZX1cbiAgICAgICAgbm90Rm91bmRDb250ZW50PXtub3RGb3VuZENvbnRlbnQgfHwgbG9jYWxlLm5vdEZvdW5kQ29udGVudH1cbiAgICAgICAgcmVmPXt0aGlzLnNhdmVUcmVlU2VsZWN0fVxuICAgICAgLz5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPExvY2FsZVJlY2VpdmVyIGNvbXBvbmVudE5hbWU9XCJTZWxlY3RcIiBkZWZhdWx0TG9jYWxlPXt7fX0+XG4gICAgICAgIHt0aGlzLnJlbmRlclRyZWVTZWxlY3R9XG4gICAgICA8L0xvY2FsZVJlY2VpdmVyPlxuICAgICk7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==