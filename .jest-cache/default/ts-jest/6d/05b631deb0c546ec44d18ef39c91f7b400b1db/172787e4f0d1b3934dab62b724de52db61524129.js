import { Children, cloneElement, PureComponent } from 'react';
export default class TriggerChild extends PureComponent {
    constructor(props, context) {
        super(props, context);
        const createChains = eventName => e => {
            if (eventName === 'Blur') {
                const { isClickScrollbar, popupHidden } = this.props;
                // 判断是否已经关闭
                if (popupHidden) {
                    isClickScrollbar.value = false;
                }
                const { value } = isClickScrollbar;
                if (value) {
                    e.target.focus();
                    return;
                }
            }
            const { [`on${eventName}`]: handle, children } = this.props;
            const child = Children.only(children);
            if (handle) {
                handle(eventName, child, e);
            }
            else if (child) {
                const { [`on${eventName}`]: childHandle } = child.props;
                if (childHandle) {
                    childHandle(e);
                }
            }
        };
        this.handleContextMenu = createChains('ContextMenu');
        this.handleClick = createChains('Click');
        this.handleMouseDown = createChains('MouseDown');
        this.handleMouseEnter = createChains('MouseEnter');
        this.handleMouseLeave = createChains('MouseLeave');
        this.handleFocus = createChains('Focus');
        this.handleBlur = createChains('Blur');
    }
    render() {
        const { children } = this.props;
        return cloneElement(Children.only(children), {
            onContextMenu: this.handleContextMenu,
            onClick: this.handleClick,
            onMouseDown: this.handleMouseDown,
            onMouseEnter: this.handleMouseEnter,
            onMouseLeave: this.handleMouseLeave,
            onFocus: this.handleFocus,
            onBlur: this.handleBlur,
        });
    }
}
TriggerChild.displayName = 'TriggerChild';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMtcHJvL3RyaWdnZXIvVHJpZ2dlckNoaWxkLnRzeCIsIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxhQUFhLEVBQWdCLE1BQU0sT0FBTyxDQUFDO0FBa0I1RSxNQUFNLENBQUMsT0FBTyxPQUFPLFlBQWEsU0FBUSxhQUFnQztJQWlCeEUsWUFBWSxLQUFLLEVBQUUsT0FBTztRQUN4QixLQUFLLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sWUFBWSxHQUFHLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDcEMsSUFBSSxTQUFTLEtBQUssTUFBTSxFQUFFO2dCQUN4QixNQUFNLEVBQUUsZ0JBQWdCLEVBQUUsV0FBVyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztnQkFDckQsV0FBVztnQkFDWCxJQUFJLFdBQVcsRUFBRTtvQkFDZixnQkFBZ0IsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO2lCQUNoQztnQkFDRCxNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsZ0JBQWdCLENBQUM7Z0JBQ25DLElBQUksS0FBSyxFQUFFO29CQUNULENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7b0JBQ2pCLE9BQU87aUJBQ1I7YUFDRjtZQUNELE1BQU0sRUFBRSxDQUFDLEtBQUssU0FBUyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQStCLENBQUM7WUFDdEYsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN0QyxJQUFJLE1BQU0sRUFBRTtnQkFDVixNQUFNLENBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQzthQUM3QjtpQkFBTSxJQUFJLEtBQUssRUFBRTtnQkFDaEIsTUFBTSxFQUFFLENBQUMsS0FBSyxTQUFTLEVBQUUsQ0FBQyxFQUFFLFdBQVcsRUFBRSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7Z0JBQ3hELElBQUksV0FBVyxFQUFFO29CQUNmLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDaEI7YUFDRjtRQUNILENBQUMsQ0FBQztRQUVGLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxZQUFZLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDckQsSUFBSSxDQUFDLFdBQVcsR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDekMsSUFBSSxDQUFDLGVBQWUsR0FBRyxZQUFZLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDakQsSUFBSSxDQUFDLGdCQUFnQixHQUFHLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNuRCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ25ELElBQUksQ0FBQyxXQUFXLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxVQUFVLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRCxNQUFNO1FBQ0osTUFBTSxFQUFFLFFBQVEsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDaEMsT0FBTyxZQUFZLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUF3QixDQUFDLEVBQUU7WUFDM0QsYUFBYSxFQUFFLElBQUksQ0FBQyxpQkFBaUI7WUFDckMsT0FBTyxFQUFFLElBQUksQ0FBQyxXQUFXO1lBQ3pCLFdBQVcsRUFBRSxJQUFJLENBQUMsZUFBZTtZQUNqQyxZQUFZLEVBQUUsSUFBSSxDQUFDLGdCQUFnQjtZQUNuQyxZQUFZLEVBQUUsSUFBSSxDQUFDLGdCQUFnQjtZQUNuQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFdBQVc7WUFDekIsTUFBTSxFQUFFLElBQUksQ0FBQyxVQUFVO1NBQ3hCLENBQUMsQ0FBQztJQUNMLENBQUM7O0FBL0RNLHdCQUFXLEdBQUcsY0FBYyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9odWlodWF3ay9Eb2N1bWVudHMvb3B0L2Nob2Vyb2Rvbi11aS9jb21wb25lbnRzLXByby90cmlnZ2VyL1RyaWdnZXJDaGlsZC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hpbGRyZW4sIGNsb25lRWxlbWVudCwgUHVyZUNvbXBvbmVudCwgUmVhY3RFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgdHlwZSBob29rID0gKGV2ZW50TmFtZTogc3RyaW5nLCBjaGlsZDogUmVhY3RFbGVtZW50PGFueT4sIGUpID0+IHZvaWQ7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHJpZ2dlckNoaWxkUHJvcHMge1xuICBvbkNvbnRleHRNZW51PzogaG9vaztcbiAgb25DbGljaz86IGhvb2s7XG4gIG9uTW91c2VEb3duPzogaG9vaztcbiAgb25Nb3VzZUVudGVyPzogaG9vaztcbiAgb25Nb3VzZUxlYXZlPzogaG9vaztcbiAgb25Gb2N1cz86IGhvb2s7XG4gIG9uQmx1cj86IGhvb2s7XG4gIGlzQ2xpY2tTY3JvbGxiYXI6IHtcbiAgICB2YWx1ZTogYm9vbGVhbiB8IHVuZGVmaW5lZFxuICB9O1xuICBwb3B1cEhpZGRlbj86IGJvb2xlYW4sXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRyaWdnZXJDaGlsZCBleHRlbmRzIFB1cmVDb21wb25lbnQ8VHJpZ2dlckNoaWxkUHJvcHM+IHtcbiAgc3RhdGljIGRpc3BsYXlOYW1lID0gJ1RyaWdnZXJDaGlsZCc7XG5cbiAgaGFuZGxlQ29udGV4dE1lbnU7XG5cbiAgaGFuZGxlQ2xpY2s7XG5cbiAgaGFuZGxlTW91c2VEb3duO1xuXG4gIGhhbmRsZU1vdXNlRW50ZXI7XG5cbiAgaGFuZGxlTW91c2VMZWF2ZTtcblxuICBoYW5kbGVGb2N1cztcblxuICBoYW5kbGVCbHVyO1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzLCBjb250ZXh0KSB7XG4gICAgc3VwZXIocHJvcHMsIGNvbnRleHQpO1xuICAgIGNvbnN0IGNyZWF0ZUNoYWlucyA9IGV2ZW50TmFtZSA9PiBlID0+IHtcbiAgICAgIGlmIChldmVudE5hbWUgPT09ICdCbHVyJykge1xuICAgICAgICBjb25zdCB7IGlzQ2xpY2tTY3JvbGxiYXIsIHBvcHVwSGlkZGVuIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICAvLyDliKTmlq3mmK/lkKblt7Lnu4/lhbPpl61cbiAgICAgICAgaWYgKHBvcHVwSGlkZGVuKSB7XG4gICAgICAgICAgaXNDbGlja1Njcm9sbGJhci52YWx1ZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgdmFsdWUgfSA9IGlzQ2xpY2tTY3JvbGxiYXI7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIGUudGFyZ2V0LmZvY3VzKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCB7IFtgb24ke2V2ZW50TmFtZX1gXTogaGFuZGxlLCBjaGlsZHJlbiB9ID0gdGhpcy5wcm9wcyBhcyB7IFtrZXk6IHN0cmluZ106IGFueSB9O1xuICAgICAgY29uc3QgY2hpbGQgPSBDaGlsZHJlbi5vbmx5KGNoaWxkcmVuKTtcbiAgICAgIGlmIChoYW5kbGUpIHtcbiAgICAgICAgaGFuZGxlKGV2ZW50TmFtZSwgY2hpbGQsIGUpO1xuICAgICAgfSBlbHNlIGlmIChjaGlsZCkge1xuICAgICAgICBjb25zdCB7IFtgb24ke2V2ZW50TmFtZX1gXTogY2hpbGRIYW5kbGUgfSA9IGNoaWxkLnByb3BzO1xuICAgICAgICBpZiAoY2hpbGRIYW5kbGUpIHtcbiAgICAgICAgICBjaGlsZEhhbmRsZShlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLmhhbmRsZUNvbnRleHRNZW51ID0gY3JlYXRlQ2hhaW5zKCdDb250ZXh0TWVudScpO1xuICAgIHRoaXMuaGFuZGxlQ2xpY2sgPSBjcmVhdGVDaGFpbnMoJ0NsaWNrJyk7XG4gICAgdGhpcy5oYW5kbGVNb3VzZURvd24gPSBjcmVhdGVDaGFpbnMoJ01vdXNlRG93bicpO1xuICAgIHRoaXMuaGFuZGxlTW91c2VFbnRlciA9IGNyZWF0ZUNoYWlucygnTW91c2VFbnRlcicpO1xuICAgIHRoaXMuaGFuZGxlTW91c2VMZWF2ZSA9IGNyZWF0ZUNoYWlucygnTW91c2VMZWF2ZScpO1xuICAgIHRoaXMuaGFuZGxlRm9jdXMgPSBjcmVhdGVDaGFpbnMoJ0ZvY3VzJyk7XG4gICAgdGhpcy5oYW5kbGVCbHVyID0gY3JlYXRlQ2hhaW5zKCdCbHVyJyk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBjaGlsZHJlbiB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gY2xvbmVFbGVtZW50KENoaWxkcmVuLm9ubHkoY2hpbGRyZW4gYXMgUmVhY3RFbGVtZW50KSwge1xuICAgICAgb25Db250ZXh0TWVudTogdGhpcy5oYW5kbGVDb250ZXh0TWVudSxcbiAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xpY2ssXG4gICAgICBvbk1vdXNlRG93bjogdGhpcy5oYW5kbGVNb3VzZURvd24sXG4gICAgICBvbk1vdXNlRW50ZXI6IHRoaXMuaGFuZGxlTW91c2VFbnRlcixcbiAgICAgIG9uTW91c2VMZWF2ZTogdGhpcy5oYW5kbGVNb3VzZUxlYXZlLFxuICAgICAgb25Gb2N1czogdGhpcy5oYW5kbGVGb2N1cyxcbiAgICAgIG9uQmx1cjogdGhpcy5oYW5kbGVCbHVyLFxuICAgIH0pO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=