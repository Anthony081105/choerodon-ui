import React, { Component, } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import shallowEqual from 'lodash/isEqual';
import RcCheckbox from '../rc-components/checkbox';
import { getPrefixCls } from '../configure';
export default class Checkbox extends Component {
    constructor() {
        super(...arguments);
        this.saveCheckbox = (node) => {
            this.rcCheckbox = node;
        };
    }
    shouldComponentUpdate(nextProps, nextState, nextContext) {
        const { checkboxGroup } = this.context;
        return (!shallowEqual(this.props, nextProps) ||
            !shallowEqual(this.state, nextState) ||
            !shallowEqual(checkboxGroup, nextContext.checkboxGroup));
    }
    focus() {
        this.rcCheckbox.focus();
    }
    blur() {
        this.rcCheckbox.blur();
    }
    render() {
        const { props, context } = this;
        const { prefixCls: customizePrefixCls, className, children, indeterminate, style, onMouseEnter, onMouseLeave, ...restProps } = props;
        const prefixCls = getPrefixCls('checkbox', customizePrefixCls);
        const { checkboxGroup } = context;
        const checkboxProps = { ...restProps };
        if (checkboxGroup) {
            checkboxProps.onChange = () => checkboxGroup.toggleOption({ label: children, value: props.value });
            checkboxProps.checked = checkboxGroup.value.indexOf(props.value) !== -1;
            checkboxProps.disabled = props.disabled || checkboxGroup.disabled;
        }
        const classString = classNames(className, {
            [`${prefixCls}-wrapper`]: true,
        });
        const checkboxClass = classNames({
            [`${prefixCls}-indeterminate`]: indeterminate,
        });
        return (React.createElement("label", { className: classString, style: style, onMouseEnter: onMouseEnter, onMouseLeave: onMouseLeave },
            React.createElement(RcCheckbox, Object.assign({}, checkboxProps, { prefixCls: prefixCls, className: checkboxClass, ref: this.saveCheckbox })),
            children !== undefined ? React.createElement("span", null, children) : null));
    }
}
Checkbox.displayName = 'Checkbox';
Checkbox.defaultProps = {
    indeterminate: false,
};
Checkbox.contextTypes = {
    checkboxGroup: PropTypes.any,
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvY2hlY2tib3gvQ2hlY2tib3gudHN4IiwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxFQUFFLEVBQ1osU0FBUyxHQUtWLE1BQU0sT0FBTyxDQUFDO0FBQ2YsT0FBTyxTQUFTLE1BQU0sWUFBWSxDQUFDO0FBQ25DLE9BQU8sVUFBVSxNQUFNLFlBQVksQ0FBQztBQUNwQyxPQUFPLFlBQVksTUFBTSxnQkFBZ0IsQ0FBQztBQUUxQyxPQUFPLFVBQVUsTUFBTSwyQkFBMkIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBbUM1QyxNQUFNLENBQUMsT0FBTyxPQUFPLFFBQVMsU0FBUSxTQUE0QjtJQUFsRTs7UUFvQ0UsaUJBQVksR0FBRyxDQUFDLElBQVMsRUFBRSxFQUFFO1lBQzNCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1FBQ3pCLENBQUMsQ0FBQztJQThDSixDQUFDO0lBckVDLHFCQUFxQixDQUNuQixTQUF3QixFQUN4QixTQUFhLEVBQ2IsV0FBaUM7UUFFakMsTUFBTSxFQUFFLGFBQWEsRUFBRSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDdkMsT0FBTyxDQUNMLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDO1lBQ3BDLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDO1lBQ3BDLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRSxXQUFXLENBQUMsYUFBYSxDQUFDLENBQ3hELENBQUM7SUFDSixDQUFDO0lBRUQsS0FBSztRQUNILElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVELElBQUk7UUFDRixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFNRCxNQUFNO1FBQ0osTUFBTSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFDaEMsTUFBTSxFQUNKLFNBQVMsRUFBRSxrQkFBa0IsRUFDN0IsU0FBUyxFQUNULFFBQVEsRUFDUixhQUFhLEVBQ2IsS0FBSyxFQUNMLFlBQVksRUFDWixZQUFZLEVBQ1osR0FBRyxTQUFTLEVBQ2IsR0FBRyxLQUFLLENBQUM7UUFDVixNQUFNLFNBQVMsR0FBRyxZQUFZLENBQUMsVUFBVSxFQUFFLGtCQUFrQixDQUFDLENBQUM7UUFDL0QsTUFBTSxFQUFFLGFBQWEsRUFBRSxHQUFHLE9BQU8sQ0FBQztRQUNsQyxNQUFNLGFBQWEsR0FBa0IsRUFBRSxHQUFHLFNBQVMsRUFBRSxDQUFDO1FBQ3RELElBQUksYUFBYSxFQUFFO1lBQ2pCLGFBQWEsQ0FBQyxRQUFRLEdBQUcsR0FBRyxFQUFFLENBQzVCLGFBQWEsQ0FBQyxZQUFZLENBQUMsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN0RSxhQUFhLENBQUMsT0FBTyxHQUFHLGFBQWEsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUN4RSxhQUFhLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLElBQUksYUFBYSxDQUFDLFFBQVEsQ0FBQztTQUNuRTtRQUNELE1BQU0sV0FBVyxHQUFHLFVBQVUsQ0FBQyxTQUFTLEVBQUU7WUFDeEMsQ0FBQyxHQUFHLFNBQVMsVUFBVSxDQUFDLEVBQUUsSUFBSTtTQUMvQixDQUFDLENBQUM7UUFDSCxNQUFNLGFBQWEsR0FBRyxVQUFVLENBQUM7WUFDL0IsQ0FBQyxHQUFHLFNBQVMsZ0JBQWdCLENBQUMsRUFBRSxhQUFhO1NBQzlDLENBQUMsQ0FBQztRQUNILE9BQU8sQ0FDTCwrQkFDRSxTQUFTLEVBQUUsV0FBVyxFQUN0QixLQUFLLEVBQUUsS0FBSyxFQUNaLFlBQVksRUFBRSxZQUFZLEVBQzFCLFlBQVksRUFBRSxZQUFZO1lBRTFCLG9CQUFDLFVBQVUsb0JBQ0wsYUFBYSxJQUNqQixTQUFTLEVBQUUsU0FBUyxFQUNwQixTQUFTLEVBQUUsYUFBYSxFQUN4QixHQUFHLEVBQUUsSUFBSSxDQUFDLFlBQVksSUFDdEI7WUFDRCxRQUFRLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxrQ0FBTyxRQUFRLENBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUNsRCxDQUNULENBQUM7SUFDSixDQUFDOztBQWxGTSxvQkFBVyxHQUFHLFVBQVUsQ0FBQztBQUl6QixxQkFBWSxHQUFHO0lBQ3BCLGFBQWEsRUFBRSxLQUFLO0NBQ3JCLENBQUM7QUFFSyxxQkFBWSxHQUFHO0lBQ3BCLGFBQWEsRUFBRSxTQUFTLENBQUMsR0FBRztDQUM3QixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9odWlodWF3ay9Eb2N1bWVudHMvb3B0L2Nob2Vyb2Rvbi11aS9jb21wb25lbnRzL2NoZWNrYm94L0NoZWNrYm94LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHtcbiAgQ29tcG9uZW50LFxuICBDU1NQcm9wZXJ0aWVzLFxuICBLZXlib2FyZEV2ZW50SGFuZGxlcixcbiAgTW91c2VFdmVudEhhbmRsZXIsXG4gIFJlYWN0Tm9kZSxcbn0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHNoYWxsb3dFcXVhbCBmcm9tICdsb2Rhc2gvaXNFcXVhbCc7XG5pbXBvcnQgQ2hlY2tib3hHcm91cCwgeyBDaGVja2JveEdyb3VwQ29udGV4dCB9IGZyb20gJy4vR3JvdXAnO1xuaW1wb3J0IFJjQ2hlY2tib3ggZnJvbSAnLi4vcmMtY29tcG9uZW50cy9jaGVja2JveCc7XG5pbXBvcnQgeyBnZXRQcmVmaXhDbHMgfSBmcm9tICcuLi9jb25maWd1cmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEFic3RyYWN0Q2hlY2tib3hQcm9wczxUPiB7XG4gIHByZWZpeENscz86IHN0cmluZztcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBkZWZhdWx0Q2hlY2tlZD86IGJvb2xlYW47XG4gIGNoZWNrZWQ/OiBib29sZWFuO1xuICBzdHlsZT86IENTU1Byb3BlcnRpZXM7XG4gIGRpc2FibGVkPzogYm9vbGVhbjtcbiAgb25DaGFuZ2U/OiAoZTogVCkgPT4gdm9pZDtcbiAgb25Nb3VzZUVudGVyPzogTW91c2VFdmVudEhhbmRsZXI8YW55PjtcbiAgb25Nb3VzZUxlYXZlPzogTW91c2VFdmVudEhhbmRsZXI8YW55PjtcbiAgb25LZXlQcmVzcz86IEtleWJvYXJkRXZlbnRIYW5kbGVyPGFueT47XG4gIG9uS2V5RG93bj86IEtleWJvYXJkRXZlbnRIYW5kbGVyPGFueT47XG4gIHZhbHVlPzogYW55O1xuICB0YWJJbmRleD86IG51bWJlcjtcbiAgbmFtZT86IHN0cmluZztcbiAgY2hpbGRyZW4/OiBSZWFjdE5vZGU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2hlY2tib3hQcm9wcyBleHRlbmRzIEFic3RyYWN0Q2hlY2tib3hQcm9wczxDaGVja2JveENoYW5nZUV2ZW50PiB7XG4gIGluZGV0ZXJtaW5hdGU/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENoZWNrYm94Q2hhbmdlRXZlbnRUYXJnZXQgZXh0ZW5kcyBDaGVja2JveFByb3BzIHtcbiAgY2hlY2tlZDogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDaGVja2JveENoYW5nZUV2ZW50IHtcbiAgdGFyZ2V0OiBDaGVja2JveENoYW5nZUV2ZW50VGFyZ2V0O1xuICBzdG9wUHJvcGFnYXRpb246ICgpID0+IHZvaWQ7XG4gIHByZXZlbnREZWZhdWx0OiAoKSA9PiB2b2lkO1xuICBuYXRpdmVFdmVudDogTW91c2VFdmVudDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2hlY2tib3ggZXh0ZW5kcyBDb21wb25lbnQ8Q2hlY2tib3hQcm9wcywge30+IHtcbiAgc3RhdGljIGRpc3BsYXlOYW1lID0gJ0NoZWNrYm94JztcblxuICBzdGF0aWMgR3JvdXA6IHR5cGVvZiBDaGVja2JveEdyb3VwO1xuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgaW5kZXRlcm1pbmF0ZTogZmFsc2UsXG4gIH07XG5cbiAgc3RhdGljIGNvbnRleHRUeXBlcyA9IHtcbiAgICBjaGVja2JveEdyb3VwOiBQcm9wVHlwZXMuYW55LFxuICB9O1xuXG4gIHByaXZhdGUgcmNDaGVja2JveDogYW55O1xuXG4gIHNob3VsZENvbXBvbmVudFVwZGF0ZShcbiAgICBuZXh0UHJvcHM6IENoZWNrYm94UHJvcHMsXG4gICAgbmV4dFN0YXRlOiB7fSxcbiAgICBuZXh0Q29udGV4dDogQ2hlY2tib3hHcm91cENvbnRleHQsXG4gICkge1xuICAgIGNvbnN0IHsgY2hlY2tib3hHcm91cCB9ID0gdGhpcy5jb250ZXh0O1xuICAgIHJldHVybiAoXG4gICAgICAhc2hhbGxvd0VxdWFsKHRoaXMucHJvcHMsIG5leHRQcm9wcykgfHxcbiAgICAgICFzaGFsbG93RXF1YWwodGhpcy5zdGF0ZSwgbmV4dFN0YXRlKSB8fFxuICAgICAgIXNoYWxsb3dFcXVhbChjaGVja2JveEdyb3VwLCBuZXh0Q29udGV4dC5jaGVja2JveEdyb3VwKVxuICAgICk7XG4gIH1cblxuICBmb2N1cygpIHtcbiAgICB0aGlzLnJjQ2hlY2tib3guZm9jdXMoKTtcbiAgfVxuXG4gIGJsdXIoKSB7XG4gICAgdGhpcy5yY0NoZWNrYm94LmJsdXIoKTtcbiAgfVxuXG4gIHNhdmVDaGVja2JveCA9IChub2RlOiBhbnkpID0+IHtcbiAgICB0aGlzLnJjQ2hlY2tib3ggPSBub2RlO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHByb3BzLCBjb250ZXh0IH0gPSB0aGlzO1xuICAgIGNvbnN0IHtcbiAgICAgIHByZWZpeENsczogY3VzdG9taXplUHJlZml4Q2xzLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBpbmRldGVybWluYXRlLFxuICAgICAgc3R5bGUsXG4gICAgICBvbk1vdXNlRW50ZXIsXG4gICAgICBvbk1vdXNlTGVhdmUsXG4gICAgICAuLi5yZXN0UHJvcHNcbiAgICB9ID0gcHJvcHM7XG4gICAgY29uc3QgcHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCdjaGVja2JveCcsIGN1c3RvbWl6ZVByZWZpeENscyk7XG4gICAgY29uc3QgeyBjaGVja2JveEdyb3VwIH0gPSBjb250ZXh0O1xuICAgIGNvbnN0IGNoZWNrYm94UHJvcHM6IENoZWNrYm94UHJvcHMgPSB7IC4uLnJlc3RQcm9wcyB9O1xuICAgIGlmIChjaGVja2JveEdyb3VwKSB7XG4gICAgICBjaGVja2JveFByb3BzLm9uQ2hhbmdlID0gKCkgPT5cbiAgICAgICAgY2hlY2tib3hHcm91cC50b2dnbGVPcHRpb24oeyBsYWJlbDogY2hpbGRyZW4sIHZhbHVlOiBwcm9wcy52YWx1ZSB9KTtcbiAgICAgIGNoZWNrYm94UHJvcHMuY2hlY2tlZCA9IGNoZWNrYm94R3JvdXAudmFsdWUuaW5kZXhPZihwcm9wcy52YWx1ZSkgIT09IC0xO1xuICAgICAgY2hlY2tib3hQcm9wcy5kaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkIHx8IGNoZWNrYm94R3JvdXAuZGlzYWJsZWQ7XG4gICAgfVxuICAgIGNvbnN0IGNsYXNzU3RyaW5nID0gY2xhc3NOYW1lcyhjbGFzc05hbWUsIHtcbiAgICAgIFtgJHtwcmVmaXhDbHN9LXdyYXBwZXJgXTogdHJ1ZSxcbiAgICB9KTtcbiAgICBjb25zdCBjaGVja2JveENsYXNzID0gY2xhc3NOYW1lcyh7XG4gICAgICBbYCR7cHJlZml4Q2xzfS1pbmRldGVybWluYXRlYF06IGluZGV0ZXJtaW5hdGUsXG4gICAgfSk7XG4gICAgcmV0dXJuIChcbiAgICAgIDxsYWJlbFxuICAgICAgICBjbGFzc05hbWU9e2NsYXNzU3RyaW5nfVxuICAgICAgICBzdHlsZT17c3R5bGV9XG4gICAgICAgIG9uTW91c2VFbnRlcj17b25Nb3VzZUVudGVyfVxuICAgICAgICBvbk1vdXNlTGVhdmU9e29uTW91c2VMZWF2ZX1cbiAgICAgID5cbiAgICAgICAgPFJjQ2hlY2tib3hcbiAgICAgICAgICB7Li4uY2hlY2tib3hQcm9wc31cbiAgICAgICAgICBwcmVmaXhDbHM9e3ByZWZpeENsc31cbiAgICAgICAgICBjbGFzc05hbWU9e2NoZWNrYm94Q2xhc3N9XG4gICAgICAgICAgcmVmPXt0aGlzLnNhdmVDaGVja2JveH1cbiAgICAgICAgLz5cbiAgICAgICAge2NoaWxkcmVuICE9PSB1bmRlZmluZWQgPyA8c3Bhbj57Y2hpbGRyZW59PC9zcGFuPiA6IG51bGx9XG4gICAgICA8L2xhYmVsPlxuICAgICk7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==