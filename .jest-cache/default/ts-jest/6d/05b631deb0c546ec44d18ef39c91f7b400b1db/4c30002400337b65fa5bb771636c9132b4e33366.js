import * as React from 'react';
import classNames from 'classnames';
import omit from 'lodash/omit';
import debounce from 'lodash/debounce';
import Icon from '../icon';
import { conductExpandParent } from '../rc-components/tree/util';
import { convertDataToEntities, convertTreeToData } from '../rc-components/tree/utils/treeUtil';
import { getPrefixCls } from '../configure';
import Tree from './index';
import { calcRangeKeys, convertDirectoryKeysToNodes } from './utils/dictUtil';
function getIcon(props) {
    const { isLeaf, expanded, prefixCls } = props;
    const prefixCl = getPrefixCls('tree', prefixCls);
    if (isLeaf) {
        return React.createElement(Icon, { type: "insert_drive_file", className: `${prefixCl}-switcher-line-icon` });
    }
    return expanded ? React.createElement(Icon, { type: "baseline-file_copy", className: `${prefixCl}-switcher-line-icon` }) : React.createElement(Icon, { type: "library_books", className: `${prefixCl}-switcher-line-icon` });
}
function getTreeData({ treeData, children }) {
    return treeData || convertTreeToData(children);
}
class DirectoryTree extends React.Component {
    constructor(props) {
        super(props);
        this.onExpand = (expandedKeys, info) => {
            const { onExpand } = this.props;
            this.setUncontrolledState({ expandedKeys });
            // Call origin function
            if (onExpand) {
                return onExpand(expandedKeys, info);
            }
            return undefined;
        };
        this.onClick = (event, node) => {
            const { onClick, expandAction } = this.props;
            // Expand the tree
            if (expandAction === 'click') {
                this.onDebounceExpand(event, node);
            }
            if (onClick) {
                onClick(event, node);
            }
        };
        this.onDoubleClick = (event, node) => {
            const { onDoubleClick, expandAction } = this.props;
            // Expand the tree
            if (expandAction === 'doubleClick') {
                this.onDebounceExpand(event, node);
            }
            if (onDoubleClick) {
                onDoubleClick(event, node);
            }
        };
        this.onSelect = (keys, event) => {
            const { onSelect, multiple } = this.props;
            const { expandedKeys = [] } = this.state;
            const { node, nativeEvent } = event;
            const { key = '' } = node;
            const treeData = getTreeData(this.props);
            const newState = {};
            // We need wrap this event since some value is not same
            const newEvent = {
                ...event,
                selected: true,
            };
            // Windows / Mac single pick
            const ctrlPick = nativeEvent.ctrlKey || nativeEvent.metaKey;
            const shiftPick = nativeEvent.shiftKey;
            // Generate new selected keys
            let newSelectedKeys;
            if (multiple && ctrlPick) {
                // Control click
                newSelectedKeys = keys;
                this.lastSelectedKey = key;
                this.cachedSelectedKeys = newSelectedKeys;
                newEvent.selectedNodes = convertDirectoryKeysToNodes(treeData, newSelectedKeys);
            }
            else if (multiple && shiftPick) {
                // Shift click
                newSelectedKeys = Array.from(new Set([
                    ...(this.cachedSelectedKeys || []),
                    ...calcRangeKeys(treeData, expandedKeys, key, this.lastSelectedKey),
                ]));
                newEvent.selectedNodes = convertDirectoryKeysToNodes(treeData, newSelectedKeys);
            }
            else {
                // Single click
                newSelectedKeys = [key];
                this.lastSelectedKey = key;
                this.cachedSelectedKeys = newSelectedKeys;
                newEvent.selectedNodes = convertDirectoryKeysToNodes(treeData, newSelectedKeys);
            }
            newState.selectedKeys = newSelectedKeys;
            if (onSelect) {
                onSelect(newSelectedKeys, newEvent);
            }
            this.setUncontrolledState(newState);
        };
        this.setTreeRef = (node) => {
            this.tree = node;
        };
        this.expandFolderNode = (event, node) => {
            const { isLeaf } = node;
            if (isLeaf || event.shiftKey || event.metaKey || event.ctrlKey) {
                return;
            }
            // Get internal rc-tree
            const internalTree = this.tree.tree;
            // Call internal rc-tree expand function
            // https://github.com/C7n-design/C7n-design/issues/12567
            internalTree.onNodeExpand(event, node);
        };
        this.setUncontrolledState = (state) => {
            const newState = omit(state, Object.keys(this.props));
            if (Object.keys(newState).length) {
                this.setState(newState);
            }
        };
        this.renderDirectoryTree = () => {
            const { className, ...props } = this.props;
            const { expandedKeys, selectedKeys } = this.state;
            const prefixCls = this.getPrefixCls();
            const connectClassName = classNames(`${prefixCls}-directory`, className, {
                [`${prefixCls}-directory-rtl`]: true,
            });
            return (React.createElement(Tree, Object.assign({ icon: getIcon, ref: this.setTreeRef, blockNode: true }, props, { prefixCls: prefixCls, className: connectClassName, expandedKeys: expandedKeys, selectedKeys: selectedKeys, onSelect: this.onSelect, onClick: this.onClick, onDoubleClick: this.onDoubleClick, onExpand: this.onExpand })));
        };
        const { defaultExpandAll, defaultExpandParent, expandedKeys, defaultExpandedKeys } = props;
        const { keyEntities } = convertDataToEntities(getTreeData(props));
        // Selected keys
        this.state = {
            selectedKeys: props.selectedKeys || props.defaultSelectedKeys || [],
        };
        // Expanded keys
        if (defaultExpandAll) {
            this.state.expandedKeys = Object.keys(keyEntities);
        }
        else if (defaultExpandParent) {
            this.state.expandedKeys = conductExpandParent(expandedKeys || defaultExpandedKeys || [], keyEntities);
        }
        else {
            this.state.expandedKeys = expandedKeys || defaultExpandedKeys;
        }
        this.onDebounceExpand = debounce(this.expandFolderNode, 200, {
            leading: true,
        });
    }
    static getDerivedStateFromProps(nextProps) {
        const newState = {};
        if ('expandedKeys' in nextProps) {
            newState.expandedKeys = nextProps.expandedKeys;
        }
        if ('selectedKeys' in nextProps) {
            newState.selectedKeys = nextProps.selectedKeys;
        }
        return newState;
    }
    getPrefixCls() {
        const { prefixCls } = this.props;
        return getPrefixCls('tree', prefixCls);
    }
    render() {
        return this.renderDirectoryTree();
    }
}
DirectoryTree.defaultProps = {
    showIcon: true,
    expandAction: 'click',
};
export default DirectoryTree;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,