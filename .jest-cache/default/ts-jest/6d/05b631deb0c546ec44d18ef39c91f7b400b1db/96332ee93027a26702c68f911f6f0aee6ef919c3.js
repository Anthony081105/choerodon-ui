import { __decorate } from "tslib";
import React from 'react';
import { observer } from 'mobx-react';
import { omit } from 'lodash';
import Menu, { Item } from 'choerodon-ui/lib/rc-components/menu';
import { action } from 'mobx';
import autobind from '../_util/autobind';
import { getItemKey, Select } from '../select/Select';
import DataSet from '../data-set';
export class AutoComplete extends Select {
    constructor() {
        super(...arguments);
        this.isChoose = false;
        this.inputText = '';
    }
    getTriggerIconFont() {
        return '';
    }
    getNotFoundContent() {
        return null;
    }
    getOtherProps() {
        const otherProps = omit(super.getOtherProps(), [
            'searchable',
        ]);
        return otherProps;
    }
    handleChange(e) {
        this.isChoose = false;
        super.handleChange(e);
    }
    choose(record) {
        this.isChoose = true;
        super.choose(record);
    }
    handleFocus(e) {
        this.inputText = e.target?.value;
        super.handleFocus(e);
    }
    handleBlur(e) {
        if (!e.isDefaultPrevented()) {
            if (!this.isChoose) {
                const inputText = this.text || this.inputText;
                this.inputText = inputText;
                const temDs = new DataSet({
                    fields: [
                        { name: this.textField, type: "string" /* string */ },
                        { name: this.valueField, type: "string" /* string */ },
                    ],
                    data: [{
                            [this.textField]: inputText,
                            [this.valueField]: inputText,
                        }],
                });
                this.choose(temDs.current);
            }
            super.handleBlur(e);
        }
    }
    getMenu(menuProps = {}) {
        const { options, textField, valueField, props: { dropdownMenuStyle, optionRenderer, onOption }, } = this;
        const inputText = this.text || this.inputText;
        if (!options) {
            return null;
        }
        const optGroups = [];
        const menuDisabled = this.isDisabled();
        const selectedKeys = [];
        options.forEach(record => {
            const value = record.get(valueField);
            // 判断是否符合自动补全的条件
            if (inputText && value.indexOf(inputText) === -1) {
                return;
            }
            const text = record.get(textField);
            const key = getItemKey(record, text, value);
            const optionProps = onOption({ dataSet: options, record });
            const optionDisabled = menuDisabled || (optionProps && optionProps.disabled);
            const itemContent = optionRenderer
                ? optionRenderer({ dataSet: this.options, record, text, value })
                : text;
            const option = (React.createElement(Item, Object.assign({}, optionProps, { key: key, value: record, disabled: optionDisabled }), itemContent));
            optGroups.push(option);
        });
        if (!optGroups.length) {
            return null;
        }
        return (React.createElement(Menu, Object.assign({ ref: this.saveMenu, disabled: menuDisabled, defaultActiveFirst: true, multiple: this.menuMultiple, selectedKeys: selectedKeys, prefixCls: this.getMenuPrefixCls(), onClick: this.handleMenuClick, style: dropdownMenuStyle, focusable: false }, menuProps), optGroups));
    }
}
AutoComplete.displayName = 'AutoComplete';
AutoComplete.propTypes = {
    ...Select.propTypes,
};
AutoComplete.defaultProps = {
    ...Select.defaultProps,
    searchable: true,
    suffixCls: 'auto-complete',
};
__decorate([
    autobind,
    action
], AutoComplete.prototype, "handleChange", null);
__decorate([
    autobind
], AutoComplete.prototype, "handleFocus", null);
__decorate([
    autobind
], AutoComplete.prototype, "handleBlur", null);
__decorate([
    autobind
], AutoComplete.prototype, "getMenu", null);
let ObserverAutoComplete = class ObserverAutoComplete extends AutoComplete {
};
ObserverAutoComplete.defaultProps = AutoComplete.defaultProps;
ObserverAutoComplete = __decorate([
    observer
], ObserverAutoComplete);
export default ObserverAutoComplete;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,