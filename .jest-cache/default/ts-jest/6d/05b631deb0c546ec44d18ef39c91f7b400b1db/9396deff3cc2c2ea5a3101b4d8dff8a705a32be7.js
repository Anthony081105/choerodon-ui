import * as React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { DOMMouseMoveTracker, addStyle, getOffset } from 'dom-lib';
import { SCROLLBAR_MIN_WIDTH } from './constants';
import { defaultClassPrefix, getUnhandledProps, prefix } from './utils';
import TableContext from './TableContext';
class Scrollbar extends React.PureComponent {
    constructor(props) {
        super(props);
        this.scrollOffset = 0;
        this.mouseMoveTracker = null;
        this.handleMouseDown = (event) => {
            this.mouseMoveTracker = this.getMouseMoveTracker();
            // @ts-ignore
            this.mouseMoveTracker?.captureMouseMoves(event);
            this.setState({ handlePressed: true });
            this.props.onMouseDown?.(event);
        };
        this.handleDragEnd = () => {
            this.releaseMouseMoves();
            this.setState({ handlePressed: false });
        };
        this.handleDragMove = (deltaX, deltaY, event) => {
            const { vertical } = this.props;
            // @ts-ignore
            if (!this.mouseMoveTracker || !this.mouseMoveTracker.isDragging()) {
                return;
            }
            if (event?.buttons === 0 || window?.event?.['buttons'] === 0) {
                this.releaseMouseMoves();
                return;
            }
            this.handleScroll(vertical ? deltaY : deltaX, event);
        };
        /**
         * 点击滚动条，然后滚动到指定位置
         */
        this.handleClick = (event) => {
            if (this.handleRef.current && this.handleRef.current?.contains(event.target)) {
                return;
            }
            const { vertical, length, scrollLength } = this.props;
            const { barOffset } = this.state;
            const offset = vertical ? event.pageY - barOffset.top : event.pageX - barOffset.left;
            const handleWidth = (length / scrollLength) * length;
            const delta = offset - handleWidth;
            const nextDelta = offset > this.scrollOffset ? delta - this.scrollOffset : offset - this.scrollOffset;
            this.handleScroll(nextDelta, event);
        };
        this.state = {
            barOffset: {
                top: 0,
                left: 0,
            },
            handlePressed: false,
        };
        this.handleRef = React.createRef();
        this.barRef = React.createRef();
    }
    componentDidMount() {
        this.initBarOffset();
    }
    componentDidUpdate(prevProps) {
        if (this.props.vertical && this.props.scrollLength !== prevProps.scrollLength) {
            this.initBarOffset();
        }
        else if (!this.props.vertical && this.props.scrollLength !== prevProps.scrollLength) {
            this.initBarOffset();
        }
    }
    componentWillUnmount() {
        this.releaseMouseMoves();
    }
    onWheelScroll(delta) {
        const { length, scrollLength } = this.props;
        const nextDelta = delta / (scrollLength / length);
        this.updateScrollBarPosition(nextDelta);
    }
    getMouseMoveTracker() {
        return (this.mouseMoveTracker ||
            new DOMMouseMoveTracker(this.handleDragMove, this.handleDragEnd, document.body));
    }
    initBarOffset() {
        setTimeout(() => {
            this.barRef.current &&
                this.setState({
                    barOffset: getOffset(this.barRef.current),
                });
        }, 1);
    }
    handleScroll(delta, event) {
        const { length, scrollLength } = this.props;
        const scrollDelta = delta * (scrollLength / length);
        this.updateScrollBarPosition(delta);
        this.props.onScroll?.(scrollDelta, event);
    }
    resetScrollBarPosition(forceDelta = 0) {
        this.scrollOffset = 0;
        this.updateScrollBarPosition(0, forceDelta);
    }
    updateScrollBarPosition(delta, forceDelta) {
        const { vertical, length, scrollLength } = this.props;
        const { translateDOMPositionXY } = this.context;
        const max = scrollLength && length
            ? length - Math.max((length / scrollLength) * length, SCROLLBAR_MIN_WIDTH + 2)
            : 0;
        const styles = {};
        if (typeof forceDelta === 'undefined') {
            this.scrollOffset += delta;
            this.scrollOffset = Math.max(this.scrollOffset, 0);
            this.scrollOffset = Math.min(this.scrollOffset, max);
        }
        else {
            this.scrollOffset = forceDelta || 0;
        }
        if (vertical) {
            translateDOMPositionXY?.(styles, 0, this.scrollOffset);
        }
        else {
            translateDOMPositionXY?.(styles, this.scrollOffset, 0);
        }
        addStyle(this.handleRef.current, styles);
    }
    releaseMouseMoves() {
        // @ts-ignore
        this.mouseMoveTracker?.releaseMouseMoves?.();
        this.mouseMoveTracker = null;
    }
    render() {
        const { vertical, length, scrollLength, classPrefix, className, ...rest } = this.props;
        const { handlePressed } = this.state;
        // @ts-ignore
        const addPrefix = prefix(classPrefix);
        const classes = classNames(classPrefix, className, {
            [addPrefix('vertical')]: vertical,
            [addPrefix('horizontal')]: !vertical,
            [addPrefix('hide')]: scrollLength <= length,
            [addPrefix('pressed')]: handlePressed,
        });
        const styles = {
            [vertical ? 'height' : 'width']: `${(length / scrollLength) * 100}%`,
            [vertical ? 'minHeight' : 'minWidth']: SCROLLBAR_MIN_WIDTH,
        };
        const unhandled = getUnhandledProps(Scrollbar, rest);
        return (React.createElement("div", Object.assign({}, unhandled, { ref: this.barRef, className: classes, onClick: this.handleClick, role: "toolbar" }),
            React.createElement("div", { ref: this.handleRef, className: addPrefix('handle'), style: styles, onMouseDown: this.handleMouseDown, role: "button", tabIndex: -1 })));
    }
}
Scrollbar.contextType = TableContext;
Scrollbar.propTypes = {
    vertical: PropTypes.bool,
    length: PropTypes.number,
    scrollLength: PropTypes.number,
    className: PropTypes.string,
    classPrefix: PropTypes.string,
    onScroll: PropTypes.func,
    onMouseDown: PropTypes.func,
};
Scrollbar.defaultProps = {
    classPrefix: defaultClassPrefix('performance-table-scrollbar'),
    scrollLength: 1,
    length: 1,
};
export default Scrollbar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,