import React, { Component } from 'react';
import Tooltip from '../tooltip';
import RcSlider, { Handle as RcHandle, Range as RcRange } from '../rc-components/slider';
import { getPrefixCls } from '../configure';
export default class Slider extends Component {
    constructor(props) {
        super(props);
        this.toggleTooltipVisible = (index, visible) => {
            this.setState(({ visibles }) => ({
                visibles: {
                    ...visibles,
                    [index]: visible,
                },
            }));
        };
        this.handleWithTooltip = ({ value, dragging, index, ...restProps }) => {
            const { tooltipPrefixCls: customizeTooltipPrefixCls, tipFormatter } = this.props;
            const tooltipPrefixCls = getPrefixCls('tooltip', customizeTooltipPrefixCls);
            const { visibles } = this.state;
            const visible = tipFormatter ? visibles[index] || dragging : false;
            return (React.createElement(Tooltip, { prefixCls: tooltipPrefixCls, title: tipFormatter ? tipFormatter(value) : '', visible: visible, placement: "top", transitionName: "zoom-down", key: index },
                React.createElement(RcHandle, Object.assign({}, restProps, { value: value, onMouseEnter: () => this.toggleTooltipVisible(index, true), onMouseLeave: () => this.toggleTooltipVisible(index, false) }))));
        };
        this.saveSlider = (node) => {
            this.rcSlider = node;
        };
        this.state = {
            visibles: {},
        };
    }
    focus() {
        this.rcSlider.focus();
    }
    blur() {
        this.rcSlider.focus();
    }
    render() {
        const { range, prefixCls: customizePrefixCls, ...restProps } = this.props;
        const prefixCls = getPrefixCls('slider', customizePrefixCls);
        if (range) {
            return (React.createElement(RcRange, Object.assign({}, restProps, { ref: this.saveSlider, handle: this.handleWithTooltip, prefixCls: prefixCls })));
        }
        return (React.createElement(RcSlider, Object.assign({}, restProps, { ref: this.saveSlider, handle: this.handleWithTooltip, prefixCls: prefixCls })));
    }
}
Slider.displayName = 'Slider';
Slider.defaultProps = {
    tipFormatter(value) {
        return value.toString();
    },
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvc2xpZGVyL2luZGV4LnRzeCIsIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssRUFBRSxFQUFFLFNBQVMsRUFBMEMsTUFBTSxPQUFPLENBQUM7QUFDakYsT0FBTyxPQUFPLE1BQU0sWUFBWSxDQUFDO0FBQ2pDLE9BQU8sUUFBUSxFQUFFLEVBQUUsTUFBTSxJQUFJLFFBQVEsRUFBRSxLQUFLLElBQUksT0FBTyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDekYsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGNBQWMsQ0FBQztBQTZDNUMsTUFBTSxDQUFDLE9BQU8sT0FBTyxNQUFPLFNBQVEsU0FBbUM7SUFXckUsWUFBWSxLQUFrQjtRQUM1QixLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFNZix5QkFBb0IsR0FBRyxDQUFDLEtBQWEsRUFBRSxPQUFnQixFQUFFLEVBQUU7WUFDekQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBQy9CLFFBQVEsRUFBRTtvQkFDUixHQUFHLFFBQVE7b0JBQ1gsQ0FBQyxLQUFLLENBQUMsRUFBRSxPQUFPO2lCQUNqQjthQUNGLENBQUMsQ0FBQyxDQUFDO1FBQ04sQ0FBQyxDQUFDO1FBRUYsc0JBQWlCLEdBQXNCLENBQUMsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxHQUFHLFNBQVMsRUFBRSxFQUFFLEVBQUU7WUFDbEYsTUFBTSxFQUFFLGdCQUFnQixFQUFFLHlCQUF5QixFQUFFLFlBQVksRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7WUFDakYsTUFBTSxnQkFBZ0IsR0FBRyxZQUFZLENBQUMsU0FBUyxFQUFFLHlCQUF5QixDQUFDLENBQUM7WUFDNUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7WUFDaEMsTUFBTSxPQUFPLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7WUFDbkUsT0FBTyxDQUNMLG9CQUFDLE9BQU8sSUFDTixTQUFTLEVBQUUsZ0JBQWdCLEVBQzNCLEtBQUssRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUM5QyxPQUFPLEVBQUUsT0FBTyxFQUNoQixTQUFTLEVBQUMsS0FBSyxFQUNmLGNBQWMsRUFBQyxXQUFXLEVBQzFCLEdBQUcsRUFBRSxLQUFLO2dCQUVWLG9CQUFDLFFBQVEsb0JBQ0gsU0FBUyxJQUNiLEtBQUssRUFBRSxLQUFLLEVBQ1osWUFBWSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQzFELFlBQVksRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxJQUMzRCxDQUNNLENBQ1gsQ0FBQztRQUNKLENBQUMsQ0FBQztRQVVGLGVBQVUsR0FBRyxDQUFDLElBQVMsRUFBRSxFQUFFO1lBQ3pCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ3ZCLENBQUMsQ0FBQztRQWhEQSxJQUFJLENBQUMsS0FBSyxHQUFHO1lBQ1gsUUFBUSxFQUFFLEVBQUU7U0FDYixDQUFDO0lBQ0osQ0FBQztJQW1DRCxLQUFLO1FBQ0gsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBRUQsSUFBSTtRQUNGLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQU1ELE1BQU07UUFDSixNQUFNLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxrQkFBa0IsRUFBRSxHQUFHLFNBQVMsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDMUUsTUFBTSxTQUFTLEdBQUcsWUFBWSxDQUFDLFFBQVEsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1FBQzdELElBQUksS0FBSyxFQUFFO1lBQ1QsT0FBTyxDQUNMLG9CQUFDLE9BQU8sb0JBQ0YsU0FBUyxJQUNiLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxFQUNwQixNQUFNLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixFQUM5QixTQUFTLEVBQUUsU0FBUyxJQUNwQixDQUNILENBQUM7U0FDSDtRQUNELE9BQU8sQ0FDTCxvQkFBQyxRQUFRLG9CQUNILFNBQVMsSUFDYixHQUFHLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFDcEIsTUFBTSxFQUFFLElBQUksQ0FBQyxpQkFBaUIsRUFDOUIsU0FBUyxFQUFFLFNBQVMsSUFDcEIsQ0FDSCxDQUFDO0lBQ0osQ0FBQzs7QUFuRk0sa0JBQVcsR0FBRyxRQUFRLENBQUM7QUFFdkIsbUJBQVksR0FBRztJQUNwQixZQUFZLENBQUMsS0FBYTtRQUN4QixPQUFPLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMxQixDQUFDO0NBQ0YsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvaHVpaHVhd2svRG9jdW1lbnRzL29wdC9jaG9lcm9kb24tdWkvY29tcG9uZW50cy9zbGlkZXIvaW5kZXgudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIENTU1Byb3BlcnRpZXMsIFJlYWN0RWxlbWVudCwgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFRvb2x0aXAgZnJvbSAnLi4vdG9vbHRpcCc7XG5pbXBvcnQgUmNTbGlkZXIsIHsgSGFuZGxlIGFzIFJjSGFuZGxlLCBSYW5nZSBhcyBSY1JhbmdlIH0gZnJvbSAnLi4vcmMtY29tcG9uZW50cy9zbGlkZXInO1xuaW1wb3J0IHsgZ2V0UHJlZml4Q2xzIH0gZnJvbSAnLi4vY29uZmlndXJlJztcblxuZXhwb3J0IGludGVyZmFjZSBTbGlkZXJNYXJrcyB7XG4gIFtrZXk6IG51bWJlcl06XG4gICAgfCBSZWFjdE5vZGVcbiAgICB8IHtcbiAgICAgICAgc3R5bGU6IENTU1Byb3BlcnRpZXM7XG4gICAgICAgIGxhYmVsOiBSZWFjdE5vZGU7XG4gICAgICB9O1xufVxuXG5leHBvcnQgdHlwZSBTbGlkZXJWYWx1ZSA9IG51bWJlciB8IFtudW1iZXIsIG51bWJlcl07XG5cbmV4cG9ydCB0eXBlIEhhbmRsZUdlbmVyYXRvckZuID0gKGluZm86IHtcbiAgdmFsdWU6IG51bWJlcjtcbiAgZHJhZ2dpbmc6IGJvb2xlYW47XG4gIGluZGV4OiBudW1iZXI7XG4gIHJlc3Q6IGFueVtdO1xufSkgPT4gUmVhY3RFbGVtZW50PGFueT47XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2xpZGVyUHJvcHMge1xuICBwcmVmaXhDbHM/OiBzdHJpbmc7XG4gIHRvb2x0aXBQcmVmaXhDbHM/OiBzdHJpbmc7XG4gIHJhbmdlPzogYm9vbGVhbjtcbiAgbWluPzogbnVtYmVyO1xuICBtYXg/OiBudW1iZXI7XG4gIHN0ZXA/OiBudW1iZXIgfCBudWxsO1xuICBtYXJrcz86IFNsaWRlck1hcmtzO1xuICBkb3RzPzogYm9vbGVhbjtcbiAgdmFsdWU/OiBTbGlkZXJWYWx1ZTtcbiAgZGVmYXVsdFZhbHVlPzogU2xpZGVyVmFsdWU7XG4gIGluY2x1ZGVkPzogYm9vbGVhbjtcbiAgZGlzYWJsZWQ/OiBib29sZWFuO1xuICB2ZXJ0aWNhbD86IGJvb2xlYW47XG4gIG9uQ2hhbmdlPzogKHZhbHVlOiBTbGlkZXJWYWx1ZSkgPT4gdm9pZDtcbiAgb25BZnRlckNoYW5nZT86ICh2YWx1ZTogU2xpZGVyVmFsdWUpID0+IHZvaWQ7XG4gIHRpcEZvcm1hdHRlcj86IG51bGwgfCAoKHZhbHVlOiBudW1iZXIpID0+IFJlYWN0Tm9kZSk7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgaWQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2xpZGVyU3RhdGUge1xuICB2aXNpYmxlczogeyBbaW5kZXg6IG51bWJlcl06IGJvb2xlYW4gfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2xpZGVyIGV4dGVuZHMgQ29tcG9uZW50PFNsaWRlclByb3BzLCBTbGlkZXJTdGF0ZT4ge1xuICBzdGF0aWMgZGlzcGxheU5hbWUgPSAnU2xpZGVyJztcblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIHRpcEZvcm1hdHRlcih2YWx1ZTogbnVtYmVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTtcbiAgICB9LFxuICB9O1xuXG4gIHByaXZhdGUgcmNTbGlkZXI6IGFueTtcblxuICBjb25zdHJ1Y3Rvcihwcm9wczogU2xpZGVyUHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHZpc2libGVzOiB7fSxcbiAgICB9O1xuICB9XG5cbiAgdG9nZ2xlVG9vbHRpcFZpc2libGUgPSAoaW5kZXg6IG51bWJlciwgdmlzaWJsZTogYm9vbGVhbikgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoKHsgdmlzaWJsZXMgfSkgPT4gKHtcbiAgICAgIHZpc2libGVzOiB7XG4gICAgICAgIC4uLnZpc2libGVzLFxuICAgICAgICBbaW5kZXhdOiB2aXNpYmxlLFxuICAgICAgfSxcbiAgICB9KSk7XG4gIH07XG5cbiAgaGFuZGxlV2l0aFRvb2x0aXA6IEhhbmRsZUdlbmVyYXRvckZuID0gKHsgdmFsdWUsIGRyYWdnaW5nLCBpbmRleCwgLi4ucmVzdFByb3BzIH0pID0+IHtcbiAgICBjb25zdCB7IHRvb2x0aXBQcmVmaXhDbHM6IGN1c3RvbWl6ZVRvb2x0aXBQcmVmaXhDbHMsIHRpcEZvcm1hdHRlciB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB0b29sdGlwUHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCd0b29sdGlwJywgY3VzdG9taXplVG9vbHRpcFByZWZpeENscyk7XG4gICAgY29uc3QgeyB2aXNpYmxlcyB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB2aXNpYmxlID0gdGlwRm9ybWF0dGVyID8gdmlzaWJsZXNbaW5kZXhdIHx8IGRyYWdnaW5nIDogZmFsc2U7XG4gICAgcmV0dXJuIChcbiAgICAgIDxUb29sdGlwXG4gICAgICAgIHByZWZpeENscz17dG9vbHRpcFByZWZpeENsc31cbiAgICAgICAgdGl0bGU9e3RpcEZvcm1hdHRlciA/IHRpcEZvcm1hdHRlcih2YWx1ZSkgOiAnJ31cbiAgICAgICAgdmlzaWJsZT17dmlzaWJsZX1cbiAgICAgICAgcGxhY2VtZW50PVwidG9wXCJcbiAgICAgICAgdHJhbnNpdGlvbk5hbWU9XCJ6b29tLWRvd25cIlxuICAgICAgICBrZXk9e2luZGV4fVxuICAgICAgPlxuICAgICAgICA8UmNIYW5kbGVcbiAgICAgICAgICB7Li4ucmVzdFByb3BzfVxuICAgICAgICAgIHZhbHVlPXt2YWx1ZX1cbiAgICAgICAgICBvbk1vdXNlRW50ZXI9eygpID0+IHRoaXMudG9nZ2xlVG9vbHRpcFZpc2libGUoaW5kZXgsIHRydWUpfVxuICAgICAgICAgIG9uTW91c2VMZWF2ZT17KCkgPT4gdGhpcy50b2dnbGVUb29sdGlwVmlzaWJsZShpbmRleCwgZmFsc2UpfVxuICAgICAgICAvPlxuICAgICAgPC9Ub29sdGlwPlxuICAgICk7XG4gIH07XG5cbiAgZm9jdXMoKSB7XG4gICAgdGhpcy5yY1NsaWRlci5mb2N1cygpO1xuICB9XG5cbiAgYmx1cigpIHtcbiAgICB0aGlzLnJjU2xpZGVyLmZvY3VzKCk7XG4gIH1cblxuICBzYXZlU2xpZGVyID0gKG5vZGU6IGFueSkgPT4ge1xuICAgIHRoaXMucmNTbGlkZXIgPSBub2RlO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHJhbmdlLCBwcmVmaXhDbHM6IGN1c3RvbWl6ZVByZWZpeENscywgLi4ucmVzdFByb3BzIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHByZWZpeENscyA9IGdldFByZWZpeENscygnc2xpZGVyJywgY3VzdG9taXplUHJlZml4Q2xzKTtcbiAgICBpZiAocmFuZ2UpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxSY1JhbmdlXG4gICAgICAgICAgey4uLnJlc3RQcm9wc31cbiAgICAgICAgICByZWY9e3RoaXMuc2F2ZVNsaWRlcn1cbiAgICAgICAgICBoYW5kbGU9e3RoaXMuaGFuZGxlV2l0aFRvb2x0aXB9XG4gICAgICAgICAgcHJlZml4Q2xzPXtwcmVmaXhDbHN9XG4gICAgICAgIC8+XG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgPFJjU2xpZGVyXG4gICAgICAgIHsuLi5yZXN0UHJvcHN9XG4gICAgICAgIHJlZj17dGhpcy5zYXZlU2xpZGVyfVxuICAgICAgICBoYW5kbGU9e3RoaXMuaGFuZGxlV2l0aFRvb2x0aXB9XG4gICAgICAgIHByZWZpeENscz17cHJlZml4Q2xzfVxuICAgICAgLz5cbiAgICApO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=