import { __decorate } from "tslib";
import React from 'react';
import { findDOMNode } from 'react-dom';
import PropTypes from 'prop-types';
import omit from 'lodash/omit';
import noop from 'lodash/noop';
import { action, computed, observable } from 'mobx';
import { PropTypes as MobxPropTypes } from 'mobx-react';
import Trigger from '../trigger/Trigger';
import { TextField } from '../text-field/TextField';
import autobind from '../_util/autobind';
import Icon from '../icon';
import TaskRunner from '../_util/TaskRunner';
const BUILT_IN_PLACEMENTS = {
    bottomLeft: {
        points: ['tl', 'bl'],
        offset: [0, 4],
        overflow: {
            adjustX: 1,
            adjustY: 1,
        },
    },
    bottomRight: {
        points: ['tr', 'br'],
        offset: [0, 4],
        overflow: {
            adjustX: 1,
            adjustY: 1,
        },
    },
    topLeft: {
        points: ['bl', 'tl'],
        offset: [0, -4],
        overflow: {
            adjustX: 1,
            adjustY: 1,
        },
    },
    topRight: {
        points: ['br', 'tr'],
        offset: [0, -4],
        overflow: {
            adjustX: 1,
            adjustY: 1,
        },
    },
};
export default class TriggerField extends TextField {
    constructor(props, context) {
        super(props, context);
        this.popupTask = new TaskRunner();
        this.setPopup(false);
    }
    get popup() {
        return this.statePopup;
    }
    isValidationMessageHidden(message) {
        return super.isValidationMessageHidden(message) || this.popup;
    }
    setPopup(statePopup) {
        this.statePopup = statePopup;
    }
    getRootDomNode() {
        return findDOMNode(this);
    }
    getOtherProps() {
        return omit(super.getOtherProps(), [
            'popupContent',
            'popupCls',
            'editable',
            'trigger',
            'triggerShowDelay',
            'triggerHiddenDelay',
            'onPopupHiddenChange',
            'getPopupContainer',
        ]);
    }
    getPopupProps() {
        return {};
    }
    getWrappedEditor() {
        const { prefixCls, props: { popupCls, popupStyle, popupContent, hidden, trigger, triggerShowDelay, triggerHiddenDelay, getPopupContainer, }, } = this;
        let content;
        if (popupContent !== undefined) {
            if (popupContent instanceof Function) {
                content = popupContent(this.getPopupProps());
            }
            else {
                content = popupContent;
            }
        }
        else {
            content = this.getPopupContent();
        }
        return (React.createElement(Trigger, { ref: node => (this.trigger = node), action: this.isReadOnly() || this.isDisabled() ? [] : trigger, focusDelay: triggerShowDelay, blurDelay: triggerHiddenDelay, mouseEnterDelay: triggerShowDelay, mouseLeaveDelay: triggerHiddenDelay, prefixCls: prefixCls, popupCls: popupCls, popupStyle: popupStyle, popupContent: content, popupPlacement: "bottomLeft", popupHidden: hidden || !this.popup, builtinPlacements: BUILT_IN_PLACEMENTS, onPopupAnimateAppear: this.handlePopupAnimateAppear, onPopupAnimateEnd: this.handlePopupAnimateEnd, onPopupHiddenChange: this.handlePopupHiddenChange, getPopupStyleFromAlign: this.getPopupStyleFromAlign, getRootDomNode: this.getRootDomNode, getPopupContainer: getPopupContainer }, this.getEditor()));
    }
    getWrapperClassNames(...args) {
        const { prefixCls } = this;
        return super.getWrapperClassNames(...args, {
            [`${prefixCls}-expand`]: this.popup,
            [`${prefixCls}-not-editable`]: !this.isDisabled() && !this.editable,
        });
    }
    getDefaultSuffix() {
        const { prefixCls } = this;
        return React.createElement(Icon, { type: this.getTriggerIconFont(), className: `${prefixCls}-trigger` });
    }
    handleTagAnimateEnd() {
        this.forcePopupAlign();
    }
    handlePopupMouseDown(e) {
        e.preventDefault();
        const { onMouseDown = noop } = this.props;
        onMouseDown(e);
    }
    handlePopupHiddenChange(hidden) {
        this.setPopup(!hidden);
        const { onPopupHiddenChange = noop } = this.props;
        onPopupHiddenChange(hidden);
    }
    forcePopupAlign() {
        if (this.trigger) {
            this.trigger.forcePopupAlign();
        }
    }
    expand() {
        this.popupTask.cancel();
        if (!this.isReadOnly() && !this.popup) {
            this.popupTask.delay(this.props.triggerShowDelay, () => {
                this.setPopup(true);
            });
        }
    }
    collapse() {
        this.popupTask.cancel();
        if (!this.isReadOnly() && this.popup) {
            this.popupTask.delay(this.props.triggerHiddenDelay, () => {
                this.setPopup(false);
            });
        }
    }
}
TriggerField.displayName = 'TriggerField';
TriggerField.propTypes = {
    /**
     * 下拉框的自定义内容
     */
    popupContent: PropTypes.element,
    /**
     * 下拉框的自定义样式名
     */
    popupCls: PropTypes.string,
    /**
     * 下拉框的内链样式
     */
    popupStyle: PropTypes.object,
    /**
     * 触发下拉框的方式
     * 可选值：click | focus | hover | contextMenu
     */
    trigger: MobxPropTypes.arrayOrObservableArrayOf(PropTypes.string),
    /**
     * 下拉框显示延迟
     * @defualt 150
     */
    triggerShowDelay: PropTypes.number,
    /**
     * 下拉框隐藏延迟
     * @defualt 50
     */
    triggerHiddenDelay: PropTypes.number,
    /**
     * 下拉框变化钩子
     */
    onPopupHiddenChange: PropTypes.func,
    /**
     * 定义浮层的容器，默认为 body
     */
    getPopupContainer: PropTypes.func,
    ...TextField.propTypes,
};
TriggerField.defaultProps = {
    ...TextField.defaultProps,
    suffixCls: 'trigger',
    clearButton: true,
    trigger: ['focus', 'click'],
    triggerShowDelay: 150,
    triggerHiddenDelay: 50,
};
__decorate([
    observable
], TriggerField.prototype, "statePopup", void 0);
__decorate([
    computed
], TriggerField.prototype, "popup", null);
__decorate([
    action
], TriggerField.prototype, "setPopup", null);
__decorate([
    autobind
], TriggerField.prototype, "getRootDomNode", null);
__decorate([
    autobind
], TriggerField.prototype, "handleTagAnimateEnd", null);
__decorate([
    autobind
], TriggerField.prototype, "handlePopupMouseDown", null);
__decorate([
    autobind
], TriggerField.prototype, "handlePopupHiddenChange", null);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,