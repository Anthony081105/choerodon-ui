import React, { cloneElement, Component } from 'react';
import { findDOMNode } from 'react-dom';
import closest from 'dom-closest';
import classNames from 'classnames';
import Dropdown from '../dropdown';
import Icon from '../icon';
import Radio from '../radio';
import FilterDropdownMenuWrapper from './FilterDropdownMenuWrapper';
import Menu, { Item as MenuItem, SubMenu } from '../rc-components/menu';
export default class FilterMenu extends Component {
    constructor(props) {
        super(props);
        this.setNeverShown = (column) => {
            const rootNode = findDOMNode(this);
            const { prefixCls } = this.props;
            const filterBelongToScrollBody = !!closest(rootNode, `${prefixCls}-scroll`);
            if (filterBelongToScrollBody) {
                // When fixed column have filters, there will be two dropdown menus
                // Filter dropdown menu inside scroll body should never be shown
                this.neverShown = !!column.fixed;
            }
        };
        this.setSelectedKeys = ({ selectedKeys }) => {
            this.setState({ selectedKeys });
        };
        this.handleClearFilters = () => {
            this.setState({
                selectedKeys: [],
            }, this.handleConfirm);
        };
        this.handleConfirm = () => {
            this.setVisible(false);
            this.confirmFilter();
        };
        this.onVisibleChange = (visible) => {
            this.setVisible(visible);
            if (!visible) {
                this.confirmFilter();
            }
        };
        this.handleFilterDropdownMenuClick = (e) => {
            e.preventDefault();
        };
        this.handleMenuItemClick = (info) => {
            if (info.keyPath.length <= 1) {
                return;
            }
            const { keyPathOfSelectedItem, selectedKeys } = this.state;
            if (selectedKeys.indexOf(info.key) >= 0) {
                // deselect SubMenu child
                delete keyPathOfSelectedItem[info.key];
            }
            else {
                // select SubMenu child
                keyPathOfSelectedItem[info.key] = info.keyPath;
            }
            this.setState({ keyPathOfSelectedItem });
        };
        this.renderFilterIcon = () => {
            const { column, locale, prefixCls, selectedKeys } = this.props;
            const filterIcon = column.filterIcon;
            const dropdownSelectedClass = selectedKeys.length > 0 ? `${prefixCls}-selected` : '';
            return filterIcon ? (cloneElement(filterIcon, {
                title: locale.filterTitle,
                className: classNames(filterIcon.className, {
                    [`${prefixCls}-icon`]: true,
                }),
            })) : (React.createElement(Icon, { title: locale.filterTitle, type: "filter_list", className: dropdownSelectedClass }));
        };
        const visible = 'filterDropdownVisible' in props.column ? props.column.filterDropdownVisible : false;
        this.state = {
            selectedKeys: props.selectedKeys,
            keyPathOfSelectedItem: {},
            visible,
        };
    }
    componentDidMount() {
        const { column } = this.props;
        this.setNeverShown(column);
    }
    componentWillReceiveProps(nextProps) {
        const { column } = nextProps;
        this.setNeverShown(column);
        const newState = {};
        if ('selectedKeys' in nextProps) {
            newState.selectedKeys = nextProps.selectedKeys;
        }
        if ('filterDropdownVisible' in column) {
            newState.visible = column.filterDropdownVisible;
        }
        if (Object.keys(newState).length > 0) {
            this.setState(newState);
        }
    }
    setVisible(visible) {
        const { column } = this.props;
        if (!('filterDropdownVisible' in column)) {
            this.setState({ visible });
        }
        if (column.onFilterDropdownVisibleChange) {
            column.onFilterDropdownVisibleChange(visible);
        }
    }
    confirmFilter() {
        const { selectedKeys: propSelectedKeys, column, confirmFilter } = this.props;
        const { selectedKeys } = this.state;
        if (selectedKeys !== propSelectedKeys) {
            confirmFilter(column, selectedKeys);
        }
    }
    renderMenuItem(item) {
        const { column } = this.props;
        const { selectedKeys } = this.state;
        const multiple = 'filterMultiple' in column ? column.filterMultiple : false;
        const input = multiple ? null : (React.createElement(Radio, { checked: selectedKeys.indexOf(item.value.toString()) >= 0 }));
        return (React.createElement(MenuItem, { key: item.value },
            input,
            React.createElement("span", null, item.text)));
    }
    hasSubMenu() {
        const { column: { filters = [] }, } = this.props;
        return filters.some(item => !!(item.children && item.children.length > 0));
    }
    renderMenus(items) {
        return items.map(item => {
            if (item.children && item.children.length > 0) {
                const { dropdownPrefixCls } = this.props;
                const { keyPathOfSelectedItem } = this.state;
                const containSelected = Object.keys(keyPathOfSelectedItem).some(key => keyPathOfSelectedItem[key].indexOf(item.value) >= 0);
                const subMenuCls = containSelected ? `${dropdownPrefixCls}-submenu-contain-selected` : '';
                return (React.createElement(SubMenu, { title: item.text, className: subMenuCls, key: item.value.toString() }, this.renderMenus(item.children)));
            }
            return this.renderMenuItem(item);
        });
    }
    render() {
        const { column, locale, prefixCls, dropdownPrefixCls, getPopupContainer } = this.props;
        const { visible, selectedKeys } = this.state;
        // default multiple selection in filter dropdown
        const multiple = 'filterMultiple' in column ? column.filterMultiple : false;
        const dropdownMenuClass = classNames({
            [`${dropdownPrefixCls}-menu-without-submenu`]: !this.hasSubMenu(),
        });
        const menus = column.filterDropdown ? (React.createElement(FilterDropdownMenuWrapper, { onClick: this.handleFilterDropdownMenuClick }, column.filterDropdown)) : (React.createElement(FilterDropdownMenuWrapper, { className: `${prefixCls}-dropdown`, onClick: this.handleFilterDropdownMenuClick },
            React.createElement(Menu, { multiple: multiple, onClick: this.handleMenuItemClick, prefixCls: `${dropdownPrefixCls}-menu`, className: dropdownMenuClass, onSelect: this.setSelectedKeys, onDeselect: this.setSelectedKeys, selectedKeys: selectedKeys, getPopupContainer: (triggerNode) => triggerNode.parentNode }, this.renderMenus(column.filters)),
            React.createElement("div", { className: `${prefixCls}-dropdown-btns` },
                React.createElement("a", { className: `${prefixCls}-dropdown-link confirm`, onClick: this.handleConfirm }, locale.filterConfirm),
                React.createElement("a", { className: `${prefixCls}-dropdown-link clear`, onClick: this.handleClearFilters }, locale.filterReset))));
        return (React.createElement(Dropdown, { trigger: ['click'], overlay: menus, visible: this.neverShown ? false : visible, onVisibleChange: this.onVisibleChange, getPopupContainer: getPopupContainer, forceRender: true }, this.renderFilterIcon()));
    }
}
FilterMenu.defaultProps = {
    handleFilter() { },
    column: {},
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,