import React, { Component } from 'react';
import PropTypes from 'prop-types';
import Button from '../button';
import LocaleReceiver from '../locale-provider/LocaleReceiver';
import { getConfirmLocale } from './locale';
import Dialog from '../rc-components/dialog';
import addEventListener from '../_util/addEventListener';
import { getPrefixCls } from '../configure';
let mousePosition;
let mousePositionEventBinded;
export default class Modal extends Component {
    constructor() {
        super(...arguments);
        this.handleCancel = (e) => {
            const { onCancel } = this.props;
            if (onCancel) {
                onCancel(e);
            }
        };
        this.handleOk = (e) => {
            const { onOk } = this.props;
            if (onOk) {
                onOk(e);
            }
        };
        this.renderFooter = (locale) => {
            const { okText, okType, cancelText, confirmLoading, funcType, disableOk, disableCancel, cancelButtonProps, okButtonProps, } = this.props;
            return (React.createElement("div", null,
                React.createElement(Button, Object.assign({ disabled: disableCancel || confirmLoading, onClick: this.handleCancel, funcType: funcType }, cancelButtonProps), cancelText || locale.cancelText),
                React.createElement(Button, Object.assign({ type: okType, funcType: funcType, disabled: disableOk, loading: confirmLoading, onClick: this.handleOk }, okButtonProps), okText || locale.okText)));
        };
    }
    componentDidMount() {
        if (mousePositionEventBinded) {
            return;
        }
        // 只有点击事件支持从鼠标位置动画展开
        addEventListener(document.documentElement, 'click', (e) => {
            mousePosition = {
                x: e.pageX,
                y: e.pageY,
            };
            // 100ms 内发生过点击事件，则从点击位置动画展示
            // 否则直接 zoom 展示
            // 这样可以兼容非点击方式展开
            setTimeout(() => (mousePosition = null), 100);
        });
        mousePositionEventBinded = true;
    }
    render() {
        const { footer, visible, prefixCls: customizePrefixCls } = this.props;
        const prefixCls = getPrefixCls('modal', customizePrefixCls);
        const defaultFooter = (React.createElement(LocaleReceiver, { componentName: "Modal", defaultLocale: getConfirmLocale() }, this.renderFooter));
        return (React.createElement(Dialog, Object.assign({}, this.props, { prefixCls: prefixCls, footer: footer === undefined ? defaultFooter : footer, visible: visible, mousePosition: mousePosition, onClose: this.handleCancel })));
    }
}
Modal.displayName = 'Modal';
Modal.defaultProps = {
    width: 520,
    transitionName: 'zoom',
    maskTransitionName: 'fade',
    confirmLoading: false,
    disableOk: false,
    disableCancel: false,
    visible: false,
    okType: 'primary',
    center: false,
};
Modal.propTypes = {
    prefixCls: PropTypes.string,
    onOk: PropTypes.func,
    onCancel: PropTypes.func,
    okText: PropTypes.node,
    cancelText: PropTypes.node,
    width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    confirmLoading: PropTypes.bool,
    visible: PropTypes.bool,
    align: PropTypes.object,
    footer: PropTypes.node,
    title: PropTypes.node,
    closable: PropTypes.bool,
    transitionName: PropTypes.string,
    funcType: PropTypes.string,
    center: PropTypes.bool,
    disableOk: PropTypes.bool,
    disableCancel: PropTypes.bool,
    okType: PropTypes.string,
    maskTransitionName: PropTypes.string,
    okButtonProps: PropTypes.object,
    cancelButtonProps: PropTypes.object,
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvbW9kYWwvTW9kYWwudHN4IiwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxFQUFFLEVBQUUsU0FBUyxFQUF1RCxNQUFNLE9BQU8sQ0FBQztBQUM5RixPQUFPLFNBQVMsTUFBTSxZQUFZLENBQUM7QUFDbkMsT0FBTyxNQUFNLE1BQU0sV0FBVyxDQUFDO0FBRS9CLE9BQU8sY0FBYyxNQUFNLG1DQUFtQyxDQUFDO0FBQy9ELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUM1QyxPQUFPLE1BQU0sTUFBTSx5QkFBeUIsQ0FBQztBQUM3QyxPQUFPLGdCQUFnQixNQUFNLDJCQUEyQixDQUFDO0FBRXpELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFNUMsSUFBSSxhQUE4QyxDQUFDO0FBQ25ELElBQUksd0JBQWlDLENBQUM7QUE2RnRDLE1BQU0sQ0FBQyxPQUFPLE9BQU8sS0FBTSxTQUFRLFNBQXlCO0lBQTVEOztRQXFERSxpQkFBWSxHQUFHLENBQUMsQ0FBTSxFQUFFLEVBQUU7WUFDeEIsTUFBTSxFQUFFLFFBQVEsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7WUFDaEMsSUFBSSxRQUFRLEVBQUU7Z0JBQ1osUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ2I7UUFDSCxDQUFDLENBQUM7UUFFRixhQUFRLEdBQUcsQ0FBQyxDQUFNLEVBQUUsRUFBRTtZQUNwQixNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUM1QixJQUFJLElBQUksRUFBRTtnQkFDUixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDVDtRQUNILENBQUMsQ0FBQztRQW9CRixpQkFBWSxHQUFHLENBQUMsTUFBbUIsRUFBRSxFQUFFO1lBQ3JDLE1BQU0sRUFDSixNQUFNLEVBQ04sTUFBTSxFQUNOLFVBQVUsRUFDVixjQUFjLEVBQ2QsUUFB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U0FBUyxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDaEUsY0FBYyxFQUFFLFNBQVMsQ0FBQyxJQUFJO0lBQzlCLE9BQU8sRUFBRSxTQUFTLENBQUMsSUFBSTtJQUN2QixLQUFLLEVBQUUsU0FBUyxDQUFDLE1BQU07SUFDdkIsTUFBTSxFQUFFLFNBQVMsQ0FBQyxJQUFJO0lBQ3RCLEtBQUssRUFBRSxTQUFTLENBQUMsSUFBSTtJQUNyQixRQUFRLEVBQUUsU0FBUyxDQUFDLElBQUk7SUFDeEIsY0FBYyxFQUFFLFNBQVMsQ0FBQyxNQUFNO0lBQ2hDLFFBQVEsRUFBRSxTQUFTLENBQUMsTUFBTTtJQUMxQixNQUFNLEVBQUUsU0FBUyxDQUFDLElBQUk7SUFDdEIsU0FBUyxFQUFFLFNBQVMsQ0FBQyxJQUFJO0lBQ3pCLGFBQWEsRUFBRSxTQUFTLENBQUMsSUFBSTtJQUM3QixNQUFNLEVBQUUsU0FBUyxDQUFDLE1BQU07SUFDeEIsa0JBQWtCLEVBQUUsU0FBUyxDQUFDLE1BQU07SUFDcEMsYUFBYSxFQUFFLFNBQVMsQ0FBQyxNQUFNO0lBQy9CLGlCQUFpQixFQUFFLFNBQVMsQ0FBQyxNQUFNO0NBQ3BDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvbW9kYWwvTW9kYWwudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIENTU1Byb3BlcnRpZXMsIE1vdXNlRXZlbnQsIFJlYWN0SW5zdGFuY2UsIFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgQnV0dG9uIGZyb20gJy4uL2J1dHRvbic7XG5pbXBvcnQgeyBCdXR0b25GdW5jVHlwZSwgQnV0dG9uVHlwZSwgQnV0dG9uUHJvcHMgfSBmcm9tICcuLi9idXR0b24vQnV0dG9uJztcbmltcG9ydCBMb2NhbGVSZWNlaXZlciBmcm9tICcuLi9sb2NhbGUtcHJvdmlkZXIvTG9jYWxlUmVjZWl2ZXInO1xuaW1wb3J0IHsgZ2V0Q29uZmlybUxvY2FsZSB9IGZyb20gJy4vbG9jYWxlJztcbmltcG9ydCBEaWFsb2cgZnJvbSAnLi4vcmMtY29tcG9uZW50cy9kaWFsb2cnO1xuaW1wb3J0IGFkZEV2ZW50TGlzdGVuZXIgZnJvbSAnLi4vX3V0aWwvYWRkRXZlbnRMaXN0ZW5lcic7XG5pbXBvcnQgU2lkZWJhciBmcm9tICcuL1NpZGViYXInO1xuaW1wb3J0IHsgZ2V0UHJlZml4Q2xzIH0gZnJvbSAnLi4vY29uZmlndXJlJztcblxubGV0IG1vdXNlUG9zaXRpb246IHsgeDogbnVtYmVyOyB5OiBudW1iZXIgfSB8IG51bGw7XG5sZXQgbW91c2VQb3NpdGlvbkV2ZW50QmluZGVkOiBib29sZWFuO1xuXG5leHBvcnQgaW50ZXJmYWNlIE1vZGFsUHJvcHMge1xuICBwcmVmaXhDbHM/OiBzdHJpbmc7XG4gIC8qKiDlr7nor53moYbmmK/lkKblj6/op4EgKi9cbiAgdmlzaWJsZT86IGJvb2xlYW47XG4gIC8qKiDnoa7lrprmjInpkq4gbG9hZGluZyAqL1xuICBjb25maXJtTG9hZGluZz86IGJvb2xlYW47XG4gIC8qKiBva+aMiemSruaYr+WQpuemgeeUqCBsb2FkaW5nICovXG4gIGRpc2FibGVPaz86IGJvb2xlYW47XG4gIC8qKiBDYW5jZWzmjInpkq7mmK/lkKbnpoHnlKggbG9hZGluZyAqL1xuICBkaXNhYmxlQ2FuY2VsPzogYm9vbGVhbjtcbiAgLyoqIOagh+mimCAqL1xuICB0aXRsZT86IFJlYWN0Tm9kZTtcbiAgLyoqIOaYr+WQpuaYvuekuuWPs+S4iuinkueahOWFs+mXreaMiemSriAqL1xuICBjbG9zYWJsZT86IGJvb2xlYW47XG4gIC8qKiDngrnlh7vnoa7lrprlm57osIMgKi9cbiAgb25Paz86IChlOiBNb3VzZUV2ZW50PGFueT4pID0+IHZvaWQ7XG4gIC8qKiDngrnlh7vmqKHmgIHmoYblj7PkuIrop5Llj4njgIHlj5bmtojmjInpkq7jgIFQcm9wcy5tYXNrQ2xvc2FibGUg5YC85Li6IHRydWUg5pe255qE6YGu572p5bGC5oiW6ZSu55uY5oyJ5LiLIEVzYyDml7bnmoTlm57osIMgKi9cbiAgb25DYW5jZWw/OiAoZTogTW91c2VFdmVudDxhbnk+KSA9PiB2b2lkO1xuICBhZnRlckNsb3NlPzogKCkgPT4gdm9pZDtcbiAgYW5pbWF0aW9uRW5kPzogKCkgPT4gdm9pZDtcbiAgLyoqIOWuveW6piAqL1xuICB3aWR0aD86IHN0cmluZyB8IG51bWJlcjtcbiAgLyoqIOW6lemDqOWGheWuuSAqL1xuICBmb290ZXI/OiBSZWFjdE5vZGU7XG4gIC8qKiDnoa7orqTmjInpkq7mloflrZcgKi9cbiAgb2tUZXh0Pzogc3RyaW5nO1xuICAvKiog56Gu6K6k5oyJ6ZKu57G75Z6LICovXG4gIG9rVHlwZT86IEJ1dHRvblR5cGU7XG4gIC8qKiDlj5bmtojmjInpkq7mloflrZcgKi9cbiAgY2FuY2VsVGV4dD86IHN0cmluZztcbiAgLyoqIOeCueWHu+iSmeWxguaYr+WQpuWFgeiuuOWFs+mXrSAqL1xuICBtYXNrQ2xvc2FibGU/OiBib29sZWFuO1xuICBkZXN0cm95T25DbG9zZT86IGJvb2xlYW47XG4gIHN0eWxlPzogQ1NTUHJvcGVydGllcztcbiAgd3JhcENsYXNzTmFtZT86IHN0cmluZztcbiAgbWFza1RyYW5zaXRpb25OYW1lPzogc3RyaW5nO1xuICB0cmFuc2l0aW9uTmFtZT86IHN0cmluZztcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBnZXRDb250YWluZXI/OiAoaW5zdGFuY2U6IFJlYWN0SW5zdGFuY2UpID0+IEhUTUxFbGVtZW50O1xuICB6SW5kZXg/OiBudW1iZXI7XG4gIGJvZHlTdHlsZT86IENTU1Byb3BlcnRpZXM7XG4gIG1hc2tTdHlsZT86IENTU1Byb3BlcnRpZXM7XG4gIG1hc2s/OiBib29sZWFuO1xuICBrZXlib2FyZD86IGJvb2xlYW47XG4gIGZ1bmNUeXBlPzogQnV0dG9uRnVuY1R5cGU7XG4gIGNlbnRlcj86IGJvb2xlYW47XG4gIG9rQnV0dG9uUHJvcHM/OiBCdXR0b25Qcm9wcztcbiAgY2FuY2VsQnV0dG9uUHJvcHM/OiBCdXR0b25Qcm9wcztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNb2RhbEZ1bmNQcm9wcyB7XG4gIHByZWZpeENscz86IHN0cmluZztcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICB2aXNpYmxlPzogYm9vbGVhbjtcbiAgdGl0bGU/OiBSZWFjdE5vZGU7XG4gIGNvbnRlbnQ/OiBSZWFjdE5vZGU7XG4gIG9uT2s/OiAoLi4uYXJnczogYW55W10pID0+IGFueSB8IFByb21pc2VMaWtlPGFueT47XG4gIG9uQ2FuY2VsPzogKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnkgfCBQcm9taXNlTGlrZTxhbnk+O1xuICB3aWR0aD86IHN0cmluZyB8IG51bWJlcjtcbiAgaWNvbkNsYXNzTmFtZT86IHN0cmluZztcbiAgb2tUZXh0Pzogc3RyaW5nO1xuICBva1R5cGU/OiBCdXR0b25UeXBlO1xuICBjYW5jZWxUZXh0Pzogc3RyaW5nO1xuICBpY29uVHlwZT86IHN0cmluZztcbiAgbWFza0Nsb3NhYmxlPzogYm9vbGVhbjtcbiAgekluZGV4PzogbnVtYmVyO1xuICBva0NhbmNlbD86IGJvb2xlYW47XG4gIHN0eWxlPzogQ1NTUHJvcGVydGllcztcbiAgdHlwZT86IHN0cmluZztcbiAga2V5Ym9hcmQ/OiBib29sZWFuO1xuICB0cmFuc2l0aW9uTmFtZT86IHN0cmluZztcbiAgZnVuY1R5cGU/OiBCdXR0b25GdW5jVHlwZTtcbiAgY29uZmlybUxvYWRpbmc/OiBib29sZWFuO1xuICBkaXNhYmxlT2s/OiBib29sZWFuO1xuICBkaXNhYmxlQ2FuY2VsPzogYm9vbGVhbjtcbiAgY2xvc2FibGU/OiBib29sZWFuO1xuICBmb290ZXI/OiBSZWFjdE5vZGU7XG59XG5cbmV4cG9ydCB0eXBlIE1vZGFsRnVuYyA9IChcbiAgcHJvcHM6IE1vZGFsRnVuY1Byb3BzLFxuKSA9PiB7XG4gIGRlc3Ryb3k6ICgpID0+IHZvaWQ7XG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIE1vZGFsTG9jYWxlIHtcbiAgb2tUZXh0OiBzdHJpbmc7XG4gIGNhbmNlbFRleHQ6IHN0cmluZztcbiAganVzdE9rVGV4dDogc3RyaW5nO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb2RhbCBleHRlbmRzIENvbXBvbmVudDxNb2RhbFByb3BzLCB7fT4ge1xuICBzdGF0aWMgZGlzcGxheU5hbWUgPSAnTW9kYWwnO1xuXG4gIHN0YXRpYyBpbmZvOiBNb2RhbEZ1bmM7XG5cbiAgc3RhdGljIHN1Y2Nlc3M6IE1vZGFsRnVuYztcblxuICBzdGF0aWMgZXJyb3I6IE1vZGFsRnVuYztcblxuICBzdGF0aWMgd2FybjogTW9kYWxGdW5jO1xuXG4gIHN0YXRpYyB3YXJuaW5nOiBNb2RhbEZ1bmM7XG5cbiAgc3RhdGljIGNvbmZpcm06IE1vZGFsRnVuYztcblxuICBzdGF0aWMgU2lkZWJhcjogdHlwZW9mIFNpZGViYXI7XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICB3aWR0aDogNTIwLFxuICAgIHRyYW5zaXRpb25OYW1lOiAnem9vbScsXG4gICAgbWFza1RyYW5zaXRpb25OYW1lOiAnZmFkZScsXG4gICAgY29uZmlybUxvYWRpbmc6IGZhbHNlLFxuICAgIGRpc2FibGVPazogZmFsc2UsXG4gICAgZGlzYWJsZUNhbmNlbDogZmFsc2UsXG4gICAgdmlzaWJsZTogZmFsc2UsXG4gICAgb2tUeXBlOiAncHJpbWFyeScsXG4gICAgY2VudGVyOiBmYWxzZSxcbiAgfTtcblxuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIHByZWZpeENsczogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBvbk9rOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBvbkNhbmNlbDogUHJvcFR5cGVzLmZ1bmMsXG4gICAgb2tUZXh0OiBQcm9wVHlwZXMubm9kZSxcbiAgICBjYW5jZWxUZXh0OiBQcm9wVHlwZXMubm9kZSxcbiAgICB3aWR0aDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAgIGNvbmZpcm1Mb2FkaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB2aXNpYmxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBhbGlnbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBmb290ZXI6IFByb3BUeXBlcy5ub2RlLFxuICAgIHRpdGxlOiBQcm9wVHlwZXMubm9kZSxcbiAgICBjbG9zYWJsZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgdHJhbnNpdGlvbk5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZnVuY1R5cGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2VudGVyOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBkaXNhYmxlT2s6IFByb3BUeXBlcy5ib29sLFxuICAgIGRpc2FibGVDYW5jZWw6IFByb3BUeXBlcy5ib29sLFxuICAgIG9rVHlwZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBtYXNrVHJhbnNpdGlvbk5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgb2tCdXR0b25Qcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBjYW5jZWxCdXR0b25Qcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgfTtcblxuICBoYW5kbGVDYW5jZWwgPSAoZTogYW55KSA9PiB7XG4gICAgY29uc3QgeyBvbkNhbmNlbCB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAob25DYW5jZWwpIHtcbiAgICAgIG9uQ2FuY2VsKGUpO1xuICAgIH1cbiAgfTtcblxuICBoYW5kbGVPayA9IChlOiBhbnkpID0+IHtcbiAgICBjb25zdCB7IG9uT2sgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKG9uT2spIHtcbiAgICAgIG9uT2soZSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGlmIChtb3VzZVBvc2l0aW9uRXZlbnRCaW5kZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8g5Y+q5pyJ54K55Ye75LqL5Lu25pSv5oyB5LuO6byg5qCH5L2N572u5Yqo55S75bGV5byAXG4gICAgYWRkRXZlbnRMaXN0ZW5lcihkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsICdjbGljaycsIChlOiBNb3VzZUV2ZW50PGFueT4pID0+IHtcbiAgICAgIG1vdXNlUG9zaXRpb24gPSB7XG4gICAgICAgIHg6IGUucGFnZVgsXG4gICAgICAgIHk6IGUucGFnZVksXG4gICAgICB9O1xuICAgICAgLy8gMTAwbXMg5YaF5Y+R55Sf6L+H54K55Ye75LqL5Lu277yM5YiZ5LuO54K55Ye75L2N572u5Yqo55S75bGV56S6XG4gICAgICAvLyDlkKbliJnnm7TmjqUgem9vbSDlsZXnpLpcbiAgICAgIC8vIOi/meagt+WPr+S7peWFvOWuuemdnueCueWHu+aWueW8j+WxleW8gFxuICAgICAgc2V0VGltZW91dCgoKSA9PiAobW91c2VQb3NpdGlvbiA9IG51bGwpLCAxMDApO1xuICAgIH0pO1xuICAgIG1vdXNlUG9zaXRpb25FdmVudEJpbmRlZCA9IHRydWU7XG4gIH1cblxuICByZW5kZXJGb290ZXIgPSAobG9jYWxlOiBNb2RhbExvY2FsZSkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG9rVGV4dCxcbiAgICAgIG9rVHlwZSxcbiAgICAgIGNhbmNlbFRleHQsXG4gICAgICBjb25maXJtTG9hZGluZyxcbiAgICAgIGZ1bmNUeXBlLFxuICAgICAgZGlzYWJsZU9rLFxuICAgICAgZGlzYWJsZUNhbmNlbCxcbiAgICAgIGNhbmNlbEJ1dHRvblByb3BzLFxuICAgICAgb2tCdXR0b25Qcm9wcyxcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAgPEJ1dHRvblxuICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlQ2FuY2VsIHx8IGNvbmZpcm1Mb2FkaW5nfVxuICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuaGFuZGxlQ2FuY2VsfVxuICAgICAgICAgIGZ1bmNUeXBlPXtmdW5jVHlwZX1cbiAgICAgICAgICB7Li4uY2FuY2VsQnV0dG9uUHJvcHN9XG4gICAgICAgID5cbiAgICAgICAgICB7Y2FuY2VsVGV4dCB8fCBsb2NhbGUuY2FuY2VsVGV4dH1cbiAgICAgICAgPC9CdXR0b24+XG4gICAgICAgIDxCdXR0b25cbiAgICAgICAgICB0eXBlPXtva1R5cGV9XG4gICAgICAgICAgZnVuY1R5cGU9e2Z1bmNUeXBlfVxuICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlT2t9XG4gICAgICAgICAgbG9hZGluZz17Y29uZmlybUxvYWRpbmd9XG4gICAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVPa31cbiAgICAgICAgICB7Li4ub2tCdXR0b25Qcm9wc31cbiAgICAgICAgPlxuICAgICAgICAgIHtva1RleHQgfHwgbG9jYWxlLm9rVGV4dH1cbiAgICAgICAgPC9CdXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGZvb3RlciwgdmlzaWJsZSwgcHJlZml4Q2xzOiBjdXN0b21pemVQcmVmaXhDbHMgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgcHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCdtb2RhbCcsIGN1c3RvbWl6ZVByZWZpeENscyk7XG4gICAgY29uc3QgZGVmYXVsdEZvb3RlciA9IChcbiAgICAgIDxMb2NhbGVSZWNlaXZlciBjb21wb25lbnROYW1lPVwiTW9kYWxcIiBkZWZhdWx0TG9jYWxlPXtnZXRDb25maXJtTG9jYWxlKCl9PlxuICAgICAgICB7dGhpcy5yZW5kZXJGb290ZXJ9XG4gICAgICA8L0xvY2FsZVJlY2VpdmVyPlxuICAgICk7XG4gICAgcmV0dXJuIChcbiAgICAgIDxEaWFsb2dcbiAgICAgICAgey4uLnRoaXMucHJvcHN9XG4gICAgICAgIHByZWZpeENscz17cHJlZml4Q2xzfVxuICAgICAgICBmb290ZXI9e2Zvb3RlciA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdEZvb3RlciA6IGZvb3Rlcn1cbiAgICAgICAgdmlzaWJsZT17dmlzaWJsZX1cbiAgICAgICAgbW91c2VQb3NpdGlvbj17bW91c2VQb3NpdGlvbn1cbiAgICAgICAgb25DbG9zZT17dGhpcy5oYW5kbGVDYW5jZWx9XG4gICAgICAvPlxuICAgICk7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==