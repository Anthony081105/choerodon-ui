import React, { Component, isValidElement } from 'react';
import { findDOMNode } from 'react-dom';
import classNames from 'classnames';
import noop from 'lodash/noop';
import Checkbox from '../checkbox';
import Search from './search';
import Item from './item';
import triggerEvent from '../_util/triggerEvent';
import Animate from '../animate';
import PureRenderMixin from '../rc-components/util/PureRenderMixin';
function isRenderResultPlainObject(result) {
    return (result &&
        !isValidElement(result) &&
        Object.prototype.toString.call(result) === '[object Object]');
}
export default class TransferList extends Component {
    constructor() {
        super(...arguments);
        this.state = {
            mounted: false,
        };
        this.handleSelect = (selectedItem) => {
            const { checkedKeys, handleSelect } = this.props;
            const result = checkedKeys.some(key => key === selectedItem.key);
            handleSelect(selectedItem, !result);
        };
        this.handleFilter = (e) => {
            const { handleFilter, prefixCls } = this.props;
            handleFilter(e);
            if (!e.target.value) {
                return;
            }
            // Manually trigger scroll event for lazy search bug
            this.triggerScrollTimer = window.setTimeout(() => {
                const listNode = findDOMNode(this).querySelectorAll(`${prefixCls}-content`)[0];
                if (listNode) {
                    triggerEvent(listNode, 'scroll');
                }
            }, 0);
        };
        this.handleClear = () => {
            const { handleClear } = this.props;
            handleClear();
        };
        this.matchFilter = (text, item) => {
            const { filter, filterOption } = this.props;
            if (filterOption) {
                return filterOption(filter, item);
            }
            return text.indexOf(filter) >= 0;
        };
        this.renderItem = (item) => {
            const { render = noop } = this.props;
            const renderResult = render(item);
            if (isRenderResultPlainObject(renderResult)) {
                return {
                    renderedText: renderResult.value,
                    renderedEl: renderResult.label,
                };
            }
            return {
                renderedText: renderResult,
                renderedEl: renderResult,
            };
        };
    }
    componentDidMount() {
        this.timer = window.setTimeout(() => {
            this.setState({
                mounted: true,
            });
        }, 0);
    }
    componentWillUnmount() {
        clearTimeout(this.timer);
        clearTimeout(this.triggerScrollTimer);
    }
    shouldComponentUpdate(...args) {
        return PureRenderMixin.shouldComponentUpdate.apply(this, args);
    }
    getCheckStatus(filteredDataSource) {
        const { checkedKeys } = this.props;
        if (checkedKeys.length === 0) {
            return 'none';
        }
        if (filteredDataSource.every(item => checkedKeys.indexOf(item.key) >= 0)) {
            return 'all';
        }
        return 'part';
    }
    render() {
        const { prefixCls, dataSource, titleText, checkedKeys, lazy, body = noop, footer = noop, showSearch, style, filter, searchPlaceholder, notFoundContent, itemUnit, itemsUnit, onScroll, handleSelectAll, } = this.props;
        const { mounted } = this.state;
        // Custom Layout
        const footerDom = footer({ ...this.props });
        const bodyDom = body({ ...this.props });
        const listCls = classNames(prefixCls, {
            [`${prefixCls}-with-footer`]: !!footerDom,
        });
        const filteredDataSource = [];
        const totalDataSource = [];
        const showItems = dataSource.map(item => {
            const { renderedText, renderedEl } = this.renderItem(item);
            if (filter && filter.trim() && !this.matchFilter(renderedText, item)) {
                return null;
            }
            // all show items
            totalDataSource.push(item);
            if (!item.disabled) {
                // response to checkAll items
                filteredDataSource.push(item);
            }
            const checked = checkedKeys.indexOf(item.key) >= 0;
            return (React.createElement(Item, { key: item.key, item: item, lazy: lazy, renderedText: renderedText, renderedEl: renderedEl, checked: checked, prefixCls: prefixCls, onClick: this.handleSelect }));
        });
        const unit = dataSource.length > 1 ? itemsUnit : itemUnit;
        const search = showSearch ? (React.createElement("div", { className: `${prefixCls}-body-search-wrapper` },
            React.createElement(Search, { prefixCls: `${prefixCls}-search`, onChange: this.handleFilter, handleClear: this.handleClear, placeholder: searchPlaceholder, value: filter }))) : null;
        const listBody = bodyDom || (React.createElement("div", { className: showSearch ? `${prefixCls}-body ${prefixCls}-body-with-search` : `${prefixCls}-body` },
            search,
            React.createElement(Animate, { component: "ul", componentProps: { onScroll }, className: `${prefixCls}-content`, transitionName: mounted ? `${prefixCls}-content-item-highlight` : '', transitionLeave: false }, showItems),
            React.createElement("div", { className: `${prefixCls}-body-not-found` }, notFoundContent)));
        const listFooter = footerDom ? React.createElement("div", { className: `${prefixCls}-footer` }, footerDom) : null;
        const checkStatus = this.getCheckStatus(filteredDataSource);
        const checkedAll = checkStatus === 'all';
        const checkAllCheckbox = (React.createElement(Checkbox, { checked: checkedAll, indeterminate: checkStatus === 'part', onChange: () => handleSelectAll(filteredDataSource, checkedAll) }));
        return (React.createElement("div", { className: listCls, style: style },
            React.createElement("div", { className: `${prefixCls}-header` },
                checkAllCheckbox,
                React.createElement("span", { className: `${prefixCls}-header-selected` },
                    React.createElement("span", null,
                        (checkedKeys.length > 0 ? `${checkedKeys.length}/` : '') + totalDataSource.length,
                        ' ',
                        unit),
                    React.createElement("span", { className: `${prefixCls}-header-title` }, titleText))),
            listBody,
            listFooter));
    }
}
TransferList.displayName = 'TransferList';
TransferList.defaultProps = {
    dataSource: [],
    titleText: '',
    showSearch: false,
    render: noop,
    lazy: {},
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvdHJhbnNmZXIvbGlzdC50c3giLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLEVBQUUsRUFBZSxTQUFTLEVBQWlCLGNBQWMsRUFBYSxNQUFNLE9BQU8sQ0FBQztBQUNoRyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sVUFBVSxNQUFNLFlBQVksQ0FBQztBQUNwQyxPQUFPLElBQUksTUFBTSxhQUFhLENBQUM7QUFDL0IsT0FBTyxRQUFRLE1BQU0sYUFBYSxDQUFDO0FBRW5DLE9BQU8sTUFBTSxNQUFNLFVBQVUsQ0FBQztBQUM5QixPQUFPLElBQUksTUFBTSxRQUFRLENBQUM7QUFDMUIsT0FBTyxZQUFZLE1BQU0sdUJBQXVCLENBQUM7QUFDakQsT0FBTyxPQUFPLE1BQU0sWUFBWSxDQUFDO0FBQ2pDLE9BQU8sZUFBZSxNQUFNLHVDQUF1QyxDQUFDO0FBRXBFLFNBQVMseUJBQXlCLENBQUMsTUFBVztJQUM1QyxPQUFPLENBQ0wsTUFBTTtRQUNOLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQztRQUN2QixNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssaUJBQWlCLENBQzdELENBQUM7QUFDSixDQUFDO0FBMEJELE1BQU0sQ0FBQyxPQUFPLE9BQU8sWUFBYSxTQUFRLFNBQWlDO0lBQTNFOztRQWVFLFVBQUssR0FBRztZQUNOLE9BQU8sRUFBRSxLQUFLO1NBQ2YsQ0FBQztRQThCRixpQkFBWSxHQUFHLENBQUMsWUFBMEIsRUFBRSxFQUFFO1lBQzVDLE1BQU0sRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUNqRCxNQUFNLE1BQU0sR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLFlBQVksQ0FBQyxHQUFHLENBQUMs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T0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLO1lBQ25DLDZCQUFLLFNBQVMsRUFBRSxHQUFHLFNBQVMsU0FBUztnQkFDbEMsZ0JBQWdCO2dCQUNqQiw4QkFBTSxTQUFTLEVBQUUsR0FBRyxTQUFTLGtCQUFrQjtvQkFDN0M7d0JBQ0csQ0FBQyxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGVBQWUsQ0FBQyxNQUFNO3dCQUFFLEdBQUc7d0JBQ3RGLElBQUksQ0FDQTtvQkFDUCw4QkFBTSxTQUFTLEVBQUUsR0FBRyxTQUFTLGVBQWUsSUFBRyxTQUFTLENBQVEsQ0FDM0QsQ0FDSDtZQUNMLFFBQVE7WUFDUixVQUFVLENBQ1AsQ0FDUCxDQUFDO0lBQ0osQ0FBQzs7QUE1Tk0sd0JBQVcsR0FBRyxjQUFjLENBQUM7QUFFN0IseUJBQVksR0FBRztJQUNwQixVQUFVLEVBQUUsRUFBRTtJQUNkLFNBQVMsRUFBRSxFQUFFO0lBQ2IsVUFBVSxFQUFFLEtBQUs7SUFDakIsTUFBTSxFQUFFLElBQUk7SUFDWixJQUFJLEVBQUUsRUFBRTtDQUNULENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMvdHJhbnNmZXIvbGlzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IENoYW5nZUV2ZW50LCBDb21wb25lbnQsIENTU1Byb3BlcnRpZXMsIGlzVmFsaWRFbGVtZW50LCBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBmaW5kRE9NTm9kZSB9IGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBub29wIGZyb20gJ2xvZGFzaC9ub29wJztcbmltcG9ydCBDaGVja2JveCBmcm9tICcuLi9jaGVja2JveCc7XG5pbXBvcnQgeyBUcmFuc2Zlckl0ZW0gfSBmcm9tICcuL2luZGV4JztcbmltcG9ydCBTZWFyY2ggZnJvbSAnLi9zZWFyY2gnO1xuaW1wb3J0IEl0ZW0gZnJvbSAnLi9pdGVtJztcbmltcG9ydCB0cmlnZ2VyRXZlbnQgZnJvbSAnLi4vX3V0aWwvdHJpZ2dlckV2ZW50JztcbmltcG9ydCBBbmltYXRlIGZyb20gJy4uL2FuaW1hdGUnO1xuaW1wb3J0IFB1cmVSZW5kZXJNaXhpbiBmcm9tICcuLi9yYy1jb21wb25lbnRzL3V0aWwvUHVyZVJlbmRlck1peGluJztcblxuZnVuY3Rpb24gaXNSZW5kZXJSZXN1bHRQbGFpbk9iamVjdChyZXN1bHQ6IGFueSk6IHJlc3VsdCBpcyB7IHZhbHVlOyBsYWJlbCB9IHtcbiAgcmV0dXJuIChcbiAgICByZXN1bHQgJiZcbiAgICAhaXNWYWxpZEVsZW1lbnQocmVzdWx0KSAmJlxuICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChyZXN1bHQpID09PSAnW29iamVjdCBPYmplY3RdJ1xuICApO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zZmVyTGlzdFByb3BzIHtcbiAgcHJlZml4Q2xzOiBzdHJpbmc7XG4gIHRpdGxlVGV4dDogc3RyaW5nO1xuICBkYXRhU291cmNlOiBUcmFuc2Zlckl0ZW1bXTtcbiAgZmlsdGVyOiBzdHJpbmc7XG4gIGZpbHRlck9wdGlvbj86IChmaWx0ZXJUZXh0OiBhbnksIGl0ZW06IGFueSkgPT4gYm9vbGVhbjtcbiAgc3R5bGU/OiBDU1NQcm9wZXJ0aWVzO1xuICBjaGVja2VkS2V5czogc3RyaW5nW107XG4gIGhhbmRsZUZpbHRlcjogKGU6IGFueSkgPT4gdm9pZDtcbiAgaGFuZGxlU2VsZWN0OiAoc2VsZWN0ZWRJdGVtOiBhbnksIGNoZWNrZWQ6IGJvb2xlYW4pID0+IHZvaWQ7XG4gIGhhbmRsZVNlbGVjdEFsbDogKGRhdGFTb3VyY2U6IGFueVtdLCBjaGVja0FsbDogYm9vbGVhbikgPT4gdm9pZDtcbiAgaGFuZGxlQ2xlYXI6ICgpID0+IHZvaWQ7XG4gIHJlbmRlcj86IChpdGVtOiBhbnkpID0+IGFueTtcbiAgc2hvd1NlYXJjaD86IGJvb2xlYW47XG4gIHNlYXJjaFBsYWNlaG9sZGVyOiBzdHJpbmc7XG4gIG5vdEZvdW5kQ29udGVudDogUmVhY3ROb2RlO1xuICBpdGVtVW5pdDogc3RyaW5nO1xuICBpdGVtc1VuaXQ6IHN0cmluZztcbiAgYm9keT86IChwcm9wczogYW55KSA9PiBhbnk7XG4gIGZvb3Rlcj86IChwcm9wczogYW55KSA9PiBhbnk7XG4gIGxhenk/OiBib29sZWFuIHwge307XG4gIG9uU2Nyb2xsOiBGdW5jdGlvbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVHJhbnNmZXJMaXN0IGV4dGVuZHMgQ29tcG9uZW50PFRyYW5zZmVyTGlzdFByb3BzLCBhbnk+IHtcbiAgc3RhdGljIGRpc3BsYXlOYW1lID0gJ1RyYW5zZmVyTGlzdCc7XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBkYXRhU291cmNlOiBbXSxcbiAgICB0aXRsZVRleHQ6ICcnLFxuICAgIHNob3dTZWFyY2g6IGZhbHNlLFxuICAgIHJlbmRlcjogbm9vcCxcbiAgICBsYXp5OiB7fSxcbiAgfTtcblxuICB0aW1lcjogbnVtYmVyO1xuXG4gIHRyaWdnZXJTY3JvbGxUaW1lcjogbnVtYmVyO1xuXG4gIHN0YXRlID0ge1xuICAgIG1vdW50ZWQ6IGZhbHNlLFxuICB9O1xuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMudGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgbW91bnRlZDogdHJ1ZSxcbiAgICAgIH0pO1xuICAgIH0sIDApO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZXIpO1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnRyaWdnZXJTY3JvbGxUaW1lcik7XG4gIH1cblxuICBzaG91bGRDb21wb25lbnRVcGRhdGUoLi4uYXJnczogYW55W10pIHtcbiAgICByZXR1cm4gUHVyZVJlbmRlck1peGluLnNob3VsZENvbXBvbmVudFVwZGF0ZS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgfVxuXG4gIGdldENoZWNrU3RhdHVzKGZpbHRlcmVkRGF0YVNvdXJjZTogVHJhbnNmZXJJdGVtW10pIHtcbiAgICBjb25zdCB7IGNoZWNrZWRLZXlzIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmIChjaGVja2VkS2V5cy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiAnbm9uZSc7XG4gICAgfVxuICAgIGlmIChmaWx0ZXJlZERhdGFTb3VyY2UuZXZlcnkoaXRlbSA9PiBjaGVja2VkS2V5cy5pbmRleE9mKGl0ZW0ua2V5KSA+PSAwKSkge1xuICAgICAgcmV0dXJuICdhbGwnO1xuICAgIH1cbiAgICByZXR1cm4gJ3BhcnQnO1xuICB9XG5cbiAgaGFuZGxlU2VsZWN0ID0gKHNlbGVjdGVkSXRlbTogVHJhbnNmZXJJdGVtKSA9PiB7XG4gICAgY29uc3QgeyBjaGVja2VkS2V5cywgaGFuZGxlU2VsZWN0IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHJlc3VsdCA9IGNoZWNrZWRLZXlzLnNvbWUoa2V5ID0+IGtleSA9PT0gc2VsZWN0ZWRJdGVtLmtleSk7XG4gICAgaGFuZGxlU2VsZWN0KHNlbGVjdGVkSXRlbSwgIXJlc3VsdCk7XG4gIH07XG5cbiAgaGFuZGxlRmlsdGVyID0gKGU6IENoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB7XG4gICAgY29uc3QgeyBoYW5kbGVGaWx0ZXIsIHByZWZpeENscyB9ID0gdGhpcy5wcm9wcztcbiAgICBoYW5kbGVGaWx0ZXIoZSk7XG4gICAgaWYgKCFlLnRhcmdldC52YWx1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBNYW51YWxseSB0cmlnZ2VyIHNjcm9sbCBldmVudCBmb3IgbGF6eSBzZWFyY2ggYnVnXG5cbiAgICB0aGlzLnRyaWdnZXJTY3JvbGxUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGNvbnN0IGxpc3ROb2RlID0gKGZpbmRET01Ob2RlKHRoaXMpIGFzIEhUTUxFbGVtZW50KS5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgICBgJHtwcmVmaXhDbHN9LWNvbnRlbnRgLFxuICAgICAgKVswXTtcbiAgICAgIGlmIChsaXN0Tm9kZSkge1xuICAgICAgICB0cmlnZ2VyRXZlbnQobGlzdE5vZGUsICdzY3JvbGwnKTtcbiAgICAgIH1cbiAgICB9LCAwKTtcbiAgfTtcblxuICBoYW5kbGVDbGVhciA9ICgpID0+IHtcbiAgICBjb25zdCB7IGhhbmRsZUNsZWFyIH0gPSB0aGlzLnByb3BzO1xuICAgIGhhbmRsZUNsZWFyKCk7XG4gIH07XG5cbiAgbWF0Y2hGaWx0ZXIgPSAodGV4dDogc3RyaW5nLCBpdGVtOiBUcmFuc2Zlckl0ZW0pID0+IHtcbiAgICBjb25zdCB7IGZpbHRlciwgZmlsdGVyT3B0aW9uIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmIChmaWx0ZXJPcHRpb24pIHtcbiAgICAgIHJldHVybiBmaWx0ZXJPcHRpb24oZmlsdGVyLCBpdGVtKTtcbiAgICB9XG4gICAgcmV0dXJuIHRleHQuaW5kZXhPZihmaWx0ZXIpID49IDA7XG4gIH07XG5cbiAgcmVuZGVySXRlbSA9IChpdGVtOiBUcmFuc2Zlckl0ZW0pID0+IHtcbiAgICBjb25zdCB7IHJlbmRlciA9IG5vb3AgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgcmVuZGVyUmVzdWx0ID0gcmVuZGVyKGl0ZW0pO1xuICAgIGlmIChpc1JlbmRlclJlc3VsdFBsYWluT2JqZWN0KHJlbmRlclJlc3VsdCkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlbmRlcmVkVGV4dDogcmVuZGVyUmVzdWx0LnZhbHVlLFxuICAgICAgICByZW5kZXJlZEVsOiByZW5kZXJSZXN1bHQubGFiZWwsXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgcmVuZGVyZWRUZXh0OiByZW5kZXJSZXN1bHQsXG4gICAgICByZW5kZXJlZEVsOiByZW5kZXJSZXN1bHQsXG4gICAgfTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgcHJlZml4Q2xzLFxuICAgICAgZGF0YVNvdXJjZSxcbiAgICAgIHRpdGxlVGV4dCxcbiAgICAgIGNoZWNrZWRLZXlzLFxuICAgICAgbGF6eSxcbiAgICAgIGJvZHkgPSBub29wLFxuICAgICAgZm9vdGVyID0gbm9vcCxcbiAgICAgIHNob3dTZWFyY2gsXG4gICAgICBzdHlsZSxcbiAgICAgIGZpbHRlcixcbiAgICAgIHNlYXJjaFBsYWNlaG9sZGVyLFxuICAgICAgbm90Rm91bmRDb250ZW50LFxuICAgICAgaXRlbVVuaXQsXG4gICAgICBpdGVtc1VuaXQsXG4gICAgICBvblNjcm9sbCxcbiAgICAgIGhhbmRsZVNlbGVjdEFsbCxcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IG1vdW50ZWQgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICAvLyBDdXN0b20gTGF5b3V0XG4gICAgY29uc3QgZm9vdGVyRG9tID0gZm9vdGVyKHsgLi4udGhpcy5wcm9wcyB9KTtcbiAgICBjb25zdCBib2R5RG9tID0gYm9keSh7IC4uLnRoaXMucHJvcHMgfSk7XG5cbiAgICBjb25zdCBsaXN0Q2xzID0gY2xhc3NOYW1lcyhwcmVmaXhDbHMsIHtcbiAgICAgIFtgJHtwcmVmaXhDbHN9LXdpdGgtZm9vdGVyYF06ICEhZm9vdGVyRG9tLFxuICAgIH0pO1xuXG4gICAgY29uc3QgZmlsdGVyZWREYXRhU291cmNlOiBUcmFuc2Zlckl0ZW1bXSA9IFtdO1xuICAgIGNvbnN0IHRvdGFsRGF0YVNvdXJjZTogVHJhbnNmZXJJdGVtW10gPSBbXTtcblxuICAgIGNvbnN0IHNob3dJdGVtcyA9IGRhdGFTb3VyY2UubWFwKGl0ZW0gPT4ge1xuICAgICAgY29uc3QgeyByZW5kZXJlZFRleHQsIHJlbmRlcmVkRWwgfSA9IHRoaXMucmVuZGVySXRlbShpdGVtKTtcbiAgICAgIGlmIChmaWx0ZXIgJiYgZmlsdGVyLnRyaW0oKSAmJiAhdGhpcy5tYXRjaEZpbHRlcihyZW5kZXJlZFRleHQsIGl0ZW0pKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICAvLyBhbGwgc2hvdyBpdGVtc1xuICAgICAgdG90YWxEYXRhU291cmNlLnB1c2goaXRlbSk7XG4gICAgICBpZiAoIWl0ZW0uZGlzYWJsZWQpIHtcbiAgICAgICAgLy8gcmVzcG9uc2UgdG8gY2hlY2tBbGwgaXRlbXNcbiAgICAgICAgZmlsdGVyZWREYXRhU291cmNlLnB1c2goaXRlbSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGNoZWNrZWQgPSBjaGVja2VkS2V5cy5pbmRleE9mKGl0ZW0ua2V5KSA+PSAwO1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPEl0ZW1cbiAgICAgICAgICBrZXk9e2l0ZW0ua2V5fVxuICAgICAgICAgIGl0ZW09e2l0ZW19XG4gICAgICAgICAgbGF6eT17bGF6eX1cbiAgICAgICAgICByZW5kZXJlZFRleHQ9e3JlbmRlcmVkVGV4dH1cbiAgICAgICAgICByZW5kZXJlZEVsPXtyZW5kZXJlZEVsfVxuICAgICAgICAgIGNoZWNrZWQ9e2NoZWNrZWR9XG4gICAgICAgICAgcHJlZml4Q2xzPXtwcmVmaXhDbHN9XG4gICAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVTZWxlY3R9XG4gICAgICAgIC8+XG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgY29uc3QgdW5pdCA9IGRhdGFTb3VyY2UubGVuZ3RoID4gMSA/IGl0ZW1zVW5pdCA6IGl0ZW1Vbml0O1xuXG4gICAgY29uc3Qgc2VhcmNoID0gc2hvd1NlYXJjaCA/IChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtgJHtwcmVmaXhDbHN9LWJvZHktc2VhcmNoLXdyYXBwZXJgfT5cbiAgICAgICAgPFNlYXJjaFxuICAgICAgICAgIHByZWZpeENscz17YCR7cHJlZml4Q2xzfS1zZWFyY2hgfVxuICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUZpbHRlcn1cbiAgICAgICAgICBoYW5kbGVDbGVhcj17dGhpcy5oYW5kbGVDbGVhcn1cbiAgICAgICAgICBwbGFjZWhvbGRlcj17c2VhcmNoUGxhY2Vob2xkZXJ9XG4gICAgICAgICAgdmFsdWU9e2ZpbHRlcn1cbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgICkgOiBudWxsO1xuXG4gICAgY29uc3QgbGlzdEJvZHkgPSBib2R5RG9tIHx8IChcbiAgICAgIDxkaXZcbiAgICAgICAgY2xhc3NOYW1lPXtcbiAgICAgICAgICBzaG93U2VhcmNoID8gYCR7cHJlZml4Q2xzfS1ib2R5ICR7cHJlZml4Q2xzfS1ib2R5LXdpdGgtc2VhcmNoYCA6IGAke3ByZWZpeENsc30tYm9keWBcbiAgICAgICAgfVxuICAgICAgPlxuICAgICAgICB7c2VhcmNofVxuICAgICAgICA8QW5pbWF0ZVxuICAgICAgICAgIGNvbXBvbmVudD1cInVsXCJcbiAgICAgICAgICBjb21wb25lbnRQcm9wcz17eyBvblNjcm9sbCB9fVxuICAgICAgICAgIGNsYXNzTmFtZT17YCR7cHJlZml4Q2xzfS1jb250ZW50YH1cbiAgICAgICAgICB0cmFuc2l0aW9uTmFtZT17bW91bnRlZCA/IGAke3ByZWZpeENsc30tY29udGVudC1pdGVtLWhpZ2hsaWdodGAgOiAnJ31cbiAgICAgICAgICB0cmFuc2l0aW9uTGVhdmU9e2ZhbHNlfVxuICAgICAgICA+XG4gICAgICAgICAge3Nob3dJdGVtc31cbiAgICAgICAgPC9BbmltYXRlPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YCR7cHJlZml4Q2xzfS1ib2R5LW5vdC1mb3VuZGB9Pntub3RGb3VuZENvbnRlbnR9PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuXG4gICAgY29uc3QgbGlzdEZvb3RlciA9IGZvb3RlckRvbSA/IDxkaXYgY2xhc3NOYW1lPXtgJHtwcmVmaXhDbHN9LWZvb3RlcmB9Pntmb290ZXJEb219PC9kaXY+IDogbnVsbDtcblxuICAgIGNvbnN0IGNoZWNrU3RhdHVzID0gdGhpcy5nZXRDaGVja1N0YXR1cyhmaWx0ZXJlZERhdGFTb3VyY2UpO1xuICAgIGNvbnN0IGNoZWNrZWRBbGwgPSBjaGVja1N0YXR1cyA9PT0gJ2FsbCc7XG4gICAgY29uc3QgY2hlY2tBbGxDaGVja2JveCA9IChcbiAgICAgIDxDaGVja2JveFxuICAgICAgICBjaGVja2VkPXtjaGVja2VkQWxsfVxuICAgICAgICBpbmRldGVybWluYXRlPXtjaGVja1N0YXR1cyA9PT0gJ3BhcnQnfVxuICAgICAgICBvbkNoYW5nZT17KCkgPT4gaGFuZGxlU2VsZWN0QWxsKGZpbHRlcmVkRGF0YVNvdXJjZSwgY2hlY2tlZEFsbCl9XG4gICAgICAvPlxuICAgICk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9e2xpc3RDbHN9IHN0eWxlPXtzdHlsZX0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgJHtwcmVmaXhDbHN9LWhlYWRlcmB9PlxuICAgICAgICAgIHtjaGVja0FsbENoZWNrYm94fVxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT17YCR7cHJlZml4Q2xzfS1oZWFkZXItc2VsZWN0ZWRgfT5cbiAgICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgICB7KGNoZWNrZWRLZXlzLmxlbmd0aCA+IDAgPyBgJHtjaGVja2VkS2V5cy5sZW5ndGh9L2AgOiAnJykgKyB0b3RhbERhdGFTb3VyY2UubGVuZ3RofXsnICd9XG4gICAgICAgICAgICAgIHt1bml0fVxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtgJHtwcmVmaXhDbHN9LWhlYWRlci10aXRsZWB9Pnt0aXRsZVRleHR9PC9zcGFuPlxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIHtsaXN0Qm9keX1cbiAgICAgICAge2xpc3RGb290ZXJ9XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=