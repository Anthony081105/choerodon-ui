import React, { Component } from 'react';
import classNames from 'classnames';
import animation from '../_util/openAnimation';
import CollapsePanel from './CollapsePanel';
import RcCollapse from '../rc-components/collapse';
import { getPrefixCls, getConfig } from '../configure';
import LocaleReceiver from '../locale-provider/LocaleReceiver';
import defaultLocale from '../locale-provider/default';
export default class Collapse extends Component {
    constructor() {
        super(...arguments);
        this.renderExpandIcon = (panelProps = {}) => {
            const { expandIcon } = this.props;
            return expandIcon ? expandIcon(panelProps) : null;
        };
        this.renderExpandTextContent = (panelProps = {}, locale) => {
            const { prefixCls: customizePrefixCls, } = this.props;
            const prefixCls = getPrefixCls('collapse', customizePrefixCls);
            const iconCls = classNames({
                [`${prefixCls}-expand-icon`]: true,
                [`${prefixCls}-expanded`]: panelProps.isActive,
                [`${prefixCls}-collapsed`]: !panelProps.isActive,
            });
            const icon = React.createElement("i", { className: iconCls });
            return (React.createElement(React.Fragment, null,
                panelProps.isActive ? React.createElement("span", { className: `${prefixCls}-expand-text` }, locale.fold) :
                    React.createElement("span", { className: `${prefixCls}-expand-text` }, locale.unfold),
                icon));
        };
    }
    render() {
        const { prefixCls: customizePrefixCls, className = '', expandIcon, bordered, expandIconPosition, trigger, } = this.props;
        const prefixCls = getPrefixCls('collapse', customizePrefixCls);
        const expandIconPositionCof = expandIconPosition || getConfig('collapseExpandIconPosition');
        const triggerCof = trigger || getConfig('collapseTrigger');
        const collapseClassName = classNames({
            [`${prefixCls}-borderless`]: !bordered,
            // @ts-ignore
            [`${prefixCls}-text-action`]: expandIcon === 'text' && expandIconPositionCof === 'left',
            [`${prefixCls}-trigger`]: triggerCof === 'header',
            [`${prefixCls}-icon-position-${expandIconPositionCof}`]: true,
        }, className);
        let expandIconContent;
        if (typeof expandIcon === 'function') {
            expandIconContent = (panelProps) => this.renderExpandIcon(panelProps);
        }
        else if (expandIcon === 'text') {
            expandIconContent = (panelProps) => {
                return (React.createElement(LocaleReceiver, { componentName: "Collapse", defaultLocale: defaultLocale.Collapse }, locale => this.renderExpandTextContent(panelProps, locale)));
            };
        }
        return (React.createElement(RcCollapse, Object.assign({}, this.props, { expandIcon: expandIconContent, prefixCls: prefixCls, className: collapseClassName })));
    }
}
Collapse.displayName = 'Collapse';
Collapse.Panel = CollapsePanel;
Collapse.defaultProps = {
    bordered: true,
    openAnimation: {
        ...animation,
        appear() { },
    },
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,