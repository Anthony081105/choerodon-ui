import { __decorate } from "tslib";
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { observer } from 'mobx-react';
import { action, computed, get, set } from 'mobx';
import classNames from 'classnames';
import isNil from 'lodash/isNil';
import measureScrollbar from 'choerodon-ui/lib/_util/measureScrollbar';
import { pxToRem } from 'choerodon-ui/lib/_util/UnitConvertor';
import TableContext from './TableContext';
import { minColumnWidth } from './Column';
import TableEditor from './TableEditor';
import TableCol from './TableCol';
import { getColumnKey } from './utils';
import autobind from '../_util/autobind';
import { DRAG_KEY } from './TableStore';
let TableWrapper = class TableWrapper extends Component {
    get leafColumnsWidth() {
        const { tableStore } = this.context;
        const { lock } = this.props;
        switch (lock) {
            case "left" /* left */:
            case true:
                return tableStore.leftLeafColumnsWidth;
            case "right" /* right */:
                return tableStore.rightLeafColumnsWidth;
            default:
                if (tableStore.overflowX) {
                    return tableStore.totalLeafColumnsWidth;
                }
        }
        return undefined;
    }
    get leafEditorColumns() {
        const { tableStore } = this.context;
        const { lock } = this.props;
        switch (lock) {
            case "left" /* left */:
            case true:
                return tableStore.leftLeafColumns.filter(({ editor, name, hidden }) => editor && name && !hidden);
            case "right" /* right */:
                return tableStore.rightLeafColumns.filter(({ editor, name, hidden }) => editor && name && !hidden);
            default:
                return tableStore.leafColumns.filter(({ editor, name, hidden, lock: columnLock }) => editor && name && !hidden && (!columnLock || !tableStore.overflowX));
        }
    }
    get leafColumns() {
        const { tableStore } = this.context;
        const { lock } = this.props;
        switch (lock) {
            case "left" /* left */:
            case true:
                return tableStore.leftLeafColumns.filter(({ hidden }) => !hidden);
            case "right" /* right */:
                return tableStore.rightLeafColumns.filter(({ hidden }) => !hidden);
            default:
                return tableStore.leafColumns.filter(({ hidden }) => !hidden);
        }
    }
    handleResizeEnd() {
        const { tableStore } = this.context;
        if (tableStore.rowHeight === 'auto') {
            this.syncFixedTableRowHeight();
        }
    }
    getCol(column, width) {
        if (!column.hidden) {
            const { prefixCls } = this.props;
            return (React.createElement(TableCol, { key: getColumnKey(column), prefixCls: prefixCls, width: width, minWidth: minColumnWidth(column), onResizeEnd: this.handleResizeEnd }));
        }
    }
    getColGroup() {
        const { lock, hasHeader, hasFooter } = this.props;
        const { tableStore: { overflowY, overflowX }, } = this.context;
        let hasEmptyWidth = false;
        const filterDrag = (columnItem) => {
            const { dragColumnAlign } = this.props;
            if (dragColumnAlign) {
                return columnItem.key === DRAG_KEY;
            }
            return true;
        };
        const cols = this.leafColumns.filter(filterDrag).map((column, index, array) => {
            let width = get(column, 'width');
            if (!overflowX) {
                if (!hasEmptyWidth && index === array.length - 1) {
                    width = undefined;
                }
                else if (isNil(width)) {
                    hasEmptyWidth = true;
                }
            }
            return this.getCol(column, width);
        });
        if (overflowY && lock !== "left" /* left */ && (hasHeader || hasFooter)) {
            cols.push(React.createElement("col", { key: "fixed-column", style: { width: pxToRem(measureScrollbar()) } }));
        }
        return React.createElement("colgroup", null, cols);
    }
    getEditors() {
        const { prefixCls } = this.props;
        return this.leafEditorColumns.map(column => (React.createElement(TableEditor, { key: column.name, prefixCls: prefixCls, column: column })));
    }
    saveRef(node) {
        this.tableWrapper = node;
    }
    get tableWidth() {
        const { lock, hasBody, dragColumnAlign } = this.props;
        const { tableStore: { overflowY, overflowX, props: { virtual }, columns }, } = this.context;
        if (dragColumnAlign && columns && columns.length > 0) {
            const dragColumns = columns.filter((columnItem) => {
                return columnItem.key === DRAG_KEY;
            });
            if (dragColumns.length > 0) {
                return dragColumns[0].width;
            }
        }
        if (overflowX) {
            let tableWidth = this.leafColumnsWidth;
            if (tableWidth !== undefined && overflowY && lock !== "left" /* left */ && !hasBody) {
                if (!(virtual && lock === "right" /* right */)) {
                    tableWidth += measureScrollbar();
                }
            }
            return pxToRem(tableWidth);
        }
        return '100%';
    }
    render() {
        const { children, lock, hasBody, prefixCls } = this.props;
        const { tableStore: { overflowY, height }, } = this.context;
        const editors = hasBody && this.getEditors();
        const className = classNames({
            [`${prefixCls}-last-row-bordered`]: hasBody && !overflowY && height !== undefined,
        });
        const table = (React.createElement("table", { key: "table", ref: lock ? undefined : this.saveRef, className: className, style: { width: this.tableWidth } },
            this.getColGroup(),
            children));
        return [editors, table];
    }
    syncFixedTableRowHeight() {
        const { prefixCls, hasFooter, hasBody, hasHeader } = this.props;
        if (this.tableWrapper) {
            const { tableStore } = this.context;
            const { lockColumnsHeadRowsHeight, lockColumnsBodyRowsHeight, lockColumnsFootRowsHeight, } = tableStore;
            if (hasHeader) {
                const headRows = Array.from(this.tableWrapper.querySelectorAll('thead tr'));
                headRows.forEach((row, index) => set(lockColumnsHeadRowsHeight, index, row.offsetHeight));
            }
            if (hasBody) {
                const bodyRows = Array.from(this.tableWrapper.querySelectorAll(`.${prefixCls}-row`));
                bodyRows.forEach(row => set(lockColumnsBodyRowsHeight, row.dataset.index, row.offsetHeight));
            }
            if (hasFooter) {
                const footRows = Array.from(this.tableWrapper.querySelectorAll('tfoot tr'));
                footRows.forEach((row, index) => set(lockColumnsFootRowsHeight, index, row.offsetHeight));
            }
        }
    }
};
TableWrapper.contextType = TableContext;
TableWrapper.propTypes = {
    lock: PropTypes.oneOfType([
        PropTypes.bool,
        PropTypes.oneOf(["right" /* right */, "left" /* left */]),
    ]),
    hasBody: PropTypes.bool,
    hasHeader: PropTypes.bool,
    hasFooter: PropTypes.bool,
};
__decorate([
    computed
], TableWrapper.prototype, "leafColumnsWidth", null);
__decorate([
    computed
], TableWrapper.prototype, "leafEditorColumns", null);
__decorate([
    computed
], TableWrapper.prototype, "leafColumns", null);
__decorate([
    autobind
], TableWrapper.prototype, "handleResizeEnd", null);
__decorate([
    autobind
], TableWrapper.prototype, "saveRef", null);
__decorate([
    computed
], TableWrapper.prototype, "tableWidth", null);
__decorate([
    action
], TableWrapper.prototype, "syncFixedTableRowHeight", null);
TableWrapper = __decorate([
    observer
], TableWrapper);
export default TableWrapper;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,