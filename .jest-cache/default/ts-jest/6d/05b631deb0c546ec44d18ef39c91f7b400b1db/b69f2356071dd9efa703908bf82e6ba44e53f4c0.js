import isString from 'lodash/isString';
import ValidationResult from '../ValidationResult';
import { $l } from '../../locale-context';
import isEmpty from '../../_util/isEmpty';
import { axiosConfigAdapter } from '../../data-set/utils';
export default async function uniqueError(value, props) {
    const { dataSet, record, unique, name, multiple, range, defaultValidationMessages } = props;
    if (!isEmpty(value) && dataSet && record && unique && name && !multiple && !range) {
        const myField = record.getField(name);
        if (myField && myField.get('type') === "object" /* object */) {
            value = value[myField.get('valueField')];
        }
        if (myField) {
            let { dirty } = myField;
            const fields = { [name]: value };
            if (isString(unique) &&
                [...record.fields.entries()].some(([fieldName, field]) => {
                    if (fieldName !== name &&
                        field &&
                        field.get('unique') === unique &&
                        !field.get('multiple') &&
                        !field.get('range')) {
                        const otherValue = record.get(fieldName);
                        if (isEmpty(otherValue)) {
                            return true;
                        }
                        if (!dirty && field.dirty) {
                            dirty = true;
                        }
                        fields[fieldName] = otherValue;
                    }
                    return false;
                })) {
                return true;
            }
            if (!dirty) {
                return true;
            }
            let invalid = dataSet.data.some(item => item !== record &&
                Object.keys(fields).every(field => {
                    const dataSetField = record.getField(name);
                    if (dataSetField && dataSetField.get('type') === "object" /* object */) {
                        const valueField = dataSetField.get('valueField');
                        return fields[field] === item.get(field)[valueField];
                    }
                    return fields[field] === item.get(field);
                }));
            if (!invalid) {
                const newConfig = axiosConfigAdapter('validate', dataSet, { unique: [fields] });
                if (newConfig.url) {
                    const results = await dataSet.axios(newConfig);
                    invalid = [].concat(results).some(result => !result);
                }
            }
            if (invalid) {
                const ruleName = 'uniqueError';
                const { [ruleName]: validationMessage = $l('Validator', 'unique'), } = defaultValidationMessages;
                return new ValidationResult({
                    validationMessage,
                    value,
                    ruleName,
                });
            }
        }
    }
    return true;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2h1aWh1YXdrL0RvY3VtZW50cy9vcHQvY2hvZXJvZG9uLXVpL2NvbXBvbmVudHMtcHJvL3ZhbGlkYXRvci9ydWxlcy91bmlxdWVFcnJvci50c3giLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxRQUFRLE1BQU0saUJBQWlCLENBQUM7QUFDdkMsT0FBTyxnQkFBZ0IsTUFBTSxxQkFBcUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDMUMsT0FBTyxPQUFPLE1BQU0scUJBQXFCLENBQUM7QUFFMUMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFHMUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLFVBQVUsV0FBVyxDQUN2QyxLQUFVLEVBQ1YsS0FBcUI7SUFFckIsTUFBTSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLHlCQUF5QixFQUFFLEdBQUcsS0FBSyxDQUFDO0lBQzVGLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksT0FBTyxJQUFJLE1BQU0sSUFBSSxNQUFNLElBQUksSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLENBQUMsS0FBSyxFQUFFO1FBQ2pGLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdEMsSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsMEJBQXFCLEVBQUU7WUFDdkQsS0FBSyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7U0FDMUM7UUFDRCxJQUFJLE9BQU8sRUFBRTtZQUNYLElBQUksRUFBRSxLQUFLLEVBQUUsR0FBRyxPQUFPLENBQUM7WUFDeEIsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDO1lBQ2pDLElBQ0Us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QyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvaHVpaHVhd2svRG9jdW1lbnRzL29wdC9jaG9lcm9kb24tdWkvY29tcG9uZW50cy1wcm8vdmFsaWRhdG9yL3J1bGVzL3VuaXF1ZUVycm9yLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgaXNTdHJpbmcgZnJvbSAnbG9kYXNoL2lzU3RyaW5nJztcbmltcG9ydCBWYWxpZGF0aW9uUmVzdWx0IGZyb20gJy4uL1ZhbGlkYXRpb25SZXN1bHQnO1xuaW1wb3J0IHsgJGwgfSBmcm9tICcuLi8uLi9sb2NhbGUtY29udGV4dCc7XG5pbXBvcnQgaXNFbXB0eSBmcm9tICcuLi8uLi9fdXRpbC9pc0VtcHR5JztcbmltcG9ydCB7IG1ldGhvZFJldHVybiwgVmFsaWRhdG9yUHJvcHMgfSBmcm9tICcuJztcbmltcG9ydCB7IGF4aW9zQ29uZmlnQWRhcHRlciB9IGZyb20gJy4uLy4uL2RhdGEtc2V0L3V0aWxzJztcbmltcG9ydCB7IEZpZWxkVHlwZSB9IGZyb20gJy4uLy4uL2RhdGEtc2V0L2VudW0nO1xuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiB1bmlxdWVFcnJvcihcbiAgdmFsdWU6IGFueSxcbiAgcHJvcHM6IFZhbGlkYXRvclByb3BzLFxuKTogUHJvbWlzZTxtZXRob2RSZXR1cm4+IHtcbiAgY29uc3QgeyBkYXRhU2V0LCByZWNvcmQsIHVuaXF1ZSwgbmFtZSwgbXVsdGlwbGUsIHJhbmdlLCBkZWZhdWx0VmFsaWRhdGlvbk1lc3NhZ2VzIH0gPSBwcm9wcztcbiAgaWYgKCFpc0VtcHR5KHZhbHVlKSAmJiBkYXRhU2V0ICYmIHJlY29yZCAmJiB1bmlxdWUgJiYgbmFtZSAmJiAhbXVsdGlwbGUgJiYgIXJhbmdlKSB7XG4gICAgY29uc3QgbXlGaWVsZCA9IHJlY29yZC5nZXRGaWVsZChuYW1lKTtcbiAgICBpZiAobXlGaWVsZCAmJiBteUZpZWxkLmdldCgndHlwZScpID09PSBGaWVsZFR5cGUub2JqZWN0KSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlW215RmllbGQuZ2V0KCd2YWx1ZUZpZWxkJyldO1xuICAgIH1cbiAgICBpZiAobXlGaWVsZCkge1xuICAgICAgbGV0IHsgZGlydHkgfSA9IG15RmllbGQ7XG4gICAgICBjb25zdCBmaWVsZHMgPSB7IFtuYW1lXTogdmFsdWUgfTtcbiAgICAgIGlmIChcbiAgICAgICAgaXNTdHJpbmcodW5pcXVlKSAmJlxuICAgICAgICBbLi4ucmVjb3JkLmZpZWxkcy5lbnRyaWVzKCldLnNvbWUoKFtmaWVsZE5hbWUsIGZpZWxkXSkgPT4ge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIGZpZWxkTmFtZSAhPT0gbmFtZSAmJlxuICAgICAgICAgICAgZmllbGQgJiZcbiAgICAgICAgICAgIGZpZWxkLmdldCgndW5pcXVlJykgPT09IHVuaXF1ZSAmJlxuICAgICAgICAgICAgIWZpZWxkLmdldCgnbXVsdGlwbGUnKSAmJlxuICAgICAgICAgICAgIWZpZWxkLmdldCgncmFuZ2UnKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgY29uc3Qgb3RoZXJWYWx1ZSA9IHJlY29yZC5nZXQoZmllbGROYW1lKTtcbiAgICAgICAgICAgIGlmIChpc0VtcHR5KG90aGVyVmFsdWUpKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFkaXJ0eSAmJiBmaWVsZC5kaXJ0eSkge1xuICAgICAgICAgICAgICBkaXJ0eSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaWVsZHNbZmllbGROYW1lXSA9IG90aGVyVmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSlcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICghZGlydHkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBsZXQgaW52YWxpZCA9IGRhdGFTZXQuZGF0YS5zb21lKFxuICAgICAgICBpdGVtID0+XG4gICAgICAgICAgaXRlbSAhPT0gcmVjb3JkICYmXG4gICAgICAgICAgT2JqZWN0LmtleXMoZmllbGRzKS5ldmVyeShmaWVsZCA9PiB7XG4gICAgICAgICAgICBjb25zdCBkYXRhU2V0RmllbGQgPSByZWNvcmQuZ2V0RmllbGQobmFtZSk7XG4gICAgICAgICAgICBpZiAoZGF0YVNldEZpZWxkICYmIGRhdGFTZXRGaWVsZC5nZXQoJ3R5cGUnKSA9PT0gRmllbGRUeXBlLm9iamVjdCkge1xuICAgICAgICAgICAgICBjb25zdCB2YWx1ZUZpZWxkID0gZGF0YVNldEZpZWxkLmdldCgndmFsdWVGaWVsZCcpO1xuICAgICAgICAgICAgICByZXR1cm4gZmllbGRzW2ZpZWxkXSA9PT0gaXRlbS5nZXQoZmllbGQpW3ZhbHVlRmllbGRdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZpZWxkc1tmaWVsZF0gPT09IGl0ZW0uZ2V0KGZpZWxkKTtcbiAgICAgICAgICB9KSxcbiAgICAgICk7XG4gICAgICBpZiAoIWludmFsaWQpIHtcbiAgICAgICAgY29uc3QgbmV3Q29uZmlnID0gYXhpb3NDb25maWdBZGFwdGVyKCd2YWxpZGF0ZScsIGRhdGFTZXQsIHsgdW5pcXVlOiBbZmllbGRzXSB9KTtcbiAgICAgICAgaWYgKG5ld0NvbmZpZy51cmwpIHtcbiAgICAgICAgICBjb25zdCByZXN1bHRzOiBhbnkgPSBhd2FpdCBkYXRhU2V0LmF4aW9zKG5ld0NvbmZpZyk7XG4gICAgICAgICAgaW52YWxpZCA9IFtdLmNvbmNhdChyZXN1bHRzKS5zb21lKHJlc3VsdCA9PiAhcmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGludmFsaWQpIHtcbiAgICAgICAgY29uc3QgcnVsZU5hbWUgPSAndW5pcXVlRXJyb3InO1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgW3J1bGVOYW1lXTogdmFsaWRhdGlvbk1lc3NhZ2UgPSAkbCgnVmFsaWRhdG9yJywgJ3VuaXF1ZScpLFxuICAgICAgICB9ID0gZGVmYXVsdFZhbGlkYXRpb25NZXNzYWdlcztcbiAgICAgICAgcmV0dXJuIG5ldyBWYWxpZGF0aW9uUmVzdWx0KHtcbiAgICAgICAgICB2YWxpZGF0aW9uTWVzc2FnZSxcbiAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICBydWxlTmFtZSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuIl0sInZlcnNpb24iOjN9