{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components/spin/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { cloneElement, Component, CSSProperties, isValidElement, ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport omit from 'lodash/omit';\nimport isCssAnimationSupported from '../_util/isCssAnimationSupported';\nimport Animate from '../animate';\nimport Progress from '../progress/progress';\nimport { Size } from '../_util/enum';\nimport { ProgressType } from '../progress/enum';\nimport { getPrefixCls } from '../configure';\n\nexport type SpinIndicator = ReactElement<any>;\n\nexport interface SpinProps {\n  prefixCls?: string;\n  className?: string;\n  spinning?: boolean;\n  style?: CSSProperties;\n  size?: Size;\n  tip?: string;\n  delay?: number;\n  wrapperClassName?: string;\n  indicator?: SpinIndicator;\n}\n\nexport interface SpinState {\n  spinning?: boolean;\n  notCssAnimationSupported?: boolean;\n}\n\nexport default class Spin extends Component<SpinProps, SpinState> {\n  static displayName = 'Spin';\n\n  static defaultProps = {\n    spinning: true,\n    size: Size.default,\n    wrapperClassName: '',\n  };\n\n  static propTypes = {\n    prefixCls: PropTypes.string,\n    className: PropTypes.string,\n    spinning: PropTypes.bool,\n    size: PropTypes.oneOf([Size.small, Size.default, Size.large]),\n    wrapperClassName: PropTypes.string,\n    indicator: PropTypes.node,\n  };\n\n  debounceTimeout: number;\n\n  delayTimeout: number;\n\n  constructor(props: SpinProps) {\n    super(props);\n    const spinning = props.spinning;\n    this.state = {\n      spinning,\n    };\n  }\n\n  componentDidMount() {\n    if (!isCssAnimationSupported()) {\n      // Show text in IE9\n      this.setState({\n        notCssAnimationSupported: true,\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.debounceTimeout) {\n      clearTimeout(this.debounceTimeout);\n    }\n    if (this.delayTimeout) {\n      clearTimeout(this.delayTimeout);\n    }\n  }\n\n  componentWillReceiveProps(nextProps: SpinProps) {\n    const { spinning: currentSpinning } = this.props;\n    const spinning = nextProps.spinning;\n    const { delay } = this.props;\n\n    if (this.debounceTimeout) {\n      clearTimeout(this.debounceTimeout);\n    }\n    if (currentSpinning && !spinning) {\n      this.debounceTimeout = window.setTimeout(() => this.setState({ spinning }), 200);\n      if (this.delayTimeout) {\n        clearTimeout(this.delayTimeout);\n      }\n    } else if (spinning && delay && !isNaN(Number(delay))) {\n      if (this.delayTimeout) {\n        clearTimeout(this.delayTimeout);\n      }\n      this.delayTimeout = window.setTimeout(() => this.setState({ spinning }), delay);\n    } else {\n      this.setState({ spinning });\n    }\n  }\n\n  getIndicatorWidth(size?: Size) {\n    switch (size) {\n      case Size.small:\n        return 20;\n      case Size.large:\n        return 50;\n      default:\n        return 30;\n    }\n  }\n\n  renderIndicator(prefixCls) {\n    const { indicator, size } = this.props;\n    const dotClassName = `${prefixCls}-dot`;\n    if (isValidElement(indicator)) {\n      return cloneElement(indicator as SpinIndicator, {\n        className: classNames((indicator as SpinIndicator).props.className, dotClassName),\n      });\n    }\n    return (\n      <Progress\n        width={this.getIndicatorWidth(size)}\n        className={dotClassName}\n        type={ProgressType.loading}\n      />\n    );\n  }\n\n  render() {\n    const {\n      className,\n      size,\n      prefixCls: customizePrefixCls,\n      tip,\n      wrapperClassName,\n      children,\n      style,\n      ...restProps\n    } = this.props;\n    const { spinning, notCssAnimationSupported } = this.state;\n    const prefixCls = getPrefixCls('spin', customizePrefixCls);\n\n    const spinClassName = classNames(\n      prefixCls,\n      {\n        [`${prefixCls}-sm`]: size === Size.small,\n        [`${prefixCls}-lg`]: size === Size.large,\n        [`${prefixCls}-spinning`]: spinning,\n        [`${prefixCls}-show-text`]: !!tip || notCssAnimationSupported,\n      },\n      className,\n    );\n\n    // fix https://fb.me/react-unknown-prop\n    const divProps = omit(restProps, ['spinning', 'delay', 'indicator']);\n\n    const spinElement = (\n      <div {...divProps} className={spinClassName} style={style} key=\"loading\">\n        {this.renderIndicator(prefixCls)}\n        {tip ? <div className={`${prefixCls}-text`}>{tip}</div> : null}\n      </div>\n    );\n    if (children) {\n      let animateClassName = `${prefixCls}-nested-loading`;\n      if (wrapperClassName) {\n        animateClassName += ` ${wrapperClassName}`;\n      }\n      const containerClassName = classNames({\n        [`${prefixCls}-container`]: true,\n        [`${prefixCls}-blur`]: spinning,\n      });\n      return (\n        <Animate {...divProps} component=\"div\" className={animateClassName} transitionName=\"fade\">\n          {spinning && spinElement}\n          <div className={containerClassName} key=\"container\">\n            {children}\n          </div>\n        </Animate>\n      );\n    }\n    return spinElement;\n  }\n}\n"]}