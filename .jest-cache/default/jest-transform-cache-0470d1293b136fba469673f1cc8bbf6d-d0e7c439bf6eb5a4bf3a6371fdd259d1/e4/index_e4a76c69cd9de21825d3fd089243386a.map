{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components/badge/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { CSSProperties } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport ScrollNumber from './ScrollNumber';\nimport Animate from '../animate';\nimport { getPrefixCls } from '../configure';\n\nexport { ScrollNumberProps } from './ScrollNumber';\n\nexport interface BadgeProps {\n  /** Number to show in badge */\n  count?: number | string;\n  showZero?: boolean;\n  /** Max count to show */\n  overflowCount?: number;\n  /** whether to show red dot without number */\n  dot?: boolean;\n  style?: CSSProperties;\n  prefixCls?: string;\n  scrollNumberPrefixCls?: string;\n  className?: string;\n  status?: 'success' | 'processing' | 'default' | 'error' | 'warning';\n  text?: string;\n  offset?: [number | string, number | string];\n}\n\nexport default function Badge(props: BadgeProps & { children }) {\n  const {\n    count,\n    showZero,\n    prefixCls: customizePrefixCls,\n    scrollNumberPrefixCls,\n    overflowCount,\n    className,\n    style,\n    children,\n    dot,\n    status,\n    text,\n    offset,\n    ...restProps\n  } = props;\n  const prefixCls = getPrefixCls('badge', customizePrefixCls);\n  let displayCount = (count as number) > (overflowCount as number) ? `${overflowCount}+` : count;\n  const isZero = displayCount === '0' || displayCount === 0;\n  const isDot = (dot && !isZero) || status;\n  // dot mode don't need count\n  if (isDot) {\n    displayCount = '';\n  }\n  const isEmpty = displayCount === null || displayCount === undefined || displayCount === '';\n  const hidden = (isEmpty || (isZero && !showZero)) && !isDot;\n  const statusCls = classNames({\n    [`${prefixCls}-status-dot`]: !!status,\n    [`${prefixCls}-status-${status}`]: !!status,\n  });\n  const scrollNumberCls = classNames({\n    [`${prefixCls}-dot`]: isDot,\n    [`${prefixCls}-count`]: !isDot,\n    [`${prefixCls}-multiple-words`]:\n      !isDot && count && count.toString && count.toString().length > 1,\n    [`${prefixCls}-status-${status}`]: !!status,\n  });\n  const badgeCls = classNames(className, prefixCls, {\n    [`${prefixCls}-status`]: !!status,\n    [`${prefixCls}-not-a-wrapper`]: !children,\n  });\n  const styleWithOffset = offset\n    ? {\n        marginTop: offset[0],\n        marginLeft: offset[1],\n        ...style,\n      }\n    : style;\n  // <Badge status=\"success\" />\n  if (!children && status) {\n    return (\n      <span className={badgeCls} style={styleWithOffset}>\n        <span className={statusCls} />\n        <span className={`${prefixCls}-status-text`}>{text}</span>\n      </span>\n    );\n  }\n\n  const scrollNumber = hidden ? null : (\n    <ScrollNumber\n      prefixCls={getPrefixCls('scroll-number', scrollNumberPrefixCls)}\n      hidden={hidden}\n      className={scrollNumberCls}\n      count={displayCount}\n      title={count}\n      style={styleWithOffset}\n    />\n  );\n\n  const statusText =\n    hidden || !text ? null : <span className={`${prefixCls}-status-text`}>{text}</span>;\n\n  return (\n    <span {...restProps} className={badgeCls}>\n      {children}\n      <Animate\n        component=\"\"\n        hiddenProp=\"hidden\"\n        transitionName={children ? `${prefixCls}-zoom` : ''}\n        transitionAppear\n      >\n        {scrollNumber}\n      </Animate>\n      {statusText}\n    </span>\n  );\n}\n\nBadge.displayName = 'Badge';\n\nBadge.defaultProps = {\n  count: null,\n  showZero: false,\n  dot: false,\n  overflowCount: 99,\n};\n\nBadge.propTypes = {\n  count: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  showZero: PropTypes.bool,\n  dot: PropTypes.bool,\n  overflowCount: PropTypes.number,\n};\n"]}