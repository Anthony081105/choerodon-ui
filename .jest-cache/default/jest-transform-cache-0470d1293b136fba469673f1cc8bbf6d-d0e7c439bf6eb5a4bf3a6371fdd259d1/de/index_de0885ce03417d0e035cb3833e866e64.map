{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/tree/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import Set from 'core-js/library/fn/set';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { observer } from 'mobx-react';\nimport { computed, observable, runInAction } from 'mobx';\nimport noop from 'lodash/noop';\nimport C7NTree, {\n  TreeNode,\n  TreeNodeEvent,\n  TreeNodeExpandEvent,\n  TreeProps as C7NTreeProps,\n} from 'choerodon-ui/lib/tree';\nimport DataSet from '../data-set/DataSet';\nimport { getKey, getTreeNodes, NodeRenderer } from './util';\nimport { BooleanValue, DataSetSelection } from '../data-set/enum';\nimport Spin from '../spin';\n\nexport interface TreeProps extends C7NTreeProps {\n  dataSet?: DataSet;\n  renderer?: NodeRenderer;\n  titleField?: string;\n}\n\nfunction defaultRenderer({ text }) {\n  return text;\n}\n\n@observer\nexport default class Tree extends Component<TreeProps> {\n  static displayName = 'Tree<PRO>';\n\n  static propTypes = {\n    prefixCls: PropTypes.string,\n    className: PropTypes.string,\n    tabIndex: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    children: PropTypes.any,\n    treeData: PropTypes.array, // Generate treeNode by children\n    showLine: PropTypes.bool,\n    showIcon: PropTypes.bool,\n    icon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n    focusable: PropTypes.bool,\n    selectable: PropTypes.bool,\n    disabled: PropTypes.bool,\n    multiple: PropTypes.bool,\n    checkable: PropTypes.oneOfType([PropTypes.bool, PropTypes.node]),\n    checkStrictly: PropTypes.bool,\n    draggable: PropTypes.bool,\n    defaultExpandParent: PropTypes.bool,\n    autoExpandParent: PropTypes.bool,\n    defaultExpandAll: PropTypes.bool,\n    defaultExpandedKeys: PropTypes.arrayOf(PropTypes.string),\n    expandedKeys: PropTypes.arrayOf(PropTypes.string),\n    defaultCheckedKeys: PropTypes.arrayOf(PropTypes.string),\n    checkedKeys: PropTypes.oneOfType([\n      PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),\n      PropTypes.object,\n    ]),\n    defaultSelectedKeys: PropTypes.arrayOf(PropTypes.string),\n    selectedKeys: PropTypes.arrayOf(PropTypes.string),\n    onClick: PropTypes.func,\n    onDoubleClick: PropTypes.func,\n    onExpand: PropTypes.func,\n    onCheck: PropTypes.func,\n    onSelect: PropTypes.func,\n    onLoad: PropTypes.func,\n    loadData: PropTypes.func,\n    loadedKeys: PropTypes.arrayOf(PropTypes.string),\n    onMouseEnter: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onRightClick: PropTypes.func,\n    onDragStart: PropTypes.func,\n    onDragEnter: PropTypes.func,\n    onDragOver: PropTypes.func,\n    onDragLeave: PropTypes.func,\n    onDragEnd: PropTypes.func,\n    onDrop: PropTypes.func,\n    filterTreeNode: PropTypes.func,\n    openTransitionName: PropTypes.string,\n    openAnimation: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    switcherIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  };\n\n  static TreeNode = TreeNode;\n\n  @observable stateCheckedKeys: string[];\n\n  @observable stateExpandedKeys: string[];\n\n  stateForceRenderKeys: string[] = [];\n\n  @computed\n  get forceRenderKeys() {\n    return (this.stateForceRenderKeys = [\n      ...new Set<string>([...this.stateForceRenderKeys, ...this.expandedKeys]),\n    ]);\n  }\n\n  @computed\n  get expandedKeys(): string[] {\n    const { dataSet } = this.props;\n    if (dataSet) {\n      const { expandField, idField } = dataSet.props;\n      if (expandField) {\n        const keys: string[] = [];\n        dataSet.forEach(record => {\n          if (record.isExpanded) {\n            keys.push(getKey(record, idField));\n          }\n        });\n        return keys;\n      }\n    }\n    return this.stateExpandedKeys;\n  }\n\n  @computed\n  get checkedKeys(): string[] {\n    const { dataSet } = this.props;\n    if (dataSet) {\n      const { checkField, idField } = dataSet.props;\n      if (checkField) {\n        const keys: string[] = [];\n        dataSet.forEach(record => {\n          const field = record.getField(checkField);\n          if (record.get(checkField) === (field ? field.get(BooleanValue.trueValue) : true)) {\n            keys.push(getKey(record, idField));\n          }\n        });\n        return keys;\n      }\n    }\n    return this.stateCheckedKeys;\n  }\n\n  @computed\n  get selectedKeys(): string[] {\n    const { dataSet } = this.props;\n    if (dataSet) {\n      const { idField } = dataSet.props;\n      return dataSet.selected.map(record => getKey(record, idField));\n    }\n    return [];\n  }\n\n  constructor(props, context) {\n    super(props, context);\n    runInAction(() => {\n      this.stateCheckedKeys = [];\n      this.stateExpandedKeys = [];\n    });\n  }\n\n  setExpand(eventObj: TreeNodeExpandEvent) {\n    const { dataSet } = this.props;\n    if (dataSet) {\n      const { expandField, idField } = dataSet.props;\n      if (expandField) {\n        const { node, expanded } = eventObj;\n        const { eventKey } = node.props;\n        const found = dataSet.find(record => eventKey === getKey(record, idField));\n        if (found) {\n          found.isExpanded = expanded;\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  setCheck(eventObj: TreeNodeEvent) {\n    const { dataSet } = this.props;\n    if (dataSet) {\n      const { checkField, idField } = dataSet.props;\n      if (checkField) {\n        const { node, checked } = eventObj;\n        const { eventKey } = node.props;\n        const found = dataSet.find(\n          record => eventKey === String(idField ? record.get(idField) : record.id),\n        );\n        if (found) {\n          const field = found.getField(checkField);\n          found.set(\n            checkField,\n            field\n              ? checked\n                ? field.get(BooleanValue.trueValue)\n                : field.get(BooleanValue.falseValue)\n              : checked,\n          );\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  handleExpand = (expandedKeys: string[], eventObj: TreeNodeExpandEvent) => {\n    if (this.setExpand(eventObj)) {\n      runInAction(() => {\n        this.stateExpandedKeys = expandedKeys;\n      });\n    }\n    const { onExpand = noop } = this.props;\n    onExpand(expandedKeys, eventObj);\n  };\n\n  handleCheck = (checkedKeys: string[], eventObj: TreeNodeEvent) => {\n    if (this.setCheck(eventObj)) {\n      runInAction(() => {\n        this.stateCheckedKeys = checkedKeys;\n      });\n    }\n    const { onCheck = noop } = this.props;\n    onCheck(checkedKeys, eventObj);\n  };\n\n  handleSelect = (_selectedKeys: string[], eventObj: TreeNodeEvent) => {\n    const { dataSet } = this.props;\n    if (dataSet) {\n      const { idField } = dataSet.props;\n      const { node, selected } = eventObj;\n      const { eventKey } = node.props;\n      const found = dataSet.find(\n        record => eventKey === String(idField ? record.get(idField) : record.id),\n      );\n      if (found) {\n        if (selected) {\n          dataSet.select(found);\n        } else {\n          dataSet.unSelect(found);\n        }\n      }\n    }\n  };\n\n  render() {\n    const { dataSet, renderer = defaultRenderer, titleField, ...otherProps } = this.props;\n    if (dataSet) {\n      const props: TreeProps = {};\n      props.children = getTreeNodes(\n        dataSet,\n        dataSet.treeData,\n        this.forceRenderKeys,\n        renderer,\n        titleField,\n      );\n      props.onExpand = this.handleExpand;\n      props.onCheck = this.handleCheck;\n      props.onSelect = this.handleSelect;\n      props.expandedKeys = this.expandedKeys.slice();\n      props.checkedKeys = this.checkedKeys.slice();\n      props.multiple = dataSet.props.selection === DataSetSelection.multiple;\n      props.selectedKeys = this.selectedKeys.slice();\n      return (\n        <Spin dataSet={dataSet}>\n          <C7NTree {...otherProps} {...props} />\n        </Spin>\n      );\n    }\n    return <C7NTree {...otherProps} />;\n  }\n}\n"]}