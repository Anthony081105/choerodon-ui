f981d7e9898cd45cdf18fba067955d1a
"use strict";

/* istanbul ignore next */
var cov_1jteonn4pc = function () {
  var path = "/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/tree/util.tsx";
  var hash = "a78bc906b2ae7f6ab747ad3b4a856e5c9eec3f53";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/tree/util.tsx",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 29
        },
        end: {
          line: 3,
          column: 84
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 7,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 24
        }
      },
      "3": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 36
        }
      },
      "4": {
        start: {
          line: 11,
          column: 13
        },
        end: {
          line: 11,
          column: 53
        }
      },
      "5": {
        start: {
          line: 13,
          column: 12
        },
        end: {
          line: 13,
          column: 44
        }
      },
      "6": {
        start: {
          line: 16,
          column: 2
        },
        end: {
          line: 16,
          column: 59
        }
      },
      "7": {
        start: {
          line: 20,
          column: 12
        },
        end: {
          line: 20,
          column: 35
        }
      },
      "8": {
        start: {
          line: 21,
          column: 2
        },
        end: {
          line: 27,
          column: 15
        }
      },
      "9": {
        start: {
          line: 31,
          column: 16
        },
        end: {
          line: 31,
          column: 86
        }
      },
      "10": {
        start: {
          line: 32,
          column: 24
        },
        end: {
          line: 32,
          column: 71
        }
      },
      "11": {
        start: {
          line: 33,
          column: 17
        },
        end: {
          line: 33,
          column: 64
        }
      },
      "12": {
        start: {
          line: 34,
          column: 19
        },
        end: {
          line: 34,
          column: 66
        }
      },
      "13": {
        start: {
          line: 35,
          column: 16
        },
        end: {
          line: 35,
          column: 37
        }
      },
      "14": {
        start: {
          line: 36,
          column: 2
        },
        end: {
          line: 43,
          column: 5
        }
      },
      "15": {
        start: {
          line: 37,
          column: 19
        },
        end: {
          line: 37,
          column: 149
        }
      },
      "16": {
        start: {
          line: 38,
          column: 4
        },
        end: {
          line: 42,
          column: 8
        }
      }
    },
    fnMap: {
      "0": {
        name: "getKey",
        decl: {
          start: {
            line: 15,
            column: 9
          },
          end: {
            line: 15,
            column: 15
          }
        },
        loc: {
          start: {
            line: 15,
            column: 33
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 15
      },
      "1": {
        name: "getTreeNode",
        decl: {
          start: {
            line: 19,
            column: 9
          },
          end: {
            line: 19,
            column: 20
          }
        },
        loc: {
          start: {
            line: 19,
            column: 54
          },
          end: {
            line: 28,
            column: 1
          }
        },
        line: 19
      },
      "2": {
        name: "getTreeNodes",
        decl: {
          start: {
            line: 30,
            column: 9
          },
          end: {
            line: 30,
            column: 21
          }
        },
        loc: {
          start: {
            line: 30,
            column: 31
          },
          end: {
            line: 44,
            column: 1
          }
        },
        line: 30
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 36,
            column: 21
          },
          end: {
            line: 36,
            column: 22
          }
        },
        loc: {
          start: {
            line: 36,
            column: 39
          },
          end: {
            line: 43,
            column: 3
          }
        },
        line: 36
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 16
          },
          end: {
            line: 16,
            column: 57
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 16,
            column: 26
          },
          end: {
            line: 16,
            column: 45
          }
        }, {
          start: {
            line: 16,
            column: 48
          },
          end: {
            line: 16,
            column: 57
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 31,
            column: 16
          },
          end: {
            line: 31,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 31,
            column: 69
          },
          end: {
            line: 31,
            column: 81
          }
        }, {
          start: {
            line: 31,
            column: 84
          },
          end: {
            line: 31,
            column: 86
          }
        }],
        line: 31
      },
      "2": {
        loc: {
          start: {
            line: 31,
            column: 16
          },
          end: {
            line: 31,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 31,
            column: 16
          },
          end: {
            line: 31,
            column: 36
          }
        }, {
          start: {
            line: 31,
            column: 40
          },
          end: {
            line: 31,
            column: 66
          }
        }],
        line: 31
      },
      "3": {
        loc: {
          start: {
            line: 32,
            column: 24
          },
          end: {
            line: 32,
            column: 71
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 32,
            column: 47
          },
          end: {
            line: 32,
            column: 59
          }
        }, {
          start: {
            line: 32,
            column: 62
          },
          end: {
            line: 32,
            column: 71
          }
        }],
        line: 32
      },
      "4": {
        loc: {
          start: {
            line: 33,
            column: 17
          },
          end: {
            line: 33,
            column: 64
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 33,
            column: 40
          },
          end: {
            line: 33,
            column: 52
          }
        }, {
          start: {
            line: 33,
            column: 55
          },
          end: {
            line: 33,
            column: 64
          }
        }],
        line: 33
      },
      "5": {
        loc: {
          start: {
            line: 34,
            column: 19
          },
          end: {
            line: 34,
            column: 66
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 34,
            column: 42
          },
          end: {
            line: 34,
            column: 54
          }
        }, {
          start: {
            line: 34,
            column: 57
          },
          end: {
            line: 34,
            column: 66
          }
        }],
        line: 34
      },
      "6": {
        loc: {
          start: {
            line: 37,
            column: 19
          },
          end: {
            line: 37,
            column: 149
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 37,
            column: 77
          },
          end: {
            line: 37,
            column: 142
          }
        }, {
          start: {
            line: 37,
            column: 145
          },
          end: {
            line: 37,
            column: 149
          }
        }],
        line: 37
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0]
    },
    _coverageSchema: "43e27e138ebf9cfc5966b082cf9a028302ed4184",
    hash: "a78bc906b2ae7f6ab747ad3b4a856e5c9eec3f53"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  return coverage[path] = coverageData;
}();

var _interopRequireDefault =
/* istanbul ignore next */
(cov_1jteonn4pc.s[0]++, require("@babel/runtime/helpers/interopRequireDefault"));

/* istanbul ignore next */
cov_1jteonn4pc.s[1]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});

/* istanbul ignore next */
cov_1jteonn4pc.s[2]++;
exports.getKey = getKey;

/* istanbul ignore next */
cov_1jteonn4pc.s[3]++;
exports.getTreeNodes = getTreeNodes;

var _react =
/* istanbul ignore next */
(cov_1jteonn4pc.s[4]++, _interopRequireDefault(require("react")));

var _tree =
/* istanbul ignore next */
(cov_1jteonn4pc.s[5]++, require("choerodon-ui/lib/tree"));

function getKey(record, idField) {
  /* istanbul ignore next */
  cov_1jteonn4pc.f[0]++;
  cov_1jteonn4pc.s[6]++;
  return String(idField ?
  /* istanbul ignore next */
  (cov_1jteonn4pc.b[0][0]++, record.get(idField)) :
  /* istanbul ignore next */
  (cov_1jteonn4pc.b[0][1]++, record.id));
}

function getTreeNode(record, children, idField, text) {
  /* istanbul ignore next */
  cov_1jteonn4pc.f[1]++;
  var key =
  /* istanbul ignore next */
  (cov_1jteonn4pc.s[7]++, getKey(record, idField));

  /* istanbul ignore next */
  cov_1jteonn4pc.s[8]++;
  return _react["default"].createElement(_tree.TreeNode, {
    title: text,
    key: key,
    eventKey: key,
    hasChildren: !!record.children,
    selectable: record.selectable
  }, children);
}

function getTreeNodes(dataSet) {
  /* istanbul ignore next */
  cov_1jteonn4pc.f[2]++;
  var records =
  /* istanbul ignore next */
  (cov_1jteonn4pc.s[9]++,
  /* istanbul ignore next */
  (cov_1jteonn4pc.b[2][0]++, arguments.length > 1) &&
  /* istanbul ignore next */
  (cov_1jteonn4pc.b[2][1]++, arguments[1] !== undefined) ?
  /* istanbul ignore next */
  (cov_1jteonn4pc.b[1][0]++, arguments[1]) :
  /* istanbul ignore next */
  (cov_1jteonn4pc.b[1][1]++, []));
  var forceRenderKeys =
  /* istanbul ignore next */
  (cov_1jteonn4pc.s[10]++, arguments.length > 2 ?
  /* istanbul ignore next */
  (cov_1jteonn4pc.b[3][0]++, arguments[2]) :
  /* istanbul ignore next */
  (cov_1jteonn4pc.b[3][1]++, undefined));
  var renderer =
  /* istanbul ignore next */
  (cov_1jteonn4pc.s[11]++, arguments.length > 3 ?
  /* istanbul ignore next */
  (cov_1jteonn4pc.b[4][0]++, arguments[3]) :
  /* istanbul ignore next */
  (cov_1jteonn4pc.b[4][1]++, undefined));
  var titleField =
  /* istanbul ignore next */
  (cov_1jteonn4pc.s[12]++, arguments.length > 4 ?
  /* istanbul ignore next */
  (cov_1jteonn4pc.b[5][0]++, arguments[4]) :
  /* istanbul ignore next */
  (cov_1jteonn4pc.b[5][1]++, undefined));
  var idField =
  /* istanbul ignore next */
  (cov_1jteonn4pc.s[13]++, dataSet.props.idField);

  /* istanbul ignore next */
  cov_1jteonn4pc.s[14]++;
  return records.map(function (record) {
    /* istanbul ignore next */
    cov_1jteonn4pc.f[3]++;
    var children =
    /* istanbul ignore next */
    (cov_1jteonn4pc.s[15]++, forceRenderKeys.indexOf(getKey(record, idField)) !== -1 ?
    /* istanbul ignore next */
    (cov_1jteonn4pc.b[6][0]++, getTreeNodes(dataSet, record.children, forceRenderKeys, renderer)) :
    /* istanbul ignore next */
    (cov_1jteonn4pc.b[6][1]++, null));

    /* istanbul ignore next */
    cov_1jteonn4pc.s[16]++;
    return getTreeNode(record, children, idField, renderer({
      dataSet: dataSet,
      record: record,
      text: record.get(titleField)
    }));
  });
}