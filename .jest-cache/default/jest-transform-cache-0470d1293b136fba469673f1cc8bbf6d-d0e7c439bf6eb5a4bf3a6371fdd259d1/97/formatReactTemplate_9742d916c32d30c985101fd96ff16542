2ce761662e8dc7321c718604014d734a
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = formatReactTemplate;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _react = require("react");

var _stringTemplate = _interopRequireDefault(require("string-template"));

var _isString = _interopRequireDefault(require("lodash/isString"));

var _isNil = _interopRequireDefault(require("lodash/isNil"));

var _flatMap = _interopRequireDefault(require("lodash/flatMap"));

function formatReactTemplate(template, map) {
  var result = [template];
  Object.keys(map).forEach(function (key) {
    var node = map[key];

    if (!(0, _isNil["default"])(node)) {
      result = (0, _flatMap["default"])(result, function (text) {
        if ((0, _isString["default"])(text)) {
          var stringText = text;

          if ((0, _react.isValidElement)(node)) {
            var placeholder = "{".concat(key, "}");
            var length = placeholder.length;
            var textArr = [];
            var index = stringText.indexOf(placeholder);

            while (index > -1) {
              if (index > 0) {
                textArr.push(stringText.slice(0, index));
              }

              textArr.push(node);
              stringText = stringText.slice(index + length);
              index = stringText.indexOf(placeholder);
            }

            if (stringText) {
              textArr.push(stringText);
            }

            return textArr;
          }

          return (0, _stringTemplate["default"])(text, map);
        }

        return text;
      });
    }
  });

  if (result.every(_isString["default"])) {
    return result.join('');
  }

  return _react.createElement.apply(void 0, [_react.Fragment, {}].concat((0, _toConsumableArray2["default"])(result)));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZvcm1hdHRlci9mb3JtYXRSZWFjdFRlbXBsYXRlLmpzeCJdLCJuYW1lcyI6WyJyZXN1bHQiLCJPYmplY3QiLCJub2RlIiwibWFwIiwic3RyaW5nVGV4dCIsInBsYWNlaG9sZGVyIiwibGVuZ3RoIiwidGV4dEFyciIsImluZGV4IiwiaXNTdHJpbmciLCJjcmVhdGVFbGVtZW50IiwiRnJhZ21lbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEsSUFBQSxNQUFBLEdBQUEsT0FBQSxDQUFBLE9BQUEsQ0FBQTs7QUFDQSxJQUFBLGVBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUEsQ0FBQSxpQkFBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxTQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLENBQUEsaUJBQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsTUFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLGNBQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsUUFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLGdCQUFBLENBQUEsQ0FBQTs7QUFDZSxTQUFBLG1CQUFBLENBQUEsUUFBQSxFQUFBLEdBQUEsRUFBNEM7QUFDdkQsTUFBSUEsTUFBTSxHQUFHLENBQWIsUUFBYSxDQUFiO0FBQ0FDLEVBQUFBLE1BQU0sQ0FBTkEsSUFBQUEsQ0FBQUEsR0FBQUEsRUFBQUEsT0FBQUEsQ0FBeUIsVUFBQSxHQUFBLEVBQU87QUFDNUIsUUFBTUMsSUFBSSxHQUFHQyxHQUFHLENBQWhCLEdBQWdCLENBQWhCOztBQUNBLFFBQUksQ0FBQyxDQUFBLEdBQUEsTUFBQSxDQUFBLFNBQUEsQ0FBQSxFQUFMLElBQUssQ0FBTCxFQUFrQjtBQUNkSCxNQUFBQSxNQUFNLEdBQUcsQ0FBQSxHQUFBLFFBQUEsQ0FBQSxTQUFBLENBQUEsRUFBQSxNQUFBLEVBQWdCLFVBQUEsSUFBQSxFQUFRO0FBQzdCLFlBQUksQ0FBQSxHQUFBLFNBQUEsQ0FBQSxTQUFBLENBQUEsRUFBSixJQUFJLENBQUosRUFBb0I7QUFDaEIsY0FBSUksVUFBVSxHQUFkLElBQUE7O0FBQ0EsY0FBSSxDQUFBLEdBQUEsTUFBQSxDQUFBLGNBQUEsRUFBSixJQUFJLENBQUosRUFBMEI7QUFDdEIsZ0JBQU1DLFdBQVcsR0FBQSxJQUFBLE1BQUEsQ0FBQSxHQUFBLEVBQWpCLEdBQWlCLENBQWpCO0FBRHNCLGdCQUVkQyxNQUZjLEdBRUhELFdBRkcsQ0FBQSxNQUFBO0FBR3RCLGdCQUFNRSxPQUFPLEdBQWIsRUFBQTtBQUNBLGdCQUFJQyxLQUFLLEdBQUdKLFVBQVUsQ0FBVkEsT0FBQUEsQ0FBWixXQUFZQSxDQUFaOztBQUNBLG1CQUFPSSxLQUFLLEdBQUcsQ0FBZixDQUFBLEVBQW1CO0FBQ2Ysa0JBQUlBLEtBQUssR0FBVCxDQUFBLEVBQWU7QUFDWEQsZ0JBQUFBLE9BQU8sQ0FBUEEsSUFBQUEsQ0FBYUgsVUFBVSxDQUFWQSxLQUFBQSxDQUFBQSxDQUFBQSxFQUFiRyxLQUFhSCxDQUFiRztBQUNIOztBQUNEQSxjQUFBQSxPQUFPLENBQVBBLElBQUFBLENBQUFBLElBQUFBO0FBQ0FILGNBQUFBLFVBQVUsR0FBR0EsVUFBVSxDQUFWQSxLQUFBQSxDQUFpQkksS0FBSyxHQUFuQ0osTUFBYUEsQ0FBYkE7QUFDQUksY0FBQUEsS0FBSyxHQUFHSixVQUFVLENBQVZBLE9BQUFBLENBQVJJLFdBQVFKLENBQVJJO0FBQ0g7O0FBQ0QsZ0JBQUEsVUFBQSxFQUFnQjtBQUNaRCxjQUFBQSxPQUFPLENBQVBBLElBQUFBLENBQUFBLFVBQUFBO0FBQ0g7O0FBQ0QsbUJBQUEsT0FBQTtBQUNIOztBQUNELGlCQUFPLENBQUEsR0FBQSxlQUFBLENBQUEsU0FBQSxDQUFBLEVBQUEsSUFBQSxFQUFQLEdBQU8sQ0FBUDtBQUNIOztBQUNELGVBQUEsSUFBQTtBQXZCSlAsT0FBUyxDQUFUQTtBQXlCSDtBQTVCTEMsR0FBQUE7O0FBOEJBLE1BQUlELE1BQU0sQ0FBTkEsS0FBQUEsQ0FBYVMsU0FBQUEsQ0FBakIsU0FBaUJBLENBQWJULENBQUosRUFBNEI7QUFDeEIsV0FBT0EsTUFBTSxDQUFOQSxJQUFBQSxDQUFQLEVBQU9BLENBQVA7QUFDSDs7QUFDRCxTQUFPVSxNQUFBQSxDQUFBQSxhQUFBQSxDQUFBQSxLQUFBQSxDQUFBQSxLQUFBQSxDQUFBQSxFQUFBQSxDQUFjQyxNQUFBQSxDQUFkRCxRQUFBQSxFQUFBQSxFQUFBQSxFQUFBQSxNQUFBQSxDQUFBQSxDQUFBQSxHQUFBQSxtQkFBQUEsQ0FBQUEsU0FBQUEsQ0FBQUEsRUFBUCxNQUFPQSxDQUFBQSxDQUFBQSxDQUFQO0FBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVFbGVtZW50LCBGcmFnbWVudCwgaXNWYWxpZEVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgZm9ybWF0IGZyb20gJ3N0cmluZy10ZW1wbGF0ZSc7XG5pbXBvcnQgaXNTdHJpbmcgZnJvbSAnbG9kYXNoL2lzU3RyaW5nJztcbmltcG9ydCBpc05pbCBmcm9tICdsb2Rhc2gvaXNOaWwnO1xuaW1wb3J0IGZsYXRNYXAgZnJvbSAnbG9kYXNoL2ZsYXRNYXAnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0UmVhY3RUZW1wbGF0ZSh0ZW1wbGF0ZSwgbWFwKSB7XG4gICAgbGV0IHJlc3VsdCA9IFt0ZW1wbGF0ZV07XG4gICAgT2JqZWN0LmtleXMobWFwKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSBtYXBba2V5XTtcbiAgICAgICAgaWYgKCFpc05pbChub2RlKSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gZmxhdE1hcChyZXN1bHQsIHRleHQgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChpc1N0cmluZyh0ZXh0KSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgc3RyaW5nVGV4dCA9IHRleHQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1ZhbGlkRWxlbWVudChub2RlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGxhY2Vob2xkZXIgPSBgeyR7a2V5fX1gO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBsZW5ndGggfSA9IHBsYWNlaG9sZGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dEFyciA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gc3RyaW5nVGV4dC5pbmRleE9mKHBsYWNlaG9sZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChpbmRleCA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0QXJyLnB1c2goc3RyaW5nVGV4dC5zbGljZSgwLCBpbmRleCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0QXJyLnB1c2gobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nVGV4dCA9IHN0cmluZ1RleHQuc2xpY2UoaW5kZXggKyBsZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID0gc3RyaW5nVGV4dC5pbmRleE9mKHBsYWNlaG9sZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdHJpbmdUZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dEFyci5wdXNoKHN0cmluZ1RleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRleHRBcnI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdCh0ZXh0LCBtYXApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGV4dDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5ldmVyeShpc1N0cmluZykpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5qb2luKCcnKTtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoRnJhZ21lbnQsIHt9LCAuLi5yZXN1bHQpO1xufVxuIl19