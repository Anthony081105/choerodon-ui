b140439def1d42aa59b6f6f889b5a227
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _table = _interopRequireDefault(require("../../../components/table"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _reactDnd = require("react-dnd");

var _reactDndHtml5Backend = _interopRequireDefault(require("react-dnd-html5-backend"));

var _immutabilityHelper = _interopRequireDefault(require("immutability-helper"));

function dragDirection(dragIndex, hoverIndex, initialClientOffset, clientOffset, sourceClientOffset) {
  var hoverMiddleY = (initialClientOffset.y - sourceClientOffset.y) / 2;
  var hoverClientY = clientOffset.y - sourceClientOffset.y;

  if (dragIndex < hoverIndex && hoverClientY > hoverMiddleY) {
    return 'downward';
  }

  if (dragIndex > hoverIndex && hoverClientY < hoverMiddleY) {
    return 'upward';
  }
}

var BodyRow = function BodyRow(props) {
  var isOver = props.isOver,
      connectDragSource = props.connectDragSource,
      connectDropTarget = props.connectDropTarget,
      moveRow = props.moveRow,
      dragRow = props.dragRow,
      clientOffset = props.clientOffset,
      sourceClientOffset = props.sourceClientOffset,
      initialClientOffset = props.initialClientOffset,
      restProps = (0, _objectWithoutProperties2["default"])(props, ["isOver", "connectDragSource", "connectDropTarget", "moveRow", "dragRow", "clientOffset", "sourceClientOffset", "initialClientOffset"]);
  var style = (0, _objectSpread2["default"])({}, restProps.style, {
    cursor: 'move'
  });
  var className = restProps.className;

  if (isOver && initialClientOffset) {
    var direction = dragDirection(dragRow.index, restProps.index, initialClientOffset, clientOffset, sourceClientOffset);

    if (direction === 'downward') {
      className += ' drop-over-downward';
    }

    if (direction === 'upward') {
      className += ' drop-over-upward';
    }
  }

  return connectDragSource(connectDropTarget(_react["default"].createElement("tr", (0, _extends2["default"])({}, restProps, {
    className: className,
    style: style
  }))));
};

var rowSource = {
  beginDrag: function beginDrag(props) {
    return {
      index: props.index
    };
  }
};
var rowTarget = {
  drop: function drop(props, monitor) {
    var dragIndex = monitor.getItem().index;
    var hoverIndex = props.index; // Don't replace items with themselves

    if (dragIndex === hoverIndex) {
      return;
    } // Time to actually perform the action


    props.moveRow(dragIndex, hoverIndex); // Note: we're mutating the monitor item here!
    // Generally it's better to avoid mutations,
    // but it's good here for the sake of performance
    // to avoid expensive index searches.

    monitor.getItem().index = hoverIndex;
  }
};
BodyRow = (0, _reactDnd.DropTarget)('row', rowTarget, function (connect, monitor) {
  return {
    connectDropTarget: connect.dropTarget(),
    isOver: monitor.isOver(),
    sourceClientOffset: monitor.getSourceClientOffset()
  };
})((0, _reactDnd.DragSource)('row', rowSource, function (connect, monitor) {
  return {
    connectDragSource: connect.dragSource(),
    dragRow: monitor.getItem(),
    clientOffset: monitor.getClientOffset(),
    initialClientOffset: monitor.getInitialClientOffset()
  };
})(BodyRow));
var columns = [{
  title: 'Name',
  dataIndex: 'name',
  key: 'name'
}, {
  title: 'Age',
  dataIndex: 'age',
  key: 'age'
}, {
  title: 'Address',
  dataIndex: 'address',
  key: 'address'
}];

var DragSortingTable =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2["default"])(DragSortingTable, _React$Component);

  function DragSortingTable() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2["default"])(this, DragSortingTable);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2["default"])(this, (_getPrototypeOf2 = (0, _getPrototypeOf3["default"])(DragSortingTable)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "state", {
      data: [{
        key: '1',
        name: 'John Brown',
        age: 32,
        address: 'New York No. 1 Lake Park'
      }, {
        key: '2',
        name: 'Jim Green',
        age: 42,
        address: 'London No. 1 Lake Park'
      }, {
        key: '3',
        name: 'Joe Black',
        age: 32,
        address: 'Sidney No. 1 Lake Park'
      }]
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "components", {
      body: {
        row: BodyRow
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "moveRow", function (dragIndex, hoverIndex) {
      var data = _this.state.data;
      var dragRow = data[dragIndex];

      _this.setState((0, _immutabilityHelper["default"])(_this.state, {
        data: {
          $splice: [[dragIndex, 1], [hoverIndex, 0, dragRow]]
        }
      }));
    });
    return _this;
  }

  (0, _createClass2["default"])(DragSortingTable, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      return _react["default"].createElement(_table["default"], {
        columns: columns,
        dataSource: this.state.data,
        components: this.components,
        onRow: function onRow(record, index) {
          return {
            index: index,
            moveRow: _this2.moveRow
          };
        }
      });
    }
  }]);
  return DragSortingTable;
}(_react["default"].Component);

var Demo = (0, _reactDnd.DragDropContext)(_reactDndHtml5Backend["default"])(DragSortingTable);

var __Demo = _react["default"].createElement(Demo, null);

var _default = __Demo;
exports["default"] = _default;