{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components/form/Form.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AASA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;IAqHqB,I;;;;;AAsCnB,gBAAY,KAAZ,EAA4B;AAAA;;AAAA;AAC1B,gHAAM,KAAN;AAEA,6BAAQ,CAAC,KAAK,CAAC,IAAf,EAAqB,4CAArB;AAH0B;AAI3B;;;;4CAEmC;AAAA,wCAAX,IAAW;AAAX,QAAA,IAAW;AAAA;;AAClC,aAAO,4BAAgB,qBAAhB,CAAsC,KAAtC,CAA4C,IAA5C,EAAkD,IAAlD,CAAP;AACD;;;sCAEc;AAAA,UACL,MADK,GACM,KAAK,KADX,CACL,MADK;AAEb,aAAO;AACL,QAAA,QAAQ,EAAE,MAAM,KAAK;AADhB,OAAP;AAGD;;;6BAEK;AAAA;;AAAA,wBACgF,KAAK,KADrF;AAAA,UACe,kBADf,eACI,SADJ;AAAA,UACmC,gBADnC,eACmC,gBADnC;AAAA,8CACqD,SADrD;AAAA,UACqD,SADrD,sCACiE,EADjE;AAAA,UACqE,MADrE,eACqE,MADrE;AAEJ,UAAM,SAAS,GAAG,6BAAa,MAAb,EAAqB,kBAArB,CAAlB;AACA,UAAM,aAAa,GAAG,4BACpB,SADoB,6EAGd,SAHc,cAGD,MAHC,GAGU,MAHV,2DAId,SAJc,0BAImB,gBAJnB,iBAMpB,SANoB,CAAtB;AASA,UAAM,SAAS,GAAG,sBAAK,KAAK,KAAV,EAAiB,CACjC,WADiC,EAEjC,WAFiC,EAGjC,QAHiC,EAIjC,MAJiC,EAKjC,kBALiC,CAAjB,CAAlB;AAQA,aAAO,sEAAU,SAAV;AAAqB,QAAA,SAAS,EAAE;AAAhC,SAAP;AACD;;;EA5E+B,gB;;;AACzB,IAAA,CAAA,WAAA,GAAc,MAAd;AAEA,IAAA,CAAA,YAAA,GAAe;AACpB,EAAA,MAAM,EAAA;AAAA;AADc;AAEpB,EAAA,gBAAgB,EAAE,KAFE;AAGpB,EAAA,QAHoB,oBAGX,CAHW,EAGkB;AACpC,IAAA,CAAC,CAAC,cAAF;AACD;AALmB,CAAf;AAQA,IAAA,CAAA,SAAA,GAAY;AACjB,EAAA,SAAS,EAAE,sBAAU,MADJ;AAEjB,EAAA,MAAM,EAAE,sBAAU,KAAV,CAAgB,CAAA;AAAA;AAAA,IAAA;AAAA;AAAA,IAAA;AAAA;AAAA,GAAhB,CAFS;AAGjB,EAAA,QAAQ,EAAE,sBAAU,GAHH;AAIjB,EAAA,QAAQ,EAAE,sBAAU,IAJH;AAKjB,EAAA,gBAAgB,EAAE,sBAAU;AALX,CAAZ;AAQA,IAAA,CAAA,iBAAA,GAAoB;AACzB,EAAA,QAAQ,EAAE,sBAAU;AADK,CAApB;AAIA,IAAA,CAAA,IAAA,GAAO,oBAAP;AAEA,IAAA,CAAA,eAAA,GAAkB,qBAAlB;;AAEA,IAAA,CAAA,MAAA,GAAS,YAC2B;AAAA,MAAzC,OAAyC,uEAAF,EAAE;AAEzC,SAAO;AACL,IAAA,aAAa,EAAE;AADV,KAEF,OAFE;AAGL,IAAA,aAAa,EAAE,0BAHV;AAIL,IAAA,aAAa,EAAE;AAJV,KAAP;AAMD,CATM","sourcesContent":["import React, {\n  Component,\n  ComponentClass,\n  CSSProperties,\n  FormEvent,\n  FormEventHandler,\n  ReactNode,\n  SFC,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport omit from 'lodash/omit';\nimport warning from '../_util/warning';\nimport FormItem from './FormItem';\nimport { FIELD_DATA_PROP, FIELD_META_PROP } from './constants';\nimport { createFormField } from '../rc-components/form';\nimport createDOMForm from '../rc-components/form/createDOMForm';\nimport PureRenderMixin from '../rc-components/util/PureRenderMixin';\nimport { FormLayout } from './enum';\nimport { getPrefixCls } from '../configure';\n\nexport interface FormCreateOption<T> {\n  onFieldsChange?: (props: T, fields: Array<any>) => void;\n  onValuesChange?: (props: T, values: any) => void;\n  mapPropsToFields?: (props: T) => void;\n  withRef?: boolean;\n}\n\nexport interface FormProps {\n  layout?: FormLayout;\n  form?: WrappedFormUtils;\n  onSubmit?: FormEventHandler<any>;\n  style?: CSSProperties;\n  className?: string;\n  prefixCls?: string;\n  hideRequiredMark?: boolean;\n}\n\nexport type ValidationRule = {\n  /** validation error message */\n  message?: string;\n  /** built-in validation type, available options: https://github.com/yiminghe/async-validator#type */\n  type?: string;\n  /** indicates whether field is required */\n  required?: boolean;\n  /** treat required fields that only contain whitespace as errors */\n  whitespace?: boolean;\n  /** validate the exact length of a field */\n  len?: number;\n  /** validate the min length of a field */\n  min?: number;\n  /** validate the max length of a field */\n  max?: number;\n  /** validate the value from a list of possible values */\n  enum?: string | string[];\n  /** validate from a regular expression */\n  pattern?: RegExp;\n  /** transform a value before validation */\n  transform?: (value: any) => any;\n  /** custom validate function (Note: callback must be called) */\n  validator?: (rule: any, value: any, callback: any, source?: any, options?: any) => any;\n};\n\nexport type ValidateCallback = (errors: any, values: any, modify?: boolean) => void;\n\nexport type GetFieldDecoratorOptions = {\n  /** 子节点的值的属性，如 Checkbox 的是 'checked' */\n  valuePropName?: string;\n  /** 子节点的初始值，类型、可选值均由子节点决定 */\n  initialValue?: any;\n  /** 收集子节点的值的时机 */\n  trigger?: string;\n  /** 可以把 onChange 的参数转化为控件的值，例如 DatePicker 可设为：(date, dateString) => dateString */\n  getValueFromEvent?: (...args: any[]) => any;\n  /** 校验子节点值的时机 */\n  validateTrigger?: string | string[];\n  /** 校验规则，参见 [async-validator](https://github.com/yiminghe/async-validator) */\n  rules?: ValidationRule[];\n  /** 是否和其他控件互斥，特别用于 Radio 单选控件 */\n  exclusive?: boolean;\n  /** Normalize value to form component */\n  normalize?: (value: any, prevValue: any, allValues: any) => any;\n  /** Whether stop validate on first rule of error for this field.  */\n  validateFirst?: boolean;\n};\n\n// function create\nexport type WrappedFormUtils = {\n  /** 获取一组输入控件的值，如不传入参数，则获取全部组件的值 */\n  getFieldsValue(fieldNames?: Array<string>): Object;\n  /** 获取一个输入控件的值 */\n  getFieldValue(fieldName: string): any;\n  /** 设置一组输入控件的值 */\n  setFieldsValue(obj: Object): void;\n  /** 设置一组输入控件的值 */\n  setFields(obj: Object): void;\n  /** 校验并获取一组输入域的值与 Error */\n  validateFields(fieldNames: Array<string>, options: Object, callback: ValidateCallback): void;\n  validateFields(fieldNames: Array<string>, callback: ValidateCallback): void;\n  validateFields(options: Object, callback: ValidateCallback): void;\n  validateFields(callback: ValidateCallback): void;\n  validateFields(): void;\n  /** 与 `validateFields` 相似，但校验完后，如果校验不通过的菜单域不在可见范围内，则自动滚动进可见范围 */\n  validateFieldsAndScroll(\n    fieldNames?: Array<string>,\n    options?: Object,\n    callback?: ValidateCallback,\n  ): void;\n  validateFieldsAndScroll(fieldNames?: Array<string>, callback?: ValidateCallback): void;\n  validateFieldsAndScroll(options?: Object, callback?: ValidateCallback): void;\n  validateFieldsAndScroll(callback?: ValidateCallback): void;\n  validateFieldsAndScroll(): void;\n  /** 获取某个输入控件的 Error */\n  getFieldError(name: string): Object[];\n  getFieldsError(names?: Array<string>): Object;\n  /** 判断一个输入控件是否在校验状态 */\n  isFieldValidating(name: string): boolean;\n  isFieldTouched(name: string): boolean;\n  isFieldsTouched(names?: Array<string>): boolean;\n  /** 重置一组输入控件的值与状态，如不传入参数，则重置所有组件 */\n  resetFields(names?: Array<string>): void;\n  isModifiedFields(names?: Array<string>): boolean;\n  isModifiedField(name: string): boolean;\n  getFieldDecorator(id: string, options?: GetFieldDecoratorOptions): (node: ReactNode) => ReactNode;\n};\n\nexport interface FormComponentProps {\n  form: WrappedFormUtils;\n}\n\nexport interface ComponentDecorator {\n  <P extends FormComponentProps>(component: ComponentClass<P> | SFC<P>): ComponentClass<\n    Omit<P, keyof FormComponentProps>\n  >;\n}\n\nexport default class Form extends Component<FormProps, any> {\n  static displayName = 'Form';\n\n  static defaultProps = {\n    layout: FormLayout.horizontal,\n    hideRequiredMark: false,\n    onSubmit(e: FormEvent<HTMLFormElement>) {\n      e.preventDefault();\n    },\n  };\n\n  static propTypes = {\n    prefixCls: PropTypes.string,\n    layout: PropTypes.oneOf([FormLayout.horizontal, FormLayout.inline, FormLayout.vertical]),\n    children: PropTypes.any,\n    onSubmit: PropTypes.func,\n    hideRequiredMark: PropTypes.bool,\n  };\n\n  static childContextTypes = {\n    vertical: PropTypes.bool,\n  };\n\n  static Item = FormItem;\n\n  static createFormField = createFormField;\n\n  static create = function<TOwnProps>(\n    options: FormCreateOption<TOwnProps> = {},\n  ): ComponentDecorator {\n    return createDOMForm({\n      fieldNameProp: 'id',\n      ...options,\n      fieldMetaProp: FIELD_META_PROP,\n      fieldDataProp: FIELD_DATA_PROP,\n    });\n  };\n\n  constructor(props: FormProps) {\n    super(props);\n\n    warning(!props.form, 'It is unnecessary to pass `form` to `Form`');\n  }\n\n  shouldComponentUpdate(...args: any[]) {\n    return PureRenderMixin.shouldComponentUpdate.apply(this, args);\n  }\n\n  getChildContext() {\n    const { layout } = this.props;\n    return {\n      vertical: layout === 'vertical',\n    };\n  }\n\n  render() {\n    const { prefixCls: customizePrefixCls, hideRequiredMark, className = '', layout } = this.props;\n    const prefixCls = getPrefixCls('form', customizePrefixCls);\n    const formClassName = classNames(\n      prefixCls,\n      {\n        [`${prefixCls}-${layout}`]: layout,\n        [`${prefixCls}-hide-required-mark`]: hideRequiredMark,\n      },\n      className,\n    );\n\n    const formProps = omit(this.props, [\n      'prefixCls',\n      'className',\n      'layout',\n      'form',\n      'hideRequiredMark',\n    ]);\n\n    return <form {...formProps} className={formClassName} />;\n  }\n}\n"]}