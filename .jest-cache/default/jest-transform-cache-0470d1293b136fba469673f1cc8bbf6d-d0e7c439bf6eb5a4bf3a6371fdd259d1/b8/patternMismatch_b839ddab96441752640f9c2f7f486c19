26f0984e8b5de02c04392f4b93a1b174
"use strict";

/* istanbul ignore next */
var cov_65yy2ru91 = function () {
  var path = "/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/validator/rules/patternMismatch.tsx";
  var hash = "7a73ccb5271ac9bbfca927114ec9cac98cceedb9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/validator/rules/patternMismatch.tsx",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 29
        },
        end: {
          line: 3,
          column: 84
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 7,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 37
        }
      },
      "3": {
        start: {
          line: 10,
          column: 15
        },
        end: {
          line: 10,
          column: 69
        }
      },
      "4": {
        start: {
          line: 12,
          column: 24
        },
        end: {
          line: 12,
          column: 78
        }
      },
      "5": {
        start: {
          line: 14,
          column: 21
        },
        end: {
          line: 14,
          column: 52
        }
      },
      "6": {
        start: {
          line: 17,
          column: 2
        },
        end: {
          line: 19,
          column: 3
        }
      },
      "7": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 18,
          column: 19
        }
      },
      "8": {
        start: {
          line: 21,
          column: 14
        },
        end: {
          line: 21,
          column: 48
        }
      },
      "9": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 44
        }
      },
      "10": {
        start: {
          line: 23,
          column: 2
        },
        end: {
          line: 23,
          column: 66
        }
      },
      "11": {
        start: {
          line: 27,
          column: 16
        },
        end: {
          line: 27,
          column: 29
        }
      },
      "12": {
        start: {
          line: 28,
          column: 34
        },
        end: {
          line: 28,
          column: 65
        }
      },
      "13": {
        start: {
          line: 30,
          column: 2
        },
        end: {
          line: 39,
          column: 3
        }
      },
      "14": {
        start: {
          line: 31,
          column: 19
        },
        end: {
          line: 31,
          column: 36
        }
      },
      "15": {
        start: {
          line: 32,
          column: 32
        },
        end: {
          line: 32,
          column: 67
        }
      },
      "16": {
        start: {
          line: 33,
          column: 28
        },
        end: {
          line: 33,
          column: 142
        }
      },
      "17": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 38,
          column: 7
        }
      },
      "18": {
        start: {
          line: 41,
          column: 2
        },
        end: {
          line: 41,
          column: 14
        }
      }
    },
    fnMap: {
      "0": {
        name: "generatePattern",
        decl: {
          start: {
            line: 16,
            column: 9
          },
          end: {
            line: 16,
            column: 24
          }
        },
        loc: {
          start: {
            line: 16,
            column: 34
          },
          end: {
            line: 24,
            column: 1
          }
        },
        line: 16
      },
      "1": {
        name: "patternMismatch",
        decl: {
          start: {
            line: 26,
            column: 9
          },
          end: {
            line: 26,
            column: 24
          }
        },
        loc: {
          start: {
            line: 26,
            column: 39
          },
          end: {
            line: 42,
            column: 1
          }
        },
        line: 26
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 17,
            column: 2
          },
          end: {
            line: 19,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 17,
            column: 2
          },
          end: {
            line: 19,
            column: 3
          }
        }, {
          start: {
            line: 17,
            column: 2
          },
          end: {
            line: 19,
            column: 3
          }
        }],
        line: 17
      },
      "1": {
        loc: {
          start: {
            line: 21,
            column: 14
          },
          end: {
            line: 21,
            column: 48
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 21,
            column: 40
          },
          end: {
            line: 21,
            column: 42
          }
        }, {
          start: {
            line: 21,
            column: 45
          },
          end: {
            line: 21,
            column: 48
          }
        }],
        line: 21
      },
      "2": {
        loc: {
          start: {
            line: 22,
            column: 12
          },
          end: {
            line: 22,
            column: 44
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 22,
            column: 36
          },
          end: {
            line: 22,
            column: 38
          }
        }, {
          start: {
            line: 22,
            column: 41
          },
          end: {
            line: 22,
            column: 44
          }
        }],
        line: 22
      },
      "3": {
        loc: {
          start: {
            line: 30,
            column: 2
          },
          end: {
            line: 39,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 2
          },
          end: {
            line: 39,
            column: 3
          }
        }, {
          start: {
            line: 30,
            column: 2
          },
          end: {
            line: 39,
            column: 3
          }
        }],
        line: 30
      },
      "4": {
        loc: {
          start: {
            line: 30,
            column: 6
          },
          end: {
            line: 30,
            column: 92
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 30,
            column: 6
          },
          end: {
            line: 30,
            column: 38
          }
        }, {
          start: {
            line: 30,
            column: 42
          },
          end: {
            line: 30,
            column: 51
          }
        }, {
          start: {
            line: 30,
            column: 55
          },
          end: {
            line: 30,
            column: 92
          }
        }],
        line: 30
      },
      "5": {
        loc: {
          start: {
            line: 33,
            column: 28
          },
          end: {
            line: 33,
            column: 142
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 33,
            column: 63
          },
          end: {
            line: 33,
            column: 118
          }
        }, {
          start: {
            line: 33,
            column: 121
          },
          end: {
            line: 33,
            column: 142
          }
        }],
        line: 33
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0, 0],
      "5": [0, 0]
    },
    _coverageSchema: "43e27e138ebf9cfc5966b082cf9a028302ed4184",
    hash: "7a73ccb5271ac9bbfca927114ec9cac98cceedb9"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  return coverage[path] = coverageData;
}();

var _interopRequireDefault =
/* istanbul ignore next */
(cov_65yy2ru91.s[0]++, require("@babel/runtime/helpers/interopRequireDefault"));

/* istanbul ignore next */
cov_65yy2ru91.s[1]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});

/* istanbul ignore next */
cov_65yy2ru91.s[2]++;
exports["default"] = patternMismatch;

var _isEmpty =
/* istanbul ignore next */
(cov_65yy2ru91.s[3]++, _interopRequireDefault(require("../../_util/isEmpty")));

var _ValidationResult =
/* istanbul ignore next */
(cov_65yy2ru91.s[4]++, _interopRequireDefault(require("../ValidationResult")));

var _localeContext =
/* istanbul ignore next */
(cov_65yy2ru91.s[5]++, require("../../locale-context"));

function generatePattern(pattern) {
  /* istanbul ignore next */
  cov_65yy2ru91.f[0]++;
  cov_65yy2ru91.s[6]++;

  if (pattern instanceof RegExp) {
    /* istanbul ignore next */
    cov_65yy2ru91.b[0][0]++;
    cov_65yy2ru91.s[7]++;
    return pattern;
  } else
  /* istanbul ignore next */
  {
    cov_65yy2ru91.b[0][1]++;
  }

  var begin =
  /* istanbul ignore next */
  (cov_65yy2ru91.s[8]++, pattern.startsWith('^') ?
  /* istanbul ignore next */
  (cov_65yy2ru91.b[1][0]++, '') :
  /* istanbul ignore next */
  (cov_65yy2ru91.b[1][1]++, '^'));
  var end =
  /* istanbul ignore next */
  (cov_65yy2ru91.s[9]++, pattern.endsWith('$') ?
  /* istanbul ignore next */
  (cov_65yy2ru91.b[2][0]++, '') :
  /* istanbul ignore next */
  (cov_65yy2ru91.b[2][1]++, '$'));

  /* istanbul ignore next */
  cov_65yy2ru91.s[10]++;
  return new RegExp("".concat(begin).concat(pattern).concat(end));
}

function patternMismatch(value, props) {
  /* istanbul ignore next */
  cov_65yy2ru91.f[1]++;
  var pattern =
  /* istanbul ignore next */
  (cov_65yy2ru91.s[11]++, props.pattern),
      defaultValidationMessages =
  /* istanbul ignore next */
  (cov_65yy2ru91.s[12]++, props.defaultValidationMessages);

  /* istanbul ignore next */
  cov_65yy2ru91.s[13]++;

  if (
  /* istanbul ignore next */
  (cov_65yy2ru91.b[4][0]++, !(0, _isEmpty["default"])(value)) &&
  /* istanbul ignore next */
  (cov_65yy2ru91.b[4][1]++, !!pattern) &&
  /* istanbul ignore next */
  (cov_65yy2ru91.b[4][2]++, !generatePattern(pattern).test(value))) {
    /* istanbul ignore next */
    cov_65yy2ru91.b[3][0]++;
    var ruleName =
    /* istanbul ignore next */
    (cov_65yy2ru91.s[14]++, 'patternMismatch');

    var _defaultValidationMes =
    /* istanbul ignore next */
    (cov_65yy2ru91.s[15]++, defaultValidationMessages[ruleName]),
        validationMessage =
    /* istanbul ignore next */
    (cov_65yy2ru91.s[16]++, _defaultValidationMes === void 0 ?
    /* istanbul ignore next */
    (cov_65yy2ru91.b[5][0]++, (0, _localeContext.$l)('Validator', 'pattern_mismatch')) :
    /* istanbul ignore next */
    (cov_65yy2ru91.b[5][1]++, _defaultValidationMes));

    /* istanbul ignore next */
    cov_65yy2ru91.s[17]++;
    return new _ValidationResult["default"]({
      validationMessage: validationMessage,
      value: value,
      ruleName: ruleName
    });
  } else
  /* istanbul ignore next */
  {
    cov_65yy2ru91.b[3][1]++;
  }

  cov_65yy2ru91.s[18]++;
  return true;
}