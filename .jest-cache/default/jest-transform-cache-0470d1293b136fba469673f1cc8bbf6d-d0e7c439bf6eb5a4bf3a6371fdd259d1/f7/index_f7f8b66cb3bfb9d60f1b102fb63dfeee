038e8d343a46d7438a102d312c16fcf2
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "TreeNode", {
  enumerable: true,
  get: function get() {
    return _tree.TreeNode;
  }
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _openAnimation = _interopRequireDefault(require("../_util/openAnimation"));

var _tree = _interopRequireWildcard(require("../rc-components/tree"));

var _icon = _interopRequireDefault(require("../icon"));

var _progress = _interopRequireDefault(require("../progress"));

var _configure = require("../configure");

var Tree =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(Tree, _Component);

  function Tree() {
    var _this;

    (0, _classCallCheck2["default"])(this, Tree);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(Tree).apply(this, arguments));

    _this.renderSwitcherIcon = function (_ref) {
      var isLeaf = _ref.isLeaf,
          loading = _ref.loading;
      var _this$props = _this.props,
          showLine = _this$props.showLine,
          switcherIcon = _this$props.switcherIcon;

      var prefixCls = _this.getPrefixCls();

      if (loading) {
        return _react["default"].createElement(_progress["default"], {
          type: "loading"
          /* loading */
          ,
          className: "".concat(prefixCls, "-switcher-loading-icon"),
          size: "small"
          /* small */

        });
      }

      var switcherCls = "".concat(prefixCls, "-switcher-icon");

      if (showLine) {
        if (isLeaf) {
          return _react["default"].createElement(_icon["default"], {
            type: "note",
            className: "".concat(prefixCls, "-switcher-line-icon")
          });
        }

        return _react["default"].createElement(_icon["default"], {
          type: "arrow_drop_down",
          className: switcherCls
        });
      }

      if (isLeaf) {
        return null;
      }

      if (switcherIcon) {
        var switcherOriginCls = switcherIcon.props.className || '';
        return (0, _react.cloneElement)(switcherIcon, {
          className: [switcherOriginCls, switcherCls]
        });
      }

      return _react["default"].createElement(_icon["default"], {
        type: "arrow_drop_down",
        className: switcherCls
      });
    };

    return _this;
  }

  (0, _createClass2["default"])(Tree, [{
    key: "getPrefixCls",
    value: function getPrefixCls() {
      var prefixCls = this.props.prefixCls;
      return (0, _configure.getPrefixCls)('tree', prefixCls);
    }
  }, {
    key: "render",
    value: function render() {
      var props = this.props;
      var className = props.className,
          showIcon = props.showIcon,
          checkable = props.checkable,
          children = props.children;
      var prefixCls = this.getPrefixCls();
      return _react["default"].createElement(_tree["default"], (0, _extends2["default"])({}, props, {
        className: (0, _classnames["default"])(!showIcon && "".concat(prefixCls, "-icon-hide"), className),
        checkable: checkable ? _react["default"].createElement("span", {
          className: "".concat(prefixCls, "-checkbox-inner")
        }) : checkable,
        switcherIcon: this.renderSwitcherIcon,
        prefixCls: prefixCls
      }), children);
    }
  }]);
  return Tree;
}(_react.Component);

exports["default"] = Tree;
Tree.displayName = 'Tree';
Tree.TreeNode = _tree.TreeNode;
Tree.defaultProps = {
  checkable: false,
  showIcon: false,
  openAnimation: _openAnimation["default"]
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyZWUvaW5kZXguanN4Il0sIm5hbWVzIjpbIlRyZWUiLCJDb21wb25lbnQiLCJpc0xlYWYiLCJsb2FkaW5nIiwic2hvd0xpbmUiLCJzd2l0Y2hlckljb24iLCJwcmVmaXhDbHMiLCJzd2l0Y2hlckNscyIsInN3aXRjaGVyT3JpZ2luQ2xzIiwiY2xhc3NOYW1lIiwicHJvcHMiLCJzaG93SWNvbiIsImNoZWNrYWJsZSIsImNoaWxkcmVuIiwiVHJlZU5vZGUiLCJvcGVuQW5pbWF0aW9uIiwiYW5pbWF0aW9uIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUEsTUFBQSxHQUFBLHVCQUFBLENBQUEsT0FBQSxDQUFBLE9BQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsV0FBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLFlBQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsY0FBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLHdCQUFBLENBQUEsQ0FBQTs7QUFDQSxJQUFBLEtBQUEsR0FBQSx1QkFBQSxDQUFBLE9BQUEsQ0FBQSx1QkFBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxLQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLENBQUEsU0FBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxTQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxVQUFBLEdBQUEsT0FBQSxDQUFBLGNBQUEsQ0FBQTs7SUFFcUJBLEk7Ozs7O0FBQ2pCLFdBQUEsSUFBQSxHQUFjO0FBQUEsUUFBQSxLQUFBOztBQUFBLEtBQUEsR0FBQSxnQkFBQSxDQUFBLFNBQUEsQ0FBQSxFQUFBLElBQUEsRUFBQSxJQUFBO0FBQ1YsSUFBQSxLQUFBLEdBQUEsQ0FBQSxHQUFBLDJCQUFBLENBQUEsU0FBQSxDQUFBLEVBQUEsSUFBQSxFQUFBLENBQUEsR0FBQSxnQkFBQSxDQUFBLFNBQUEsQ0FBQSxFQUFBLElBQUEsRUFBQSxL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QUFBLFNBQUEsQ0FBQSxTQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsS0FBQSxFQUFBO0FBQW1CLFFBQUEsU0FBUyxFQUFFLENBQUEsR0FBQSxXQUFBLENBQUEsU0FBQSxDQUFBLEVBQVcsQ0FBQSxRQUFBLElBQUEsR0FBQSxNQUFBLENBQUEsU0FBQSxFQUFYLFlBQVcsQ0FBWCxFQUE5QixTQUE4QixDQUE5QjtBQUE0RixRQUFBLFNBQVMsRUFBRU0sU0FBUyxHQUFHLE1BQUEsQ0FBQSxTQUFBLENBQUEsQ0FBQSxhQUFBLENBQUEsTUFBQSxFQUFBO0FBQU0sVUFBQSxTQUFTLEVBQUEsR0FBQSxNQUFBLENBQUEsU0FBQSxFQUFBLGlCQUFBO0FBQWYsU0FBQSxDQUFILEdBQWhILFNBQUE7QUFBa0wsUUFBQSxZQUFZLEVBQUUsS0FBaE0sa0JBQUE7QUFBeU4sUUFBQSxTQUFTLEVBQUVOO0FBQXBPLE9BQUEsQ0FBQSxFQUFSLFFBQVEsQ0FBUjtBQUdIOzs7RUF2QzZCTCxNQUFBQSxDQUFBQSxTOzs7QUF5Q2xDRCxJQUFJLENBQUpBLFdBQUFBLEdBQUFBLE1BQUFBO0FBQ0FBLElBQUksQ0FBSkEsUUFBQUEsR0FBZ0JjLEtBQUFBLENBQWhCZCxRQUFBQTtBQUNBQSxJQUFJLENBQUpBLFlBQUFBLEdBQW9CO0FBQ2hCWSxFQUFBQSxTQUFTLEVBRE8sS0FBQTtBQUVoQkQsRUFBQUEsUUFBUSxFQUZRLEtBQUE7QUFHaEJJLEVBQUFBLGFBQWEsRUFBRUMsY0FBQUEsQ0FBQUEsU0FBQUE7QUFIQyxDQUFwQmhCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IGNsb25lRWxlbWVudCwgQ29tcG9uZW50LCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IGFuaW1hdGlvbiBmcm9tICcuLi9fdXRpbC9vcGVuQW5pbWF0aW9uJztcbmltcG9ydCBSY1RyZWUsIHsgVHJlZU5vZGUgfSBmcm9tICcuLi9yYy1jb21wb25lbnRzL3RyZWUnO1xuaW1wb3J0IEljb24gZnJvbSAnLi4vaWNvbic7XG5pbXBvcnQgUHJvZ3Jlc3MgZnJvbSAnLi4vcHJvZ3Jlc3MnO1xuaW1wb3J0IHsgZ2V0UHJlZml4Q2xzIH0gZnJvbSAnLi4vY29uZmlndXJlJztcbmV4cG9ydCB7IFRyZWVOb2RlIH07XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUcmVlIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5yZW5kZXJTd2l0Y2hlckljb24gPSAoeyBpc0xlYWYsIGxvYWRpbmcgfSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBzaG93TGluZSwgc3dpdGNoZXJJY29uIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICAgICAgY29uc3QgcHJlZml4Q2xzID0gdGhpcy5nZXRQcmVmaXhDbHMoKTtcbiAgICAgICAgICAgIGlmIChsb2FkaW5nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICg8UHJvZ3Jlc3MgdHlwZT17XCJsb2FkaW5nXCIgLyogbG9hZGluZyAqL30gY2xhc3NOYW1lPXtgJHtwcmVmaXhDbHN9LXN3aXRjaGVyLWxvYWRpbmctaWNvbmB9IHNpemU9e1wic21hbGxcIiAvKiBzbWFsbCAqL30vPik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBzd2l0Y2hlckNscyA9IGAke3ByZWZpeENsc30tc3dpdGNoZXItaWNvbmA7XG4gICAgICAgICAgICBpZiAoc2hvd0xpbmUpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNMZWFmKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiA8SWNvbiB0eXBlPVwibm90ZVwiIGNsYXNzTmFtZT17YCR7cHJlZml4Q2xzfS1zd2l0Y2hlci1saW5lLWljb25gfS8+O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gPEljb24gdHlwZT1cImFycm93X2Ryb3BfZG93blwiIGNsYXNzTmFtZT17c3dpdGNoZXJDbHN9Lz47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNMZWFmKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3dpdGNoZXJJY29uKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3dpdGNoZXJPcmlnaW5DbHMgPSBzd2l0Y2hlckljb24ucHJvcHMuY2xhc3NOYW1lIHx8ICcnO1xuICAgICAgICAgICAgICAgIHJldHVybiBjbG9uZUVsZW1lbnQoc3dpdGNoZXJJY29uLCB7XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogW3N3aXRjaGVyT3JpZ2luQ2xzLCBzd2l0Y2hlckNsc10sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gPEljb24gdHlwZT1cImFycm93X2Ryb3BfZG93blwiIGNsYXNzTmFtZT17c3dpdGNoZXJDbHN9Lz47XG4gICAgICAgIH07XG4gICAgfVxuICAgIGdldFByZWZpeENscygpIHtcbiAgICAgICAgY29uc3QgeyBwcmVmaXhDbHMgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIHJldHVybiBnZXRQcmVmaXhDbHMoJ3RyZWUnLCBwcmVmaXhDbHMpO1xuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHByb3BzID0gdGhpcy5wcm9wcztcbiAgICAgICAgY29uc3QgeyBjbGFzc05hbWUsIHNob3dJY29uLCBjaGVja2FibGUsIGNoaWxkcmVuIH0gPSBwcm9wcztcbiAgICAgICAgY29uc3QgcHJlZml4Q2xzID0gdGhpcy5nZXRQcmVmaXhDbHMoKTtcbiAgICAgICAgcmV0dXJuICg8UmNUcmVlIHsuLi5wcm9wc30gY2xhc3NOYW1lPXtjbGFzc05hbWVzKCFzaG93SWNvbiAmJiBgJHtwcmVmaXhDbHN9LWljb24taGlkZWAsIGNsYXNzTmFtZSl9IGNoZWNrYWJsZT17Y2hlY2thYmxlID8gPHNwYW4gY2xhc3NOYW1lPXtgJHtwcmVmaXhDbHN9LWNoZWNrYm94LWlubmVyYH0vPiA6IGNoZWNrYWJsZX0gc3dpdGNoZXJJY29uPXt0aGlzLnJlbmRlclN3aXRjaGVySWNvbn0gcHJlZml4Q2xzPXtwcmVmaXhDbHN9PlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L1JjVHJlZT4pO1xuICAgIH1cbn1cblRyZWUuZGlzcGxheU5hbWUgPSAnVHJlZSc7XG5UcmVlLlRyZWVOb2RlID0gVHJlZU5vZGU7XG5UcmVlLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBjaGVja2FibGU6IGZhbHNlLFxuICAgIHNob3dJY29uOiBmYWxzZSxcbiAgICBvcGVuQW5pbWF0aW9uOiBhbmltYXRpb24sXG59O1xuIl19