{"version":3,"sources":["tree/index.jsx"],"names":["Tree","Component","isLeaf","loading","showLine","switcherIcon","prefixCls","switcherCls","switcherOriginCls","className","props","showIcon","checkable","children","TreeNode","openAnimation","animation"],"mappings":"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","sourcesContent":["import React, { cloneElement, Component, } from 'react';\nimport classNames from 'classnames';\nimport animation from '../_util/openAnimation';\nimport RcTree, { TreeNode } from '../rc-components/tree';\nimport Icon from '../icon';\nimport Progress from '../progress';\nimport { getPrefixCls } from '../configure';\nexport { TreeNode };\nexport default class Tree extends Component {\n    constructor() {\n        super(...arguments);\n        this.renderSwitcherIcon = ({ isLeaf, loading }) => {\n            const { showLine, switcherIcon } = this.props;\n            const prefixCls = this.getPrefixCls();\n            if (loading) {\n                return (<Progress type={\"loading\" /* loading */} className={`${prefixCls}-switcher-loading-icon`} size={\"small\" /* small */}/>);\n            }\n            const switcherCls = `${prefixCls}-switcher-icon`;\n            if (showLine) {\n                if (isLeaf) {\n                    return <Icon type=\"note\" className={`${prefixCls}-switcher-line-icon`}/>;\n                }\n                return <Icon type=\"arrow_drop_down\" className={switcherCls}/>;\n            }\n            if (isLeaf) {\n                return null;\n            }\n            if (switcherIcon) {\n                const switcherOriginCls = switcherIcon.props.className || '';\n                return cloneElement(switcherIcon, {\n                    className: [switcherOriginCls, switcherCls],\n                });\n            }\n            return <Icon type=\"arrow_drop_down\" className={switcherCls}/>;\n        };\n    }\n    getPrefixCls() {\n        const { prefixCls } = this.props;\n        return getPrefixCls('tree', prefixCls);\n    }\n    render() {\n        const props = this.props;\n        const { className, showIcon, checkable, children } = props;\n        const prefixCls = this.getPrefixCls();\n        return (<RcTree {...props} className={classNames(!showIcon && `${prefixCls}-icon-hide`, className)} checkable={checkable ? <span className={`${prefixCls}-checkbox-inner`}/> : checkable} switcherIcon={this.renderSwitcherIcon} prefixCls={prefixCls}>\n        {children}\n      </RcTree>);\n    }\n}\nTree.displayName = 'Tree';\nTree.TreeNode = TreeNode;\nTree.defaultProps = {\n    checkable: false,\n    showIcon: false,\n    openAnimation: animation,\n};\n"]}