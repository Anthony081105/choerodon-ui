{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/data-set/Record.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n  action,\n  computed,\n  get,\n  isArrayLike,\n  isObservableArray,\n  observable,\n  runInAction,\n  set,\n  toJS,\n} from 'mobx';\nimport isNil from 'lodash/isNil';\nimport isString from 'lodash/isString';\nimport isNumber from 'lodash/isNumber';\nimport isPlainObject from 'lodash/isPlainObject';\nimport { getConfig } from 'choerodon-ui/lib/configure';\nimport DataSet from './DataSet';\nimport Field, { FieldProps, Fields } from './Field';\nimport {\n  axiosConfigAdapter,\n  checkFieldType,\n  childrenInfoForDelete,\n  findBindFields,\n  generateData,\n  generateJSONData,\n  generateResponseData,\n  getRecordValue,\n  isDirtyRecord,\n  processIntlField,\n  processToJSON,\n  processValue,\n  useCascade,\n  useNormal,\n} from './utils';\nimport * as ObjectChainValue from '../_util/ObjectChainValue';\nimport DataSetSnapshot from './DataSetSnapshot';\nimport localeContext from '../locale-context';\nimport { BooleanValue, DataSetEvents, FieldIgnore, FieldType, RecordStatus } from './enum';\nimport isSame from '../_util/isSame';\n\n/**\n * 记录ID生成器\n */\nconst IDGen: IterableIterator<number> = (function*(start: number) {\n  while (true) {\n    yield ++start;\n  }\n})(1000);\n\nexport default class Record {\n  id: number;\n\n  dataSet?: DataSet;\n\n  @observable fields: Fields;\n\n  memo?: object;\n\n  dataSetSnapshot: { [key: string]: DataSetSnapshot } = {};\n\n  cascadeRecordsMap: { [key: string]: Record[] } = {};\n\n  @observable pristineData: object;\n\n  @observable data: object;\n\n  @observable status: RecordStatus;\n\n  @observable selectable: boolean;\n\n  @observable isSelected: boolean;\n\n  @observable isCurrent: boolean;\n\n  @observable isCached: boolean;\n\n  @observable editing?: boolean;\n\n  @observable state: { [key: string]: any };\n\n  @computed\n  get key(): string | number {\n    if (this.status !== RecordStatus.add) {\n      const { dataSet } = this;\n      if (dataSet) {\n        const { primaryKey } = dataSet.props;\n        if (primaryKey) {\n          const key = this.get(primaryKey);\n          if (isString(key) || isNumber(key)) {\n            return key;\n          }\n        }\n      }\n    }\n    return this.id;\n  }\n\n  @computed\n  get index(): number {\n    const { dataSet } = this;\n    if (dataSet) {\n      return dataSet.indexOf(this);\n    }\n    return -1;\n  }\n\n  @computed\n  get isRemoved(): boolean {\n    return this.status === RecordStatus.delete;\n  }\n\n  @computed\n  get isIndeterminate(): boolean {\n    const { dataSet } = this;\n    if (dataSet) {\n      const { checkField } = dataSet.props;\n      if (checkField) {\n        const field = this.getField(checkField);\n        const trueValue = field ? field.get(BooleanValue.trueValue) : true;\n        const { children } = this;\n        if (children) {\n          let checkedLength = 0;\n          return (\n            children.some(record => {\n              if (record.isIndeterminate) {\n                return true;\n              }\n              if (record.get(checkField) === trueValue) {\n                checkedLength += 1;\n              }\n              return false;\n            }) ||\n            (checkedLength > 0 && checkedLength !== children.length)\n          );\n        }\n      }\n    }\n    return false;\n  }\n\n  @computed\n  get isExpanded(): boolean {\n    const { dataSet } = this;\n    if (dataSet) {\n      const { expandField } = dataSet.props;\n      if (expandField) {\n        const expanded = this.get(expandField);\n        const field = this.getField(expandField);\n        return expanded === (field ? field.get(BooleanValue.trueValue) : true);\n      }\n    }\n    return false;\n  }\n\n  set isExpanded(expand: boolean) {\n    const { dataSet } = this;\n    if (dataSet) {\n      const { expandField } = dataSet.props;\n      if (expandField) {\n        const field = this.getField(expandField);\n        this.set(\n          expandField,\n          field\n            ? expand\n              ? field.get(BooleanValue.trueValue)\n              : field.get(BooleanValue.falseValue)\n            : expand,\n        );\n      }\n    }\n  }\n\n  @computed\n  get previousRecord(): Record | undefined {\n    const { parent, dataSet } = this;\n    let children: Record[] | undefined;\n    if (parent) {\n      children = parent.children;\n    } else if (dataSet) {\n      children = dataSet.treeData;\n    }\n    if (children) {\n      return children[children.indexOf(this) - 1];\n    }\n    return undefined;\n  }\n\n  @computed\n  get nextRecord(): Record | undefined {\n    const { parent, dataSet } = this;\n    let children: Record[] | undefined;\n    if (parent) {\n      children = parent.children;\n    } else if (dataSet) {\n      children = dataSet.treeData;\n    }\n    if (children) {\n      return children[children.indexOf(this) + 1];\n    }\n    return undefined;\n  }\n\n  @computed\n  get records(): Record[] {\n    const { dataSet } = this;\n    if (dataSet) {\n      const { cascadeParent } = this;\n      if (cascadeParent && !cascadeParent.isCurrent) {\n        return cascadeParent.getCascadeRecords(dataSet.parentName) || [];\n      }\n      return dataSet.records;\n    }\n    return [];\n  }\n\n  @computed\n  get children(): Record[] | undefined {\n    const { dataSet } = this;\n    if (dataSet) {\n      const { parentField, idField } = dataSet.props;\n      if (parentField && idField) {\n        const children = this.records.filter(record => {\n          const childParentId = record.get(parentField);\n          const id = this.get(idField);\n          return !isNil(childParentId) && !isNil(id) && childParentId === id;\n        });\n        return children.length > 0 ? children : undefined;\n      }\n    }\n    return undefined;\n  }\n\n  @computed\n  get parent(): Record | undefined {\n    const { dataSet } = this;\n    if (dataSet) {\n      const { parentField, idField } = dataSet.props;\n      if (parentField && idField) {\n        return this.records.find(record => {\n          const parentId = this.get(parentField);\n          const id = record.get(idField);\n          return !isNil(parentId) && !isNil(id) && parentId === id;\n        });\n      }\n    }\n    return undefined;\n  }\n\n  @computed\n  get level(): number {\n    const { parent } = this;\n    if (parent) {\n      return parent.level + 1;\n    }\n    return 0;\n  }\n\n  @computed\n  get dirty(): boolean {\n    const { fields, status, dataSet, isCurrent, dataSetSnapshot } = this;\n    if (status === RecordStatus.update || [...fields.values()].some(({ dirty }) => dirty)) {\n      return true;\n    }\n    if (dataSet) {\n      const { children } = dataSet;\n      return Object.keys(children).some(key => {\n        return isCurrent\n          ? children[key].dirty\n          : !!dataSetSnapshot[key] && dataSetSnapshot[key].records.some(isDirtyRecord);\n      });\n    }\n    return false;\n  }\n\n  @computed\n  get cascadeParent(): Record | undefined {\n    const { dataSet } = this;\n    if (dataSet) {\n      const { parent, parentName } = dataSet;\n      if (parent && parentName) {\n        return parent.find(\n          record => (record.getCascadeRecords(parentName) || []).indexOf(this) !== -1,\n        );\n      }\n    }\n    return undefined;\n  }\n\n  constructor(data: object = {}, dataSet?: DataSet) {\n    runInAction(() => {\n      const initData = toJS(data);\n      this.state = {};\n      this.fields = observable.map<string, Field>();\n      this.status = RecordStatus.add;\n      this.selectable = true;\n      this.isSelected = false;\n      this.isCurrent = false;\n      this.isCached = false;\n      this.id = IDGen.next().value;\n      this.data = initData;\n      if (dataSet) {\n        this.dataSet = dataSet;\n        const { fields } = dataSet;\n        if (fields) {\n          this.initFields(fields);\n        }\n      }\n      const d = this.processData(initData);\n      this.pristineData = d;\n      this.data = d;\n    });\n  }\n\n  toData(\n    needIgnore?: boolean,\n    noCascade?: boolean,\n    isCascadeSelect?: boolean,\n    all: boolean = true,\n  ): any {\n    const { status, dataSet } = this;\n    const dataToJSON = dataSet && dataSet.dataToJSON;\n    const cascade = noCascade === undefined && dataToJSON ? useCascade(dataToJSON) : !noCascade;\n    const normal = all || (dataToJSON && useNormal(dataToJSON));\n    let dirty = status !== RecordStatus.sync;\n    const json = this.normalizeData(needIgnore);\n    if (cascade && this.normalizeCascadeData(json, normal, isCascadeSelect)) {\n      dirty = true;\n    }\n    return {\n      ...json,\n      __dirty: dirty,\n    };\n  }\n\n  toJSONData(noCascade?: boolean, isCascadeSelect?: boolean): any {\n    const { status } = this;\n    return {\n      ...this.toData(true, noCascade, isCascadeSelect, false),\n      __id: this.id,\n      [getConfig('statusKey')]: getConfig('status')[\n        status === RecordStatus.sync ? RecordStatus.update : status\n      ],\n    };\n  }\n\n  validate(all?: boolean, noCascade?: boolean): Promise<boolean> {\n    const { dataSetSnapshot, isCurrent, dataSet, status, fields } = this;\n    return Promise.all([\n      ...[...fields.values()].map(field =>\n        all || status !== RecordStatus.sync ? field.checkValidity() : true,\n      ),\n      ...(noCascade\n        ? []\n        : Object.keys(dataSetSnapshot).map(key =>\n            (isCurrent && dataSet\n              ? dataSet.children[key]\n              : new DataSet().restore(dataSetSnapshot[key])\n            ).validate(all),\n          )),\n    ]).then(results => results.every(result => result));\n  }\n\n  getField(fieldName?: string): Field | undefined {\n    if (fieldName) {\n      return this.fields.get(fieldName);\n    }\n  }\n\n  getCascadeRecords(fieldName?: string): Record[] | undefined {\n    const { dataSet } = this;\n    if (fieldName && dataSet) {\n      const childDataSet = dataSet.children[fieldName];\n      if (childDataSet) {\n        if (dataSet.current === this) {\n          return childDataSet.slice();\n        }\n        const snapshot = this.dataSetSnapshot[fieldName];\n        if (snapshot) {\n          return snapshot.records.filter(r => r.status !== RecordStatus.delete);\n        }\n        const cascadeRecords = this.cascadeRecordsMap[fieldName];\n        if (cascadeRecords) {\n          return cascadeRecords;\n        }\n        const data = this.get(fieldName);\n        if (isObservableArray(data)) {\n          const records = childDataSet.processData(data);\n          this.cascadeRecordsMap[fieldName] = records;\n          return records;\n        }\n      }\n    }\n  }\n\n  get(fieldName?: string): any {\n    return getRecordValue.call(\n      this,\n      this.data,\n      (child, checkField) => child.get(checkField),\n      fieldName,\n    );\n  }\n\n  @action\n  set(item: string | object, value?: any): Record {\n    if (isString(item)) {\n      let fieldName: string = item;\n      const oldName = fieldName;\n      const field = this.getField(fieldName) || this.addField(fieldName);\n      checkFieldType(value, field);\n      const bind = field.get('bind');\n      if (bind) {\n        fieldName = bind;\n      }\n      const oldValue = toJS(this.get(fieldName));\n      const newValue = processValue(value, field);\n      if (!isSame(newValue, oldValue)) {\n        const { fields } = this;\n        ObjectChainValue.set(this.data, fieldName, newValue, fields);\n        const pristineValue = toJS(this.getPristineValue(fieldName));\n        if (isSame(pristineValue, newValue)) {\n          if (this.status === RecordStatus.update && [...fields.values()].every(f => !f.dirty)) {\n            this.status = RecordStatus.sync;\n          }\n        } else if (this.status === RecordStatus.sync) {\n          this.status = RecordStatus.update;\n        }\n        const { dataSet } = this;\n        if (dataSet) {\n          dataSet.fireEvent(DataSetEvents.update, {\n            dataSet,\n            record: this,\n            name: oldName,\n            value: newValue,\n            oldValue,\n          });\n          const { checkField } = dataSet.props;\n          if (checkField && (checkField === fieldName || checkField === oldName)) {\n            const { children } = this;\n            if (children) {\n              children.forEach(record => record.set(fieldName, value));\n            }\n          }\n        }\n      }\n      findBindFields(field, this.fields).forEach(oneField => {\n        // oneField.dirty = field.dirty,\n        oneField.validator.reset();\n        oneField.checkValidity();\n      });\n    } else if (isPlainObject(item)) {\n      Object.keys(item).forEach(key => this.set(key, item[key]));\n    }\n    return this;\n  }\n\n  getPristineValue(fieldName?: string): any {\n    return getRecordValue.call(\n      this,\n      this.pristineData,\n      (child, checkField) => child.getPristineValue(checkField),\n      fieldName,\n    );\n  }\n\n  @action\n  init(item: string | object, value?: any): Record {\n    const { fields, pristineData, data } = this;\n    if (isString(item)) {\n      let fieldName: string = item;\n      const field = this.getField(fieldName) || this.addField(fieldName);\n      const bind = field.get('bind');\n      if (bind) {\n        fieldName = bind;\n      }\n      ObjectChainValue.set(pristineData, fieldName, value, fields);\n      ObjectChainValue.set(data, fieldName, value, fields);\n      field.commit();\n    } else if (isPlainObject(item)) {\n      Object.keys(item).forEach(key => this.init(key, item[key]));\n    }\n    return this;\n  }\n\n  clone(): Record {\n    const { dataSet } = this;\n    const cloneData = this.toData();\n    if (dataSet) {\n      const { primaryKey } = dataSet.props;\n      if (primaryKey) {\n        delete cloneData[primaryKey];\n      }\n      return new Record(cloneData, dataSet);\n    }\n    return new Record(cloneData);\n  }\n\n  ready(): Promise<any> {\n    return Promise.all([...this.fields.values()].map(field => field.ready()));\n  }\n\n  @action\n  async tls(name?: string): Promise<void> {\n    const tlsKey = getConfig('tlsKey');\n    const { dataSet } = this;\n    if (dataSet && name) {\n      const tlsData = this.get(tlsKey) || {};\n      if (!(name in tlsData)) {\n        const { axios, lang } = dataSet;\n        const { primaryKey } = dataSet.props;\n        const newConfig = axiosConfigAdapter(\n          'tls',\n          dataSet,\n          {},\n          primaryKey && { key: this.get(primaryKey) },\n          { name, record: this },\n        );\n        if (newConfig.url && this.status !== RecordStatus.add) {\n          const result = await axios(newConfig);\n          if (result) {\n            const dataKey = getConfig('dataKey');\n            this.commitTls(generateResponseData(result, dataKey)[0], name);\n          }\n        } else {\n          this.commitTls(\n            [...this.fields.entries()].reduce((data, [key, field]) => {\n              if (field.type === FieldType.intl) {\n                data[key] = {\n                  [lang]: this.get(key),\n                };\n              }\n              return data;\n            }, {}),\n            name,\n          );\n        }\n      }\n    }\n  }\n\n  @action\n  reset(): Record {\n    const { status, fields, dataSet, dirty } = this;\n    [...fields.values()].forEach(field => field.commit());\n    if (status === RecordStatus.update || status === RecordStatus.delete) {\n      this.status = RecordStatus.sync;\n    }\n    if (status === RecordStatus.delete || dirty) {\n      this.data = toJS(this.pristineData);\n      this.memo = undefined;\n      if (dataSet && !dataSet.resetInBatch) {\n        dataSet.fireEvent(DataSetEvents.reset, { records: [this], dataSet });\n      }\n    }\n    return this;\n  }\n\n  @action\n  save(): Record {\n    this.memo = toJS(this.data);\n    return this;\n  }\n\n  @action\n  restore(): Record {\n    const { memo } = this;\n    if (memo) {\n      this.set(memo);\n      this.memo = undefined;\n    }\n    return this;\n  }\n\n  @action\n  clear(): Record {\n    return this.set(\n      [...this.fields.keys()].reduce((obj, key) => {\n        obj[key] = null;\n        return obj;\n      }, {}),\n    );\n  }\n\n  @action\n  commit(data?: object, dataSet?: DataSet): Record {\n    const { dataSetSnapshot, fields, status } = this;\n    if (dataSet) {\n      const { records } = dataSet;\n      if (status === RecordStatus.delete) {\n        const index = records.indexOf(this);\n        if (index !== -1) {\n          dataSet.totalCount -= 1;\n          records.splice(index, 1);\n        }\n        return this;\n      }\n      if (status === RecordStatus.add) {\n        const index = records.indexOf(this);\n        if (index !== -1) {\n          dataSet.totalCount += 1;\n        }\n      }\n      if (data) {\n        const newData = this.processData(data);\n        this.pristineData = newData;\n        Object.keys(newData).forEach(key => {\n          const newValue = newData[key];\n          if (this.get(key) !== newValue) {\n            set(this.data, key, newData[key]);\n          }\n        });\n        const snapShorts = Object.keys(dataSetSnapshot);\n        if (snapShorts.length) {\n          const isCurrent = dataSet.current === this;\n          const ds = new DataSet();\n          snapShorts.forEach(\n            key =>\n              (dataSetSnapshot[key] = (isCurrent\n                ? dataSet.children[key]\n                : ds.restore(dataSetSnapshot[key])\n              )\n                .commitData(data[key] || [])\n                .snapshot()),\n          );\n        }\n      }\n    }\n    [...fields.values()].forEach(field => field.commit());\n    this.status = RecordStatus.sync;\n    return this;\n  }\n\n  @action\n  setState(item: string | object, value?: any) {\n    if (isString(item)) {\n      set(this.state, item, value);\n    } else if (isPlainObject(item)) {\n      set(this.state, item);\n    }\n    return this;\n  }\n\n  getState(key: string) {\n    return get(this.state, key);\n  }\n\n  @action\n  private commitTls(data = {}, name: string) {\n    const { dataSet } = this;\n    const lang = dataSet ? dataSet.lang : localeContext.locale.lang;\n    const tlsKey = getConfig('tlsKey');\n    const values: object = {};\n    if (!(name in data)) {\n      data[name] = {};\n    }\n    Object.keys(data).forEach(key => {\n      const value = data[key];\n      const field = this.getField(key);\n      if (field && field.dirty) {\n        values[`${tlsKey}.${key}.${lang}`] = this.get(key);\n      }\n      this.init(`${tlsKey}.${key}`, value);\n    });\n    this.set(values);\n  }\n\n  private initFields(fields: Fields) {\n    [...fields.keys()].forEach(key => this.addField(key));\n  }\n\n  @action\n  private addField(name: string, fieldProps: FieldProps = {}): Field {\n    const { dataSet } = this;\n    return processIntlField(\n      name,\n      fieldProps,\n      (langName, langProps) => {\n        const field = new Field({ ...langProps, name: langName }, dataSet, this);\n        this.fields.set(langName, field);\n        return field;\n      },\n      dataSet,\n    );\n  }\n\n  private processData(data: object = {}): object {\n    const { fields } = this;\n    const newData = { ...data };\n    [...fields.entries()].forEach(([fieldName, field]) => {\n      let value = ObjectChainValue.get(data, fieldName);\n      const bind = field.get('bind');\n      const type = field.get('type');\n      const transformResponse = field.get('transformResponse');\n      if (bind) {\n        fieldName = bind;\n        const bindValue = ObjectChainValue.get(data, fieldName);\n        if (isNil(value) && !isNil(bindValue)) {\n          value = bindValue;\n        }\n      }\n      if (value === undefined && type === FieldType.boolean) {\n        value = false;\n      }\n      if (transformResponse) {\n        value = transformResponse(value, data);\n      }\n      value = processValue(value, field);\n      if (value === null) {\n        value = undefined;\n      }\n      ObjectChainValue.set(newData, fieldName, value, fields);\n    });\n    return newData;\n  }\n\n  private normalizeData(needIgnore?: boolean) {\n    const { fields } = this;\n    const json: any = toJS(this.data);\n    const objectFieldsList: Field[][] = [];\n    const normalFields: Field[] = [];\n    const ignoreFieldNames: Set<string> = new Set();\n    [...fields.keys()].forEach(key => {\n      const field = this.getField(key);\n      if (field) {\n        const ignore = field.get('ignore');\n        if (\n          needIgnore &&\n          (ignore === FieldIgnore.always || (ignore === FieldIgnore.clean && !field.dirty))\n        ) {\n          ignoreFieldNames.add(key);\n        } else {\n          const type = field.get('type');\n          if (type === FieldType.object) {\n            const level = key.split('.').length - 1;\n            objectFieldsList[level] = (objectFieldsList[level] || []).concat(field);\n          } else {\n            normalFields.push(field);\n          }\n        }\n      }\n    });\n    [...objectFieldsList, normalFields].forEach(items => {\n      if (items) {\n        items.forEach(field => {\n          const { name } = field;\n          let value = ObjectChainValue.get(json, name);\n          const bind = field.get('bind');\n          const multiple = field.get('multiple');\n          const transformRequest = field.get('transformRequest');\n          if (bind) {\n            value = this.get(bind);\n          }\n          if (isString(multiple) && isArrayLike(value)) {\n            value = value.map(processToJSON).join(multiple);\n          }\n          if (transformRequest) {\n            value = transformRequest(value, this);\n          }\n          if (value !== undefined) {\n            ObjectChainValue.set(json, name, processToJSON(value), fields);\n          } else {\n            ignoreFieldNames.add(name);\n          }\n        });\n      }\n    });\n    [...ignoreFieldNames].forEach(key => ObjectChainValue.remove(json, key));\n    return json;\n  }\n\n  private normalizeCascadeData(\n    json: any,\n    normal?: boolean,\n    isSelect?: boolean,\n  ): boolean | undefined {\n    const { dataSetSnapshot, dataSet, isCurrent, status, fields } = this;\n    const isDelete = status === RecordStatus.delete;\n    if (dataSet) {\n      let dirty = false;\n      const { children } = dataSet;\n      if (isDelete) {\n        childrenInfoForDelete(json, children);\n      } else {\n        const keys = Object.keys(children);\n        if (keys) {\n          keys.forEach(name => {\n            const snapshot = dataSetSnapshot[name];\n            const child = isCurrent ? children[name] : snapshot && new DataSet().restore(snapshot);\n            if (child) {\n              const jsonArray =\n                normal || useNormal(child.dataToJSON)\n                  ? generateData(child)\n                  : generateJSONData(child, isSelect);\n              if (jsonArray.dirty) {\n                dirty = true;\n              }\n              ObjectChainValue.set(json, name, jsonArray.data, fields);\n            }\n          });\n        }\n      }\n      return dirty;\n    }\n  }\n}\n"]}