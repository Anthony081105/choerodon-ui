{"version":3,"sources":["Tree.jsx"],"names":["contextTypes","rcTree","PropTypes","shape","root","object","prefixCls","string","selectable","bool","showIcon","icon","oneOfType","node","func","draggable","checkable","checkStrictly","disabled","openTransitionName","openAnimation","loadData","filterTreeNode","renderTreeNode","isKeyChecked","onNodeExpand","onNodeSelect","onNodeMouseEnter","onNodeMouseLeave","onNodeContextMenu","onNodeDragStart","onNodeDragEnter","onNodeDragOver","onNodeDragLeave","onNodeDragEnd","onNodeDrop","onBatchNodeCheck","onCheckConductFinished","Tree","props","event","expandedKeys","state","onDragStart","eventKey","children","dragNode","setState","dragNodesKeys","onDragEnter","pos","dropPosition","dragOverNodeKey","setTimeout","delayedDragEnterLogic","Object","keys","forEach","key","clearTimeout","newExpandedKeys","onDragOver","onDragLeave","onDragEnd","onDrop","dropNodeKey","indexOf","posArr","dropResult","slice","Number","length","dropToGap","e","treeNode","selectedKeys","onSelect","multiple","selected","targetSelected","selectedNodes","push","setUncontrolledState","eventObj","checked","halfChecked","startNode","checkedBatch","list","checkedKeys","halfCheckedKeys","onCheck","checkedKeySet","halfCheckedKeySet","newCheckedKeys","filter","newHalfCheckedKeys","selectedObj","checkedNodes","checkedNodesPositions","onExpand","expanded","index","targetExpanded","then","onMouseEnter","onMouseLeave","onRightClick","preventDefault","prevProps","needSync","newState","myPrevProps","checkSync","name","autoExpandParent","child","level","dragOver","dragOverGapTop","dragOverGapBottom","defaultExpandAll","defaultExpandParent","defaultExpandedKeys","defaultCheckedKeys","defaultSelectedKeys","getSyncProps","switcherIcon","nextProps","className","focusable","showLine","domProps","tabIndex","onKeyDown","Children","map","Component","any","arrayOf"],"mappings":"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","sourcesContent":["import React, { Children, cloneElement, Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport warning from '../../_util/warning';\nimport {\n  arrAdd,\n  arrDel,\n  calcCheckedKeys,\n  calcDropPosition,\n  calcExpandedKeys,\n  calcSelectedKeys,\n  getDragNodesKeys,\n  getFullKeyList,\n  getPosition,\n  getStrictlyValue,\n  posToArr,\n  traverseTreeNodes,\n} from './util';\n\n/**\n * Thought we still use `cloneElement` to pass `key`,\n * other props can pass with context for future refactor.\n */\nexport const contextTypes = {\n  rcTree: PropTypes.shape({\n    root: PropTypes.object,\n\n    prefixCls: PropTypes.string,\n    selectable: PropTypes.bool,\n    showIcon: PropTypes.bool,\n    icon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n    draggable: PropTypes.bool,\n    checkable: PropTypes.oneOfType([\n      PropTypes.bool,\n      PropTypes.node,\n    ]),\n    checkStrictly: PropTypes.bool,\n    disabled: PropTypes.bool,\n    openTransitionName: PropTypes.string,\n    openAnimation: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    loadData: PropTypes.func,\n    filterTreeNode: PropTypes.func,\n    renderTreeNode: PropTypes.func,\n\n    isKeyChecked: PropTypes.func,\n\n    onNodeExpand: PropTypes.func,\n    onNodeSelect: PropTypes.func,\n    onNodeMouseEnter: PropTypes.func,\n    onNodeMouseLeave: PropTypes.func,\n    onNodeContextMenu: PropTypes.func,\n    onNodeDragStart: PropTypes.func,\n    onNodeDragEnter: PropTypes.func,\n    onNodeDragOver: PropTypes.func,\n    onNodeDragLeave: PropTypes.func,\n    onNodeDragEnd: PropTypes.func,\n    onNodeDrop: PropTypes.func,\n    onBatchNodeCheck: PropTypes.func,\n    onCheckConductFinished: PropTypes.func,\n  }),\n};\n\nclass Tree extends Component {\n  static propTypes = {\n    prefixCls: PropTypes.string,\n    className: PropTypes.string,\n    children: PropTypes.any,\n    showLine: PropTypes.bool,\n    showIcon: PropTypes.bool,\n    icon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n    focusable: PropTypes.bool,\n    selectable: PropTypes.bool,\n    disabled: PropTypes.bool,\n    multiple: PropTypes.bool,\n    checkable: PropTypes.oneOfType([\n      PropTypes.bool,\n      PropTypes.node,\n    ]),\n    checkStrictly: PropTypes.bool,\n    draggable: PropTypes.bool,\n    defaultExpandParent: PropTypes.bool,\n    autoExpandParent: PropTypes.bool,\n    defaultExpandAll: PropTypes.bool,\n    defaultExpandedKeys: PropTypes.arrayOf(PropTypes.string),\n    expandedKeys: PropTypes.arrayOf(PropTypes.string),\n    defaultCheckedKeys: PropTypes.arrayOf(PropTypes.string),\n    checkedKeys: PropTypes.oneOfType([\n      PropTypes.arrayOf(PropTypes.string),\n      PropTypes.object,\n    ]),\n    defaultSelectedKeys: PropTypes.arrayOf(PropTypes.string),\n    selectedKeys: PropTypes.arrayOf(PropTypes.string),\n    onExpand: PropTypes.func,\n    onCheck: PropTypes.func,\n    onSelect: PropTypes.func,\n    loadData: PropTypes.func,\n    onMouseEnter: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onRightClick: PropTypes.func,\n    onDragStart: PropTypes.func,\n    onDragEnter: PropTypes.func,\n    onDragOver: PropTypes.func,\n    onDragLeave: PropTypes.func,\n    onDragEnd: PropTypes.func,\n    onDrop: PropTypes.func,\n    filterTreeNode: PropTypes.func,\n    openTransitionName: PropTypes.string,\n    openAnimation: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    switcherIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  };\n\n  static childContextTypes = contextTypes;\n\n  static defaultProps = {\n    prefixCls: 'rc-tree',\n    showLine: false,\n    showIcon: true,\n    selectable: true,\n    multiple: false,\n    checkable: false,\n    disabled: false,\n    checkStrictly: false,\n    draggable: false,\n    defaultExpandParent: true,\n    autoExpandParent: false,\n    defaultExpandAll: false,\n    defaultExpandedKeys: [],\n    defaultCheckedKeys: [],\n    defaultSelectedKeys: [],\n    onExpand: null,\n    onCheck: null,\n    onSelect: null,\n    onDragStart: null,\n    onDragEnter: null,\n    onDragOver: null,\n    onDragLeave: null,\n    onDrop: null,\n    onDragEnd: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n  };\n\n  constructor(props) {\n    super(props);\n\n    const {\n      defaultExpandAll,\n      defaultExpandParent,\n      defaultExpandedKeys,\n      defaultCheckedKeys,\n      defaultSelectedKeys,\n      expandedKeys,\n    } = props;\n\n    // Sync state with props\n    const { checkedKeys = [], halfCheckedKeys = [] } =\n    calcCheckedKeys(defaultCheckedKeys, props) || {};\n\n    const state = {\n      selectedKeys: calcSelectedKeys(defaultSelectedKeys, props),\n      checkedKeys,\n      halfCheckedKeys,\n    };\n\n    if (defaultExpandAll) {\n      state.expandedKeys = getFullKeyList(props.children);\n    } else if (defaultExpandParent) {\n      state.expandedKeys = calcExpandedKeys(expandedKeys || defaultExpandedKeys, props);\n    } else {\n      state.expandedKeys = defaultExpandedKeys;\n    }\n\n    this.state = {\n      ...state,\n      ...(this.getSyncProps(props) || {}),\n    };\n\n    // Cache for check status to optimize\n    this.checkedBatch = null;\n  }\n\n  getChildContext() {\n    const {\n      prefixCls, selectable, showIcon, icon, draggable, checkable, checkStrictly, disabled,\n      loadData, filterTreeNode,\n      openTransitionName, openAnimation,\n      switcherIcon,\n    } = this.props;\n\n    return {\n      rcTree: {\n        // root: this,\n\n        prefixCls,\n        selectable,\n        showIcon,\n        icon,\n        switcherIcon,\n        draggable,\n        checkable,\n        checkStrictly,\n        disabled,\n        openTransitionName,\n        openAnimation,\n\n        loadData,\n        filterTreeNode,\n        renderTreeNode: this.renderTreeNode,\n        isKeyChecked: this.isKeyChecked,\n\n        onNodeExpand: this.onNodeExpand,\n        onNodeSelect: this.onNodeSelect,\n        onNodeMouseEnter: this.onNodeMouseEnter,\n        onNodeMouseLeave: this.onNodeMouseLeave,\n        onNodeContextMenu: this.onNodeContextMenu,\n        onNodeDragStart: this.onNodeDragStart,\n        onNodeDragEnter: this.onNodeDragEnter,\n        onNodeDragOver: this.onNodeDragOver,\n        onNodeDragLeave: this.onNodeDragLeave,\n        onNodeDragEnd: this.onNodeDragEnd,\n        onNodeDrop: this.onNodeDrop,\n        onBatchNodeCheck: this.onBatchNodeCheck,\n        onCheckConductFinished: this.onCheckConductFinished,\n      },\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    // React 16 will not trigger update if new state is null\n    this.setState(this.getSyncProps(nextProps, this.props));\n  }\n\n  onNodeDragStart = (event, node) => {\n    const { expandedKeys } = this.state;\n    const { onDragStart } = this.props;\n    const { eventKey, children } = node.props;\n\n    this.dragNode = node;\n\n    this.setState({\n      dragNodesKeys: getDragNodesKeys(children, node),\n      expandedKeys: arrDel(expandedKeys, eventKey),\n    });\n\n    if (onDragStart) {\n      onDragStart({ event, node });\n    }\n  };\n\n  /**\n   * [Legacy] Select handler is less small than node,\n   * so that this will trigger when drag enter node or select handler.\n   * This is a little tricky if customize css without padding.\n   * Better for use mouse move event to refresh drag state.\n   * But let's just keep it to avoid event trigger logic change.\n   */\n  onNodeDragEnter = (event, node) => {\n    const { expandedKeys } = this.state;\n    const { onDragEnter } = this.props;\n    const { pos, eventKey } = node.props;\n\n    const dropPosition = calcDropPosition(event, node);\n\n    // Skip if drag node is self\n    if (\n      this.dragNode.props.eventKey === eventKey &&\n      dropPosition === 0\n    ) {\n      this.setState({\n        dragOverNodeKey: '',\n        dropPosition: null,\n      });\n      return;\n    }\n\n    // Ref: https://github.com/react-component/tree/issues/132\n    // Add timeout to let onDragLevel fire before onDragEnter,\n    // so that we can clean drag props for onDragLeave node.\n    // Macro task for this:\n    // https://html.spec.whatwg.org/multipage/webappapis.html#clean-up-after-running-script\n    setTimeout(() => {\n      // Update drag over node\n      this.setState({\n        dragOverNodeKey: eventKey,\n        dropPosition,\n      });\n\n      // Side effect for delay drag\n      if (!this.delayedDragEnterLogic) {\n        this.delayedDragEnterLogic = {};\n      }\n      Object.keys(this.delayedDragEnterLogic).forEach((key) => {\n        clearTimeout(this.delayedDragEnterLogic[key]);\n      });\n      this.delayedDragEnterLogic[pos] = setTimeout(() => {\n        const newExpandedKeys = arrAdd(expandedKeys, eventKey);\n        this.setState({\n          expandedKeys: newExpandedKeys,\n        });\n\n        if (onDragEnter) {\n          onDragEnter({ event, node, expandedKeys: newExpandedKeys });\n        }\n      }, 400);\n    }, 0);\n  };\n  onNodeDragOver = (event, node) => {\n    const { onDragOver } = this.props;\n    if (onDragOver) {\n      onDragOver({ event, node });\n    }\n  };\n  onNodeDragLeave = (event, node) => {\n    const { onDragLeave } = this.props;\n\n    this.setState({\n      dragOverNodeKey: '',\n    });\n\n    if (onDragLeave) {\n      onDragLeave({ event, node });\n    }\n  };\n  onNodeDragEnd = (event, node) => {\n    const { onDragEnd } = this.props;\n    this.setState({\n      dragOverNodeKey: '',\n    });\n    if (onDragEnd) {\n      onDragEnd({ event, node });\n    }\n  };\n  onNodeDrop = (event, node) => {\n    const { dragNodesKeys, dropPosition } = this.state;\n    const { onDrop } = this.props;\n    const { eventKey, pos } = node.props;\n\n    this.setState({\n      dragOverNodeKey: '',\n      dropNodeKey: eventKey,\n    });\n\n    if (dragNodesKeys.indexOf(eventKey) !== -1) {\n      warning(false, 'Can not drop to dragNode(include it\\'s children node)');\n      return;\n    }\n\n    const posArr = posToArr(pos);\n\n    const dropResult = {\n      event,\n      node,\n      dragNode: this.dragNode,\n      dragNodesKeys: dragNodesKeys.slice(),\n      dropPosition: dropPosition + Number(posArr[posArr.length - 1]),\n    };\n\n    if (dropPosition !== 0) {\n      dropResult.dropToGap = true;\n    }\n\n    if (onDrop) {\n      onDrop(dropResult);\n    }\n  };\n\n  onNodeSelect = (e, treeNode) => {\n    let { selectedKeys } = this.state;\n    const { onSelect, multiple, children } = this.props;\n    const { selected, eventKey } = treeNode.props;\n    const targetSelected = !selected;\n\n    // Update selected keys\n    if (!targetSelected) {\n      selectedKeys = arrDel(selectedKeys, eventKey);\n    } else if (!multiple) {\n      selectedKeys = [eventKey];\n    } else {\n      selectedKeys = arrAdd(selectedKeys, eventKey);\n    }\n\n    // [Legacy] Not found related usage in doc or upper libs\n    // [Legacy] TODO: add optimize prop to skip node process\n    const selectedNodes = [];\n    if (selectedKeys.length) {\n      traverseTreeNodes(children, ({ node, key }) => {\n        if (selectedKeys.indexOf(key) !== -1) {\n          selectedNodes.push(node);\n        }\n      });\n    }\n\n    this.setUncontrolledState({ selectedKeys });\n\n    if (onSelect) {\n      const eventObj = {\n        event: 'select',\n        selected: targetSelected,\n        node: treeNode,\n        selectedNodes,\n      };\n      onSelect(selectedKeys, eventObj);\n    }\n  };\n\n  /**\n   * This will cache node check status to optimize update process.\n   * When Tree get trigger `onCheckConductFinished` will flush all the update.\n   */\n  onBatchNodeCheck = (key, checked, halfChecked, startNode) => {\n    if (startNode) {\n      this.checkedBatch = {\n        treeNode: startNode,\n        checked,\n        list: [],\n      };\n    }\n\n    // This code should never called\n    if (!this.checkedBatch) {\n      this.checkedBatch = {\n        list: [],\n      };\n      warning(\n        false,\n        'Checked batch not init. This should be a bug. Please fire a issue.',\n      );\n    }\n\n    this.checkedBatch.list.push({ key, checked, halfChecked });\n  };\n\n  /**\n   * When top `onCheckConductFinished` called, will execute all batch update.\n   * And trigger `onCheck` event.\n   */\n  onCheckConductFinished = () => {\n    const { checkedKeys, halfCheckedKeys } = this.state;\n    const { onCheck, checkStrictly, children } = this.props;\n\n    // Use map to optimize update speed\n    const checkedKeySet = {};\n    const halfCheckedKeySet = {};\n\n    checkedKeys.forEach(key => {\n      checkedKeySet[key] = true;\n    });\n    halfCheckedKeys.forEach(key => {\n      halfCheckedKeySet[key] = true;\n    });\n\n    // Batch process\n    this.checkedBatch.list.forEach(({ key, checked, halfChecked }) => {\n      checkedKeySet[key] = checked;\n      halfCheckedKeySet[key] = halfChecked;\n    });\n    const newCheckedKeys = Object.keys(checkedKeySet).filter(key => checkedKeySet[key]);\n    const newHalfCheckedKeys = Object.keys(halfCheckedKeySet).filter(key => halfCheckedKeySet[key]);\n\n    // Trigger onChecked\n    let selectedObj;\n\n    const eventObj = {\n      event: 'check',\n      node: this.checkedBatch.treeNode,\n      checked: this.checkedBatch.checked,\n    };\n\n    if (checkStrictly) {\n      selectedObj = getStrictlyValue(newCheckedKeys, newHalfCheckedKeys);\n\n      // [Legacy] TODO: add optimize prop to skip node process\n      eventObj.checkedNodes = [];\n      traverseTreeNodes(children, ({ node, key }) => {\n        if (checkedKeySet[key]) {\n          eventObj.checkedNodes.push(node);\n        }\n      });\n\n      this.setUncontrolledState({ checkedKeys: newCheckedKeys });\n    } else {\n      selectedObj = newCheckedKeys;\n\n      // [Legacy] TODO: add optimize prop to skip node process\n      eventObj.checkedNodes = [];\n      eventObj.checkedNodesPositions = []; // [Legacy] TODO: not in API\n      eventObj.halfCheckedKeys = newHalfCheckedKeys; // [Legacy] TODO: not in API\n      traverseTreeNodes(children, ({ node, pos, key }) => {\n        if (checkedKeySet[key]) {\n          eventObj.checkedNodes.push(node);\n          eventObj.checkedNodesPositions.push({ node, pos });\n        }\n      });\n\n      this.setUncontrolledState({\n        checkedKeys: newCheckedKeys,\n        halfCheckedKeys: newHalfCheckedKeys,\n      });\n    }\n\n    if (onCheck) {\n      onCheck(selectedObj, eventObj);\n    }\n\n    // Clean up\n    this.checkedBatch = null;\n  };\n\n  onNodeExpand = (e, treeNode) => {\n    let { expandedKeys } = this.state;\n    const { onExpand, loadData } = this.props;\n    const { eventKey, expanded } = treeNode.props;\n\n    // Update selected keys\n    const index = expandedKeys.indexOf(eventKey);\n    const targetExpanded = !expanded;\n\n    warning(\n      (expanded && index !== -1) || (!expanded && index === -1)\n      , 'Expand state not sync with index check');\n\n    if (targetExpanded) {\n      expandedKeys = arrAdd(expandedKeys, eventKey);\n    } else {\n      expandedKeys = arrDel(expandedKeys, eventKey);\n    }\n\n    this.setUncontrolledState({ expandedKeys });\n\n    if (onExpand) {\n      onExpand(expandedKeys, { node: treeNode, expanded: targetExpanded });\n    }\n\n    // Async Load data\n    if (targetExpanded && loadData) {\n      return loadData(treeNode).then(() => {\n        // [Legacy] Refresh logic\n        this.setUncontrolledState({ expandedKeys });\n      });\n    }\n\n    return null;\n  };\n\n  onNodeMouseEnter = (event, node) => {\n    const { onMouseEnter } = this.props;\n    if (onMouseEnter) {\n      onMouseEnter({ event, node });\n    }\n  };\n\n  onNodeMouseLeave = (event, node) => {\n    const { onMouseLeave } = this.props;\n    if (onMouseLeave) {\n      onMouseLeave({ event, node });\n    }\n  };\n\n  onNodeContextMenu = (event, node) => {\n    const { onRightClick } = this.props;\n    if (onRightClick) {\n      event.preventDefault();\n      onRightClick({ event, node });\n    }\n  };\n\n  /**\n   * Sync state with props if needed\n   */\n  getSyncProps = (props = {}, prevProps) => {\n    let needSync = false;\n    const newState = {};\n    const myPrevProps = prevProps || {};\n\n    function checkSync(name) {\n      if (props[name] !== myPrevProps[name]) {\n        needSync = true;\n        return true;\n      }\n      return false;\n    }\n\n    // Children change will affect check box status.\n    // And no need to check when prev props not provided\n    if (prevProps && checkSync('children')) {\n      const { checkedKeys = [], halfCheckedKeys = [] } =\n      calcCheckedKeys(props.checkedKeys || this.state.checkedKeys, props) || {};\n      newState.checkedKeys = checkedKeys;\n      newState.halfCheckedKeys = halfCheckedKeys;\n    }\n\n    // Re-calculate when autoExpandParent or expandedKeys changed\n    if (prevProps && (checkSync('autoExpandParent') || checkSync('expandedKeys'))) {\n      newState.expandedKeys = props.autoExpandParent ? calcExpandedKeys(props.expandedKeys, props) : props.expandedKeys;\n    }\n\n    if (checkSync('selectedKeys')) {\n      newState.selectedKeys = calcSelectedKeys(props.selectedKeys, props);\n    }\n\n    if (checkSync('checkedKeys')) {\n      const { checkedKeys = [], halfCheckedKeys = [] } =\n      calcCheckedKeys(props.checkedKeys, props) || {};\n      newState.checkedKeys = checkedKeys;\n      newState.halfCheckedKeys = halfCheckedKeys;\n    }\n\n    return needSync ? newState : null;\n  };\n\n  /**\n   * Only update the value which is not in props\n   */\n  setUncontrolledState = (state) => {\n    let needSync = false;\n    const newState = {};\n\n    Object.keys(state).forEach(name => {\n      if (name in this.props) return;\n\n      needSync = true;\n      newState[name] = state[name];\n    });\n\n    this.setState(needSync ? newState : null);\n  };\n\n  isKeyChecked = (key) => {\n    const { checkedKeys = [] } = this.state;\n    return checkedKeys.indexOf(key) !== -1;\n  };\n\n  /**\n   * [Legacy] Original logic use `key` as tracking clue.\n   * We have to use `cloneElement` to pass `key`.\n   */\n  renderTreeNode = (child, index, level = 0) => {\n    const {\n      expandedKeys = [], selectedKeys = [], halfCheckedKeys = [],\n      dragOverNodeKey, dropPosition,\n    } = this.state;\n    const {} = this.props;\n    const pos = getPosition(level, index);\n    const key = child.key || pos;\n\n    return cloneElement(child, {\n      eventKey: key,\n      expanded: expandedKeys.indexOf(key) !== -1,\n      selected: selectedKeys.indexOf(key) !== -1,\n      checked: this.isKeyChecked(key),\n      halfChecked: halfCheckedKeys.indexOf(key) !== -1,\n      pos,\n\n      // [Legacy] Drag props\n      dragOver: dragOverNodeKey === key && dropPosition === 0,\n      dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\n      dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1,\n    });\n  };\n\n  render() {\n    const {\n      prefixCls, className, focusable,\n      showLine,\n      children,\n    } = this.props;\n    const domProps = {};\n\n    // [Legacy] Commit: 0117f0c9db0e2956e92cb208f51a42387dfcb3d1\n    if (focusable) {\n      domProps.tabIndex = '0';\n      domProps.onKeyDown = this.onKeyDown;\n    }\n\n    return (\n      <ul\n        {...domProps}\n        className={classNames(prefixCls, className, {\n          [`${prefixCls}-show-line`]: showLine,\n        })}\n        role=\"tree-node\"\n        unselectable=\"on\"\n      >\n        {Children.map(children, this.renderTreeNode, this)}\n      </ul>\n    );\n  }\n}\n\nexport default Tree;\n"]}