05bbe0eb2b70f1b1295e264226792704
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.contextTypes = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _objectDestructuringEmpty2 = _interopRequireDefault(require("@babel/runtime/helpers/objectDestructuringEmpty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _warning = _interopRequireDefault(require("../../_util/warning"));

var _util = require("./util");

/**
 * Thought we still use `cloneElement` to pass `key`,
 * other props can pass with context for future refactor.
 */
var contextTypes = {
  rcTree: _propTypes["default"].shape({
    root: _propTypes["default"].object,
    prefixCls: _propTypes["default"].string,
    selectable: _propTypes["default"].bool,
    showIcon: _propTypes["default"].bool,
    icon: _propTypes["default"].oneOfType([_propTypes["default"].node, _propTypes["default"].func]),
    draggable: _propTypes["default"].bool,
    checkable: _propTypes["default"].oneOfType([_propTypes["default"].bool, _propTypes["default"].node]),
    checkStrictly: _propTypes["default"].bool,
    disabled: _propTypes["default"].bool,
    openTransitionName: _propTypes["default"].string,
    openAnimation: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object]),
    loadData: _propTypes["default"].func,
    filterTreeNode: _propTypes["default"].func,
    renderTreeNode: _propTypes["default"].func,
    isKeyChecked: _propTypes["default"].func,
    onNodeExpand: _propTypes["default"].func,
    onNodeSelect: _propTypes["default"].func,
    onNodeMouseEnter: _propTypes["default"].func,
    onNodeMouseLeave: _propTypes["default"].func,
    onNodeContextMenu: _propTypes["default"].func,
    onNodeDragStart: _propTypes["default"].func,
    onNodeDragEnter: _propTypes["default"].func,
    onNodeDragOver: _propTypes["default"].func,
    onNodeDragLeave: _propTypes["default"].func,
    onNodeDragEnd: _propTypes["default"].func,
    onNodeDrop: _propTypes["default"].func,
    onBatchNodeCheck: _propTypes["default"].func,
    onCheckConductFinished: _propTypes["default"].func
  })
};
exports.contextTypes = contextTypes;

var Tree =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(Tree, _Component);

  function Tree(_props) {
    var _this;

    (0, _classCallCheck2["default"])(this, Tree);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(Tree).call(this, _props));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onNodeDragStart", function (event, node) {
      var expandedKeys = _this.state.expandedKeys;
      var onDragStart = _this.props.onDragStart;
      var _node$props = node.props,
          eventKey = _node$props.eventKey,
          children = _node$props.children;
      _this.dragNode = node;

      _this.setState({
        dragNodesKeys: (0, _util.getDragNodesKeys)(children, node),
        expandedKeys: (0, _util.arrDel)(expandedKeys, eventKey)
      });

      if (onDragStart) {
        onDragStart({
          event: event,
          node: node
        });
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onNodeDragEnter", function (event, node) {
      var expandedKeys = _this.state.expandedKeys;
      var onDragEnter = _this.props.onDragEnter;
      var _node$props2 = node.props,
          pos = _node$props2.pos,
          eventKey = _node$props2.eventKey;
      var dropPosition = (0, _util.calcDropPosition)(event, node); // Skip if drag node is self

      if (_this.dragNode.props.eventKey === eventKey && dropPosition === 0) {
        _this.setState({
          dragOverNodeKey: '',
          dropPosition: null
        });

        return;
      } // Ref: https://github.com/react-component/tree/issues/132
      // Add timeout to let onDragLevel fire before onDragEnter,
      // so that we can clean drag props for onDragLeave node.
      // Macro task for this:
      // https://html.spec.whatwg.org/multipage/webappapis.html#clean-up-after-running-script


      setTimeout(function () {
        // Update drag over node
        _this.setState({
          dragOverNodeKey: eventKey,
          dropPosition: dropPosition
        }); // Side effect for delay drag


        if (!_this.delayedDragEnterLogic) {
          _this.delayedDragEnterLogic = {};
        }

        Object.keys(_this.delayedDragEnterLogic).forEach(function (key) {
          clearTimeout(_this.delayedDragEnterLogic[key]);
        });
        _this.delayedDragEnterLogic[pos] = setTimeout(function () {
          var newExpandedKeys = (0, _util.arrAdd)(expandedKeys, eventKey);

          _this.setState({
            expandedKeys: newExpandedKeys
          });

          if (onDragEnter) {
            onDragEnter({
              event: event,
              node: node,
              expandedKeys: newExpandedKeys
            });
          }
        }, 400);
      }, 0);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onNodeDragOver", function (event, node) {
      var onDragOver = _this.props.onDragOver;

      if (onDragOver) {
        onDragOver({
          event: event,
          node: node
        });
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onNodeDragLeave", function (event, node) {
      var onDragLeave = _this.props.onDragLeave;

      _this.setState({
        dragOverNodeKey: ''
      });

      if (onDragLeave) {
        onDragLeave({
          event: event,
          node: node
        });
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onNodeDragEnd", function (event, node) {
      var onDragEnd = _this.props.onDragEnd;

      _this.setState({
        dragOverNodeKey: ''
      });

      if (onDragEnd) {
        onDragEnd({
          event: event,
          node: node
        });
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onNodeDrop", function (event, node) {
      var _this$state = _this.state,
          dragNodesKeys = _this$state.dragNodesKeys,
          dropPosition = _this$state.dropPosition;
      var onDrop = _this.props.onDrop;
      var _node$props3 = node.props,
          eventKey = _node$props3.eventKey,
          pos = _node$props3.pos;

      _this.setState({
        dragOverNodeKey: '',
        dropNodeKey: eventKey
      });

      if (dragNodesKeys.indexOf(eventKey) !== -1) {
        (0, _warning["default"])(false, 'Can not drop to dragNode(include it\'s children node)');
        return;
      }

      var posArr = (0, _util.posToArr)(pos);
      var dropResult = {
        event: event,
        node: node,
        dragNode: _this.dragNode,
        dragNodesKeys: dragNodesKeys.slice(),
        dropPosition: dropPosition + Number(posArr[posArr.length - 1])
      };

      if (dropPosition !== 0) {
        dropResult.dropToGap = true;
      }

      if (onDrop) {
        onDrop(dropResult);
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onNodeSelect", function (e, treeNode) {
      var selectedKeys = _this.state.selectedKeys;
      var _this$props = _this.props,
          onSelect = _this$props.onSelect,
          multiple = _this$props.multiple,
          children = _this$props.children;
      var _treeNode$props = treeNode.props,
          selected = _treeNode$props.selected,
          eventKey = _treeNode$props.eventKey;
      var targetSelected = !selected; // Update selected keys

      if (!targetSelected) {
        selectedKeys = (0, _util.arrDel)(selectedKeys, eventKey);
      } else if (!multiple) {
        selectedKeys = [eventKey];
      } else {
        selectedKeys = (0, _util.arrAdd)(selectedKeys, eventKey);
      } // [Legacy] Not found related usage in doc or upper libs
      // [Legacy] TODO: add optimize prop to skip node process


      var selectedNodes = [];

      if (selectedKeys.length) {
        (0, _util.traverseTreeNodes)(children, function (_ref) {
          var node = _ref.node,
              key = _ref.key;

          if (selectedKeys.indexOf(key) !== -1) {
            selectedNodes.push(node);
          }
        });
      }

      _this.setUncontrolledState({
        selectedKeys: selectedKeys
      });

      if (onSelect) {
        var eventObj = {
          event: 'select',
          selected: targetSelected,
          node: treeNode,
          selectedNodes: selectedNodes
        };
        onSelect(selectedKeys, eventObj);
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onBatchNodeCheck", function (key, checked, halfChecked, startNode) {
      if (startNode) {
        _this.checkedBatch = {
          treeNode: startNode,
          checked: checked,
          list: []
        };
      } // This code should never called


      if (!_this.checkedBatch) {
        _this.checkedBatch = {
          list: []
        };
        (0, _warning["default"])(false, 'Checked batch not init. This should be a bug. Please fire a issue.');
      }

      _this.checkedBatch.list.push({
        key: key,
        checked: checked,
        halfChecked: halfChecked
      });
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onCheckConductFinished", function () {
      var _this$state2 = _this.state,
          checkedKeys = _this$state2.checkedKeys,
          halfCheckedKeys = _this$state2.halfCheckedKeys;
      var _this$props2 = _this.props,
          onCheck = _this$props2.onCheck,
          checkStrictly = _this$props2.checkStrictly,
          children = _this$props2.children; // Use map to optimize update speed

      var checkedKeySet = {};
      var halfCheckedKeySet = {};
      checkedKeys.forEach(function (key) {
        checkedKeySet[key] = true;
      });
      halfCheckedKeys.forEach(function (key) {
        halfCheckedKeySet[key] = true;
      }); // Batch process

      _this.checkedBatch.list.forEach(function (_ref2) {
        var key = _ref2.key,
            checked = _ref2.checked,
            halfChecked = _ref2.halfChecked;
        checkedKeySet[key] = checked;
        halfCheckedKeySet[key] = halfChecked;
      });

      var newCheckedKeys = Object.keys(checkedKeySet).filter(function (key) {
        return checkedKeySet[key];
      });
      var newHalfCheckedKeys = Object.keys(halfCheckedKeySet).filter(function (key) {
        return halfCheckedKeySet[key];
      }); // Trigger onChecked

      var selectedObj;
      var eventObj = {
        event: 'check',
        node: _this.checkedBatch.treeNode,
        checked: _this.checkedBatch.checked
      };

      if (checkStrictly) {
        selectedObj = (0, _util.getStrictlyValue)(newCheckedKeys, newHalfCheckedKeys); // [Legacy] TODO: add optimize prop to skip node process

        eventObj.checkedNodes = [];
        (0, _util.traverseTreeNodes)(children, function (_ref3) {
          var node = _ref3.node,
              key = _ref3.key;

          if (checkedKeySet[key]) {
            eventObj.checkedNodes.push(node);
          }
        });

        _this.setUncontrolledState({
          checkedKeys: newCheckedKeys
        });
      } else {
        selectedObj = newCheckedKeys; // [Legacy] TODO: add optimize prop to skip node process

        eventObj.checkedNodes = [];
        eventObj.checkedNodesPositions = []; // [Legacy] TODO: not in API

        eventObj.halfCheckedKeys = newHalfCheckedKeys; // [Legacy] TODO: not in API

        (0, _util.traverseTreeNodes)(children, function (_ref4) {
          var node = _ref4.node,
              pos = _ref4.pos,
              key = _ref4.key;

          if (checkedKeySet[key]) {
            eventObj.checkedNodes.push(node);
            eventObj.checkedNodesPositions.push({
              node: node,
              pos: pos
            });
          }
        });

        _this.setUncontrolledState({
          checkedKeys: newCheckedKeys,
          halfCheckedKeys: newHalfCheckedKeys
        });
      }

      if (onCheck) {
        onCheck(selectedObj, eventObj);
      } // Clean up


      _this.checkedBatch = null;
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onNodeExpand", function (e, treeNode) {
      var expandedKeys = _this.state.expandedKeys;
      var _this$props3 = _this.props,
          onExpand = _this$props3.onExpand,
          loadData = _this$props3.loadData;
      var _treeNode$props2 = treeNode.props,
          eventKey = _treeNode$props2.eventKey,
          expanded = _treeNode$props2.expanded; // Update selected keys

      var index = expandedKeys.indexOf(eventKey);
      var targetExpanded = !expanded;
      (0, _warning["default"])(expanded && index !== -1 || !expanded && index === -1, 'Expand state not sync with index check');

      if (targetExpanded) {
        expandedKeys = (0, _util.arrAdd)(expandedKeys, eventKey);
      } else {
        expandedKeys = (0, _util.arrDel)(expandedKeys, eventKey);
      }

      _this.setUncontrolledState({
        expandedKeys: expandedKeys
      });

      if (onExpand) {
        onExpand(expandedKeys, {
          node: treeNode,
          expanded: targetExpanded
        });
      } // Async Load data


      if (targetExpanded && loadData) {
        return loadData(treeNode).then(function () {
          // [Legacy] Refresh logic
          _this.setUncontrolledState({
            expandedKeys: expandedKeys
          });
        });
      }

      return null;
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onNodeMouseEnter", function (event, node) {
      var onMouseEnter = _this.props.onMouseEnter;

      if (onMouseEnter) {
        onMouseEnter({
          event: event,
          node: node
        });
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onNodeMouseLeave", function (event, node) {
      var onMouseLeave = _this.props.onMouseLeave;

      if (onMouseLeave) {
        onMouseLeave({
          event: event,
          node: node
        });
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onNodeContextMenu", function (event, node) {
      var onRightClick = _this.props.onRightClick;

      if (onRightClick) {
        event.preventDefault();
        onRightClick({
          event: event,
          node: node
        });
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "getSyncProps", function () {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var prevProps = arguments.length > 1 ? arguments[1] : undefined;
      var needSync = false;
      var newState = {};
      var myPrevProps = prevProps || {};

      function checkSync(name) {
        if (props[name] !== myPrevProps[name]) {
          needSync = true;
          return true;
        }

        return false;
      } // Children change will affect check box status.
      // And no need to check when prev props not provided


      if (prevProps && checkSync('children')) {
        var _ref5 = (0, _util.calcCheckedKeys)(props.checkedKeys || _this.state.checkedKeys, props) || {},
            _ref5$checkedKeys = _ref5.checkedKeys,
            checkedKeys = _ref5$checkedKeys === void 0 ? [] : _ref5$checkedKeys,
            _ref5$halfCheckedKeys = _ref5.halfCheckedKeys,
            halfCheckedKeys = _ref5$halfCheckedKeys === void 0 ? [] : _ref5$halfCheckedKeys;

        newState.checkedKeys = checkedKeys;
        newState.halfCheckedKeys = halfCheckedKeys;
      } // Re-calculate when autoExpandParent or expandedKeys changed


      if (prevProps && (checkSync('autoExpandParent') || checkSync('expandedKeys'))) {
        newState.expandedKeys = props.autoExpandParent ? (0, _util.calcExpandedKeys)(props.expandedKeys, props) : props.expandedKeys;
      }

      if (checkSync('selectedKeys')) {
        newState.selectedKeys = (0, _util.calcSelectedKeys)(props.selectedKeys, props);
      }

      if (checkSync('checkedKeys')) {
        var _ref6 = (0, _util.calcCheckedKeys)(props.checkedKeys, props) || {},
            _ref6$checkedKeys = _ref6.checkedKeys,
            _checkedKeys2 = _ref6$checkedKeys === void 0 ? [] : _ref6$checkedKeys,
            _ref6$halfCheckedKeys = _ref6.halfCheckedKeys,
            _halfCheckedKeys2 = _ref6$halfCheckedKeys === void 0 ? [] : _ref6$halfCheckedKeys;

        newState.checkedKeys = _checkedKeys2;
        newState.halfCheckedKeys = _halfCheckedKeys2;
      }

      return needSync ? newState : null;
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "setUncontrolledState", function (state) {
      var needSync = false;
      var newState = {};
      Object.keys(state).forEach(function (name) {
        if (name in _this.props) return;
        needSync = true;
        newState[name] = state[name];
      });

      _this.setState(needSync ? newState : null);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "isKeyChecked", function (key) {
      var _this$state$checkedKe = _this.state.checkedKeys,
          checkedKeys = _this$state$checkedKe === void 0 ? [] : _this$state$checkedKe;
      return checkedKeys.indexOf(key) !== -1;
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "renderTreeNode", function (child, index) {
      var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var _this$state3 = _this.state,
          _this$state3$expanded = _this$state3.expandedKeys,
          expandedKeys = _this$state3$expanded === void 0 ? [] : _this$state3$expanded,
          _this$state3$selected = _this$state3.selectedKeys,
          selectedKeys = _this$state3$selected === void 0 ? [] : _this$state3$selected,
          _this$state3$halfChec = _this$state3.halfCheckedKeys,
          halfCheckedKeys = _this$state3$halfChec === void 0 ? [] : _this$state3$halfChec,
          dragOverNodeKey = _this$state3.dragOverNodeKey,
          dropPosition = _this$state3.dropPosition;
      (0, _objectDestructuringEmpty2["default"])(_this.props);
      var pos = (0, _util.getPosition)(level, index);
      var key = child.key || pos;
      return (0, _react.cloneElement)(child, {
        eventKey: key,
        expanded: expandedKeys.indexOf(key) !== -1,
        selected: selectedKeys.indexOf(key) !== -1,
        checked: _this.isKeyChecked(key),
        halfChecked: halfCheckedKeys.indexOf(key) !== -1,
        pos: pos,
        // [Legacy] Drag props
        dragOver: dragOverNodeKey === key && dropPosition === 0,
        dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,
        dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1
      });
    });
    var defaultExpandAll = _props.defaultExpandAll,
        defaultExpandParent = _props.defaultExpandParent,
        defaultExpandedKeys = _props.defaultExpandedKeys,
        defaultCheckedKeys = _props.defaultCheckedKeys,
        defaultSelectedKeys = _props.defaultSelectedKeys,
        _expandedKeys = _props.expandedKeys; // Sync state with props

    var _ref7 = (0, _util.calcCheckedKeys)(defaultCheckedKeys, _props) || {},
        _ref7$checkedKeys = _ref7.checkedKeys,
        _checkedKeys = _ref7$checkedKeys === void 0 ? [] : _ref7$checkedKeys,
        _ref7$halfCheckedKeys = _ref7.halfCheckedKeys,
        _halfCheckedKeys = _ref7$halfCheckedKeys === void 0 ? [] : _ref7$halfCheckedKeys;

    var _state = {
      selectedKeys: (0, _util.calcSelectedKeys)(defaultSelectedKeys, _props),
      checkedKeys: _checkedKeys,
      halfCheckedKeys: _halfCheckedKeys
    };

    if (defaultExpandAll) {
      _state.expandedKeys = (0, _util.getFullKeyList)(_props.children);
    } else if (defaultExpandParent) {
      _state.expandedKeys = (0, _util.calcExpandedKeys)(_expandedKeys || defaultExpandedKeys, _props);
    } else {
      _state.expandedKeys = defaultExpandedKeys;
    }

    _this.state = (0, _objectSpread2["default"])({}, _state, {}, _this.getSyncProps(_props) || {}); // Cache for check status to optimize

    _this.checkedBatch = null;
    return _this;
  }

  (0, _createClass2["default"])(Tree, [{
    key: "getChildContext",
    value: function getChildContext() {
      var _this$props4 = this.props,
          prefixCls = _this$props4.prefixCls,
          selectable = _this$props4.selectable,
          showIcon = _this$props4.showIcon,
          icon = _this$props4.icon,
          draggable = _this$props4.draggable,
          checkable = _this$props4.checkable,
          checkStrictly = _this$props4.checkStrictly,
          disabled = _this$props4.disabled,
          loadData = _this$props4.loadData,
          filterTreeNode = _this$props4.filterTreeNode,
          openTransitionName = _this$props4.openTransitionName,
          openAnimation = _this$props4.openAnimation,
          switcherIcon = _this$props4.switcherIcon;
      return {
        rcTree: {
          // root: this,
          prefixCls: prefixCls,
          selectable: selectable,
          showIcon: showIcon,
          icon: icon,
          switcherIcon: switcherIcon,
          draggable: draggable,
          checkable: checkable,
          checkStrictly: checkStrictly,
          disabled: disabled,
          openTransitionName: openTransitionName,
          openAnimation: openAnimation,
          loadData: loadData,
          filterTreeNode: filterTreeNode,
          renderTreeNode: this.renderTreeNode,
          isKeyChecked: this.isKeyChecked,
          onNodeExpand: this.onNodeExpand,
          onNodeSelect: this.onNodeSelect,
          onNodeMouseEnter: this.onNodeMouseEnter,
          onNodeMouseLeave: this.onNodeMouseLeave,
          onNodeContextMenu: this.onNodeContextMenu,
          onNodeDragStart: this.onNodeDragStart,
          onNodeDragEnter: this.onNodeDragEnter,
          onNodeDragOver: this.onNodeDragOver,
          onNodeDragLeave: this.onNodeDragLeave,
          onNodeDragEnd: this.onNodeDragEnd,
          onNodeDrop: this.onNodeDrop,
          onBatchNodeCheck: this.onBatchNodeCheck,
          onCheckConductFinished: this.onCheckConductFinished
        }
      };
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      // React 16 will not trigger update if new state is null
      this.setState(this.getSyncProps(nextProps, this.props));
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props5 = this.props,
          prefixCls = _this$props5.prefixCls,
          className = _this$props5.className,
          focusable = _this$props5.focusable,
          showLine = _this$props5.showLine,
          children = _this$props5.children;
      var domProps = {}; // [Legacy] Commit: 0117f0c9db0e2956e92cb208f51a42387dfcb3d1

      if (focusable) {
        domProps.tabIndex = '0';
        domProps.onKeyDown = this.onKeyDown;
      }

      return _react["default"].createElement("ul", (0, _extends2["default"])({}, domProps, {
        className: (0, _classnames["default"])(prefixCls, className, (0, _defineProperty2["default"])({}, "".concat(prefixCls, "-show-line"), showLine)),
        role: "tree-node",
        unselectable: "on"
      }), _react.Children.map(children, this.renderTreeNode, this));
    }
  }]);
  return Tree;
}(_react.Component);

(0, _defineProperty2["default"])(Tree, "propTypes", {
  prefixCls: _propTypes["default"].string,
  className: _propTypes["default"].string,
  children: _propTypes["default"].any,
  showLine: _propTypes["default"].bool,
  showIcon: _propTypes["default"].bool,
  icon: _propTypes["default"].oneOfType([_propTypes["default"].node, _propTypes["default"].func]),
  focusable: _propTypes["default"].bool,
  selectable: _propTypes["default"].bool,
  disabled: _propTypes["default"].bool,
  multiple: _propTypes["default"].bool,
  checkable: _propTypes["default"].oneOfType([_propTypes["default"].bool, _propTypes["default"].node]),
  checkStrictly: _propTypes["default"].bool,
  draggable: _propTypes["default"].bool,
  defaultExpandParent: _propTypes["default"].bool,
  autoExpandParent: _propTypes["default"].bool,
  defaultExpandAll: _propTypes["default"].bool,
  defaultExpandedKeys: _propTypes["default"].arrayOf(_propTypes["default"].string),
  expandedKeys: _propTypes["default"].arrayOf(_propTypes["default"].string),
  defaultCheckedKeys: _propTypes["default"].arrayOf(_propTypes["default"].string),
  checkedKeys: _propTypes["default"].oneOfType([_propTypes["default"].arrayOf(_propTypes["default"].string), _propTypes["default"].object]),
  defaultSelectedKeys: _propTypes["default"].arrayOf(_propTypes["default"].string),
  selectedKeys: _propTypes["default"].arrayOf(_propTypes["default"].string),
  onExpand: _propTypes["default"].func,
  onCheck: _propTypes["default"].func,
  onSelect: _propTypes["default"].func,
  loadData: _propTypes["default"].func,
  onMouseEnter: _propTypes["default"].func,
  onMouseLeave: _propTypes["default"].func,
  onRightClick: _propTypes["default"].func,
  onDragStart: _propTypes["default"].func,
  onDragEnter: _propTypes["default"].func,
  onDragOver: _propTypes["default"].func,
  onDragLeave: _propTypes["default"].func,
  onDragEnd: _propTypes["default"].func,
  onDrop: _propTypes["default"].func,
  filterTreeNode: _propTypes["default"].func,
  openTransitionName: _propTypes["default"].string,
  openAnimation: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object]),
  switcherIcon: _propTypes["default"].oneOfType([_propTypes["default"].node, _propTypes["default"].func])
});
(0, _defineProperty2["default"])(Tree, "childContextTypes", contextTypes);
(0, _defineProperty2["default"])(Tree, "defaultProps", {
  prefixCls: 'rc-tree',
  showLine: false,
  showIcon: true,
  selectable: true,
  multiple: false,
  checkable: false,
  disabled: false,
  checkStrictly: false,
  draggable: false,
  defaultExpandParent: true,
  autoExpandParent: false,
  defaultExpandAll: false,
  defaultExpandedKeys: [],
  defaultCheckedKeys: [],
  defaultSelectedKeys: [],
  onExpand: null,
  onCheck: null,
  onSelect: null,
  onDragStart: null,
  onDragEnter: null,
  onDragOver: null,
  onDragLeave: null,
  onDrop: null,
  onDragEnd: null,
  onMouseEnter: null,
  onMouseLeave: null
});
var _default = Tree;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,