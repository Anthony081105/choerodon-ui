{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/upload/Upload.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { ReactNode } from 'react';\nimport PropTypes from 'prop-types';\nimport { action, observable, runInAction } from 'mobx';\nimport { observer } from 'mobx-react';\nimport omit from 'lodash/omit';\nimport Button from '../button/Button';\nimport { ButtonColor } from '../button/enum';\nimport autobind from '../_util/autobind';\nimport { FormField, FormFieldProps } from '../field/FormField';\nimport Icon from '../icon';\nimport message from '../message';\nimport Modal from '../modal';\nimport { UploadFile } from './interface';\nimport UploadList from './UploadList';\nimport Tooltip from '../tooltip/Tooltip';\nimport { $l } from '../locale-context';\n\n/**\n * 把XMLHttpRequest对象的返回信息转化为字符串\n *\n * @param {XMLHttpRequest} xhr\n * @returns {string}\n * @memberof Upload\n */\nfunction getResponse(xhr: XMLHttpRequest): string {\n  const res = xhr.responseText || xhr.response;\n  if (!res) {\n    return res;\n  }\n\n  try {\n    return JSON.parse(res).message;\n  } catch (e) {\n    return '';\n  }\n}\n\nexport interface UploadProps extends FormFieldProps {\n  /**\n   *  可接受的上传文件类型\n   */\n  accept?: string[];\n  /**\n   * 上传文件路径\n   */\n  action: string;\n  /**\n   * 上传所需参数或者返回上传参数的方法\n   */\n  data?: object | Function;\n  /**\n   * 设置上传的请求头部\n   */\n  headers?: any;\n  /**\n   * 是否支持多选文件\n   */\n  multiple?: boolean;\n  /**\n   * 是否在选择文件后立即上传\n   *\n   * @type {boolean}\n   * @memberof UploadProps\n   */\n  uploadImmediately?: boolean;\n  /**\n   * 组件右上角的帮助信息\n   *\n   * @type {ReactNode}\n   * @memberof UploadProps\n   */\n  extra?: ReactNode;\n  /**\n   * input元素内已选择文件变化的回调\n   *\n   * @memberof UploadProps\n   */\n  onFileChange?: (fileList: UploadFile[]) => void;\n  /**\n   * 上传进度变化的回调\n   *\n   * @memberof UploadProps\n   */\n  onUploadProgress?: (percent: number, file: UploadFile) => void;\n  /**\n   * 上传成功的回调\n   *\n   * @memberof UploadProps\n   */\n  onUploadSuccess?: (response: any, file: UploadFile) => void;\n  /**\n   * 上传出错的回调\n   *\n   * @memberof UploadProps\n   */\n  onUploadError?: (error: Error, response: any, file: UploadFile) => void;\n  /**\n   * 文件上传队列的最大长度，0表示不限制\n   *\n   * @type {number}\n   * @memberof UploadProps\n   */\n  fileListMaxLength?: number;\n  /**\n   * 控制图片预览的配置对象\n   *\n   * @type {boolean}\n   * @memberof UploadProps\n   */\n  showPreviewImage?: boolean;\n  /**\n   * 预览图片的宽度\n   *\n   * @type {number}\n   * @memberof UploadProps\n   */\n  previewImageWidth?: number;\n  /**\n   * 是否显示上传按钮\n   *\n   * @type {boolean}\n   * @memberof UploadProps\n   */\n  showUploadBtn?: boolean;\n  /**\n   * 是否显示上传列表\n   *\n   * @type {boolean}\n   * @memberof UploadProps\n   */\n  showUploadList?: boolean;\n}\n\n@observer\nexport default class Upload extends FormField<UploadProps> {\n  static displayName = 'Upload';\n\n  static propTypes = {\n    /**\n     * 可接受的上传文件类型\n     * 可选值: MIME类型字符串组成的数组\n     */\n    accept: PropTypes.arrayOf(PropTypes.string),\n    /**\n     * 上传文件路径\n     */\n    action: PropTypes.string,\n    /**\n     * 上传所需参数或者返回上传参数的方法\n     * @default\n     * {}\n     */\n    data: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n    /**\n     * 设置上传的请求头部\n     * @default\n     * {}\n     */\n    headers: PropTypes.object,\n    /**\n     * 是否支持多选文件\n     * @default\n     * false\n     */\n    multiple: PropTypes.bool,\n    uploadImmediately: PropTypes.bool,\n    fileListMaxLength: PropTypes.number,\n    showPreviewImage: PropTypes.bool,\n    previewImageWidth: PropTypes.number,\n    extra: PropTypes.any,\n    onFileChange: PropTypes.func,\n    onUploadProgress: PropTypes.func,\n    onUploadSuccess: PropTypes.func,\n    onUploadError: PropTypes.func,\n    showUploadBtn: PropTypes.bool,\n    showUploadList: PropTypes.bool,\n    ...FormField.propTypes,\n  };\n\n  static defaultProps = {\n    ...FormField.defaultProps,\n    suffixCls: 'upload',\n    multiple: false,\n    headers: {},\n    data: {},\n    action: '',\n    name: 'file',\n    uploadImmediately: true,\n    fileListMaxLength: 0,\n    showPreviewImage: true,\n    previewImageWidth: 100,\n    showUploadBtn: true,\n    showUploadList: true,\n    onUploadSuccess: () => message.success($l('Upload', 'upload_success')),\n    onUploadError: () => message.error($l('Upload', 'upload_failure')),\n  };\n\n  /**\n   * 保存上传的文件对象\n   *\n   * 若直接传递，浏览器会认为它是Mobx对象，因此有时需要手动复制并传值调用\n   *\n   * @type {UploadFile[]}\n   * @memberof Upload\n   */\n  @observable fileList: UploadFile[];\n\n  /**\n   * 原生<input>元素的引用\n   *\n   * @private\n   * @type {HTMLInputElement}\n   * @memberof Upload\n   */\n  private nativeInputElement: HTMLInputElement;\n\n  constructor(props, context) {\n    super(props, context);\n    runInAction(() => {\n      this.fileList = [];\n    });\n  }\n\n  getOtherProps() {\n    const otherProps = omit(super.getOtherProps(), [\n      'accept',\n      'action',\n      'data',\n      'header',\n      'multiple',\n      'onChange',\n      'ref',\n      'uploadImmediately',\n      'fileListMaxLength',\n      'showPreviewImage',\n      'previewImageWidth',\n      'showUploadBtn',\n      'showUploadList',\n      'onUploadSuccess',\n      'onUploadError',\n      'onFileChange',\n    ]);\n    return otherProps;\n  }\n\n  saveNativeInputElement = elem => (this.nativeInputElement = elem);\n\n  /**\n   * 传递包装按钮的点击事件\n   *\n   */\n  handleWrapperBtnClick = () => {\n    this.nativeInputElement.click();\n  };\n\n  render() {\n    const {\n      prefixCls,\n      props: {\n        action: formAction,\n        children,\n        multiple,\n        accept,\n        name = 'file', // <-- convince ts\n        uploadImmediately,\n        showPreviewImage,\n        previewImageWidth,\n        showUploadBtn,\n        showUploadList,\n        extra,\n      },\n    } = this;\n\n    const uploadProps = {\n      multiple,\n      accept: accept ? accept.join(',') : undefined,\n      action: formAction,\n      name,\n      type: 'file',\n      ref: this.saveNativeInputElement,\n      onChange: this.handleChange,\n      ...this.getOtherProps(),\n    };\n\n    const inputWrapperBtn = [\n      <Button key=\"upload-btn\" onClick={this.handleWrapperBtnClick}>\n        <Icon type=\"insert_drive_file\" />\n        <span>{children || $l('Upload', 'file_selection')}</span>\n      </Button>,\n      <input key=\"upload\" {...uploadProps} hidden />,\n    ];\n\n    const uploadBtn = (\n      <Tooltip title={$l('Upload', 'click_to_upload')} placement=\"right\">\n        <Button color={ButtonColor.primary} onClick={this.handleUploadBtnClick}>\n          <Icon type=\"file_upload\" />\n        </Button>\n      </Tooltip>\n    );\n\n    return (\n      <div className={`${prefixCls}`}>\n        <div className=\"flex-wrapper\">\n          <div className={`${prefixCls}-select`}>\n            {inputWrapperBtn}\n            {!uploadImmediately && showUploadBtn ? uploadBtn : null}\n          </div>\n          <div>{extra}</div>\n        </div>\n        {showUploadList ? (\n          <UploadList\n            previewImageWidth={previewImageWidth as number}\n            showPreviewImage={showPreviewImage as boolean}\n            items={[...this.fileList]}\n            remove={this.handleRemove}\n          />\n        ) : null}\n      </div>\n    );\n  }\n\n  handleUploadBtnClick = () => {\n    this.startUpload();\n  };\n\n  startUpload = () => {\n    const fileList = [...this.fileList];\n    if (fileList.length) {\n      // <-- 当有文件时才上传\n      this.uploadFiles(fileList);\n      this.nativeInputElement.value = '';\n    } else {\n      Modal.error($l('Upload', 'no_file'));\n    }\n  };\n\n  /**\n   * 处理<input type=\"file\">元素的change事件，\n   * 主要是取出事件对象中的files对象并传递给uploadFiles方法\n   *\n   * @param {*} e <input>元素的change事件对象\n   * @memberof Upload\n   */\n  @autobind\n  @action\n  handleChange(e: any) {\n    const fileList = e.target.files;\n    const files = Array.from(fileList).slice(0);\n    this.fileList = [];\n    const fileBuffer: UploadFile[] = [];\n    files.forEach((file: UploadFile, index: number) => {\n      file.uid = this.getUid(index);\n      file.url = URL.createObjectURL(file);\n      fileBuffer.push(file);\n    });\n    this.fileList = fileBuffer;\n    e.target.value = '';\n\n    const { uploadImmediately, onFileChange } = this.props;\n    if (uploadImmediately) {\n      this.uploadFiles(this.fileList);\n    }\n    if (onFileChange) {\n      onFileChange(this.fileList.slice());\n    }\n  }\n\n  /**\n   * 分别上传fileList中的每个文件对象\n   *\n   * @param {UploadFile[]} fileList 文件对象数组\n   * @returns {void}\n   * @memberof Upload\n   */\n  @autobind\n  uploadFiles(fileList: UploadFile[]): void {\n    const {\n      action: formAction,\n      accept,\n      fileListMaxLength = 0, // <-- convince ts\n    } = this.props;\n    if (!formAction) {\n      Modal.error($l('Upload', 'upload_path_unset'));\n      return;\n    }\n    if (!this.isAcceptFiles(fileList)) {\n      Modal.error($l('Upload', 'not_acceptable_prompt') + accept!.join(','));\n      return;\n    }\n    if (fileListMaxLength !== 0 && this.fileList.length > fileListMaxLength) {\n      Modal.error(`${$l('Upload', 'file_list_max_length')}: ${fileListMaxLength}`);\n      return;\n    }\n    const files = Array.from(fileList).slice(0);\n    const that = this;\n    files.forEach((file: UploadFile, index: number) => {\n      file.uid = this.getUid(index);\n      setTimeout(function() {\n        // that.handleStart(file);\n        that.upload(file);\n      }, 0);\n    });\n  }\n\n  /**\n   * 上传每个文件对象\n   *\n   * @param {*} file\n   * @returns {void}\n   * @memberof Upload\n   */\n  @autobind\n  upload(file: any): void {\n    const { data, action: formAction, headers, name: filename } = this.props;\n    if (typeof XMLHttpRequest === 'undefined') {\n      return;\n    }\n    const xhr = new XMLHttpRequest();\n    const formData = new FormData();\n\n    // 修改文件状态，方便UploadList判断是否展示进度条\n    file.status = 'uploading';\n\n    if (xhr.upload) {\n      xhr.upload.onprogress = e => {\n        let percent = 0;\n        if (e.total > 0) {\n          percent = (e.loaded / e.total) * 100;\n        }\n        this.handleProgress(percent, file);\n      };\n    }\n    if (data) {\n      const newData = typeof data === 'function' ? data(file) : data;\n      Object.keys(newData).forEach(key => formData.append(key, newData[key]));\n    }\n    // TODO: `filename` default value needs better implementation\n    formData.append(filename || 'file', file);\n    const errorMsg = `cannot post ${formAction} ${xhr.status}`;\n    xhr.open('post', formAction, true);\n    xhr.onload = () => {\n      // 以二开头的状态码都认为是成功，暂定？\n      const isSuccessful = xhr.status.toString().startsWith('2');\n      if (isSuccessful) {\n        this.handleSuccess(xhr.status, xhr.response, file);\n      } else {\n        this.handleError(new Error(errorMsg), getResponse(xhr), xhr.response, file);\n      }\n    };\n    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n    if (headers !== undefined) {\n      Object.keys(headers).forEach(key => {\n        if ({}.hasOwnProperty.call(headers, key)) {\n          xhr.setRequestHeader(key, headers[key]);\n        }\n      });\n    }\n    xhr.send(formData);\n    xhr.onerror = () => {\n      this.handleError(new Error(errorMsg), getResponse(xhr), xhr.response, file);\n    };\n    xhr.ontimeout = () => {\n      const timeoutMsg = `The request post for ${action} timed out`;\n      this.handleError(new Error(timeoutMsg), getResponse(xhr), xhr.response, file);\n    };\n  }\n\n  /**\n   * 处理上传成功的函数，根据结果设置文件对象的状态，\n   * 用于在UploadList中的展示\n   *\n   * @param {number} status HTTP状态码\n   * @param {string} response 响应对象\n   * @param {UploadFile} file 文件对象\n   * @returns\n   */\n  @action\n  handleSuccess(status: number, response: any, file: UploadFile) {\n    const targetItem = this.getFileItem(file);\n    if (targetItem) {\n      const { onUploadSuccess } = this.props;\n      targetItem.status = status === 200 ? 'success' : 'done';\n      targetItem.response = response;\n      if (onUploadSuccess) {\n        onUploadSuccess(response, file);\n      }\n      this.forceUpdate();\n    }\n  }\n\n  /**\n   * 处理上传进度变化的函数，更新文件对象中的percent值，\n   * 用于在UploadList中展示\n   *\n   * @param {number} percent 上传百分比\n   * @param {UploadFile} file 文件对象\n   * @returns\n   */\n  @action\n  handleProgress(percent: number, file: UploadFile) {\n    const { onUploadProgress } = this.props;\n    const targetItem = this.getFileItem(file);\n    if (targetItem) {\n      targetItem.percent = percent;\n      if (onUploadProgress) {\n        onUploadProgress(percent, file);\n      }\n      this.forceUpdate();\n    }\n  }\n\n  /**\n   * 处理上传出错的函数，用于设置文件对象的status值，\n   *\n   * @param {Error} error 错误对象\n   * @param {string} responseText 处理成字符串的响应对象\n   * @param {UploadFile} file 文件对象\n   * @returns\n   */\n  @action\n  handleError(error: Error, responseText: string, response: any, file: UploadFile) {\n    const { onUploadError } = this.props;\n    const targetItem = this.getFileItem(file);\n    if (targetItem) {\n      targetItem.status = 'error';\n      targetItem.error = error;\n      targetItem.response = responseText;\n      if (onUploadError) {\n        onUploadError(error, response, file);\n      }\n      this.forceUpdate();\n    }\n  }\n\n  handleRemove = (file: UploadFile) => {\n    this.removeFileItem(file);\n  };\n\n  /**\n   * 判断文件后缀名是否合格\n   * this.props.accept值为falsy时返回true，否则正常判断\n   *\n   * @param {UploadFile[]} fileList 文件对象数组\n   * @returns {boolean}\n   * @memberof Upload\n   */\n  isAcceptFiles(fileList: UploadFile[]): boolean {\n    const { accept } = this.props;\n    if (!accept) {\n      return true;\n    }\n    const acceptTypes = accept.map(type => {\n      type = type.replace(/\\./g, '\\\\.');\n      type = type.replace(/\\*/g, '.*');\n      return new RegExp(type);\n    });\n    return fileList.some(({ name, type }) =>\n      acceptTypes.some(acceptType => acceptType.test(name) || acceptType.test(type)),\n    );\n  }\n\n  /**\n   * 使用日期获取一个uid\n   *\n   * @param {number} index 索引\n   * @returns {string}\n   * @memberof Upload\n   */\n  getUid(index: number): string {\n    const { prefixCls } = this;\n    const now = new Date();\n    return `${prefixCls}-${now}-${index}`;\n  }\n\n  /**\n   * 从文件对象数组中获取一个文件对象的引用，\n   * 首先尝试通过uid属性匹配文件对象，若失败则尝试name\n   *\n   * @param {UploadFile} file\n   * @param {UploadFile[]} fileList 文件对象数组\n   * @returns {UploadFile}\n   * @memberof Upload\n   */\n  getFileItem(file: UploadFile): UploadFile | undefined {\n    const matchKey = file.uid !== undefined ? 'uid' : 'name';\n    return this.fileList.find(item => item[matchKey] === file[matchKey]);\n  }\n\n  /**\n   * 从文件对象数组中移除一个文件对象，\n   * 首先尝试通过uid属性匹配文件对象，若失败则尝试name\n   *\n   * @param {UploadFile} file\n   * @param {UploadFile[]} fileList\n   * @returns {UploadFile[]}\n   * @memberof Upload\n   */\n  @action\n  removeFileItem(file: UploadFile): void {\n    const { fileList } = this;\n    const matchKey = file.uid !== undefined ? 'uid' : 'name';\n    const index = fileList.findIndex(item => item[matchKey] === file[matchKey]);\n    fileList.splice(index, 1);\n  }\n}\n"]}