{"version":3,"sources":["tabs/InkTabBarMixin.jsx"],"names":["isDev","process","ret","w","top","method","d","doc","elem","body","docElem","box","x","y","getScroll","left","styles","component","rootNode","wrapNode","containerOffset","offset","inkBarNode","activeTab","inkBarNodeStyle","tabBarPosition","tabNode","tabOffset","transformSupported","width","parseFloat","height","getDefaultProps","inkBarAnimated","componentDidUpdate","componentDidMount","setTimeout","componentWillUnmount","clearTimeout","getInkBarNode","prefixCls","className","classes"],"mappings":"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","sourcesContent":["import { isTransformSupported, setTransform } from './utils';\nimport React from 'react';\nimport classnames from 'classnames';\n\nconst isDev = process.env.NODE_ENV !== 'production';\n\nexport function getScroll(w, top) {\n  let ret = w[`page${top ? 'Y' : 'X'}Offset`];\n  const method = `scroll${top ? 'Top' : 'Left'}`;\n  if (typeof ret !== 'number') {\n    const d = w.document;\n    // ie6,7,8 standard mode\n    ret = d.documentElement[method];\n    if (typeof ret !== 'number') {\n      // quirks mode\n      ret = d.body[method];\n    }\n  }\n  return ret;\n}\n\nfunction offset(elem) {\n  let box;\n  let x;\n  let y;\n  const doc = elem.ownerDocument;\n  const body = doc.body;\n  const docElem = doc && doc.documentElement;\n  box = elem.getBoundingClientRect();\n  x = box.left;\n  y = box.top;\n  x -= docElem.clientLeft || body.clientLeft || 0;\n  y -= docElem.clientTop || body.clientTop || 0;\n  const w = doc.defaultView || doc.parentWindow;\n  x += getScroll(w);\n  y += getScroll(w, true);\n  return {\n    left: x, top: y,\n  };\n}\n\nfunction componentDidUpdate(component, init) {\n  const { styles } = component.props;\n  const rootNode = component.root;\n  const wrapNode = component.nav || rootNode;\n  const containerOffset = offset(wrapNode);\n  const inkBarNode = component.inkBar;\n  const activeTab = component.activeTab;\n  const inkBarNodeStyle = inkBarNode.style;\n  const tabBarPosition = component.props.tabBarPosition;\n  if (init) {\n    // prevent mount animation\n    inkBarNodeStyle.display = 'none';\n  }\n  if (activeTab) {\n    const tabNode = activeTab;\n    const tabOffset = offset(tabNode);\n    const transformSupported = isTransformSupported(inkBarNodeStyle);\n    if (tabBarPosition === 'top' || tabBarPosition === 'bottom') {\n      let left = tabOffset.left - containerOffset.left;\n      let width = tabNode.offsetWidth;\n\n      // If tabNode'width width equal to wrapNode'width when tabBarPosition is top or bottom\n      // It means no css working, then ink bar should not have width until css is loaded\n      if (width === rootNode.offsetWidth) {\n        width = 0;\n      } else if (styles.inkBar && styles.inkBar.width !== undefined) {\n        width = parseFloat(styles.inkBar.width, 10);\n        if (width) {\n          left = left + (tabNode.offsetWidth - width) / 2;\n        }\n      }\n      // use 3d gpu to optimize render\n      if (transformSupported) {\n        setTransform(inkBarNodeStyle, `translate3d(${left}px,0,0)`);\n        inkBarNodeStyle.width = `${width}px`;\n        inkBarNodeStyle.height = '';\n      } else {\n        inkBarNodeStyle.left = `${left}px`;\n        inkBarNodeStyle.top = '';\n        inkBarNodeStyle.bottom = '';\n        inkBarNodeStyle.right = `${wrapNode.offsetWidth - left - width}px`;\n      }\n    } else {\n      let top = tabOffset.top - containerOffset.top;\n      let height = tabNode.offsetHeight;\n      if (styles.inkBar && styles.inkBar.height !== undefined) {\n        height = parseFloat(styles.inkBar.height, 10);\n        if (height) {\n          top = top + (tabNode.offsetHeight - height) / 2;\n        }\n      }\n      if (transformSupported) {\n        setTransform(inkBarNodeStyle, `translate3d(0,${top}px,0)`);\n        inkBarNodeStyle.height = `${height}px`;\n        inkBarNodeStyle.width = '';\n      } else {\n        inkBarNodeStyle.left = '';\n        inkBarNodeStyle.right = '';\n        inkBarNodeStyle.top = `${top}px`;\n        inkBarNodeStyle.bottom = `${wrapNode.offsetHeight - top - height}px`;\n      }\n    }\n  }\n  inkBarNodeStyle.display = activeTab ? 'block' : 'none';\n}\n\nexport default {\n  getDefaultProps() {\n    return {\n      inkBarAnimated: true,\n    };\n  },\n\n  componentDidUpdate() {\n    componentDidUpdate(this);\n  },\n\n  componentDidMount() {\n    if (isDev) {\n      this.timeout = setTimeout(() => {\n        componentDidUpdate(this, true);\n      }, 0);\n    } else {\n      componentDidUpdate(this, true);\n    }\n  },\n\n  componentWillUnmount() {\n    clearTimeout(this.timeout);\n  },\n\n  getInkBarNode() {\n    const { prefixCls, styles, inkBarAnimated } = this.props;\n    const className = `${prefixCls}-ink-bar`;\n    const classes = classnames({\n      [className]: true,\n      [\n        inkBarAnimated ?\n          `${className}-animated` :\n          `${className}-no-animated`\n        ]: true,\n    });\n    return (\n      <div\n        style={styles.inkBar}\n        className={classes}\n        key=\"inkBar\"\n        ref={this.saveRef('inkBar')}\n      />\n    );\n  },\n};\n"]}