7a352ef1ebb0e82303979fefda975139
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.nodeContextTypes = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _warning = _interopRequireDefault(require("../../_util/warning"));

var _animate = _interopRequireDefault(require("../../animate"));

var _toArray = _interopRequireDefault(require("../util/Children/toArray"));

var _Tree = require("./Tree");

var _progress = _interopRequireDefault(require("../../progress"));

var _util = require("./util");

var ICON_OPEN = 'open';
var ICON_CLOSE = 'close';
var LOAD_STATUS_NONE = 0;
var LOAD_STATUS_LOADING = 1;
var LOAD_STATUS_LOADED = 2;
var LOAD_STATUS_FAILED = 0; // Action align, let's make failed same as init.

var defaultTitle = '---';
var onlyTreeNodeWarned = false; // Only accept TreeNode

var nodeContextTypes = (0, _objectSpread2["default"])({}, _Tree.contextTypes, {
  rcTreeNode: _propTypes["default"].shape({
    onUpCheckConduct: _propTypes["default"].func
  })
});
exports.nodeContextTypes = nodeContextTypes;

var TreeNode =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(TreeNode, _Component);

  function TreeNode(_props) {
    var _this;

    (0, _classCallCheck2["default"])(this, TreeNode);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(TreeNode).call(this, _props));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onUpCheckConduct", function (treeNode, nodeChecked, nodeHalfChecked) {
      var nodePos = treeNode.props.pos;
      var _this$props = _this.props,
          eventKey = _this$props.eventKey,
          pos = _this$props.pos,
          checked = _this$props.checked,
          halfChecked = _this$props.halfChecked;
      var _this$context = _this.context,
          _this$context$rcTree = _this$context.rcTree,
          checkStrictly = _this$context$rcTree.checkStrictly,
          isKeyChecked = _this$context$rcTree.isKeyChecked,
          onBatchNodeCheck = _this$context$rcTree.onBatchNodeCheck,
          onCheckConductFinished = _this$context$rcTree.onCheckConductFinished,
          _this$context$rcTreeN = _this$context.rcTreeNode;
      _this$context$rcTreeN = _this$context$rcTreeN === void 0 ? {} : _this$context$rcTreeN;
      var onUpCheckConduct = _this$context$rcTreeN.onUpCheckConduct; // Stop conduct when current node is disabled

      if ((0, _util.isCheckDisabled)((0, _assertThisInitialized2["default"])(_this))) {
        onCheckConductFinished();
        return;
      }

      var children = _this.getNodeChildren();

      var checkedCount = nodeChecked ? 1 : 0; // Statistic checked count

      children.forEach(function (node, index) {
        var childPos = (0, _util.getPosition)(pos, index);

        if (nodePos === childPos || (0, _util.isCheckDisabled)(node)) {
          return;
        }

        if (isKeyChecked(node.key || childPos)) {
          checkedCount += 1;
        }
      }); // Static enabled children count

      var enabledChildrenCount = children.filter(function (node) {
        return !(0, _util.isCheckDisabled)(node);
      }).length; // checkStrictly will not conduct check status

      var nextChecked = checkStrictly ? checked : enabledChildrenCount === checkedCount;
      var nextHalfChecked = checkStrictly ? // propagated or child checked
      halfChecked : nodeHalfChecked || checkedCount > 0 && !nextChecked; // Add into batch update

      if (checked !== nextChecked || halfChecked !== nextHalfChecked) {
        onBatchNodeCheck(eventKey, nextChecked, nextHalfChecked);

        if (onUpCheckConduct) {
          onUpCheckConduct((0, _assertThisInitialized2["default"])(_this), nextChecked, nextHalfChecked);
        } else {
          // Flush all the update
          onCheckConductFinished();
        }
      } else {
        // Flush all the update
        onCheckConductFinished();
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onDownCheckConduct", function (nodeChecked) {
      var children = _this.props.children;
      var _this$context$rcTree2 = _this.context.rcTree,
          checkStrictly = _this$context$rcTree2.checkStrictly,
          isKeyChecked = _this$context$rcTree2.isKeyChecked,
          onBatchNodeCheck = _this$context$rcTree2.onBatchNodeCheck;
      if (checkStrictly) return;
      (0, _util.traverseTreeNodes)(children, function (_ref) {
        var node = _ref.node,
            key = _ref.key;
        if ((0, _util.isCheckDisabled)(node)) return false;

        if (nodeChecked !== isKeyChecked(key)) {
          onBatchNodeCheck(key, nodeChecked, false);
        }
      });
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onSelectorClick", function (e) {
      if (_this.isSelectable()) {
        _this.onSelect(e);
      } else {
        _this.onCheck(e);
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onSelect", function (e) {
      if (_this.isDisabled()) return;
      var onNodeSelect = _this.context.rcTree.onNodeSelect;
      e.preventDefault();
      onNodeSelect(e, (0, _assertThisInitialized2["default"])(_this));
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onCheck", function (e) {
      if (_this.isDisabled()) return;
      var _this$props2 = _this.props,
          disableCheckbox = _this$props2.disableCheckbox,
          checked = _this$props2.checked,
          eventKey = _this$props2.eventKey;
      var _this$context2 = _this.context,
          _this$context2$rcTree = _this$context2.rcTree,
          checkable = _this$context2$rcTree.checkable,
          onBatchNodeCheck = _this$context2$rcTree.onBatchNodeCheck,
          onCheckConductFinished = _this$context2$rcTree.onCheckConductFinished,
          _this$context2$rcTree2 = _this$context2.rcTreeNode;
      _this$context2$rcTree2 = _this$context2$rcTree2 === void 0 ? {} : _this$context2$rcTree2;
      var onUpCheckConduct = _this$context2$rcTree2.onUpCheckConduct;
      if (!checkable || disableCheckbox) return;
      e.preventDefault();
      var targetChecked = !checked;
      onBatchNodeCheck(eventKey, targetChecked, false, (0, _assertThisInitialized2["default"])(_this)); // Children conduct

      _this.onDownCheckConduct(targetChecked); // Parent conduct


      if (onUpCheckConduct) {
        onUpCheckConduct((0, _assertThisInitialized2["default"])(_this), targetChecked, false);
      } else {
        onCheckConductFinished();
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onMouseEnter", function (e) {
      var onNodeMouseEnter = _this.context.rcTree.onNodeMouseEnter;
      onNodeMouseEnter(e, (0, _assertThisInitialized2["default"])(_this));
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onMouseLeave", function (e) {
      var onNodeMouseLeave = _this.context.rcTree.onNodeMouseLeave;
      onNodeMouseLeave(e, (0, _assertThisInitialized2["default"])(_this));
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onContextMenu", function (e) {
      var onNodeContextMenu = _this.context.rcTree.onNodeContextMenu;
      onNodeContextMenu(e, (0, _assertThisInitialized2["default"])(_this));
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onDragStart", function (e) {
      var onNodeDragStart = _this.context.rcTree.onNodeDragStart;
      e.stopPropagation();

      _this.setState({
        dragNodeHighlight: true
      });

      onNodeDragStart(e, (0, _assertThisInitialized2["default"])(_this));

      try {
        // ie throw error
        // firefox-need-it
        e.dataTransfer.setData('text/plain', '');
      } catch (error) {// empty
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onDragEnter", function (e) {
      var onNodeDragEnter = _this.context.rcTree.onNodeDragEnter;
      e.preventDefault();
      e.stopPropagation();
      onNodeDragEnter(e, (0, _assertThisInitialized2["default"])(_this));
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onDragOver", function (e) {
      var onNodeDragOver = _this.context.rcTree.onNodeDragOver;
      e.preventDefault();
      e.stopPropagation();
      onNodeDragOver(e, (0, _assertThisInitialized2["default"])(_this));
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onDragLeave", function (e) {
      var onNodeDragLeave = _this.context.rcTree.onNodeDragLeave;
      e.stopPropagation();
      onNodeDragLeave(e, (0, _assertThisInitialized2["default"])(_this));
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onDragEnd", function (e) {
      var onNodeDragEnd = _this.context.rcTree.onNodeDragEnd;
      e.stopPropagation();

      _this.setState({
        dragNodeHighlight: false
      });

      onNodeDragEnd(e, (0, _assertThisInitialized2["default"])(_this));
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onDrop", function (e) {
      var onNodeDrop = _this.context.rcTree.onNodeDrop;
      e.preventDefault();
      e.stopPropagation();

      _this.setState({
        dragNodeHighlight: false
      });

      onNodeDrop(e, (0, _assertThisInitialized2["default"])(_this));
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onExpand", function (e) {
      var onNodeExpand = _this.context.rcTree.onNodeExpand;
      var callbackPromise = onNodeExpand(e, (0, _assertThisInitialized2["default"])(_this)); // Promise like

      if (callbackPromise && callbackPromise.then) {
        _this.setState({
          loadStatus: LOAD_STATUS_LOADING
        });

        callbackPromise.then(function () {
          _this.setState({
            loadStatus: LOAD_STATUS_LOADED
          });
        })["catch"](function () {
          _this.setState({
            loadStatus: LOAD_STATUS_FAILED
          });
        });
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "setSelectHandle", function (node) {
      _this.selectHandle = node;
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "getNodeState", function () {
      var expanded = _this.props.expanded;

      if (_this.isLeaf()) {
        return null;
      }

      return expanded ? ICON_OPEN : ICON_CLOSE;
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "isLeaf", function () {
      var loadStatus = _this.state.loadStatus;
      var _this$props3 = _this.props,
          isLeaf = _this$props3.isLeaf,
          _this$props3$hasChild = _this$props3.hasChildren,
          hasChildren = _this$props3$hasChild === void 0 ? _this.getNodeChildren().length !== 0 : _this$props3$hasChild;
      var loadData = _this.context.rcTree.loadData;
      return isLeaf || !loadData && !hasChildren || loadData && loadStatus === LOAD_STATUS_LOADED && !hasChildren;
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "isDisabled", function () {
      var disabled = _this.props.disabled;
      var treeDisabled = _this.context.rcTree.disabled; // Follow the logic of Selectable

      if (disabled === false) {
        return false;
      }

      return !!(treeDisabled || disabled);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "syncLoadData", function (props) {
      var loadStatus = _this.state.loadStatus;
      var expanded = props.expanded;
      var loadData = _this.context.rcTree.loadData;

      if (loadData && loadStatus === LOAD_STATUS_NONE && expanded && !_this.isLeaf()) {
        _this.setState({
          loadStatus: LOAD_STATUS_LOADING
        });

        loadData((0, _assertThisInitialized2["default"])(_this)).then(function () {
          _this.setState({
            loadStatus: LOAD_STATUS_LOADED
          });
        })["catch"](function () {
          _this.setState({
            loadStatus: LOAD_STATUS_FAILED
          });
        });
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "renderSwitcher", function () {
      var _this$props4 = _this.props,
          expanded = _this$props4.expanded,
          switcherIconFromProps = _this$props4.switcherIcon;
      var _this$context$rcTree3 = _this.context.rcTree,
          prefixCls = _this$context$rcTree3.prefixCls,
          switcherIconFromCtx = _this$context$rcTree3.switcherIcon;
      var switcherIcon = switcherIconFromProps || switcherIconFromCtx;

      if (_this.isLeaf()) {
        return _react["default"].createElement("span", {
          className: (0, _classnames["default"])("".concat(prefixCls, "-switcher"), "".concat(prefixCls, "-switcher-noop"))
        }, typeof switcherIcon === 'function' ? switcherIcon((0, _objectSpread2["default"])({}, _this.props, {
          isLeaf: true
        })) : switcherIcon);
      }

      var switcherCls = (0, _classnames["default"])("".concat(prefixCls, "-switcher"), "".concat(prefixCls, "-switcher_").concat(expanded ? ICON_OPEN : ICON_CLOSE));
      return _react["default"].createElement("span", {
        onClick: _this.onExpand,
        className: switcherCls
      }, typeof switcherIcon === 'function' ? switcherIcon((0, _objectSpread2["default"])({}, _this.props, {
        isLeaf: false
      })) : switcherIcon);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "renderCheckbox", function () {
      var _this$props5 = _this.props,
          checked = _this$props5.checked,
          halfChecked = _this$props5.halfChecked,
          disableCheckbox = _this$props5.disableCheckbox;
      var _this$context$rcTree4 = _this.context.rcTree,
          prefixCls = _this$context$rcTree4.prefixCls,
          checkable = _this$context$rcTree4.checkable;

      var disabled = _this.isDisabled();

      if (!checkable) return null; // [Legacy] Custom element should be separate with `checkable` in future

      var $custom = typeof checkable !== 'boolean' ? checkable : null;
      return _react["default"].createElement("span", {
        className: (0, _classnames["default"])("".concat(prefixCls, "-checkbox"), checked && "".concat(prefixCls, "-checkbox-checked"), !checked && halfChecked && "".concat(prefixCls, "-checkbox-indeterminate"), (disabled || disableCheckbox) && "".concat(prefixCls, "-checkbox-disabled")),
        onClick: _this.onCheck
      }, $custom);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "renderIcon", function () {
      var loadStatus = _this.state.loadStatus;
      var prefixCls = _this.context.rcTree.prefixCls;
      return loadStatus === LOAD_STATUS_LOADING ? _react["default"].createElement(_progress["default"], {
        type: "loading",
        size: "small",
        width: 14,
        className: "".concat(prefixCls, "-icon_loading")
      }) : _react["default"].createElement("span", {
        className: (0, _classnames["default"])("".concat(prefixCls, "-iconEle"), "".concat(prefixCls, "-icon__").concat(_this.getNodeState() || 'docu'))
      });
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "renderSelector", function () {
      var _this$state = _this.state,
          loadStatus = _this$state.loadStatus,
          dragNodeHighlight = _this$state.dragNodeHighlight;
      var _this$props6 = _this.props,
          title = _this$props6.title,
          selected = _this$props6.selected,
          icon = _this$props6.icon;
      var _this$context$rcTree5 = _this.context.rcTree,
          prefixCls = _this$context$rcTree5.prefixCls,
          showIcon = _this$context$rcTree5.showIcon,
          draggable = _this$context$rcTree5.draggable,
          loadData = _this$context$rcTree5.loadData;

      var disabled = _this.isDisabled();

      var wrapClass = "".concat(prefixCls, "-node-content-wrapper"); // Icon - Still show loading icon when loading without showIcon

      var $icon;

      if (showIcon) {
        $icon = icon ? _react["default"].createElement("span", {
          className: (0, _classnames["default"])("".concat(prefixCls, "-iconEle"), "".concat(prefixCls, "-icon__customize"))
        }, typeof icon === 'function' ? (0, _react.createElement)(icon, _this.props) : icon) : _this.renderIcon();
      } else if (loadData && loadStatus === LOAD_STATUS_LOADING) {
        $icon = _this.renderIcon();
      } // Title


      var $title = _react["default"].createElement("span", {
        className: "".concat(prefixCls, "-title")
      }, title);

      return _react["default"].createElement("span", {
        ref: _this.setSelectHandle,
        title: typeof title === 'string' ? title : '',
        className: (0, _classnames["default"])("".concat(wrapClass), "".concat(wrapClass, "-").concat(_this.getNodeState() || 'normal'), !disabled && (selected || dragNodeHighlight) && "".concat(prefixCls, "-node-selected"), !disabled && draggable && 'draggable'),
        draggable: !disabled && draggable || undefined,
        "aria-grabbed": !disabled && draggable || undefined,
        onMouseEnter: _this.onMouseEnter,
        onMouseLeave: _this.onMouseLeave,
        onContextMenu: _this.onContextMenu,
        onClick: _this.onSelectorClick,
        onDragStart: _this.onDragStart
      }, $icon, $title);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "renderChildren", function () {
      var _this$props7 = _this.props,
          expanded = _this$props7.expanded,
          pos = _this$props7.pos,
          wrapper = _this$props7.wrapper;
      var _this$context$rcTree6 = _this.context.rcTree,
          prefixCls = _this$context$rcTree6.prefixCls,
          openTransitionName = _this$context$rcTree6.openTransitionName,
          openAnimation = _this$context$rcTree6.openAnimation,
          renderTreeNode = _this$context$rcTree6.renderTreeNode; // [Legacy] Animation control

      var renderFirst = _this.renderFirst;
      _this.renderFirst = 1;
      var transitionAppear = true;

      if (!renderFirst && expanded) {
        transitionAppear = false;
      }

      var animProps = {};

      if (openTransitionName) {
        animProps.transitionName = openTransitionName;
      } else if ((0, _typeof2["default"])(openAnimation) === 'object') {
        animProps.animation = (0, _objectSpread2["default"])({}, openAnimation);

        if (!transitionAppear) {
          delete animProps.animation.appear;
        }
      } // Children TreeNode


      var nodeList = _this.getNodeChildren();

      if (nodeList.length === 0) {
        return null;
      }

      var $children;

      if (expanded) {
        var treeNodes = _react.Children.map(nodeList, function (node, index) {
          return renderTreeNode(node, index, pos);
        });

        if (wrapper) {
          treeNodes = wrapper(treeNodes);
        }

        $children = _react["default"].createElement("ul", {
          hidden: !expanded
        }, treeNodes);
      }

      return _react["default"].createElement(_animate["default"], (0, _extends2["default"])({}, animProps, {
        hiddenProp: "hidden",
        transitionAppear: transitionAppear,
        component: ""
      }), $children);
    });
    _this.state = {
      loadStatus: LOAD_STATUS_NONE,
      dragNodeHighlight: false
    };
    return _this;
  }

  (0, _createClass2["default"])(TreeNode, [{
    key: "getChildContext",
    value: function getChildContext() {
      return (0, _objectSpread2["default"])({}, this.context, {
        rcTreeNode: {
          onUpCheckConduct: this.onUpCheckConduct
        }
      });
    } // Isomorphic needn't load data in server side

  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.syncLoadData(this.props);
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      this.syncLoadData(nextProps);
    }
  }, {
    key: "getNodeChildren",
    value: function getNodeChildren() {
      var children = this.props.children;
      var originList = (0, _toArray["default"])(children).filter(function (node) {
        return node;
      });
      var targetList = (0, _util.getNodeChildren)(originList);

      if (originList.length !== targetList.length && !onlyTreeNodeWarned) {
        onlyTreeNodeWarned = true;
        (0, _warning["default"])(false, 'Tree only accept TreeNode as children.');
      }

      return targetList;
    }
  }, {
    key: "isSelectable",
    value: function isSelectable() {
      var selectable = this.props.selectable;
      var treeSelectable = this.context.rcTree.selectable; // Ignore when selectable is undefined or null

      if (typeof selectable === 'boolean') {
        return selectable;
      }

      return treeSelectable;
    } // Load data to avoid default expanded tree without data

  }, {
    key: "render",
    value: function render() {
      var _classNames;

      var _this$props8 = this.props,
          className = _this$props8.className,
          dragOver = _this$props8.dragOver,
          dragOverGapTop = _this$props8.dragOverGapTop,
          dragOverGapBottom = _this$props8.dragOverGapBottom;
      var _this$context$rcTree7 = this.context.rcTree,
          prefixCls = _this$context$rcTree7.prefixCls,
          filterTreeNode = _this$context$rcTree7.filterTreeNode;
      var disabled = this.isDisabled();
      return _react["default"].createElement("li", {
        className: (0, _classnames["default"])(className, (_classNames = {}, (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-treenode-disabled"), disabled), (0, _defineProperty2["default"])(_classNames, 'drag-over', !disabled && dragOver), (0, _defineProperty2["default"])(_classNames, 'drag-over-gap-top', !disabled && dragOverGapTop), (0, _defineProperty2["default"])(_classNames, 'drag-over-gap-bottom', !disabled && dragOverGapBottom), (0, _defineProperty2["default"])(_classNames, 'filter-node', filterTreeNode && filterTreeNode(this)), _classNames)),
        onDragEnter: this.onDragEnter,
        onDragOver: this.onDragOver,
        onDragLeave: this.onDragLeave,
        onDrop: this.onDrop,
        onDragEnd: this.onDragEnd
      }, this.renderSwitcher(), this.renderCheckbox(), this.renderSelector(), this.renderChildren());
    }
  }]);
  return TreeNode;
}(_react.Component);

exports["default"] = TreeNode;
(0, _defineProperty2["default"])(TreeNode, "propTypes", {
  eventKey: _propTypes["default"].string,
  // Pass by parent `cloneElement`
  prefixCls: _propTypes["default"].string,
  className: _propTypes["default"].string,
  root: _propTypes["default"].object,
  onSelect: _propTypes["default"].func,
  wrapper: _propTypes["default"].func,
  // By parent
  expanded: _propTypes["default"].bool,
  selected: _propTypes["default"].bool,
  checked: _propTypes["default"].bool,
  halfChecked: _propTypes["default"].bool,
  children: _propTypes["default"].node,
  title: _propTypes["default"].node,
  pos: _propTypes["default"].string,
  dragOver: _propTypes["default"].bool,
  dragOverGapTop: _propTypes["default"].bool,
  dragOverGapBottom: _propTypes["default"].bool,
  // By user
  isLeaf: _propTypes["default"].bool,
  selectable: _propTypes["default"].bool,
  disabled: _propTypes["default"].bool,
  disableCheckbox: _propTypes["default"].bool,
  icon: _propTypes["default"].oneOfType([_propTypes["default"].node, _propTypes["default"].func]),
  switcherIcon: _propTypes["default"].oneOfType([_propTypes["default"].node, _propTypes["default"].func])
});
(0, _defineProperty2["default"])(TreeNode, "contextTypes", nodeContextTypes);
(0, _defineProperty2["default"])(TreeNode, "childContextTypes", nodeContextTypes);
(0, _defineProperty2["default"])(TreeNode, "defaultProps", {
  title: defaultTitle
});
(0, _defineProperty2["default"])(TreeNode, "isTreeNode", 1);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRyZWVOb2RlLmpzeCJdLCJuYW1lcyI6WyJJQ09OX09QRU4iLCJJQ09OX0NMT1NFIiwiTE9BRF9TVEFUVVNfTk9ORSIsIkxPQURfU1RBVFVTX0xPQURJTkciLCJMT0FEX1NUQVRVU19MT0FERUQiLCJMT0FEX1NUQVRVU19GQUlMRUQiLCJkZWZhdWx0VGl0bGUiLCJvbmx5VHJlZU5vZGVXYXJuZWQiLCJub2RlQ29udGV4dFR5cGVzIiwiY29udGV4dFR5cGVzIiwicmNUcmVlTm9kZSIsIlByb3BUeXBlcyIsInNoYXBlIiwib25VcENoZWNrQ29uZHVjdCIsImZ1bmMiLCJUcmVlTm9kZSIsInByb3BzIiwidHJlZU5vZGUiLCJub2RlQ2hlY2tlZCIsIm5vZGVIYWxmQ2hlY2tlZCIsIm5vZGVQb3MiLCJwb3MiLCJldmVudEtleSIsImNoZWNrZWQiLCJoYWxmQ2hlY2tlZCIsImNvbnRleHQiLCJyY1RyZWUiLCJjaGVja1N0cmljdGx5IiwiaXNLZXlDaGVja2VkIiwib25CYXRjaE5vZGVDaGVjayIsIm9uQ2hlY2tDb25kdWN0RmluaXNoZWQiLCJjaGlsZHJlbiIsImdldE5vZGVDaGlsZHJlbiIsImNoZWNrZWRDb3VudCIsImZvckVhY2giLCJub2RlIiwiaW5kZXgiLCJjaGlsZFBvcyIsImtleSIsImVuYWJsZWRDaGlsZHJlbkNvdW50IiwiZmlsdGVyIiwibGVuZ3RoIiwibmV4dENoZWNrZWQiLCJuZXh0SGFsZkNoZWNrZWQiLCJlIiwiaXNTZWxlY3RhYmxlIiwib25TZWxlY3QiLCJvbkNoZWNrIiwiaXNEaXNhYmxlZCIsIm9uTm9kZVNlbGVjdCIsInByZXZlbnREZWZhdWx0IiwiZGlzYWJsZUNoZWNrYm94IiwiY2hlY2thYmxlIiwidGFyZ2V0Q2hlY2tlZCIsIm9uRG93bkNoZWNrQ29uZHVjdCIsIm9uTm9kZU1vdXNlRW50ZXIiLCJvbk5vZGVNb3VzZUxlYXZlIiwib25Ob2RlQ29udGV4dE1lbnUiLCJvbk5vZGVEcmFnU3RhcnQiLCJzdG9wUHJvcGFnYXRpb24iLCJzZXRTdGF0ZSIsImRyYWdOb2RlSGlnaGxpZ2h0IiwiZGF0YVRyYW5zZmVyIiwic2V0RGF0YSIsImVycm9yIiwib25Ob2RlRHJhZ0VudGVyIiwib25Ob2RlRHJhZ092ZXIiLCJvbk5vZGVEcmFnTGVhdmUiLCJvbk5vZGVEcmFnRW5kIiwib25Ob2RlRHJvcCIsIm9uTm9kZUV4cGFuZCIsImNhbGxiYWNrUHJvbWlzZSIsInRoZW4iLCJsb2FkU3RhdHVzIiwic2VsZWN0SGFuZGxlIiwiZXhwYW5kZWQiLCJpc0xlYWYiLCJzdGF0ZSIsImhhc0NoaWxkcmVuIiwibG9hZERhdGEiLCJkaXNhYmxlZCIsInRyZWVEaXNhYmxlZCIsInN3aXRjaGVySWNvbkZyb21Qcm9wcyIsInN3aXRjaGVySWNvbiIsInByZWZpeENscyIsInN3aXRjaGVySWNvbkZyb21DdHgiLCJzd2l0Y2hlckNscyIsIm9uRXhwYW5kIiwiJGN1c3RvbSIsImdldE5vZGVTdGF0ZSIsInRpdGxlIiwic2VsZWN0ZWQiLCJpY29uIiwic2hvd0ljb24iLCJkcmFnZ2FibGUiLCJ3cmFwQ2xhc3MiLCIkaWNvbiIsInJlbmRlckljb24iLCIkdGl0bGUiLCJzZXRTZWxlY3RIYW5kbGUiLCJ1bmRlZmluZWQiLCJvbk1vdXNlRW50ZXIiLCJvbk1vdXNlTGVhdmUiLCJvbkNvbnRleHRNZW51Iiwib25TZWxlY3RvckNsaWNrIiwib25EcmFnU3RhcnQiLCJ3cmFwcGVyIiwib3BlblRyYW5zaXRpb25OYW1lIiwib3BlbkFuaW1hdGlvbiIsInJlbmRlclRyZWVOb2RlIiwicmVuZGVyRmlyc3QiLCJ0cmFuc2l0aW9uQXBwZWFyIiwiYW5pbVByb3BzIiwidHJhbnNpdGlvbk5hbWUiLCJhbmltYXRpb24iLCJhcHBlYXIiLCJub2RlTGlzdCIsIiRjaGlsZHJlbiIsInRyZWVOb2RlcyIsIkNoaWxkcmVuIiwibWFwIiwic3luY0xvYWREYXRhIiwibmV4dFByb3BzIiwib3JpZ2luTGlzdCIsInRhcmdldExpc3QiLCJzZWxlY3RhYmxlIiwidHJlZVNlbGVjdGFibGUiLCJjbGFzc05hbWUiLCJkcmFnT3ZlciIsImRyYWdPdmVyR2FwVG9wIiwiZHJhZ092ZXJHYXBCb3R0b20iLCJmaWx0ZXJUcmVlTm9kZSIsIm9uRHJhZ0VudGVyIiwib25EcmFnT3ZlciIsIm9uRHJhZ0xlYXZlIiwib25Ecm9wIiwib25EcmFnRW5kIiwicmVuZGVyU3dpdGNoZXIiLCJyZW5kZXJDaGVja2JveCIsInJlbmRlclNlbGVjdG9yIiwicmVuZGVyQ2hpbGRyZW4iLCJDb21wb25lbnQiLCJzdHJpbmciLCJyb290Iiwib2JqZWN0IiwiYm9vbCIsIm9uZU9mVHlwZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLElBQU1BLFNBQVMsR0FBRyxNQUFsQjtBQUNBLElBQU1DLFVBQVUsR0FBRyxPQUFuQjtBQUVBLElBQU1DLGdCQUFnQixHQUFHLENBQXpCO0FBQ0EsSUFBTUMsbUJBQW1CLEdBQUcsQ0FBNUI7QUFDQSxJQUFNQyxrQkFBa0IsR0FBRyxDQUEzQjtBQUNBLElBQU1DLGtCQUFrQixHQUFHLENBQTNCLEMsQ0FBOEI7O0FBRTlCLElBQU1DLFlBQVksR0FBRyxLQUFyQjtBQUVBLElBQUlDLGtCQUFrQixHQUFHLEtBQXpCLEMsQ0FBZ0M7O0FBRXpCLElBQU1DLGdCQUFnQixzQ0FDeEJDLGtCQUR3QjtBQUUzQkMsRUFBQUEsVUFBVSxFQUFFQyxzQkFBVUMsS0FBVixDQUFnQjtBQUMxQkMsSUFBQUEsZ0JBQWdCLEVBQUVGLHNCQUFVRztBQURGLEdBQWhCO0FBRmUsRUFBdEI7OztJQU9jQyxROzs7OztBQXdDbkIsb0JBQVlDLE1BQVosRUFBbUI7QUFBQTs7QUFBQTtBQUNqQixvSEFBTUEsTUFBTjtBQURpQix5R0EyQkEsVUFBQ0MsUUFBRCxFQUFXQyxXQUFYLEVBQXdCQyxlQUF4QixFQUE0QztBQUFBLFVBQ2hEQyxPQURnRCxHQUNwQ0gsUUFBUSxDQUFDRCxLQUQyQixDQUNy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RUFBQUEsY0FBYyxFQUFFdEgsc0JBQVVzSSxJQWpCVDtBQWtCakJmLEVBQUFBLGlCQUFpQixFQUFFdkgsc0JBQVVzSSxJQWxCWjtBQW9CakI7QUFDQXJFLEVBQUFBLE1BQU0sRUFBRWpFLHNCQUFVc0ksSUFyQkQ7QUFzQmpCcEIsRUFBQUEsVUFBVSxFQUFFbEgsc0JBQVVzSSxJQXRCTDtBQXVCakJqRSxFQUFBQSxRQUFRLEVBQUVyRSxzQkFBVXNJLElBdkJIO0FBd0JqQjlGLEVBQUFBLGVBQWUsRUFBRXhDLHNCQUFVc0ksSUF4QlY7QUF5QmpCckQsRUFBQUEsSUFBSSxFQUFFakYsc0JBQVV1SSxTQUFWLENBQW9CLENBQUN2SSxzQkFBVXdCLElBQVgsRUFBaUJ4QixzQkFBVUcsSUFBM0IsQ0FBcEIsQ0F6Qlc7QUEwQmpCcUUsRUFBQUEsWUFBWSxFQUFFeEUsc0JBQVV1SSxTQUFWLENBQW9CLENBQUN2SSxzQkFBVXdCLElBQVgsRUFBaUJ4QixzQkFBVUcsSUFBM0IsQ0FBcEI7QUExQkcsQztpQ0FEQUMsUSxrQkE4QkdQLGdCO2lDQTlCSE8sUSx1QkFnQ1FQLGdCO2lDQWhDUk8sUSxrQkFrQ0c7QUFDcEIyRSxFQUFBQSxLQUFLLEVBQUVwRjtBQURhLEM7aUNBbENIUyxRLGdCQXNDQyxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IENoaWxkcmVuLCBDb21wb25lbnQsIGNyZWF0ZUVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICcuLi8uLi9fdXRpbC93YXJuaW5nJztcbmltcG9ydCBBbmltYXRlIGZyb20gJy4uLy4uL2FuaW1hdGUnO1xuaW1wb3J0IHRvQXJyYXkgZnJvbSAnLi4vdXRpbC9DaGlsZHJlbi90b0FycmF5JztcbmltcG9ydCB7IGNvbnRleHRUeXBlcyB9IGZyb20gJy4vVHJlZSc7XG5pbXBvcnQgUHJvZ3Jlc3MgZnJvbSAnLi4vLi4vcHJvZ3Jlc3MnO1xuaW1wb3J0IHsgZ2V0Tm9kZUNoaWxkcmVuLCBnZXRQb3NpdGlvbiwgaXNDaGVja0Rpc2FibGVkLCB0cmF2ZXJzZVRyZWVOb2RlcyB9IGZyb20gJy4vdXRpbCc7XG5cbmNvbnN0IElDT05fT1BFTiA9ICdvcGVuJztcbmNvbnN0IElDT05fQ0xPU0UgPSAnY2xvc2UnO1xuXG5jb25zdCBMT0FEX1NUQVRVU19OT05FID0gMDtcbmNvbnN0IExPQURfU1RBVFVTX0xPQURJTkcgPSAxO1xuY29uc3QgTE9BRF9TVEFUVVNfTE9BREVEID0gMjtcbmNvbnN0IExPQURfU1RBVFVTX0ZBSUxFRCA9IDA7IC8vIEFjdGlvbiBhbGlnbiwgbGV0J3MgbWFrZSBmYWlsZWQgc2FtZSBhcyBpbml0LlxuXG5jb25zdCBkZWZhdWx0VGl0bGUgPSAnLS0tJztcblxubGV0IG9ubHlUcmVlTm9kZVdhcm5lZCA9IGZhbHNlOyAvLyBPbmx5IGFjY2VwdCBUcmVlTm9kZVxuXG5leHBvcnQgY29uc3Qgbm9kZUNvbnRleHRUeXBlcyA9IHtcbiAgLi4uY29udGV4dFR5cGVzLFxuICByY1RyZWVOb2RlOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIG9uVXBDaGVja0NvbmR1Y3Q6IFByb3BUeXBlcy5mdW5jLFxuICB9KSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRyZWVOb2RlIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBldmVudEtleTogUHJvcFR5cGVzLnN0cmluZywgLy8gUGFzcyBieSBwYXJlbnQgYGNsb25lRWxlbWVudGBcbiAgICBwcmVmaXhDbHM6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHJvb3Q6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgb25TZWxlY3Q6IFByb3BUeXBlcy5mdW5jLFxuICAgIHdyYXBwZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gICAgLy8gQnkgcGFyZW50XG4gICAgZXhwYW5kZWQ6IFByb3BUeXBlcy5ib29sLFxuICAgIHNlbGVjdGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBjaGVja2VkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBoYWxmQ2hlY2tlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIHRpdGxlOiBQcm9wVHlwZXMubm9kZSxcbiAgICBwb3M6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZHJhZ092ZXI6IFByb3BUeXBlcy5ib29sLFxuICAgIGRyYWdPdmVyR2FwVG9wOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBkcmFnT3ZlckdhcEJvdHRvbTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgICAvLyBCeSB1c2VyXG4gICAgaXNMZWFmOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzZWxlY3RhYmxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgZGlzYWJsZUNoZWNrYm94OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpY29uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubm9kZSwgUHJvcFR5cGVzLmZ1bmNdKSxcbiAgICBzd2l0Y2hlckljb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ub2RlLCBQcm9wVHlwZXMuZnVuY10pLFxuICB9O1xuXG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSBub2RlQ29udGV4dFR5cGVzO1xuXG4gIHN0YXRpYyBjaGlsZENvbnRleHRUeXBlcyA9IG5vZGVDb250ZXh0VHlwZXM7XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICB0aXRsZTogZGVmYXVsdFRpdGxlLFxuICB9O1xuXG4gIHN0YXRpYyBpc1RyZWVOb2RlID0gMTtcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBsb2FkU3RhdHVzOiBMT0FEX1NUQVRVU19OT05FLFxuICAgICAgZHJhZ05vZGVIaWdobGlnaHQ6IGZhbHNlLFxuICAgIH07XG4gIH1cblxuICBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnRoaXMuY29udGV4dCxcbiAgICAgIHJjVHJlZU5vZGU6IHtcbiAgICAgICAgb25VcENoZWNrQ29uZHVjdDogdGhpcy5vblVwQ2hlY2tDb25kdWN0LFxuICAgICAgfSxcbiAgICB9O1xuICB9XG5cbiAgLy8gSXNvbW9ycGhpYyBuZWVkbid0IGxvYWQgZGF0YSBpbiBzZXJ2ZXIgc2lkZVxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnN5bmNMb2FkRGF0YSh0aGlzLnByb3BzKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgdGhpcy5zeW5jTG9hZERhdGEobmV4dFByb3BzKTtcbiAgfVxuXG4gIG9uVXBDaGVja0NvbmR1Y3QgPSAodHJlZU5vZGUsIG5vZGVDaGVja2VkLCBub2RlSGFsZkNoZWNrZWQpID0+IHtcbiAgICBjb25zdCB7IHBvczogbm9kZVBvcyB9ID0gdHJlZU5vZGUucHJvcHM7XG4gICAgY29uc3QgeyBldmVudEtleSwgcG9zLCBjaGVja2VkLCBoYWxmQ2hlY2tlZCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7XG4gICAgICByY1RyZWU6IHsgY2hlY2tTdHJpY3RseSwgaXNLZXlDaGVja2VkLCBvbkJhdGNoTm9kZUNoZWNrLCBvbkNoZWNrQ29uZHVjdEZpbmlzaGVkIH0sXG4gICAgICByY1RyZWVOb2RlOiB7IG9uVXBDaGVja0NvbmR1Y3QgfSA9IHt9LFxuICAgIH0gPSB0aGlzLmNvbnRleHQ7XG5cbiAgICAvLyBTdG9wIGNvbmR1Y3Qgd2hlbiBjdXJyZW50IG5vZGUgaXMgZGlzYWJsZWRcbiAgICBpZiAoaXNDaGVja0Rpc2FibGVkKHRoaXMpKSB7XG4gICAgICBvbkNoZWNrQ29uZHVjdEZpbmlzaGVkKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgY2hpbGRyZW4gPSB0aGlzLmdldE5vZGVDaGlsZHJlbigpO1xuXG4gICAgbGV0IGNoZWNrZWRDb3VudCA9IG5vZGVDaGVja2VkID8gMSA6IDA7XG5cbiAgICAvLyBTdGF0aXN0aWMgY2hlY2tlZCBjb3VudFxuICAgIGNoaWxkcmVuLmZvckVhY2goKG5vZGUsIGluZGV4KSA9PiB7XG4gICAgICBjb25zdCBjaGlsZFBvcyA9IGdldFBvc2l0aW9uKHBvcywgaW5kZXgpO1xuXG4gICAgICBpZiAobm9kZVBvcyA9PT0gY2hpbGRQb3MgfHwgaXNDaGVja0Rpc2FibGVkKG5vZGUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzS2V5Q2hlY2tlZChub2RlLmtleSB8fCBjaGlsZFBvcykpIHtcbiAgICAgICAgY2hlY2tlZENvdW50ICs9IDE7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBTdGF0aWMgZW5hYmxlZCBjaGlsZHJlbiBjb3VudFxuICAgIGNvbnN0IGVuYWJsZWRDaGlsZHJlbkNvdW50ID0gY2hpbGRyZW5cbiAgICAgIC5maWx0ZXIobm9kZSA9PiAhaXNDaGVja0Rpc2FibGVkKG5vZGUpKVxuICAgICAgLmxlbmd0aDtcblxuICAgIC8vIGNoZWNrU3RyaWN0bHkgd2lsbCBub3QgY29uZHVjdCBjaGVjayBzdGF0dXNcbiAgICBjb25zdCBuZXh0Q2hlY2tlZCA9IGNoZWNrU3RyaWN0bHkgPyBjaGVja2VkIDogZW5hYmxlZENoaWxkcmVuQ291bnQgPT09IGNoZWNrZWRDb3VudDtcbiAgICBjb25zdCBuZXh0SGFsZkNoZWNrZWQgPSBjaGVja1N0cmljdGx5ID8gLy8gcHJvcGFnYXRlZCBvciBjaGlsZCBjaGVja2VkXG4gICAgICBoYWxmQ2hlY2tlZCA6IChub2RlSGFsZkNoZWNrZWQgfHwgKGNoZWNrZWRDb3VudCA+IDAgJiYgIW5leHRDaGVja2VkKSk7XG5cbiAgICAvLyBBZGQgaW50byBiYXRjaCB1cGRhdGVcbiAgICBpZiAoY2hlY2tlZCAhPT0gbmV4dENoZWNrZWQgfHwgaGFsZkNoZWNrZWQgIT09IG5leHRIYWxmQ2hlY2tlZCkge1xuICAgICAgb25CYXRjaE5vZGVDaGVjayhldmVudEtleSwgbmV4dENoZWNrZWQsIG5leHRIYWxmQ2hlY2tlZCk7XG5cbiAgICAgIGlmIChvblVwQ2hlY2tDb25kdWN0KSB7XG4gICAgICAgIG9uVXBDaGVja0NvbmR1Y3QodGhpcywgbmV4dENoZWNrZWQsIG5leHRIYWxmQ2hlY2tlZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBGbHVzaCBhbGwgdGhlIHVwZGF0ZVxuICAgICAgICBvbkNoZWNrQ29uZHVjdEZpbmlzaGVkKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEZsdXNoIGFsbCB0aGUgdXBkYXRlXG4gICAgICBvbkNoZWNrQ29uZHVjdEZpbmlzaGVkKCk7XG4gICAgfVxuICB9O1xuXG4gIG9uRG93bkNoZWNrQ29uZHVjdCA9IChub2RlQ2hlY2tlZCkgPT4ge1xuICAgIGNvbnN0IHsgY2hpbGRyZW4gfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyByY1RyZWU6IHsgY2hlY2tTdHJpY3RseSwgaXNLZXlDaGVja2VkLCBvbkJhdGNoTm9kZUNoZWNrIH0gfSA9IHRoaXMuY29udGV4dDtcbiAgICBpZiAoY2hlY2tTdHJpY3RseSkgcmV0dXJuO1xuXG4gICAgdHJhdmVyc2VUcmVlTm9kZXMoY2hpbGRyZW4sICh7IG5vZGUsIGtleSB9KSA9PiB7XG4gICAgICBpZiAoaXNDaGVja0Rpc2FibGVkKG5vZGUpKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgIGlmIChub2RlQ2hlY2tlZCAhPT0gaXNLZXlDaGVja2VkKGtleSkpIHtcbiAgICAgICAgb25CYXRjaE5vZGVDaGVjayhrZXksIG5vZGVDaGVja2VkLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgb25TZWxlY3RvckNsaWNrID0gKGUpID0+IHtcbiAgICBpZiAodGhpcy5pc1NlbGVjdGFibGUoKSkge1xuICAgICAgdGhpcy5vblNlbGVjdChlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vbkNoZWNrKGUpO1xuICAgIH1cbiAgfTtcblxuICBvblNlbGVjdCA9IChlKSA9PiB7XG4gICAgaWYgKHRoaXMuaXNEaXNhYmxlZCgpKSByZXR1cm47XG5cbiAgICBjb25zdCB7IHJjVHJlZTogeyBvbk5vZGVTZWxlY3QgfSB9ID0gdGhpcy5jb250ZXh0O1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBvbk5vZGVTZWxlY3QoZSwgdGhpcyk7XG4gIH07XG5cbiAgb25DaGVjayA9IChlKSA9PiB7XG4gICAgaWYgKHRoaXMuaXNEaXNhYmxlZCgpKSByZXR1cm47XG5cbiAgICBjb25zdCB7IGRpc2FibGVDaGVja2JveCwgY2hlY2tlZCwgZXZlbnRLZXkgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3Qge1xuICAgICAgcmNUcmVlOiB7IGNoZWNrYWJsZSwgb25CYXRjaE5vZGVDaGVjaywgb25DaGVja0NvbmR1Y3RGaW5pc2hlZCB9LFxuICAgICAgcmNUcmVlTm9kZTogeyBvblVwQ2hlY2tDb25kdWN0IH0gPSB7fSxcbiAgICB9ID0gdGhpcy5jb250ZXh0O1xuXG4gICAgaWYgKCFjaGVja2FibGUgfHwgZGlzYWJsZUNoZWNrYm94KSByZXR1cm47XG5cbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3QgdGFyZ2V0Q2hlY2tlZCA9ICFjaGVja2VkO1xuICAgIG9uQmF0Y2hOb2RlQ2hlY2soZXZlbnRLZXksIHRhcmdldENoZWNrZWQsIGZhbHNlLCB0aGlzKTtcblxuICAgIC8vIENoaWxkcmVuIGNvbmR1Y3RcbiAgICB0aGlzLm9uRG93bkNoZWNrQ29uZHVjdCh0YXJnZXRDaGVja2VkKTtcblxuICAgIC8vIFBhcmVudCBjb25kdWN0XG4gICAgaWYgKG9uVXBDaGVja0NvbmR1Y3QpIHtcbiAgICAgIG9uVXBDaGVja0NvbmR1Y3QodGhpcywgdGFyZ2V0Q2hlY2tlZCwgZmFsc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvbkNoZWNrQ29uZHVjdEZpbmlzaGVkKCk7XG4gICAgfVxuICB9O1xuXG4gIG9uTW91c2VFbnRlciA9IChlKSA9PiB7XG4gICAgY29uc3QgeyByY1RyZWU6IHsgb25Ob2RlTW91c2VFbnRlciB9IH0gPSB0aGlzLmNvbnRleHQ7XG4gICAgb25Ob2RlTW91c2VFbnRlcihlLCB0aGlzKTtcbiAgfTtcblxuICBvbk1vdXNlTGVhdmUgPSAoZSkgPT4ge1xuICAgIGNvbnN0IHsgcmNUcmVlOiB7IG9uTm9kZU1vdXNlTGVhdmUgfSB9ID0gdGhpcy5jb250ZXh0O1xuICAgIG9uTm9kZU1vdXNlTGVhdmUoZSwgdGhpcyk7XG4gIH07XG5cbiAgb25Db250ZXh0TWVudSA9IChlKSA9PiB7XG4gICAgY29uc3QgeyByY1RyZWU6IHsgb25Ob2RlQ29udGV4dE1lbnUgfSB9ID0gdGhpcy5jb250ZXh0O1xuICAgIG9uTm9kZUNvbnRleHRNZW51KGUsIHRoaXMpO1xuICB9O1xuXG4gIG9uRHJhZ1N0YXJ0ID0gKGUpID0+IHtcbiAgICBjb25zdCB7IHJjVHJlZTogeyBvbk5vZGVEcmFnU3RhcnQgfSB9ID0gdGhpcy5jb250ZXh0O1xuXG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGRyYWdOb2RlSGlnaGxpZ2h0OiB0cnVlLFxuICAgIH0pO1xuICAgIG9uTm9kZURyYWdTdGFydChlLCB0aGlzKTtcblxuICAgIHRyeSB7XG4gICAgICAvLyBpZSB0aHJvdyBlcnJvclxuICAgICAgLy8gZmlyZWZveC1uZWVkLWl0XG4gICAgICBlLmRhdGFUcmFuc2Zlci5zZXREYXRhKCd0ZXh0L3BsYWluJywgJycpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBlbXB0eVxuICAgIH1cbiAgfTtcblxuICBvbkRyYWdFbnRlciA9IChlKSA9PiB7XG4gICAgY29uc3QgeyByY1RyZWU6IHsgb25Ob2RlRHJhZ0VudGVyIH0gfSA9IHRoaXMuY29udGV4dDtcblxuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIG9uTm9kZURyYWdFbnRlcihlLCB0aGlzKTtcbiAgfTtcblxuICBvbkRyYWdPdmVyID0gKGUpID0+IHtcbiAgICBjb25zdCB7IHJjVHJlZTogeyBvbk5vZGVEcmFnT3ZlciB9IH0gPSB0aGlzLmNvbnRleHQ7XG5cbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBvbk5vZGVEcmFnT3ZlcihlLCB0aGlzKTtcbiAgfTtcblxuICBvbkRyYWdMZWF2ZSA9IChlKSA9PiB7XG4gICAgY29uc3QgeyByY1RyZWU6IHsgb25Ob2RlRHJhZ0xlYXZlIH0gfSA9IHRoaXMuY29udGV4dDtcblxuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgb25Ob2RlRHJhZ0xlYXZlKGUsIHRoaXMpO1xuICB9O1xuXG4gIG9uRHJhZ0VuZCA9IChlKSA9PiB7XG4gICAgY29uc3QgeyByY1RyZWU6IHsgb25Ob2RlRHJhZ0VuZCB9IH0gPSB0aGlzLmNvbnRleHQ7XG5cbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgZHJhZ05vZGVIaWdobGlnaHQ6IGZhbHNlLFxuICAgIH0pO1xuICAgIG9uTm9kZURyYWdFbmQoZSwgdGhpcyk7XG4gIH07XG5cbiAgb25Ecm9wID0gKGUpID0+IHtcbiAgICBjb25zdCB7IHJjVHJlZTogeyBvbk5vZGVEcm9wIH0gfSA9IHRoaXMuY29udGV4dDtcblxuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgZHJhZ05vZGVIaWdobGlnaHQ6IGZhbHNlLFxuICAgIH0pO1xuICAgIG9uTm9kZURyb3AoZSwgdGhpcyk7XG4gIH07XG5cbiAgLy8gRGlzYWJsZWQgaXRlbSBzdGlsbCBjYW4gYmUgc3dpdGNoXG4gIG9uRXhwYW5kID0gKGUpID0+IHtcbiAgICBjb25zdCB7IHJjVHJlZTogeyBvbk5vZGVFeHBhbmQgfSB9ID0gdGhpcy5jb250ZXh0O1xuICAgIGNvbnN0IGNhbGxiYWNrUHJvbWlzZSA9IG9uTm9kZUV4cGFuZChlLCB0aGlzKTtcblxuICAgIC8vIFByb21pc2UgbGlrZVxuICAgIGlmIChjYWxsYmFja1Byb21pc2UgJiYgY2FsbGJhY2tQcm9taXNlLnRoZW4pIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBsb2FkU3RhdHVzOiBMT0FEX1NUQVRVU19MT0FESU5HIH0pO1xuXG4gICAgICBjYWxsYmFja1Byb21pc2UudGhlbigoKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBsb2FkU3RhdHVzOiBMT0FEX1NUQVRVU19MT0FERUQgfSk7XG4gICAgICB9KS5jYXRjaCgoKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBsb2FkU3RhdHVzOiBMT0FEX1NUQVRVU19GQUlMRUQgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgLy8gRHJhZyB1c2FnZVxuICBzZXRTZWxlY3RIYW5kbGUgPSAobm9kZSkgPT4ge1xuICAgIHRoaXMuc2VsZWN0SGFuZGxlID0gbm9kZTtcbiAgfTtcblxuICBnZXROb2RlQ2hpbGRyZW4oKSB7XG4gICAgY29uc3QgeyBjaGlsZHJlbiB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBvcmlnaW5MaXN0ID0gdG9BcnJheShjaGlsZHJlbikuZmlsdGVyKG5vZGUgPT4gbm9kZSk7XG4gICAgY29uc3QgdGFyZ2V0TGlzdCA9IGdldE5vZGVDaGlsZHJlbihvcmlnaW5MaXN0KTtcblxuICAgIGlmIChvcmlnaW5MaXN0Lmxlbmd0aCAhPT0gdGFyZ2V0TGlzdC5sZW5ndGggJiYgIW9ubHlUcmVlTm9kZVdhcm5lZCkge1xuICAgICAgb25seVRyZWVOb2RlV2FybmVkID0gdHJ1ZTtcbiAgICAgIHdhcm5pbmcoZmFsc2UsICdUcmVlIG9ubHkgYWNjZXB0IFRyZWVOb2RlIGFzIGNoaWxkcmVuLicpO1xuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXRMaXN0O1xuICB9XG5cbiAgZ2V0Tm9kZVN0YXRlID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgZXhwYW5kZWQgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBpZiAodGhpcy5pc0xlYWYoKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGV4cGFuZGVkID8gSUNPTl9PUEVOIDogSUNPTl9DTE9TRTtcbiAgfTtcblxuICBpc0xlYWYgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBsb2FkU3RhdHVzIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHsgaXNMZWFmLCBoYXNDaGlsZHJlbiA9IHRoaXMuZ2V0Tm9kZUNoaWxkcmVuKCkubGVuZ3RoICE9PSAwIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgcmNUcmVlOiB7IGxvYWREYXRhIH0gfSA9IHRoaXMuY29udGV4dDtcblxuICAgIHJldHVybiAoXG4gICAgICBpc0xlYWYgfHxcbiAgICAgICghbG9hZERhdGEgJiYgIWhhc0NoaWxkcmVuKSB8fFxuICAgICAgKGxvYWREYXRhICYmIGxvYWRTdGF0dXMgPT09IExPQURfU1RBVFVTX0xPQURFRCAmJiAhaGFzQ2hpbGRyZW4pXG4gICAgKTtcbiAgfTtcblxuICBpc0Rpc2FibGVkID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgZGlzYWJsZWQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyByY1RyZWU6IHsgZGlzYWJsZWQ6IHRyZWVEaXNhYmxlZCB9IH0gPSB0aGlzLmNvbnRleHQ7XG5cbiAgICAvLyBGb2xsb3cgdGhlIGxvZ2ljIG9mIFNlbGVjdGFibGVcbiAgICBpZiAoZGlzYWJsZWQgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuICEhKHRyZWVEaXNhYmxlZCB8fCBkaXNhYmxlZCk7XG4gIH07XG5cbiAgaXNTZWxlY3RhYmxlKCkge1xuICAgIGNvbnN0IHsgc2VsZWN0YWJsZSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHJjVHJlZTogeyBzZWxlY3RhYmxlOiB0cmVlU2VsZWN0YWJsZSB9IH0gPSB0aGlzLmNvbnRleHQ7XG5cbiAgICAvLyBJZ25vcmUgd2hlbiBzZWxlY3RhYmxlIGlzIHVuZGVmaW5lZCBvciBudWxsXG4gICAgaWYgKHR5cGVvZiBzZWxlY3RhYmxlID09PSAnYm9vbGVhbicpIHtcbiAgICAgIHJldHVybiBzZWxlY3RhYmxlO1xuICAgIH1cblxuICAgIHJldHVybiB0cmVlU2VsZWN0YWJsZTtcbiAgfVxuXG4gIC8vIExvYWQgZGF0YSB0byBhdm9pZCBkZWZhdWx0IGV4cGFuZGVkIHRyZWUgd2l0aG91dCBkYXRhXG4gIHN5bmNMb2FkRGF0YSA9IChwcm9wcykgPT4ge1xuICAgIGNvbnN0IHsgbG9hZFN0YXR1cyB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7IGV4cGFuZGVkIH0gPSBwcm9wcztcbiAgICBjb25zdCB7IHJjVHJlZTogeyBsb2FkRGF0YSB9IH0gPSB0aGlzLmNvbnRleHQ7XG5cbiAgICBpZiAobG9hZERhdGEgJiYgbG9hZFN0YXR1cyA9PT0gTE9BRF9TVEFUVVNfTk9ORSAmJiBleHBhbmRlZCAmJiAhdGhpcy5pc0xlYWYoKSkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGxvYWRTdGF0dXM6IExPQURfU1RBVFVTX0xPQURJTkcgfSk7XG5cbiAgICAgIGxvYWREYXRhKHRoaXMpLnRoZW4oKCkgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgbG9hZFN0YXR1czogTE9BRF9TVEFUVVNfTE9BREVEIH0pO1xuICAgICAgfSkuY2F0Y2goKCkgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgbG9hZFN0YXR1czogTE9BRF9TVEFUVVNfRkFJTEVEIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIC8vIFN3aXRjaGVyXG4gIHJlbmRlclN3aXRjaGVyID0gKCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIGV4cGFuZGVkLFxuICAgICAgc3dpdGNoZXJJY29uOiBzd2l0Y2hlckljb25Gcm9tUHJvcHMsXG4gICAgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3Qge1xuICAgICAgcmNUcmVlOiB7XG4gICAgICAgIHByZWZpeENscyxcbiAgICAgICAgc3dpdGNoZXJJY29uOiBzd2l0Y2hlckljb25Gcm9tQ3R4LFxuICAgICAgfSxcbiAgICB9ID0gdGhpcy5jb250ZXh0O1xuXG4gICAgY29uc3Qgc3dpdGNoZXJJY29uID0gc3dpdGNoZXJJY29uRnJvbVByb3BzIHx8IHN3aXRjaGVySWNvbkZyb21DdHg7XG5cbiAgICBpZiAodGhpcy5pc0xlYWYoKSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtjbGFzc05hbWVzKGAke3ByZWZpeENsc30tc3dpdGNoZXJgLCBgJHtwcmVmaXhDbHN9LXN3aXRjaGVyLW5vb3BgKX0+XG4gICAgICAgICAge3R5cGVvZiBzd2l0Y2hlckljb24gPT09ICdmdW5jdGlvbicgPyBzd2l0Y2hlckljb24oeyAuLi50aGlzLnByb3BzLCBpc0xlYWY6IHRydWUgfSkgOiBzd2l0Y2hlckljb259XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3Qgc3dpdGNoZXJDbHMgPSBjbGFzc05hbWVzKGAke3ByZWZpeENsc30tc3dpdGNoZXJgLCBgJHtwcmVmaXhDbHN9LXN3aXRjaGVyXyR7ZXhwYW5kZWQgPyBJQ09OX09QRU4gOiBJQ09OX0NMT1NFfWApO1xuICAgIHJldHVybiAoXG4gICAgICA8c3BhbiBvbkNsaWNrPXt0aGlzLm9uRXhwYW5kfSBjbGFzc05hbWU9e3N3aXRjaGVyQ2xzfT5cbiAgICAgICAge3R5cGVvZiBzd2l0Y2hlckljb24gPT09ICdmdW5jdGlvbicgPyBzd2l0Y2hlckljb24oeyAuLi50aGlzLnByb3BzLCBpc0xlYWY6IGZhbHNlIH0pIDogc3dpdGNoZXJJY29ufVxuICAgICAgPC9zcGFuPlxuICAgICk7XG4gIH07XG5cbiAgLy8gQ2hlY2tib3hcbiAgcmVuZGVyQ2hlY2tib3ggPSAoKSA9PiB7XG4gICAgY29uc3QgeyBjaGVja2VkLCBoYWxmQ2hlY2tlZCwgZGlzYWJsZUNoZWNrYm94IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgcmNUcmVlOiB7IHByZWZpeENscywgY2hlY2thYmxlIH0gfSA9IHRoaXMuY29udGV4dDtcbiAgICBjb25zdCBkaXNhYmxlZCA9IHRoaXMuaXNEaXNhYmxlZCgpO1xuXG4gICAgaWYgKCFjaGVja2FibGUpIHJldHVybiBudWxsO1xuXG4gICAgLy8gW0xlZ2FjeV0gQ3VzdG9tIGVsZW1lbnQgc2hvdWxkIGJlIHNlcGFyYXRlIHdpdGggYGNoZWNrYWJsZWAgaW4gZnV0dXJlXG4gICAgY29uc3QgJGN1c3RvbSA9IHR5cGVvZiBjaGVja2FibGUgIT09ICdib29sZWFuJyA/IGNoZWNrYWJsZSA6IG51bGw7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPHNwYW5cbiAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKFxuICAgICAgICAgIGAke3ByZWZpeENsc30tY2hlY2tib3hgLFxuICAgICAgICAgIGNoZWNrZWQgJiYgYCR7cHJlZml4Q2xzfS1jaGVja2JveC1jaGVja2VkYCxcbiAgICAgICAgICAhY2hlY2tlZCAmJiBoYWxmQ2hlY2tlZCAmJiBgJHtwcmVmaXhDbHN9LWNoZWNrYm94LWluZGV0ZXJtaW5hdGVgLFxuICAgICAgICAgIChkaXNhYmxlZCB8fCBkaXNhYmxlQ2hlY2tib3gpICYmIGAke3ByZWZpeENsc30tY2hlY2tib3gtZGlzYWJsZWRgLFxuICAgICAgICApfVxuICAgICAgICBvbkNsaWNrPXt0aGlzLm9uQ2hlY2t9XG4gICAgICA+XG4gICAgICAgIHskY3VzdG9tfVxuICAgICAgPC9zcGFuPlxuICAgICk7XG4gIH07XG5cbiAgcmVuZGVySWNvbiA9ICgpID0+IHtcbiAgICBjb25zdCB7IGxvYWRTdGF0dXMgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgeyByY1RyZWU6IHsgcHJlZml4Q2xzIH0gfSA9IHRoaXMuY29udGV4dDtcblxuICAgIHJldHVybiBsb2FkU3RhdHVzID09PSBMT0FEX1NUQVRVU19MT0FESU5HID8gKFxuICAgICAgPFByb2dyZXNzXG4gICAgICAgIHR5cGU9XCJsb2FkaW5nXCJcbiAgICAgICAgc2l6ZT1cInNtYWxsXCJcbiAgICAgICAgd2lkdGg9ezE0fVxuICAgICAgICBjbGFzc05hbWU9e2Ake3ByZWZpeENsc30taWNvbl9sb2FkaW5nYH1cbiAgICAgIC8+KSA6IChcbiAgICAgIDxzcGFuXG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcyhcbiAgICAgICAgICBgJHtwcmVmaXhDbHN9LWljb25FbGVgLFxuICAgICAgICAgIGAke3ByZWZpeENsc30taWNvbl9fJHt0aGlzLmdldE5vZGVTdGF0ZSgpIHx8ICdkb2N1J31gLFxuICAgICAgICApfVxuICAgICAgLz5cbiAgICApO1xuICB9O1xuXG4gIC8vIEljb24gKyBUaXRsZVxuICByZW5kZXJTZWxlY3RvciA9ICgpID0+IHtcbiAgICBjb25zdCB7IGxvYWRTdGF0dXMsIGRyYWdOb2RlSGlnaGxpZ2h0IH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHsgdGl0bGUsIHNlbGVjdGVkLCBpY29uIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgcmNUcmVlOiB7IHByZWZpeENscywgc2hvd0ljb24sIGRyYWdnYWJsZSwgbG9hZERhdGEgfSB9ID0gdGhpcy5jb250ZXh0O1xuICAgIGNvbnN0IGRpc2FibGVkID0gdGhpcy5pc0Rpc2FibGVkKCk7XG5cbiAgICBjb25zdCB3cmFwQ2xhc3MgPSBgJHtwcmVmaXhDbHN9LW5vZGUtY29udGVudC13cmFwcGVyYDtcblxuICAgIC8vIEljb24gLSBTdGlsbCBzaG93IGxvYWRpbmcgaWNvbiB3aGVuIGxvYWRpbmcgd2l0aG91dCBzaG93SWNvblxuICAgIGxldCAkaWNvbjtcblxuICAgIGlmIChzaG93SWNvbikge1xuICAgICAgJGljb24gPSBpY29uID8gKFxuICAgICAgICA8c3BhblxuICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcyhcbiAgICAgICAgICAgIGAke3ByZWZpeENsc30taWNvbkVsZWAsXG4gICAgICAgICAgICBgJHtwcmVmaXhDbHN9LWljb25fX2N1c3RvbWl6ZWAsXG4gICAgICAgICAgKX1cbiAgICAgICAgPlxuICAgICAgICAgIHt0eXBlb2YgaWNvbiA9PT0gJ2Z1bmN0aW9uJyA/IGNyZWF0ZUVsZW1lbnQoaWNvbiwgdGhpcy5wcm9wcykgOiBpY29ufVxuICAgICAgICA8L3NwYW4+XG4gICAgICApIDogdGhpcy5yZW5kZXJJY29uKCk7XG4gICAgfSBlbHNlIGlmIChsb2FkRGF0YSAmJiBsb2FkU3RhdHVzID09PSBMT0FEX1NUQVRVU19MT0FESU5HKSB7XG4gICAgICAkaWNvbiA9IHRoaXMucmVuZGVySWNvbigpO1xuICAgIH1cblxuICAgIC8vIFRpdGxlXG4gICAgY29uc3QgJHRpdGxlID0gPHNwYW4gY2xhc3NOYW1lPXtgJHtwcmVmaXhDbHN9LXRpdGxlYH0+e3RpdGxlfTwvc3Bhbj47XG5cbiAgICByZXR1cm4gKFxuICAgICAgPHNwYW5cbiAgICAgICAgcmVmPXt0aGlzLnNldFNlbGVjdEhhbmRsZX1cbiAgICAgICAgdGl0bGU9e3R5cGVvZiB0aXRsZSA9PT0gJ3N0cmluZycgPyB0aXRsZSA6ICcnfVxuICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoXG4gICAgICAgICAgYCR7d3JhcENsYXNzfWAsXG4gICAgICAgICAgYCR7d3JhcENsYXNzfS0ke3RoaXMuZ2V0Tm9kZVN0YXRlKCkgfHwgJ25vcm1hbCd9YCxcbiAgICAgICAgICAoIWRpc2FibGVkICYmIChzZWxlY3RlZCB8fCBkcmFnTm9kZUhpZ2hsaWdodCkpICYmIGAke3ByZWZpeENsc30tbm9kZS1zZWxlY3RlZGAsXG4gICAgICAgICAgKCFkaXNhYmxlZCAmJiBkcmFnZ2FibGUpICYmICdkcmFnZ2FibGUnLFxuICAgICAgICApfVxuICAgICAgICBkcmFnZ2FibGU9eyghZGlzYWJsZWQgJiYgZHJhZ2dhYmxlKSB8fCB1bmRlZmluZWR9XG4gICAgICAgIGFyaWEtZ3JhYmJlZD17KCFkaXNhYmxlZCAmJiBkcmFnZ2FibGUpIHx8IHVuZGVmaW5lZH1cblxuICAgICAgICBvbk1vdXNlRW50ZXI9e3RoaXMub25Nb3VzZUVudGVyfVxuICAgICAgICBvbk1vdXNlTGVhdmU9e3RoaXMub25Nb3VzZUxlYXZlfVxuICAgICAgICBvbkNvbnRleHRNZW51PXt0aGlzLm9uQ29udGV4dE1lbnV9XG4gICAgICAgIG9uQ2xpY2s9e3RoaXMub25TZWxlY3RvckNsaWNrfVxuICAgICAgICBvbkRyYWdTdGFydD17dGhpcy5vbkRyYWdTdGFydH1cbiAgICAgID5cbiAgICAgICAgICB7JGljb259eyR0aXRsZX1cbiAgICAgICAgPC9zcGFuPlxuICAgICk7XG4gIH07XG5cbiAgLy8gQ2hpbGRyZW4gbGlzdCB3cmFwcGVkIHdpdGggYEFuaW1hdGlvbmBcbiAgcmVuZGVyQ2hpbGRyZW4gPSAoKSA9PiB7XG4gICAgY29uc3QgeyBleHBhbmRlZCwgcG9zLCB3cmFwcGVyIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHtcbiAgICAgIHJjVHJlZToge1xuICAgICAgICBwcmVmaXhDbHMsXG4gICAgICAgIG9wZW5UcmFuc2l0aW9uTmFtZSwgb3BlbkFuaW1hdGlvbixcbiAgICAgICAgcmVuZGVyVHJlZU5vZGUsXG4gICAgICB9LFxuICAgIH0gPSB0aGlzLmNvbnRleHQ7XG5cbiAgICAvLyBbTGVnYWN5XSBBbmltYXRpb24gY29udHJvbFxuICAgIGNvbnN0IHJlbmRlckZpcnN0ID0gdGhpcy5yZW5kZXJGaXJzdDtcbiAgICB0aGlzLnJlbmRlckZpcnN0ID0gMTtcbiAgICBsZXQgdHJhbnNpdGlvbkFwcGVhciA9IHRydWU7XG4gICAgaWYgKCFyZW5kZXJGaXJzdCAmJiBleHBhbmRlZCkge1xuICAgICAgdHJhbnNpdGlvbkFwcGVhciA9IGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IGFuaW1Qcm9wcyA9IHt9O1xuICAgIGlmIChvcGVuVHJhbnNpdGlvbk5hbWUpIHtcbiAgICAgIGFuaW1Qcm9wcy50cmFuc2l0aW9uTmFtZSA9IG9wZW5UcmFuc2l0aW9uTmFtZTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBvcGVuQW5pbWF0aW9uID09PSAnb2JqZWN0Jykge1xuICAgICAgYW5pbVByb3BzLmFuaW1hdGlvbiA9IHsgLi4ub3BlbkFuaW1hdGlvbiB9O1xuICAgICAgaWYgKCF0cmFuc2l0aW9uQXBwZWFyKSB7XG4gICAgICAgIGRlbGV0ZSBhbmltUHJvcHMuYW5pbWF0aW9uLmFwcGVhcjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDaGlsZHJlbiBUcmVlTm9kZVxuICAgIGNvbnN0IG5vZGVMaXN0ID0gdGhpcy5nZXROb2RlQ2hpbGRyZW4oKTtcblxuICAgIGlmIChub2RlTGlzdC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGxldCAkY2hpbGRyZW47XG4gICAgaWYgKGV4cGFuZGVkKSB7XG4gICAgICBsZXQgdHJlZU5vZGVzID0gQ2hpbGRyZW4ubWFwKG5vZGVMaXN0LCAobm9kZSwgaW5kZXgpID0+IChcbiAgICAgICAgcmVuZGVyVHJlZU5vZGUobm9kZSwgaW5kZXgsIHBvcylcbiAgICAgICkpO1xuICAgICAgaWYgKHdyYXBwZXIpIHtcbiAgICAgICAgdHJlZU5vZGVzID0gd3JhcHBlcih0cmVlTm9kZXMpO1xuICAgICAgfVxuICAgICAgJGNoaWxkcmVuID0gKFxuICAgICAgICA8dWwgaGlkZGVuPXshZXhwYW5kZWR9PlxuICAgICAgICAgIHt0cmVlTm9kZXN9XG4gICAgICAgIDwvdWw+XG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8QW5pbWF0ZVxuICAgICAgICB7Li4uYW5pbVByb3BzfVxuICAgICAgICBoaWRkZW5Qcm9wPVwiaGlkZGVuXCJcbiAgICAgICAgdHJhbnNpdGlvbkFwcGVhcj17dHJhbnNpdGlvbkFwcGVhcn1cbiAgICAgICAgY29tcG9uZW50PVwiXCJcbiAgICAgID5cbiAgICAgICAgeyRjaGlsZHJlbn1cbiAgICAgIDwvQW5pbWF0ZT5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBjbGFzc05hbWUsXG4gICAgICBkcmFnT3ZlciwgZHJhZ092ZXJHYXBUb3AsIGRyYWdPdmVyR2FwQm90dG9tLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHtcbiAgICAgIHJjVHJlZToge1xuICAgICAgICBwcmVmaXhDbHMsXG4gICAgICAgIGZpbHRlclRyZWVOb2RlLFxuICAgICAgfSxcbiAgICB9ID0gdGhpcy5jb250ZXh0O1xuICAgIGNvbnN0IGRpc2FibGVkID0gdGhpcy5pc0Rpc2FibGVkKCk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGxpXG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcyhjbGFzc05hbWUsIHtcbiAgICAgICAgICBbYCR7cHJlZml4Q2xzfS10cmVlbm9kZS1kaXNhYmxlZGBdOiBkaXNhYmxlZCxcbiAgICAgICAgICAnZHJhZy1vdmVyJzogIWRpc2FibGVkICYmIGRyYWdPdmVyLFxuICAgICAgICAgICdkcmFnLW92ZXItZ2FwLXRvcCc6ICFkaXNhYmxlZCAmJiBkcmFnT3ZlckdhcFRvcCxcbiAgICAgICAgICAnZHJhZy1vdmVyLWdhcC1ib3R0b20nOiAhZGlzYWJsZWQgJiYgZHJhZ092ZXJHYXBCb3R0b20sXG4gICAgICAgICAgJ2ZpbHRlci1ub2RlJzogZmlsdGVyVHJlZU5vZGUgJiYgZmlsdGVyVHJlZU5vZGUodGhpcyksXG4gICAgICAgIH0pfVxuXG4gICAgICAgIG9uRHJhZ0VudGVyPXt0aGlzLm9uRHJhZ0VudGVyfVxuICAgICAgICBvbkRyYWdPdmVyPXt0aGlzLm9uRHJhZ092ZXJ9XG4gICAgICAgIG9uRHJhZ0xlYXZlPXt0aGlzLm9uRHJhZ0xlYXZlfVxuICAgICAgICBvbkRyb3A9e3RoaXMub25Ecm9wfVxuICAgICAgICBvbkRyYWdFbmQ9e3RoaXMub25EcmFnRW5kfVxuICAgICAgPlxuICAgICAgICB7dGhpcy5yZW5kZXJTd2l0Y2hlcigpfVxuICAgICAgICB7dGhpcy5yZW5kZXJDaGVja2JveCgpfVxuICAgICAgICB7dGhpcy5yZW5kZXJTZWxlY3RvcigpfVxuICAgICAgICB7dGhpcy5yZW5kZXJDaGlsZHJlbigpfVxuICAgICAgPC9saT5cbiAgICApO1xuICB9XG59XG4iXX0=