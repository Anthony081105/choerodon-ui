{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components/auto-complete/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, {\n  Children,\n  ClassicComponentClass,\n  Component,\n  FormEventHandler,\n  isValidElement,\n  ReactElement,\n} from 'react';\nimport classNames from 'classnames';\nimport Select, { AbstractSelectProps, OptGroupProps, OptionProps, SelectValue } from '../select';\nimport Input from '../input';\nimport InputElement from './InputElement';\nimport { OptGroup, Option } from '../rc-components/select';\nimport { Size } from '../_util/enum';\nimport { SelectMode } from '../select/enum';\nimport { getPrefixCls } from '../configure';\n\nexport interface DataSourceItemObject {\n  value: string;\n  text: string;\n}\n\nexport type DataSourceItemType = string | DataSourceItemObject;\n\nexport interface AutoCompleteInputProps {\n  onChange?: FormEventHandler<any>;\n  value: any;\n}\n\nexport type ValidInputElement =\n  | HTMLInputElement\n  | HTMLTextAreaElement\n  | ReactElement<AutoCompleteInputProps>;\n\nexport interface AutoCompleteProps extends AbstractSelectProps {\n  value?: SelectValue;\n  defaultValue?: SelectValue;\n  dataSource: DataSourceItemType[];\n  optionLabelProp?: string;\n  onChange?: (value: SelectValue) => void;\n  onSelect?: (value: SelectValue, option: Object) => any;\n  children?: ValidInputElement | ReactElement<OptionProps> | ReactElement<OptionProps>[];\n}\n\nfunction isSelectOptionOrSelectOptGroup(child: any): Boolean {\n  return child && child.type && (child.type.isSelectOption || child.type.isSelectOptGroup);\n}\n\nexport default class AutoComplete extends Component<AutoCompleteProps, {}> {\n  static displayName = 'AutoComplete';\n\n  static Option = Option as ClassicComponentClass<OptionProps>;\n\n  static OptGroup = OptGroup as ClassicComponentClass<OptGroupProps>;\n\n  static defaultProps = {\n    transitionName: 'slide-up',\n    optionLabelProp: 'children',\n    choiceTransitionName: 'zoom',\n    showSearch: false,\n    filterOption: false,\n  };\n\n  private select: any;\n\n  getInputElement = () => {\n    const { children } = this.props;\n    const element =\n      children && isValidElement(children) && children.type !== Option ? (\n        Children.only(children)\n      ) : (\n        <Input border={false} />\n      );\n    const elementProps = { ...(element as ReactElement<any>).props };\n\n    delete elementProps.children;\n    return <InputElement {...elementProps}>{element}</InputElement>;\n  };\n\n  focus() {\n    this.select.focus();\n  }\n\n  blur() {\n    this.select.blur();\n  }\n\n  saveSelect = (node: any) => {\n    this.select = node;\n  };\n\n  render() {\n    const {\n      size,\n      className = '',\n      notFoundContent,\n      prefixCls: customizePrefixCls,\n      optionLabelProp,\n      dataSource,\n      children,\n    } = this.props;\n    const prefixCls = getPrefixCls('select', customizePrefixCls);\n\n    const cls = classNames({\n      [`${prefixCls}-lg`]: size === Size.large,\n      [`${prefixCls}-sm`]: size === Size.small,\n      [className]: !!className,\n      [`${prefixCls}-show-search`]: true,\n      [`${prefixCls}-auto-complete`]: true,\n    });\n\n    let options;\n    const childArray = Children.toArray(children);\n    if (childArray.length && isSelectOptionOrSelectOptGroup(childArray[0])) {\n      options = children;\n    } else {\n      options = dataSource\n        ? dataSource.map(item => {\n            if (isValidElement(item)) {\n              return item;\n            }\n            switch (typeof item) {\n              case 'string':\n                return <Option key={item as string}>{item}</Option>;\n              case 'object':\n                return (\n                  <Option key={(item as DataSourceItemObject).value}>\n                    {(item as DataSourceItemObject).text}\n                  </Option>\n                );\n              default:\n                throw new Error(\n                  'AutoComplete[dataSource] only supports type `string[] | Object[]`.',\n                );\n            }\n          })\n        : [];\n    }\n\n    return (\n      <Select\n        {...this.props}\n        prefixCls={prefixCls}\n        className={cls}\n        mode={SelectMode.combobox}\n        optionLabelProp={optionLabelProp}\n        getInputElement={this.getInputElement}\n        notFoundContent={notFoundContent}\n        ref={this.saveSelect}\n      >\n        {options}\n      </Select>\n    );\n  }\n}\n"]}