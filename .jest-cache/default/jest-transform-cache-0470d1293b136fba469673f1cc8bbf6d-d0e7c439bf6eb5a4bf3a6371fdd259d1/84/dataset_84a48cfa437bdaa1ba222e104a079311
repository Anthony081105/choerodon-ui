33205c8aa2ab4a48d987e47d102e3b58
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = _default;
exports.dsTempleList = void 0;

var _mockjs = _interopRequireDefault(require("mockjs"));

var dsMutationsT = {
  rows: [],
  total: 1000,
  success: '@boolean()'
};
var dsQueriesT = {
  'rows|10': [{
    userid: '@guid()',
    'age|18-100': 34,
    name: '@cname()',
    code_description: '员工状态',
    code_code: 'HR.EMPLOYEE_STATUS',
    code_select: 'HR.EMPLOYEE_GENDER',
    codeMultiple_description: '@last(),@last()',
    codeMultiple_code: [/1[0-9]{10}/, /1[0-9]{10}/],
    sex: /[MF]/,
    'sexMultiple|1-2': [/[MF]/],
    account: {
      multiple: /M|F|M,F|F,M/
    },
    enable: '@boolean()',
    frozen: /[NY]/,
    date: {
      startDate: null,
      endDate: null
    },
    other: {
      'enemy|3': [{
        userid: '@guid()',
        'age|18-100': 34,
        name: '@cname()',
        sex: /[MF]/,
        'friends|3': [{
          userid: '@guid()',
          'age|18-100': 34,
          name: '@cname()',
          sex: /[MF]/
        }]
      }]
    }
  }],
  total: 1000,
  success: true
};
var dsLanguagesT = {
  rows: [{
    name: {
      zh_CN: '@cname()',
      en_GB: '@name()',
      en_US: '@name()'
    },
    'first-name': {
      zh_CN: '@cname()',
      en_GB: '@name()',
      en_US: '@name()'
    }
  }],
  total: 1,
  success: true
};
var dsValidateT = [true];
var dsMutationsR = /\/dataset\/user\/mutations/;
var dsQueriesR = /\/dataset\/user\/queries/;
var dsLanguagesR = /\/dataset\/user\/languages/;
var dsValidateR = /\/dataset\/user\/validate/;

var dsMutationsD = _mockjs["default"].mock(dsMutationsT);

var dsQueriesD = _mockjs["default"].mock(dsQueriesT);

var dsLanguagesD = _mockjs["default"].mock(dsLanguagesT);

var dsValidateD = _mockjs["default"].mock(dsValidateT);

function _default() {
  if (typeof window !== 'undefined') {
    _mockjs["default"].mock(dsMutationsR, dsMutationsT);

    _mockjs["default"].mock(dsQueriesR, dsQueriesT);

    _mockjs["default"].mock(dsLanguagesR, dsLanguagesT);

    _mockjs["default"].mock(dsValidateR, dsValidateT);
  }
}

var dsTempleList = [{
  rule: dsMutationsR,
  data: dsMutationsD
}, {
  rule: dsQueriesR,
  data: dsQueriesD
}, {
  rule: dsLanguagesR,
  data: dsLanguagesD
}, {
  rule: dsValidateR,
  data: dsValidateD
}];
exports.dsTempleList = dsTempleList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRhdGFzZXQuanMiXSwibmFtZXMiOlsiZHNNdXRhdGlvbnNUIiwicm93cyIsInRvdGFsIiwic3VjY2VzcyIsImRzUXVlcmllc1QiLCJ1c2VyaWQiLCJuYW1lIiwiY29kZV9kZXNjcmlwdGlvbiIsImNvZGVfY29kZSIsImNvZGVfc2VsZWN0IiwiY29kZU11bHRpcGxlX2Rlc2NyaXB0aW9uIiwiY29kZU11bHRpcGxlX2NvZGUiLCJzZXgiLCJhY2NvdW50IiwibXVsdGlwbGUiLCJlbmFibGUiLCJmcm96ZW4iLCJkYXRlIiwic3RhcnREYXRlIiwiZW5kRGF0ZSIsIm90aGVyIiwiZHNMYW5ndWFnZXNUIiwiemhfQ04iLCJlbl9HQiIsImVuX1VTIiwiZHNWYWxpZGF0ZVQiLCJkc011dGF0aW9uc1IiLCJkc1F1ZXJpZXNSIiwiZHNMYW5ndWFnZXNSIiwiZHNWYWxpZGF0ZVIiLCJkc011dGF0aW9uc0QiLCJNb2NrIiwibW9jayIsImRzUXVlcmllc0QiLCJkc0xhbmd1YWdlc0QiLCJkc1ZhbGlkYXRlRCIsIndpbmRvdyIsImRzVGVtcGxlTGlzdCIsInJ1bGUiLCJkYXRhIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7O0FBRUEsSUFBTUEsWUFBWSxHQUFHO0FBQ25CQyxFQUFBQSxJQUFJLEVBQUUsRUFEYTtBQUVuQkMsRUFBQUEsS0FBSyxFQUFFLElBRlk7QUFHbkJDLEVBQUFBLE9BQU8sRUFBRTtBQUhVLENBQXJCO0FBS0EsSUFBTUMsVUFBVSxHQUFHO0FBQ2pCLGFBQVcsQ0FDVDtBQUNFQyxJQUFBQSxNQUFNLEVBQUUsU0FEVjtBQUVFLGtCQUFjLEVBRmhCO0FBR0VDLElBQUFBLElBQUksRUFBRSxVQUhSO0FBSUVDLElBQUFBLGdCQUFnQixFQUFFLE1BSnBCO0FBS0VDLElBQUFBLFNBQVMsRUFBRSxvQkFMYjtBQU1FQyxJQUFBQSxXQUFXLEVBQUUsb0JBTmY7QUFPRUMsSUFBQUEsd0JBQXdCLEVBQUUsaUJBUDVCO0FBUUVDLElBQUFBLGlCQUFpQixFQUFFLENB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SSxFQUFBQSxJQUFJLEVBQUVULFdBQVI7QUFBcUJVLEVBQUFBLElBQUksRUFBRUo7QUFBM0IsQ0FKMEIsQ0FBckIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTW9jayBmcm9tICdtb2NranMnO1xuXG5jb25zdCBkc011dGF0aW9uc1QgPSB7XG4gIHJvd3M6IFtdLFxuICB0b3RhbDogMTAwMCxcbiAgc3VjY2VzczogJ0Bib29sZWFuKCknLFxufTtcbmNvbnN0IGRzUXVlcmllc1QgPSB7XG4gICdyb3dzfDEwJzogW1xuICAgIHtcbiAgICAgIHVzZXJpZDogJ0BndWlkKCknLFxuICAgICAgJ2FnZXwxOC0xMDAnOiAzNCxcbiAgICAgIG5hbWU6ICdAY25hbWUoKScsXG4gICAgICBjb2RlX2Rlc2NyaXB0aW9uOiAn5ZGY5bel54q25oCBJyxcbiAgICAgIGNvZGVfY29kZTogJ0hSLkVNUExPWUVFX1NUQVRVUycsXG4gICAgICBjb2RlX3NlbGVjdDogJ0hSLkVNUExPWUVFX0dFTkRFUicsXG4gICAgICBjb2RlTXVsdGlwbGVfZGVzY3JpcHRpb246ICdAbGFzdCgpLEBsYXN0KCknLFxuICAgICAgY29kZU11bHRpcGxlX2NvZGU6IFsvMVswLTldezEwfS8sIC8xWzAtOV17MTB9L10sXG4gICAgICBzZXg6IC9bTUZdLyxcbiAgICAgICdzZXhNdWx0aXBsZXwxLTInOiBbL1tNRl0vXSxcbiAgICAgIGFjY291bnQ6IHtcbiAgICAgICAgbXVsdGlwbGU6IC9NfEZ8TSxGfEYsTS8sXG4gICAgICB9LFxuICAgICAgZW5hYmxlOiAnQGJvb2xlYW4oKScsXG4gICAgICBmcm96ZW46IC9bTlldLyxcbiAgICAgIGRhdGU6IHtcbiAgICAgICAgc3RhcnREYXRlOiBudWxsLFxuICAgICAgICBlbmREYXRlOiBudWxsLFxuICAgICAgfSxcbiAgICAgIG90aGVyOiB7XG4gICAgICAgICdlbmVteXwzJzogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHVzZXJpZDogJ0BndWlkKCknLFxuICAgICAgICAgICAgJ2FnZXwxOC0xMDAnOiAzNCxcbiAgICAgICAgICAgIG5hbWU6ICdAY25hbWUoKScsXG4gICAgICAgICAgICBzZXg6IC9bTUZdLyxcbiAgICAgICAgICAgICdmcmllbmRzfDMnOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB1c2VyaWQ6ICdAZ3VpZCgpJyxcbiAgICAgICAgICAgICAgICAnYWdlfDE4LTEwMCc6IDM0LFxuICAgICAgICAgICAgICAgIG5hbWU6ICdAY25hbWUoKScsXG4gICAgICAgICAgICAgICAgc2V4OiAvW01GXS8sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICB9LFxuICAgIH0sXG4gIF0sXG4gIHRvdGFsOiAxMDAwLFxuICBzdWNjZXNzOiB0cnVlLFxufTtcblxuY29uc3QgZHNMYW5ndWFnZXNUID0ge1xuICByb3dzOiBbXG4gICAge1xuICAgICAgbmFtZToge1xuICAgICAgICB6aF9DTjogJ0BjbmFtZSgpJyxcbiAgICAgICAgZW5fR0I6ICdAbmFtZSgpJyxcbiAgICAgICAgZW5fVVM6ICdAbmFtZSgpJyxcbiAgICAgIH0sXG4gICAgICAnZmlyc3QtbmFtZSc6IHtcbiAgICAgICAgemhfQ046ICdAY25hbWUoKScsXG4gICAgICAgIGVuX0dCOiAnQG5hbWUoKScsXG4gICAgICAgIGVuX1VTOiAnQG5hbWUoKScsXG4gICAgICB9LFxuICAgIH0sXG4gIF0sXG4gIHRvdGFsOiAxLFxuICBzdWNjZXNzOiB0cnVlLFxufTtcbmNvbnN0IGRzVmFsaWRhdGVUID0gW3RydWVdO1xuXG5jb25zdCBkc011dGF0aW9uc1IgPSAvXFwvZGF0YXNldFxcL3VzZXJcXC9tdXRhdGlvbnMvO1xuY29uc3QgZHNRdWVyaWVzUiA9IC9cXC9kYXRhc2V0XFwvdXNlclxcL3F1ZXJpZXMvO1xuY29uc3QgZHNMYW5ndWFnZXNSID0gL1xcL2RhdGFzZXRcXC91c2VyXFwvbGFuZ3VhZ2VzLztcbmNvbnN0IGRzVmFsaWRhdGVSID0gL1xcL2RhdGFzZXRcXC91c2VyXFwvdmFsaWRhdGUvO1xuY29uc3QgZHNNdXRhdGlvbnNEID0gTW9jay5tb2NrKGRzTXV0YXRpb25zVCk7XG5jb25zdCBkc1F1ZXJpZXNEID0gTW9jay5tb2NrKGRzUXVlcmllc1QpO1xuY29uc3QgZHNMYW5ndWFnZXNEID0gTW9jay5tb2NrKGRzTGFuZ3VhZ2VzVCk7XG5jb25zdCBkc1ZhbGlkYXRlRCA9IE1vY2subW9jayhkc1ZhbGlkYXRlVCk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBNb2NrLm1vY2soZHNNdXRhdGlvbnNSLCBkc011dGF0aW9uc1QpO1xuXG4gICAgTW9jay5tb2NrKGRzUXVlcmllc1IsIGRzUXVlcmllc1QpO1xuXG4gICAgTW9jay5tb2NrKGRzTGFuZ3VhZ2VzUiwgZHNMYW5ndWFnZXNUKTtcblxuICAgIE1vY2subW9jayhkc1ZhbGlkYXRlUiwgZHNWYWxpZGF0ZVQpO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBkc1RlbXBsZUxpc3QgPSBbXG4gIHsgcnVsZTogZHNNdXRhdGlvbnNSLCBkYXRhOiBkc011dGF0aW9uc0QgfSxcbiAgeyBydWxlOiBkc1F1ZXJpZXNSLCBkYXRhOiBkc1F1ZXJpZXNEIH0sXG4gIHsgcnVsZTogZHNMYW5ndWFnZXNSLCBkYXRhOiBkc0xhbmd1YWdlc0QgfSxcbiAgeyBydWxlOiBkc1ZhbGlkYXRlUiwgZGF0YTogZHNWYWxpZGF0ZUQgfSxcbl07XG4iXX0=