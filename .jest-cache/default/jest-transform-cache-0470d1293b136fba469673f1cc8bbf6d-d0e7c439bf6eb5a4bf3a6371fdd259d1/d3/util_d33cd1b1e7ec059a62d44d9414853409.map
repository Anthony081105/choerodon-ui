{"version":3,"sources":["tree/util.jsx"],"names":["clone","list","index","pos","ele","top","left","rect","doc","win","docElem","clientLeft","childList","Array","child","disabled","disableCheckbox","node","callback","subTreeData","children","getPosition","parent","getNodeChildren","data","key","parentPos","subNodes","Children","subPos","subNode","subIndex","processNode","checked","halfChecked","keyList","traverseTreeNodes","directly","childPos","parentPath","posToArr","childPath","len","i","statistic","keyNodes","posNodes","nodeList","eventKey","dragNodesKeys","nodePos","isParent","offsetTop","getOffset","treeNode","offsetHeight","pageY","event","gapHeight","props","getNodesStatistic","needExpandKeys","needExpandPathList","calcExpandedKeyList","Object","multiple","selectedKeys","tgtCheckedKeys","tgtHalfCheckedKeys","isCheckDisabled","allSubChecked","sub","conductUp","conductDown","checkedKeys","conduct","halfCheckedKeys","checkable","checkStrictly","keyProps","undefined","keys","calcCheckStateConduct"],"mappings":"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","sourcesContent":["/* eslint no-loop-func: 0*/\nimport { Children } from 'react';\nimport warning from '../../_util/warning';\n\nexport function arrDel(list, value) {\n  const clone = list.slice();\n  const index = clone.indexOf(value);\n  if (index >= 0) {\n    clone.splice(index, 1);\n  }\n  return clone;\n}\n\nexport function arrAdd(list, value) {\n  const clone = list.slice();\n  if (clone.indexOf(value) === -1) {\n    clone.push(value);\n  }\n  return clone;\n}\n\nexport function posToArr(pos) {\n  return pos.split('-');\n}\n\n// Only used when drag, not affect SSR.\nexport function getOffset(ele) {\n  if (!ele.getClientRects().length) {\n    return { top: 0, left: 0 };\n  }\n\n  const rect = ele.getBoundingClientRect();\n  if (rect.width || rect.height) {\n    const doc = ele.ownerDocument;\n    const win = doc.defaultView;\n    const docElem = doc.documentElement;\n\n    return {\n      top: rect.top + win.pageYOffset - docElem.clientTop,\n      left: rect.left + win.pageXOffset - docElem.clientLeft,\n    };\n  }\n\n  return rect;\n}\n\nexport function getPosition(level, index) {\n  return `${level}-${index}`;\n}\n\nexport function getNodeChildren(children) {\n  const childList = Array.isArray(children) ? children : [children];\n  return childList.filter(child => child && child.type && child.type.isTreeNode);\n}\n\nexport function isCheckDisabled(node) {\n  const { disabled, disableCheckbox } = node.props || {};\n  return !!(disabled || disableCheckbox);\n}\n\nexport function traverseTreeNodes(treeNodes, subTreeData, callback) {\n  if (typeof subTreeData === 'function') {\n    callback = subTreeData;\n    subTreeData = false;\n  }\n\n  function processNode(node, index, parent) {\n    const children = node ? node.props.children : treeNodes;\n    const pos = node ? getPosition(parent.pos, index) : 0;\n\n    // Filter children\n    const childList = getNodeChildren(children);\n\n    // Process node if is not root\n    if (node) {\n      const data = {\n        node,\n        index,\n        pos,\n        key: node.key || pos,\n        parentPos: parent.node ? parent.pos : null,\n      };\n\n      // Children data is not must have\n      if (subTreeData) {\n        // Statistic children\n        const subNodes = [];\n        Children.forEach(childList, (subNode, subIndex) => {\n          // Provide limit snapshot\n          const subPos = getPosition(pos, index);\n          subNodes.push({\n            node: subNode,\n            key: subNode.key || subPos,\n            pos: subPos,\n            index: subIndex,\n          });\n        });\n        data.subNodes = subNodes;\n      }\n\n      // Can break traverse by return false\n      if (callback(data) === false) {\n        return;\n      }\n    }\n\n    // Process children node\n    Children.forEach(childList, (subNode, subIndex) => {\n      processNode(subNode, subIndex, { node, pos });\n    });\n  }\n\n  processNode(null);\n}\n\n/**\n * [Legacy] Return halfChecked when it has value.\n * @param checkedKeys\n * @param halfChecked\n * @returns {*}\n */\nexport function getStrictlyValue(checkedKeys, halfChecked) {\n  if (halfChecked) {\n    return { checked: checkedKeys, halfChecked };\n  }\n  return checkedKeys;\n}\n\nexport function getFullKeyList(treeNodes) {\n  const keyList = [];\n  traverseTreeNodes(treeNodes, ({ key }) => {\n    keyList.push(key);\n  });\n  return keyList;\n}\n\n/**\n * Check position relation.\n * @param parentPos\n * @param childPos\n * @param directly only directly parent can be true\n * @returns {boolean}\n */\nexport function isParent(parentPos, childPos, directly = false) {\n  if (!parentPos || !childPos || parentPos.length > childPos.length) return false;\n\n  const parentPath = posToArr(parentPos);\n  const childPath = posToArr(childPos);\n\n  // Directly check\n  if (directly && parentPath.length !== childPath.length - 1) return false;\n\n  const len = parentPath.length;\n  for (let i = 0; i < len; i += 1) {\n    if (parentPath[i] !== childPath[i]) return false;\n  }\n\n  return true;\n}\n\n/**\n * Statistic TreeNodes info\n * @param treeNodes\n * @returns {{}}\n */\nexport function getNodesStatistic(treeNodes) {\n  const statistic = {\n    keyNodes: {},\n    posNodes: {},\n    nodeList: [],\n  };\n\n  traverseTreeNodes(treeNodes, true, ({ node, index, pos, key, subNodes, parentPos }) => {\n    const data = { node, index, pos, key, subNodes, parentPos };\n    statistic.keyNodes[key] = data;\n    statistic.posNodes[pos] = data;\n    statistic.nodeList.push(data);\n  });\n\n  return statistic;\n}\n\nexport function getDragNodesKeys(treeNodes, node) {\n  const { eventKey, pos } = node.props;\n  const dragNodesKeys = [];\n\n  traverseTreeNodes(treeNodes, ({ pos: nodePos, key }) => {\n    if (isParent(pos, nodePos)) {\n      dragNodesKeys.push(key);\n    }\n  });\n  dragNodesKeys.push(eventKey || pos);\n  return dragNodesKeys;\n}\n\nexport function calcDropPosition(event, treeNode) {\n  const offsetTop = getOffset(treeNode.selectHandle).top;\n  const offsetHeight = treeNode.selectHandle.offsetHeight;\n  const pageY = event.pageY;\n  const gapHeight = 2; // [Legacy] TODO: remove hard code\n  if (pageY > offsetTop + offsetHeight - gapHeight) {\n    return 1;\n  }\n  if (pageY < offsetTop + gapHeight) {\n    return -1;\n  }\n  return 0;\n}\n\n/**\n * Auto expand all related node when sub node is expanded\n * @param keyList\n * @param props\n * @returns [string]\n */\nexport function calcExpandedKeys(keyList, props) {\n  if (!keyList) {\n    return [];\n  }\n\n  const { children } = props;\n\n  // Fill parent expanded keys\n  const { keyNodes, nodeList } = getNodesStatistic(children);\n  const needExpandKeys = {};\n  const needExpandPathList = [];\n\n  // Fill expanded nodes\n  keyList.forEach(key => {\n    const node = keyNodes[key];\n    if (node) {\n      needExpandKeys[key] = true;\n      needExpandPathList.push(node.pos);\n    }\n  });\n\n  // Match parent by path\n  nodeList.forEach(({ pos, key }) => {\n    if (needExpandPathList.some(childPos => isParent(pos, childPos))) {\n      needExpandKeys[key] = true;\n    }\n  });\n\n  const calcExpandedKeyList = Object.keys(needExpandKeys);\n\n  // [Legacy] Return origin keyList if calc list is empty\n  return calcExpandedKeyList.length ? calcExpandedKeyList : keyList;\n}\n\n/**\n * Return selectedKeys according with multiple prop\n * @param selectedKeys\n * @param props\n * @returns [string]\n */\nexport function calcSelectedKeys(selectedKeys, props) {\n  if (!selectedKeys) {\n    return undefined;\n  }\n\n  const { multiple } = props;\n  if (multiple) {\n    return selectedKeys.slice();\n  }\n\n  if (selectedKeys.length) {\n    return [selectedKeys[0]];\n  }\n  return selectedKeys;\n}\n\n/**\n * Check conduct is by key level. It pass though up & down.\n * When conduct target node is check means already conducted will be skip.\n * @param treeNodes\n * @param checkedKeys\n * @returns {{checkedKeys: Array, halfCheckedKeys: Array}}\n */\nexport function calcCheckStateConduct(treeNodes, checkedKeys) {\n  const { keyNodes, posNodes } = getNodesStatistic(treeNodes);\n\n  const tgtCheckedKeys = {};\n  const tgtHalfCheckedKeys = {};\n\n  // Conduct up\n  function conductUp(key, halfChecked) {\n    if (tgtCheckedKeys[key]) return;\n\n    const { subNodes = [], parentPos, node } = keyNodes[key];\n    if (isCheckDisabled(node)) return;\n\n    const allSubChecked =\n      !halfChecked &&\n      subNodes.filter(sub => !isCheckDisabled(sub.node)).every(sub => tgtCheckedKeys[sub.key]);\n\n    if (allSubChecked) {\n      tgtCheckedKeys[key] = true;\n    } else {\n      tgtHalfCheckedKeys[key] = true;\n    }\n\n    if (parentPos !== null) {\n      conductUp(posNodes[parentPos].key, !allSubChecked);\n    }\n  }\n\n  // Conduct down\n  function conductDown(key) {\n    if (tgtCheckedKeys[key]) return;\n    const { subNodes = [], node } = keyNodes[key];\n\n    if (isCheckDisabled(node)) return;\n\n    tgtCheckedKeys[key] = true;\n\n    subNodes.forEach(sub => {\n      conductDown(sub.key);\n    });\n  }\n\n  function conduct(key) {\n    if (!keyNodes[key]) {\n      warning(false, `'${key}' does not exist in the tree.`);\n      return;\n    }\n\n    const { subNodes = [], parentPos, node } = keyNodes[key];\n\n    tgtCheckedKeys[key] = true;\n\n    if (isCheckDisabled(node)) return;\n\n    // Conduct down\n    subNodes\n      .filter(sub => !isCheckDisabled(sub.node))\n      .forEach(sub => {\n        conductDown(sub.key);\n      });\n\n    // Conduct up\n    if (parentPos !== null) {\n      conductUp(posNodes[parentPos].key);\n    }\n  }\n\n  checkedKeys.forEach(key => {\n    conduct(key);\n  });\n\n  return {\n    checkedKeys: Object.keys(tgtCheckedKeys),\n    halfCheckedKeys: Object.keys(tgtHalfCheckedKeys).filter(key => !tgtCheckedKeys[key]),\n  };\n}\n\n/**\n * Calculate the value of checked and halfChecked keys.\n * This should be only run in init or props changed.\n */\nexport function calcCheckedKeys(keys, props) {\n  const { checkable, children, checkStrictly } = props;\n\n  if (!checkable || !keys) {\n    return null;\n  }\n\n  // Convert keys to object format\n  let keyProps;\n  if (Array.isArray(keys)) {\n    // [Legacy] Follow the api doc\n    keyProps = {\n      checkedKeys: keys,\n      halfCheckedKeys: undefined,\n    };\n  } else if (typeof keys === 'object') {\n    keyProps = {\n      checkedKeys: keys.checked || undefined,\n      halfCheckedKeys: keys.halfChecked || undefined,\n    };\n  } else {\n    warning(false, '`CheckedKeys` is not an array or an object');\n    return null;\n  }\n\n  // Do nothing if is checkStrictly mode\n  if (checkStrictly) {\n    return keyProps;\n  }\n\n  // Conduct calculate the check status\n  const { checkedKeys = [] } = keyProps;\n  return calcCheckStateConduct(children, checkedKeys);\n}\n"]}