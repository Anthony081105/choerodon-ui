9ea0217ebcec0fdd0dac118cdf8712b0
"use strict";

/* istanbul ignore next */
var cov_2bpj75c41i = function () {
  var path = "/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/code-area/lint/json.tsx";
  var hash = "b76facf463d1b6ec5d0baa9603c387cbc41ec0a8";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/code-area/lint/json.tsx",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 29
        },
        end: {
          line: 3,
          column: 84
        }
      },
      "1": {
        start: {
          line: 5,
          column: 19
        },
        end: {
          line: 5,
          column: 66
        }
      },
      "2": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 33,
          column: 1
        }
      },
      "3": {
        start: {
          line: 8,
          column: 2
        },
        end: {
          line: 8,
          column: 44
        }
      },
      "4": {
        start: {
          line: 10,
          column: 2
        },
        end: {
          line: 10,
          column: 40
        }
      },
      "5": {
        start: {
          line: 12,
          column: 19
        },
        end: {
          line: 12,
          column: 40
        }
      },
      "6": {
        start: {
          line: 14,
          column: 2
        },
        end: {
          line: 32,
          column: 5
        }
      },
      "7": {
        start: {
          line: 15,
          column: 16
        },
        end: {
          line: 15,
          column: 18
        }
      },
      "8": {
        start: {
          line: 16,
          column: 19
        },
        end: {
          line: 16,
          column: 76
        }
      },
      "9": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 25,
          column: 6
        }
      },
      "10": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 24
        }
      },
      "11": {
        start: {
          line: 20,
          column: 6
        },
        end: {
          line: 24,
          column: 9
        }
      },
      "12": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 29,
          column: 18
        }
      },
      "13": {
        start: {
          line: 28,
          column: 6
        },
        end: {
          line: 28,
          column: 27
        }
      },
      "14": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 31,
          column: 17
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 14,
            column: 44
          },
          end: {
            line: 14,
            column: 45
          }
        },
        loc: {
          start: {
            line: 14,
            column: 60
          },
          end: {
            line: 32,
            column: 3
          }
        },
        line: 14
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 18,
            column: 26
          },
          end: {
            line: 18,
            column: 27
          }
        },
        loc: {
          start: {
            line: 18,
            column: 47
          },
          end: {
            line: 25,
            column: 5
          }
        },
        line: 18
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 7,
            column: 0
          },
          end: {
            line: 33,
            column: 1
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 7,
            column: 0
          },
          end: {
            line: 33,
            column: 1
          }
        }, {
          start: {
            line: 7,
            column: 0
          },
          end: {
            line: 33,
            column: 1
          }
        }],
        line: 7
      },
      "1": {
        loc: {
          start: {
            line: 16,
            column: 19
          },
          end: {
            line: 16,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 16,
            column: 19
          },
          end: {
            line: 16,
            column: 49
          }
        }, {
          start: {
            line: 16,
            column: 53
          },
          end: {
            line: 16,
            column: 76
          }
        }],
        line: 16
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    _coverageSchema: "43e27e138ebf9cfc5966b082cf9a028302ed4184",
    hash: "b76facf463d1b6ec5d0baa9603c387cbc41ec0a8"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  return coverage[path] = coverageData;
}();

var _interopRequireDefault =
/* istanbul ignore next */
(cov_2bpj75c41i.s[0]++, require("@babel/runtime/helpers/interopRequireDefault"));

var _jsonlintMod =
/* istanbul ignore next */
(cov_2bpj75c41i.s[1]++, _interopRequireDefault(require("jsonlint-mod")));

/* istanbul ignore next */
cov_2bpj75c41i.s[2]++;

if (typeof window !== 'undefined') {
  /* istanbul ignore next */
  cov_2bpj75c41i.b[0][0]++;
  cov_2bpj75c41i.s[3]++;

  require('codemirror/addon/lint/lint.css');

  /* istanbul ignore next */
  cov_2bpj75c41i.s[4]++;

  require('codemirror/addon/lint/lint');

  var CodeMirror =
  /* istanbul ignore next */
  (cov_2bpj75c41i.s[5]++, require('codemirror'));

  /* istanbul ignore next */
  cov_2bpj75c41i.s[6]++;
  CodeMirror.registerHelper('lint', 'json', function (text) {
    /* istanbul ignore next */
    cov_2bpj75c41i.f[0]++;
    var found =
    /* istanbul ignore next */
    (cov_2bpj75c41i.s[7]++, []);
    var jsonlint =
    /* istanbul ignore next */
    (cov_2bpj75c41i.s[8]++,
    /* istanbul ignore next */
    (cov_2bpj75c41i.b[1][0]++, _jsonlintMod["default"].parser) ||
    /* istanbul ignore next */
    (cov_2bpj75c41i.b[1][1]++, _jsonlintMod["default"]));

    /* istanbul ignore next */
    cov_2bpj75c41i.s[9]++;

    jsonlint.parseError = function (str, _ref) {
      /* istanbul ignore next */
      cov_2bpj75c41i.f[1]++;
      var loc =
      /* istanbul ignore next */
      (cov_2bpj75c41i.s[10]++, _ref.loc);

      /* istanbul ignore next */
      cov_2bpj75c41i.s[11]++;
      found.push({
        from: CodeMirror.Pos(loc.first_line - 1, loc.first_column),
        to: CodeMirror.Pos(loc.last_line - 1, loc.last_column),
        message: str
      });
    };

    /* istanbul ignore next */
    cov_2bpj75c41i.s[12]++;

    try {
      /* istanbul ignore next */
      cov_2bpj75c41i.s[13]++;
      jsonlint.parse(text); // eslint-disable-next-line no-empty
    } catch (e) {}

    /* istanbul ignore next */
    cov_2bpj75c41i.s[14]++;
    return found;
  });
} else
/* istanbul ignore next */
{
  cov_2bpj75c41i.b[0][1]++;
}