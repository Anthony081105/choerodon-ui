{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components/tree/index.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAQA;;AACA;;AACA;;AAEA;;AACA;;AAGA;;IA8HqB,I;;;;;AAArB,kBAAA;AAAA;;AAAA;;;AAWE,UAAA,kBAAA,GAAqB,gBAAuC;AAAA,UAApC,MAAoC,QAApC,MAAoC;AAAA,UAA5B,OAA4B,QAA5B,OAA4B;AAAA,wBACvB,MAAK,KADkB;AAAA,UAClD,QADkD,eAClD,QADkD;AAAA,UACxC,YADwC,eACxC,YADwC;;AAE1D,UAAM,SAAS,GAAG,MAAK,YAAL,EAAlB;;AACA,UAAI,OAAJ,EAAa;AACX,eACE,gCAAC,oBAAD;AACE,UAAA,IAAI,EAAC;AAAA;AADP;AAEE,UAAA,SAAS,YAAK,SAAL,2BAFX;AAGE,UAAA,IAAI,EAAC;AAAA;;AAHP,UADF;AAOD;;AACD,UAAM,WAAW,aAAM,SAAN,mBAAjB;;AACA,UAAI,QAAJ,EAAc;AACZ,YAAI,MAAJ,EAAY;AACV,iBAAO,gCAAC,gBAAD;AAAM,YAAA,IAAI,EAAC,MAAX;AAAkB,YAAA,SAAS,YAAK,SAAL;AAA3B,YAAP;AACD;;AACD,eAAO,gCAAC,gBAAD;AAAM,UAAA,IAAI,EAAC,iBAAX;AAA6B,UAAA,SAAS,EAAE;AAAxC,UAAP;AACD;;AACD,UAAI,MAAJ,EAAY;AACV,eAAO,IAAP;AACD;;AACD,UAAI,YAAJ,EAAkB;AAChB,YAAM,iBAAiB,GAAG,YAAY,CAAC,KAAb,CAAmB,SAAnB,IAAgC,EAA1D;AACA,eAAO,yBAAa,YAAb,EAA2B;AAChC,UAAA,SAAS,EAAE,CAAC,iBAAD,EAAoB,WAApB;AADqB,SAA3B,CAAP;AAGD;;AACD,aAAO,gCAAC,gBAAD;AAAM,QAAA,IAAI,EAAC,iBAAX;AAA6B,QAAA,SAAS,EAAE;AAAxC,QAAP;AACD,KA7BD;;AAXF;AA+DC;;;;mCArBa;AAAA,UACF,SADE,GACY,KAAK,KADjB,CACF,SADE;AAEV,aAAO,6BAAa,MAAb,EAAqB,SAArB,CAAP;AACD;;;6BAEK;AACJ,UAAM,KAAK,GAAG,KAAK,KAAnB;AADI,UAEI,SAFJ,GAEiD,KAFjD,CAEI,SAFJ;AAAA,UAEe,QAFf,GAEiD,KAFjD,CAEe,QAFf;AAAA,UAEyB,SAFzB,GAEiD,KAFjD,CAEyB,SAFzB;AAAA,UAEoC,QAFpC,GAEiD,KAFjD,CAEoC,QAFpC;AAGJ,UAAM,SAAS,GAAG,KAAK,YAAL,EAAlB;AACA,aACE,gCAAC,gBAAD,gCACM,KADN;AAEE,QAAA,SAAS,EAAE,4BAAW,CAAC,QAAD,cAAgB,SAAhB,eAAX,EAAkD,SAAlD,CAFb;AAGE,QAAA,SAAS,EAAE,SAAS,GAAG;AAAM,UAAA,SAAS,YAAK,SAAL;AAAf,UAAH,GAAwD,SAH9E;AAIE,QAAA,YAAY,EAAE,KAAK,kBAJrB;AAKE,QAAA,SAAS,EAAE;AALb,UAOG,QAPH,CADF;AAWD;;;EA9D+B,gB;;;AACzB,IAAA,CAAA,WAAA,GAAc,MAAd;AAEA,IAAA,CAAA,QAAA,GAAW,cAAX;AAEA,IAAA,CAAA,YAAA,GAAe;AACpB,EAAA,SAAS,EAAE,KADS;AAEpB,EAAA,QAAQ,EAAE,KAFU;AAGpB,EAAA,aAAa,EAAE;AAHK,CAAf","sourcesContent":["import React, {\n  cloneElement,\n  Component,\n  CSSProperties,\n  MouseEventHandler,\n  ReactElement,\n  ReactNode,\n} from 'react';\nimport classNames from 'classnames';\nimport animation from '../_util/openAnimation';\nimport RcTree, { TreeNode } from '../rc-components/tree';\nimport { TreeEvent } from './enum';\nimport Icon from '../icon';\nimport Progress from '../progress';\nimport { ProgressType } from '../progress/enum';\nimport { Size } from '../_util/enum';\nimport { getPrefixCls } from '../configure';\n\nexport { TreeNode };\n\nexport interface TreeNodeAttribute {\n  eventKey: string;\n  prefixCls: string;\n  className: string;\n  expanded: boolean;\n  selected: boolean;\n  checked: boolean;\n  halfChecked: boolean;\n  children: React.ReactNode;\n  title: React.ReactNode;\n  pos: string;\n  dragOver: boolean;\n  dragOverGapTop: boolean;\n  dragOverGapBottom: boolean;\n  isLeaf: boolean;\n  selectable: boolean;\n  disabled: boolean;\n  disableCheckbox: boolean;\n}\n\nexport interface TreeNodeProps {\n  className?: string;\n  checkable?: boolean;\n  disabled?: boolean;\n  disableCheckbox?: boolean;\n  title?: string | React.ReactNode;\n  key?: string;\n  eventKey?: string;\n  isLeaf?: boolean;\n  checked?: boolean;\n  expanded?: boolean;\n  loading?: boolean;\n  selected?: boolean;\n  selectable?: boolean;\n  icon?: ((treeNode: TreeNodeAttribute) => React.ReactNode) | React.ReactNode;\n  children?: React.ReactNode;\n  [customProp: string]: any;\n}\n\nexport interface TreeNodeEvent {\n  event: TreeEvent;\n  node: TreeNode;\n  checked?: boolean;\n  checkedNodes?: TreeNode[];\n  selected?: boolean;\n  selectedNodes?: TreeNode[];\n}\n\nexport interface TreeNodeExpandEvent {\n  node: TreeNode;\n  expanded: boolean;\n}\n\nexport interface TreeNodeMouseEvent {\n  node: TreeNode;\n  event: MouseEventHandler<any>;\n}\n\nexport interface TreeProps {\n  showLine?: boolean;\n  className?: string;\n  /** 是否支持多选 */\n  multiple?: boolean;\n  /** 是否自动展开父节点 */\n  autoExpandParent?: boolean;\n  /** checkable状态下节点选择完全受控（父子节点选中状态不再关联） */\n  checkStrictly?: boolean;\n  /** 是否支持选中 */\n  checkable?: boolean;\n  /** 默认展开所有树节点 */\n  defaultExpandAll?: boolean;\n  /** 默认展开指定的树节点 */\n  defaultExpandedKeys?: string[];\n  /** （受控）展开指定的树节点 */\n  expandedKeys?: string[];\n  /** （受控）选中复选框的树节点 */\n  checkedKeys?: string[] | { checked: string[]; halfChecked: string[] };\n  /** 默认选中复选框的树节点 */\n  defaultCheckedKeys?: string[];\n  /** （受控）设置选中的树节点 */\n  selectedKeys?: string[];\n  /** 默认选中的树节点 */\n  defaultSelectedKeys?: string[];\n  /** 展开/收起节点时触发 */\n  onExpand?: (expandedKeys: string[], e: TreeNodeExpandEvent) => void | PromiseLike<any>;\n  /** 点击复选框触发 */\n  onCheck?: (checkedKeys: string[], e: TreeNodeEvent) => void;\n  /** 点击树节点触发 */\n  onSelect?: (selectedKeys: string[], e: TreeNodeEvent) => void;\n  /** filter some AntTreeNodes as you need. it should return true */\n  filterAntTreeNode?: (node: TreeNode) => boolean;\n  /** 异步加载数据 */\n  loadData?: (node: TreeNode) => PromiseLike<any>;\n  /** 响应右键点击 */\n  onRightClick?: (options: TreeNodeMouseEvent) => void;\n  /** 设置节点可拖拽（IE>8） */\n  draggable?: boolean;\n  /** 开始拖拽时调用 */\n  onDragStart?: (options: TreeNodeMouseEvent) => void;\n  /** dragenter 触发时调用 */\n  onDragEnter?: (options: TreeNodeMouseEvent) => void;\n  /** dragover 触发时调用 */\n  onDragOver?: (options: TreeNodeMouseEvent) => void;\n  /** dragleave 触发时调用 */\n  onDragLeave?: (options: TreeNodeMouseEvent) => void;\n  /** drop 触发时调用 */\n  onDrop?: (options: TreeNodeMouseEvent) => void;\n  style?: CSSProperties;\n  showIcon?: boolean;\n  icon?: (nodeProps: TreeNodeAttribute) => ReactNode;\n  switcherIcon?: ReactElement<any>;\n  prefixCls?: string;\n  filterTreeNode?: (node: TreeNode) => boolean;\n  focusable?: boolean;\n  tabIndex?: string | number;\n  openTransitionName?: string;\n  openAnimation?: string | object;\n  selectable?: boolean;\n  defaultExpandParent?: boolean;\n  children?: any;\n}\n\nexport default class Tree extends Component<TreeProps, any> {\n  static displayName = 'Tree';\n\n  static TreeNode = TreeNode;\n\n  static defaultProps = {\n    checkable: false,\n    showIcon: false,\n    openAnimation: animation,\n  };\n\n  renderSwitcherIcon = ({ isLeaf, loading }: TreeNodeProps) => {\n    const { showLine, switcherIcon } = this.props;\n    const prefixCls = this.getPrefixCls();\n    if (loading) {\n      return (\n        <Progress\n          type={ProgressType.loading}\n          className={`${prefixCls}-switcher-loading-icon`}\n          size={Size.small}\n        />\n      );\n    }\n    const switcherCls = `${prefixCls}-switcher-icon`;\n    if (showLine) {\n      if (isLeaf) {\n        return <Icon type=\"note\" className={`${prefixCls}-switcher-line-icon`} />;\n      }\n      return <Icon type=\"arrow_drop_down\" className={switcherCls} />;\n    }\n    if (isLeaf) {\n      return null;\n    }\n    if (switcherIcon) {\n      const switcherOriginCls = switcherIcon.props.className || '';\n      return cloneElement(switcherIcon, {\n        className: [switcherOriginCls, switcherCls],\n      });\n    }\n    return <Icon type=\"arrow_drop_down\" className={switcherCls} />;\n  };\n\n  getPrefixCls() {\n    const { prefixCls } = this.props;\n    return getPrefixCls('tree', prefixCls);\n  }\n\n  render() {\n    const props = this.props;\n    const { className, showIcon, checkable, children } = props;\n    const prefixCls = this.getPrefixCls();\n    return (\n      <RcTree\n        {...props}\n        className={classNames(!showIcon && `${prefixCls}-icon-hide`, className)}\n        checkable={checkable ? <span className={`${prefixCls}-checkbox-inner`} /> : checkable}\n        switcherIcon={this.renderSwitcherIcon}\n        prefixCls={prefixCls}\n      >\n        {children}\n      </RcTree>\n    );\n  }\n}\n"]}