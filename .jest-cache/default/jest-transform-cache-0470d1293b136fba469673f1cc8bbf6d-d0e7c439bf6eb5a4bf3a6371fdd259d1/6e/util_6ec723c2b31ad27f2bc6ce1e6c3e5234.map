{"version":3,"sources":["util.jsx"],"names":["arrDel","list","value","clone","slice","index","indexOf","splice","arrAdd","push","posToArr","pos","split","getOffset","ele","getClientRects","length","top","left","rect","getBoundingClientRect","width","height","doc","ownerDocument","win","defaultView","docElem","documentElement","pageYOffset","clientTop","pageXOffset","clientLeft","getPosition","level","getNodeChildren","children","childList","Array","isArray","filter","child","type","isTreeNode","isCheckDisabled","node","props","disabled","disableCheckbox","traverseTreeNodes","treeNodes","subTreeData","callback","processNode","parent","data","key","parentPos","subNodes","Children","forEach","subNode","subIndex","subPos","getStrictlyValue","checkedKeys","halfChecked","checked","getFullKeyList","keyList","isParent","childPos","directly","parentPath","childPath","len","i","getNodesStatistic","statistic","keyNodes","posNodes","nodeList","getDragNodesKeys","eventKey","dragNodesKeys","nodePos","calcDropPosition","event","treeNode","offsetTop","selectHandle","offsetHeight","pageY","gapHeight","calcExpandedKeys","needExpandKeys","needExpandPathList","some","calcExpandedKeyList","Object","keys","calcSelectedKeys","selectedKeys","undefined","multiple","calcCheckStateConduct","tgtCheckedKeys","tgtHalfCheckedKeys","conductUp","allSubChecked","sub","every","conductDown","conduct","halfCheckedKeys","calcCheckedKeys","checkable","checkStrictly","keyProps"],"mappings":"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","sourcesContent":["/* eslint no-loop-func: 0*/\nimport { Children } from 'react';\nimport warning from '../../_util/warning';\n\nexport function arrDel(list, value) {\n  const clone = list.slice();\n  const index = clone.indexOf(value);\n  if (index >= 0) {\n    clone.splice(index, 1);\n  }\n  return clone;\n}\n\nexport function arrAdd(list, value) {\n  const clone = list.slice();\n  if (clone.indexOf(value) === -1) {\n    clone.push(value);\n  }\n  return clone;\n}\n\nexport function posToArr(pos) {\n  return pos.split('-');\n}\n\n// Only used when drag, not affect SSR.\nexport function getOffset(ele) {\n  if (!ele.getClientRects().length) {\n    return { top: 0, left: 0 };\n  }\n\n  const rect = ele.getBoundingClientRect();\n  if (rect.width || rect.height) {\n    const doc = ele.ownerDocument;\n    const win = doc.defaultView;\n    const docElem = doc.documentElement;\n\n    return {\n      top: rect.top + win.pageYOffset - docElem.clientTop,\n      left: rect.left + win.pageXOffset - docElem.clientLeft,\n    };\n  }\n\n  return rect;\n}\n\nexport function getPosition(level, index) {\n  return `${level}-${index}`;\n}\n\nexport function getNodeChildren(children) {\n  const childList = Array.isArray(children) ? children : [children];\n  return childList.filter(child => child && child.type && child.type.isTreeNode);\n}\n\nexport function isCheckDisabled(node) {\n  const { disabled, disableCheckbox } = node.props || {};\n  return !!(disabled || disableCheckbox);\n}\n\nexport function traverseTreeNodes(treeNodes, subTreeData, callback) {\n  if (typeof subTreeData === 'function') {\n    callback = subTreeData;\n    subTreeData = false;\n  }\n\n  function processNode(node, index, parent) {\n    const children = node ? node.props.children : treeNodes;\n    const pos = node ? getPosition(parent.pos, index) : 0;\n\n    // Filter children\n    const childList = getNodeChildren(children);\n\n    // Process node if is not root\n    if (node) {\n      const data = {\n        node,\n        index,\n        pos,\n        key: node.key || pos,\n        parentPos: parent.node ? parent.pos : null,\n      };\n\n      // Children data is not must have\n      if (subTreeData) {\n        // Statistic children\n        const subNodes = [];\n        Children.forEach(childList, (subNode, subIndex) => {\n          // Provide limit snapshot\n          const subPos = getPosition(pos, index);\n          subNodes.push({\n            node: subNode,\n            key: subNode.key || subPos,\n            pos: subPos,\n            index: subIndex,\n          });\n        });\n        data.subNodes = subNodes;\n      }\n\n      // Can break traverse by return false\n      if (callback(data) === false) {\n        return;\n      }\n    }\n\n    // Process children node\n    Children.forEach(childList, (subNode, subIndex) => {\n      processNode(subNode, subIndex, { node, pos });\n    });\n  }\n\n  processNode(null);\n}\n\n/**\n * [Legacy] Return halfChecked when it has value.\n * @param checkedKeys\n * @param halfChecked\n * @returns {*}\n */\nexport function getStrictlyValue(checkedKeys, halfChecked) {\n  if (halfChecked) {\n    return { checked: checkedKeys, halfChecked };\n  }\n  return checkedKeys;\n}\n\nexport function getFullKeyList(treeNodes) {\n  const keyList = [];\n  traverseTreeNodes(treeNodes, ({ key }) => {\n    keyList.push(key);\n  });\n  return keyList;\n}\n\n/**\n * Check position relation.\n * @param parentPos\n * @param childPos\n * @param directly only directly parent can be true\n * @returns {boolean}\n */\nexport function isParent(parentPos, childPos, directly = false) {\n  if (!parentPos || !childPos || parentPos.length > childPos.length) return false;\n\n  const parentPath = posToArr(parentPos);\n  const childPath = posToArr(childPos);\n\n  // Directly check\n  if (directly && parentPath.length !== childPath.length - 1) return false;\n\n  const len = parentPath.length;\n  for (let i = 0; i < len; i += 1) {\n    if (parentPath[i] !== childPath[i]) return false;\n  }\n\n  return true;\n}\n\n/**\n * Statistic TreeNodes info\n * @param treeNodes\n * @returns {{}}\n */\nexport function getNodesStatistic(treeNodes) {\n  const statistic = {\n    keyNodes: {},\n    posNodes: {},\n    nodeList: [],\n  };\n\n  traverseTreeNodes(treeNodes, true, ({ node, index, pos, key, subNodes, parentPos }) => {\n    const data = { node, index, pos, key, subNodes, parentPos };\n    statistic.keyNodes[key] = data;\n    statistic.posNodes[pos] = data;\n    statistic.nodeList.push(data);\n  });\n\n  return statistic;\n}\n\nexport function getDragNodesKeys(treeNodes, node) {\n  const { eventKey, pos } = node.props;\n  const dragNodesKeys = [];\n\n  traverseTreeNodes(treeNodes, ({ pos: nodePos, key }) => {\n    if (isParent(pos, nodePos)) {\n      dragNodesKeys.push(key);\n    }\n  });\n  dragNodesKeys.push(eventKey || pos);\n  return dragNodesKeys;\n}\n\nexport function calcDropPosition(event, treeNode) {\n  const offsetTop = getOffset(treeNode.selectHandle).top;\n  const offsetHeight = treeNode.selectHandle.offsetHeight;\n  const pageY = event.pageY;\n  const gapHeight = 2; // [Legacy] TODO: remove hard code\n  if (pageY > offsetTop + offsetHeight - gapHeight) {\n    return 1;\n  }\n  if (pageY < offsetTop + gapHeight) {\n    return -1;\n  }\n  return 0;\n}\n\n/**\n * Auto expand all related node when sub node is expanded\n * @param keyList\n * @param props\n * @returns [string]\n */\nexport function calcExpandedKeys(keyList, props) {\n  if (!keyList) {\n    return [];\n  }\n\n  const { children } = props;\n\n  // Fill parent expanded keys\n  const { keyNodes, nodeList } = getNodesStatistic(children);\n  const needExpandKeys = {};\n  const needExpandPathList = [];\n\n  // Fill expanded nodes\n  keyList.forEach(key => {\n    const node = keyNodes[key];\n    if (node) {\n      needExpandKeys[key] = true;\n      needExpandPathList.push(node.pos);\n    }\n  });\n\n  // Match parent by path\n  nodeList.forEach(({ pos, key }) => {\n    if (needExpandPathList.some(childPos => isParent(pos, childPos))) {\n      needExpandKeys[key] = true;\n    }\n  });\n\n  const calcExpandedKeyList = Object.keys(needExpandKeys);\n\n  // [Legacy] Return origin keyList if calc list is empty\n  return calcExpandedKeyList.length ? calcExpandedKeyList : keyList;\n}\n\n/**\n * Return selectedKeys according with multiple prop\n * @param selectedKeys\n * @param props\n * @returns [string]\n */\nexport function calcSelectedKeys(selectedKeys, props) {\n  if (!selectedKeys) {\n    return undefined;\n  }\n\n  const { multiple } = props;\n  if (multiple) {\n    return selectedKeys.slice();\n  }\n\n  if (selectedKeys.length) {\n    return [selectedKeys[0]];\n  }\n  return selectedKeys;\n}\n\n/**\n * Check conduct is by key level. It pass though up & down.\n * When conduct target node is check means already conducted will be skip.\n * @param treeNodes\n * @param checkedKeys\n * @returns {{checkedKeys: Array, halfCheckedKeys: Array}}\n */\nexport function calcCheckStateConduct(treeNodes, checkedKeys) {\n  const { keyNodes, posNodes } = getNodesStatistic(treeNodes);\n\n  const tgtCheckedKeys = {};\n  const tgtHalfCheckedKeys = {};\n\n  // Conduct up\n  function conductUp(key, halfChecked) {\n    if (tgtCheckedKeys[key]) return;\n\n    const { subNodes = [], parentPos, node } = keyNodes[key];\n    if (isCheckDisabled(node)) return;\n\n    const allSubChecked =\n      !halfChecked &&\n      subNodes.filter(sub => !isCheckDisabled(sub.node)).every(sub => tgtCheckedKeys[sub.key]);\n\n    if (allSubChecked) {\n      tgtCheckedKeys[key] = true;\n    } else {\n      tgtHalfCheckedKeys[key] = true;\n    }\n\n    if (parentPos !== null) {\n      conductUp(posNodes[parentPos].key, !allSubChecked);\n    }\n  }\n\n  // Conduct down\n  function conductDown(key) {\n    if (tgtCheckedKeys[key]) return;\n    const { subNodes = [], node } = keyNodes[key];\n\n    if (isCheckDisabled(node)) return;\n\n    tgtCheckedKeys[key] = true;\n\n    subNodes.forEach(sub => {\n      conductDown(sub.key);\n    });\n  }\n\n  function conduct(key) {\n    if (!keyNodes[key]) {\n      warning(false, `'${key}' does not exist in the tree.`);\n      return;\n    }\n\n    const { subNodes = [], parentPos, node } = keyNodes[key];\n\n    tgtCheckedKeys[key] = true;\n\n    if (isCheckDisabled(node)) return;\n\n    // Conduct down\n    subNodes\n      .filter(sub => !isCheckDisabled(sub.node))\n      .forEach(sub => {\n        conductDown(sub.key);\n      });\n\n    // Conduct up\n    if (parentPos !== null) {\n      conductUp(posNodes[parentPos].key);\n    }\n  }\n\n  checkedKeys.forEach(key => {\n    conduct(key);\n  });\n\n  return {\n    checkedKeys: Object.keys(tgtCheckedKeys),\n    halfCheckedKeys: Object.keys(tgtHalfCheckedKeys).filter(key => !tgtCheckedKeys[key]),\n  };\n}\n\n/**\n * Calculate the value of checked and halfChecked keys.\n * This should be only run in init or props changed.\n */\nexport function calcCheckedKeys(keys, props) {\n  const { checkable, children, checkStrictly } = props;\n\n  if (!checkable || !keys) {\n    return null;\n  }\n\n  // Convert keys to object format\n  let keyProps;\n  if (Array.isArray(keys)) {\n    // [Legacy] Follow the api doc\n    keyProps = {\n      checkedKeys: keys,\n      halfCheckedKeys: undefined,\n    };\n  } else if (typeof keys === 'object') {\n    keyProps = {\n      checkedKeys: keys.checked || undefined,\n      halfCheckedKeys: keys.halfChecked || undefined,\n    };\n  } else {\n    warning(false, '`CheckedKeys` is not an array or an object');\n    return null;\n  }\n\n  // Do nothing if is checkStrictly mode\n  if (checkStrictly) {\n    return keyProps;\n  }\n\n  // Conduct calculate the check status\n  const { checkedKeys = [] } = keyProps;\n  return calcCheckStateConduct(children, checkedKeys);\n}\n"]}