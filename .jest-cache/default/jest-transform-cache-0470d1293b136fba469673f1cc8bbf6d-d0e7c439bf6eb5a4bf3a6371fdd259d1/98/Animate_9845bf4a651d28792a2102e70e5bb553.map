{"version":3,"sources":["animate/Animate.jsx"],"names":["defaultKey","Date","children","props","key","Animate","Component","getChildrenFromProps","childRef","exclusive","onAppear","noop","onEnd","onEnter","type","animUtil","onLeave","hiddenProp","currentChildren","end","child","nextProps","nextChildren","currentlyAnimatingKeys","Object","newChildren","currentChild","nextChild","newChild","hasPrev","showInNext","showInNow","hasNext","keysToEnter","keysToLeave","component","animation","transitionName","transitionEnter","transitionAppear","transitionLeave","Cmp","componentProps","otherProps","stateChildren","AnimateChild","ref","passedProps","PropTypes","string"],"mappings":"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","sourcesContent":["import { cloneElement, Component, createElement, isValidElement, } from 'react';\nimport PropTypes from 'prop-types';\nimport omit from 'lodash/omit';\nimport noop from 'lodash/noop';\nimport { findChildInChildrenByKey, findShownChildInChildrenByKey, isSameChildren, mergeChildren, toArrayChildren, } from './ChildrenUtils';\nimport AnimateChild from './AnimateChild';\nimport animUtil from './util';\nconst defaultKey = `animate_${Date.now()}`;\nfunction getChildrenFromProps(props) {\n    const { children } = props;\n    if (isValidElement(children)) {\n        if (!children.key) {\n            return cloneElement(children, {\n                key: defaultKey,\n            });\n        }\n    }\n    return children;\n}\nexport default class Animate extends Component {\n    constructor() {\n        super(...arguments);\n        this.currentlyAnimatingKeys = {};\n        this.keysToEnter = [];\n        this.keysToLeave = [];\n        this.state = {\n            children: toArrayChildren(getChildrenFromProps(this.props)),\n        };\n        this.childrenRefs = {};\n        this.performEnter = (key) => {\n            const childRef = this.childrenRefs[key];\n            if (childRef) {\n                this.currentlyAnimatingKeys[key] = true;\n                childRef.componentWillEnter(this.handleDoneAdding.bind(this, key, 'enter'));\n            }\n        };\n        this.performAppear = (key) => {\n            const childRef = this.childrenRefs[key];\n            if (childRef) {\n                this.currentlyAnimatingKeys[key] = true;\n                childRef.componentWillAppear(this.handleDoneAdding.bind(this, key, 'appear'));\n            }\n        };\n        this.handleDoneAdding = (key, type, childRef) => {\n            const { props } = this;\n            const { exclusive, onAppear = noop, onEnd = noop, onEnter = noop } = props;\n            delete this.currentlyAnimatingKeys[key];\n            if (exclusive && props !== this.nextProps) {\n                return;\n            }\n            if (!this.isValidChildByKey(toArrayChildren(getChildrenFromProps(props)), key)) {\n                this.performLeave(key);\n            }\n            else if (type === 'appear') {\n                if (animUtil.allowAppearCallback(props)) {\n                    onAppear(key, childRef);\n                    onEnd(key, true, childRef);\n                }\n            }\n            else if (animUtil.allowEnterCallback(props)) {\n                onEnter(key, childRef);\n                onEnd(key, true, childRef);\n            }\n        };\n        this.performLeave = (key) => {\n            const childRef = this.childrenRefs[key];\n            if (childRef) {\n                this.currentlyAnimatingKeys[key] = true;\n                childRef.componentWillLeave(this.handleDoneLeaving.bind(this, key));\n            }\n        };\n        this.handleDoneLeaving = (key, childRef) => {\n            const { props, state: { children }, } = this;\n            const { exclusive, onEnd = noop, onLeave = noop, hiddenProp } = props;\n            delete this.currentlyAnimatingKeys[key];\n            if (exclusive && props !== this.nextProps) {\n                return;\n            }\n            const currentChildren = toArrayChildren(getChildrenFromProps(props));\n            if (this.isValidChildByKey(currentChildren, key)) {\n                this.performEnter(key);\n            }\n            else {\n                const end = () => {\n                    if (animUtil.allowLeaveCallback(props)) {\n                        onLeave(key, childRef);\n                        onEnd(key, false, childRef);\n                    }\n                };\n                if (!isSameChildren(children, currentChildren, hiddenProp)) {\n                    this.setState({\n                        children: currentChildren,\n                    }, end);\n                }\n                else {\n                    end();\n                }\n            }\n        };\n    }\n    componentDidMount() {\n        const { hiddenProp } = this.props;\n        let { children } = this.state;\n        if (hiddenProp) {\n            children = children.filter(child => !child.props[hiddenProp]);\n        }\n        children.forEach(child => {\n            if (child && child.key) {\n                this.performAppear(child.key);\n            }\n        });\n    }\n    componentWillReceiveProps(nextProps) {\n        this.nextProps = nextProps;\n        const nextChildren = toArrayChildren(getChildrenFromProps(nextProps));\n        const { exclusive, hiddenProp } = this.props;\n        const { children } = this.state;\n        const currentlyAnimatingKeys = this.currentlyAnimatingKeys;\n        if (exclusive) {\n            Object.keys(currentlyAnimatingKeys).forEach(key => this.stop(key));\n        }\n        const currentChildren = exclusive\n            ? toArrayChildren(getChildrenFromProps(this.props))\n            : children;\n        let newChildren = [];\n        if (hiddenProp) {\n            nextChildren.forEach(nextChild => {\n                if (nextChild) {\n                    let newChild;\n                    const currentChild = findChildInChildrenByKey(currentChildren, nextChild.key);\n                    if (nextChild.props[hiddenProp] && currentChild && !currentChild.props[hiddenProp]) {\n                        newChild = cloneElement(nextChild, { [hiddenProp]: false });\n                    }\n                    else {\n                        newChild = nextChild;\n                    }\n                    if (newChild) {\n                        newChildren.push(newChild);\n                    }\n                }\n            });\n            newChildren = mergeChildren(currentChildren, newChildren);\n        }\n        else {\n            newChildren = mergeChildren(currentChildren, nextChildren);\n        }\n        this.setState({\n            children: newChildren,\n        });\n        nextChildren.forEach(child => {\n            const key = child && child.key;\n            if (key) {\n                if (child && currentlyAnimatingKeys[key]) {\n                    return;\n                }\n                const hasPrev = child && findChildInChildrenByKey(currentChildren, key);\n                if (hiddenProp) {\n                    const showInNext = !child.props[hiddenProp];\n                    if (hasPrev) {\n                        const showInNow = findShownChildInChildrenByKey(currentChildren, key, hiddenProp);\n                        if (!showInNow && showInNext) {\n                            this.keysToEnter.push(key);\n                        }\n                    }\n                    else if (showInNext) {\n                        this.keysToEnter.push(key);\n                    }\n                }\n                else if (!hasPrev) {\n                    this.keysToEnter.push(key);\n                }\n            }\n        });\n        currentChildren.forEach(child => {\n            const key = child && child.key;\n            if (key) {\n                if (child && currentlyAnimatingKeys[key]) {\n                    return;\n                }\n                const hasNext = child && findChildInChildrenByKey(nextChildren, key);\n                if (hiddenProp) {\n                    const showInNow = !child.props[hiddenProp];\n                    if (hasNext) {\n                        const showInNext = findShownChildInChildrenByKey(nextChildren, key, hiddenProp);\n                        if (!showInNext && showInNow) {\n                            this.keysToLeave.push(key);\n                        }\n                    }\n                    else if (showInNow) {\n                        this.keysToLeave.push(key);\n                    }\n                }\n                else if (!hasNext) {\n                    this.keysToLeave.push(key);\n                }\n            }\n        });\n    }\n    componentDidUpdate() {\n        const keysToEnter = this.keysToEnter;\n        this.keysToEnter = [];\n        keysToEnter.forEach(this.performEnter);\n        const keysToLeave = this.keysToLeave;\n        this.keysToLeave = [];\n        keysToLeave.forEach(this.performLeave);\n    }\n    isValidChildByKey(currentChildren, key) {\n        const { hiddenProp } = this.props;\n        if (hiddenProp) {\n            return !!findShownChildInChildrenByKey(currentChildren, key, hiddenProp);\n        }\n        return !!findChildInChildrenByKey(currentChildren, key);\n    }\n    stop(key) {\n        delete this.currentlyAnimatingKeys[key];\n        const component = this.childrenRefs[key];\n        if (component) {\n            component.stop();\n        }\n    }\n    render() {\n        const { props } = this;\n        this.nextProps = props;\n        const { animation, transitionName, transitionEnter, transitionAppear, transitionLeave, component: Cmp, componentProps, ...otherProps } = props;\n        const { children: stateChildren } = this.state;\n        let children = [];\n        if (stateChildren) {\n            children = stateChildren.map(child => {\n                if (child === null || child === undefined) {\n                    return child;\n                }\n                if (!child.key) {\n                    throw new Error('must set key for animate children');\n                }\n                return createElement(AnimateChild, {\n                    key: child.key,\n                    ref: node => {\n                        if (child.key) {\n                            this.childrenRefs[child.key] = node;\n                        }\n                    },\n                    animation,\n                    transitionName,\n                    transitionEnter,\n                    transitionAppear,\n                    transitionLeave,\n                }, child);\n            });\n        }\n        if (Cmp) {\n            const passedProps = omit(otherProps, [\n                'exclusive',\n                'onEnd',\n                'onEnter',\n                'onLeave',\n                'onAppear',\n                'hiddenProp',\n            ]);\n            return createElement(Cmp, {\n                ...passedProps,\n                ...componentProps,\n            }, children);\n        }\n        return children[0] || null;\n    }\n}\nAnimate.displayName = 'Animate';\nAnimate.propTypes = {\n    component: PropTypes.any,\n    componentProps: PropTypes.object,\n    animation: PropTypes.object,\n    transitionName: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    transitionEnter: PropTypes.bool,\n    transitionAppear: PropTypes.bool,\n    exclusive: PropTypes.bool,\n    transitionLeave: PropTypes.bool,\n    onEnd: PropTypes.func,\n    onEnter: PropTypes.func,\n    onLeave: PropTypes.func,\n    onAppear: PropTypes.func,\n    hiddenProp: PropTypes.string,\n};\nAnimate.defaultProps = {\n    animation: {},\n    component: 'span',\n    componentProps: {},\n    transitionEnter: true,\n    transitionLeave: true,\n    transitionAppear: false,\n};\n"]}