e67af101862e69e6809183d99c6f618b
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = require("react");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _omit = _interopRequireDefault(require("lodash/omit"));

var _noop = _interopRequireDefault(require("lodash/noop"));

var _ChildrenUtils = require("./ChildrenUtils");

var _AnimateChild = _interopRequireDefault(require("./AnimateChild"));

var _util = _interopRequireDefault(require("./util"));

var defaultKey = "animate_".concat(Date.now());

function getChildrenFromProps(props) {
  var children = props.children;

  if ((0, _react.isValidElement)(children)) {
    if (!children.key) {
      return (0, _react.cloneElement)(children, {
        key: defaultKey
      });
    }
  }

  return children;
}

var Animate =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(Animate, _Component);

  function Animate() {
    var _this;

    (0, _classCallCheck2["default"])(this, Animate);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(Animate).apply(this, arguments));
    _this.currentlyAnimatingKeys = {};
    _this.keysToEnter = [];
    _this.keysToLeave = [];
    _this.state = {
      children: (0, _ChildrenUtils.toArrayChildren)(getChildrenFromProps(_this.props))
    };
    _this.childrenRefs = {};

    _this.performEnter = function (key) {
      var childRef = _this.childrenRefs[key];

      if (childRef) {
        _this.currentlyAnimatingKeys[key] = true;
        childRef.componentWillEnter(_this.handleDoneAdding.bind((0, _assertThisInitialized2["default"])(_this), key, 'enter'));
      }
    };

    _this.performAppear = function (key) {
      var childRef = _this.childrenRefs[key];

      if (childRef) {
        _this.currentlyAnimatingKeys[key] = true;
        childRef.componentWillAppear(_this.handleDoneAdding.bind((0, _assertThisInitialized2["default"])(_this), key, 'appear'));
      }
    };

    _this.handleDoneAdding = function (key, type, childRef) {
      var _assertThisInitialize = (0, _assertThisInitialized2["default"])(_this),
          props = _assertThisInitialize.props;

      var exclusive = props.exclusive,
          _props$onAppear = props.onAppear,
          onAppear = _props$onAppear === void 0 ? _noop["default"] : _props$onAppear,
          _props$onEnd = props.onEnd,
          onEnd = _props$onEnd === void 0 ? _noop["default"] : _props$onEnd,
          _props$onEnter = props.onEnter,
          onEnter = _props$onEnter === void 0 ? _noop["default"] : _props$onEnter;
      delete _this.currentlyAnimatingKeys[key];

      if (exclusive && props !== _this.nextProps) {
        return;
      }

      if (!_this.isValidChildByKey((0, _ChildrenUtils.toArrayChildren)(getChildrenFromProps(props)), key)) {
        _this.performLeave(key);
      } else if (type === 'appear') {
        if (_util["default"].allowAppearCallback(props)) {
          onAppear(key, childRef);
          onEnd(key, true, childRef);
        }
      } else if (_util["default"].allowEnterCallback(props)) {
        onEnter(key, childRef);
        onEnd(key, true, childRef);
      }
    };

    _this.performLeave = function (key) {
      var childRef = _this.childrenRefs[key];

      if (childRef) {
        _this.currentlyAnimatingKeys[key] = true;
        childRef.componentWillLeave(_this.handleDoneLeaving.bind((0, _assertThisInitialized2["default"])(_this), key));
      }
    };

    _this.handleDoneLeaving = function (key, childRef) {
      var _assertThisInitialize2 = (0, _assertThisInitialized2["default"])(_this),
          props = _assertThisInitialize2.props,
          children = _assertThisInitialize2.state.children;

      var exclusive = props.exclusive,
          _props$onEnd2 = props.onEnd,
          onEnd = _props$onEnd2 === void 0 ? _noop["default"] : _props$onEnd2,
          _props$onLeave = props.onLeave,
          onLeave = _props$onLeave === void 0 ? _noop["default"] : _props$onLeave,
          hiddenProp = props.hiddenProp;
      delete _this.currentlyAnimatingKeys[key];

      if (exclusive && props !== _this.nextProps) {
        return;
      }

      var currentChildren = (0, _ChildrenUtils.toArrayChildren)(getChildrenFromProps(props));

      if (_this.isValidChildByKey(currentChildren, key)) {
        _this.performEnter(key);
      } else {
        var end = function end() {
          if (_util["default"].allowLeaveCallback(props)) {
            onLeave(key, childRef);
            onEnd(key, false, childRef);
          }
        };

        if (!(0, _ChildrenUtils.isSameChildren)(children, currentChildren, hiddenProp)) {
          _this.setState({
            children: currentChildren
          }, end);
        } else {
          end();
        }
      }
    };

    return _this;
  }

  (0, _createClass2["default"])(Animate, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      var hiddenProp = this.props.hiddenProp;
      var children = this.state.children;

      if (hiddenProp) {
        children = children.filter(function (child) {
          return !child.props[hiddenProp];
        });
      }

      children.forEach(function (child) {
        if (child && child.key) {
          _this2.performAppear(child.key);
        }
      });
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      var _this3 = this;

      this.nextProps = nextProps;
      var nextChildren = (0, _ChildrenUtils.toArrayChildren)(getChildrenFromProps(nextProps));
      var _this$props = this.props,
          exclusive = _this$props.exclusive,
          hiddenProp = _this$props.hiddenProp;
      var children = this.state.children;
      var currentlyAnimatingKeys = this.currentlyAnimatingKeys;

      if (exclusive) {
        Object.keys(currentlyAnimatingKeys).forEach(function (key) {
          return _this3.stop(key);
        });
      }

      var currentChildren = exclusive ? (0, _ChildrenUtils.toArrayChildren)(getChildrenFromProps(this.props)) : children;
      var newChildren = [];

      if (hiddenProp) {
        nextChildren.forEach(function (nextChild) {
          if (nextChild) {
            var newChild;
            var currentChild = (0, _ChildrenUtils.findChildInChildrenByKey)(currentChildren, nextChild.key);

            if (nextChild.props[hiddenProp] && currentChild && !currentChild.props[hiddenProp]) {
              newChild = (0, _react.cloneElement)(nextChild, (0, _defineProperty2["default"])({}, hiddenProp, false));
            } else {
              newChild = nextChild;
            }

            if (newChild) {
              newChildren.push(newChild);
            }
          }
        });
        newChildren = (0, _ChildrenUtils.mergeChildren)(currentChildren, newChildren);
      } else {
        newChildren = (0, _ChildrenUtils.mergeChildren)(currentChildren, nextChildren);
      }

      this.setState({
        children: newChildren
      });
      nextChildren.forEach(function (child) {
        var key = child && child.key;

        if (key) {
          if (child && currentlyAnimatingKeys[key]) {
            return;
          }

          var hasPrev = child && (0, _ChildrenUtils.findChildInChildrenByKey)(currentChildren, key);

          if (hiddenProp) {
            var showInNext = !child.props[hiddenProp];

            if (hasPrev) {
              var showInNow = (0, _ChildrenUtils.findShownChildInChildrenByKey)(currentChildren, key, hiddenProp);

              if (!showInNow && showInNext) {
                _this3.keysToEnter.push(key);
              }
            } else if (showInNext) {
              _this3.keysToEnter.push(key);
            }
          } else if (!hasPrev) {
            _this3.keysToEnter.push(key);
          }
        }
      });
      currentChildren.forEach(function (child) {
        var key = child && child.key;

        if (key) {
          if (child && currentlyAnimatingKeys[key]) {
            return;
          }

          var hasNext = child && (0, _ChildrenUtils.findChildInChildrenByKey)(nextChildren, key);

          if (hiddenProp) {
            var showInNow = !child.props[hiddenProp];

            if (hasNext) {
              var showInNext = (0, _ChildrenUtils.findShownChildInChildrenByKey)(nextChildren, key, hiddenProp);

              if (!showInNext && showInNow) {
                _this3.keysToLeave.push(key);
              }
            } else if (showInNow) {
              _this3.keysToLeave.push(key);
            }
          } else if (!hasNext) {
            _this3.keysToLeave.push(key);
          }
        }
      });
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      var keysToEnter = this.keysToEnter;
      this.keysToEnter = [];
      keysToEnter.forEach(this.performEnter);
      var keysToLeave = this.keysToLeave;
      this.keysToLeave = [];
      keysToLeave.forEach(this.performLeave);
    }
  }, {
    key: "isValidChildByKey",
    value: function isValidChildByKey(currentChildren, key) {
      var hiddenProp = this.props.hiddenProp;

      if (hiddenProp) {
        return !!(0, _ChildrenUtils.findShownChildInChildrenByKey)(currentChildren, key, hiddenProp);
      }

      return !!(0, _ChildrenUtils.findChildInChildrenByKey)(currentChildren, key);
    }
  }, {
    key: "stop",
    value: function stop(key) {
      delete this.currentlyAnimatingKeys[key];
      var component = this.childrenRefs[key];

      if (component) {
        component.stop();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this4 = this;

      var props = this.props;
      this.nextProps = props;
      var animation = props.animation,
          transitionName = props.transitionName,
          transitionEnter = props.transitionEnter,
          transitionAppear = props.transitionAppear,
          transitionLeave = props.transitionLeave,
          Cmp = props.component,
          componentProps = props.componentProps,
          otherProps = (0, _objectWithoutProperties2["default"])(props, ["animation", "transitionName", "transitionEnter", "transitionAppear", "transitionLeave", "component", "componentProps"]);
      var stateChildren = this.state.children;
      var children = [];

      if (stateChildren) {
        children = stateChildren.map(function (child) {
          if (child === null || child === undefined) {
            return child;
          }

          if (!child.key) {
            throw new Error('must set key for animate children');
          }

          return (0, _react.createElement)(_AnimateChild["default"], {
            key: child.key,
            ref: function ref(node) {
              if (child.key) {
                _this4.childrenRefs[child.key] = node;
              }
            },
            animation: animation,
            transitionName: transitionName,
            transitionEnter: transitionEnter,
            transitionAppear: transitionAppear,
            transitionLeave: transitionLeave
          }, child);
        });
      }

      if (Cmp) {
        var passedProps = (0, _omit["default"])(otherProps, ['exclusive', 'onEnd', 'onEnter', 'onLeave', 'onAppear', 'hiddenProp']);
        return (0, _react.createElement)(Cmp, (0, _objectSpread2["default"])({}, passedProps, {}, componentProps), children);
      }

      return children[0] || null;
    }
  }]);
  return Animate;
}(_react.Component);

exports["default"] = Animate;
Animate.displayName = 'Animate';
Animate.propTypes = {
  component: _propTypes["default"].any,
  componentProps: _propTypes["default"].object,
  animation: _propTypes["default"].object,
  transitionName: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object]),
  transitionEnter: _propTypes["default"].bool,
  transitionAppear: _propTypes["default"].bool,
  exclusive: _propTypes["default"].bool,
  transitionLeave: _propTypes["default"].bool,
  onEnd: _propTypes["default"].func,
  onEnter: _propTypes["default"].func,
  onLeave: _propTypes["default"].func,
  onAppear: _propTypes["default"].func,
  hiddenProp: _propTypes["default"].string
};
Animate.defaultProps = {
  animation: {},
  component: 'span',
  componentProps: {},
  transitionEnter: true,
  transitionLeave: true,
  transitionAppear: false
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFuaW1hdGUvQW5pbWF0ZS5qc3giXSwibmFtZXMiOlsiZGVmYXVsdEtleSIsIkRhdGUiLCJjaGlsZHJlbiIsInByb3BzIiwia2V5IiwiQW5pbWF0ZSIsIkNvbXBvbmVudCIsImdldENoaWxkcmVuRnJvbVByb3BzIiwiY2hpbGRSZWYiLCJleGNsdXNpdmUiLCJvbkFwcGVhciIsIm5vb3AiLCJvbkVuZCIsIm9uRW50ZXIiLCJ0eXBlIiwiYW5pbVV0aWwiLCJvbkxlYXZlIiwiaGlkZGVuUHJvcCIsImN1cnJlbnRDaGlsZHJlbiIsImVuZCIsImNoaWxkIiwibmV4dFByb3BzIiwibmV4dENoaWxkcmVuIiwiY3VycmVudGx5QW5pbWF0aW5nS2V5cyIsIk9iamVjdCIsIm5ld0NoaWxkcmVuIiwiY3VycmVudENoaWxkIiwibmV4dENoaWxkIiwibmV3Q2hpbGQiLCJoYXNQcmV2Iiwic2hvd0luTmV4dCIsInNob3dJbk5vdyIsImhhc05leHQiLCJrZXlzVG9FbnRlciIsImtleXNUb0xlYXZlIiwiY29tcG9uZW50IiwiYW5pbWF0aW9uIiwidHJhbnNpdGlvbk5hbWUiLCJ0cmFuc2l0aW9uRW50ZXIiLCJ0cmFuc2l0aW9uQXBwZWFyIiwidHJhbnNpdGlvbkxlYXZlIiwiQ21wIiwiY29tcG9uZW50UHJvcHMiLCJvdGhlclByb3BzIiwic3RhdGVDaGlsZHJlbiIsIkFuaW1hdGVDaGlsZCIsInJlZiIsInBhc3NlZFByb3BzIiwiUHJvcFR5cGVzIiwic3RyaW5nIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFBLE1BQUEsR0FBQSxPQUFBLENBQUEsT0FBQSxDQUFBOztBQUNBLElBQUEsVUFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLFlBQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsS0FBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsS0FBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSxD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QTtBQU9oQnZDLEVBQUFBLFNBQVMsRUFBRXVDLFVBQUFBLENBQUFBLFNBQUFBLENBQUFBLENBUEssSUFBQTtBQVFoQlIsRUFBQUEsZUFBZSxFQUFFUSxVQUFBQSxDQUFBQSxTQUFBQSxDQUFBQSxDQVJELElBQUE7QUFTaEJwQyxFQUFBQSxLQUFLLEVBQUVvQyxVQUFBQSxDQUFBQSxTQUFBQSxDQUFBQSxDQVRTLElBQUE7QUFVaEJuQyxFQUFBQSxPQUFPLEVBQUVtQyxVQUFBQSxDQUFBQSxTQUFBQSxDQUFBQSxDQVZPLElBQUE7QUFXaEJoQyxFQUFBQSxPQUFPLEVBQUVnQyxVQUFBQSxDQUFBQSxTQUFBQSxDQUFBQSxDQVhPLElBQUE7QUFZaEJ0QyxFQUFBQSxRQUFRLEVBQUVzQyxVQUFBQSxDQUFBQSxTQUFBQSxDQUFBQSxDQVpNLElBQUE7QUFhaEIvQixFQUFBQSxVQUFVLEVBQUUrQixVQUFBQSxDQUFBQSxTQUFBQSxDQUFBQSxDQUFVQztBQWJOLENBQXBCNUM7QUFlQUEsT0FBTyxDQUFQQSxZQUFBQSxHQUF1QjtBQUNuQitCLEVBQUFBLFNBQVMsRUFEVSxFQUFBO0FBRW5CRCxFQUFBQSxTQUFTLEVBRlUsTUFBQTtBQUduQk8sRUFBQUEsY0FBYyxFQUhLLEVBQUE7QUFJbkJKLEVBQUFBLGVBQWUsRUFKSSxJQUFBO0FBS25CRSxFQUFBQSxlQUFlLEVBTEksSUFBQTtBQU1uQkQsRUFBQUEsZ0JBQWdCLEVBQUU7QUFOQyxDQUF2QmxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2xvbmVFbGVtZW50LCBDb21wb25lbnQsIGNyZWF0ZUVsZW1lbnQsIGlzVmFsaWRFbGVtZW50LCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgb21pdCBmcm9tICdsb2Rhc2gvb21pdCc7XG5pbXBvcnQgbm9vcCBmcm9tICdsb2Rhc2gvbm9vcCc7XG5pbXBvcnQgeyBmaW5kQ2hpbGRJbkNoaWxkcmVuQnlLZXksIGZpbmRTaG93bkNoaWxkSW5DaGlsZHJlbkJ5S2V5LCBpc1NhbWVDaGlsZHJlbiwgbWVyZ2VDaGlsZHJlbiwgdG9BcnJheUNoaWxkcmVuLCB9IGZyb20gJy4vQ2hpbGRyZW5VdGlscyc7XG5pbXBvcnQgQW5pbWF0ZUNoaWxkIGZyb20gJy4vQW5pbWF0ZUNoaWxkJztcbmltcG9ydCBhbmltVXRpbCBmcm9tICcuL3V0aWwnO1xuY29uc3QgZGVmYXVsdEtleSA9IGBhbmltYXRlXyR7RGF0ZS5ub3coKX1gO1xuZnVuY3Rpb24gZ2V0Q2hpbGRyZW5Gcm9tUHJvcHMocHJvcHMpIHtcbiAgICBjb25zdCB7IGNoaWxkcmVuIH0gPSBwcm9wcztcbiAgICBpZiAoaXNWYWxpZEVsZW1lbnQoY2hpbGRyZW4pKSB7XG4gICAgICAgIGlmICghY2hpbGRyZW4ua2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gY2xvbmVFbGVtZW50KGNoaWxkcmVuLCB7XG4gICAgICAgICAgICAgICAga2V5OiBkZWZhdWx0S2V5LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNoaWxkcmVuO1xufVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQW5pbWF0ZSBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuY3VycmVudGx5QW5pbWF0aW5nS2V5cyA9IHt9O1xuICAgICAgICB0aGlzLmtleXNUb0VudGVyID0gW107XG4gICAgICAgIHRoaXMua2V5c1RvTGVhdmUgPSBbXTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGNoaWxkcmVuOiB0b0FycmF5Q2hpbGRyZW4oZ2V0Q2hpbGRyZW5Gcm9tUHJvcHModGhpcy5wcm9wcykpLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmNoaWxkcmVuUmVmcyA9IHt9O1xuICAgICAgICB0aGlzLnBlcmZvcm1FbnRlciA9IChrZXkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkUmVmID0gdGhpcy5jaGlsZHJlblJlZnNba2V5XTtcbiAgICAgICAgICAgIGlmIChjaGlsZFJlZikge1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudGx5QW5pbWF0aW5nS2V5c1trZXldID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjaGlsZFJlZi5jb21wb25lbnRXaWxsRW50ZXIodGhpcy5oYW5kbGVEb25lQWRkaW5nLmJpbmQodGhpcywga2V5LCAnZW50ZXInKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucGVyZm9ybUFwcGVhciA9IChrZXkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkUmVmID0gdGhpcy5jaGlsZHJlblJlZnNba2V5XTtcbiAgICAgICAgICAgIGlmIChjaGlsZFJlZikge1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudGx5QW5pbWF0aW5nS2V5c1trZXldID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjaGlsZFJlZi5jb21wb25lbnRXaWxsQXBwZWFyKHRoaXMuaGFuZGxlRG9uZUFkZGluZy5iaW5kKHRoaXMsIGtleSwgJ2FwcGVhcicpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5oYW5kbGVEb25lQWRkaW5nID0gKGtleSwgdHlwZSwgY2hpbGRSZWYpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgcHJvcHMgfSA9IHRoaXM7XG4gICAgICAgICAgICBjb25zdCB7IGV4Y2x1c2l2ZSwgb25BcHBlYXIgPSBub29wLCBvbkVuZCA9IG5vb3AsIG9uRW50ZXIgPSBub29wIH0gPSBwcm9wcztcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmN1cnJlbnRseUFuaW1hdGluZ0tleXNba2V5XTtcbiAgICAgICAgICAgIGlmIChleGNsdXNpdmUgJiYgcHJvcHMgIT09IHRoaXMubmV4dFByb3BzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWRDaGlsZEJ5S2V5KHRvQXJyYXlDaGlsZHJlbihnZXRDaGlsZHJlbkZyb21Qcm9wcyhwcm9wcykpLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wZXJmb3JtTGVhdmUoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGUgPT09ICdhcHBlYXInKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFuaW1VdGlsLmFsbG93QXBwZWFyQ2FsbGJhY2socHJvcHMpKSB7XG4gICAgICAgICAgICAgICAgICAgIG9uQXBwZWFyKGtleSwgY2hpbGRSZWYpO1xuICAgICAgICAgICAgICAgICAgICBvbkVuZChrZXksIHRydWUsIGNoaWxkUmVmKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChhbmltVXRpbC5hbGxvd0VudGVyQ2FsbGJhY2socHJvcHMpKSB7XG4gICAgICAgICAgICAgICAgb25FbnRlcihrZXksIGNoaWxkUmVmKTtcbiAgICAgICAgICAgICAgICBvbkVuZChrZXksIHRydWUsIGNoaWxkUmVmKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5wZXJmb3JtTGVhdmUgPSAoa2V5KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjaGlsZFJlZiA9IHRoaXMuY2hpbGRyZW5SZWZzW2tleV07XG4gICAgICAgICAgICBpZiAoY2hpbGRSZWYpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRseUFuaW1hdGluZ0tleXNba2V5XSA9IHRydWU7XG4gICAgICAgICAgICAgICAgY2hpbGRSZWYuY29tcG9uZW50V2lsbExlYXZlKHRoaXMuaGFuZGxlRG9uZUxlYXZpbmcuYmluZCh0aGlzLCBrZXkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5oYW5kbGVEb25lTGVhdmluZyA9IChrZXksIGNoaWxkUmVmKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IHByb3BzLCBzdGF0ZTogeyBjaGlsZHJlbiB9LCB9ID0gdGhpcztcbiAgICAgICAgICAgIGNvbnN0IHsgZXhjbHVzaXZlLCBvbkVuZCA9IG5vb3AsIG9uTGVhdmUgPSBub29wLCBoaWRkZW5Qcm9wIH0gPSBwcm9wcztcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmN1cnJlbnRseUFuaW1hdGluZ0tleXNba2V5XTtcbiAgICAgICAgICAgIGlmIChleGNsdXNpdmUgJiYgcHJvcHMgIT09IHRoaXMubmV4dFByb3BzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgY3VycmVudENoaWxkcmVuID0gdG9BcnJheUNoaWxkcmVuKGdldENoaWxkcmVuRnJvbVByb3BzKHByb3BzKSk7XG4gICAgICAgICAgICBpZiAodGhpcy5pc1ZhbGlkQ2hpbGRCeUtleShjdXJyZW50Q2hpbGRyZW4sIGtleSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBlcmZvcm1FbnRlcihrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZW5kID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbVV0aWwuYWxsb3dMZWF2ZUNhbGxiYWNrKHByb3BzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb25MZWF2ZShrZXksIGNoaWxkUmVmKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uRW5kKGtleSwgZmFsc2UsIGNoaWxkUmVmKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWYgKCFpc1NhbWVDaGlsZHJlbihjaGlsZHJlbiwgY3VycmVudENoaWxkcmVuLCBoaWRkZW5Qcm9wKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBjdXJyZW50Q2hpbGRyZW4sXG4gICAgICAgICAgICAgICAgICAgIH0sIGVuZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlbmQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICBjb25zdCB7IGhpZGRlblByb3AgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGxldCB7IGNoaWxkcmVuIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICBpZiAoaGlkZGVuUHJvcCkge1xuICAgICAgICAgICAgY2hpbGRyZW4gPSBjaGlsZHJlbi5maWx0ZXIoY2hpbGQgPT4gIWNoaWxkLnByb3BzW2hpZGRlblByb3BdKTtcbiAgICAgICAgfVxuICAgICAgICBjaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgICAgICAgIGlmIChjaGlsZCAmJiBjaGlsZC5rZXkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBlcmZvcm1BcHBlYXIoY2hpbGQua2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICAgIHRoaXMubmV4dFByb3BzID0gbmV4dFByb3BzO1xuICAgICAgICBjb25zdCBuZXh0Q2hpbGRyZW4gPSB0b0FycmF5Q2hpbGRyZW4oZ2V0Q2hpbGRyZW5Gcm9tUHJvcHMobmV4dFByb3BzKSk7XG4gICAgICAgIGNvbnN0IHsgZXhjbHVzaXZlLCBoaWRkZW5Qcm9wIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICBjb25zdCB7IGNoaWxkcmVuIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICBjb25zdCBjdXJyZW50bHlBbmltYXRpbmdLZXlzID0gdGhpcy5jdXJyZW50bHlBbmltYXRpbmdLZXlzO1xuICAgICAgICBpZiAoZXhjbHVzaXZlKSB7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhjdXJyZW50bHlBbmltYXRpbmdLZXlzKS5mb3JFYWNoKGtleSA9PiB0aGlzLnN0b3Aoa2V5KSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY3VycmVudENoaWxkcmVuID0gZXhjbHVzaXZlXG4gICAgICAgICAgICA/IHRvQXJyYXlDaGlsZHJlbihnZXRDaGlsZHJlbkZyb21Qcm9wcyh0aGlzLnByb3BzKSlcbiAgICAgICAgICAgIDogY2hpbGRyZW47XG4gICAgICAgIGxldCBuZXdDaGlsZHJlbiA9IFtdO1xuICAgICAgICBpZiAoaGlkZGVuUHJvcCkge1xuICAgICAgICAgICAgbmV4dENoaWxkcmVuLmZvckVhY2gobmV4dENoaWxkID0+IHtcbiAgICAgICAgICAgICAgICBpZiAobmV4dENoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBuZXdDaGlsZDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VycmVudENoaWxkID0gZmluZENoaWxkSW5DaGlsZHJlbkJ5S2V5KGN1cnJlbnRDaGlsZHJlbiwgbmV4dENoaWxkLmtleSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXh0Q2hpbGQucHJvcHNbaGlkZGVuUHJvcF0gJiYgY3VycmVudENoaWxkICYmICFjdXJyZW50Q2hpbGQucHJvcHNbaGlkZGVuUHJvcF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0NoaWxkID0gY2xvbmVFbGVtZW50KG5leHRDaGlsZCwgeyBbaGlkZGVuUHJvcF06IGZhbHNlIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3Q2hpbGQgPSBuZXh0Q2hpbGQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld0NoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdDaGlsZHJlbi5wdXNoKG5ld0NoaWxkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbmV3Q2hpbGRyZW4gPSBtZXJnZUNoaWxkcmVuKGN1cnJlbnRDaGlsZHJlbiwgbmV3Q2hpbGRyZW4pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbmV3Q2hpbGRyZW4gPSBtZXJnZUNoaWxkcmVuKGN1cnJlbnRDaGlsZHJlbiwgbmV4dENoaWxkcmVuKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGNoaWxkcmVuOiBuZXdDaGlsZHJlbixcbiAgICAgICAgfSk7XG4gICAgICAgIG5leHRDaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IGNoaWxkICYmIGNoaWxkLmtleTtcbiAgICAgICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGQgJiYgY3VycmVudGx5QW5pbWF0aW5nS2V5c1trZXldKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgaGFzUHJldiA9IGNoaWxkICYmIGZpbmRDaGlsZEluQ2hpbGRyZW5CeUtleShjdXJyZW50Q2hpbGRyZW4sIGtleSk7XG4gICAgICAgICAgICAgICAgaWYgKGhpZGRlblByb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2hvd0luTmV4dCA9ICFjaGlsZC5wcm9wc1toaWRkZW5Qcm9wXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhhc1ByZXYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNob3dJbk5vdyA9IGZpbmRTaG93bkNoaWxkSW5DaGlsZHJlbkJ5S2V5KGN1cnJlbnRDaGlsZHJlbiwga2V5LCBoaWRkZW5Qcm9wKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2hvd0luTm93ICYmIHNob3dJbk5leHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmtleXNUb0VudGVyLnB1c2goa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChzaG93SW5OZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmtleXNUb0VudGVyLnB1c2goa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICghaGFzUHJldikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmtleXNUb0VudGVyLnB1c2goa2V5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjdXJyZW50Q2hpbGRyZW4uZm9yRWFjaChjaGlsZCA9PiB7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSBjaGlsZCAmJiBjaGlsZC5rZXk7XG4gICAgICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkICYmIGN1cnJlbnRseUFuaW1hdGluZ0tleXNba2V5XSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGhhc05leHQgPSBjaGlsZCAmJiBmaW5kQ2hpbGRJbkNoaWxkcmVuQnlLZXkobmV4dENoaWxkcmVuLCBrZXkpO1xuICAgICAgICAgICAgICAgIGlmIChoaWRkZW5Qcm9wKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNob3dJbk5vdyA9ICFjaGlsZC5wcm9wc1toaWRkZW5Qcm9wXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhhc05leHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNob3dJbk5leHQgPSBmaW5kU2hvd25DaGlsZEluQ2hpbGRyZW5CeUtleShuZXh0Q2hpbGRyZW4sIGtleSwgaGlkZGVuUHJvcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNob3dJbk5leHQgJiYgc2hvd0luTm93KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5rZXlzVG9MZWF2ZS5wdXNoKGtleSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoc2hvd0luTm93KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmtleXNUb0xlYXZlLnB1c2goa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICghaGFzTmV4dCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmtleXNUb0xlYXZlLnB1c2goa2V5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICAgIGNvbnN0IGtleXNUb0VudGVyID0gdGhpcy5rZXlzVG9FbnRlcjtcbiAgICAgICAgdGhpcy5rZXlzVG9FbnRlciA9IFtdO1xuICAgICAgICBrZXlzVG9FbnRlci5mb3JFYWNoKHRoaXMucGVyZm9ybUVudGVyKTtcbiAgICAgICAgY29uc3Qga2V5c1RvTGVhdmUgPSB0aGlzLmtleXNUb0xlYXZlO1xuICAgICAgICB0aGlzLmtleXNUb0xlYXZlID0gW107XG4gICAgICAgIGtleXNUb0xlYXZlLmZvckVhY2godGhpcy5wZXJmb3JtTGVhdmUpO1xuICAgIH1cbiAgICBpc1ZhbGlkQ2hpbGRCeUtleShjdXJyZW50Q2hpbGRyZW4sIGtleSkge1xuICAgICAgICBjb25zdCB7IGhpZGRlblByb3AgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGlmIChoaWRkZW5Qcm9wKSB7XG4gICAgICAgICAgICByZXR1cm4gISFmaW5kU2hvd25DaGlsZEluQ2hpbGRyZW5CeUtleShjdXJyZW50Q2hpbGRyZW4sIGtleSwgaGlkZGVuUHJvcCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICEhZmluZENoaWxkSW5DaGlsZHJlbkJ5S2V5KGN1cnJlbnRDaGlsZHJlbiwga2V5KTtcbiAgICB9XG4gICAgc3RvcChrZXkpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuY3VycmVudGx5QW5pbWF0aW5nS2V5c1trZXldO1xuICAgICAgICBjb25zdCBjb21wb25lbnQgPSB0aGlzLmNoaWxkcmVuUmVmc1trZXldO1xuICAgICAgICBpZiAoY29tcG9uZW50KSB7XG4gICAgICAgICAgICBjb21wb25lbnQuc3RvcCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyBwcm9wcyB9ID0gdGhpcztcbiAgICAgICAgdGhpcy5uZXh0UHJvcHMgPSBwcm9wcztcbiAgICAgICAgY29uc3QgeyBhbmltYXRpb24sIHRyYW5zaXRpb25OYW1lLCB0cmFuc2l0aW9uRW50ZXIsIHRyYW5zaXRpb25BcHBlYXIsIHRyYW5zaXRpb25MZWF2ZSwgY29tcG9uZW50OiBDbXAsIGNvbXBvbmVudFByb3BzLCAuLi5vdGhlclByb3BzIH0gPSBwcm9wcztcbiAgICAgICAgY29uc3QgeyBjaGlsZHJlbjogc3RhdGVDaGlsZHJlbiB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgbGV0IGNoaWxkcmVuID0gW107XG4gICAgICAgIGlmIChzdGF0ZUNoaWxkcmVuKSB7XG4gICAgICAgICAgICBjaGlsZHJlbiA9IHN0YXRlQ2hpbGRyZW4ubWFwKGNoaWxkID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGQgPT09IG51bGwgfHwgY2hpbGQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghY2hpbGQua2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbXVzdCBzZXQga2V5IGZvciBhbmltYXRlIGNoaWxkcmVuJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50KEFuaW1hdGVDaGlsZCwge1xuICAgICAgICAgICAgICAgICAgICBrZXk6IGNoaWxkLmtleSxcbiAgICAgICAgICAgICAgICAgICAgcmVmOiBub2RlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZC5rZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuUmVmc1tjaGlsZC5rZXldID0gbm9kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLFxuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbkVudGVyLFxuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uQXBwZWFyLFxuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uTGVhdmUsXG4gICAgICAgICAgICAgICAgfSwgY2hpbGQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKENtcCkge1xuICAgICAgICAgICAgY29uc3QgcGFzc2VkUHJvcHMgPSBvbWl0KG90aGVyUHJvcHMsIFtcbiAgICAgICAgICAgICAgICAnZXhjbHVzaXZlJyxcbiAgICAgICAgICAgICAgICAnb25FbmQnLFxuICAgICAgICAgICAgICAgICdvbkVudGVyJyxcbiAgICAgICAgICAgICAgICAnb25MZWF2ZScsXG4gICAgICAgICAgICAgICAgJ29uQXBwZWFyJyxcbiAgICAgICAgICAgICAgICAnaGlkZGVuUHJvcCcsXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50KENtcCwge1xuICAgICAgICAgICAgICAgIC4uLnBhc3NlZFByb3BzLFxuICAgICAgICAgICAgICAgIC4uLmNvbXBvbmVudFByb3BzLFxuICAgICAgICAgICAgfSwgY2hpbGRyZW4pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjaGlsZHJlblswXSB8fCBudWxsO1xuICAgIH1cbn1cbkFuaW1hdGUuZGlzcGxheU5hbWUgPSAnQW5pbWF0ZSc7XG5BbmltYXRlLnByb3BUeXBlcyA9IHtcbiAgICBjb21wb25lbnQ6IFByb3BUeXBlcy5hbnksXG4gICAgY29tcG9uZW50UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgYW5pbWF0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHRyYW5zaXRpb25OYW1lOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gICAgdHJhbnNpdGlvbkVudGVyOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB0cmFuc2l0aW9uQXBwZWFyOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBleGNsdXNpdmU6IFByb3BUeXBlcy5ib29sLFxuICAgIHRyYW5zaXRpb25MZWF2ZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgb25FbmQ6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9uTGVhdmU6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9uQXBwZWFyOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBoaWRkZW5Qcm9wOiBQcm9wVHlwZXMuc3RyaW5nLFxufTtcbkFuaW1hdGUuZGVmYXVsdFByb3BzID0ge1xuICAgIGFuaW1hdGlvbjoge30sXG4gICAgY29tcG9uZW50OiAnc3BhbicsXG4gICAgY29tcG9uZW50UHJvcHM6IHt9LFxuICAgIHRyYW5zaXRpb25FbnRlcjogdHJ1ZSxcbiAgICB0cmFuc2l0aW9uTGVhdmU6IHRydWUsXG4gICAgdHJhbnNpdGlvbkFwcGVhcjogZmFsc2UsXG59O1xuIl19