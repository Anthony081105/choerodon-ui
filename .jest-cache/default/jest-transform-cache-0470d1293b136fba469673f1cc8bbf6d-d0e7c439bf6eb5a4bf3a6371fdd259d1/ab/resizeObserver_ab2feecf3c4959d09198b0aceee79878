19e6857c2f4799e8a277fa2b6343d6fa
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = require("react");

var _reactDom = require("react-dom");

var _resizeObserverPolyfill = _interopRequireDefault(require("resize-observer-polyfill"));

var ReactResizeObserver =
/*#__PURE__*/
function (_PureComponent) {
  (0, _inherits2["default"])(ReactResizeObserver, _PureComponent);

  function ReactResizeObserver() {
    var _this;

    (0, _classCallCheck2["default"])(this, ReactResizeObserver);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(ReactResizeObserver).apply(this, arguments));
    _this.resizeObserver = null;
    _this.width = 0;
    _this.height = 0;

    _this.onResize = function (entries) {
      var _this$props = _this.props,
          onResize = _this$props.onResize,
          resizeProp = _this$props.resizeProp;
      var _entries$ = entries[0],
          target = _entries$.target,
          _entries$$contentRect = _entries$.contentRect,
          width = _entries$$contentRect.width,
          height = _entries$$contentRect.height;
      /**
       * getBoundingClientRect return wrong size in transform case.
       */
      // const { width, height } = target.getBoundingClientRect();

      var fixedWidth = Math.floor(width);
      var fixedHeight = Math.floor(height);

      if (_this.width !== fixedWidth && ['width', 'both'].includes(resizeProp) || _this.height !== fixedHeight && ['height', 'both'].includes(resizeProp)) {
        _this.width = fixedWidth;
        _this.height = fixedHeight;

        if (onResize) {
          onResize(fixedWidth, fixedHeight, target);
        }
      }
    };

    return _this;
  }

  (0, _createClass2["default"])(ReactResizeObserver, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.onComponentUpdated();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.onComponentUpdated();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.destroyObserver();
    }
  }, {
    key: "onComponentUpdated",
    value: function onComponentUpdated() {
      var disabled = this.props.disabled;
      var element = (0, _reactDom.findDOMNode)(this);

      if (!this.resizeObserver && !disabled && element) {
        // Add resize observer
        this.resizeObserver = new _resizeObserverPolyfill["default"](this.onResize);
        this.resizeObserver.observe(element);
      } else if (disabled) {
        // Remove resize observer
        this.destroyObserver();
      }
    }
  }, {
    key: "destroyObserver",
    value: function destroyObserver() {
      if (this.resizeObserver) {
        this.resizeObserver.disconnect();
        this.resizeObserver = null;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props$children = this.props.children,
          children = _this$props$children === void 0 ? null : _this$props$children;
      return children;
    }
  }]);
  return ReactResizeObserver;
}(_react.PureComponent);

ReactResizeObserver.defaultProps = {
  resizeProp: 'both'
};
var _default = ReactResizeObserver;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl91dGlsL3Jlc2l6ZU9ic2VydmVyLmpzeCJdLCJuYW1lcyI6WyJSZWFjdFJlc2l6ZU9ic2VydmVyIiwiUHVyZUNvbXBvbmVudCIsIm9uUmVzaXplIiwicmVzaXplUHJvcCIsInRhcmdldCIsIndpZHRoIiwiaGVpZ2h0IiwiZW50cmllcyIsImZpeGVkV2lkdGgiLCJNYXRoIiwiZml4ZWRIZWlnaHQiLCJkaXNhYmxlZCIsImVsZW1lbnQiLCJSZXNpemVPYnNlcnZlciIsImNoaWxkcmVuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQSxNQUFBLEdBQUEsT0FBQSxDQUFBLE9BQUEsQ0FBQTs7QUFDQSxJQUFBLFNBQUEsR0FBQSxPQUFBLENBQUEsV0FBQSxDQUFBOztBQUNBLElBQUEsdUJBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUEsQ0FBQSwwQkFBQSxDQUFBLENBQUE7O0lBQ01BLG1COzs7OztBQUNGLFdBQUEsbUJBQUEsR0FBYztBQUFBLFFBQUEsS0FBQTs7QUFBQSxLQUFBLEdBQUEsZ0JBQUEsQ0FBQSxTQUFBLENBQUEsRUFBQSxJQUFBLEVBQUEsbUJBQUE7QUFDVixJQUFBLEtBQUEsR0FBQSxDQUFBLEdBQUEsMkJBQUEsQ0FBQSxTQUFBLENBQUEsRUFBQSxJQUFBLEVBQUEsQ0FBQSxHQUFBLGdCQUFBLENBQUEsU0FBQSxDQUFBLEVBQUEsbUJBQUEsRUFBQSxLQUFBLENBQUEsSUFBQSxFQUFBLFNBQUEsQ0FBQSxDQUFBO0FBQ0EsSUFBQSxLQUFBLENBQUEsY0FBQSxHQUFBLElBQUE7QUFDQSxJQUFBLEtBQUEsQ0FBQSxLQUFBLEdBQUEsQ0FBQTtBQUNBLElBQUEsS0FBQSxDQUFBLE1BQUEsR0FBQSxDQUFBOztBQUNBLElBQUEsS0FBQSxDQUFBLFFBQUEsR0FBZ0IsVUFBQSxPQUFBLEVBQWE7QUFBQSxVQUFBLFdBQUEsR0FDUSxLQUFBLENBRFIsS0FBQTtBQUFBLFVBQ2pCRSxRQURpQixHQUFBLFdBQUEsQ0FBQSxRQUFBO0FBQUEsVUFDUEMsVUFETyxHQUFBLFdBQUEsQ0FBQSxVQUFBO0FBQUEsVUFBQSxTQUFBLEdBRTJCSSxPQUFPLENBRmxDLENBRWtDLENBRmxDO0FBQUEsVUFFakJILE1BRmlCLEdBQUEsU0FBQSxDQUFBLE1BQUE7QUFBQSxVQUFBLHFCQUFBLEdBQUEsU0FBQSxDQUFBLFdBQUE7QUFBQSxVQUVNQyxLQUZOLEdBQUEscUJBQUEsQ0FBQSxLQUFBO0FBQUEsVUFFYUMsTUFGYixHQUFBLHFCQUFBLENBQUEsTUFBQTtBQUd6Qjs7O0FBR0E7O0FBQ0EsVUFBTUUsVUFBVSxHQUFHQyxJQUFJLENBQUpBLEtBQUFBLENBQW5CLEtBQW1CQSxDQUFuQjtBQUNBLFVBQU1DLFdBQVcsR0FBR0QsSUFBSSxDQUFKQSxLQUFBQSxDQUFwQixNQUFvQkEsQ0FBcEI7O0FBQ0EsVUFBSyxLQUFBLENBQUEsS0FBQSxLQUFBLFVBQUEsSUFBNkIsQ0FBQSxPQUFBLEVBQUEsTUFBQSxFQUFBLFFBQUEsQ0FBOUIsVUFBOEIsQ0FBN0IsSUFDQSxLQUFBLENBQUEsTUFBQSxLQUFBLFdBQUEsSUFBK0IsQ0FBQSxRQUFBLEVBQUEsTUFBQSxFQUFBLFFBQUEsQ0FEcEMsVUFDb0MsQ0FEcEMsRUFDOEU7QUFDMUUsUUFBQSxLQUFBLENBQUEsS0FBQSxHQUFBLFVBQUE7QUFDQSxRQUFBLEtBQUEsQ0FBQSxNQUFBLEdBQUEsV0FBQTs7QUFDQSxZQUFBLFFBQUEsRUFBYztBQUNWUCxVQUFBQSxRQUFRLENBQUEsVUFBQSxFQUFBLFdBQUEsRUFBUkEsTUFBUSxDQUFSQTtBQUNIO0FBQ0o7QUFoQkwsS0FBQTs7QUFMVSxXQUFBLEtBQUE7QUF1QmI7Ozs7d0NBQ21CO0FBQ2hCLFdBQUEsa0JBQUE7QUFDSDs7O3lDQUNvQjtBQUNqQixXQUFBLGtCQUFBO0FBQ0g7OzsyQ0FDc0I7QUFDbkIsV0FBQSxlQUFBO0FBQ0g7Ozt5Q0FDb0I7QUFBQSxVQUNUUyxRQURTLEdBQ0ksS0FESixLQUNJLENBREosUUFBQTtBQUVqQixVQUFNQyxPQUFPLEdBQUcsQ0FBQSxHQUFBLFNBQUEsQ0FBQSxXQUFBLEVBQWhCLElBQWdCLENBQWhCOztBQUNBLFVBQUksQ0FBQyxLQUFELGNBQUEsSUFBd0IsQ0FBeEIsUUFBQSxJQUFKLE9BQUEsRUFBa0Q7QUFDOUM7QUFDQSxhQUFBLGNBQUEsR0FBc0IsSUFBSUMsdUJBQUFBLENBQUosU0FBSUEsQ0FBSixDQUFtQixLQUF6QyxRQUFzQixDQUF0QjtBQUNBLGFBQUEsY0FBQSxDQUFBLE9BQUEsQ0FBQSxPQUFBO0FBSEosT0FBQSxNQUtLLElBQUEsUUFBQSxFQUFjO0FBQ2Y7QUFDQSxhQUFBLGVBQUE7QUFDSDtBQUNKOzs7c0NBQ2lCO0FBQ2QsVUFBSSxLQUFKLGNBQUEsRUFBeUI7QUFDckIsYUFBQSxjQUFBLENBQUEsVUFBQTtBQUNBLGFBQUEsY0FBQSxHQUFBLElBQUE7QUFDSDtBQUNKOzs7NkJBQ1E7QUFBQSxVQUFBLG9CQUFBLEdBQ3VCLEtBRHZCLEtBQ3VCLENBRHZCLFFBQUE7QUFBQSxVQUNHQyxRQURILEdBQUEsb0JBQUEsS0FBQSxLQUFBLENBQUEsR0FBQSxJQUFBLEdBQUEsb0JBQUE7QUFFTCxhQUFBLFFBQUE7QUFDSDs7O0VBeEQ2QmIsTUFBQUEsQ0FBQUEsYTs7QUEwRGxDRCxtQkFBbUIsQ0FBbkJBLFlBQUFBLEdBQW1DO0FBQy9CRyxFQUFBQSxVQUFVLEVBQUU7QUFEbUIsQ0FBbkNIO2VBR2VBLG1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHVyZUNvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGZpbmRET01Ob2RlIH0gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBSZXNpemVPYnNlcnZlciBmcm9tICdyZXNpemUtb2JzZXJ2ZXItcG9seWZpbGwnO1xuY2xhc3MgUmVhY3RSZXNpemVPYnNlcnZlciBleHRlbmRzIFB1cmVDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLnJlc2l6ZU9ic2VydmVyID0gbnVsbDtcbiAgICAgICAgdGhpcy53aWR0aCA9IDA7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gMDtcbiAgICAgICAgdGhpcy5vblJlc2l6ZSA9IChlbnRyaWVzKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IG9uUmVzaXplLCByZXNpemVQcm9wIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICAgICAgY29uc3QgeyB0YXJnZXQsIGNvbnRlbnRSZWN0OiB7IHdpZHRoLCBoZWlnaHQgfSwgfSA9IGVudHJpZXNbMF07XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIGdldEJvdW5kaW5nQ2xpZW50UmVjdCByZXR1cm4gd3Jvbmcgc2l6ZSBpbiB0cmFuc2Zvcm0gY2FzZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgLy8gY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICBjb25zdCBmaXhlZFdpZHRoID0gTWF0aC5mbG9vcih3aWR0aCk7XG4gICAgICAgICAgICBjb25zdCBmaXhlZEhlaWdodCA9IE1hdGguZmxvb3IoaGVpZ2h0KTtcbiAgICAgICAgICAgIGlmICgodGhpcy53aWR0aCAhPT0gZml4ZWRXaWR0aCAmJiBbJ3dpZHRoJywgJ2JvdGgnXS5pbmNsdWRlcyhyZXNpemVQcm9wKSkgfHxcbiAgICAgICAgICAgICAgICAodGhpcy5oZWlnaHQgIT09IGZpeGVkSGVpZ2h0ICYmIFsnaGVpZ2h0JywgJ2JvdGgnXS5pbmNsdWRlcyhyZXNpemVQcm9wKSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLndpZHRoID0gZml4ZWRXaWR0aDtcbiAgICAgICAgICAgICAgICB0aGlzLmhlaWdodCA9IGZpeGVkSGVpZ2h0O1xuICAgICAgICAgICAgICAgIGlmIChvblJlc2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICBvblJlc2l6ZShmaXhlZFdpZHRoLCBmaXhlZEhlaWdodCwgdGFyZ2V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICB0aGlzLm9uQ29tcG9uZW50VXBkYXRlZCgpO1xuICAgIH1cbiAgICBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICAgIHRoaXMub25Db21wb25lbnRVcGRhdGVkKCk7XG4gICAgfVxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICB0aGlzLmRlc3Ryb3lPYnNlcnZlcigpO1xuICAgIH1cbiAgICBvbkNvbXBvbmVudFVwZGF0ZWQoKSB7XG4gICAgICAgIGNvbnN0IHsgZGlzYWJsZWQgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBmaW5kRE9NTm9kZSh0aGlzKTtcbiAgICAgICAgaWYgKCF0aGlzLnJlc2l6ZU9ic2VydmVyICYmICFkaXNhYmxlZCAmJiBlbGVtZW50KSB7XG4gICAgICAgICAgICAvLyBBZGQgcmVzaXplIG9ic2VydmVyXG4gICAgICAgICAgICB0aGlzLnJlc2l6ZU9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKHRoaXMub25SZXNpemUpO1xuICAgICAgICAgICAgdGhpcy5yZXNpemVPYnNlcnZlci5vYnNlcnZlKGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRpc2FibGVkKSB7XG4gICAgICAgICAgICAvLyBSZW1vdmUgcmVzaXplIG9ic2VydmVyXG4gICAgICAgICAgICB0aGlzLmRlc3Ryb3lPYnNlcnZlcigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRlc3Ryb3lPYnNlcnZlcigpIHtcbiAgICAgICAgaWYgKHRoaXMucmVzaXplT2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgIHRoaXMucmVzaXplT2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgICAgICAgdGhpcy5yZXNpemVPYnNlcnZlciA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB7IGNoaWxkcmVuID0gbnVsbCB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgcmV0dXJuIGNoaWxkcmVuO1xuICAgIH1cbn1cblJlYWN0UmVzaXplT2JzZXJ2ZXIuZGVmYXVsdFByb3BzID0ge1xuICAgIHJlc2l6ZVByb3A6ICdib3RoJyxcbn07XG5leHBvcnQgZGVmYXVsdCBSZWFjdFJlc2l6ZU9ic2VydmVyO1xuIl19