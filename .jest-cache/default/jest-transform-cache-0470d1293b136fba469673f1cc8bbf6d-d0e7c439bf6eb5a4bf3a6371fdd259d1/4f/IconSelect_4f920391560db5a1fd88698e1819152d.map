{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components/icon-select/IconSelect.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { Component, ReactElement, ReactNode } from 'react';\nimport classNames from 'classnames';\nimport omit from 'lodash/omit';\nimport { icons } from 'choerodon-ui-font';\nimport Icon from '../icon';\nimport Select, { SelectProps } from '../select';\nimport Pagination from '../pagination';\nimport Tooltip from '../tooltip';\nimport { getPrefixCls } from '../configure';\n\nconst Option = Select.Option;\n\nexport interface IconSelectProps extends SelectProps {\n  prefixCls?: string;\n  showAll?: boolean;\n}\n\nexport interface IconSelectState {\n  current: number;\n  total: number;\n  pageSize: number;\n  filterValue: string;\n  data: any;\n}\n\nexport default class IconSelect extends Component<IconSelectProps, IconSelectState> {\n  static displayName = 'IconSelect';\n\n  static defaultProps = {\n    filter: true,\n    showArrow: false,\n    showCheckAll: false,\n    showAll: false,\n  };\n\n  icons: any;\n\n  rcSelect: ReactNode | null;\n\n  constructor(props: IconSelectProps) {\n    super(props);\n    this.state = {\n      current: 1,\n      total: 0,\n      pageSize: 20,\n      filterValue: '',\n      data: [],\n    };\n  }\n\n  componentDidMount() {\n    this.initIcon();\n  }\n\n  initIcon(current: number = 1, pageSize: number = 20, filterValue: string = '') {\n    const { showAll } = this.props;\n    const minIndex = (current - 1) * pageSize;\n    const maxIndex = current * pageSize;\n    let items;\n    if (showAll) {\n      items = icons.default;\n      if (filterValue) {\n        items = icons.favorite.filter(name => {\n          return name.toLowerCase().indexOf(filterValue.toLowerCase()) !== -1;\n        });\n      }\n    } else {\n      items = icons.favorite;\n      if (filterValue) {\n        items = icons.favorite.filter(name => {\n          return name.toLowerCase().indexOf(filterValue.toLowerCase()) !== -1;\n        });\n      }\n    }\n    const total = items.length || 0;\n    const currentData = items.filter((name, index) => {\n      return name && index >= minIndex && index < maxIndex;\n    });\n    this.setState({\n      data: currentData,\n      total,\n      pageSize,\n      current,\n      filterValue,\n    });\n  }\n\n  renderOption() {\n    const { data } = this.state;\n    return data.map((icon: string) => {\n      return (\n        <Option key={icon} value={icon}>\n          <Tooltip placement=\"bottomLeft\" title={icon}>\n            <Icon type={icon} />\n            <span className=\"text\">{icon}</span>\n          </Tooltip>\n        </Option>\n      );\n    });\n  }\n\n  handleRender = (label: ReactElement<any>) => {\n    if (typeof label === 'string' && label) {\n      return (\n        <span>\n          <Icon type={label} /> {label}\n        </span>\n      );\n    }\n    if (typeof label === 'object' && label.props) {\n      const { children } = label.props;\n      return children ? <span>{children}</span> : null;\n    }\n    return null;\n  };\n\n  handlePageChange = (current: number, pageSize: number) => {\n    const { filterValue } = this.state;\n    this.initIcon(current, pageSize, filterValue);\n  };\n\n  handleFilter = (value: string) => {\n    this.initIcon(1, 20, value);\n  };\n\n  saveRef = (node: ReactNode) => {\n    if (node) {\n      this.rcSelect = node;\n    }\n  };\n\n  renderFooter() {\n    const { total, pageSize, current } = this.state;\n    return (\n      <Pagination\n        total={total}\n        onChange={this.handlePageChange}\n        pageSizeOptions={['20', '40', '80']}\n        pageSize={pageSize}\n        onShowSizeChange={this.handlePageChange}\n        current={current}\n      />\n    );\n  }\n\n  render() {\n    const { className, prefixCls: customizePrefixCls, dropdownClassName } = this.props;\n    const { filterValue } = this.state;\n    const prefixCls = getPrefixCls('icon-select', customizePrefixCls);\n    const selectCls = classNames(className, prefixCls);\n    const dropDownCls = classNames(dropdownClassName, `${prefixCls}-dropdown`);\n    const selectProps = {\n      ...this.props,\n      className: selectCls,\n      dropdownClassName: dropDownCls,\n    };\n    const otherProps = omit(selectProps, ['prefixCls']);\n    return (\n      <Select\n        {...otherProps}\n        footer={this.renderFooter()}\n        onFilterChange={this.handleFilter}\n        filterValue={filterValue}\n        choiceRender={this.handleRender}\n        filter\n        ref={this.saveRef}\n      >\n        {this.renderOption()}\n      </Select>\n    );\n  }\n}\n"]}