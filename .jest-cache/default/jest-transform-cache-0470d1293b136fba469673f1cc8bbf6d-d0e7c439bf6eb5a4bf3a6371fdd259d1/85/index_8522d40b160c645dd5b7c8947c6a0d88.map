{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/table/query-bar/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, {\n  cloneElement,\n  Component,\n  isValidElement,\n  MouseEventHandler,\n  ReactElement,\n  ReactNode,\n} from 'react';\nimport { observer } from 'mobx-react';\nimport { isArrayLike } from 'mobx';\nimport isObject from 'lodash/isObject';\nimport isString from 'lodash/isString';\nimport { pxToRem } from 'choerodon-ui/lib/_util/UnitConvertor';\nimport { getConfig } from 'choerodon-ui/lib/configure';\nimport { TableButtonType, TableQueryBarType } from '../enum';\nimport TableButtons from './TableButtons';\nimport Table, {\n  Buttons,\n  TableButtonProps,\n  TableQueryBarHook,\n  TableQueryBarHookProps,\n} from '../Table';\nimport Button, { ButtonProps } from '../../button/Button';\nimport { ButtonType } from '../../button/enum';\nimport { DataSetStatus, FieldType } from '../../data-set/enum';\nimport { $l } from '../../locale-context';\nimport TableContext from '../TableContext';\nimport autobind from '../../_util/autobind';\nimport DataSet from '../../data-set';\nimport Modal from '../../modal';\nimport Column from '../Column';\nimport { getEditorByField } from '../utils';\nimport TableToolBar from './TableToolBar';\nimport TableFilterBar from './TableFilterBar';\nimport TableAdvancedQueryBar from './TableAdvancedQueryBar';\nimport { PaginationProps } from '../../pagination/Pagination';\nimport { findBindFieldBy } from '../../data-set/utils';\n\nexport interface TableQueryBarProps {\n  prefixCls?: string;\n  buttons?: Buttons[];\n  queryFields?: { [key: string]: ReactElement<any> };\n  queryFieldsLimit?: number;\n  showQueryBar?: boolean;\n  pagination?: ReactElement<PaginationProps>;\n  filterBarFieldName?: string;\n  filterBarPlaceholder?: string;\n}\n\n@observer\nexport default class TableQueryBar extends Component<TableQueryBarProps> {\n  static displayName = 'TableQueryBar';\n\n  static contextType = TableContext;\n\n  exportModal;\n\n  exportDataSet: DataSet;\n\n  get showQueryBar(): boolean {\n    const {\n      props: { showQueryBar },\n      context: {\n        tableStore: { queryBar },\n      },\n    } = this;\n    return showQueryBar !== false && queryBar !== TableQueryBarType.none;\n  }\n\n  componentWillUnmount() {\n    if (this.exportModal) {\n      this.exportModal.close(true);\n    }\n  }\n\n  @autobind\n  handleButtonCreate() {\n    const {\n      tableStore: { dataSet },\n    } = this.context;\n    dataSet.create({}, 0);\n  }\n\n  @autobind\n  handleButtonSubmit() {\n    const {\n      tableStore: { dataSet },\n    } = this.context;\n    return dataSet.submit();\n  }\n\n  @autobind\n  handleButtonDelete() {\n    const {\n      tableStore: { dataSet },\n    } = this.context;\n    return dataSet.delete(dataSet.selected);\n  }\n\n  @autobind\n  handleButtonRemove() {\n    const {\n      tableStore: { dataSet },\n    } = this.context;\n    dataSet.remove(dataSet.selected);\n  }\n\n  @autobind\n  handleButtonReset() {\n    const {\n      tableStore: { dataSet },\n    } = this.context;\n    dataSet.reset();\n  }\n\n  @autobind\n  handleQueryReset() {\n    const {\n      tableStore: {\n        dataSet: { queryDataSet },\n      },\n    } = this.context;\n    if (queryDataSet) {\n      const { current } = queryDataSet;\n      if (current) {\n        current.reset();\n      }\n      this.handleQuery();\n    }\n  }\n\n  @autobind\n  handleExpandAll() {\n    const { tableStore } = this.context;\n    tableStore.expandAll();\n  }\n\n  @autobind\n  handleCollapseAll() {\n    const { tableStore } = this.context;\n    tableStore.collapseAll();\n  }\n\n  @autobind\n  async handleButtonExport() {\n    const { tableStore } = this.context;\n    const columnHeaders = await tableStore.getColumnHeaders();\n    this.exportDataSet = new DataSet({ data: columnHeaders, paging: false });\n    this.exportDataSet.selectAll();\n    this.exportModal = Modal.open({\n      title: $l('Table', 'choose_export_columns'),\n      children: (\n        <Table dataSet={this.exportDataSet} style={{ height: pxToRem(300) }}>\n          <Column header={$l('Table', 'column_name')} name=\"label\" resizable={false} />\n        </Table>\n      ),\n      okText: $l('Table', 'export_button'),\n      onOk: this.handleExport,\n      style: {\n        width: pxToRem(400),\n      },\n    });\n  }\n\n  @autobind\n  handleQuery() {\n    const {\n      tableStore: { dataSet },\n    } = this.context;\n    return dataSet.query();\n  }\n\n  @autobind\n  handleExport() {\n    const { selected } = this.exportDataSet;\n    if (selected.length) {\n      const {\n        tableStore: { dataSet },\n      } = this.context;\n      dataSet.export(\n        selected.reduce((columns, record) => {\n          let myName = record.get('name');\n          const myField = dataSet.getField(myName);\n          if (myField && myField.type === FieldType.object) {\n            const bindField = findBindFieldBy(myField, dataSet.fields, 'textField');\n            if (bindField) {\n              myName = bindField.name;\n            }\n          }\n          columns[myName] = record.get('label');\n          return columns;\n        }, {}),\n      );\n    } else {\n      return false;\n    }\n  }\n\n  getButtonProps(\n    type: TableButtonType,\n  ): ButtonProps & { onClick: MouseEventHandler<any>; children?: ReactNode } | undefined {\n    const {\n      tableStore: { isTree, dataSet },\n    } = this.context;\n    const disabled = dataSet.status !== DataSetStatus.ready;\n    switch (type) {\n      case TableButtonType.add:\n        return {\n          icon: 'playlist_add',\n          onClick: this.handleButtonCreate,\n          children: $l('Table', 'create_button'),\n          disabled: disabled || (dataSet.parent ? !dataSet.parent.current : false),\n        };\n      case TableButtonType.save:\n        return {\n          icon: 'save',\n          onClick: this.handleButtonSubmit,\n          children: $l('Table', 'save_button'),\n          type: ButtonType.submit,\n          disabled,\n        };\n      case TableButtonType.delete:\n        return {\n          icon: 'delete',\n          onClick: this.handleButtonDelete,\n          children: $l('Table', 'delete_button'),\n          disabled: disabled || dataSet.selected.length === 0,\n        };\n      case TableButtonType.remove:\n        return {\n          icon: 'remove_circle',\n          onClick: this.handleButtonRemove,\n          children: $l('Table', 'remove_button'),\n          disabled: disabled || dataSet.selected.length === 0,\n        };\n      case TableButtonType.reset:\n        return {\n          icon: 'undo',\n          onClick: this.handleButtonReset,\n          children: $l('Table', 'reset_button'),\n          type: ButtonType.reset,\n        };\n      case TableButtonType.query:\n        return { icon: 'search', onClick: this.handleQuery, children: $l('Table', 'query_button') };\n      case TableButtonType.export:\n        return {\n          icon: 'export',\n          onClick: this.handleButtonExport,\n          children: $l('Table', 'export_button'),\n        };\n      case TableButtonType.expandAll:\n        return isTree\n          ? {\n              icon: 'add_box',\n              onClick: this.handleExpandAll,\n              children: $l('Table', 'expand_button'),\n            }\n          : undefined;\n      case TableButtonType.collapseAll:\n        return isTree\n          ? {\n              icon: 'short_text',\n              onClick: this.handleCollapseAll,\n              children: $l('Table', 'collapse_button'),\n            }\n          : undefined;\n      default:\n    }\n  }\n\n  getButtons(): ReactElement<ButtonProps>[] {\n    const { buttons } = this.props;\n    const children: ReactElement<ButtonProps>[] = [];\n    if (buttons) {\n      const tableButtonProps = getConfig('tableButtonProps');\n      buttons.forEach(button => {\n        let props: TableButtonProps = {};\n        if (isArrayLike(button)) {\n          props = button[1] || {};\n          button = button[0];\n        }\n        if (isString(button) && button in TableButtonType) {\n          const { afterClick, ...buttonProps } = props;\n          const defaultButtonProps = this.getButtonProps(button);\n          if (defaultButtonProps) {\n            if (afterClick) {\n              const { onClick } = defaultButtonProps;\n              defaultButtonProps.onClick = async e => {\n                e.persist();\n                try {\n                  await onClick(e);\n                } finally {\n                  afterClick(e);\n                }\n              };\n            }\n            children.push(\n              <Button\n                key={button}\n                {...tableButtonProps}\n                {...defaultButtonProps}\n                {...buttonProps}\n              />,\n            );\n          }\n        } else if (isValidElement<ButtonProps>(button)) {\n          children.push(cloneElement(button, { ...tableButtonProps, ...button.props }));\n        } else if (isObject(button)) {\n          children.push(<Button {...tableButtonProps} {...button} />);\n        }\n      });\n    }\n    return children;\n  }\n\n  getQueryFields(): ReactElement<any>[] {\n    const {\n      context: {\n        tableStore: { dataSet },\n      },\n      props: { queryFields },\n    } = this;\n    const { queryDataSet } = dataSet;\n    const result: ReactElement<any>[] = [];\n    if (queryDataSet) {\n      const { fields } = queryDataSet;\n      return [...fields.entries()].reduce((list, [name, field]) => {\n        if (!field.get('bind')) {\n          const props: any = {\n            key: name,\n            name,\n            dataSet: queryDataSet,\n          };\n          const element = queryFields![name];\n          list.push(\n            isValidElement(element)\n              ? cloneElement(element, props)\n              : cloneElement(getEditorByField(field), {\n                  ...props,\n                  ...(isObject(element) ? element : {}),\n                }),\n          );\n        }\n        return list;\n      }, result);\n    }\n    return result;\n  }\n\n  renderToolBar(props: TableQueryBarHookProps) {\n    const { prefixCls } = this.props;\n    return <TableToolBar key=\"toolbar\" prefixCls={prefixCls} {...props} />;\n  }\n\n  renderFilterBar(props: TableQueryBarHookProps) {\n    const {\n      props: { prefixCls, filterBarFieldName, filterBarPlaceholder },\n    } = this;\n    return (\n      <TableFilterBar\n        key=\"toolbar\"\n        prefixCls={prefixCls}\n        paramName={filterBarFieldName!}\n        placeholder={filterBarPlaceholder}\n        {...props}\n      />\n    );\n  }\n\n  renderAdvancedQueryBar(props: TableQueryBarHookProps) {\n    const { prefixCls } = this.props;\n    return <TableAdvancedQueryBar key=\"toolbar\" prefixCls={prefixCls} {...props} />;\n  }\n\n  render() {\n    const buttons = this.getButtons();\n    const {\n      context: {\n        tableStore: { dataSet, queryBar },\n      },\n      props: { queryFieldsLimit, prefixCls, pagination },\n      showQueryBar,\n    } = this;\n    if (showQueryBar) {\n      const { queryDataSet } = dataSet;\n      const queryFields = this.getQueryFields();\n      const props: TableQueryBarHookProps = {\n        dataSet,\n        queryDataSet,\n        buttons,\n        pagination,\n        queryFields,\n        queryFieldsLimit: queryFieldsLimit!,\n      };\n      if (typeof queryBar === 'function') {\n        return (queryBar as TableQueryBarHook)(props);\n      }\n      switch (queryBar) {\n        case TableQueryBarType.normal:\n          return this.renderToolBar(props);\n        case TableQueryBarType.bar:\n          return this.renderFilterBar(props);\n        case TableQueryBarType.advancedBar:\n          return this.renderAdvancedQueryBar(props);\n        default:\n      }\n    }\n    return [<TableButtons key=\"toolbar\" prefixCls={prefixCls} buttons={buttons} />, pagination];\n  }\n}\n"]}