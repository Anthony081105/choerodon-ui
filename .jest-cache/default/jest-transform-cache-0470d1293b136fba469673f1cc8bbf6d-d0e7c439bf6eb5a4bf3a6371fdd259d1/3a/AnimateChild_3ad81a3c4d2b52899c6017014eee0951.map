{"version":3,"sources":["animate/AnimateChild.jsx"],"names":["transitionMap","enter","appear","leave","AnimateChild","Component","done","animUtil","animationType","finishCallback","node","props","transitionName","animation","nameIsObj","end","isCssAnimationSupported","name","activeName","active","stopper","children","otherProps","style","PropTypes","any"],"mappings":"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","sourcesContent":["import { cloneElement, Component, isValidElement } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport omit from 'lodash/omit';\nimport PropTypes from 'prop-types';\nimport cssAnimate, { isCssAnimationSupported } from 'css-animation';\nimport animUtil from './util';\nconst transitionMap = {\n    enter: 'transitionEnter',\n    appear: 'transitionAppear',\n    leave: 'transitionLeave',\n};\nexport default class AnimateChild extends Component {\n    componentWillUnmount() {\n        this.stop();\n    }\n    componentWillEnter(done) {\n        if (animUtil.isEnterSupported(this.props)) {\n            this.transition('enter', done);\n        }\n        else {\n            done(this);\n        }\n    }\n    componentWillAppear(done) {\n        if (animUtil.isAppearSupported(this.props)) {\n            this.transition('appear', done);\n        }\n        else {\n            done(this);\n        }\n    }\n    componentWillLeave(done) {\n        if (animUtil.isLeaveSupported(this.props)) {\n            this.transition('leave', done);\n        }\n        else {\n            done(this);\n        }\n    }\n    transition(animationType, finishCallback) {\n        const node = findDOMNode(this);\n        if (node) {\n            const { props } = this;\n            const { transitionName, animation = {} } = props;\n            const nameIsObj = typeof transitionName === 'object';\n            this.stop();\n            const end = () => {\n                this.stopper = null;\n                finishCallback(this);\n            };\n            if ((isCssAnimationSupported || !animation[animationType]) &&\n                transitionName &&\n                props[transitionMap[animationType]]) {\n                const name = nameIsObj\n                    ? transitionName[animationType]\n                    : `${transitionName}-${animationType}`;\n                let activeName = `${name}-active`;\n                if (nameIsObj && transitionName[`${animationType}Active`]) {\n                    activeName = transitionName[`${animationType}Active`];\n                }\n                this.stopper = cssAnimate(node, {\n                    name,\n                    active: activeName,\n                }, end);\n            }\n            else {\n                this.stopper = animation[animationType](node, end);\n            }\n        }\n    }\n    stop() {\n        const { stopper } = this;\n        if (stopper) {\n            this.stopper = null;\n            stopper.stop();\n        }\n    }\n    render() {\n        const { children, ...otherProps } = this.props;\n        if (isValidElement(children)) {\n            const props = omit(otherProps, [\n                'animation',\n                'transitionName',\n                'transitionEnter',\n                'transitionAppear',\n                'transitionLeave',\n            ]);\n            const { style } = children.props;\n            return cloneElement(children, { ...props, style: { ...props.style, ...style } });\n        }\n        return children;\n    }\n}\nAnimateChild.displayName = 'AnimateChild';\nAnimateChild.propTypes = {\n    children: PropTypes.any,\n    transitionName: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    animation: PropTypes.any,\n};\n"]}