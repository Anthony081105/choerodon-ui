{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components/slider/index.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;IA6CqB,M;;;;;AAWnB,kBAAY,KAAZ,EAA8B;AAAA;;AAAA;AAC5B,kHAAM,KAAN;;AAMF,UAAA,oBAAA,GAAuB,UAAC,KAAD,EAAgB,OAAhB,EAAoC;AACzD,YAAK,QAAL,CAAc;AAAA,YAAG,QAAH,QAAG,QAAH;AAAA,eAAmB;AAC/B,UAAA,QAAQ,qCACH,QADG,uCAEL,KAFK,EAEG,OAFH;AADuB,SAAnB;AAAA,OAAd;AAMD,KAPD;;AASA,UAAA,iBAAA,GAAuC,iBAA6C;AAAA,UAA1C,KAA0C,SAA1C,KAA0C;AAAA,UAAnC,QAAmC,SAAnC,QAAmC;AAAA,UAAzB,KAAyB,SAAzB,KAAyB;AAAA,UAAf,SAAe;AAAA,wBACZ,MAAK,KADO;AAAA,UACxD,yBADwD,eAC1E,gBAD0E;AAAA,UAC7B,YAD6B,eAC7B,YAD6B;AAElF,UAAM,gBAAgB,GAAG,6BAAa,SAAb,EAAwB,yBAAxB,CAAzB;AAFkF,UAG1E,QAH0E,GAG7D,MAAK,KAHwD,CAG1E,QAH0E;AAIlF,UAAM,OAAO,GAAG,YAAY,GAAG,QAAQ,CAAC,KAAD,CAAR,IAAmB,QAAtB,GAAiC,KAA7D;AACA,aACE,gCAAC,mBAAD;AACE,QAAA,SAAS,EAAE,gBADb;AAEE,QAAA,KAAK,EAAE,YAAY,GAAG,YAAY,CAAC,KAAD,CAAf,GAAyB,EAF9C;AAGE,QAAA,OAAO,EAAE,OAHX;AAIE,QAAA,SAAS,EAAC,KAJZ;AAKE,QAAA,cAAc,EAAC,WALjB;AAME,QAAA,GAAG,EAAE;AANP,SAQE,gCAAC,cAAD,gCACM,SADN;AAEE,QAAA,KAAK,EAAE,KAFT;AAGE,QAAA,YAAY,EAAE;AAAA,iBAAM,MAAK,oBAAL,CAA0B,KAA1B,EAAiC,IAAjC,CAAN;AAAA,SAHhB;AAIE,QAAA,YAAY,EAAE;AAAA,iBAAM,MAAK,oBAAL,CAA0B,KAA1B,EAAiC,KAAjC,CAAN;AAAA;AAJhB,SARF,CADF;AAiBD,KAtBD;;AAgCA,UAAA,UAAA,GAAa,UAAC,IAAD,EAAc;AACzB,YAAK,QAAL,GAAgB,IAAhB;AACD,KAFD;;AA9CE,UAAK,KAAL,GAAa;AACX,MAAA,QAAQ,EAAE;AADC,KAAb;AAF4B;AAK7B;;;;4BAmCI;AACH,WAAK,QAAL,CAAc,KAAd;AACD;;;2BAEG;AACF,WAAK,QAAL,CAAc,KAAd;AACD;;;6BAMK;AAAA,yBAC2D,KAAK,KADhE;AAAA,UACI,KADJ,gBACI,KADJ;AAAA,UACsB,kBADtB,gBACW,SADX;AAAA,UAC6C,SAD7C;AAEJ,UAAM,SAAS,GAAG,6BAAa,QAAb,EAAuB,kBAAvB,CAAlB;;AACA,UAAI,KAAJ,EAAW;AACT,eACE,gCAAC,aAAD,gCACM,SADN;AAEE,UAAA,GAAG,EAAE,KAAK,UAFZ;AAGE,UAAA,MAAM,EAAE,KAAK,iBAHf;AAIE,UAAA,SAAS,EAAE;AAJb,WADF;AAQD;;AACD,aACE,gCAAC,kBAAD,gCACM,SADN;AAEE,QAAA,GAAG,EAAE,KAAK,UAFZ;AAGE,QAAA,MAAM,EAAE,KAAK,iBAHf;AAIE,QAAA,SAAS,EAAE;AAJb,SADF;AAQD;;;EApFiC,gB;;;AAC3B,MAAA,CAAA,WAAA,GAAc,QAAd;AAEA,MAAA,CAAA,YAAA,GAAe;AACpB,EAAA,YADoB,wBACP,KADO,EACM;AACxB,WAAO,KAAK,CAAC,QAAN,EAAP;AACD;AAHmB,CAAf","sourcesContent":["import React, { Component, CSSProperties, ReactElement, ReactNode } from 'react';\nimport Tooltip from '../tooltip';\nimport RcSlider, { Handle as RcHandle, Range as RcRange } from '../rc-components/slider';\nimport { getPrefixCls } from '../configure';\n\nexport interface SliderMarks {\n  [key: number]:\n    | ReactNode\n    | {\n        style: CSSProperties;\n        label: ReactNode;\n      };\n}\n\nexport type SliderValue = number | [number, number];\n\nexport type HandleGeneratorFn = (info: {\n  value: number;\n  dragging: boolean;\n  index: number;\n  rest: any[];\n}) => ReactElement<any>;\n\nexport interface SliderProps {\n  prefixCls?: string;\n  tooltipPrefixCls?: string;\n  range?: boolean;\n  min?: number;\n  max?: number;\n  step?: number | null;\n  marks?: SliderMarks;\n  dots?: boolean;\n  value?: SliderValue;\n  defaultValue?: SliderValue;\n  included?: boolean;\n  disabled?: boolean;\n  vertical?: boolean;\n  onChange?: (value: SliderValue) => void;\n  onAfterChange?: (value: SliderValue) => void;\n  tipFormatter?: null | ((value: number) => ReactNode);\n  className?: string;\n  id?: string;\n}\n\nexport interface SliderState {\n  visibles: { [index: number]: boolean };\n}\n\nexport default class Slider extends Component<SliderProps, SliderState> {\n  static displayName = 'Slider';\n\n  static defaultProps = {\n    tipFormatter(value: number) {\n      return value.toString();\n    },\n  };\n\n  private rcSlider: any;\n\n  constructor(props: SliderProps) {\n    super(props);\n    this.state = {\n      visibles: {},\n    };\n  }\n\n  toggleTooltipVisible = (index: number, visible: boolean) => {\n    this.setState(({ visibles }) => ({\n      visibles: {\n        ...visibles,\n        [index]: visible,\n      },\n    }));\n  };\n\n  handleWithTooltip: HandleGeneratorFn = ({ value, dragging, index, ...restProps }) => {\n    const { tooltipPrefixCls: customizeTooltipPrefixCls, tipFormatter } = this.props;\n    const tooltipPrefixCls = getPrefixCls('tooltip', customizeTooltipPrefixCls);\n    const { visibles } = this.state;\n    const visible = tipFormatter ? visibles[index] || dragging : false;\n    return (\n      <Tooltip\n        prefixCls={tooltipPrefixCls}\n        title={tipFormatter ? tipFormatter(value) : ''}\n        visible={visible}\n        placement=\"top\"\n        transitionName=\"zoom-down\"\n        key={index}\n      >\n        <RcHandle\n          {...restProps}\n          value={value}\n          onMouseEnter={() => this.toggleTooltipVisible(index, true)}\n          onMouseLeave={() => this.toggleTooltipVisible(index, false)}\n        />\n      </Tooltip>\n    );\n  };\n\n  focus() {\n    this.rcSlider.focus();\n  }\n\n  blur() {\n    this.rcSlider.focus();\n  }\n\n  saveSlider = (node: any) => {\n    this.rcSlider = node;\n  };\n\n  render() {\n    const { range, prefixCls: customizePrefixCls, ...restProps } = this.props;\n    const prefixCls = getPrefixCls('slider', customizePrefixCls);\n    if (range) {\n      return (\n        <RcRange\n          {...restProps}\n          ref={this.saveSlider}\n          handle={this.handleWithTooltip}\n          prefixCls={prefixCls}\n        />\n      );\n    }\n    return (\n      <RcSlider\n        {...restProps}\n        ref={this.saveSlider}\n        handle={this.handleWithTooltip}\n        prefixCls={prefixCls}\n      />\n    );\n  }\n}\n"]}