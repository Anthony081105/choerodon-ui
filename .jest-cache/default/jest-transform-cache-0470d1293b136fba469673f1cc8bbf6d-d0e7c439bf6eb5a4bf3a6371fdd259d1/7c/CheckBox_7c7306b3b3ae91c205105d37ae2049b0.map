{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/check-box/CheckBox.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { ReactNode } from 'react';\nimport PropTypes from 'prop-types';\nimport omit from 'lodash/omit';\nimport { action, runInAction } from 'mobx';\nimport { observer } from 'mobx-react';\nimport { Radio, RadioProps } from '../radio/Radio';\nimport { BooleanValue } from '../data-set/enum';\n\nexport interface CheckBoxProps extends RadioProps {\n  /**\n   * 中间状态\n   */\n  indeterminate?: boolean;\n  /**\n   * 未选中时的值\n   */\n  unCheckedValue?: any;\n  /**\n   * 非选中时的内容\n   */\n  unCheckedChildren?: ReactNode;\n  defaultChecked?: boolean;\n}\n\nexport class CheckBox<T extends CheckBoxProps> extends Radio<T & CheckBoxProps> {\n  static displayName = 'CheckBox';\n\n  static propTypes = {\n    /**\n     * 中间状态\n     */\n    indeterminate: PropTypes.bool,\n    /**\n     * 未选中时的值\n     */\n    unCheckedValue: PropTypes.any,\n    /**\n     * 未选中时的内容\n     */\n    unCheckedChildren: PropTypes.node,\n    defaultChecked: PropTypes.bool,\n    ...Radio.propTypes,\n  };\n\n  static defaultProps = {\n    ...Radio.defaultProps,\n    suffixCls: 'checkbox',\n    indeterminate: false,\n  };\n\n  type: string = 'checkbox';\n\n  get unCheckedValue() {\n    const { unCheckedValue } = this.props;\n    if (unCheckedValue !== undefined) {\n      return unCheckedValue;\n    }\n    const { field } = this;\n    if (field) {\n      return field.get(BooleanValue.falseValue);\n    }\n    return false;\n  }\n\n  get checkedValue() {\n    const { value } = this.props;\n    if (value !== undefined) {\n      return value;\n    }\n    const { field } = this;\n    if (field) {\n      return field.get(BooleanValue.trueValue);\n    }\n    return true;\n  }\n\n  constructor(props, context) {\n    super(props, context);\n    runInAction(() => {\n      this.value = this.props.defaultChecked ? this.checkedValue : this.unCheckedValue;\n    });\n  }\n\n  getOtherProps() {\n    return omit(super.getOtherProps(), [\n      'defaultChecked',\n      'unCheckedValue',\n      'unCheckedChildren',\n      'indeterminate',\n    ]);\n  }\n\n  renderInner(): ReactNode {\n    return <i className={`${this.prefixCls}-inner`} />;\n  }\n\n  getChildrenText() {\n    const { children, unCheckedChildren } = this.props;\n    return this.isChecked() ? children : unCheckedChildren || children;\n  }\n\n  getWrapperClassNames() {\n    const {\n      prefixCls,\n      props: { indeterminate },\n    } = this;\n    return super.getWrapperClassNames({\n      [`${prefixCls}-indeterminate`]: indeterminate,\n    });\n  }\n\n  isChecked() {\n    const { checked, indeterminate } = this.props;\n    if (indeterminate) {\n      return false;\n    }\n    const { name, dataSet, checkedValue } = this;\n    if (dataSet && name) {\n      return this.getValues().indexOf(checkedValue) !== -1;\n    }\n    if (checked !== undefined) {\n      return checked;\n    }\n    return this.value === checkedValue;\n  }\n\n  getDataSetValues(): any[] {\n    const values = this.getDataSetValue();\n    if (values === undefined) {\n      return [];\n    }\n    return [].concat(values);\n  }\n\n  @action\n  setValue(value: any): void {\n    const { record, checkedValue, multiple } = this;\n    if (record) {\n      let values;\n      if (multiple) {\n        values = this.getValues();\n        if (value === checkedValue) {\n          values.push(value);\n        } else {\n          const index = values.indexOf(checkedValue);\n          if (index !== -1) {\n            values.splice(index, 1);\n          }\n        }\n      } else {\n        values = value;\n      }\n      super.setValue(values);\n    } else {\n      super.setValue(value);\n    }\n  }\n\n  @action\n  setChecked(checked) {\n    this.setValue(checked ? this.checkedValue : this.unCheckedValue);\n  }\n\n  getOldValue() {\n    return this.isChecked() ? this.checkedValue : this.unCheckedValue;\n  }\n}\n\n@observer\nexport default class ObserverCheckBox extends CheckBox<CheckBoxProps> {\n  static defaultProps = CheckBox.defaultProps;\n}\n"]}