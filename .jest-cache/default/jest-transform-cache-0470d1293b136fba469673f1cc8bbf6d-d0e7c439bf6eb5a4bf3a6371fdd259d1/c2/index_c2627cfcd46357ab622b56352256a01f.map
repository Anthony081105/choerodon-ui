{"version":3,"sources":["notification/index.jsx"],"names":["notificationInstance","defaultDuration","defaultTop","defaultBottom","defaultPlacement","duration","placement","bottom","top","getContainer","options","defaultGetContainer","style","left","right","cacheKey","callback","Notification","prefixCls","className","getPlacementStyle","closeIcon","typeToIcon","success","info","error","warning","outerPrefixCls","args","iconNode","iconType","autoMarginTag","getNotificationInstance","notification","content","closable","onClose","key","api","open","close","Object","config","destroy","type"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Icon from '../icon';\nimport Notification from '../rc-components/notification';\nimport { getPrefixCls } from '../configure';\nconst notificationInstance = {};\nlet defaultDuration = 4.5;\nlet defaultTop = 24;\nlet defaultBottom = 24;\nlet defaultPlacement = 'topRight';\nlet defaultGetContainer;\nfunction setNotificationConfig(options) {\n    const { duration, placement, bottom, top, getContainer } = options;\n    if (duration !== undefined) {\n        defaultDuration = duration;\n    }\n    if (placement !== undefined) {\n        defaultPlacement = placement;\n    }\n    if (bottom !== undefined) {\n        defaultBottom = bottom;\n    }\n    if (top !== undefined) {\n        defaultTop = top;\n    }\n    if (getContainer !== undefined) {\n        defaultGetContainer = getContainer;\n    }\n}\nfunction getPlacementStyle(placement) {\n    let style;\n    switch (placement) {\n        case 'topLeft':\n            style = {\n                left: 0,\n                top: defaultTop,\n                bottom: 'auto',\n            };\n            break;\n        case 'topRight':\n            style = {\n                right: 0,\n                top: defaultTop,\n                bottom: 'auto',\n            };\n            break;\n        case 'bottomLeft':\n            style = {\n                left: 0,\n                top: 'auto',\n                bottom: defaultBottom,\n            };\n            break;\n        default:\n            style = {\n                right: 0,\n                top: 'auto',\n                bottom: defaultBottom,\n            };\n            break;\n    }\n    return style;\n}\nfunction getNotificationInstance(prefixCls, placement, callback) {\n    const cacheKey = `${prefixCls}-${placement}`;\n    if (notificationInstance[cacheKey]) {\n        callback(notificationInstance[cacheKey]);\n        return;\n    }\n    Notification.newInstance({\n        prefixCls,\n        className: `${prefixCls}-${placement}`,\n        style: getPlacementStyle(placement),\n        getContainer: defaultGetContainer,\n        closeIcon: <Icon className={`${prefixCls}-close-icon`} type=\"close\"/>,\n    }, (notification) => {\n        notificationInstance[cacheKey] = notification;\n        callback(notification);\n    });\n}\nconst typeToIcon = {\n    success: 'check',\n    info: 'info',\n    error: 'error',\n    warning: 'warning',\n};\nfunction notice(args) {\n    const outerPrefixCls = getPrefixCls('notification', args.prefixCls);\n    const prefixCls = `${outerPrefixCls}-notice`;\n    const duration = args.duration === undefined ? defaultDuration : args.duration;\n    let iconNode = null;\n    if (args.icon) {\n        iconNode = <span className={`${prefixCls}-icon`}>{args.icon}</span>;\n    }\n    else if (args.type) {\n        const iconType = typeToIcon[args.type];\n        iconNode = (<Icon className={`${prefixCls}-icon ${prefixCls}-icon-${args.type}`} type={iconType}/>);\n    }\n    const autoMarginTag = !args.description && iconNode ? (<span className={`${prefixCls}-message-single-line-auto-margin`}/>) : null;\n    getNotificationInstance(outerPrefixCls, args.placement || defaultPlacement, (notification) => {\n        notification.notice({\n            content: (<div className={iconNode ? `${prefixCls}-with-icon` : ''}>\n            {iconNode}\n            <div className={`${prefixCls}-message`}>\n              {autoMarginTag}\n              {args.message}\n            </div>\n            <div className={`${prefixCls}-description`}>{args.description}</div>\n            {args.btn ? <span className={`${prefixCls}-btn`}>{args.btn}</span> : null}\n          </div>),\n            duration,\n            closable: true,\n            onClose: args.onClose,\n            key: args.key,\n            style: args.style || {},\n            className: args.className,\n        });\n    });\n}\nconst api = {\n    open: notice,\n    close(key) {\n        Object.keys(notificationInstance).forEach(cacheKey => notificationInstance[cacheKey].removeNotice(key));\n    },\n    config: setNotificationConfig,\n    destroy() {\n        Object.keys(notificationInstance).forEach(cacheKey => {\n            notificationInstance[cacheKey].destroy();\n            delete notificationInstance[cacheKey];\n        });\n    },\n};\n['success', 'info', 'warning', 'error'].forEach(type => {\n    api[type] = (args) => api.open({\n        ...args,\n        type,\n    });\n});\napi.warn = api.warning;\nexport default api;\n"]}