{"version":3,"sources":["tree/Tree.jsx"],"names":["contextTypes","rcTree","root","PropTypes","prefixCls","selectable","showIcon","icon","draggable","checkable","checkStrictly","disabled","openTransitionName","openAnimation","loadData","filterTreeNode","renderTreeNode","isKeyChecked","onNodeExpand","onNodeSelect","onNodeMouseEnter","onNodeMouseLeave","onNodeContextMenu","onNodeDragStart","onNodeDragEnter","onNodeDragOver","onNodeDragLeave","onNodeDragEnd","onNodeDrop","onBatchNodeCheck","onCheckConductFinished","func","Tree","Component","className","children","showLine","focusable","multiple","defaultExpandParent","autoExpandParent","defaultExpandAll","defaultExpandedKeys","expandedKeys","defaultCheckedKeys","checkedKeys","defaultSelectedKeys","selectedKeys","onExpand","onCheck","onSelect","onMouseEnter","onMouseLeave","onRightClick","onDragStart","onDragEnter","onDragOver","onDragLeave","onDragEnd","onDrop","switcherIcon","props","halfCheckedKeys","state","nextProps","eventKey","node","dragNodesKeys","event","pos","dropPosition","dragOverNodeKey","setTimeout","Object","clearTimeout","newExpandedKeys","dropNodeKey","posArr","dropResult","dragNode","Number","selected","treeNode","targetSelected","selectedNodes","key","eventObj","checked","list","halfChecked","checkedKeySet","halfCheckedKeySet","newCheckedKeys","newHalfCheckedKeys","selectedObj","expanded","index","targetExpanded","prevProps","needSync","newState","myPrevProps","checkSync","name","level","child","dragOver","dragOverGapTop","dragOverGapBottom","domProps","Children"],"mappings":"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","sourcesContent":["import React, { Children, cloneElement, Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport warning from '../../_util/warning';\nimport {\n  arrAdd,\n  arrDel,\n  calcCheckedKeys,\n  calcDropPosition,\n  calcExpandedKeys,\n  calcSelectedKeys,\n  getDragNodesKeys,\n  getFullKeyList,\n  getPosition,\n  getStrictlyValue,\n  posToArr,\n  traverseTreeNodes,\n} from './util';\n\n/**\n * Thought we still use `cloneElement` to pass `key`,\n * other props can pass with context for future refactor.\n */\nexport const contextTypes = {\n  rcTree: PropTypes.shape({\n    root: PropTypes.object,\n\n    prefixCls: PropTypes.string,\n    selectable: PropTypes.bool,\n    showIcon: PropTypes.bool,\n    icon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n    draggable: PropTypes.bool,\n    checkable: PropTypes.oneOfType([\n      PropTypes.bool,\n      PropTypes.node,\n    ]),\n    checkStrictly: PropTypes.bool,\n    disabled: PropTypes.bool,\n    openTransitionName: PropTypes.string,\n    openAnimation: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    loadData: PropTypes.func,\n    filterTreeNode: PropTypes.func,\n    renderTreeNode: PropTypes.func,\n\n    isKeyChecked: PropTypes.func,\n\n    onNodeExpand: PropTypes.func,\n    onNodeSelect: PropTypes.func,\n    onNodeMouseEnter: PropTypes.func,\n    onNodeMouseLeave: PropTypes.func,\n    onNodeContextMenu: PropTypes.func,\n    onNodeDragStart: PropTypes.func,\n    onNodeDragEnter: PropTypes.func,\n    onNodeDragOver: PropTypes.func,\n    onNodeDragLeave: PropTypes.func,\n    onNodeDragEnd: PropTypes.func,\n    onNodeDrop: PropTypes.func,\n    onBatchNodeCheck: PropTypes.func,\n    onCheckConductFinished: PropTypes.func,\n  }),\n};\n\nclass Tree extends Component {\n  static propTypes = {\n    prefixCls: PropTypes.string,\n    className: PropTypes.string,\n    children: PropTypes.any,\n    showLine: PropTypes.bool,\n    showIcon: PropTypes.bool,\n    icon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n    focusable: PropTypes.bool,\n    selectable: PropTypes.bool,\n    disabled: PropTypes.bool,\n    multiple: PropTypes.bool,\n    checkable: PropTypes.oneOfType([\n      PropTypes.bool,\n      PropTypes.node,\n    ]),\n    checkStrictly: PropTypes.bool,\n    draggable: PropTypes.bool,\n    defaultExpandParent: PropTypes.bool,\n    autoExpandParent: PropTypes.bool,\n    defaultExpandAll: PropTypes.bool,\n    defaultExpandedKeys: PropTypes.arrayOf(PropTypes.string),\n    expandedKeys: PropTypes.arrayOf(PropTypes.string),\n    defaultCheckedKeys: PropTypes.arrayOf(PropTypes.string),\n    checkedKeys: PropTypes.oneOfType([\n      PropTypes.arrayOf(PropTypes.string),\n      PropTypes.object,\n    ]),\n    defaultSelectedKeys: PropTypes.arrayOf(PropTypes.string),\n    selectedKeys: PropTypes.arrayOf(PropTypes.string),\n    onExpand: PropTypes.func,\n    onCheck: PropTypes.func,\n    onSelect: PropTypes.func,\n    loadData: PropTypes.func,\n    onMouseEnter: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onRightClick: PropTypes.func,\n    onDragStart: PropTypes.func,\n    onDragEnter: PropTypes.func,\n    onDragOver: PropTypes.func,\n    onDragLeave: PropTypes.func,\n    onDragEnd: PropTypes.func,\n    onDrop: PropTypes.func,\n    filterTreeNode: PropTypes.func,\n    openTransitionName: PropTypes.string,\n    openAnimation: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    switcherIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  };\n\n  static childContextTypes = contextTypes;\n\n  static defaultProps = {\n    prefixCls: 'rc-tree',\n    showLine: false,\n    showIcon: true,\n    selectable: true,\n    multiple: false,\n    checkable: false,\n    disabled: false,\n    checkStrictly: false,\n    draggable: false,\n    defaultExpandParent: true,\n    autoExpandParent: false,\n    defaultExpandAll: false,\n    defaultExpandedKeys: [],\n    defaultCheckedKeys: [],\n    defaultSelectedKeys: [],\n    onExpand: null,\n    onCheck: null,\n    onSelect: null,\n    onDragStart: null,\n    onDragEnter: null,\n    onDragOver: null,\n    onDragLeave: null,\n    onDrop: null,\n    onDragEnd: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n  };\n\n  constructor(props) {\n    super(props);\n\n    const {\n      defaultExpandAll,\n      defaultExpandParent,\n      defaultExpandedKeys,\n      defaultCheckedKeys,\n      defaultSelectedKeys,\n      expandedKeys,\n    } = props;\n\n    // Sync state with props\n    const { checkedKeys = [], halfCheckedKeys = [] } =\n    calcCheckedKeys(defaultCheckedKeys, props) || {};\n\n    const state = {\n      selectedKeys: calcSelectedKeys(defaultSelectedKeys, props),\n      checkedKeys,\n      halfCheckedKeys,\n    };\n\n    if (defaultExpandAll) {\n      state.expandedKeys = getFullKeyList(props.children);\n    } else if (defaultExpandParent) {\n      state.expandedKeys = calcExpandedKeys(expandedKeys || defaultExpandedKeys, props);\n    } else {\n      state.expandedKeys = defaultExpandedKeys;\n    }\n\n    this.state = {\n      ...state,\n      ...(this.getSyncProps(props) || {}),\n    };\n\n    // Cache for check status to optimize\n    this.checkedBatch = null;\n  }\n\n  getChildContext() {\n    const {\n      prefixCls, selectable, showIcon, icon, draggable, checkable, checkStrictly, disabled,\n      loadData, filterTreeNode,\n      openTransitionName, openAnimation,\n      switcherIcon,\n    } = this.props;\n\n    return {\n      rcTree: {\n        // root: this,\n\n        prefixCls,\n        selectable,\n        showIcon,\n        icon,\n        switcherIcon,\n        draggable,\n        checkable,\n        checkStrictly,\n        disabled,\n        openTransitionName,\n        openAnimation,\n\n        loadData,\n        filterTreeNode,\n        renderTreeNode: this.renderTreeNode,\n        isKeyChecked: this.isKeyChecked,\n\n        onNodeExpand: this.onNodeExpand,\n        onNodeSelect: this.onNodeSelect,\n        onNodeMouseEnter: this.onNodeMouseEnter,\n        onNodeMouseLeave: this.onNodeMouseLeave,\n        onNodeContextMenu: this.onNodeContextMenu,\n        onNodeDragStart: this.onNodeDragStart,\n        onNodeDragEnter: this.onNodeDragEnter,\n        onNodeDragOver: this.onNodeDragOver,\n        onNodeDragLeave: this.onNodeDragLeave,\n        onNodeDragEnd: this.onNodeDragEnd,\n        onNodeDrop: this.onNodeDrop,\n        onBatchNodeCheck: this.onBatchNodeCheck,\n        onCheckConductFinished: this.onCheckConductFinished,\n      },\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    // React 16 will not trigger update if new state is null\n    this.setState(this.getSyncProps(nextProps, this.props));\n  }\n\n  onNodeDragStart = (event, node) => {\n    const { expandedKeys } = this.state;\n    const { onDragStart } = this.props;\n    const { eventKey, children } = node.props;\n\n    this.dragNode = node;\n\n    this.setState({\n      dragNodesKeys: getDragNodesKeys(children, node),\n      expandedKeys: arrDel(expandedKeys, eventKey),\n    });\n\n    if (onDragStart) {\n      onDragStart({ event, node });\n    }\n  };\n\n  /**\n   * [Legacy] Select handler is less small than node,\n   * so that this will trigger when drag enter node or select handler.\n   * This is a little tricky if customize css without padding.\n   * Better for use mouse move event to refresh drag state.\n   * But let's just keep it to avoid event trigger logic change.\n   */\n  onNodeDragEnter = (event, node) => {\n    const { expandedKeys } = this.state;\n    const { onDragEnter } = this.props;\n    const { pos, eventKey } = node.props;\n\n    const dropPosition = calcDropPosition(event, node);\n\n    // Skip if drag node is self\n    if (\n      this.dragNode.props.eventKey === eventKey &&\n      dropPosition === 0\n    ) {\n      this.setState({\n        dragOverNodeKey: '',\n        dropPosition: null,\n      });\n      return;\n    }\n\n    // Ref: https://github.com/react-component/tree/issues/132\n    // Add timeout to let onDragLevel fire before onDragEnter,\n    // so that we can clean drag props for onDragLeave node.\n    // Macro task for this:\n    // https://html.spec.whatwg.org/multipage/webappapis.html#clean-up-after-running-script\n    setTimeout(() => {\n      // Update drag over node\n      this.setState({\n        dragOverNodeKey: eventKey,\n        dropPosition,\n      });\n\n      // Side effect for delay drag\n      if (!this.delayedDragEnterLogic) {\n        this.delayedDragEnterLogic = {};\n      }\n      Object.keys(this.delayedDragEnterLogic).forEach((key) => {\n        clearTimeout(this.delayedDragEnterLogic[key]);\n      });\n      this.delayedDragEnterLogic[pos] = setTimeout(() => {\n        const newExpandedKeys = arrAdd(expandedKeys, eventKey);\n        this.setState({\n          expandedKeys: newExpandedKeys,\n        });\n\n        if (onDragEnter) {\n          onDragEnter({ event, node, expandedKeys: newExpandedKeys });\n        }\n      }, 400);\n    }, 0);\n  };\n  onNodeDragOver = (event, node) => {\n    const { onDragOver } = this.props;\n    if (onDragOver) {\n      onDragOver({ event, node });\n    }\n  };\n  onNodeDragLeave = (event, node) => {\n    const { onDragLeave } = this.props;\n\n    this.setState({\n      dragOverNodeKey: '',\n    });\n\n    if (onDragLeave) {\n      onDragLeave({ event, node });\n    }\n  };\n  onNodeDragEnd = (event, node) => {\n    const { onDragEnd } = this.props;\n    this.setState({\n      dragOverNodeKey: '',\n    });\n    if (onDragEnd) {\n      onDragEnd({ event, node });\n    }\n  };\n  onNodeDrop = (event, node) => {\n    const { dragNodesKeys, dropPosition } = this.state;\n    const { onDrop } = this.props;\n    const { eventKey, pos } = node.props;\n\n    this.setState({\n      dragOverNodeKey: '',\n      dropNodeKey: eventKey,\n    });\n\n    if (dragNodesKeys.indexOf(eventKey) !== -1) {\n      warning(false, 'Can not drop to dragNode(include it\\'s children node)');\n      return;\n    }\n\n    const posArr = posToArr(pos);\n\n    const dropResult = {\n      event,\n      node,\n      dragNode: this.dragNode,\n      dragNodesKeys: dragNodesKeys.slice(),\n      dropPosition: dropPosition + Number(posArr[posArr.length - 1]),\n    };\n\n    if (dropPosition !== 0) {\n      dropResult.dropToGap = true;\n    }\n\n    if (onDrop) {\n      onDrop(dropResult);\n    }\n  };\n\n  onNodeSelect = (e, treeNode) => {\n    let { selectedKeys } = this.state;\n    const { onSelect, multiple, children } = this.props;\n    const { selected, eventKey } = treeNode.props;\n    const targetSelected = !selected;\n\n    // Update selected keys\n    if (!targetSelected) {\n      selectedKeys = arrDel(selectedKeys, eventKey);\n    } else if (!multiple) {\n      selectedKeys = [eventKey];\n    } else {\n      selectedKeys = arrAdd(selectedKeys, eventKey);\n    }\n\n    // [Legacy] Not found related usage in doc or upper libs\n    // [Legacy] TODO: add optimize prop to skip node process\n    const selectedNodes = [];\n    if (selectedKeys.length) {\n      traverseTreeNodes(children, ({ node, key }) => {\n        if (selectedKeys.indexOf(key) !== -1) {\n          selectedNodes.push(node);\n        }\n      });\n    }\n\n    this.setUncontrolledState({ selectedKeys });\n\n    if (onSelect) {\n      const eventObj = {\n        event: 'select',\n        selected: targetSelected,\n        node: treeNode,\n        selectedNodes,\n      };\n      onSelect(selectedKeys, eventObj);\n    }\n  };\n\n  /**\n   * This will cache node check status to optimize update process.\n   * When Tree get trigger `onCheckConductFinished` will flush all the update.\n   */\n  onBatchNodeCheck = (key, checked, halfChecked, startNode) => {\n    if (startNode) {\n      this.checkedBatch = {\n        treeNode: startNode,\n        checked,\n        list: [],\n      };\n    }\n\n    // This code should never called\n    if (!this.checkedBatch) {\n      this.checkedBatch = {\n        list: [],\n      };\n      warning(\n        false,\n        'Checked batch not init. This should be a bug. Please fire a issue.',\n      );\n    }\n\n    this.checkedBatch.list.push({ key, checked, halfChecked });\n  };\n\n  /**\n   * When top `onCheckConductFinished` called, will execute all batch update.\n   * And trigger `onCheck` event.\n   */\n  onCheckConductFinished = () => {\n    const { checkedKeys, halfCheckedKeys } = this.state;\n    const { onCheck, checkStrictly, children } = this.props;\n\n    // Use map to optimize update speed\n    const checkedKeySet = {};\n    const halfCheckedKeySet = {};\n\n    checkedKeys.forEach(key => {\n      checkedKeySet[key] = true;\n    });\n    halfCheckedKeys.forEach(key => {\n      halfCheckedKeySet[key] = true;\n    });\n\n    // Batch process\n    this.checkedBatch.list.forEach(({ key, checked, halfChecked }) => {\n      checkedKeySet[key] = checked;\n      halfCheckedKeySet[key] = halfChecked;\n    });\n    const newCheckedKeys = Object.keys(checkedKeySet).filter(key => checkedKeySet[key]);\n    const newHalfCheckedKeys = Object.keys(halfCheckedKeySet).filter(key => halfCheckedKeySet[key]);\n\n    // Trigger onChecked\n    let selectedObj;\n\n    const eventObj = {\n      event: 'check',\n      node: this.checkedBatch.treeNode,\n      checked: this.checkedBatch.checked,\n    };\n\n    if (checkStrictly) {\n      selectedObj = getStrictlyValue(newCheckedKeys, newHalfCheckedKeys);\n\n      // [Legacy] TODO: add optimize prop to skip node process\n      eventObj.checkedNodes = [];\n      traverseTreeNodes(children, ({ node, key }) => {\n        if (checkedKeySet[key]) {\n          eventObj.checkedNodes.push(node);\n        }\n      });\n\n      this.setUncontrolledState({ checkedKeys: newCheckedKeys });\n    } else {\n      selectedObj = newCheckedKeys;\n\n      // [Legacy] TODO: add optimize prop to skip node process\n      eventObj.checkedNodes = [];\n      eventObj.checkedNodesPositions = []; // [Legacy] TODO: not in API\n      eventObj.halfCheckedKeys = newHalfCheckedKeys; // [Legacy] TODO: not in API\n      traverseTreeNodes(children, ({ node, pos, key }) => {\n        if (checkedKeySet[key]) {\n          eventObj.checkedNodes.push(node);\n          eventObj.checkedNodesPositions.push({ node, pos });\n        }\n      });\n\n      this.setUncontrolledState({\n        checkedKeys: newCheckedKeys,\n        halfCheckedKeys: newHalfCheckedKeys,\n      });\n    }\n\n    if (onCheck) {\n      onCheck(selectedObj, eventObj);\n    }\n\n    // Clean up\n    this.checkedBatch = null;\n  };\n\n  onNodeExpand = (e, treeNode) => {\n    let { expandedKeys } = this.state;\n    const { onExpand, loadData } = this.props;\n    const { eventKey, expanded } = treeNode.props;\n\n    // Update selected keys\n    const index = expandedKeys.indexOf(eventKey);\n    const targetExpanded = !expanded;\n\n    warning(\n      (expanded && index !== -1) || (!expanded && index === -1)\n      , 'Expand state not sync with index check');\n\n    if (targetExpanded) {\n      expandedKeys = arrAdd(expandedKeys, eventKey);\n    } else {\n      expandedKeys = arrDel(expandedKeys, eventKey);\n    }\n\n    this.setUncontrolledState({ expandedKeys });\n\n    if (onExpand) {\n      onExpand(expandedKeys, { node: treeNode, expanded: targetExpanded });\n    }\n\n    // Async Load data\n    if (targetExpanded && loadData) {\n      return loadData(treeNode).then(() => {\n        // [Legacy] Refresh logic\n        this.setUncontrolledState({ expandedKeys });\n      });\n    }\n\n    return null;\n  };\n\n  onNodeMouseEnter = (event, node) => {\n    const { onMouseEnter } = this.props;\n    if (onMouseEnter) {\n      onMouseEnter({ event, node });\n    }\n  };\n\n  onNodeMouseLeave = (event, node) => {\n    const { onMouseLeave } = this.props;\n    if (onMouseLeave) {\n      onMouseLeave({ event, node });\n    }\n  };\n\n  onNodeContextMenu = (event, node) => {\n    const { onRightClick } = this.props;\n    if (onRightClick) {\n      event.preventDefault();\n      onRightClick({ event, node });\n    }\n  };\n\n  /**\n   * Sync state with props if needed\n   */\n  getSyncProps = (props = {}, prevProps) => {\n    let needSync = false;\n    const newState = {};\n    const myPrevProps = prevProps || {};\n\n    function checkSync(name) {\n      if (props[name] !== myPrevProps[name]) {\n        needSync = true;\n        return true;\n      }\n      return false;\n    }\n\n    // Children change will affect check box status.\n    // And no need to check when prev props not provided\n    if (prevProps && checkSync('children')) {\n      const { checkedKeys = [], halfCheckedKeys = [] } =\n      calcCheckedKeys(props.checkedKeys || this.state.checkedKeys, props) || {};\n      newState.checkedKeys = checkedKeys;\n      newState.halfCheckedKeys = halfCheckedKeys;\n    }\n\n    // Re-calculate when autoExpandParent or expandedKeys changed\n    if (prevProps && (checkSync('autoExpandParent') || checkSync('expandedKeys'))) {\n      newState.expandedKeys = props.autoExpandParent ? calcExpandedKeys(props.expandedKeys, props) : props.expandedKeys;\n    }\n\n    if (checkSync('selectedKeys')) {\n      newState.selectedKeys = calcSelectedKeys(props.selectedKeys, props);\n    }\n\n    if (checkSync('checkedKeys')) {\n      const { checkedKeys = [], halfCheckedKeys = [] } =\n      calcCheckedKeys(props.checkedKeys, props) || {};\n      newState.checkedKeys = checkedKeys;\n      newState.halfCheckedKeys = halfCheckedKeys;\n    }\n\n    return needSync ? newState : null;\n  };\n\n  /**\n   * Only update the value which is not in props\n   */\n  setUncontrolledState = (state) => {\n    let needSync = false;\n    const newState = {};\n\n    Object.keys(state).forEach(name => {\n      if (name in this.props) return;\n\n      needSync = true;\n      newState[name] = state[name];\n    });\n\n    this.setState(needSync ? newState : null);\n  };\n\n  isKeyChecked = (key) => {\n    const { checkedKeys = [] } = this.state;\n    return checkedKeys.indexOf(key) !== -1;\n  };\n\n  /**\n   * [Legacy] Original logic use `key` as tracking clue.\n   * We have to use `cloneElement` to pass `key`.\n   */\n  renderTreeNode = (child, index, level = 0) => {\n    const {\n      expandedKeys = [], selectedKeys = [], halfCheckedKeys = [],\n      dragOverNodeKey, dropPosition,\n    } = this.state;\n    const {} = this.props;\n    const pos = getPosition(level, index);\n    const key = child.key || pos;\n\n    return cloneElement(child, {\n      eventKey: key,\n      expanded: expandedKeys.indexOf(key) !== -1,\n      selected: selectedKeys.indexOf(key) !== -1,\n      checked: this.isKeyChecked(key),\n      halfChecked: halfCheckedKeys.indexOf(key) !== -1,\n      pos,\n\n      // [Legacy] Drag props\n      dragOver: dragOverNodeKey === key && dropPosition === 0,\n      dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\n      dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1,\n    });\n  };\n\n  render() {\n    const {\n      prefixCls, className, focusable,\n      showLine,\n      children,\n    } = this.props;\n    const domProps = {};\n\n    // [Legacy] Commit: 0117f0c9db0e2956e92cb208f51a42387dfcb3d1\n    if (focusable) {\n      domProps.tabIndex = '0';\n      domProps.onKeyDown = this.onKeyDown;\n    }\n\n    return (\n      <ul\n        {...domProps}\n        className={classNames(prefixCls, className, {\n          [`${prefixCls}-show-line`]: showLine,\n        })}\n        role=\"tree-node\"\n        unselectable=\"on\"\n      >\n        {Children.map(children, this.renderTreeNode, this)}\n      </ul>\n    );\n  }\n}\n\nexport default Tree;\n"]}