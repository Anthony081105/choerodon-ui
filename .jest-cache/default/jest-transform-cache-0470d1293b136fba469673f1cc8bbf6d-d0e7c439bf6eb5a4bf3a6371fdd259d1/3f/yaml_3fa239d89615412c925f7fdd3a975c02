535e905671cb54b2fabbc3f409f00ad5
"use strict";

/* istanbul ignore next */
var cov_1ial3zxhww = function () {
  var path = "/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/code-area/lint/yaml.tsx";
  var hash = "eec833ed7ba6ee0cf77d52ad164d3c031ff7f27d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/code-area/lint/yaml.tsx",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 29
        },
        end: {
          line: 3,
          column: 84
        }
      },
      "1": {
        start: {
          line: 5,
          column: 14
        },
        end: {
          line: 5,
          column: 56
        }
      },
      "2": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 38,
          column: 1
        }
      },
      "3": {
        start: {
          line: 8,
          column: 2
        },
        end: {
          line: 8,
          column: 44
        }
      },
      "4": {
        start: {
          line: 10,
          column: 2
        },
        end: {
          line: 10,
          column: 40
        }
      },
      "5": {
        start: {
          line: 12,
          column: 19
        },
        end: {
          line: 12,
          column: 40
        }
      },
      "6": {
        start: {
          line: 14,
          column: 2
        },
        end: {
          line: 37,
          column: 5
        }
      },
      "7": {
        start: {
          line: 15,
          column: 16
        },
        end: {
          line: 15,
          column: 18
        }
      },
      "8": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 34,
          column: 5
        }
      },
      "9": {
        start: {
          line: 18,
          column: 6
        },
        end: {
          line: 18,
          column: 39
        }
      },
      "10": {
        start: {
          line: 20,
          column: 16
        },
        end: {
          line: 20,
          column: 22
        }
      },
      "11": {
        start: {
          line: 21,
          column: 20
        },
        end: {
          line: 21,
          column: 29
        }
      },
      "12": {
        start: {
          line: 27,
          column: 17
        },
        end: {
          line: 27,
          column: 82
        }
      },
      "13": {
        start: {
          line: 28,
          column: 15
        },
        end: {
          line: 28,
          column: 19
        }
      },
      "14": {
        start: {
          line: 29,
          column: 6
        },
        end: {
          line: 33,
          column: 9
        }
      },
      "15": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 36,
          column: 17
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 14,
            column: 44
          },
          end: {
            line: 14,
            column: 45
          }
        },
        loc: {
          start: {
            line: 14,
            column: 60
          },
          end: {
            line: 37,
            column: 3
          }
        },
        line: 14
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 7,
            column: 0
          },
          end: {
            line: 38,
            column: 1
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 7,
            column: 0
          },
          end: {
            line: 38,
            column: 1
          }
        }, {
          start: {
            line: 7,
            column: 0
          },
          end: {
            line: 38,
            column: 1
          }
        }],
        line: 7
      },
      "1": {
        loc: {
          start: {
            line: 27,
            column: 17
          },
          end: {
            line: 27,
            column: 82
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 27,
            column: 23
          },
          end: {
            line: 27,
            column: 59
          }
        }, {
          start: {
            line: 27,
            column: 62
          },
          end: {
            line: 27,
            column: 82
          }
        }],
        line: 27
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    _coverageSchema: "43e27e138ebf9cfc5966b082cf9a028302ed4184",
    hash: "eec833ed7ba6ee0cf77d52ad164d3c031ff7f27d"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  return coverage[path] = coverageData;
}();

var _interopRequireDefault =
/* istanbul ignore next */
(cov_1ial3zxhww.s[0]++, require("@babel/runtime/helpers/interopRequireDefault"));

var _jsYaml =
/* istanbul ignore next */
(cov_1ial3zxhww.s[1]++, _interopRequireDefault(require("js-yaml")));

/* istanbul ignore next */
cov_1ial3zxhww.s[2]++;

if (typeof window !== 'undefined') {
  /* istanbul ignore next */
  cov_1ial3zxhww.b[0][0]++;
  cov_1ial3zxhww.s[3]++;

  require('codemirror/addon/lint/lint.css');

  /* istanbul ignore next */
  cov_1ial3zxhww.s[4]++;

  require('codemirror/addon/lint/lint');

  var CodeMirror =
  /* istanbul ignore next */
  (cov_1ial3zxhww.s[5]++, require('codemirror'));

  /* istanbul ignore next */
  cov_1ial3zxhww.s[6]++;
  CodeMirror.registerHelper('lint', 'yaml', function (text) {
    /* istanbul ignore next */
    cov_1ial3zxhww.f[0]++;
    var found =
    /* istanbul ignore next */
    (cov_1ial3zxhww.s[7]++, []);

    /* istanbul ignore next */
    cov_1ial3zxhww.s[8]++;

    try {
      /* istanbul ignore next */
      cov_1ial3zxhww.s[9]++;

      _jsYaml["default"].loadAll(text);
    } catch (e) {
      var loc =
      /* istanbul ignore next */
      (cov_1ial3zxhww.s[10]++, e.mark),
          message =
      /* istanbul ignore next */
      (cov_1ial3zxhww.s[11]++, e.message); // js-yaml YAMLException doesn't always provide an accurate lineno
      // e.g., when there are multiple yaml docs
      // ---
      // ---
      // foo:bar

      var from =
      /* istanbul ignore next */
      (cov_1ial3zxhww.s[12]++, loc ?
      /* istanbul ignore next */
      (cov_1ial3zxhww.b[1][0]++, CodeMirror.Pos(loc.line, loc.column)) :
      /* istanbul ignore next */
      (cov_1ial3zxhww.b[1][1]++, CodeMirror.Pos(0, 0)));
      var to =
      /* istanbul ignore next */
      (cov_1ial3zxhww.s[13]++, from);

      /* istanbul ignore next */
      cov_1ial3zxhww.s[14]++;
      found.push({
        from: from,
        to: to,
        message: message
      });
    }

    /* istanbul ignore next */
    cov_1ial3zxhww.s[15]++;
    return found;
  });
} else
/* istanbul ignore next */
{
  cov_1ial3zxhww.b[0][1]++;
}