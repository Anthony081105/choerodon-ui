226845448639b619f5e58fe852f103cb
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _radio = _interopRequireDefault(require("../radio"));

var _group = _interopRequireDefault(require("../group"));

describe('Radio', function () {
  function createRadioGroup(props) {
    return _react["default"].createElement(_group["default"], props, _react["default"].createElement(_radio["default"], {
      value: "A"
    }, "A"), _react["default"].createElement(_radio["default"], {
      value: "B"
    }, "B"), _react["default"].createElement(_radio["default"], {
      value: "C"
    }, "C"));
  }

  function createRadioGroupByOption(props) {
    var options = [{
      label: 'A',
      value: 'A'
    }, {
      label: 'B',
      value: 'B'
    }, {
      label: 'C',
      value: 'C'
    }];
    return _react["default"].createElement(_group["default"], (0, _extends2["default"])({}, props, {
      options: options
    }));
  }

  it('responses hover events', function () {
    var onMouseEnter = jest.fn();
    var onMouseLeave = jest.fn();
    var wrapper = (0, _enzyme.shallow)(_react["default"].createElement(_group["default"], {
      className: "radiogroup",
      onMouseEnter: onMouseEnter,
      onMouseLeave: onMouseLeave
    }, _react["default"].createElement(_radio["default"], null)));
    wrapper.find('.radiogroup').simulate('mouseenter');
    expect(onMouseEnter).toHaveBeenCalled();
    wrapper.find('.radiogroup').simulate('mouseleave');
    expect(onMouseLeave).toHaveBeenCalled();
  });
  it('fire change events when value changes', function () {
    var onChange = jest.fn();
    var wrapper = (0, _enzyme.mount)(createRadioGroup({
      onChange: onChange
    }));
    var radios = wrapper.find('input'); // uncontrolled component

    wrapper.setState({
      value: 'B'
    });
    radios.at(0).simulate('change');
    expect(onChange.mock.calls.length).toBe(1); // controlled component

    wrapper.setProps({
      value: 'A'
    });
    radios.at(1).simulate('change');
    expect(onChange.mock.calls.length).toBe(2);
  });
  it("won't fire change events when value not changes", function () {
    var onChange = jest.fn();
    var wrapper = (0, _enzyme.mount)(createRadioGroup({
      onChange: onChange
    }));
    var radios = wrapper.find('input'); // uncontrolled component

    wrapper.setState({
      value: 'B'
    });
    radios.at(1).simulate('change');
    expect(onChange.mock.calls.length).toBe(0); // controlled component

    wrapper.setProps({
      value: 'A'
    });
    radios.at(0).simulate('change');
    expect(onChange.mock.calls.length).toBe(0);
  });
  it('optional should correct render', function () {
    var wrapper = (0, _enzyme.mount)(createRadioGroupByOption());
    var radios = wrapper.find('input');
    expect(radios.length).toBe(3);
  });
  it('all children should have a name property', function () {
    var GROUP_NAME = 'radiogroup';
    var wrapper = (0, _enzyme.mount)(createRadioGroup({
      name: GROUP_NAME
    }));
    wrapper.find('input[type="radio"]').forEach(function (el) {
      expect(el.props().name).toEqual(GROUP_NAME);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,