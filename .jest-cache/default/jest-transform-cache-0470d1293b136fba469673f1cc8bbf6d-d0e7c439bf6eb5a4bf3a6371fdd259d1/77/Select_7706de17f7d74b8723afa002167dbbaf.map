{"version":3,"sources":["Select.jsx"],"names":["scrollTo","element","to","duration","requestAnimationFrame","window","requestAnimationFrameTimeout","setTimeout","arguments","scrollTop","difference","perTick","Select","active","value","props","onSelect","type","e","setState","onMouseEnter","node","list","scrollToSelected","prevProps","selectedIndex","options","prefixCls","map","item","index","cls","disabled","onclick","bind","select","ReactDom","findDOMNode","topOption","children","offsetTop","length","state","handleMouseEnter","handleMouseLeave","saveList","getOptions","Component","PropTypes","string","array","number","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDom from 'react-dom';\nimport classnames from 'classnames';\n\nconst scrollTo = (element, to, duration) => {\n  const requestAnimationFrame = window.requestAnimationFrame ||\n    function requestAnimationFrameTimeout() {\n      return setTimeout(arguments[0], 10);\n    };\n  // jump to target if duration zero\n  if (duration <= 0) {\n    element.scrollTop = to;\n    return;\n  }\n  const difference = to - element.scrollTop;\n  const perTick = difference / duration * 10;\n\n  requestAnimationFrame(() => {\n    element.scrollTop = element.scrollTop + perTick;\n    if (element.scrollTop === to) return;\n    scrollTo(element, to, duration - 10);\n  });\n};\n\nclass Select extends Component {\n  static propTypes = {\n    prefixCls: PropTypes.string,\n    options: PropTypes.array,\n    selectedIndex: PropTypes.number,\n    type: PropTypes.string,\n    onSelect: PropTypes.func,\n    onMouseEnter: PropTypes.func,\n  };\n\n  state = {\n    active: false,\n  };\n\n  componentDidMount() {\n    // jump to selected option\n    this.scrollToSelected(0);\n  }\n\n  componentDidUpdate(prevProps) {\n    // smooth scroll to selected option\n    if (prevProps.selectedIndex !== this.props.selectedIndex) {\n      this.scrollToSelected(120);\n    }\n  }\n\n  onSelect = (value) => {\n    const { onSelect, type } = this.props;\n    onSelect(type, value);\n  }\n\n  getOptions() {\n    const { options, selectedIndex, prefixCls } = this.props;\n    return options.map((item, index) => {\n      const cls = classnames({\n        [`${prefixCls}-select-option-selected`]: selectedIndex === index,\n        [`${prefixCls}-select-option-disabled`]: item.disabled,\n      });\n      let onclick = null;\n      if (!item.disabled) {\n        onclick = this.onSelect.bind(this, item.value);\n      }\n      return (<li\n        className={cls}\n        key={index}\n        onClick={onclick}\n        disabled={item.disabled}\n      >\n        {item.value}\n      </li>);\n    });\n  }\n\n  scrollToSelected(duration) {\n    // move to selected item\n    const select = ReactDom.findDOMNode(this);\n    const list = ReactDom.findDOMNode(this.list);\n    if (!list) {\n      return;\n    }\n    let index = this.props.selectedIndex;\n    if (index < 0) {\n      index = 0;\n    }\n    const topOption = list.children[index];\n    const to = topOption.offsetTop;\n    scrollTo(select, to, duration);\n  }\n\n  handleMouseEnter = (e) => {\n    this.setState({ active: true });\n    this.props.onMouseEnter(e);\n  }\n\n  handleMouseLeave = () => {\n    this.setState({ active: false });\n  }\n\n  saveList = (node) => {\n    this.list = node;\n  }\n\n  render() {\n    if (this.props.options.length === 0) {\n      return null;\n    }\n\n    const { prefixCls } = this.props;\n    const cls = classnames({\n      [`${prefixCls}-select`]: 1,\n      [`${prefixCls}-select-active`]: this.state.active,\n    });\n\n    return (\n      <div\n        className={cls}\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n      >\n        <ul ref={this.saveList}>{this.getOptions()}</ul>\n      </div>\n    );\n  }\n}\n\nexport default Select;\n"]}