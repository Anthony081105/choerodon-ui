{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components/checkbox/Checkbox.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAOA;;AACA;;AACA;;AAEA;;AACA;;IAmCqB,Q;;;;;AAArB,sBAAA;AAAA;;AAAA;;;AAoCE,UAAA,YAAA,GAAe,UAAC,IAAD,EAAc;AAC3B,YAAK,UAAL,GAAkB,IAAlB;AACD,KAFD;;AApCF;AAoFC;;;;0CApEG,S,EACA,S,EACA,W,EAAiC;AAAA,UAEzB,aAFyB,GAEP,KAAK,OAFE,CAEzB,aAFyB;AAGjC,aACE,CAAC,yBAAa,KAAK,KAAlB,EAAyB,SAAzB,CAAD,IACA,CAAC,yBAAa,KAAK,KAAlB,EAAyB,SAAzB,CADD,IAEA,CAAC,yBAAa,aAAb,EAA4B,WAAW,CAAC,aAAxC,CAHH;AAKD;;;4BAEI;AACH,WAAK,UAAL,CAAgB,KAAhB;AACD;;;2BAEG;AACF,WAAK,UAAL,CAAgB,IAAhB;AACD;;;6BAMK;AAAA,UACI,KADJ,GACuB,IADvB,CACI,KADJ;AAAA,UACW,OADX,GACuB,IADvB,CACW,OADX;AAAA,UAGS,kBAHT,GAWA,KAXA,CAGF,SAHE;AAAA,UAIF,SAJE,GAWA,KAXA,CAIF,SAJE;AAAA,UAKF,QALE,GAWA,KAXA,CAKF,QALE;AAAA,UAMF,aANE,GAWA,KAXA,CAMF,aANE;AAAA,UAOF,KAPE,GAWA,KAXA,CAOF,KAPE;AAAA,UAQF,YARE,GAWA,KAXA,CAQF,YARE;AAAA,UASF,YATE,GAWA,KAXA,CASF,YATE;AAAA,UAUC,SAVD,6CAWA,KAXA;AAYJ,UAAM,SAAS,GAAG,6BAAa,UAAb,EAAyB,kBAAzB,CAAlB;AAZI,UAaI,aAbJ,GAasB,OAbtB,CAaI,aAbJ;AAcJ,UAAM,aAAa,sCAAuB,SAAvB,CAAnB;;AACA,UAAI,aAAJ,EAAmB;AACjB,QAAA,aAAa,CAAC,QAAd,GAAyB;AAAA,iBACvB,aAAa,CAAC,YAAd,CAA2B;AAAE,YAAA,KAAK,EAAE,QAAT;AAAmB,YAAA,KAAK,EAAE,KAAK,CAAC;AAAhC,WAA3B,CADuB;AAAA,SAAzB;;AAEA,QAAA,aAAa,CAAC,OAAd,GAAwB,aAAa,CAAC,KAAd,CAAoB,OAApB,CAA4B,KAAK,CAAC,KAAlC,MAA6C,CAAC,CAAtE;AACA,QAAA,aAAa,CAAC,QAAd,GAAyB,KAAK,CAAC,QAAN,IAAkB,aAAa,CAAC,QAAzD;AACD;;AACD,UAAM,WAAW,GAAG,4BAAW,SAAX,iDACd,SADc,eACQ,IADR,EAApB;AAGA,UAAM,aAAa,GAAG,2EAChB,SADgB,qBACY,aADZ,EAAtB;AAGA,aACE;AACE,QAAA,SAAS,EAAE,WADb;AAEE,QAAA,KAAK,EAAE,KAFT;AAGE,QAAA,YAAY,EAAE,YAHhB;AAIE,QAAA,YAAY,EAAE;AAJhB,SAME,gCAAC,oBAAD,gCACM,aADN;AAEE,QAAA,SAAS,EAAE,SAFb;AAGE,QAAA,SAAS,EAAE,aAHb;AAIE,QAAA,GAAG,EAAE,KAAK;AAJZ,SANF,EAYG,QAAQ,KAAK,SAAb,GAAyB,8CAAO,QAAP,CAAzB,GAAmD,IAZtD,CADF;AAgBD;;;EAnFmC,gB;;;AAC7B,QAAA,CAAA,WAAA,GAAc,UAAd;AAIA,QAAA,CAAA,YAAA,GAAe;AACpB,EAAA,aAAa,EAAE;AADK,CAAf;AAIA,QAAA,CAAA,YAAA,GAAe;AACpB,EAAA,aAAa,EAAE,sBAAU;AADL,CAAf","sourcesContent":["import React, {\n  Component,\n  CSSProperties,\n  KeyboardEventHandler,\n  MouseEventHandler,\n  ReactNode,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport shallowEqual from 'lodash/isEqual';\nimport CheckboxGroup, { CheckboxGroupContext } from './Group';\nimport RcCheckbox from '../rc-components/checkbox';\nimport { getPrefixCls } from '../configure';\n\nexport interface AbstractCheckboxProps<T> {\n  prefixCls?: string;\n  className?: string;\n  defaultChecked?: boolean;\n  checked?: boolean;\n  style?: CSSProperties;\n  disabled?: boolean;\n  onChange?: (e: T) => void;\n  onMouseEnter?: MouseEventHandler<any>;\n  onMouseLeave?: MouseEventHandler<any>;\n  onKeyPress?: KeyboardEventHandler<any>;\n  onKeyDown?: KeyboardEventHandler<any>;\n  value?: any;\n  tabIndex?: number;\n  name?: string;\n  children?: ReactNode;\n}\n\nexport interface CheckboxProps extends AbstractCheckboxProps<CheckboxChangeEvent> {\n  indeterminate?: boolean;\n}\n\nexport interface CheckboxChangeEventTarget extends CheckboxProps {\n  checked: boolean;\n}\n\nexport interface CheckboxChangeEvent {\n  target: CheckboxChangeEventTarget;\n  stopPropagation: () => void;\n  preventDefault: () => void;\n  nativeEvent: MouseEvent;\n}\n\nexport default class Checkbox extends Component<CheckboxProps, {}> {\n  static displayName = 'Checkbox';\n\n  static Group: typeof CheckboxGroup;\n\n  static defaultProps = {\n    indeterminate: false,\n  };\n\n  static contextTypes = {\n    checkboxGroup: PropTypes.any,\n  };\n\n  private rcCheckbox: any;\n\n  shouldComponentUpdate(\n    nextProps: CheckboxProps,\n    nextState: {},\n    nextContext: CheckboxGroupContext,\n  ) {\n    const { checkboxGroup } = this.context;\n    return (\n      !shallowEqual(this.props, nextProps) ||\n      !shallowEqual(this.state, nextState) ||\n      !shallowEqual(checkboxGroup, nextContext.checkboxGroup)\n    );\n  }\n\n  focus() {\n    this.rcCheckbox.focus();\n  }\n\n  blur() {\n    this.rcCheckbox.blur();\n  }\n\n  saveCheckbox = (node: any) => {\n    this.rcCheckbox = node;\n  };\n\n  render() {\n    const { props, context } = this;\n    const {\n      prefixCls: customizePrefixCls,\n      className,\n      children,\n      indeterminate,\n      style,\n      onMouseEnter,\n      onMouseLeave,\n      ...restProps\n    } = props;\n    const prefixCls = getPrefixCls('checkbox', customizePrefixCls);\n    const { checkboxGroup } = context;\n    const checkboxProps: CheckboxProps = { ...restProps };\n    if (checkboxGroup) {\n      checkboxProps.onChange = () =>\n        checkboxGroup.toggleOption({ label: children, value: props.value });\n      checkboxProps.checked = checkboxGroup.value.indexOf(props.value) !== -1;\n      checkboxProps.disabled = props.disabled || checkboxGroup.disabled;\n    }\n    const classString = classNames(className, {\n      [`${prefixCls}-wrapper`]: true,\n    });\n    const checkboxClass = classNames({\n      [`${prefixCls}-indeterminate`]: indeterminate,\n    });\n    return (\n      <label\n        className={classString}\n        style={style}\n        onMouseEnter={onMouseEnter}\n        onMouseLeave={onMouseLeave}\n      >\n        <RcCheckbox\n          {...checkboxProps}\n          prefixCls={prefixCls}\n          className={checkboxClass}\n          ref={this.saveCheckbox}\n        />\n        {children !== undefined ? <span>{children}</span> : null}\n      </label>\n    );\n  }\n}\n"]}