{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/text-area/TextArea.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAUA,IAAqB,QAArB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,oCAsBe;AAAA,UACH,MADG,GACQ,KAAK,KADb,CACH,MADG;AAEX,UAAM,UAAU,GAAG,qIAA4B,CAAC,QAAD,CAA5B,CAAnB;AAFW,8BAGY,UAHZ,CAGH,KAHG;AAAA,UAGH,KAHG,kCAGK,EAHL;AAIX,MAAA,KAAK,CAAC,MAAN,GAAe,MAAf;;AACA,UAAI,MAAM,KAAA;AAAA;AAAV,QAAgC;AAC9B,UAAA,KAAK,CAAC,UAAN,GAAmB,MAAnB;AACD;;AACD,MAAA,UAAU,CAAC,KAAX,GAAmB,KAAnB;AACA,aAAO,UAAP;AACD;AAhCH;AAAA;AAAA,oCAkCe;AACX,UAAM,IAAI,GAAG,KAAK,WAAL,EAAb;AACA,aACE;AAAK,QAAA,GAAG,EAAC;AAAT,SAAuB,KAAK,eAAL,EAAvB,GACG,KAAK,iBAAL,EADH,EAEE,+CACE,0EACM,KAAK,aAAL,EADN;AAEE,QAAA,QAAQ,EAAE,CAAC,KAAK,QAFlB;AAGE,QAAA,KAAK,EAAE,0BAAS,IAAT,IAAiB,IAAjB,GAAwB,KAAK,OAAL,CAAa,KAAK,QAAL,EAAb;AAHjC,SADF,EAMG,KAAK,gBAAL,EANH,CAFF,CADF;AAaD;AAjDH;AAAA;AAAA,sCAmDiB,CAAK;AAnDtB;AAAA;AAAA,EAA+D,qBAA/D,CAAA;;AACS,QAAA,CAAA,WAAA,GAAc,UAAd;AAEA,QAAA,CAAA,SAAA;AACL,EAAA,IAAI,EAAE,sBAAU,MADX;AAEL,EAAA,IAAI,EAAE,sBAAU,MAFX;AAGL,EAAA,MAAM,EAAE,sBAAU,KAAV,CAAgB,C;;AAAA,I;;AAAA,I;;AAAA,I;;AAAA,GAAhB;AAHH,GASF,sBAAU,SATR;AAYA,QAAA,CAAA,YAAA,sCACF,sBAAU,YADR;AAEL,EAAA,SAAS,EAAE,UAFN;AAGL,EAAA,MAAM,EAAA;AAAA;AAHD;AAIL,EAAA,IAAI,EAAE;AAJD;AAfY,QAAQ,GAAA,uBAAA,CAD5B,mBAC4B,CAAA,EAAR,QAAQ,CAAR;eAAA,Q","sourcesContent":["import React, { ReactNode } from 'react';\nimport { observer } from 'mobx-react';\nimport isString from 'lodash/isString';\nimport omit from 'lodash/omit';\nimport PropTypes from 'prop-types';\nimport { TextField, TextFieldProps } from '../text-field/TextField';\nimport { ResizeType } from './enum';\n\nexport interface TextAreaProps extends TextFieldProps {\n  cols?: number;\n  rows?: number;\n  resize?: ResizeType;\n}\n\n@observer\nexport default class TextArea<T extends TextAreaProps> extends TextField<T> {\n  static displayName = 'TextArea';\n\n  static propTypes = {\n    cols: PropTypes.number,\n    rows: PropTypes.number,\n    resize: PropTypes.oneOf([\n      ResizeType.vertical,\n      ResizeType.horizontal,\n      ResizeType.none,\n      ResizeType.both,\n    ]),\n    ...TextField.propTypes,\n  };\n\n  static defaultProps = {\n    ...TextField.defaultProps,\n    suffixCls: 'textarea',\n    resize: ResizeType.none,\n    rows: 4,\n  };\n\n  getOtherProps() {\n    const { resize } = this.props;\n    const otherProps = omit(super.getOtherProps(), ['resize']);\n    const { style = {} } = otherProps;\n    style.resize = resize;\n    if (resize !== ResizeType.none) {\n      style.transition = 'none';\n    }\n    otherProps.style = style;\n    return otherProps;\n  }\n\n  renderWrapper(): ReactNode {\n    const text = this.getTextNode();\n    return (\n      <div key=\"wrapper\" {...this.getWrapperProps()}>\n        {this.renderPlaceHolder()}\n        <label>\n          <textarea\n            {...this.getOtherProps()}\n            readOnly={!this.editable}\n            value={isString(text) ? text : this.getText(this.getValue())}\n          />\n          {this.renderFloatLabel()}\n        </label>\n      </div>\n    );\n  }\n\n  handleEnterDown() {}\n}\n"]}