{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/intl-field/IntlField.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { ReactNode } from 'react';\nimport { observer } from 'mobx-react';\nimport { action, observable } from 'mobx';\nimport { ProgressType } from 'choerodon-ui/lib/progress/enum';\nimport { getConfig } from 'choerodon-ui/lib/configure';\nimport KeyCode from 'choerodon-ui/lib/_util/KeyCode';\nimport { TextField, TextFieldProps } from '../text-field/TextField';\nimport Icon from '../icon';\nimport { open } from '../modal-container/ModalContainer';\nimport IntlList from './IntlList';\nimport { ModalProps } from '../modal/Modal';\nimport localeContext, { $l } from '../locale-context';\nimport autobind from '../_util/autobind';\nimport { stopEvent } from '../_util/EventManager';\nimport Progress from '../progress';\nimport { Size } from '../core/enum';\nimport exception from '../_util/exception';\nimport message from '../message';\nimport isSame from '../_util/isSame';\n\nexport interface IntlFieldProps extends TextFieldProps {\n  modalProps?: ModalProps;\n}\n\n@observer\nexport default class IntlField extends TextField<IntlFieldProps> {\n  static displayName = 'IntlField';\n\n  modal;\n\n  locales?: object;\n\n  @observable loading?: boolean;\n\n  openModal = async () => {\n    if (!this.modal) {\n      const { modalProps } = this.props;\n      const { record, lang, name, element } = this;\n      if (record) {\n        this.setLoading(true);\n        try {\n          if (element && !isSame(this.getValue(), element.value)) {\n            this.syncValueOnBlur(element.value);\n          }\n          await record.tls(name);\n        } catch (err) {\n          message.error(exception(err));\n          return;\n        } finally {\n          this.setLoading(false);\n        }\n      }\n      this.storeLocales();\n\n      this.modal = open({\n        title: $l('IntlField', 'modal_title'),\n        children: <IntlList record={record} name={name} lang={lang} />,\n        onClose: this.handleIntlListClose,\n        onOk: this.handleIntlListOk,\n        onCancel: this.handleIntlListCancel,\n        destroyOnClose: true,\n        ...modalProps,\n      } as ModalProps & { children });\n    }\n  };\n\n  @action\n  setLoading(loading) {\n    this.loading = loading;\n  }\n\n  handleIntlListClose = async () => {\n    delete this.modal;\n    this.focus();\n  };\n\n  @autobind\n  async handleIntlListOk() {\n    const { supports } = localeContext;\n    const languages = Object.keys(supports);\n    const { record, name, field } = this;\n    if (record && field) {\n      const tlsKey = getConfig('tlsKey');\n      return (await Promise.all(\n        languages.map(language => {\n          const intlField = record.getField(`${tlsKey}.${name}.${language}`);\n          return intlField ? intlField.checkValidity() : true;\n        }),\n      )).every(Boolean);\n    }\n  }\n\n  @autobind\n  async handleIntlListCancel() {\n    const { name, record } = this;\n    if (record) {\n      const tlsKey = getConfig('tlsKey');\n      record.set(`${tlsKey}.${name}`, this.locales);\n    }\n  }\n\n  @autobind\n  handleKeyDown(e) {\n    if (e.keyCode === KeyCode.DOWN) {\n      stopEvent(e);\n      this.openModal();\n    }\n    super.handleKeyDown(e);\n  }\n\n  @autobind\n  handleBlur(e) {\n    if (this.modal) {\n      e.preventDefault();\n    }\n    super.handleBlur(e);\n  }\n\n  storeLocales() {\n    const { name, record } = this;\n    if (record) {\n      const tlsKey = getConfig('tlsKey');\n      this.locales = { ...record.get(`${tlsKey}.${name}`) };\n    }\n  }\n\n  getSuffix(): ReactNode {\n    const { suffix } = this.props;\n    return this.wrapperSuffix(\n      this.loading ? (\n        <Progress size={Size.small} type={ProgressType.loading} />\n      ) : (\n        suffix || <Icon type=\"language\" />\n      ),\n      {\n        onClick: this.isDisabled() || this.isReadOnly() ? undefined : this.openModal,\n      },\n    );\n  }\n\n  componentWillUnmount() {\n    if (this.modal) {\n      this.modal.close();\n    }\n  }\n}\n"]}