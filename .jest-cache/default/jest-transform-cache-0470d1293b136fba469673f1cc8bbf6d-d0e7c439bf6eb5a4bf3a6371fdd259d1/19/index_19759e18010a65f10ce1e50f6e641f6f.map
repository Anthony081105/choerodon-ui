{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components/avatar/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { Component, CSSProperties } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport classNames from 'classnames';\nimport isNumber from 'lodash/isNumber';\nimport Icon from '../icon';\nimport { Size } from '../_util/enum';\nimport { getPrefixCls } from '../configure';\n\nexport interface AvatarProps {\n  /** Shape of avatar, options:`circle`, `square` */\n  shape?: 'circle' | 'square';\n  /*\n   * Size of avatar, options: `large`, `small`, `default`\n   * or a custom number size\n   * */\n  size?: Size | number;\n  /** Src of image avatar */\n  src?: string;\n  /** Type of the Icon to be used in avatar */\n  icon?: string;\n  style?: CSSProperties;\n  prefixCls?: string;\n  className?: string;\n  children?: any;\n  alt?: string;\n  /* callback when img load error */\n  /* return false to prevent Avatar show default fallback behavior, then you can do fallback by your self */\n  onError?: () => boolean;\n}\n\nexport interface AvatarState {\n  scale: number;\n  isImgExist: boolean;\n}\n\nexport default class Avatar extends Component<AvatarProps, AvatarState> {\n  static displayName = 'Avatar';\n\n  static defaultProps = {\n    shape: 'circle',\n    size: Size.default,\n  };\n\n  private avatarChildren: any;\n\n  constructor(props: AvatarProps) {\n    super(props);\n    this.state = {\n      scale: 1,\n      isImgExist: true,\n    };\n  }\n\n  componentDidMount() {\n    this.setScale();\n  }\n\n  componentDidUpdate(prevProps: AvatarProps, prevState: AvatarState) {\n    const { children } = this.props;\n    const { scale, isImgExist } = this.state;\n    if (\n      prevProps.children !== children ||\n      (prevState.scale !== scale && scale === 1) ||\n      prevState.isImgExist !== isImgExist\n    ) {\n      this.setScale();\n    }\n  }\n\n  setScale = () => {\n    const childrenNode = this.avatarChildren;\n    if (childrenNode) {\n      const childrenWidth = childrenNode.offsetWidth;\n      const avatarNode = findDOMNode(this) as Element;\n      const avatarWidth = avatarNode.getBoundingClientRect().width;\n      // add 4px gap for each side to get better performance\n      if (avatarWidth - 8 < childrenWidth) {\n        this.setState({\n          scale: (avatarWidth - 8) / childrenWidth,\n        });\n      } else {\n        this.setState({\n          scale: 1,\n        });\n      }\n    }\n  };\n\n  handleImgLoadError = () => {\n    const { onError } = this.props;\n    const errorFlag = onError ? onError() : undefined;\n    if (errorFlag !== false) {\n      this.setState({ isImgExist: false });\n    }\n  };\n\n  render() {\n    const {\n      prefixCls: customizePrefixCls,\n      shape,\n      size,\n      src,\n      icon,\n      className,\n      alt,\n      ...others\n    } = this.props;\n    const prefixCls = getPrefixCls('avatar', customizePrefixCls);\n\n    const { isImgExist, scale } = this.state;\n\n    const sizeCls = classNames({\n      [`${prefixCls}-lg`]: size === Size.large,\n      [`${prefixCls}-sm`]: size === Size.small,\n    });\n\n    const classString = classNames(prefixCls, className, sizeCls, {\n      [`${prefixCls}-${shape}`]: shape,\n      [`${prefixCls}-image`]: src && isImgExist,\n      [`${prefixCls}-icon`]: icon,\n    });\n\n    const sizeStyle: CSSProperties = isNumber(size)\n      ? {\n          width: size,\n          height: size,\n          lineHeight: `${size}px`,\n          fontSize: icon ? size / 2 : 18,\n        }\n      : {};\n\n    let { children } = this.props;\n    if (src && isImgExist) {\n      children = <img src={src} onError={this.handleImgLoadError} alt={alt} />;\n    } else if (icon) {\n      children = <Icon type={icon} />;\n    } else {\n      const childrenNode = this.avatarChildren;\n      if (childrenNode || scale !== 1) {\n        const transformString = `scale(${scale}) translateX(-50%)`;\n        const childrenStyle: CSSProperties = {\n          msTransform: transformString,\n          WebkitTransform: transformString,\n          transform: transformString,\n        };\n        const sizeChildrenStyle: CSSProperties = isNumber(size)\n          ? {\n              lineHeight: `${size}px`,\n            }\n          : {};\n        children = (\n          <span\n            className={`${prefixCls}-string`}\n            ref={span => (this.avatarChildren = span)}\n            style={{ ...sizeChildrenStyle, ...childrenStyle }}\n          >\n            {children}\n          </span>\n        );\n      } else {\n        children = (\n          <span className={`${prefixCls}-string`} ref={span => (this.avatarChildren = span)}>\n            {children}\n          </span>\n        );\n      }\n    }\n    return (\n      <span {...others} style={{ ...sizeStyle, ...others.style }} className={classString}>\n        {children}\n      </span>\n    );\n  }\n}\n"]}