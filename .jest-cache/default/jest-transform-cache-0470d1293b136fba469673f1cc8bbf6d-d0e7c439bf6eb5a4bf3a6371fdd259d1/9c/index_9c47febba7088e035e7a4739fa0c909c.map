{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components/menu/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { Component, CSSProperties } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport animation from '../_util/openAnimation';\nimport warning from '../_util/warning';\nimport SubMenu from './SubMenu';\nimport Item from './MenuItem';\nimport { SiderContext } from '../layout/Sider';\nimport RcMenu, { Divider, ItemGroup } from '../rc-components/menu';\nimport { getPrefixCls } from '../configure';\n\nexport interface SelectParam {\n  key: string;\n  keyPath: Array<string>;\n  item: any;\n  domEvent: any;\n  selectedKeys: Array<string>;\n}\n\nexport interface ClickParam {\n  key: string;\n  keyPath: Array<string>;\n  item: any;\n  domEvent: any;\n}\n\nexport type MenuMode = 'vertical' | 'vertical-left' | 'vertical-right' | 'horizontal' | 'inline';\n\nexport type MenuTheme = 'light' | 'dark';\n\nexport interface MenuProps {\n  id?: string;\n  theme?: MenuTheme;\n  mode?: MenuMode;\n  selectable?: boolean;\n  selectedKeys?: Array<string>;\n  defaultSelectedKeys?: Array<string>;\n  openKeys?: Array<string>;\n  defaultOpenKeys?: Array<string>;\n  onOpenChange?: (openKeys: string[]) => void;\n  onSelect?: (param: SelectParam) => void;\n  onDeselect?: (param: SelectParam) => void;\n  onClick?: (param: ClickParam) => void;\n  style?: CSSProperties;\n  openAnimation?: string | Object;\n  openTransitionName?: string | Object;\n  className?: string;\n  prefixCls?: string;\n  multiple?: boolean;\n  inlineIndent?: number;\n  inlineCollapsed?: boolean;\n  subMenuCloseDelay?: number;\n  subMenuOpenDelay?: number;\n}\n\nexport interface MenuState {\n  openKeys: string[];\n}\n\nexport default class Menu extends Component<MenuProps, MenuState> {\n  static displayName = 'Menu';\n\n  static Divider = Divider;\n\n  static Item = Item;\n\n  static SubMenu = SubMenu;\n\n  static ItemGroup = ItemGroup;\n\n  static defaultProps = {\n    className: '',\n    theme: 'light', // or dark\n    focusable: false,\n  };\n\n  static childContextTypes = {\n    inlineCollapsed: PropTypes.bool,\n    menuTheme: PropTypes.string,\n  };\n\n  static contextTypes = {\n    siderCollapsed: PropTypes.bool,\n    collapsedWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  };\n\n  switchModeFromInline: boolean;\n\n  leaveAnimationExecutedWhenInlineCollapsed: boolean;\n\n  inlineOpenKeys: string[] = [];\n\n  constructor(props: MenuProps) {\n    super(props);\n\n    warning(\n      !('onOpen' in props || 'onClose' in props),\n      '`onOpen` and `onClose` are removed, please use `onOpenChange` instead',\n    );\n\n    warning(\n      !('inlineCollapsed' in props && props.mode !== 'inline'),\n      \"`inlineCollapsed` should only be used when Menu's `mode` is inline.\",\n    );\n\n    let openKeys;\n    if ('defaultOpenKeys' in props) {\n      openKeys = props.defaultOpenKeys;\n    } else if ('openKeys' in props) {\n      openKeys = props.openKeys;\n    }\n\n    this.state = {\n      openKeys: openKeys || [],\n    };\n  }\n\n  getChildContext() {\n    const { theme } = this.props;\n    return {\n      inlineCollapsed: this.getInlineCollapsed(),\n      menuTheme: theme,\n    };\n  }\n\n  getPrefixCls() {\n    const { prefixCls } = this.props;\n    return getPrefixCls('menu', prefixCls);\n  }\n\n  componentWillReceiveProps(nextProps: MenuProps, nextContext: SiderContext) {\n    const { mode, inlineCollapsed } = this.props;\n    if (mode === 'inline' && nextProps.mode !== 'inline') {\n      this.switchModeFromInline = true;\n    }\n    if ('openKeys' in nextProps) {\n      this.setState({ openKeys: nextProps.openKeys! });\n      return;\n    }\n    const { openKeys } = this.state;\n    const { siderCollapsed } = this.context;\n    if (\n      (nextProps.inlineCollapsed && !inlineCollapsed) ||\n      (nextContext.siderCollapsed && !siderCollapsed)\n    ) {\n      this.switchModeFromInline =\n        !!openKeys.length &&\n        !!(findDOMNode(this) as HTMLElement).querySelectorAll(\n          `.${this.getPrefixCls()}-submenu-open`,\n        ).length;\n      this.inlineOpenKeys = openKeys;\n      this.setState({ openKeys: [] });\n    }\n    if (\n      (!nextProps.inlineCollapsed && inlineCollapsed) ||\n      (!nextContext.siderCollapsed && siderCollapsed)\n    ) {\n      this.setState({ openKeys: this.inlineOpenKeys });\n      this.inlineOpenKeys = [];\n    }\n  }\n\n  handleClick = (e: ClickParam) => {\n    this.handleOpenChange([]);\n\n    const { onClick } = this.props;\n    if (onClick) {\n      onClick(e);\n    }\n  };\n\n  handleOpenChange = (openKeys: string[]) => {\n    this.setOpenKeys(openKeys);\n\n    const { onOpenChange } = this.props;\n    if (onOpenChange) {\n      onOpenChange(openKeys);\n    }\n  };\n\n  setOpenKeys(openKeys: string[]) {\n    if (!('openKeys' in this.props)) {\n      this.setState({ openKeys });\n    }\n  }\n\n  getRealMenuMode() {\n    const inlineCollapsed = this.getInlineCollapsed();\n    if (this.switchModeFromInline && inlineCollapsed) {\n      return 'inline';\n    }\n    const { mode } = this.props;\n    return inlineCollapsed ? 'vertical' : mode;\n  }\n\n  getInlineCollapsed() {\n    const { inlineCollapsed } = this.props;\n    const { siderCollapsed = inlineCollapsed } = this.context;\n    return siderCollapsed;\n  }\n\n  getMenuOpenAnimation(menuMode: MenuMode) {\n    const { openAnimation, openTransitionName } = this.props;\n    let menuOpenAnimation = openAnimation || openTransitionName;\n    if (openAnimation === undefined && openTransitionName === undefined) {\n      switch (menuMode) {\n        case 'horizontal':\n          menuOpenAnimation = 'slide-up';\n          break;\n        case 'vertical':\n        case 'vertical-left':\n        case 'vertical-right':\n          // When mode switch from inline\n          // submenu should hide without animation\n          if (this.switchModeFromInline) {\n            menuOpenAnimation = '';\n            this.switchModeFromInline = false;\n          } else {\n            menuOpenAnimation = 'zoom-big';\n          }\n          break;\n        case 'inline':\n          menuOpenAnimation = {\n            ...animation,\n            leave: (node: HTMLElement, done: () => void) =>\n              animation.leave(node, () => {\n                // Make sure inline menu leave animation finished before mode is switched\n                this.switchModeFromInline = false;\n                this.setState({});\n                // when inlineCollapsed change false to true, all submenu will be unmounted,\n                // so that we don't need handle animation leaving.\n                if (this.getRealMenuMode() === 'vertical') {\n                  return;\n                }\n                done();\n              }),\n          };\n          break;\n        default:\n      }\n    }\n    return menuOpenAnimation;\n  }\n\n  render() {\n    const { className, theme } = this.props;\n    const { openKeys } = this.state;\n    const prefixCls = this.getPrefixCls();\n    const menuMode = this.getRealMenuMode();\n    const menuOpenAnimation = this.getMenuOpenAnimation(menuMode!);\n\n    const menuClassName = classNames(className, `${prefixCls}-${theme}`, {\n      [`${prefixCls}-inline-collapsed`]: this.getInlineCollapsed(),\n    });\n\n    const menuProps: MenuProps = {\n      openKeys,\n      onOpenChange: this.handleOpenChange,\n      className: menuClassName,\n      mode: menuMode,\n    };\n\n    if (menuMode !== 'inline') {\n      // closing vertical popup submenu after click it\n      menuProps.onClick = this.handleClick;\n      menuProps.openTransitionName = menuOpenAnimation;\n    } else {\n      menuProps.openAnimation = menuOpenAnimation;\n    }\n\n    const { collapsedWidth } = this.context;\n    if (\n      this.getInlineCollapsed() &&\n      (collapsedWidth === 0 || collapsedWidth === '0' || collapsedWidth === '0px')\n    ) {\n      return null;\n    }\n\n    return <RcMenu {...this.props} {...menuProps} prefixCls={prefixCls} />;\n  }\n}\n"]}