{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/data-set/Field.tsx"],"names":[],"mappings":"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","sourcesContent":["import { action, computed, get, observable, ObservableMap, runInAction, set, toJS } from 'mobx';\nimport { MomentInput } from 'moment';\nimport isFunction from 'lodash/isFunction';\nimport isEqual from 'lodash/isEqual';\nimport isObject from 'lodash/isObject';\nimport merge from 'lodash/merge';\nimport defer from 'lodash/defer';\nimport unionBy from 'lodash/unionBy';\nimport { AxiosRequestConfig } from 'axios';\nimport { getConfig } from 'choerodon-ui/lib/configure';\nimport warning from 'choerodon-ui/lib/_util/warning';\nimport DataSet from './DataSet';\nimport Record from './Record';\nimport Validator, { CustomValidator, ValidationMessages } from '../validator/Validator';\nimport {\n  DataSetEvents,\n  DataSetSelection,\n  FieldFormat,\n  FieldIgnore,\n  FieldTrim,\n  FieldType,\n  SortOrder,\n} from './enum';\nimport lookupStore from '../stores/LookupCodeStore';\nimport lovCodeStore from '../stores/LovCodeStore';\nimport localeContext from '../locale-context';\nimport { findBindFields, getLimit, processValue } from './utils';\nimport Validity from '../validator/Validity';\nimport ValidationResult from '../validator/ValidationResult';\nimport { ValidatorProps } from '../validator/rules';\nimport isSame from '../_util/isSame';\nimport PromiseQueue from '../_util/PromiseQueue';\nimport { LovConfig } from '../lov/Lov';\nimport { TransportHookProps } from './Transport';\nimport isSameLike from '../_util/isSameLike';\nimport * as ObjectChainValue from '../_util/ObjectChainValue';\nimport { buildURLWithAxiosConfig } from '../axios/utils';\nimport { getDateFormatByField } from '../field/utils';\nimport { getLovPara } from '../stores/utils';\n\nfunction isEqualDynamicProps(oldProps, newProps) {\n  if (newProps === oldProps) {\n    return true;\n  }\n  if (isObject(newProps) && isObject(oldProps)) {\n    return Object.keys(newProps).every(key => {\n      const value = newProps[key];\n      const oldValue = oldProps[key];\n      if (oldValue === value) {\n        return true;\n      }\n      if (isFunction(value) && isFunction(oldValue)) {\n        return value.toString() === oldValue.toString();\n      }\n      return isEqual(oldValue, value);\n    });\n  }\n  return isEqual(newProps, oldProps);\n}\n\nfunction getPropsFromLovConfig(lovCode, propsName) {\n  if (lovCode) {\n    const config = lovCodeStore.getConfig(lovCode);\n    if (config) {\n      if (config[propsName]) {\n        return { [propsName]: config[propsName] };\n      }\n    }\n  }\n  return {};\n}\n\nexport type Fields = ObservableMap<string, Field>;\nexport type DynamicPropsArguments = { dataSet: DataSet; record: Record; name: string };\n\nexport type FieldProps = {\n  /**\n   * 字段名\n   */\n  name?: string;\n  /**\n   * 字段类型\n   */\n  type?: FieldType;\n  /**\n   * 排序类型\n   * 可选值： asc | desc\n   */\n  order?: SortOrder;\n  /**\n   * 字段标签\n   */\n  label?: string;\n  /**\n   * 字段标签宽度\n   */\n  labelWidth?: string;\n  /**\n   * 字符串类型和日期类型字段值格式化\n   */\n  format?: string | FieldFormat;\n  /**\n   * 正则\n   */\n  pattern?: string | RegExp;\n  /**\n   * 最小长度\n   */\n  minLength?: number;\n  /**\n   * 最大长度\n   */\n  maxLength?: number;\n  /**\n   * 步距\n   */\n  step?: number;\n  /**\n   * 最大值\n   */\n  max?: MomentInput | null;\n  /**\n   * 最小值\n   */\n  min?: MomentInput | null;\n  /**\n   * 校验器\n   */\n  validator?: CustomValidator;\n  /**\n   * 是否必选\n   * @default false\n   */\n  required?: boolean;\n  /**\n   * 是否只读\n   * @default false\n   */\n  readOnly?: boolean;\n  /**\n   * 1.当type为object时需要显示的字段名\n   * 2.值列表的文本字段，默认值为`meaning`\n   */\n  textField?: string;\n  /**\n   * 值列表的值字段，默认值为`value`\n   */\n  valueField?: string;\n  /**\n   *  类型为boolean时，true对应的值\n   */\n  trueValue?: string | number | boolean;\n  /**\n   *  类型为boolean时，false对应的值\n   */\n  falseValue?: string | number | boolean;\n  /**\n   * 下拉框组件的菜单数据集\n   */\n  options?: DataSet | string;\n  /**\n   * 是否分组\n   * 如果是number，则为分组的顺序\n   */\n  group?: number | boolean;\n  /**\n   * 默认值\n   */\n  defaultValue?: any;\n  /**\n   * 是否为值数组\n   * 当为字符串时，作为数据分隔符，查询时会将字符串分割成数组，提交时会将数组拼接成字符串\n   * @default false\n   */\n  multiple?: boolean | string;\n  /**\n   * 是否为范围值\n   * 当为true时，则值为[startValue, endValue]\n   * 当为数组时，例如['start', 'end']时，则值为{ start: startValue, end: endValue }\n   * @default false\n   */\n  range?: boolean | [string, string];\n  /**\n   * 唯一索引或联合唯一索引组名\n   */\n  unique?: boolean | string;\n  /**\n   * LOV代码\n   */\n  lovCode?: string;\n  /**\n   * LOV查询参数\n   */\n  lovPara?: object;\n  /**\n   * 值列表代码\n   */\n  lookupCode?: string;\n  /**\n   * 值列表请求的Url\n   */\n  lookupUrl?: string | ((code: string) => string);\n  /**\n   * LOV配置请求地址\n   */\n  lovDefineUrl?: string | ((code: string) => string);\n  /**\n   * LOV查询请求地址\n   */\n  lovQueryUrl?:\n    | string\n    | ((code: string, config: LovConfig | undefined, props: TransportHookProps) => string);\n  /**\n   * 值列表请求的axiosConfig\n   */\n  lookupAxiosConfig?:\n    | AxiosRequestConfig\n    | ((props: {\n        params?: any;\n        dataSet?: DataSet;\n        record?: Record;\n        lookupCode?: string;\n      }) => AxiosRequestConfig);\n  /**\n   * LOV配置请求的钩子\n   */\n  lovDefineAxiosConfig?: AxiosRequestConfig | ((code: string) => AxiosRequestConfig);\n  /**\n   * LOV查询请求的钩子\n   */\n  lovQueryAxiosConfig?:\n    | AxiosRequestConfig\n    | ((code: string, lovConfig?: LovConfig) => AxiosRequestConfig);\n  /**\n   * 内部字段别名绑定\n   */\n  bind?: string;\n  /**\n   * 动态属性\n   */\n  dynamicProps?:\n    | ((props: DynamicPropsArguments) => FieldProps | undefined)\n    | { [key: string]: (DynamicPropsArguments) => any };\n  /**\n   * 快码和LOV查询时的级联参数映射\n   * @example\n   * cascadeMap: { parentCodeValue: 'city' }\n   * 其中'city'是当前所在数据源的其他字段名，parentCodeValue是关联父级的查询字段\n   */\n  cascadeMap?: object;\n  /**\n   * 货币代码\n   */\n  currency?: string;\n  /**\n   * 忽略提交\n   * 可选值: always - 总是忽略 clean - 值未变化时忽略 never - 从不忽略\n   * @default never\n   */\n  ignore?: FieldIgnore;\n  /**\n   * 在发送请求之前对数据进行处理\n   */\n  transformRequest?: (value: any, record: Record) => any;\n  /**\n   * 在获得响应之后对数据进行处理\n   */\n  transformResponse?: (value: any, object: any) => any;\n  /**\n   * 字符串值是否去掉首尾空格\n   * 可选值: both left right none\n   */\n  trim?: FieldTrim;\n  /**\n   * 默认校验信息\n   */\n  defaultValidationMessages?: ValidationMessages;\n};\n\nexport default class Field {\n  static defaultProps: FieldProps = {\n    type: FieldType.auto,\n    required: false,\n    readOnly: false,\n    group: false,\n    textField: 'meaning',\n    valueField: 'value',\n    trueValue: true,\n    falseValue: false,\n    trim: FieldTrim.both,\n  };\n\n  dataSet?: DataSet;\n\n  record?: Record;\n\n  pristineProps: FieldProps;\n\n  validator: Validator = new Validator(this);\n\n  pending: PromiseQueue = new PromiseQueue();\n\n  lastDynamicProps: any = {};\n\n  isDynamicPropsComputing: boolean = false;\n\n  @observable props: FieldProps & { [key: string]: any };\n\n  @computed\n  get lookup(): object[] | undefined {\n    const lookup = this.get('lookup');\n    const valueField = this.get('valueField');\n    if (lookup) {\n      const lookupData = this.get('lookupData') || [];\n      return unionBy(lookup.concat(lookupData), valueField);\n    }\n    return undefined;\n  }\n\n  @computed\n  get options(): DataSet | undefined {\n    const options = this.get('options');\n    if (options) {\n      return options;\n    }\n    // 确保 lookup 相关配置介入观察\n    lookupStore.getAxiosConfig(this);\n    const { lookup } = this;\n    if (lookup) {\n      const selection = this.get('multiple') ? DataSetSelection.multiple : DataSetSelection.single;\n      return new DataSet({\n        data: lookup,\n        paging: false,\n        selection,\n      });\n    }\n    return undefined;\n  }\n\n  @computed\n  get intlFields(): Field[] {\n    const { record, type, name } = this;\n    const tlsKey = getConfig('tlsKey');\n    if (type === FieldType.intl && record && record.get(tlsKey)) {\n      return Object.keys(localeContext.supports).reduce<Field[]>((arr, lang) => {\n        const field = record.getField(`${tlsKey}.${name}.${lang}`);\n        if (field) {\n          arr.push(field);\n        }\n        return arr;\n      }, []);\n    }\n    return [];\n  }\n\n  @computed\n  get dirty(): boolean {\n    const { record, name, intlFields } = this;\n    if (intlFields.length) {\n      return intlFields.some(langField => langField.dirty);\n    }\n    if (record) {\n      const pristineValue = toJS(record.getPristineValue(name));\n      const value = toJS(record.get(name));\n      if (isObject(pristineValue) && isObject(value)) {\n        if (isEqual(pristineValue, value)) {\n          return false;\n        }\n        try {\n          const fields = findBindFields(this, record.fields, true);\n          if (fields.length) {\n            return fields.some(({ dirty }) => dirty);\n          }\n        } catch (e) {\n          console.error(e);\n          return true;\n        }\n      }\n      return !isSame(pristineValue, value);\n    }\n    return false;\n  }\n\n  get name(): string {\n    return this.props.name!;\n  }\n\n  get order(): string | undefined {\n    return this.get('order');\n  }\n\n  set order(order: string | undefined) {\n    this.set('order', order);\n  }\n\n  @computed\n  get valid(): boolean {\n    const {\n      intlFields,\n      validator: {\n        validity: { valid },\n      },\n    } = this;\n    if (valid && intlFields.length) {\n      return intlFields.every(field => field.valid);\n    }\n    return valid;\n  }\n\n  @computed\n  get validationMessage() {\n    return this.validator.validationMessage;\n  }\n\n  constructor(props: FieldProps = {}, dataSet?: DataSet, record?: Record) {\n    runInAction(() => {\n      this.dataSet = dataSet;\n      this.record = record;\n      this.pristineProps = props;\n      this.props = props;\n      this.fetchLookup();\n      this.fetchLovConfig();\n    });\n  }\n\n  /**\n   * 获取所有属性\n   * @return 属性对象\n   */\n  getProps(): FieldProps & { [key: string]: any } {\n    const dsField = this.findDataSetField();\n    const lovCode = this.get('lovCode');\n    return merge(\n      { lookupUrl: getConfig('lookupUrl') },\n      Field.defaultProps,\n      getPropsFromLovConfig(lovCode, 'textField'),\n      getPropsFromLovConfig(lovCode, 'valueField'),\n      dsField && dsField.props,\n      this.props,\n    );\n  }\n\n  /**\n   * 根据属性名获取属性值\n   * @param propsName 属性名\n   * @return {any}\n   */\n  get(propsName: string): any {\n    if (propsName !== 'dynamicProps') {\n      const dynamicProps = this.get('dynamicProps');\n      if (dynamicProps) {\n        if (typeof dynamicProps === 'function') {\n          warning(\n            false,\n            `\nThe dynamicProps hook will be deprecated. Please use dynamicProps map.\nFor e.g,\nBad case:\ndynamicProps({ record }) {\n  return {\n    bind: record.get('xx'),\n    label: record.get('yy'),\n  }\n}\nGood case:\ndynamicProps = {\n  bind({ record }) {\n    return record.get('xx')\n  },\n  label({ record }) {\n    return record.get('yy'),\n  }\n}`,\n          );\n          const props = this.executeDynamicProps(dynamicProps);\n          if (props && propsName in props) {\n            const prop = props[propsName];\n            this.checkDynamicProp(propsName, prop);\n            return prop;\n          }\n        } else {\n          const dynamicProp = dynamicProps[propsName];\n          if (typeof dynamicProp === 'function') {\n            const prop = this.executeDynamicProps(dynamicProp);\n            if (prop !== undefined) {\n              this.checkDynamicProp(propsName, prop);\n              return prop;\n            }\n          }\n        }\n        this.checkDynamicProp(propsName, undefined);\n      }\n    }\n    const value = get(this.props, propsName);\n    if (value !== undefined) {\n      return value;\n    }\n    const dsField = this.findDataSetField();\n    if (dsField) {\n      const dsValue = dsField.get(propsName);\n      if (dsValue !== undefined) {\n        return dsValue;\n      }\n    }\n    if (propsName === 'textField' || propsName === 'valueField') {\n      const lovCode = this.get('lovCode');\n      const lovProps = getPropsFromLovConfig(lovCode, propsName);\n      if (propsName in lovProps) {\n        return lovProps[propsName];\n      }\n    }\n    if (propsName === 'lookupUrl') {\n      return getConfig(propsName);\n    }\n    if (this.record) {\n      return Field.defaultProps[propsName];\n    }\n  }\n\n  /**\n   * 设置属性值\n   * @param propsName 属性名\n   * @param value 属性值\n   * @return {any}\n   */\n  @action\n  set(propsName: string, value: any): void {\n    const oldValue = this.get(propsName);\n    if (!isEqualDynamicProps(oldValue, value)) {\n      set(this.props, propsName, value);\n      const { record, dataSet, name } = this;\n      if (record) {\n        if (propsName === 'type') {\n          record.set(name, processValue(record.get(name), this));\n        }\n      }\n      if (dataSet) {\n        dataSet.fireEvent(DataSetEvents.fieldChange, {\n          dataSet,\n          record,\n          name,\n          field: this,\n          propsName,\n          value,\n          oldValue,\n        });\n      }\n      this.handlePropChange(propsName, value, oldValue);\n    }\n  }\n\n  /**\n   * 根据lookup值获取lookup对象\n   * @param value lookup值\n   * @return {object}\n   */\n  getLookupData(value: any = this.getValue()): object {\n    const valueField = this.get('valueField');\n    const data = {};\n    if (this.lookup) {\n      return this.lookup.find(obj => isSameLike(get(obj, valueField), value)) || data;\n    }\n    return data;\n  }\n\n  getValue(): any {\n    const { dataSet, name } = this;\n    const record = this.record || (dataSet && dataSet.current);\n    if (record) {\n      return record.get(name);\n    }\n  }\n\n  /**\n   * 根据lookup值获取lookup含义\n   * @param value lookup值\n   * @param boolean showValueIfNotFound\n   * @return {string}\n   */\n  getText(value: any = this.getValue(), showValueIfNotFound?: boolean): string | undefined {\n    const textField = this.get('textField');\n    const valueField = this.get('valueField');\n    const { lookup, options } = this;\n    if (lookup) {\n      const found = lookup.find(obj => isSameLike(get(obj, valueField), value));\n      if (found) {\n        return get(found, textField);\n      }\n      if (showValueIfNotFound) {\n        return value;\n      }\n      return undefined;\n    }\n    if (options) {\n      const found = options.find(record => isSameLike(record.get(valueField), value));\n      if (found) {\n        return found.get(textField);\n      }\n    }\n    if (textField && isObject(value)) {\n      return get(value, textField);\n    }\n    return value;\n  }\n\n  setOptions(options: DataSet): void {\n    this.set('options', options);\n  }\n\n  getOptions(): DataSet | undefined {\n    return this.options;\n  }\n\n  /**\n   * 重置设置的属性\n   */\n  @action\n  reset(): void {\n    this.props = this.pristineProps;\n  }\n\n  @action\n  commit(): void {\n    this.validator.reset();\n  }\n\n  /**\n   * 是否必选\n   * @return true | false\n   */\n  get required(): boolean {\n    return this.get('required');\n  }\n\n  /**\n   * 设置是否必选\n   * @param required 是否必选\n   */\n  set required(required: boolean) {\n    this.set('required', required);\n  }\n\n  /**\n   * 是否只读\n   * @return true | false\n   */\n  get readOnly(): boolean {\n    return this.get('readOnly');\n  }\n\n  /**\n   * 设置是否只读\n   * @param readOnly 是否只读\n   */\n  set readOnly(readOnly: boolean) {\n    this.set('readOnly', readOnly);\n  }\n\n  /**\n   * 获取字段类型\n   * @return 获取字段类型\n   */\n  get type(): FieldType {\n    return this.get('type');\n  }\n\n  /**\n   * 设置字段类型\n   * @param type 字段类型\n   */\n  set type(type: FieldType) {\n    this.set('type', type);\n  }\n\n  /**\n   * 设置Lov的查询参数\n   * @param {String} name\n   * @param {Object} value\n   */\n  @action\n  setLovPara(name, value) {\n    const p = toJS(this.get('lovPara')) || {};\n    if (value === null) {\n      delete p[name];\n    } else {\n      p[name] = value;\n    }\n    this.set('lovPara', p);\n  }\n\n  getValidatorProps(): ValidatorProps | undefined {\n    const { record, dataSet, name, type, required } = this;\n    if (record) {\n      const customValidator = this.get('validator');\n      const max = this.get('max');\n      const min = this.get('min');\n      const format = this.get('format') || getDateFormatByField(this, this.type);\n      const pattern = this.get('pattern');\n      const step = this.get('step');\n      const minLength = this.get('minLength');\n      const maxLength = this.get('maxLength');\n      const label = this.get('label');\n      const range = this.get('range');\n      const multiple = this.get('multiple');\n      const unique = this.get('unique');\n      const defaultValidationMessages = this.get('defaultValidationMessages');\n      return {\n        type,\n        required,\n        record,\n        dataSet,\n        name,\n        unique,\n        customValidator,\n        pattern,\n        max: getLimit(max, record),\n        min: getLimit(min, record),\n        step,\n        minLength,\n        maxLength,\n        label,\n        range,\n        multiple,\n        format,\n        defaultValidationMessages,\n      };\n    }\n  }\n\n  /**\n   * 校验字段值\n   * 只有通过record.getField()获取的field才能校验\n   * @return true | false\n   */\n  @action\n  async checkValidity(): Promise<boolean> {\n    let valid = true;\n    const { record, validator, name } = this;\n    if (record) {\n      validator.reset();\n      const value = record.get(name);\n      valid = await validator.checkValidity(value);\n    }\n    return valid;\n  }\n\n  /**\n   * 请求lookup值, 如有缓存值直接获得。\n   * @return Promise<object[]>\n   */\n  async fetchLookup(): Promise<object[] | undefined> {\n    const batch = getConfig('lookupBatchAxiosConfig');\n    const lookupCode = this.get('lookupCode');\n    const lovPara = getLovPara(this, this.record);\n    const dsField = this.findDataSetField();\n    let result;\n    if (batch && lookupCode && Object.keys(lovPara).length === 0) {\n      if (dsField && dsField.get('lookupCode') === lookupCode) {\n        this.set('lookup', undefined);\n        return dsField.get('lookup');\n      }\n\n      result = await this.pending.add<object[] | undefined>(\n        lookupStore.fetchLookupDataInBatch(lookupCode),\n      );\n    } else {\n      const axiosConfig = lookupStore.getAxiosConfig(this);\n      if (dsField) {\n        const dsConfig = lookupStore.getAxiosConfig(dsField);\n        if (\n          dsConfig.url &&\n          buildURLWithAxiosConfig(dsConfig) === buildURLWithAxiosConfig(axiosConfig)\n        ) {\n          this.set('lookup', undefined);\n          return dsField.get('lookup');\n        }\n      }\n      if (axiosConfig.url) {\n        result = await this.pending.add<object[] | undefined>(\n          lookupStore.fetchLookupData(axiosConfig),\n        );\n      }\n    }\n    if (result) {\n      runInAction(() => {\n        const { lookup } = this;\n        this.set('lookup', result);\n        const value = this.getValue();\n        const valueField = this.get('valueField');\n        if (value && valueField && lookup) {\n          this.set(\n            'lookupData',\n            [].concat(value).reduce<object[]>((lookupData, v) => {\n              const found = lookup.find(item => isSameLike(item[valueField], v));\n              if (found) {\n                lookupData.push(found);\n              }\n              return lookupData;\n            }, []),\n          );\n        }\n      });\n    }\n    return result;\n  }\n\n  async fetchLovConfig() {\n    const lovCode = this.get('lovCode');\n    if (lovCode) {\n      await this.pending.add(lovCodeStore.fetchConfig(lovCode, this));\n      if (this.type === FieldType.object || this.type === FieldType.auto) {\n        const options = lovCodeStore.getLovDataSet(lovCode, this);\n        if (options) {\n          this.set('options', options);\n        }\n      }\n    }\n  }\n\n  isValid() {\n    return this.valid;\n  }\n\n  getValidationMessage() {\n    return this.validator.validationMessage;\n  }\n\n  getValidityState(): Validity {\n    return this.validator.validity;\n  }\n\n  getValidationErrorValues(): ValidationResult[] {\n    return this.validator.validationResults;\n  }\n\n  ready(): Promise<any> {\n    // const { options } = this;\n    // return Promise.all([this.pending.ready(), options && options.ready()]);\n    return this.pending.ready();\n  }\n\n  private findDataSetField(): Field | undefined {\n    const { dataSet, name, record } = this;\n    if (record && dataSet && name) {\n      return dataSet.getField(name);\n    }\n  }\n\n  private checkDynamicProp(propsName, newProp) {\n    // if (propsName in this.lastDynamicProps) {\n    const oldProp = this.lastDynamicProps[propsName];\n    if (!isEqualDynamicProps(oldProp, newProp)) {\n      defer(\n        action(() => {\n          if (propsName in this.validator.props || propsName === 'validator') {\n            this.validator.reset();\n            // this.checkValidity();\n          }\n          this.handlePropChange(propsName, newProp, oldProp);\n        }),\n      );\n    }\n    // }\n    this.lastDynamicProps[propsName] = newProp;\n  }\n\n  private handlePropChange(propsName, newProp, oldProp) {\n    if (propsName === 'bind' && this.type !== FieldType.intl) {\n      const { record } = this;\n      if (record && !this.dirty) {\n        if (newProp) {\n          record.init(newProp, ObjectChainValue.get(record.data, oldProp || this.name));\n        }\n        if (oldProp) {\n          record.init(oldProp, undefined);\n        }\n      }\n      return;\n    }\n    if (\n      [\n        'type',\n        'lookupUrl',\n        'lookupCode',\n        'lookupAxiosConfig',\n        'lovCode',\n        'lovQueryAxiosConfig',\n        'lovPara',\n        'cascadeMap',\n        'lovQueryUrl',\n      ].includes(propsName)\n    ) {\n      this.set('lookupData', undefined);\n      this.fetchLookup();\n    }\n    if (['lovCode', 'lovDefineAxiosConfig', 'lovDefineUrl'].includes(propsName)) {\n      this.fetchLovConfig();\n    }\n  }\n\n  private executeDynamicProps(dynamicProps: (DynamicPropsArguments) => any) {\n    const { dataSet, name, record } = this;\n    if (this.isDynamicPropsComputing) {\n      warning(false, `Cycle dynamicProps execution of field<${name}>.`);\n    } else if (dataSet && record) {\n      this.isDynamicPropsComputing = true;\n      const props = dynamicProps({ dataSet, record, name });\n      this.isDynamicPropsComputing = false;\n      return props;\n    }\n  }\n}\n"]}