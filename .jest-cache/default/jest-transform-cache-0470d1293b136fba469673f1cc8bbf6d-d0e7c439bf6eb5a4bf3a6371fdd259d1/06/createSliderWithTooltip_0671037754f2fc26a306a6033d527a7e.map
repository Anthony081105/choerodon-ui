{"version":3,"sources":["createSliderWithTooltip.jsx"],"names":["createSliderWithTooltip","Component","props","index","visible","setState","prevState","visibles","value","dragging","disabled","restProps","tipFormatter","tipProps","handleStyle","prefixCls","overlay","placement","restTooltipProps","handleStyleWithIndex","Array","isArray","state","handleTooltipVisibleChange","handleWithTooltip","PropTypes","func","oneOfType","object","arrayOf"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Tooltip from '../tooltip';\nimport Handle from './Handle';\n\nexport default function createSliderWithTooltip(Component) {\n  return class ComponentWrapper extends Component {\n    static propTypes = {\n      tipFormatter: PropTypes.func,\n      handleStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.arrayOf(PropTypes.object)]),\n      tipProps: PropTypes.object,\n    };\n    static defaultProps = {\n      tipFormatter(value) {\n        return value;\n      },\n      handleStyle: [{}],\n      tipProps: {},\n    };\n\n    constructor(props) {\n      super(props);\n      this.state = { visibles: {} };\n    }\n\n    handleTooltipVisibleChange = (index, visible) => {\n      this.setState(prevState => {\n        return {\n          visibles: {\n            ...prevState.visibles,\n            [index]: visible,\n          },\n        };\n      });\n    };\n    handleWithTooltip = ({ value, dragging, index, disabled, ...restProps }) => {\n      const { tipFormatter, tipProps, handleStyle } = this.props;\n\n      const {\n        prefixCls = 'rc-slider-tooltip',\n        overlay = tipFormatter(value),\n        placement = 'top',\n        visible = visible || false,\n        ...restTooltipProps\n      } = tipProps;\n\n      let handleStyleWithIndex;\n      if (Array.isArray(handleStyle)) {\n        handleStyleWithIndex = handleStyle[index] || handleStyle[0];\n      } else {\n        handleStyleWithIndex = handleStyle;\n      }\n\n      return (\n        <Tooltip\n          {...restTooltipProps}\n          prefixCls={prefixCls}\n          overlay={overlay}\n          placement={placement}\n          visible={(!disabled && (this.state.visibles[index] || dragging)) || visible}\n          key={index}\n        >\n          <Handle\n            {...restProps}\n            style={{\n              ...handleStyleWithIndex,\n            }}\n            value={value}\n            onMouseEnter={() => this.handleTooltipVisibleChange(index, true)}\n            onMouseLeave={() => this.handleTooltipVisibleChange(index, false)}\n          />\n        </Tooltip>\n      );\n    };\n\n    render() {\n      return <Component {...this.props} handle={this.handleWithTooltip} />;\n    }\n  };\n}\n"]}