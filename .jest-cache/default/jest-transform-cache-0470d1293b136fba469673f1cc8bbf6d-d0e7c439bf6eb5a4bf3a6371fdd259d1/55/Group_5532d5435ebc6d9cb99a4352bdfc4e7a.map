{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components/checkbox/Group.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { Component, CSSProperties } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport shallowEqual from 'lodash/isEqual';\nimport Checkbox from './Checkbox';\nimport { getPrefixCls } from '../configure';\n\nexport type CheckboxValueType = string | number;\n\nexport interface CheckboxOptionType {\n  label: string;\n  value: CheckboxValueType;\n  disabled?: boolean;\n}\n\nexport interface AbstractCheckboxGroupProps {\n  prefixCls?: string;\n  className?: string;\n  options?: Array<CheckboxOptionType | string>;\n  disabled?: boolean;\n  style?: CSSProperties;\n}\n\nexport interface CheckboxGroupProps extends AbstractCheckboxGroupProps {\n  defaultValue?: Array<CheckboxValueType>;\n  value?: Array<CheckboxValueType>;\n  onChange?: (checkedValue: Array<CheckboxValueType>) => void;\n  label?: string;\n}\n\nexport interface CheckboxGroupState {\n  value: any;\n}\n\nexport interface CheckboxGroupContext {\n  checkboxGroup: {\n    toggleOption: (option: CheckboxOptionType) => void;\n    value: any;\n    disabled: boolean;\n  };\n}\n\nexport default class CheckboxGroup extends Component<CheckboxGroupProps, CheckboxGroupState> {\n  static displayName = 'CheckboxGroup';\n\n  static defaultProps = {\n    options: [],\n  };\n\n  static propTypes = {\n    defaultValue: PropTypes.array,\n    value: PropTypes.array,\n    options: PropTypes.array,\n    onChange: PropTypes.func,\n  };\n\n  static childContextTypes = {\n    checkboxGroup: PropTypes.any,\n  };\n\n  constructor(props: CheckboxGroupProps) {\n    super(props);\n    this.state = {\n      value: props.value || props.defaultValue || [],\n    };\n  }\n\n  getChildContext() {\n    const { disabled } = this.props;\n    const { value } = this.state;\n    return {\n      checkboxGroup: {\n        toggleOption: this.toggleOption,\n        value,\n        disabled,\n      },\n    };\n  }\n\n  componentWillReceiveProps(nextProps: CheckboxGroupProps) {\n    if ('value' in nextProps) {\n      this.setState({\n        value: nextProps.value || [],\n      });\n    }\n  }\n\n  shouldComponentUpdate(nextProps: CheckboxGroupProps, nextState: CheckboxGroupState) {\n    return !shallowEqual(this.props, nextProps) || !shallowEqual(this.state, nextState);\n  }\n\n  getOptions() {\n    const { options } = this.props;\n    // https://github.com/Microsoft/TypeScript/issues/7960\n    return (options as Array<CheckboxOptionType>).map(option => {\n      if (typeof option === 'string') {\n        return {\n          label: option,\n          value: option,\n        } as CheckboxOptionType;\n      }\n      return option;\n    });\n  }\n\n  toggleOption = (option: CheckboxOptionType) => {\n    const { state } = this;\n    const optionIndex = state.value.indexOf(option.value);\n    const value = [...state.value];\n    if (optionIndex === -1) {\n      value.push(option.value);\n    } else {\n      value.splice(optionIndex, 1);\n    }\n    if (!('value' in this.props)) {\n      this.setState({ value });\n    }\n    const { onChange } = this.props;\n    if (onChange) {\n      onChange(value);\n    }\n  };\n\n  render() {\n    const { props, state } = this;\n    const { prefixCls: customizePrefixCls, className, style, options } = props;\n    const prefixCls = getPrefixCls('checkbox-group', customizePrefixCls);\n    let children = props.children;\n    if (options && options.length > 0) {\n      children = this.getOptions().map(option => (\n        <Checkbox\n          key={option.value}\n          disabled={'disabled' in option ? option.disabled : props.disabled}\n          value={option.value}\n          checked={state.value.indexOf(option.value) !== -1}\n          onChange={() => this.toggleOption(option)}\n          className={`${prefixCls}-item`}\n        >\n          {option.label}\n        </Checkbox>\n      ));\n    }\n\n    const classString = classNames(prefixCls, className);\n    const wrapperClassString = classNames({\n      [`${prefixCls}-wrapper`]: true,\n      [`${prefixCls}-has-label`]: props.label,\n    });\n    const labelClassString = classNames(`${prefixCls}-label`, {\n      'label-disabled': props.disabled,\n    });\n    return (\n      <div className={wrapperClassString}>\n        {props.label ? <span className={labelClassString}>{props.label}</span> : null}\n        <div className={classString} style={style}>\n          {children}\n        </div>\n      </div>\n    );\n  }\n}\n"]}