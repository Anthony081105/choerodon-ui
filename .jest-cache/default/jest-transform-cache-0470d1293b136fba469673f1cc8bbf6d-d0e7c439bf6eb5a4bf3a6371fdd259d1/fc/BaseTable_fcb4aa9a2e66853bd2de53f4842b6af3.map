{"version":3,"sources":["BaseTable.jsx"],"names":["BaseTable","isHover","key","props","store","setState","currentHoverKey","renderData","indent","ancestorKeys","table","context","columnManager","components","prefixCls","childrenColumnName","rowClassName","rowRef","onRowClick","onRowDoubleClick","onRowContextMenu","onRowMouseEnter","onRowMouseLeave","onRow","getRowKey","fixed","expander","isAnyColumnsFixed","rows","i","record","className","onHoverProps","onHover","handleRowHover","leafColumns","leftLeafColumns","rightLeafColumns","rowPrefixCls","row","needIndentSpaced","handleExpandChange","expandableRow","push","renderRows","length","scroll","data","getBodyWrapper","tableClassName","hasHead","hasBody","hasFoot","columns","tableStyle","x","tableLayout","width","Table","BodyWrapper","body","wrapper","Component","PropTypes","oneOfType","string","bool","array","isRequired","object","func","any"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'mini-store';\nimport ColGroup from './ColGroup';\nimport TableHeader from './TableHeader';\nimport TableFooter from './TableFooter';\nimport TableRow from './TableRow';\nimport ExpandableRow from './ExpandableRow';\n\nclass BaseTable extends Component {\n  static propTypes = {\n    fixed: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.bool,\n    ]),\n    columns: PropTypes.array.isRequired,\n    tableClassName: PropTypes.string.isRequired,\n    hasHead: PropTypes.bool.isRequired,\n    hasBody: PropTypes.bool.isRequired,\n    hasFoot: PropTypes.bool.isRequired,\n    store: PropTypes.object.isRequired,\n    expander: PropTypes.object.isRequired,\n    getRowKey: PropTypes.func,\n    isAnyColumnsFixed: PropTypes.bool,\n  };\n\n  static contextTypes = {\n    table: PropTypes.any,\n  };\n\n  handleRowHover = (isHover, key) => {\n    this.props.store.setState({\n      currentHoverKey: isHover ? key : null,\n    });\n  };\n\n  renderRows = (renderData, indent, ancestorKeys = []) => {\n    const { table } = this.context;\n    const { columnManager, components } = table;\n    const {\n      prefixCls,\n      childrenColumnName,\n      rowClassName,\n      rowRef,\n      onRowClick,\n      onRowDoubleClick,\n      onRowContextMenu,\n      onRowMouseEnter,\n      onRowMouseLeave,\n      onRow,\n    } = table.props;\n    const { getRowKey, fixed, expander, isAnyColumnsFixed } = this.props;\n\n    const rows = [];\n\n    for (let i = 0; i < renderData.length; i++) {\n      const record = renderData[i];\n      const key = getRowKey(record, i);\n      const className = typeof rowClassName === 'string'\n        ? rowClassName\n        : rowClassName(record, i, indent);\n\n      const onHoverProps = {};\n      if (columnManager.isAnyColumnsFixed()) {\n        onHoverProps.onHover = this.handleRowHover;\n      }\n\n      let leafColumns;\n      if (fixed === 'left') {\n        leafColumns = columnManager.leftLeafColumns();\n      } else if (fixed === 'right') {\n        leafColumns = columnManager.rightLeafColumns();\n      } else {\n        leafColumns = columnManager.leafColumns();\n      }\n\n      const rowPrefixCls = `${prefixCls}-row`;\n\n      const row = (\n        <ExpandableRow\n          {...expander.props}\n          fixed={fixed}\n          index={i}\n          prefixCls={rowPrefixCls}\n          record={record}\n          key={key}\n          rowKey={key}\n          onRowClick={onRowClick}\n          needIndentSpaced={expander.needIndentSpaced}\n          onExpandedChange={expander.handleExpandChange}\n        >\n          {(expandableRow) => ( // eslint-disable-line\n            <TableRow\n              fixed={fixed}\n              indent={indent}\n              className={className}\n              record={record}\n              index={i}\n              prefixCls={rowPrefixCls}\n              childrenColumnName={childrenColumnName}\n              columns={leafColumns}\n              onRow={onRow}\n              onRowDoubleClick={onRowDoubleClick}\n              onRowContextMenu={onRowContextMenu}\n              onRowMouseEnter={onRowMouseEnter}\n              onRowMouseLeave={onRowMouseLeave}\n              {...onHoverProps}\n              rowKey={key}\n              ancestorKeys={ancestorKeys}\n              ref={rowRef(record, i, indent)}\n              components={components}\n              isAnyColumnsFixed={isAnyColumnsFixed}\n              {...expandableRow}\n            />\n          )}\n        </ExpandableRow>\n      );\n\n      rows.push(row);\n\n      expander.renderRows(\n        this.renderRows,\n        rows,\n        record,\n        i,\n        indent,\n        fixed,\n        key,\n        ancestorKeys,\n      );\n    }\n    return rows;\n  };\n\n  render() {\n    const { table } = this.context;\n    const { components } = table;\n    const { prefixCls, scroll, data, getBodyWrapper } = table.props;\n    const { expander, tableClassName, hasHead, hasBody, hasFoot, fixed, columns } = this.props;\n    const tableStyle = {};\n\n    if (!fixed && scroll.x) {\n      // not set width, then use content fixed width\n      if (scroll.x === true) {\n        tableStyle.tableLayout = 'fixed';\n      } else {\n        tableStyle.width = scroll.x;\n      }\n    }\n\n    const Table = hasBody ? components.table : 'table';\n    const BodyWrapper = components.body.wrapper;\n\n    let body;\n    if (hasBody) {\n      body = (\n        <BodyWrapper className={`${prefixCls}-tbody`}>\n          {this.renderRows(data, 0)}\n        </BodyWrapper>\n      );\n      if (getBodyWrapper) {\n        body = getBodyWrapper(body);\n      }\n    }\n\n    return (\n      <Table className={tableClassName} style={tableStyle} key=\"table\">\n        <ColGroup columns={columns} fixed={fixed} />\n        {hasHead && <TableHeader expander={expander} columns={columns} fixed={fixed} />}\n        {body}\n        {hasFoot && <TableFooter onHover={this.handleRowHover} columns={columns} fixed={fixed} />}\n      </Table>\n    );\n  }\n}\n\nexport default connect()(BaseTable);\n"]}