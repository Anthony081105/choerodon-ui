2ae8e0d90c165c4e7592919bbd432a5b
"use strict";

/* istanbul ignore next */
var cov_15erfki1h1 = function () {
  var path = "/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/stores/utils.tsx";
  var hash = "274c3737e5e7f6f7c384d78ef9074b9b71a24831";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/stores/utils.tsx",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 32
        }
      },
      "2": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 7,
          column: 48
        }
      },
      "3": {
        start: {
          line: 9,
          column: 12
        },
        end: {
          line: 9,
          column: 27
        }
      },
      "4": {
        start: {
          line: 12,
          column: 16
        },
        end: {
          line: 12,
          column: 59
        }
      },
      "5": {
        start: {
          line: 13,
          column: 19
        },
        end: {
          line: 13,
          column: 42
        }
      },
      "6": {
        start: {
          line: 15,
          column: 2
        },
        end: {
          line: 19,
          column: 3
        }
      },
      "7": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 18,
          column: 7
        }
      },
      "8": {
        start: {
          line: 17,
          column: 6
        },
        end: {
          line: 17,
          column: 64
        }
      },
      "9": {
        start: {
          line: 21,
          column: 2
        },
        end: {
          line: 21,
          column: 17
        }
      },
      "10": {
        start: {
          line: 25,
          column: 20
        },
        end: {
          line: 25,
          column: 90
        }
      },
      "11": {
        start: {
          line: 27,
          column: 2
        },
        end: {
          line: 33,
          column: 3
        }
      },
      "12": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 30,
          column: 5
        }
      },
      "13": {
        start: {
          line: 28,
          column: 20
        },
        end: {
          line: 28,
          column: 36
        }
      },
      "14": {
        start: {
          line: 28,
          column: 45
        },
        end: {
          line: 28,
          column: 79
        }
      },
      "15": {
        start: {
          line: 28,
          column: 88
        },
        end: {
          line: 28,
          column: 89
        }
      },
      "16": {
        start: {
          line: 29,
          column: 6
        },
        end: {
          line: 29,
          column: 39
        }
      },
      "17": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 32,
          column: 43
        }
      },
      "18": {
        start: {
          line: 35,
          column: 2
        },
        end: {
          line: 35,
          column: 21
        }
      }
    },
    fnMap: {
      "0": {
        name: "getLovPara",
        decl: {
          start: {
            line: 11,
            column: 9
          },
          end: {
            line: 11,
            column: 19
          }
        },
        loc: {
          start: {
            line: 11,
            column: 35
          },
          end: {
            line: 22,
            column: 1
          }
        },
        line: 11
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 16,
            column: 36
          },
          end: {
            line: 16,
            column: 37
          }
        },
        loc: {
          start: {
            line: 16,
            column: 55
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "2": {
        name: "processAxiosConfig",
        decl: {
          start: {
            line: 24,
            column: 9
          },
          end: {
            line: 24,
            column: 27
          }
        },
        loc: {
          start: {
            line: 24,
            column: 30
          },
          end: {
            line: 36,
            column: 1
          }
        },
        line: 24
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 12,
            column: 16
          },
          end: {
            line: 12,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 12,
            column: 16
          },
          end: {
            line: 12,
            column: 53
          }
        }, {
          start: {
            line: 12,
            column: 57
          },
          end: {
            line: 12,
            column: 59
          }
        }],
        line: 12
      },
      "1": {
        loc: {
          start: {
            line: 15,
            column: 2
          },
          end: {
            line: 19,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 15,
            column: 2
          },
          end: {
            line: 19,
            column: 3
          }
        }, {
          start: {
            line: 15,
            column: 2
          },
          end: {
            line: 19,
            column: 3
          }
        }],
        line: 15
      },
      "2": {
        loc: {
          start: {
            line: 15,
            column: 6
          },
          end: {
            line: 15,
            column: 26
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 15,
            column: 6
          },
          end: {
            line: 15,
            column: 12
          }
        }, {
          start: {
            line: 15,
            column: 16
          },
          end: {
            line: 15,
            column: 26
          }
        }],
        line: 15
      },
      "3": {
        loc: {
          start: {
            line: 25,
            column: 20
          },
          end: {
            line: 25,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 25,
            column: 73
          },
          end: {
            line: 25,
            column: 85
          }
        }, {
          start: {
            line: 25,
            column: 88
          },
          end: {
            line: 25,
            column: 90
          }
        }],
        line: 25
      },
      "4": {
        loc: {
          start: {
            line: 25,
            column: 20
          },
          end: {
            line: 25,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 20
          },
          end: {
            line: 25,
            column: 40
          }
        }, {
          start: {
            line: 25,
            column: 44
          },
          end: {
            line: 25,
            column: 70
          }
        }],
        line: 25
      },
      "5": {
        loc: {
          start: {
            line: 27,
            column: 2
          },
          end: {
            line: 33,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 2
          },
          end: {
            line: 33,
            column: 3
          }
        }, {
          start: {
            line: 27,
            column: 2
          },
          end: {
            line: 33,
            column: 3
          }
        }],
        line: 27
      },
      "6": {
        loc: {
          start: {
            line: 28,
            column: 55
          },
          end: {
            line: 28,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 28,
            column: 66
          },
          end: {
            line: 28,
            column: 74
          }
        }, {
          start: {
            line: 28,
            column: 77
          },
          end: {
            line: 28,
            column: 78
          }
        }],
        line: 28
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0]
    },
    _coverageSchema: "43e27e138ebf9cfc5966b082cf9a028302ed4184",
    hash: "274c3737e5e7f6f7c384d78ef9074b9b71a24831"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  return coverage[path] = coverageData;
}();

cov_15erfki1h1.s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});

/* istanbul ignore next */
cov_15erfki1h1.s[1]++;
exports.getLovPara = getLovPara;

/* istanbul ignore next */
cov_15erfki1h1.s[2]++;
exports.processAxiosConfig = processAxiosConfig;

var _mobx =
/* istanbul ignore next */
(cov_15erfki1h1.s[3]++, require("mobx"));

function getLovPara(field, record) {
  /* istanbul ignore next */
  cov_15erfki1h1.f[0]++;
  var lovPara =
  /* istanbul ignore next */
  (cov_15erfki1h1.s[4]++,
  /* istanbul ignore next */
  (cov_15erfki1h1.b[0][0]++, (0, _mobx.toJS)(field.get('lovPara'))) ||
  /* istanbul ignore next */
  (cov_15erfki1h1.b[0][1]++, {}));
  var cascadeMap =
  /* istanbul ignore next */
  (cov_15erfki1h1.s[5]++, field.get('cascadeMap'));

  /* istanbul ignore next */
  cov_15erfki1h1.s[6]++;

  if (
  /* istanbul ignore next */
  (cov_15erfki1h1.b[2][0]++, record) &&
  /* istanbul ignore next */
  (cov_15erfki1h1.b[2][1]++, cascadeMap)) {
    /* istanbul ignore next */
    cov_15erfki1h1.b[1][0]++;
    cov_15erfki1h1.s[7]++;
    Object.keys(cascadeMap).forEach(function (cascade) {
      /* istanbul ignore next */
      cov_15erfki1h1.f[1]++;
      cov_15erfki1h1.s[8]++;
      return lovPara[cascade] = record.get(cascadeMap[cascade]);
    });
  } else
  /* istanbul ignore next */
  {
    cov_15erfki1h1.b[1][1]++;
  }

  cov_15erfki1h1.s[9]++;
  return lovPara;
}

function processAxiosConfig() {
  /* istanbul ignore next */
  cov_15erfki1h1.f[2]++;
  var axiosConfig =
  /* istanbul ignore next */
  (cov_15erfki1h1.s[10]++,
  /* istanbul ignore next */
  (cov_15erfki1h1.b[4][0]++, arguments.length > 0) &&
  /* istanbul ignore next */
  (cov_15erfki1h1.b[4][1]++, arguments[0] !== undefined) ?
  /* istanbul ignore next */
  (cov_15erfki1h1.b[3][0]++, arguments[0]) :
  /* istanbul ignore next */
  (cov_15erfki1h1.b[3][1]++, {}));

  /* istanbul ignore next */
  cov_15erfki1h1.s[11]++;

  if (typeof axiosConfig === 'function') {
    /* istanbul ignore next */
    cov_15erfki1h1.b[5][0]++;
    cov_15erfki1h1.s[12]++;

    for (var _len =
    /* istanbul ignore next */
    (cov_15erfki1h1.s[13]++, arguments.length), args =
    /* istanbul ignore next */
    (cov_15erfki1h1.s[14]++, new Array(_len > 1 ?
    /* istanbul ignore next */
    (cov_15erfki1h1.b[6][0]++, _len - 1) :
    /* istanbul ignore next */
    (cov_15erfki1h1.b[6][1]++, 0))), _key =
    /* istanbul ignore next */
    (cov_15erfki1h1.s[15]++, 1); _key < _len; _key++) {
      /* istanbul ignore next */
      cov_15erfki1h1.s[16]++;
      args[_key - 1] = arguments[_key];
    }

    /* istanbul ignore next */
    cov_15erfki1h1.s[17]++;
    return axiosConfig.apply(void 0, args);
  } else
  /* istanbul ignore next */
  {
    cov_15erfki1h1.b[5][1]++;
  }

  cov_15erfki1h1.s[18]++;
  return axiosConfig;
}