{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components-pro/validator/rules/stepMismatch.tsx"],"names":[],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AAEA,SAAS,cAAT,CAAwB,KAAxB,EAA+B,IAA/B,EAAqC,GAArC,EAA0C,GAA1C,EAA+C,KAA/C,EAAoD;AAClD,MAAI,KAAJ,EAAW;AACT,QAAI,cAAJ;AACA,8BAAa,KAAb,EAAoB,KAApB,EAA2B,KAA3B,CAAiC,UAAA,IAAI,EAAG;AACtC,UAAI,CAAC,yBAAQ,IAAR,CAAL,EAAoB;AAClB,QAAA,cAAc,GAAG,8BAAkB,MAAM,CAAC,IAAD,CAAxB,EAAgC,IAAhC,EAAsC,GAAtC,EAA2C,GAA3C,CAAjB;AACD;;AACD,aAAO,CAAC,cAAR;AACD,KALD;AAMA,WAAO,cAAP;AACD;;AACD,MAAI,CAAC,yBAAQ,KAAR,CAAL,EAAqB;AACnB,WAAO,8BAAkB,MAAM,CAAC,KAAD,CAAxB,EAAiC,IAAjC,EAAuC,GAAvC,EAA4C,GAA5C,CAAP;AACD;AACF;;AAEa,SAAU,YAAV,CAAuB,KAAvB,EAAmC,KAAnC,EAAwD;AAAA,MAC5D,IAD4D,GACP,KADO,CAC5D,IAD4D;AAAA,MACtD,GADsD,GACP,KADO,CACtD,GADsD;AAAA,MACjD,GADiD,GACP,KADO,CACjD,GADiD;AAAA,MAC5C,yBAD4C,GACP,KADO,CAC5C,yBAD4C;AAAA,MACjB,KADiB,GACP,KADO,CACjB,KADiB;;AAEpE,MAAI,IAAI,KAAK,SAAb,EAAwB;AACtB,QAAM,cAAc,GAAG,cAAc,CAAC,KAAD,EAAQ,IAAR,EAAc,GAAd,EAAmB,GAAnB,EAAwB,KAAxB,CAArC;;AACA,QAAI,cAAc,KAAK,SAAvB,EAAkC;AAChC,UAAM,gBAAgB,GAAG;AACvB,WAAG,cAAc,CAAC,CAAD,CADM;AAEvB,WAAG,cAAc,CAAC,CAAD;AAFM,OAAzB;AAIA,UAAM,QAAQ,GAAG,cAAc,CAAC,MAAf,KAA0B,CAA1B,GAA8B,qBAA9B,GAAsD,cAAvE;AACA,UAAM,GAAG,GAAG,cAAc,CAAC,MAAf,KAA0B,CAA1B,GAA8B,uBAA9B,GAAwD,eAApE;AANgC,kCAOiC,yBAPjC,CAOvB,QAPuB;AAAA,UAOZ,iBAPY,sCAOQ,uBAAG,WAAH,EAAgB,GAAhB,CAPR;AAQhC,aAAO,IAAI,4BAAJ,CAAqB;AAC1B,QAAA,iBAAiB,EAAE,qCAAoB,iBAApB,EAAuC,gBAAvC,CADO;AAE1B,QAAA,gBAAgB,EAAhB,gBAF0B;AAG1B,QAAA,KAAK,EAAL,KAH0B;AAI1B,QAAA,QAAQ,EAAR;AAJ0B,OAArB,CAAP;AAMD;AACF;;AACD,SAAO,IAAP;AACD","sourcesContent":["import isEmpty from '../../_util/isEmpty';\nimport ValidationResult from '../ValidationResult';\nimport { $l } from '../../locale-context';\nimport { getNearStepValues } from '../../number-field/utils';\nimport { methodReturn, ValidatorProps } from '.';\nimport formatReactTemplate from '../../formatter/formatReactTemplate';\nimport { toRangeValue } from '../../field/utils';\n\nfunction isStepMismatch(value, step, min, max, range) {\n  if (range) {\n    let nearStepValues;\n    toRangeValue(value, range).every(item => {\n      if (!isEmpty(item)) {\n        nearStepValues = getNearStepValues(Number(item), step, min, max);\n      }\n      return !nearStepValues;\n    });\n    return nearStepValues;\n  }\n  if (!isEmpty(value)) {\n    return getNearStepValues(Number(value), step, min, max);\n  }\n}\n\nexport default function stepMismatch(value: any, props: ValidatorProps): methodReturn {\n  const { step, min, max, defaultValidationMessages, range } = props;\n  if (step !== undefined) {\n    const nearStepValues = isStepMismatch(value, step, min, max, range);\n    if (nearStepValues !== undefined) {\n      const injectionOptions = {\n        0: nearStepValues[0],\n        1: nearStepValues[1],\n      };\n      const ruleName = nearStepValues.length === 2 ? 'stepMismatchBetween' : 'stepMismatch';\n      const key = nearStepValues.length === 2 ? 'step_mismatch_between' : 'step_mismatch';\n      const { [ruleName]: validationMessage = $l('Validator', key) } = defaultValidationMessages;\n      return new ValidationResult({\n        validationMessage: formatReactTemplate(validationMessage, injectionOptions),\n        injectionOptions,\n        value,\n        ruleName,\n      });\n    }\n  }\n  return true;\n}\n"]}