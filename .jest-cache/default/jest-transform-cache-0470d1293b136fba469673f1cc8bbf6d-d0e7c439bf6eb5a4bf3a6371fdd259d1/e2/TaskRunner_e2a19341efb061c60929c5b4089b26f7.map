{"version":3,"sources":["_util/TaskRunner.jsx"],"names":["TaskRunner","delay","fn","callback","interval","once","setInterval","resolve","cb","Promise","clearInterval"],"mappings":";;;;;;;;;;;;;;;;;IAAqBA,U;;;AACjB,WAAA,UAAA,CAAA,EAAA,EAAgB;AAAA,KAAA,GAAA,gBAAA,CAAA,SAAA,CAAA,EAAA,IAAA,EAAA,UAAA;AACZ,SAAA,SAAA,GAAA,EAAA;;AACA,QAAA,EAAA,EAAQ;AACJ,WAAA,EAAA,GAAA,EAAA;AACH;AACJ;;;;;;;oDACWC,M,EAAOC,E,EAAIC,Q;;;;;iDACZ,KAAA,KAAA,CAAA,IAAA,EAAA,MAAA,EAAA,EAAA,EAAA,QAAA,C;;;;;;;;;;;;;;;;;;;;;qDAEDC,Q,EAAUF,E,EAAIC,Q;;;;;kDACb,KAAA,KAAA,CAAA,KAAA,EAAA,QAAA,EAAA,EAAA,EAAA,QAAA,C;;;;;;;;;;;;;;;;;;;;;qDAECE,I,EAAMD,Q,EAAUF,E,EAAIC,Q;;;;;;;AAC5B,qBAAA,MAAA;;AACA,oBAAA,EAAA,EAAQ;AACJ,uBAAA,EAAA,GAAA,EAAA;AACH;;AACD,oBAAI,OAAA,QAAA,KAAJ,UAAA,EAAoC;AAChC,uBAAA,SAAA,CAAA,IAAA,CAAA,QAAA;AACH;;qBACG,KAAKD,E;;;;;kDACE,IAAA,OAAA,CAAY,UAAA,OAAA,EAAW;AAC1B,kBAAA,KAAI,CAAJ,EAAA,GAAUI,WAAW,CAAC,YAAM;AACxB,wBAAA,IAAA,EAAU;AACN,sBAAA,KAAI,CAAJ,MAAA;AACH;;AACDC,oBAAAA,OAAO,CAAC,KAAI,CAAZA,EAAQ,EAAD,CAAPA;;AACA,oBAAA,KAAI,CAAJ,SAAA,CAAA,OAAA,CAAuB,UAAA,EAAA,EAAE;AAAA,6BAAIC,EAAJ,EAAA;AAAzB,qBAAA;;AACA,oBAAA,KAAI,CAAJ,SAAA,GAAA,EAAA;AANiB,mBAAA,EAArB,QAAqB,CAArB;AADG,iBAAA,C;;;kDAWJC,OAAO,CAAPA,MAAAA,CAAe,IAAA,KAAA,CAAfA,WAAe,CAAfA,C;;;;;;;;;;;;;;;;;;6BAEF;AACL,UAAI,KAAJ,EAAA,EAAa;AACTC,QAAAA,aAAa,CAAC,KAAdA,EAAa,CAAbA;AACA,eAAO,KAAP,EAAA;AACH;;AACD,aAAA,IAAA;AACH","sourcesContent":["export default class TaskRunner {\n    constructor(fn) {\n        this.callbacks = [];\n        if (fn) {\n            this.fn = fn;\n        }\n    }\n    async delay(delay, fn, callback) {\n        return this.start(true, delay, fn, callback);\n    }\n    async run(interval, fn, callback) {\n        return this.start(false, interval, fn, callback);\n    }\n    async start(once, interval, fn, callback) {\n        this.cancel();\n        if (fn) {\n            this.fn = fn;\n        }\n        if (typeof callback === 'function') {\n            this.callbacks.push(callback);\n        }\n        if (this.fn) {\n            return new Promise(resolve => {\n                this.id = setInterval(() => {\n                    if (once) {\n                        this.cancel();\n                    }\n                    resolve(this.fn());\n                    this.callbacks.forEach(cb => cb());\n                    this.callbacks = [];\n                }, interval);\n            });\n        }\n        return Promise.reject(new Error('no caller'));\n    }\n    cancel() {\n        if (this.id) {\n            clearInterval(this.id);\n            delete this.id;\n        }\n        return this;\n    }\n}\n"]}