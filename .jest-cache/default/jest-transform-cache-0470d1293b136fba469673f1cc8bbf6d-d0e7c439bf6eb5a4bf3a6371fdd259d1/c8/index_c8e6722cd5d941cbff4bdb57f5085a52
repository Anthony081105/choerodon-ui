3eb0f4a215764c4d6a38c6e75991a20a
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _omit = _interopRequireDefault(require("lodash/omit"));

var _isCssAnimationSupported = _interopRequireDefault(require("../_util/isCssAnimationSupported"));

var _animate = _interopRequireDefault(require("../animate"));

var _progress = _interopRequireDefault(require("../progress/progress"));

var _configure = require("../configure");

var Spin =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(Spin, _Component);

  function Spin(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, Spin);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(Spin).call(this, props));
    var spinning = props.spinning;
    _this.state = {
      spinning: spinning
    };
    return _this;
  }

  (0, _createClass2["default"])(Spin, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (!(0, _isCssAnimationSupported["default"])()) {
        // Show text in IE9
        this.setState({
          notCssAnimationSupported: true
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.debounceTimeout) {
        clearTimeout(this.debounceTimeout);
      }

      if (this.delayTimeout) {
        clearTimeout(this.delayTimeout);
      }
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      var _this2 = this;

      var currentSpinning = this.props.spinning;
      var spinning = nextProps.spinning;
      var delay = this.props.delay;

      if (this.debounceTimeout) {
        clearTimeout(this.debounceTimeout);
      }

      if (currentSpinning && !spinning) {
        this.debounceTimeout = window.setTimeout(function () {
          return _this2.setState({
            spinning: spinning
          });
        }, 200);

        if (this.delayTimeout) {
          clearTimeout(this.delayTimeout);
        }
      } else if (spinning && delay && !isNaN(Number(delay))) {
        if (this.delayTimeout) {
          clearTimeout(this.delayTimeout);
        }

        this.delayTimeout = window.setTimeout(function () {
          return _this2.setState({
            spinning: spinning
          });
        }, delay);
      } else {
        this.setState({
          spinning: spinning
        });
      }
    }
  }, {
    key: "getIndicatorWidth",
    value: function getIndicatorWidth(size) {
      switch (size) {
        case "small"
        /* small */
        :
          return 20;

        case "large"
        /* large */
        :
          return 50;

        default:
          return 30;
      }
    }
  }, {
    key: "renderIndicator",
    value: function renderIndicator(prefixCls) {
      var _this$props = this.props,
          indicator = _this$props.indicator,
          size = _this$props.size;
      var dotClassName = "".concat(prefixCls, "-dot");

      if ((0, _react.isValidElement)(indicator)) {
        return (0, _react.cloneElement)(indicator, {
          className: (0, _classnames["default"])(indicator.props.className, dotClassName)
        });
      }

      return _react["default"].createElement(_progress["default"], {
        width: this.getIndicatorWidth(size),
        className: dotClassName,
        type: "loading"
        /* loading */

      });
    }
  }, {
    key: "render",
    value: function render() {
      var _classNames;

      var _this$props2 = this.props,
          className = _this$props2.className,
          size = _this$props2.size,
          customizePrefixCls = _this$props2.prefixCls,
          tip = _this$props2.tip,
          wrapperClassName = _this$props2.wrapperClassName,
          children = _this$props2.children,
          style = _this$props2.style,
          restProps = (0, _objectWithoutProperties2["default"])(_this$props2, ["className", "size", "prefixCls", "tip", "wrapperClassName", "children", "style"]);
      var _this$state = this.state,
          spinning = _this$state.spinning,
          notCssAnimationSupported = _this$state.notCssAnimationSupported;
      var prefixCls = (0, _configure.getPrefixCls)('spin', customizePrefixCls);
      var spinClassName = (0, _classnames["default"])(prefixCls, (_classNames = {}, (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-sm"), size === "small"), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-lg"), size === "large"), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-spinning"), spinning), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-show-text"), !!tip || notCssAnimationSupported), _classNames), className); // fix https://fb.me/react-unknown-prop

      var divProps = (0, _omit["default"])(restProps, ['spinning', 'delay', 'indicator']);

      var spinElement = _react["default"].createElement("div", (0, _extends2["default"])({}, divProps, {
        className: spinClassName,
        style: style,
        key: "loading"
      }), this.renderIndicator(prefixCls), tip ? _react["default"].createElement("div", {
        className: "".concat(prefixCls, "-text")
      }, tip) : null);

      if (children) {
        var _classNames2;

        var animateClassName = "".concat(prefixCls, "-nested-loading");

        if (wrapperClassName) {
          animateClassName += " ".concat(wrapperClassName);
        }

        var containerClassName = (0, _classnames["default"])((_classNames2 = {}, (0, _defineProperty2["default"])(_classNames2, "".concat(prefixCls, "-container"), true), (0, _defineProperty2["default"])(_classNames2, "".concat(prefixCls, "-blur"), spinning), _classNames2));
        return _react["default"].createElement(_animate["default"], (0, _extends2["default"])({}, divProps, {
          component: "div",
          className: animateClassName,
          transitionName: "fade"
        }), spinning && spinElement, _react["default"].createElement("div", {
          className: containerClassName,
          key: "container"
        }, children));
      }

      return spinElement;
    }
  }]);
  return Spin;
}(_react.Component);

exports["default"] = Spin;
Spin.displayName = 'Spin';
Spin.defaultProps = {
  spinning: true,
  size: "default"
  /* default */
  ,
  wrapperClassName: ''
};
Spin.propTypes = {
  prefixCls: _propTypes["default"].string,
  className: _propTypes["default"].string,
  spinning: _propTypes["default"].bool,
  size: _propTypes["default"].oneOf(["small"
  /* small */
  , "default"
  /* default */
  , "large"
  /* large */
  ]),
  wrapperClassName: _propTypes["default"].string,
  indicator: _propTypes["default"].node
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNwaW4vaW5kZXguanN4Il0sIm5hbWVzIjpbIlNwaW4iLCJDb21wb25lbnQiLCJzcGlubmluZyIsInByb3BzIiwibm90Q3NzQW5pbWF0aW9uU3VwcG9ydGVkIiwiY2xlYXJUaW1lb3V0IiwibmV4dFByb3BzIiwiY3VycmVudFNwaW5uaW5nIiwiZGVsYXkiLCJpc05hTiIsIk51bWJlciIsInNpemUiLCJwcmVmaXhDbHMiLCJpbmRpY2F0b3IiLCJkb3RDbGFzc05hbWUiLCJjbGFzc05hbWUiLCJjdXN0b21pemVQcmVmaXhDbHMiLCJ0aXAiLCJ3cmFwcGVyQ2xhc3NOYW1lIiwiY2hpbGRyZW4iLCJzdHlsZSIsInJlc3RQcm9wcyIsInNwaW5DbGFzc05hbWUiLCJkaXZQcm9wcyIsInNwaW5FbGVtZW50IiwiYW5pbWF0ZUNsYXNzTmFtZSIsImNvbnRhaW5lckNsYXNzTmFtZSIsIlByb3BUeXBlcyIsIm5vZGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUEsTUFBQSxHQUFBLHVCQUFBLENBQUEsT0FBQSxDQUFBLE9BQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsVUFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLFlBQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsV0FBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLFlBQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsS0FBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsd0JBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUEsQ0FBQSxrQ0FBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxRQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLENBQUEsWUFBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxTQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLENBQUEsc0JBQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsVUFBQSxHQUFBLE9BQUEsQ0FBQSxjQUFBLENB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QUErQztBQUFRO0FBQXZELEdBQWhCLENBSk87QUFLYk8sRUFBQUEsZ0JBQWdCLEVBQUVTLFVBQUFBLENBQUFBLFNBQUFBLENBQUFBLENBTEwsTUFBQTtBQU1iZCxFQUFBQSxTQUFTLEVBQUVjLFVBQUFBLENBQUFBLFNBQUFBLENBQUFBLENBQVVDO0FBTlIsQ0FBakI1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBjbG9uZUVsZW1lbnQsIENvbXBvbmVudCwgaXNWYWxpZEVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgb21pdCBmcm9tICdsb2Rhc2gvb21pdCc7XG5pbXBvcnQgaXNDc3NBbmltYXRpb25TdXBwb3J0ZWQgZnJvbSAnLi4vX3V0aWwvaXNDc3NBbmltYXRpb25TdXBwb3J0ZWQnO1xuaW1wb3J0IEFuaW1hdGUgZnJvbSAnLi4vYW5pbWF0ZSc7XG5pbXBvcnQgUHJvZ3Jlc3MgZnJvbSAnLi4vcHJvZ3Jlc3MvcHJvZ3Jlc3MnO1xuaW1wb3J0IHsgZ2V0UHJlZml4Q2xzIH0gZnJvbSAnLi4vY29uZmlndXJlJztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNwaW4gZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgY29uc3Qgc3Bpbm5pbmcgPSBwcm9wcy5zcGlubmluZztcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIHNwaW5uaW5nLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgaWYgKCFpc0Nzc0FuaW1hdGlvblN1cHBvcnRlZCgpKSB7XG4gICAgICAgICAgICAvLyBTaG93IHRleHQgaW4gSUU5XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBub3RDc3NBbmltYXRpb25TdXBwb3J0ZWQ6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgaWYgKHRoaXMuZGVib3VuY2VUaW1lb3V0KSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5kZWJvdW5jZVRpbWVvdXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmRlbGF5VGltZW91dCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuZGVsYXlUaW1lb3V0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgICBjb25zdCB7IHNwaW5uaW5nOiBjdXJyZW50U3Bpbm5pbmcgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGNvbnN0IHNwaW5uaW5nID0gbmV4dFByb3BzLnNwaW5uaW5nO1xuICAgICAgICBjb25zdCB7IGRlbGF5IH0gPSB0aGlzLnByb3BzO1xuICAgICAgICBpZiAodGhpcy5kZWJvdW5jZVRpbWVvdXQpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmRlYm91bmNlVGltZW91dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN1cnJlbnRTcGlubmluZyAmJiAhc3Bpbm5pbmcpIHtcbiAgICAgICAgICAgIHRoaXMuZGVib3VuY2VUaW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4gdGhpcy5zZXRTdGF0ZSh7IHNwaW5uaW5nIH0pLCAyMDApO1xuICAgICAgICAgICAgaWYgKHRoaXMuZGVsYXlUaW1lb3V0KSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuZGVsYXlUaW1lb3V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzcGlubmluZyAmJiBkZWxheSAmJiAhaXNOYU4oTnVtYmVyKGRlbGF5KSkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmRlbGF5VGltZW91dCkge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmRlbGF5VGltZW91dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmRlbGF5VGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHRoaXMuc2V0U3RhdGUoeyBzcGlubmluZyB9KSwgZGVsYXkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHNwaW5uaW5nIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldEluZGljYXRvcldpZHRoKHNpemUpIHtcbiAgICAgICAgc3dpdGNoIChzaXplKSB7XG4gICAgICAgICAgICBjYXNlIFwic21hbGxcIiAvKiBzbWFsbCAqLzpcbiAgICAgICAgICAgICAgICByZXR1cm4gMjA7XG4gICAgICAgICAgICBjYXNlIFwibGFyZ2VcIiAvKiBsYXJnZSAqLzpcbiAgICAgICAgICAgICAgICByZXR1cm4gNTA7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiAzMDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZW5kZXJJbmRpY2F0b3IocHJlZml4Q2xzKSB7XG4gICAgICAgIGNvbnN0IHsgaW5kaWNhdG9yLCBzaXplIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICBjb25zdCBkb3RDbGFzc05hbWUgPSBgJHtwcmVmaXhDbHN9LWRvdGA7XG4gICAgICAgIGlmIChpc1ZhbGlkRWxlbWVudChpbmRpY2F0b3IpKSB7XG4gICAgICAgICAgICByZXR1cm4gY2xvbmVFbGVtZW50KGluZGljYXRvciwge1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhpbmRpY2F0b3IucHJvcHMuY2xhc3NOYW1lLCBkb3RDbGFzc05hbWUpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICg8UHJvZ3Jlc3Mgd2lkdGg9e3RoaXMuZ2V0SW5kaWNhdG9yV2lkdGgoc2l6ZSl9IGNsYXNzTmFtZT17ZG90Q2xhc3NOYW1lfSB0eXBlPXtcImxvYWRpbmdcIiAvKiBsb2FkaW5nICovfS8+KTtcbiAgICB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB7IGNsYXNzTmFtZSwgc2l6ZSwgcHJlZml4Q2xzOiBjdXN0b21pemVQcmVmaXhDbHMsIHRpcCwgd3JhcHBlckNsYXNzTmFtZSwgY2hpbGRyZW4sIHN0eWxlLCAuLi5yZXN0UHJvcHMgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGNvbnN0IHsgc3Bpbm5pbmcsIG5vdENzc0FuaW1hdGlvblN1cHBvcnRlZCB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgY29uc3QgcHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCdzcGluJywgY3VzdG9taXplUHJlZml4Q2xzKTtcbiAgICAgICAgY29uc3Qgc3BpbkNsYXNzTmFtZSA9IGNsYXNzTmFtZXMocHJlZml4Q2xzLCB7XG4gICAgICAgICAgICBbYCR7cHJlZml4Q2xzfS1zbWBdOiBzaXplID09PSBcInNtYWxsXCIgLyogc21hbGwgKi8sXG4gICAgICAgICAgICBbYCR7cHJlZml4Q2xzfS1sZ2BdOiBzaXplID09PSBcImxhcmdlXCIgLyogbGFyZ2UgKi8sXG4gICAgICAgICAgICBbYCR7cHJlZml4Q2xzfS1zcGlubmluZ2BdOiBzcGlubmluZyxcbiAgICAgICAgICAgIFtgJHtwcmVmaXhDbHN9LXNob3ctdGV4dGBdOiAhIXRpcCB8fCBub3RDc3NBbmltYXRpb25TdXBwb3J0ZWQsXG4gICAgICAgIH0sIGNsYXNzTmFtZSk7XG4gICAgICAgIC8vIGZpeCBodHRwczovL2ZiLm1lL3JlYWN0LXVua25vd24tcHJvcFxuICAgICAgICBjb25zdCBkaXZQcm9wcyA9IG9taXQocmVzdFByb3BzLCBbJ3NwaW5uaW5nJywgJ2RlbGF5JywgJ2luZGljYXRvciddKTtcbiAgICAgICAgY29uc3Qgc3BpbkVsZW1lbnQgPSAoPGRpdiB7Li4uZGl2UHJvcHN9IGNsYXNzTmFtZT17c3BpbkNsYXNzTmFtZX0gc3R5bGU9e3N0eWxlfSBrZXk9XCJsb2FkaW5nXCI+XG4gICAgICAgIHt0aGlzLnJlbmRlckluZGljYXRvcihwcmVmaXhDbHMpfVxuICAgICAgICB7dGlwID8gPGRpdiBjbGFzc05hbWU9e2Ake3ByZWZpeENsc30tdGV4dGB9Pnt0aXB9PC9kaXY+IDogbnVsbH1cbiAgICAgIDwvZGl2Pik7XG4gICAgICAgIGlmIChjaGlsZHJlbikge1xuICAgICAgICAgICAgbGV0IGFuaW1hdGVDbGFzc05hbWUgPSBgJHtwcmVmaXhDbHN9LW5lc3RlZC1sb2FkaW5nYDtcbiAgICAgICAgICAgIGlmICh3cmFwcGVyQ2xhc3NOYW1lKSB7XG4gICAgICAgICAgICAgICAgYW5pbWF0ZUNsYXNzTmFtZSArPSBgICR7d3JhcHBlckNsYXNzTmFtZX1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgY29udGFpbmVyQ2xhc3NOYW1lID0gY2xhc3NOYW1lcyh7XG4gICAgICAgICAgICAgICAgW2Ake3ByZWZpeENsc30tY29udGFpbmVyYF06IHRydWUsXG4gICAgICAgICAgICAgICAgW2Ake3ByZWZpeENsc30tYmx1cmBdOiBzcGlubmluZyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuICg8QW5pbWF0ZSB7Li4uZGl2UHJvcHN9IGNvbXBvbmVudD1cImRpdlwiIGNsYXNzTmFtZT17YW5pbWF0ZUNsYXNzTmFtZX0gdHJhbnNpdGlvbk5hbWU9XCJmYWRlXCI+XG4gICAgICAgICAge3NwaW5uaW5nICYmIHNwaW5FbGVtZW50fVxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjb250YWluZXJDbGFzc05hbWV9IGtleT1cImNvbnRhaW5lclwiPlxuICAgICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L0FuaW1hdGU+KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3BpbkVsZW1lbnQ7XG4gICAgfVxufVxuU3Bpbi5kaXNwbGF5TmFtZSA9ICdTcGluJztcblNwaW4uZGVmYXVsdFByb3BzID0ge1xuICAgIHNwaW5uaW5nOiB0cnVlLFxuICAgIHNpemU6IFwiZGVmYXVsdFwiIC8qIGRlZmF1bHQgKi8sXG4gICAgd3JhcHBlckNsYXNzTmFtZTogJycsXG59O1xuU3Bpbi5wcm9wVHlwZXMgPSB7XG4gICAgcHJlZml4Q2xzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBzcGlubmluZzogUHJvcFR5cGVzLmJvb2wsXG4gICAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mKFtcInNtYWxsXCIgLyogc21hbGwgKi8sIFwiZGVmYXVsdFwiIC8qIGRlZmF1bHQgKi8sIFwibGFyZ2VcIiAvKiBsYXJnZSAqL10pLFxuICAgIHdyYXBwZXJDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgaW5kaWNhdG9yOiBQcm9wVHlwZXMubm9kZSxcbn07XG4iXX0=