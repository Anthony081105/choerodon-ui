{"version":3,"sources":["spin/index.jsx"],"names":["Spin","Component","spinning","props","notCssAnimationSupported","clearTimeout","nextProps","currentSpinning","delay","isNaN","Number","size","prefixCls","indicator","dotClassName","className","customizePrefixCls","tip","wrapperClassName","children","style","restProps","spinClassName","divProps","spinElement","animateClassName","containerClassName","PropTypes","node"],"mappings":"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","sourcesContent":["import React, { cloneElement, Component, isValidElement } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport omit from 'lodash/omit';\nimport isCssAnimationSupported from '../_util/isCssAnimationSupported';\nimport Animate from '../animate';\nimport Progress from '../progress/progress';\nimport { getPrefixCls } from '../configure';\nexport default class Spin extends Component {\n    constructor(props) {\n        super(props);\n        const spinning = props.spinning;\n        this.state = {\n            spinning,\n        };\n    }\n    componentDidMount() {\n        if (!isCssAnimationSupported()) {\n            // Show text in IE9\n            this.setState({\n                notCssAnimationSupported: true,\n            });\n        }\n    }\n    componentWillUnmount() {\n        if (this.debounceTimeout) {\n            clearTimeout(this.debounceTimeout);\n        }\n        if (this.delayTimeout) {\n            clearTimeout(this.delayTimeout);\n        }\n    }\n    componentWillReceiveProps(nextProps) {\n        const { spinning: currentSpinning } = this.props;\n        const spinning = nextProps.spinning;\n        const { delay } = this.props;\n        if (this.debounceTimeout) {\n            clearTimeout(this.debounceTimeout);\n        }\n        if (currentSpinning && !spinning) {\n            this.debounceTimeout = window.setTimeout(() => this.setState({ spinning }), 200);\n            if (this.delayTimeout) {\n                clearTimeout(this.delayTimeout);\n            }\n        }\n        else if (spinning && delay && !isNaN(Number(delay))) {\n            if (this.delayTimeout) {\n                clearTimeout(this.delayTimeout);\n            }\n            this.delayTimeout = window.setTimeout(() => this.setState({ spinning }), delay);\n        }\n        else {\n            this.setState({ spinning });\n        }\n    }\n    getIndicatorWidth(size) {\n        switch (size) {\n            case \"small\" /* small */:\n                return 20;\n            case \"large\" /* large */:\n                return 50;\n            default:\n                return 30;\n        }\n    }\n    renderIndicator(prefixCls) {\n        const { indicator, size } = this.props;\n        const dotClassName = `${prefixCls}-dot`;\n        if (isValidElement(indicator)) {\n            return cloneElement(indicator, {\n                className: classNames(indicator.props.className, dotClassName),\n            });\n        }\n        return (<Progress width={this.getIndicatorWidth(size)} className={dotClassName} type={\"loading\" /* loading */}/>);\n    }\n    render() {\n        const { className, size, prefixCls: customizePrefixCls, tip, wrapperClassName, children, style, ...restProps } = this.props;\n        const { spinning, notCssAnimationSupported } = this.state;\n        const prefixCls = getPrefixCls('spin', customizePrefixCls);\n        const spinClassName = classNames(prefixCls, {\n            [`${prefixCls}-sm`]: size === \"small\" /* small */,\n            [`${prefixCls}-lg`]: size === \"large\" /* large */,\n            [`${prefixCls}-spinning`]: spinning,\n            [`${prefixCls}-show-text`]: !!tip || notCssAnimationSupported,\n        }, className);\n        // fix https://fb.me/react-unknown-prop\n        const divProps = omit(restProps, ['spinning', 'delay', 'indicator']);\n        const spinElement = (<div {...divProps} className={spinClassName} style={style} key=\"loading\">\n        {this.renderIndicator(prefixCls)}\n        {tip ? <div className={`${prefixCls}-text`}>{tip}</div> : null}\n      </div>);\n        if (children) {\n            let animateClassName = `${prefixCls}-nested-loading`;\n            if (wrapperClassName) {\n                animateClassName += ` ${wrapperClassName}`;\n            }\n            const containerClassName = classNames({\n                [`${prefixCls}-container`]: true,\n                [`${prefixCls}-blur`]: spinning,\n            });\n            return (<Animate {...divProps} component=\"div\" className={animateClassName} transitionName=\"fade\">\n          {spinning && spinElement}\n          <div className={containerClassName} key=\"container\">\n            {children}\n          </div>\n        </Animate>);\n        }\n        return spinElement;\n    }\n}\nSpin.displayName = 'Spin';\nSpin.defaultProps = {\n    spinning: true,\n    size: \"default\" /* default */,\n    wrapperClassName: '',\n};\nSpin.propTypes = {\n    prefixCls: PropTypes.string,\n    className: PropTypes.string,\n    spinning: PropTypes.bool,\n    size: PropTypes.oneOf([\"small\" /* small */, \"default\" /* default */, \"large\" /* large */]),\n    wrapperClassName: PropTypes.string,\n    indicator: PropTypes.node,\n};\n"]}