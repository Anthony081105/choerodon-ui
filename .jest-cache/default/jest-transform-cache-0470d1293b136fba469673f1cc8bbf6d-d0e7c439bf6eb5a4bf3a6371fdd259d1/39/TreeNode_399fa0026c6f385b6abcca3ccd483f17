062f668a5e819adba787f8ef0913cf0a
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.nodeContextTypes = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _warning = _interopRequireDefault(require("../../_util/warning"));

var _animate = _interopRequireDefault(require("../../animate"));

var _toArray = _interopRequireDefault(require("../util/Children/toArray"));

var _Tree = require("./Tree");

var _progress = _interopRequireDefault(require("../../progress"));

var _util = require("./util");

var ICON_OPEN = 'open';
var ICON_CLOSE = 'close';
var LOAD_STATUS_NONE = 0;
var LOAD_STATUS_LOADING = 1;
var LOAD_STATUS_LOADED = 2;
var LOAD_STATUS_FAILED = 0; // Action align, let's make failed same as init.

var defaultTitle = '---';
var onlyTreeNodeWarned = false; // Only accept TreeNode

var nodeContextTypes = (0, _objectSpread2["default"])({}, _Tree.contextTypes, {
  rcTreeNode: _propTypes["default"].shape({
    onUpCheckConduct: _propTypes["default"].func
  })
});
exports.nodeContextTypes = nodeContextTypes;

var TreeNode =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(TreeNode, _Component);

  function TreeNode(_props) {
    var _this;

    (0, _classCallCheck2["default"])(this, TreeNode);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(TreeNode).call(this, _props));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onUpCheckConduct", function (treeNode, nodeChecked, nodeHalfChecked) {
      var nodePos = treeNode.props.pos;
      var _this$props = _this.props,
          eventKey = _this$props.eventKey,
          pos = _this$props.pos,
          checked = _this$props.checked,
          halfChecked = _this$props.halfChecked;
      var _this$context = _this.context,
          _this$context$rcTree = _this$context.rcTree,
          checkStrictly = _this$context$rcTree.checkStrictly,
          isKeyChecked = _this$context$rcTree.isKeyChecked,
          onBatchNodeCheck = _this$context$rcTree.onBatchNodeCheck,
          onCheckConductFinished = _this$context$rcTree.onCheckConductFinished,
          _this$context$rcTreeN = _this$context.rcTreeNode;
      _this$context$rcTreeN = _this$context$rcTreeN === void 0 ? {} : _this$context$rcTreeN;
      var onUpCheckConduct = _this$context$rcTreeN.onUpCheckConduct; // Stop conduct when current node is disabled

      if ((0, _util.isCheckDisabled)((0, _assertThisInitialized2["default"])(_this))) {
        onCheckConductFinished();
        return;
      }

      var children = _this.getNodeChildren();

      var checkedCount = nodeChecked ? 1 : 0; // Statistic checked count

      children.forEach(function (node, index) {
        var childPos = (0, _util.getPosition)(pos, index);

        if (nodePos === childPos || (0, _util.isCheckDisabled)(node)) {
          return;
        }

        if (isKeyChecked(node.key || childPos)) {
          checkedCount += 1;
        }
      }); // Static enabled children count

      var enabledChildrenCount = children.filter(function (node) {
        return !(0, _util.isCheckDisabled)(node);
      }).length; // checkStrictly will not conduct check status

      var nextChecked = checkStrictly ? checked : enabledChildrenCount === checkedCount;
      var nextHalfChecked = checkStrictly ? // propagated or child checked
      halfChecked : nodeHalfChecked || checkedCount > 0 && !nextChecked; // Add into batch update

      if (checked !== nextChecked || halfChecked !== nextHalfChecked) {
        onBatchNodeCheck(eventKey, nextChecked, nextHalfChecked);

        if (onUpCheckConduct) {
          onUpCheckConduct((0, _assertThisInitialized2["default"])(_this), nextChecked, nextHalfChecked);
        } else {
          // Flush all the update
          onCheckConductFinished();
        }
      } else {
        // Flush all the update
        onCheckConductFinished();
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onDownCheckConduct", function (nodeChecked) {
      var children = _this.props.children;
      var _this$context$rcTree2 = _this.context.rcTree,
          checkStrictly = _this$context$rcTree2.checkStrictly,
          isKeyChecked = _this$context$rcTree2.isKeyChecked,
          onBatchNodeCheck = _this$context$rcTree2.onBatchNodeCheck;
      if (checkStrictly) return;
      (0, _util.traverseTreeNodes)(children, function (_ref) {
        var node = _ref.node,
            key = _ref.key;
        if ((0, _util.isCheckDisabled)(node)) return false;

        if (nodeChecked !== isKeyChecked(key)) {
          onBatchNodeCheck(key, nodeChecked, false);
        }
      });
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onSelectorClick", function (e) {
      if (_this.isSelectable()) {
        _this.onSelect(e);
      } else {
        _this.onCheck(e);
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onSelect", function (e) {
      if (_this.isDisabled()) return;
      var onNodeSelect = _this.context.rcTree.onNodeSelect;
      e.preventDefault();
      onNodeSelect(e, (0, _assertThisInitialized2["default"])(_this));
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onCheck", function (e) {
      if (_this.isDisabled()) return;
      var _this$props2 = _this.props,
          disableCheckbox = _this$props2.disableCheckbox,
          checked = _this$props2.checked,
          eventKey = _this$props2.eventKey;
      var _this$context2 = _this.context,
          _this$context2$rcTree = _this$context2.rcTree,
          checkable = _this$context2$rcTree.checkable,
          onBatchNodeCheck = _this$context2$rcTree.onBatchNodeCheck,
          onCheckConductFinished = _this$context2$rcTree.onCheckConductFinished,
          _this$context2$rcTree2 = _this$context2.rcTreeNode;
      _this$context2$rcTree2 = _this$context2$rcTree2 === void 0 ? {} : _this$context2$rcTree2;
      var onUpCheckConduct = _this$context2$rcTree2.onUpCheckConduct;
      if (!checkable || disableCheckbox) return;
      e.preventDefault();
      var targetChecked = !checked;
      onBatchNodeCheck(eventKey, targetChecked, false, (0, _assertThisInitialized2["default"])(_this)); // Children conduct

      _this.onDownCheckConduct(targetChecked); // Parent conduct


      if (onUpCheckConduct) {
        onUpCheckConduct((0, _assertThisInitialized2["default"])(_this), targetChecked, false);
      } else {
        onCheckConductFinished();
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onMouseEnter", function (e) {
      var onNodeMouseEnter = _this.context.rcTree.onNodeMouseEnter;
      onNodeMouseEnter(e, (0, _assertThisInitialized2["default"])(_this));
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onMouseLeave", function (e) {
      var onNodeMouseLeave = _this.context.rcTree.onNodeMouseLeave;
      onNodeMouseLeave(e, (0, _assertThisInitialized2["default"])(_this));
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onContextMenu", function (e) {
      var onNodeContextMenu = _this.context.rcTree.onNodeContextMenu;
      onNodeContextMenu(e, (0, _assertThisInitialized2["default"])(_this));
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onDragStart", function (e) {
      var onNodeDragStart = _this.context.rcTree.onNodeDragStart;
      e.stopPropagation();

      _this.setState({
        dragNodeHighlight: true
      });

      onNodeDragStart(e, (0, _assertThisInitialized2["default"])(_this));

      try {
        // ie throw error
        // firefox-need-it
        e.dataTransfer.setData('text/plain', '');
      } catch (error) {// empty
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onDragEnter", function (e) {
      var onNodeDragEnter = _this.context.rcTree.onNodeDragEnter;
      e.preventDefault();
      e.stopPropagation();
      onNodeDragEnter(e, (0, _assertThisInitialized2["default"])(_this));
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onDragOver", function (e) {
      var onNodeDragOver = _this.context.rcTree.onNodeDragOver;
      e.preventDefault();
      e.stopPropagation();
      onNodeDragOver(e, (0, _assertThisInitialized2["default"])(_this));
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onDragLeave", function (e) {
      var onNodeDragLeave = _this.context.rcTree.onNodeDragLeave;
      e.stopPropagation();
      onNodeDragLeave(e, (0, _assertThisInitialized2["default"])(_this));
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onDragEnd", function (e) {
      var onNodeDragEnd = _this.context.rcTree.onNodeDragEnd;
      e.stopPropagation();

      _this.setState({
        dragNodeHighlight: false
      });

      onNodeDragEnd(e, (0, _assertThisInitialized2["default"])(_this));
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onDrop", function (e) {
      var onNodeDrop = _this.context.rcTree.onNodeDrop;
      e.preventDefault();
      e.stopPropagation();

      _this.setState({
        dragNodeHighlight: false
      });

      onNodeDrop(e, (0, _assertThisInitialized2["default"])(_this));
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onExpand", function (e) {
      var onNodeExpand = _this.context.rcTree.onNodeExpand;
      var callbackPromise = onNodeExpand(e, (0, _assertThisInitialized2["default"])(_this)); // Promise like

      if (callbackPromise && callbackPromise.then) {
        _this.setState({
          loadStatus: LOAD_STATUS_LOADING
        });

        callbackPromise.then(function () {
          _this.setState({
            loadStatus: LOAD_STATUS_LOADED
          });
        })["catch"](function () {
          _this.setState({
            loadStatus: LOAD_STATUS_FAILED
          });
        });
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "setSelectHandle", function (node) {
      _this.selectHandle = node;
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "getNodeState", function () {
      var expanded = _this.props.expanded;

      if (_this.isLeaf()) {
        return null;
      }

      return expanded ? ICON_OPEN : ICON_CLOSE;
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "isLeaf", function () {
      var loadStatus = _this.state.loadStatus;
      var _this$props3 = _this.props,
          isLeaf = _this$props3.isLeaf,
          _this$props3$hasChild = _this$props3.hasChildren,
          hasChildren = _this$props3$hasChild === void 0 ? _this.getNodeChildren().length !== 0 : _this$props3$hasChild;
      var loadData = _this.context.rcTree.loadData;
      return isLeaf || !loadData && !hasChildren || loadData && loadStatus === LOAD_STATUS_LOADED && !hasChildren;
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "isDisabled", function () {
      var disabled = _this.props.disabled;
      var treeDisabled = _this.context.rcTree.disabled; // Follow the logic of Selectable

      if (disabled === false) {
        return false;
      }

      return !!(treeDisabled || disabled);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "syncLoadData", function (props) {
      var loadStatus = _this.state.loadStatus;
      var expanded = props.expanded;
      var loadData = _this.context.rcTree.loadData;

      if (loadData && loadStatus === LOAD_STATUS_NONE && expanded && !_this.isLeaf()) {
        _this.setState({
          loadStatus: LOAD_STATUS_LOADING
        });

        loadData((0, _assertThisInitialized2["default"])(_this)).then(function () {
          _this.setState({
            loadStatus: LOAD_STATUS_LOADED
          });
        })["catch"](function () {
          _this.setState({
            loadStatus: LOAD_STATUS_FAILED
          });
        });
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "renderSwitcher", function () {
      var _this$props4 = _this.props,
          expanded = _this$props4.expanded,
          switcherIconFromProps = _this$props4.switcherIcon;
      var _this$context$rcTree3 = _this.context.rcTree,
          prefixCls = _this$context$rcTree3.prefixCls,
          switcherIconFromCtx = _this$context$rcTree3.switcherIcon;
      var switcherIcon = switcherIconFromProps || switcherIconFromCtx;

      if (_this.isLeaf()) {
        return _react["default"].createElement("span", {
          className: (0, _classnames["default"])("".concat(prefixCls, "-switcher"), "".concat(prefixCls, "-switcher-noop"))
        }, typeof switcherIcon === 'function' ? switcherIcon((0, _objectSpread2["default"])({}, _this.props, {
          isLeaf: true
        })) : switcherIcon);
      }

      var switcherCls = (0, _classnames["default"])("".concat(prefixCls, "-switcher"), "".concat(prefixCls, "-switcher_").concat(expanded ? ICON_OPEN : ICON_CLOSE));
      return _react["default"].createElement("span", {
        onClick: _this.onExpand,
        className: switcherCls
      }, typeof switcherIcon === 'function' ? switcherIcon((0, _objectSpread2["default"])({}, _this.props, {
        isLeaf: false
      })) : switcherIcon);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "renderCheckbox", function () {
      var _this$props5 = _this.props,
          checked = _this$props5.checked,
          halfChecked = _this$props5.halfChecked,
          disableCheckbox = _this$props5.disableCheckbox;
      var _this$context$rcTree4 = _this.context.rcTree,
          prefixCls = _this$context$rcTree4.prefixCls,
          checkable = _this$context$rcTree4.checkable;

      var disabled = _this.isDisabled();

      if (!checkable) return null; // [Legacy] Custom element should be separate with `checkable` in future

      var $custom = typeof checkable !== 'boolean' ? checkable : null;
      return _react["default"].createElement("span", {
        className: (0, _classnames["default"])("".concat(prefixCls, "-checkbox"), checked && "".concat(prefixCls, "-checkbox-checked"), !checked && halfChecked && "".concat(prefixCls, "-checkbox-indeterminate"), (disabled || disableCheckbox) && "".concat(prefixCls, "-checkbox-disabled")),
        onClick: _this.onCheck
      }, $custom);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "renderIcon", function () {
      var loadStatus = _this.state.loadStatus;
      var prefixCls = _this.context.rcTree.prefixCls;
      return loadStatus === LOAD_STATUS_LOADING ? _react["default"].createElement(_progress["default"], {
        type: "loading",
        size: "small",
        width: 14,
        className: "".concat(prefixCls, "-icon_loading")
      }) : _react["default"].createElement("span", {
        className: (0, _classnames["default"])("".concat(prefixCls, "-iconEle"), "".concat(prefixCls, "-icon__").concat(_this.getNodeState() || 'docu'))
      });
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "renderSelector", function () {
      var _this$state = _this.state,
          loadStatus = _this$state.loadStatus,
          dragNodeHighlight = _this$state.dragNodeHighlight;
      var _this$props6 = _this.props,
          title = _this$props6.title,
          selected = _this$props6.selected,
          icon = _this$props6.icon;
      var _this$context$rcTree5 = _this.context.rcTree,
          prefixCls = _this$context$rcTree5.prefixCls,
          showIcon = _this$context$rcTree5.showIcon,
          draggable = _this$context$rcTree5.draggable,
          loadData = _this$context$rcTree5.loadData;

      var disabled = _this.isDisabled();

      var wrapClass = "".concat(prefixCls, "-node-content-wrapper"); // Icon - Still show loading icon when loading without showIcon

      var $icon;

      if (showIcon) {
        $icon = icon ? _react["default"].createElement("span", {
          className: (0, _classnames["default"])("".concat(prefixCls, "-iconEle"), "".concat(prefixCls, "-icon__customize"))
        }, typeof icon === 'function' ? (0, _react.createElement)(icon, _this.props) : icon) : _this.renderIcon();
      } else if (loadData && loadStatus === LOAD_STATUS_LOADING) {
        $icon = _this.renderIcon();
      } // Title


      var $title = _react["default"].createElement("span", {
        className: "".concat(prefixCls, "-title")
      }, title);

      return _react["default"].createElement("span", {
        ref: _this.setSelectHandle,
        title: typeof title === 'string' ? title : '',
        className: (0, _classnames["default"])("".concat(wrapClass), "".concat(wrapClass, "-").concat(_this.getNodeState() || 'normal'), !disabled && (selected || dragNodeHighlight) && "".concat(prefixCls, "-node-selected"), !disabled && draggable && 'draggable'),
        draggable: !disabled && draggable || undefined,
        "aria-grabbed": !disabled && draggable || undefined,
        onMouseEnter: _this.onMouseEnter,
        onMouseLeave: _this.onMouseLeave,
        onContextMenu: _this.onContextMenu,
        onClick: _this.onSelectorClick,
        onDragStart: _this.onDragStart
      }, $icon, $title);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "renderChildren", function () {
      var _this$props7 = _this.props,
          expanded = _this$props7.expanded,
          pos = _this$props7.pos,
          wrapper = _this$props7.wrapper;
      var _this$context$rcTree6 = _this.context.rcTree,
          prefixCls = _this$context$rcTree6.prefixCls,
          openTransitionName = _this$context$rcTree6.openTransitionName,
          openAnimation = _this$context$rcTree6.openAnimation,
          renderTreeNode = _this$context$rcTree6.renderTreeNode; // [Legacy] Animation control

      var renderFirst = _this.renderFirst;
      _this.renderFirst = 1;
      var transitionAppear = true;

      if (!renderFirst && expanded) {
        transitionAppear = false;
      }

      var animProps = {};

      if (openTransitionName) {
        animProps.transitionName = openTransitionName;
      } else if ((0, _typeof2["default"])(openAnimation) === 'object') {
        animProps.animation = (0, _objectSpread2["default"])({}, openAnimation);

        if (!transitionAppear) {
          delete animProps.animation.appear;
        }
      } // Children TreeNode


      var nodeList = _this.getNodeChildren();

      if (nodeList.length === 0) {
        return null;
      }

      var $children;

      if (expanded) {
        var treeNodes = _react.Children.map(nodeList, function (node, index) {
          return renderTreeNode(node, index, pos);
        });

        if (wrapper) {
          treeNodes = wrapper(treeNodes);
        }

        $children = _react["default"].createElement("ul", {
          hidden: !expanded
        }, treeNodes);
      }

      return _react["default"].createElement(_animate["default"], (0, _extends2["default"])({}, animProps, {
        hiddenProp: "hidden",
        transitionAppear: transitionAppear,
        component: ""
      }), $children);
    });
    _this.state = {
      loadStatus: LOAD_STATUS_NONE,
      dragNodeHighlight: false
    };
    return _this;
  }

  (0, _createClass2["default"])(TreeNode, [{
    key: "getChildContext",
    value: function getChildContext() {
      return (0, _objectSpread2["default"])({}, this.context, {
        rcTreeNode: {
          onUpCheckConduct: this.onUpCheckConduct
        }
      });
    } // Isomorphic needn't load data in server side

  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.syncLoadData(this.props);
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      this.syncLoadData(nextProps);
    }
  }, {
    key: "getNodeChildren",
    value: function getNodeChildren() {
      var children = this.props.children;
      var originList = (0, _toArray["default"])(children).filter(function (node) {
        return node;
      });
      var targetList = (0, _util.getNodeChildren)(originList);

      if (originList.length !== targetList.length && !onlyTreeNodeWarned) {
        onlyTreeNodeWarned = true;
        (0, _warning["default"])(false, 'Tree only accept TreeNode as children.');
      }

      return targetList;
    }
  }, {
    key: "isSelectable",
    value: function isSelectable() {
      var selectable = this.props.selectable;
      var treeSelectable = this.context.rcTree.selectable; // Ignore when selectable is undefined or null

      if (typeof selectable === 'boolean') {
        return selectable;
      }

      return treeSelectable;
    } // Load data to avoid default expanded tree without data

  }, {
    key: "render",
    value: function render() {
      var _classNames;

      var _this$props8 = this.props,
          className = _this$props8.className,
          dragOver = _this$props8.dragOver,
          dragOverGapTop = _this$props8.dragOverGapTop,
          dragOverGapBottom = _this$props8.dragOverGapBottom;
      var _this$context$rcTree7 = this.context.rcTree,
          prefixCls = _this$context$rcTree7.prefixCls,
          filterTreeNode = _this$context$rcTree7.filterTreeNode;
      var disabled = this.isDisabled();
      return _react["default"].createElement("li", {
        className: (0, _classnames["default"])(className, (_classNames = {}, (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-treenode-disabled"), disabled), (0, _defineProperty2["default"])(_classNames, 'drag-over', !disabled && dragOver), (0, _defineProperty2["default"])(_classNames, 'drag-over-gap-top', !disabled && dragOverGapTop), (0, _defineProperty2["default"])(_classNames, 'drag-over-gap-bottom', !disabled && dragOverGapBottom), (0, _defineProperty2["default"])(_classNames, 'filter-node', filterTreeNode && filterTreeNode(this)), _classNames)),
        onDragEnter: this.onDragEnter,
        onDragOver: this.onDragOver,
        onDragLeave: this.onDragLeave,
        onDrop: this.onDrop,
        onDragEnd: this.onDragEnd
      }, this.renderSwitcher(), this.renderCheckbox(), this.renderSelector(), this.renderChildren());
    }
  }]);
  return TreeNode;
}(_react.Component);

exports["default"] = TreeNode;
(0, _defineProperty2["default"])(TreeNode, "propTypes", {
  eventKey: _propTypes["default"].string,
  // Pass by parent `cloneElement`
  prefixCls: _propTypes["default"].string,
  className: _propTypes["default"].string,
  root: _propTypes["default"].object,
  onSelect: _propTypes["default"].func,
  wrapper: _propTypes["default"].func,
  // By parent
  expanded: _propTypes["default"].bool,
  selected: _propTypes["default"].bool,
  checked: _propTypes["default"].bool,
  halfChecked: _propTypes["default"].bool,
  children: _propTypes["default"].node,
  title: _propTypes["default"].node,
  pos: _propTypes["default"].string,
  dragOver: _propTypes["default"].bool,
  dragOverGapTop: _propTypes["default"].bool,
  dragOverGapBottom: _propTypes["default"].bool,
  // By user
  isLeaf: _propTypes["default"].bool,
  selectable: _propTypes["default"].bool,
  disabled: _propTypes["default"].bool,
  disableCheckbox: _propTypes["default"].bool,
  icon: _propTypes["default"].oneOfType([_propTypes["default"].node, _propTypes["default"].func]),
  switcherIcon: _propTypes["default"].oneOfType([_propTypes["default"].node, _propTypes["default"].func])
});
(0, _defineProperty2["default"])(TreeNode, "contextTypes", nodeContextTypes);
(0, _defineProperty2["default"])(TreeNode, "childContextTypes", nodeContextTypes);
(0, _defineProperty2["default"])(TreeNode, "defaultProps", {
  title: defaultTitle
});
(0, _defineProperty2["default"])(TreeNode, "isTreeNode", 1);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,