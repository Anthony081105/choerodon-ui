{"version":3,"sources":["tree/TreeNode.jsx"],"names":["ICON_OPEN","ICON_CLOSE","LOAD_STATUS_NONE","LOAD_STATUS_LOADING","LOAD_STATUS_LOADED","LOAD_STATUS_FAILED","defaultTitle","onlyTreeNodeWarned","nodeContextTypes","contextTypes","rcTreeNode","onUpCheckConduct","PropTypes","func","TreeNode","Component","eventKey","prefixCls","className","root","onSelect","wrapper","expanded","selected","checked","halfChecked","children","title","pos","dragOver","dragOverGapTop","dragOverGapBottom","isLeaf","selectable","disabled","disableCheckbox","icon","switcherIcon","loadStatus","dragNodeHighlight","nextProps","nodePos","treeNode","checkStrictly","isKeyChecked","onBatchNodeCheck","onCheckConductFinished","checkedCount","nodeChecked","childPos","node","enabledChildrenCount","nextChecked","nextHalfChecked","nodeHalfChecked","key","onNodeSelect","e","checkable","targetChecked","onNodeMouseEnter","onNodeMouseLeave","onNodeContextMenu","onNodeDragStart","onNodeDragEnter","onNodeDragOver","onNodeDragLeave","onNodeDragEnd","onNodeDrop","onNodeExpand","callbackPromise","originList","targetList","hasChildren","loadData","treeDisabled","treeSelectable","props","switcherIconFromProps","switcherIconFromCtx","switcherCls","$custom","onCheck","showIcon","draggable","wrapClass","$icon","$title","onDragStart","openTransitionName","openAnimation","renderTreeNode","renderFirst","transitionAppear","animProps","nodeList","treeNodes","$children","filterTreeNode","onDragEnd"],"mappings":"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","sourcesContent":["import React, { Children, Component, createElement } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport warning from '../../_util/warning';\nimport Animate from '../../animate';\nimport toArray from '../util/Children/toArray';\nimport { contextTypes } from './Tree';\nimport Progress from '../../progress';\nimport { getNodeChildren, getPosition, isCheckDisabled, traverseTreeNodes } from './util';\n\nconst ICON_OPEN = 'open';\nconst ICON_CLOSE = 'close';\n\nconst LOAD_STATUS_NONE = 0;\nconst LOAD_STATUS_LOADING = 1;\nconst LOAD_STATUS_LOADED = 2;\nconst LOAD_STATUS_FAILED = 0; // Action align, let's make failed same as init.\n\nconst defaultTitle = '---';\n\nlet onlyTreeNodeWarned = false; // Only accept TreeNode\n\nexport const nodeContextTypes = {\n  ...contextTypes,\n  rcTreeNode: PropTypes.shape({\n    onUpCheckConduct: PropTypes.func,\n  }),\n};\n\nexport default class TreeNode extends Component {\n  static propTypes = {\n    eventKey: PropTypes.string, // Pass by parent `cloneElement`\n    prefixCls: PropTypes.string,\n    className: PropTypes.string,\n    root: PropTypes.object,\n    onSelect: PropTypes.func,\n    wrapper: PropTypes.func,\n\n    // By parent\n    expanded: PropTypes.bool,\n    selected: PropTypes.bool,\n    checked: PropTypes.bool,\n    halfChecked: PropTypes.bool,\n    children: PropTypes.node,\n    title: PropTypes.node,\n    pos: PropTypes.string,\n    dragOver: PropTypes.bool,\n    dragOverGapTop: PropTypes.bool,\n    dragOverGapBottom: PropTypes.bool,\n\n    // By user\n    isLeaf: PropTypes.bool,\n    selectable: PropTypes.bool,\n    disabled: PropTypes.bool,\n    disableCheckbox: PropTypes.bool,\n    icon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n    switcherIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  };\n\n  static contextTypes = nodeContextTypes;\n\n  static childContextTypes = nodeContextTypes;\n\n  static defaultProps = {\n    title: defaultTitle,\n  };\n\n  static isTreeNode = 1;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loadStatus: LOAD_STATUS_NONE,\n      dragNodeHighlight: false,\n    };\n  }\n\n  getChildContext() {\n    return {\n      ...this.context,\n      rcTreeNode: {\n        onUpCheckConduct: this.onUpCheckConduct,\n      },\n    };\n  }\n\n  // Isomorphic needn't load data in server side\n  componentDidMount() {\n    this.syncLoadData(this.props);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.syncLoadData(nextProps);\n  }\n\n  onUpCheckConduct = (treeNode, nodeChecked, nodeHalfChecked) => {\n    const { pos: nodePos } = treeNode.props;\n    const { eventKey, pos, checked, halfChecked } = this.props;\n    const {\n      rcTree: { checkStrictly, isKeyChecked, onBatchNodeCheck, onCheckConductFinished },\n      rcTreeNode: { onUpCheckConduct } = {},\n    } = this.context;\n\n    // Stop conduct when current node is disabled\n    if (isCheckDisabled(this)) {\n      onCheckConductFinished();\n      return;\n    }\n\n    const children = this.getNodeChildren();\n\n    let checkedCount = nodeChecked ? 1 : 0;\n\n    // Statistic checked count\n    children.forEach((node, index) => {\n      const childPos = getPosition(pos, index);\n\n      if (nodePos === childPos || isCheckDisabled(node)) {\n        return;\n      }\n\n      if (isKeyChecked(node.key || childPos)) {\n        checkedCount += 1;\n      }\n    });\n\n    // Static enabled children count\n    const enabledChildrenCount = children\n      .filter(node => !isCheckDisabled(node))\n      .length;\n\n    // checkStrictly will not conduct check status\n    const nextChecked = checkStrictly ? checked : enabledChildrenCount === checkedCount;\n    const nextHalfChecked = checkStrictly ? // propagated or child checked\n      halfChecked : (nodeHalfChecked || (checkedCount > 0 && !nextChecked));\n\n    // Add into batch update\n    if (checked !== nextChecked || halfChecked !== nextHalfChecked) {\n      onBatchNodeCheck(eventKey, nextChecked, nextHalfChecked);\n\n      if (onUpCheckConduct) {\n        onUpCheckConduct(this, nextChecked, nextHalfChecked);\n      } else {\n        // Flush all the update\n        onCheckConductFinished();\n      }\n    } else {\n      // Flush all the update\n      onCheckConductFinished();\n    }\n  };\n\n  onDownCheckConduct = (nodeChecked) => {\n    const { children } = this.props;\n    const { rcTree: { checkStrictly, isKeyChecked, onBatchNodeCheck } } = this.context;\n    if (checkStrictly) return;\n\n    traverseTreeNodes(children, ({ node, key }) => {\n      if (isCheckDisabled(node)) return false;\n\n      if (nodeChecked !== isKeyChecked(key)) {\n        onBatchNodeCheck(key, nodeChecked, false);\n      }\n    });\n  };\n\n  onSelectorClick = (e) => {\n    if (this.isSelectable()) {\n      this.onSelect(e);\n    } else {\n      this.onCheck(e);\n    }\n  };\n\n  onSelect = (e) => {\n    if (this.isDisabled()) return;\n\n    const { rcTree: { onNodeSelect } } = this.context;\n    e.preventDefault();\n    onNodeSelect(e, this);\n  };\n\n  onCheck = (e) => {\n    if (this.isDisabled()) return;\n\n    const { disableCheckbox, checked, eventKey } = this.props;\n    const {\n      rcTree: { checkable, onBatchNodeCheck, onCheckConductFinished },\n      rcTreeNode: { onUpCheckConduct } = {},\n    } = this.context;\n\n    if (!checkable || disableCheckbox) return;\n\n    e.preventDefault();\n    const targetChecked = !checked;\n    onBatchNodeCheck(eventKey, targetChecked, false, this);\n\n    // Children conduct\n    this.onDownCheckConduct(targetChecked);\n\n    // Parent conduct\n    if (onUpCheckConduct) {\n      onUpCheckConduct(this, targetChecked, false);\n    } else {\n      onCheckConductFinished();\n    }\n  };\n\n  onMouseEnter = (e) => {\n    const { rcTree: { onNodeMouseEnter } } = this.context;\n    onNodeMouseEnter(e, this);\n  };\n\n  onMouseLeave = (e) => {\n    const { rcTree: { onNodeMouseLeave } } = this.context;\n    onNodeMouseLeave(e, this);\n  };\n\n  onContextMenu = (e) => {\n    const { rcTree: { onNodeContextMenu } } = this.context;\n    onNodeContextMenu(e, this);\n  };\n\n  onDragStart = (e) => {\n    const { rcTree: { onNodeDragStart } } = this.context;\n\n    e.stopPropagation();\n    this.setState({\n      dragNodeHighlight: true,\n    });\n    onNodeDragStart(e, this);\n\n    try {\n      // ie throw error\n      // firefox-need-it\n      e.dataTransfer.setData('text/plain', '');\n    } catch (error) {\n      // empty\n    }\n  };\n\n  onDragEnter = (e) => {\n    const { rcTree: { onNodeDragEnter } } = this.context;\n\n    e.preventDefault();\n    e.stopPropagation();\n    onNodeDragEnter(e, this);\n  };\n\n  onDragOver = (e) => {\n    const { rcTree: { onNodeDragOver } } = this.context;\n\n    e.preventDefault();\n    e.stopPropagation();\n    onNodeDragOver(e, this);\n  };\n\n  onDragLeave = (e) => {\n    const { rcTree: { onNodeDragLeave } } = this.context;\n\n    e.stopPropagation();\n    onNodeDragLeave(e, this);\n  };\n\n  onDragEnd = (e) => {\n    const { rcTree: { onNodeDragEnd } } = this.context;\n\n    e.stopPropagation();\n    this.setState({\n      dragNodeHighlight: false,\n    });\n    onNodeDragEnd(e, this);\n  };\n\n  onDrop = (e) => {\n    const { rcTree: { onNodeDrop } } = this.context;\n\n    e.preventDefault();\n    e.stopPropagation();\n    this.setState({\n      dragNodeHighlight: false,\n    });\n    onNodeDrop(e, this);\n  };\n\n  // Disabled item still can be switch\n  onExpand = (e) => {\n    const { rcTree: { onNodeExpand } } = this.context;\n    const callbackPromise = onNodeExpand(e, this);\n\n    // Promise like\n    if (callbackPromise && callbackPromise.then) {\n      this.setState({ loadStatus: LOAD_STATUS_LOADING });\n\n      callbackPromise.then(() => {\n        this.setState({ loadStatus: LOAD_STATUS_LOADED });\n      }).catch(() => {\n        this.setState({ loadStatus: LOAD_STATUS_FAILED });\n      });\n    }\n  };\n\n  // Drag usage\n  setSelectHandle = (node) => {\n    this.selectHandle = node;\n  };\n\n  getNodeChildren() {\n    const { children } = this.props;\n    const originList = toArray(children).filter(node => node);\n    const targetList = getNodeChildren(originList);\n\n    if (originList.length !== targetList.length && !onlyTreeNodeWarned) {\n      onlyTreeNodeWarned = true;\n      warning(false, 'Tree only accept TreeNode as children.');\n    }\n\n    return targetList;\n  }\n\n  getNodeState = () => {\n    const { expanded } = this.props;\n\n    if (this.isLeaf()) {\n      return null;\n    }\n\n    return expanded ? ICON_OPEN : ICON_CLOSE;\n  };\n\n  isLeaf = () => {\n    const { loadStatus } = this.state;\n    const { isLeaf, hasChildren = this.getNodeChildren().length !== 0 } = this.props;\n    const { rcTree: { loadData } } = this.context;\n\n    return (\n      isLeaf ||\n      (!loadData && !hasChildren) ||\n      (loadData && loadStatus === LOAD_STATUS_LOADED && !hasChildren)\n    );\n  };\n\n  isDisabled = () => {\n    const { disabled } = this.props;\n    const { rcTree: { disabled: treeDisabled } } = this.context;\n\n    // Follow the logic of Selectable\n    if (disabled === false) {\n      return false;\n    }\n\n    return !!(treeDisabled || disabled);\n  };\n\n  isSelectable() {\n    const { selectable } = this.props;\n    const { rcTree: { selectable: treeSelectable } } = this.context;\n\n    // Ignore when selectable is undefined or null\n    if (typeof selectable === 'boolean') {\n      return selectable;\n    }\n\n    return treeSelectable;\n  }\n\n  // Load data to avoid default expanded tree without data\n  syncLoadData = (props) => {\n    const { loadStatus } = this.state;\n    const { expanded } = props;\n    const { rcTree: { loadData } } = this.context;\n\n    if (loadData && loadStatus === LOAD_STATUS_NONE && expanded && !this.isLeaf()) {\n      this.setState({ loadStatus: LOAD_STATUS_LOADING });\n\n      loadData(this).then(() => {\n        this.setState({ loadStatus: LOAD_STATUS_LOADED });\n      }).catch(() => {\n        this.setState({ loadStatus: LOAD_STATUS_FAILED });\n      });\n    }\n  };\n\n  // Switcher\n  renderSwitcher = () => {\n    const {\n      expanded,\n      switcherIcon: switcherIconFromProps,\n    } = this.props;\n    const {\n      rcTree: {\n        prefixCls,\n        switcherIcon: switcherIconFromCtx,\n      },\n    } = this.context;\n\n    const switcherIcon = switcherIconFromProps || switcherIconFromCtx;\n\n    if (this.isLeaf()) {\n      return (\n        <span className={classNames(`${prefixCls}-switcher`, `${prefixCls}-switcher-noop`)}>\n          {typeof switcherIcon === 'function' ? switcherIcon({ ...this.props, isLeaf: true }) : switcherIcon}\n        </span>\n      );\n    }\n\n    const switcherCls = classNames(`${prefixCls}-switcher`, `${prefixCls}-switcher_${expanded ? ICON_OPEN : ICON_CLOSE}`);\n    return (\n      <span onClick={this.onExpand} className={switcherCls}>\n        {typeof switcherIcon === 'function' ? switcherIcon({ ...this.props, isLeaf: false }) : switcherIcon}\n      </span>\n    );\n  };\n\n  // Checkbox\n  renderCheckbox = () => {\n    const { checked, halfChecked, disableCheckbox } = this.props;\n    const { rcTree: { prefixCls, checkable } } = this.context;\n    const disabled = this.isDisabled();\n\n    if (!checkable) return null;\n\n    // [Legacy] Custom element should be separate with `checkable` in future\n    const $custom = typeof checkable !== 'boolean' ? checkable : null;\n\n    return (\n      <span\n        className={classNames(\n          `${prefixCls}-checkbox`,\n          checked && `${prefixCls}-checkbox-checked`,\n          !checked && halfChecked && `${prefixCls}-checkbox-indeterminate`,\n          (disabled || disableCheckbox) && `${prefixCls}-checkbox-disabled`,\n        )}\n        onClick={this.onCheck}\n      >\n        {$custom}\n      </span>\n    );\n  };\n\n  renderIcon = () => {\n    const { loadStatus } = this.state;\n    const { rcTree: { prefixCls } } = this.context;\n\n    return loadStatus === LOAD_STATUS_LOADING ? (\n      <Progress\n        type=\"loading\"\n        size=\"small\"\n        width={14}\n        className={`${prefixCls}-icon_loading`}\n      />) : (\n      <span\n        className={classNames(\n          `${prefixCls}-iconEle`,\n          `${prefixCls}-icon__${this.getNodeState() || 'docu'}`,\n        )}\n      />\n    );\n  };\n\n  // Icon + Title\n  renderSelector = () => {\n    const { loadStatus, dragNodeHighlight } = this.state;\n    const { title, selected, icon } = this.props;\n    const { rcTree: { prefixCls, showIcon, draggable, loadData } } = this.context;\n    const disabled = this.isDisabled();\n\n    const wrapClass = `${prefixCls}-node-content-wrapper`;\n\n    // Icon - Still show loading icon when loading without showIcon\n    let $icon;\n\n    if (showIcon) {\n      $icon = icon ? (\n        <span\n          className={classNames(\n            `${prefixCls}-iconEle`,\n            `${prefixCls}-icon__customize`,\n          )}\n        >\n          {typeof icon === 'function' ? createElement(icon, this.props) : icon}\n        </span>\n      ) : this.renderIcon();\n    } else if (loadData && loadStatus === LOAD_STATUS_LOADING) {\n      $icon = this.renderIcon();\n    }\n\n    // Title\n    const $title = <span className={`${prefixCls}-title`}>{title}</span>;\n\n    return (\n      <span\n        ref={this.setSelectHandle}\n        title={typeof title === 'string' ? title : ''}\n        className={classNames(\n          `${wrapClass}`,\n          `${wrapClass}-${this.getNodeState() || 'normal'}`,\n          (!disabled && (selected || dragNodeHighlight)) && `${prefixCls}-node-selected`,\n          (!disabled && draggable) && 'draggable',\n        )}\n        draggable={(!disabled && draggable) || undefined}\n        aria-grabbed={(!disabled && draggable) || undefined}\n\n        onMouseEnter={this.onMouseEnter}\n        onMouseLeave={this.onMouseLeave}\n        onContextMenu={this.onContextMenu}\n        onClick={this.onSelectorClick}\n        onDragStart={this.onDragStart}\n      >\n          {$icon}{$title}\n        </span>\n    );\n  };\n\n  // Children list wrapped with `Animation`\n  renderChildren = () => {\n    const { expanded, pos, wrapper } = this.props;\n    const {\n      rcTree: {\n        prefixCls,\n        openTransitionName, openAnimation,\n        renderTreeNode,\n      },\n    } = this.context;\n\n    // [Legacy] Animation control\n    const renderFirst = this.renderFirst;\n    this.renderFirst = 1;\n    let transitionAppear = true;\n    if (!renderFirst && expanded) {\n      transitionAppear = false;\n    }\n\n    const animProps = {};\n    if (openTransitionName) {\n      animProps.transitionName = openTransitionName;\n    } else if (typeof openAnimation === 'object') {\n      animProps.animation = { ...openAnimation };\n      if (!transitionAppear) {\n        delete animProps.animation.appear;\n      }\n    }\n\n    // Children TreeNode\n    const nodeList = this.getNodeChildren();\n\n    if (nodeList.length === 0) {\n      return null;\n    }\n\n    let $children;\n    if (expanded) {\n      let treeNodes = Children.map(nodeList, (node, index) => (\n        renderTreeNode(node, index, pos)\n      ));\n      if (wrapper) {\n        treeNodes = wrapper(treeNodes);\n      }\n      $children = (\n        <ul hidden={!expanded}>\n          {treeNodes}\n        </ul>\n      );\n    }\n\n    return (\n      <Animate\n        {...animProps}\n        hiddenProp=\"hidden\"\n        transitionAppear={transitionAppear}\n        component=\"\"\n      >\n        {$children}\n      </Animate>\n    );\n  };\n\n  render() {\n    const {\n      className,\n      dragOver, dragOverGapTop, dragOverGapBottom,\n    } = this.props;\n    const {\n      rcTree: {\n        prefixCls,\n        filterTreeNode,\n      },\n    } = this.context;\n    const disabled = this.isDisabled();\n\n    return (\n      <li\n        className={classNames(className, {\n          [`${prefixCls}-treenode-disabled`]: disabled,\n          'drag-over': !disabled && dragOver,\n          'drag-over-gap-top': !disabled && dragOverGapTop,\n          'drag-over-gap-bottom': !disabled && dragOverGapBottom,\n          'filter-node': filterTreeNode && filterTreeNode(this),\n        })}\n\n        onDragEnter={this.onDragEnter}\n        onDragOver={this.onDragOver}\n        onDragLeave={this.onDragLeave}\n        onDrop={this.onDrop}\n        onDragEnd={this.onDragEnd}\n      >\n        {this.renderSwitcher()}\n        {this.renderCheckbox()}\n        {this.renderSelector()}\n        {this.renderChildren()}\n      </li>\n    );\n  }\n}\n"]}