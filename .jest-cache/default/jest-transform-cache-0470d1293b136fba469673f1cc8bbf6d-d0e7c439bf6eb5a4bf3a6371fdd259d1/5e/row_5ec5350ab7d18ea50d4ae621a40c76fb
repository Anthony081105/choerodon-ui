d0b25d00d5b43049c4327500e486b548
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _omit = _interopRequireDefault(require("lodash/omit"));

var _Responsive = _interopRequireDefault(require("../responsive/Responsive"));

var _configure = require("../configure");

var defaultGutter = 0;

var Row =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(Row, _Component);

  function Row() {
    var _this;

    (0, _classCallCheck2["default"])(this, Row);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(Row).apply(this, arguments));

    _this.renderRow = function (_ref) {
      var _classNames;

      var _ref2 = (0, _slicedToArray2["default"])(_ref, 1),
          _ref2$ = _ref2[0],
          gutter = _ref2$ === void 0 ? defaultGutter : _ref2$;

      var _this$props = _this.props,
          type = _this$props.type,
          justify = _this$props.justify,
          align = _this$props.align,
          className = _this$props.className,
          style = _this$props.style,
          children = _this$props.children,
          customizePrefixCls = _this$props.prefixCls,
          others = (0, _objectWithoutProperties2["default"])(_this$props, ["type", "justify", "align", "className", "style", "children", "prefixCls"]);
      var prefixCls = (0, _configure.getPrefixCls)('row', customizePrefixCls);
      var classes = (0, _classnames["default"])((_classNames = {}, (0, _defineProperty2["default"])(_classNames, prefixCls, !type), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-").concat(type), type), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-").concat(type, "-").concat(justify), type && justify), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-").concat(type, "-").concat(align), type && align), _classNames), className);
      var rowStyle = gutter > 0 ? (0, _objectSpread2["default"])({
        marginLeft: gutter / -2,
        marginRight: gutter / -2
      }, style) : style;

      var cols = _react.Children.map(children, function (col) {
        if (!col) {
          return null;
        }

        if (col.props && gutter > 0) {
          return (0, _react.cloneElement)(col, {
            style: (0, _objectSpread2["default"])({
              paddingLeft: gutter / 2,
              paddingRight: gutter / 2
            }, col.props.style)
          });
        }

        return col;
      });

      var otherProps = (0, _objectSpread2["default"])({}, others);
      delete otherProps.gutter;
      return _react["default"].createElement("div", (0, _extends2["default"])({}, (0, _omit["default"])(otherProps, ['rowIndex', 'colIndex']), {
        className: classes,
        style: rowStyle
      }), cols);
    };

    return _this;
  }

  (0, _createClass2["default"])(Row, [{
    key: "render",
    value: function render() {
      var gutter = this.props.gutter;
      return _react["default"].createElement(_Responsive["default"], {
        items: [gutter]
      }, this.renderRow);
    }
  }]);
  return Row;
}(_react.Component);

exports["default"] = Row;
Row.displayName = 'Row';
Row.defaultProps = {
  gutter: defaultGutter
};
Row.propTypes = {
  type: _propTypes["default"].string,
  align: _propTypes["default"].string,
  justify: _propTypes["default"].string,
  className: _propTypes["default"].string,
  children: _propTypes["default"].node,
  gutter: _propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].number]),
  prefixCls: _propTypes["default"].string
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,