{"version":3,"sources":["/Users/huihuawk/Documents/opt/choerodon-ui/components/table/FilterSelect.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { Component, Key, MouseEventHandler, ReactElement } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport Icon from '../icon';\nimport { ColumnProps, TableStateFilters } from './interface';\nimport Select, { LabeledValue, OptionProps } from '../select';\nimport { filterByInputValue, getColumnKey } from './util';\nimport Checkbox from '../checkbox/Checkbox';\nimport { SelectMode } from '../select/enum';\nimport { getPrefixCls } from '../configure';\n\nconst { Option, OptGroup } = Select;\nconst PAIR_SPLIT = ':';\nconst VALUE_SPLIT = '、';\nconst OPTION_OR = 'option-or';\nexport const VALUE_OR = 'OR';\n\nfunction pairValue<T>(column: ColumnProps<T>, value: string = '') {\n  const { filters } = column;\n  const found = filters && filters.find(filter => String(filter.value) === value);\n  return {\n    key: `${getColumnKey(column)}${PAIR_SPLIT}${value}`,\n    label: [column.filterTitle || column.title, PAIR_SPLIT, ' ', found ? found.text : value],\n  };\n}\n\nfunction barPair(value: string, index: number) {\n  return {\n    key: `${value}${PAIR_SPLIT}${index}`,\n    label: [value],\n  };\n}\n\nexport interface FilterSelectProps<T> {\n  prefixCls?: string;\n  placeholder?: string;\n  dataSource?: T[];\n  filters?: string[];\n  columnFilters?: TableStateFilters;\n  columns?: ColumnProps<T>[];\n  onFilter?: (column: ColumnProps<T>, nextFilters: string[]) => void;\n  onChange?: (filters?: any[]) => void;\n  onClear?: () => void;\n  multiple?: boolean;\n  getPopupContainer?: (triggerNode?: Element) => HTMLElement;\n}\n\nexport interface FilterSelectState<T> {\n  columns: ColumnProps<T>[];\n  filters: string[];\n  columnFilters: TableStateFilters;\n  selectColumn?: ColumnProps<T>;\n  inputValue: string;\n  checked: any[];\n}\n\nfunction removeDoubleOr(filters: LabeledValue[]): LabeledValue[] {\n  return filters.filter(({ label }, index) => label !== VALUE_OR || label !== filters[index + 1]);\n}\n\nexport default class FilterSelect<T> extends Component<FilterSelectProps<T>, FilterSelectState<T>> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: this.getColumnsWidthFilters(),\n      filters: props.filters || [],\n      columnFilters: props.columnFilters || {},\n      inputValue: '',\n      selectColumn: undefined,\n      checked: [],\n    };\n  }\n\n  state: FilterSelectState<T>;\n\n  rcSelect: any;\n\n  columnRefs: any = {};\n\n  componentWillReceiveProps(nextProps: FilterSelectProps<T>) {\n    this.setState({\n      columns: this.getColumnsWidthFilters(nextProps),\n    });\n    if (nextProps.filters) {\n      this.setState({\n        filters: nextProps.filters,\n      });\n    }\n    if (nextProps.columnFilters) {\n      this.setState({\n        columnFilters: nextProps.columnFilters,\n      });\n    }\n  }\n\n  getPrefixCls() {\n    const { prefixCls } = this.props;\n    return `${prefixCls}-filter-select`;\n  }\n\n  handleDropdownMouseDown: MouseEventHandler<any> = e => {\n    e.preventDefault();\n    this.rcSelect.focus();\n  };\n\n  render() {\n    const { placeholder, getPopupContainer } = this.props;\n    const { inputValue } = this.state;\n    const prefixCls = this.getPrefixCls();\n    const multiple = this.isMultiple();\n    return (\n      <div className={prefixCls}>\n        <div className={`${prefixCls}-icon`}>\n          <Icon type=\"filter_list\" />\n        </div>\n        <Select\n          ref={this.saveRef}\n          mode={SelectMode.tags}\n          filterOption={false}\n          onChange={this.handleChange}\n          onSelect={multiple ? this.handleSelect : undefined}\n          onInput={this.handleInput}\n          onInputKeyDown={this.handleInputKeyDown}\n          onClear={this.handleClear}\n          value={this.getValue()}\n          placeholder={placeholder}\n          notFoundContent={false}\n          showNotFindInputItem={false}\n          showNotFindSelectedItem={false}\n          dropdownMatchSelectWidth={false}\n          defaultActiveFirstOption={!inputValue}\n          dropdownStyle={{ minWidth: 256 }}\n          onDropdownMouseDown={this.handleDropdownMouseDown}\n          dropdownClassName={`${prefixCls}-dropdown`}\n          getRootDomNode={this.getRootDomNode}\n          showCheckAll={false}\n          onChoiceItemClick={this.handleChoiceItemClick}\n          getPopupContainer={getPopupContainer}\n          allowClear\n          labelInValue\n          blurChange={false}\n          border={false}\n        >\n          {this.getOptions()}\n        </Select>\n        <div className={`${prefixCls}-columns`}>{this.renderColumnsTitle()}</div>\n      </div>\n    );\n  }\n\n  renderColumnsTitle() {\n    const { columns } = this.state;\n    this.columnRefs = {};\n    return columns.map(col => {\n      const key = getColumnKey(col);\n      return (\n        <span ref={this.saveColumnRef.bind(this, key)} key={key}>\n          {col.filterTitle || col.title}\n        </span>\n      );\n    });\n  }\n\n  isMultiple() {\n    const { selectColumn } = this.state;\n    if (selectColumn) {\n      return selectColumn.filterMultiple;\n    }\n    return false;\n  }\n\n  saveRef = (node: any) => {\n    if (node) {\n      this.rcSelect = node.rcSelect;\n    }\n  };\n\n  saveColumnRef = (key: Key, node: any) => {\n    if (node) {\n      this.columnRefs[key] = node;\n    }\n  };\n\n  handleInputKeyDown = (e: any) => {\n    const { value } = e.target;\n    if (e.keyCode === 13 && !e.isDefaultPrevented() && value) {\n      const { filters, columnFilters, selectColumn } = this.state;\n      if (selectColumn) {\n        const key = getColumnKey(selectColumn);\n        if (key) {\n          const { filters: columFilters } = selectColumn;\n          const filterText = value.split(this.getColumnTitle(selectColumn)).slice(1);\n          columnFilters[key] = filterText;\n          const found = columFilters && columFilters.find(filter => filter.text === filterText[0]);\n          const filterValue = found ? String(found.value) : filterText[0];\n          this.fireColumnFilterChange(key, [filterValue]);\n        }\n      } else {\n        filters.push(value);\n        this.fireChange(filters);\n      }\n      this.setState({\n        inputValue: '',\n        filters,\n        columnFilters,\n        selectColumn: undefined,\n      });\n      this.rcSelect.setState({\n        inputValue: '',\n      });\n    }\n  };\n\n  handleInput = (value: string) => {\n    let { selectColumn } = this.state;\n    if (selectColumn) {\n      if (value.indexOf(this.getColumnTitle(selectColumn)) === -1) {\n        selectColumn = undefined;\n      }\n    }\n    this.setState({\n      selectColumn,\n      inputValue: value,\n    });\n  };\n\n  handleChoiceItemClick = ({ key }: LabeledValue) => {\n    const pair = key.split(PAIR_SPLIT);\n    if (pair.length > 1) {\n      const columnKey = pair.shift();\n      const selectColumn = this.findColumn(columnKey as string);\n      if (selectColumn && selectColumn.filterMultiple) {\n        const { filters } = selectColumn;\n        const checked = pair\n          .join(PAIR_SPLIT)\n          .split(VALUE_SPLIT)\n          .map(text => {\n            const found = filters && filters.find(filter => filter.text === text);\n            return found ? found.value : text;\n          });\n        this.setState({\n          selectColumn,\n          checked,\n        });\n      }\n    }\n  };\n\n  handleSelect = ({ key }: LabeledValue) => {\n    const { checked, selectColumn } = this.state;\n    if (key === '__ok__') {\n      this.handleMultiCheckConfirm();\n    } else if (key !== `${selectColumn && selectColumn.title}:`) {\n      const index = checked.indexOf(key);\n      if (index === -1) {\n        checked.push(key);\n      } else {\n        checked.splice(index, 1);\n      }\n      this.setState(\n        {\n          checked,\n        },\n        () => {\n          if (selectColumn) {\n            const { columnFilters } = this.state;\n            const columnKey = getColumnKey(selectColumn);\n            if (columnKey) {\n              const filters = columnFilters[columnKey];\n              if (!filters || !filters.length) {\n                this.rcSelect.setState({\n                  inputValue: this.getColumnTitle(selectColumn),\n                });\n              }\n            }\n          }\n        },\n      );\n    }\n    return false;\n  };\n\n  handleMultiCheckConfirm = () => {\n    const { selectColumn, checked } = this.state;\n    if (selectColumn) {\n      const columnKey = getColumnKey(selectColumn);\n      if (columnKey) {\n        this.fireColumnFilterChange(columnKey, checked);\n        this.setState({\n          selectColumn: undefined,\n          checked: [],\n        });\n        this.rcSelect.setState({\n          inputValue: '',\n        });\n      }\n    }\n  };\n\n  handleClear = () => {\n    this.setState({ selectColumn: undefined });\n  };\n\n  handleChange = (changedValue: LabeledValue[]) => {\n    const { state, rcSelect } = this;\n    const { selectColumn, inputValue, columnFilters } = state;\n    let { filters } = state;\n    const all = this.getValue();\n    let change = false;\n    if (changedValue.length > all.length) {\n      const value = changedValue.pop();\n      if (inputValue) {\n        if (rcSelect.state.inputValue && value) {\n          change = true;\n          filters.push(value.label as string);\n        }\n        this.setState({\n          selectColumn: undefined,\n          inputValue: '',\n          filters,\n        });\n      } else if (value && value.label === OPTION_OR) {\n        filters.push(VALUE_OR);\n        change = true;\n        this.setState({\n          filters,\n        });\n      } else if (selectColumn) {\n        if (!selectColumn.filterMultiple) {\n          const columnKey = getColumnKey(selectColumn);\n          if (rcSelect.state.inputValue && value && columnKey) {\n            this.fireColumnFilterChange(columnKey, [value.key]);\n          }\n          this.setState({\n            selectColumn: undefined,\n          });\n        } else {\n          this.setState({\n            selectColumn: undefined,\n            checked: [],\n          });\n          rcSelect.setState({\n            inputValue: '',\n          });\n        }\n      } else if (value) {\n        const column = this.findColumn(value.key);\n        const columnFilter = columnFilters[value.key];\n        if (column && (!columnFilter || !columnFilter.length)) {\n          rcSelect.setState({\n            inputValue: this.getColumnTitle(column),\n          });\n        }\n        this.setState({\n          selectColumn: column,\n        });\n      }\n    } else {\n      filters = this.changeValue(changedValue, rcSelect.state.value);\n      if (state.filters.length !== filters.length) {\n        change = true;\n      }\n      this.setState({\n        inputValue: '',\n        filters,\n      });\n    }\n    if (change) {\n      this.fireChange(filters);\n    }\n  };\n\n  fireChange(filters: any[]) {\n    const { onChange } = this.props;\n    if (typeof onChange === 'function') {\n      onChange(filters);\n    }\n  }\n\n  fireColumnFilterChange(columnKey: string | number, value: any[]) {\n    const col = this.findColumn(columnKey);\n    const { onFilter } = this.props;\n    if (col && onFilter) {\n      onFilter(col, value || null);\n    }\n  }\n\n  changeValue(changedValue: LabeledValue[], oldValue: any[]): string[] {\n    const { state } = this;\n    const changedColumnKeys: any[] = [];\n    const changedColumnFilters = state.columnFilters;\n    const columnFiltersValues = this.getColumnFiltersValues();\n    if (changedValue.length) {\n      const len = columnFiltersValues.length;\n      if (len > 0) {\n        const index = oldValue.findIndex(\n          (item, i) => item !== (changedValue[i] && changedValue[i].key),\n        );\n        if (index < columnFiltersValues.length) {\n          const deleted = changedValue.splice(0, len - 1);\n          if (deleted.length < 2 && changedValue[0] && changedValue[0].label === VALUE_OR) {\n            changedValue.shift();\n          }\n          let value = columnFiltersValues[index];\n          if (value === VALUE_OR) {\n            value = columnFiltersValues[index + 1];\n          }\n          const columnKey = Object.keys(value)[0];\n          const columnFilters = changedColumnFilters[columnKey].slice();\n          const column = this.findColumn(columnKey);\n          if (column) {\n            const { filters } = column;\n            value[columnKey].split(VALUE_SPLIT).forEach((text: string) => {\n              const found = filters && filters.find(filter => filter.text === text);\n              const filterIndex = columnFilters.indexOf(found ? found.value : text);\n              if (filterIndex !== -1) {\n                columnFilters.splice(filterIndex, 1);\n                changedColumnFilters[columnKey] = columnFilters;\n                if (changedColumnKeys.indexOf(columnKey) === -1) {\n                  changedColumnKeys.push(columnKey);\n                }\n              }\n            });\n          }\n        } else {\n          changedValue.splice(0, len);\n        }\n      }\n      changedColumnKeys.forEach(key => {\n        this.fireColumnFilterChange(key, changedColumnFilters[key]);\n      });\n    } else {\n      const { onClear } = this.props;\n      if (onClear) {\n        onClear();\n      }\n    }\n    return removeDoubleOr(changedValue).map(item => {\n      const label: any = item.label;\n      if (label.constructor === Array) {\n        return label && label[0];\n      }\n      return label;\n    });\n  }\n\n  getColumnFiltersValues() {\n    const values: any[] = [];\n    const { columnFilters } = this.state;\n    Object.keys(columnFilters).forEach(c => {\n      const filteredValue = columnFilters[c];\n      const column = this.findColumn(c);\n      if (filteredValue && filteredValue.length && column) {\n        const { filters } = column;\n        values.push({\n          [c]: filteredValue\n            .map(value => {\n              const found =\n                filters && filters.find(filter => String(filter.value) === String(value));\n              return found ? found.text : value;\n            })\n            .join(VALUE_SPLIT),\n        });\n      }\n    });\n    return values;\n  }\n\n  getValue() {\n    const { filters } = this.state;\n    return this.getColumnFiltersValues()\n      .map(this.toValueString)\n      .concat(filters.map(barPair));\n  }\n\n  getInputFilterOptions(inputValue: string) {\n    const { columns, dataSource } = this.props;\n    const options: ReactElement<OptionProps>[] = [];\n    if (dataSource && columns) {\n      const values: { [x: string]: boolean } = {};\n      filterByInputValue<T>(\n        dataSource,\n        columns,\n        inputValue,\n        (record: T, column: ColumnProps<T>) => {\n          const { dataIndex } = column;\n          if (dataIndex) {\n            const value = (record as any)[dataIndex].toString();\n            if (!values[value]) {\n              values[value] = true;\n              options.push(\n                <Option key={value} value={value}>\n                  {value}\n                </Option>,\n              );\n            }\n          }\n        },\n      );\n    }\n    return options;\n  }\n\n  getOptions() {\n    const { state } = this;\n    const { selectColumn, inputValue, columns, checked, columnFilters } = state;\n    if (selectColumn) {\n      if (inputValue && inputValue.split(PAIR_SPLIT)[1]) {\n        return null;\n      }\n      const { filters, filterMultiple } = selectColumn;\n      const columnKey = getColumnKey(selectColumn);\n      if (filters) {\n        return filters\n          .filter(filter => !filter.children)\n          .map((filter, i) => {\n            const value = String(filter.value);\n            let text: any = filter.text;\n            if (filterMultiple && columnKey) {\n              let _checked = columnFilters[columnKey];\n              if (_checked && !checked.length) {\n                state.checked = _checked.slice();\n              } else {\n                _checked = checked;\n              }\n              text = [\n                <Checkbox key=\"ck\" className=\"multiple\" checked={_checked.indexOf(value) !== -1} />,\n                text,\n              ];\n            }\n            return (\n              <Option key={`filter-${String(i)}`} value={value}>\n                {text}\n              </Option>\n            );\n          })\n          .concat(\n            filterMultiple ? (\n              <OptGroup key=\"ok\">\n                <Option value=\"__ok__\" className={`${this.getPrefixCls()}-ok-btn`}>\n                  确认\n                </Option>\n              </OptGroup>\n            ) : (\n              []\n            ),\n          );\n      }\n    } else if (inputValue) {\n      return this.getInputFilterOptions(inputValue);\n    } else {\n      const { filters } = this.state;\n      const { multiple } = this.props;\n      const { length } = filters;\n      const value = this.getColumnFiltersValues();\n      const keys = value.map(item => Object.keys(item)[0]);\n      const options = columns.reduce((opts: any[], column, i) => {\n        const key = getColumnKey(column, i);\n        if (keys.indexOf(key as string) === -1 || column.filterMultiple) {\n          opts.push(\n            <Option key={`column-${key}`} value={key}>\n              <span>{column.filterTitle || column.title}</span>\n            </Option>,\n          );\n        }\n        return opts;\n      }, []);\n      if (multiple && (length ? filters[length - 1] !== VALUE_OR : value.length)) {\n        return [\n          <OptGroup key=\"or\">\n            <Option value={OPTION_OR}>OR</Option>\n          </OptGroup>,\n          <OptGroup key=\"all\">{options}</OptGroup>,\n        ];\n      }\n      return options;\n    }\n  }\n\n  getColumnsWidthFilters(props = this.props) {\n    return (props.columns || []).filter(column => column.filters instanceof Array);\n  }\n\n  findColumn(myKey: string | number) {\n    const { columns } = this.state;\n    return columns.find(c => getColumnKey(c) === myKey);\n  }\n\n  toValueString = (item: any) => {\n    const key = Object.keys(item)[0];\n    const col = this.findColumn(key);\n    if (col) {\n      return pairValue(col, item[key]);\n    }\n    return '';\n  };\n\n  getRootDomNode = (): HTMLElement => {\n    return (findDOMNode(this) as HTMLElement).querySelector(\n      `.${getPrefixCls('select')}-search__field`,\n    ) as HTMLElement;\n  };\n\n  getColumnTitle(column: ColumnProps<T>) {\n    const columnKey = getColumnKey(column);\n    if (columnKey) {\n      return `${this.columnRefs[columnKey].textContent}${PAIR_SPLIT}`;\n    }\n    return '';\n  }\n}\n"]}