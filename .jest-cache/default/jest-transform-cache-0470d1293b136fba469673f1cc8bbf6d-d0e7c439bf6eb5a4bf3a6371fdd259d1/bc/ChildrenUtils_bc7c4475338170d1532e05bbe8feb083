712d1be68526c5fb9bd703dfa5ab157d
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toArrayChildren = toArrayChildren;
exports.findChildInChildrenByKey = findChildInChildrenByKey;
exports.findShownChildInChildrenByKey = findShownChildInChildrenByKey;
exports.isSameChildren = isSameChildren;
exports.mergeChildren = mergeChildren;

var _react = require("react");

function toArrayChildren(children) {
  var ret = [];

  _react.Children.forEach(children, function (child) {
    if ((0, _react.isValidElement)(child)) {
      ret.push(child);
    }
  });

  return ret;
}

function findChildInChildrenByKey(children, key) {
  if (children) {
    return children.find(function (child) {
      return child && child.key === key;
    });
  }
}

function findShownChildInChildrenByKey(children, key, hiddenProp) {
  var ret;

  if (children) {
    children.forEach(function (child) {
      if (child && child.key === key && !child.props[hiddenProp]) {
        if (ret) {
          throw new Error('two child with same key for animate children');
        }

        ret = child;
      }
    });
  }

  return ret;
} // export function findHiddenChildInChildrenByKey(children, key, showProp):boolean {
//   let found = false;
//   if (children) {
//     children.forEach(function (child) {
//       if (found) {
//         return;
//       }
//       found = child && child.key === key && !child.props[showProp];
//     });
//   }
//   return found;
// }


function isSameChildren(c1, c2, hiddenProp) {
  var same = c1.length === c2.length;

  if (same) {
    c1.forEach(function (child, index) {
      var child2 = c2[index];

      if (child && child2) {
        if (child && !child2 || !child && child2) {
          same = false;
        } else if (child.key !== child2.key) {
          same = false;
        } else if (hiddenProp && child.props[hiddenProp] !== child2.props[hiddenProp]) {
          same = false;
        }
      }
    });
  }

  return same;
}

function mergeChildren(prev, next) {
  var ret = [];
  var nextChildrenPending = {};
  var pendingChildren = [];
  prev.forEach(function (child) {
    if (child && child.key && findChildInChildrenByKey(next, child.key)) {
      if (pendingChildren.length) {
        nextChildrenPending[child.key] = pendingChildren;
        pendingChildren = [];
      }
    } else {
      pendingChildren.push(child);
    }
  });
  next.forEach(function (child) {
    if (child && child.key && {}.hasOwnProperty.call(nextChildrenPending, child.key)) {
      ret = ret.concat(nextChildrenPending[child.key]);
    }

    ret.push(child);
  });
  return ret.concat(pendingChildren);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFuaW1hdGUvQ2hpbGRyZW5VdGlscy5qc3giXSwibmFtZXMiOlsicmV0IiwiQ2hpbGRyZW4iLCJjaGlsZCIsImNoaWxkcmVuIiwic2FtZSIsImMxIiwiYzIiLCJjaGlsZDIiLCJoaWRkZW5Qcm9wIiwibmV4dENoaWxkcmVuUGVuZGluZyIsInBlbmRpbmdDaGlsZHJlbiIsInByZXYiLCJmaW5kQ2hpbGRJbkNoaWxkcmVuQnlLZXkiLCJuZXh0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLElBQUEsTUFBQSxHQUFBLE9BQUEsQ0FBQSxPQUFBLENBQUE7O0FBQ08sU0FBQSxlQUFBLENBQUEsUUFBQSxFQUFtQztBQUN0QyxNQUFNQSxHQUFHLEdBQVQsRUFBQTs7QUFDQUMsRUFBQUEsTUFBQUEsQ0FBQUEsUUFBQUEsQ0FBQUEsT0FBQUEsQ0FBQUEsUUFBQUEsRUFBMkIsVUFBQSxLQUFBLEVBQVM7QUFDaEMsUUFBSSxDQUFBLEdBQUEsTUFBQSxDQUFBLGNBQUEsRUFBSixLQUFJLENBQUosRUFBMkI7QUFDdkJELE1BQUFBLEdBQUcsQ0FBSEEsSUFBQUEsQ0FBQUEsS0FBQUE7QUFDSDtBQUhMQyxHQUFBQTs7QUFLQSxTQUFBLEdBQUE7QUFDSDs7QUFDTSxTQUFBLHdCQUFBLENBQUEsUUFBQSxFQUFBLEdBQUEsRUFBaUQ7QUFDcEQsTUFBQSxRQUFBLEVBQWM7QUFDVixXQUFPLFFBQVEsQ0FBUixJQUFBLENBQWMsVUFBQSxLQUFBLEVBQUs7QUFBQSxhQUFJQyxLQUFLLElBQUlBLEtBQUssQ0FBTEEsR0FBQUEsS0FBYixHQUFBO0FBQTFCLEtBQU8sQ0FBUDtBQUNIO0FBQ0o7O0FBQ00sU0FBQSw2QkFBQSxDQUFBLFFBQUEsRUFBQSxHQUFBLEVBQUEsVUFBQSxFQUFrRTtBQUNyRSxNQUFBLEdBQUE7O0FBQ0EsTUFBQSxRQUFBLEVBQWM7QUFDVkMsSUFBQUEsUUFBUSxDQUFSQSxPQUFBQSxDQUFpQixVQUFBLEtBQUEsRUFBUztBQUN0QixVQUFJRCxLQUFLLElBQUlB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bGRyZW4sIGlzVmFsaWRFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuZXhwb3J0IGZ1bmN0aW9uIHRvQXJyYXlDaGlsZHJlbihjaGlsZHJlbikge1xuICAgIGNvbnN0IHJldCA9IFtdO1xuICAgIENoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGNoaWxkID0+IHtcbiAgICAgICAgaWYgKGlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgICAgICAgcmV0LnB1c2goY2hpbGQpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmaW5kQ2hpbGRJbkNoaWxkcmVuQnlLZXkoY2hpbGRyZW4sIGtleSkge1xuICAgIGlmIChjaGlsZHJlbikge1xuICAgICAgICByZXR1cm4gY2hpbGRyZW4uZmluZChjaGlsZCA9PiBjaGlsZCAmJiBjaGlsZC5rZXkgPT09IGtleSk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRTaG93bkNoaWxkSW5DaGlsZHJlbkJ5S2V5KGNoaWxkcmVuLCBrZXksIGhpZGRlblByb3ApIHtcbiAgICBsZXQgcmV0O1xuICAgIGlmIChjaGlsZHJlbikge1xuICAgICAgICBjaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgICAgICAgIGlmIChjaGlsZCAmJiBjaGlsZC5rZXkgPT09IGtleSAmJiAhY2hpbGQucHJvcHNbaGlkZGVuUHJvcF0pIHtcbiAgICAgICAgICAgICAgICBpZiAocmV0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndHdvIGNoaWxkIHdpdGggc2FtZSBrZXkgZm9yIGFuaW1hdGUgY2hpbGRyZW4nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0ID0gY2hpbGQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufVxuLy8gZXhwb3J0IGZ1bmN0aW9uIGZpbmRIaWRkZW5DaGlsZEluQ2hpbGRyZW5CeUtleShjaGlsZHJlbiwga2V5LCBzaG93UHJvcCk6Ym9vbGVhbiB7XG4vLyAgIGxldCBmb3VuZCA9IGZhbHNlO1xuLy8gICBpZiAoY2hpbGRyZW4pIHtcbi8vICAgICBjaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuLy8gICAgICAgaWYgKGZvdW5kKSB7XG4vLyAgICAgICAgIHJldHVybjtcbi8vICAgICAgIH1cbi8vICAgICAgIGZvdW5kID0gY2hpbGQgJiYgY2hpbGQua2V5ID09PSBrZXkgJiYgIWNoaWxkLnByb3BzW3Nob3dQcm9wXTtcbi8vICAgICB9KTtcbi8vICAgfVxuLy8gICByZXR1cm4gZm91bmQ7XG4vLyB9XG5leHBvcnQgZnVuY3Rpb24gaXNTYW1lQ2hpbGRyZW4oYzEsIGMyLCBoaWRkZW5Qcm9wKSB7XG4gICAgbGV0IHNhbWUgPSBjMS5sZW5ndGggPT09IGMyLmxlbmd0aDtcbiAgICBpZiAoc2FtZSkge1xuICAgICAgICBjMS5mb3JFYWNoKChjaGlsZCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkMiA9IGMyW2luZGV4XTtcbiAgICAgICAgICAgIGlmIChjaGlsZCAmJiBjaGlsZDIpIHtcbiAgICAgICAgICAgICAgICBpZiAoKGNoaWxkICYmICFjaGlsZDIpIHx8ICghY2hpbGQgJiYgY2hpbGQyKSkge1xuICAgICAgICAgICAgICAgICAgICBzYW1lID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNoaWxkLmtleSAhPT0gY2hpbGQyLmtleSkge1xuICAgICAgICAgICAgICAgICAgICBzYW1lID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGhpZGRlblByb3AgJiYgY2hpbGQucHJvcHNbaGlkZGVuUHJvcF0gIT09IGNoaWxkMi5wcm9wc1toaWRkZW5Qcm9wXSkge1xuICAgICAgICAgICAgICAgICAgICBzYW1lID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHNhbWU7XG59XG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VDaGlsZHJlbihwcmV2LCBuZXh0KSB7XG4gICAgbGV0IHJldCA9IFtdO1xuICAgIGNvbnN0IG5leHRDaGlsZHJlblBlbmRpbmcgPSB7fTtcbiAgICBsZXQgcGVuZGluZ0NoaWxkcmVuID0gW107XG4gICAgcHJldi5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgICAgaWYgKGNoaWxkICYmIGNoaWxkLmtleSAmJiBmaW5kQ2hpbGRJbkNoaWxkcmVuQnlLZXkobmV4dCwgY2hpbGQua2V5KSkge1xuICAgICAgICAgICAgaWYgKHBlbmRpbmdDaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBuZXh0Q2hpbGRyZW5QZW5kaW5nW2NoaWxkLmtleV0gPSBwZW5kaW5nQ2hpbGRyZW47XG4gICAgICAgICAgICAgICAgcGVuZGluZ0NoaWxkcmVuID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwZW5kaW5nQ2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBuZXh0LmZvckVhY2goY2hpbGQgPT4ge1xuICAgICAgICBpZiAoY2hpbGQgJiYgY2hpbGQua2V5ICYmIHt9Lmhhc093blByb3BlcnR5LmNhbGwobmV4dENoaWxkcmVuUGVuZGluZywgY2hpbGQua2V5KSkge1xuICAgICAgICAgICAgcmV0ID0gcmV0LmNvbmNhdChuZXh0Q2hpbGRyZW5QZW5kaW5nW2NoaWxkLmtleV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldC5wdXNoKGNoaWxkKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0LmNvbmNhdChwZW5kaW5nQ2hpbGRyZW4pO1xufVxuIl19